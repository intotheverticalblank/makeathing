------- FILE c:\Users\Steve\Desktop\2018dev\7800\7800basic\projects\lessons\lesson1_gfx_modes\lesson1_1.bas.asm LEVEL 1 PASS 3
      1  10000 ????						; MACRO.H
      2  10000 ????
      3  10000 ????						; Based on the 2600 macro.h file.
      4  10000 ????						; Macros irrelevant to the 7800 have been removed, and the sleep macro 
      5  10000 ????						; has been adapted to give accurate results on the 7800.
      6  10000 ????
      7  10000 ????						; Version 1.0 2019/12/11 (based on the 2600 Version 1.05, 13/NOVEMBER/2003)
      8  10000 ????
      9  10000 ????						; Available macros...
     10  10000 ????						;   SLEEP n		 - sleep for n cycles
     11  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     12  10000 ????
     13  10000 ????						;-------------------------------------------------------------------------------
     14  10000 ????						; SLEEP duration
     15  10000 ????						; Original author: Thomas Jentzsch
     16  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     17  10000 ????						; useful for code where precise timing is required.
     18  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     19  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     20  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     21  10000 ????
     22  10000 ????				       MAC	sleep
     23  10000 ????			    .CYCLES    SET	{1}
     24  10000 ????
     25  10000 ????				       IF	.CYCLES < 2
     26  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     27  10000 ????				       ERR
     28  10000 ????				       ENDIF
     29  10000 ????
     30  10000 ????				       IF	.CYCLES & 1
     31  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     32  10000 ????				       nop	$80
     33  10000 ????				       ELSE
     34  10000 ????				       bit	$80
     35  10000 ????				       ENDIF
     36  10000 ????			    .CYCLES    SET	.CYCLES - 3
     37  10000 ????				       ENDIF
     38  10000 ????
     39  10000 ????				       REPEAT	.CYCLES / 2
     40  10000 ????				       nop
     41  10000 ????				       REPEND
     42  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     43  10000 ????
     44  10000 ????						;-------------------------------------------------------
     45  10000 ????						; SET_POINTER
     46  10000 ????						; Original author: Manuel Rotschkar
     47  10000 ????						;
     48  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
     49  10000 ????						;
     50  10000 ????						; Usage: SET_POINTER pointer, address
     51  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
     52  10000 ????						;
     53  10000 ????						; Note: Alters the accumulator, NZ flags
     54  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
     55  10000 ????						; IN 2: absolute address
     56  10000 ????
     57  10000 ????				       MAC	set_pointer
     58  10000 ????			    .POINTER   SET	{1}
     59  10000 ????			    .ADDRESS   SET	{2}
     60  10000 ????
     61  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
     62  10000 ????				       STA	.POINTER	; Store in pointer
     63  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
     64  10000 ????				       STA	.POINTER+1	; Store in pointer+1
     65  10000 ????
     66  10000 ????				       ENDM
     67  10000 ????
     68  10000 ????						; EOF
     69  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
     70  10000 ????
     71  10000 ????						; 7800MACRO.H
     72  10000 ????
     73  10000 ????						;-------------------------------------------------------
     74  10000 ????						; BOXCOLLISIONCHECK
     75  10000 ????						; author: Mike Saarna
     76  10000 ????						;
     77  10000 ????						; A general bounding box collision check. compares 2 rectangles of differing size
     78  10000 ????						; and shape for overlap. Carry is set for collision detected, clear for none.
     79  10000 ????						; 
     80  10000 ????						; Usage: BOXCOLLISIONCHECK x1var,y1var,w1var,h1var,x2var,y2var,w2var,h2var
     81  10000 ????						;
     82  10000 ????
     83  10000 ????				       MAC	boxcollisioncheck
     84  10000 ????			    .boxx1     SET	{1}
     85  10000 ????			    .boxy1     SET	{2}
     86  10000 ????			    .boxw1     SET	{3}
     87  10000 ????			    .boxh1     SET	{4}
     88  10000 ????			    .boxx2     SET	{5}
     89  10000 ????			    .boxy2     SET	{6}
     90  10000 ????			    .boxw2     SET	{7}
     91  10000 ????			    .boxh2     SET	{8}
     92  10000 ????
     93  10000 ????			    .DoXCollisionCheck
     94  10000 ????				       lda	.boxx1	;3
     95  10000 ????				       cmp	.boxx2	;2
     96  10000 ????				       bcs	.X1isbiggerthanX2	;2/3
     97  10000 ????			    .X2isbiggerthanX1
     98  10000 ????				       adc	#.boxw1	;2
     99  10000 ????				       cmp	.boxx2	;3
    100  10000 ????				       bcs	.DoYCollisionCheck	;3/2
    101  10000 ????				       bcc	.noboxcollision	;3
    102  10000 ????			    .X1isbiggerthanX2
    103  10000 ????				       clc		;2
    104  10000 ????				       sbc	#.boxw2	;2
    105  10000 ????				       cmp	.boxx2	;3
    106  10000 ????				       bcs	.noboxcollision	;3/2
    107  10000 ????			    .DoYCollisionCheck
    108  10000 ????				       lda	.boxy1	;3
    109  10000 ????				       cmp	.boxy2	;3
    110  10000 ????				       bcs	.Y1isbiggerthanY2	;3/2
    111  10000 ????			    .Y2isbiggerthanY1
    112  10000 ????				       adc	#.boxh1	;2
    113  10000 ????				       cmp	.boxy2	;3
    114  10000 ????				       jmp	.checkdone	;6 
    115  10000 ????			    .Y1isbiggerthanY2
    116  10000 ????				       clc		;2
    117  10000 ????				       sbc	#.boxh2	;2
    118  10000 ????				       cmp	.boxy2	;3
    119  10000 ????				       bcs	.noboxcollision	;3/2
    120  10000 ????			    .boxcollision
    121  10000 ????				       sec		;2
    122  10000 ????				       .byte	$24	; hardcoded "BIT [clc opcode]", used to skip over the following clc
    123  10000 ????			    .noboxcollision
    124  10000 ????				       clc		;2
    125  10000 ????			    .checkdone
    126  10000 ????
    127  10000 ????				       ENDM
    128  10000 ????
    129  10000 ????				       MAC	median3
    130  10000 ????
    131  10000 ????						; A median filter (for smoothing paddle jitter)
    132  10000 ????						;   this macro takes the current paddle value, compares it to historic
    133  10000 ????						;   values, and replaces the current paddle value with the median.
    134  10000 ????						; 
    135  10000 ????						; called as:  MEDIAN3 STORAGE CURRENT
    136  10000 ????						;    where STORAGE points to 3 consecutive bytes of memory. The first 2
    137  10000 ????						;	  must be dedicated to this MEDIAN filter. The last 1 is a temp.
    138  10000 ????						;    where CURRENT is memory holding the new value you wish to compare to
    139  10000 ????						;	  the previous values, and update with the median value.
    140  10000 ????						;
    141  10000 ????						; returns: CURRENT (modified to contain median value)
    142  10000 ????						;
    143  10000 ????						; author: Mike Saarna (aka RevEng)
    144  10000 ????
    145  10000 ????			    .MedianBytes SET	{1}
    146  10000 ????			    .NewValue  SET	{2}
    147  10000 ????
    148  10000 ????				       lda	#0
    149  10000 ????				       ldy	.NewValue
    150  10000 ????				       sty	.MedianBytes+2	; put the new value in the most "recent" slot
    151  10000 ????
    152  10000 ????						; build an index from relative size comparisons between our 3 values.
    153  10000 ????				       cpy	.MedianBytes
    154  10000 ????				       rol
    155  10000 ????				       cpy	.MedianBytes+1
    156  10000 ????				       rol
    157  10000 ????				       ldy	.MedianBytes
    158  10000 ????				       cpy	.MedianBytes+1
    159  10000 ????				       rol
    160  10000 ????				       tay
    161  10000 ????
    162  10000 ????				       ldx	MedianOrderLUT,y	; convert the size-comparison index to an index to the median value
    163  10000 ????				       lda	.MedianBytes,x
    164  10000 ????				       sta	.NewValue	; we replace the new value memory with the median value
    165  10000 ????
    166  10000 ????						; then shift values from "newer" bytes to "older" bytes, leaving the 
    167  10000 ????						; newest byte (.MedianBytes+2) empty for next time.
    168  10000 ????				       lda	.MedianBytes+1
    169  10000 ????				       sta	.MedianBytes
    170  10000 ????				       lda	.MedianBytes+2
    171  10000 ????				       sta	.MedianBytes+1
    172  10000 ????				       ifnconst	MedianOrderLUT
    173  10000 ????				       jmp	MedianOrderLUTend
    174  10000 ????			    MedianOrderLUT		; converts our "comparison index" to an index to the median value
    175  10000 ????				       .byte	0	; 0  B2 < B0 < B1
    176  10000 ????				       .byte	1	; 1  B2 < B1 < B0
    177  10000 ????				       .byte	2	; 2   impossible 
    178  10000 ????				       .byte	2	; 3  B1 < B2 < B0
    179  10000 ????				       .byte	2	; 4  B0 < B2 < B1
    180  10000 ????				       .byte	2	; 5   impossible 
    181  10000 ????				       .byte	1	; 6  B0 < B1 < B2
    182  10000 ????				       .byte	0	; 7  B1 < B0 < B2
    183  10000 ????			    MedianOrderLUTend
    184  10000 ????				       endif
    185  10000 ????				       ENDM
    186  10000 ????
    187  10000 ????						; EOF
    188  10000 ????						;
    189  10000 ????						; speakjet.inc
    190  10000 ????						;
    191  10000 ????						;
    192  10000 ????						; AtariVox Speech Synth Driver
    193  10000 ????						;
    194  10000 ????						; By Alex Herbert, 2004
    195  10000 ????						;
    196  10000 ????
    197  10000 ????
    198  10000 ????
    199  10000 ????
    200  10000 ????						; Constants
    201  10000 ????
    202  10000 ????
    203  10000 ????		00 01	    SERIAL_OUTMASK equ	$01
    204  10000 ????		00 02	    SERIAL_RDYMASK equ	$02
    205  10000 ????
    206  10000 ????
    207  10000 ????
    208  10000 ????						; Macros
    209  10000 ????
    210  10000 ????				       mac	spkout
    211  10000 ????
    212  10000 ????						; check buffer-full status
    213  10000 ????				       lda	SWCHA
    214  10000 ????				       and	#SERIAL_RDYMASK
    215  10000 ????				       beq	.speech_done
    216  10000 ????
    217  10000 ????						; get next speech byte
    218  10000 ????				       ldy	#$00
    219  10000 ????				       lda	(speech_addr),y
    220  10000 ????
    221  10000 ????						; invert data and check for end of string
    222  10000 ????				       eor	#$ff
    223  10000 ????						;sta BACKGRND ; debug - uncomment to flash the background color with vox data
    224  10000 ????				       beq	.speech_done
    225  10000 ????				       sta	{1}
    226  10000 ????
    227  10000 ????						; increment speech pointer
    228  10000 ????				       inc	speech_addr
    229  10000 ????				       bne	.incaddr_skip
    230  10000 ????				       inc	speech_addr+1
    231  10000 ????			    .incaddr_skip
    232  10000 ????
    233  10000 ????						; output byte as serial data
    234  10000 ????
    235  10000 ????				       sec		; start bit
    236  10000 ????			    .byteout_loop
    237  10000 ????						; put carry flag into bit 0 of SWACNT, perserving other bits
    238  10000 ????				       lda	SWACNT	; 4
    239  10000 ????				       and	#$fe	; 2 6
    240  10000 ????				       adc	#$00	; 2 8
    241  10000 ????				       sta	SWACNT	; 4 12
    242  10000 ????
    243  10000 ????						; 10 bits sent? (1 start bit, 8 data bits, 1 stop bit)
    244  10000 ????				       cpy	#$09	; 2 14
    245  10000 ????				       beq	.speech_done	; 2 16
    246  10000 ????				       iny		; 2 18
    247  10000 ????
    248  10000 ????						; the 7800 is 1.5x faster than the 2600. Waste more cycles here
    249  10000 ????						; to match the original baud rate...
    250  10000 ????						;ldx	  #$07 ; 2600
    251  10000 ????				       ldx	#$0D
    252  10000 ????
    253  10000 ????			    .delay_loop
    254  10000 ????				       dex		; 
    255  10000 ????				       bne	.delay_loop	; 36 54
    256  10000 ????
    257  10000 ????						; shift next data bit into carry
    258  10000 ????				       lsr	{1}	; 5 59
    259  10000 ????
    260  10000 ????						; and loop (branch always taken)
    261  10000 ????				       bpl	.byteout_loop	; 3 62 cycles for loop
    262  10000 ????
    263  10000 ????			    .speech_done
    264  10000 ????
    265  10000 ????				       endm
    266  10000 ????
    267  10000 ????
    268  10000 ????				       mac	speak
    269  10000 ????
    270  10000 ????				       lda	#<{1}
    271  10000 ????				       sta	speech_addr
    272  10000 ????				       lda	#>{1}
    273  10000 ????				       sta	speech_addr+1
    274  10000 ????
    275  10000 ????				       endm
    276  10000 ????
    277  10000 ????
    278  10000 ????
    279  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
    280  10000 ????
    281  10000 ????				       processor	6502
    282  10000 ????
------- FILE 7800basic.h LEVEL 2 PASS 3
      0  10000 ????				       include	"7800basic.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE 7800.h LEVEL 3 PASS 3
      0  10000 ????				       include	"7800.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; 7800.h
      4  10000 ????						; Version 1.0, 2019/12/13
      5  10000 ????
      6  10000 ????						; This file defines hardware registers and memory mapping for the
      7  10000 ????						; Atari 7800. It is distributed as a companion machine-specific support package
      8  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
      9  10000 ????						; available at https://github.com/dasm-assembler/dasm
     10  10000 ????
     11  10000 ????
     12  10000 ????						; ******************** 7800 Hardware Adresses ***************************
     13  10000 ????						;
     14  10000 ????						;	 MEMORY MAP USAGE OF THE 7800
     15  10000 ????						;
     16  10000 ????						;	  00 -   1F	TIA REGISTERS
     17  10000 ????						;	  20 -   3F	MARIA REGISTERS
     18  10000 ????						;	  40 -   FF	RAM block 0 (zero page)
     19  10000 ????						;	 100 -  11F	TIA   (mirror of 0000-001f)
     20  10000 ????						;	 120 -  13F	MARIA (mirror of 0020-003f)
     21  10000 ????						;	 140 -  1FF	RAM block 1 (stack)
     22  10000 ????						;	 200 -  21F	TIA   (mirror of 0000-001f)
     23  10000 ????						;	 220 -  23F	MARIA (mirror of 0020-003f)
     24  10000 ????						;	 240 -  27F	???
     25  10000 ????						;	 280 -  2FF	RIOT I/O ports and timers
     26  10000 ????						;	 300 -  31F	TIA   (mirror of 0000-001f)
     27  10000 ????						;	 320 -  33F	MARIA (mirror of 0020-003f)
     28  10000 ????						;	 340 -  3FF	???
     29  10000 ????						;	 400 -  47F	unused address space
     30  10000 ????						;	 480 -  4FF	RIOT RAM
     31  10000 ????						;	 500 -  57F	unused address space
     32  10000 ????						;	 580 -  5FF	RIOT RAM (mirror of 0480-04ff)
     33  10000 ????						;	 600 - 17FF	unused address space
     34  10000 ????						;	1800 - 203F	RAM
     35  10000 ????						;	2040 - 20FF	RAM block 0 (mirror of 0000-001f)
     36  10000 ????						;	2100 - 213F	RAM
     37  10000 ????						;	2140 - 21FF	RAM block 1 (mirror of 0140-01ff)
     38  10000 ????						;	2200 - 27FF	RAM
     39  10000 ????						;	2800 - 2FFF	mirror of 1800-27ff
     40  10000 ????						;	3000 - 3FFF	unused address space
     41  10000 ????						;	4000 - FF7F	potential cartridge address space
     42  10000 ????						;	FF80 - FFF9	RESERVED FOR ENCRYPTION
     43  10000 ????						;	FFFA - FFFF	6502 VECTORS
     44  10000 ????
     45  10000 ????
     46  10000 ????						;****** 00-1F ********* TIA REGISTERS ******************
     47  10000 ????
     48  10000 ????		00 01	    INPTCTRL   =	$01	;Input control. In same address space as TIA. write-only
     49  10000 ????		00 01	    VBLANK     =	$01	;VBLANK. D7=1:dump paddle caps to ground.     write-only
     50  10000 ????		00 08	    INPT0      =	$08	;Paddle Control Input 0		       read-only
     51  10000 ????		00 09	    INPT1      =	$09	;Paddle Control Input 1		       read-only
     52  10000 ????		00 0a	    INPT2      =	$0A	;Paddle Control Input 2		       read-only
     53  10000 ????		00 0b	    INPT3      =	$0B	;Paddle Control Input 3		       read-only
     54  10000 ????
     55  10000 ????						; ** some common alternate names for INPT0/1/2/3
     56  10000 ????		00 08	    INPT4B     =	$08	;Joystick 0 Fire 1			       read-only
     57  10000 ????		00 09	    INPT4A     =	$09	;Joystick 0 Fire 1			       read-only
     58  10000 ????		00 0a	    INPT5B     =	$0A	;Joystick 1 Fire 0			       read-only
     59  10000 ????		00 0b	    INPT5A     =	$0B	;Joystick 1 Fire 1			       read-only
     60  10000 ????		00 08	    INPT4R     =	$08	;Joystick 0 Fire 1			       read-only
     61  10000 ????		00 09	    INPT4L     =	$09	;Joystick 0 Fire 1			       read-only
     62  10000 ????		00 0a	    INPT5R     =	$0A	;Joystick 1 Fire 0			       read-only
     63  10000 ????		00 0b	    INPT5L     =	$0B	;Joystick 1 Fire 1			       read-only
     64  10000 ????
     65  10000 ????		00 0c	    INPT4      =	$0C	;Player 0 Fire Button Input		       read-only
     66  10000 ????		00 0d	    INPT5      =	$0D	;Player 1 Fire Button Input		       read-only
     67  10000 ????
     68  10000 ????		00 15	    AUDC0      =	$15	;Audio Control Channel   0		       write-only
     69  10000 ????		00 16	    AUDC1      =	$16	;Audio Control Channel   1		       write-only
     70  10000 ????		00 17	    AUDF0      =	$17	;Audio Frequency Channel 0		       write-only
     71  10000 ????		00 18	    AUDF1      =	$18	;Audio Frequency Channel 1		       write-only
     72  10000 ????		00 19	    AUDV0      =	$19	;Audio Volume Channel	  0		       write-only
     73  10000 ????		00 1a	    AUDV1      =	$1A	;Audio Volume Channel	  1		       write-only
     74  10000 ????
     75  10000 ????						;****** 20-3F ********* MARIA REGISTERS ***************
     76  10000 ????
     77  10000 ????		00 20	    BACKGRND   =	$20	;Background Color			       write-only
     78  10000 ????		00 21	    P0C1       =	$21	;Palette 0 - Color 1			       write-only
     79  10000 ????		00 22	    P0C2       =	$22	;Palette 0 - Color 2			       write-only
     80  10000 ????		00 23	    P0C3       =	$23	;Palette 0 - Color 3			       write-only
     81  10000 ????		00 24	    WSYNC      =	$24	;Wait For Sync 			       write-only
     82  10000 ????		00 25	    P1C1       =	$25	;Palette 1 - Color 1			       write-only
     83  10000 ????		00 26	    P1C2       =	$26	;Palette 1 - Color 2			       write-only
     84  10000 ????		00 27	    P1C3       =	$27	;Palette 1 - Color 3			       write-only
     85  10000 ????		00 28	    MSTAT      =	$28	;Maria Status				       read-only
     86  10000 ????		00 29	    P2C1       =	$29	;Palette 2 - Color 1			       write-only
     87  10000 ????		00 2a	    P2C2       =	$2A	;Palette 2 - Color 2			       write-only
     88  10000 ????		00 2b	    P2C3       =	$2B	;Palette 2 - Color 3			       write-only
     89  10000 ????		00 2c	    DPPH       =	$2C	;Display List List Pointer High	       write-only
     90  10000 ????		00 2d	    P3C1       =	$2D	;Palette 3 - Color 1			       write-only
     91  10000 ????		00 2e	    P3C2       =	$2E	;Palette 3 - Color 2			       write-only
     92  10000 ????		00 2f	    P3C3       =	$2F	;Palette 3 - Color 3			       write-only
     93  10000 ????		00 30	    DPPL       =	$30	;Display List List Pointer Low 	       write-only
     94  10000 ????		00 31	    P4C1       =	$31	;Palette 4 - Color 1			       write-only
     95  10000 ????		00 32	    P4C2       =	$32	;Palette 4 - Color 2			       write-only
     96  10000 ????		00 33	    P4C3       =	$33	;Palette 4 - Color 3			       write-only
     97  10000 ????		00 34	    CHARBASE   =	$34	;Character Base Address		       write-only
     98  10000 ????		00 34	    CHBASE     =	$34	;Character Base Address		       write-only
     99  10000 ????		00 35	    P5C1       =	$35	;Palette 5 - Color 1			       write-only
    100  10000 ????		00 36	    P5C2       =	$36	;Palette 5 - Color 2			       write-only
    101  10000 ????		00 37	    P5C3       =	$37	;Palette 5 - Color 3			       write-only
    102  10000 ????		00 38	    OFFSET     =	$38	;Unused - Store zero here		       write-only
    103  10000 ????		00 39	    P6C1       =	$39	;Palette 6 - Color 1			       write-only
    104  10000 ????		00 3a	    P6C2       =	$3A	;Palette 6 - Color 2			       write-only
    105  10000 ????		00 3b	    P6C3       =	$3B	;Palette 6 - Color 3			       write-only
    106  10000 ????		00 3c	    CTRL       =	$3C	;Maria Control Register		       write-only
    107  10000 ????		00 3d	    P7C1       =	$3D	;Palette 7 - Color 1			       write-only
    108  10000 ????		00 3e	    P7C2       =	$3E	;Palette 7 - Color 2			       write-only
    109  10000 ????		00 3f	    P7C3       =	$3F	;Palette 7 - Color 3			       write-only
    110  10000 ????
    111  10000 ????
    112  10000 ????						;****** 280-2FF ******* PIA PORTS AND TIMERS ************
    113  10000 ????
    114  10000 ????		02 80	    SWCHA      =	$280	;P0+P1 Joystick Directional Input	       read-write
    115  10000 ????		02 81	    CTLSWA     =	$281	;I/O Control for SCHWA 		       read-write
    116  10000 ????		02 81	    SWACNT     =	$281	;VCS name for above			       read-write
    117  10000 ????		02 82	    SWCHB      =	$282	;Console Switches			       read-write
    118  10000 ????		02 83	    CTLSWB     =	$283	;I/O Control for SCHWB 		       read-write
    119  10000 ????		02 83	    SWBCNT     =	$283	;VCS name for above			       read-write
    120  10000 ????
    121  10000 ????		02 84	    INTIM      =	$284	;Iterval Timer Read			       read-only
    122  10000 ????		02 94	    TIM1T      =	$294	;Set 1    CLK Interval (838   nsec/interval)  write-only
    123  10000 ????		02 95	    TIM8T      =	$295	;Set 8    CLK Interval (6.7   usec/interval)  write-only
    124  10000 ????		02 96	    TIM64T     =	$296	;Set 64   CLK Interval (63.6  usec/interval)  write-only
    125  10000 ????		02 97	    T1024T     =	$297	;Set 1024 CLK Interval (858.2 usec/interval)  write-only
    126  10000 ????		02 9e	    TIM64TI    =	$29E	;Interrupt timer 64T			       write-only
    127  10000 ????
    128  10000 ????						;XM
    129  10000 ????		04 70	    XCTRL      =	$470	; 7=YM2151 6=RAM@6k 5=RAM@4k 4=pokey@450 3=hsc 2=cart 1=RoF_bank1 0=RoF_bank2
    130  10000 ????		04 70	    XCTRL1     =	$470
    131  10000 ????		04 78	    XCTRL2     =	$478
    132  10000 ????		04 7c	    XCTRL3     =	$47c
    133  10000 ????		04 71	    XCTRL4     =	$471
    134  10000 ????		04 72	    XCTRL5     =	$472
    135  10000 ????
    136  10000 ????						; Pokey register relative locations, since its base may be different
    137  10000 ????						; depending on the hardware.
    138  10000 ????		00 00	    PAUDF0     =	$0	; extra audio channels and frequencies
    139  10000 ????		00 01	    PAUDC0     =	$1
    140  10000 ????		00 02	    PAUDF1     =	$2
    141  10000 ????		00 03	    PAUDC1     =	$3
    142  10000 ????		00 04	    PAUDF2     =	$4
    143  10000 ????		00 05	    PAUDC2     =	$5
    144  10000 ????		00 06	    PAUDF3     =	$6
    145  10000 ????		00 07	    PAUDC3     =	$7
    146  10000 ????		00 08	    PAUDCTL    =	$8	; Audio Control
    147  10000 ????		00 0a	    PRANDOM    =	$A	; 17 bit polycounter pseudo random
    148  10000 ????		00 0f	    PSKCTL     =	$F	; Serial Port control
------- FILE 7800basic.h
------- FILE 7800basic_variable_redefs.h LEVEL 3 PASS 3
      0  10000 ????				       include	"7800basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 00	    font_mode  =	$00
      4  10000 ????		00 0b	    font_width_twoscompliment =	$0b
      5  10000 ????		00 35	    font_width =	$35
      6  10000 ????		00 00	    zonebg80x16_8_tallsprite_00_mode =	$00
      7  10000 ????		00 0c	    zonebg80x16_8_tallsprite_00_width_twoscompliment =	$0c
      8  10000 ????		00 14	    zonebg80x16_8_tallsprite_00_width =	$14
      9  10000 ????		00 00	    zonebg80x16_8_mode =	$00
     10  10000 ????		00 0c	    zonebg80x16_8_width_twoscompliment =	$0c
     11  10000 ????		00 14	    zonebg80x16_8_width =	$14
     12  10000 ????		00 00	    g8x8_4color4_mode =	$00
     13  10000 ????		00 1e	    g8x8_4color4_width_twoscompliment =	$1e
     14  10000 ????		00 02	    g8x8_4color4_width =	$02
     15  10000 ????		00 00	    g8x8_4color3_mode =	$00
     16  10000 ????		00 1e	    g8x8_4color3_width_twoscompliment =	$1e
     17  10000 ????		00 02	    g8x8_4color3_width =	$02
     18  10000 ????		00 00	    g8x8_4color2_mode =	$00
     19  10000 ????		00 1e	    g8x8_4color2_width_twoscompliment =	$1e
     20  10000 ????		00 02	    g8x8_4color2_width =	$02
     21  10000 ????		00 00	    g8x8_4color_mode =	$00
     22  10000 ????		00 1e	    g8x8_4color_width_twoscompliment =	$1e
     23  10000 ????		00 02	    g8x8_4color_width =	$02
     24  10000 ????		00 0f	    font_color1 =	$0f
     25  10000 ????		00 00	    font_color0 =	$00
     26  10000 ????		00 08	    zonebg80x16_8_tallsprite_00_color1 =	$08
     27  10000 ????		00 00	    zonebg80x16_8_tallsprite_00_color0 =	$00
     28  10000 ????		00 08	    zonebg80x16_8_color1 =	$08
     29  10000 ????		00 00	    zonebg80x16_8_color0 =	$00
     30  10000 ????		00 00	    g8x8_4color4_color1 =	0
     31  10000 ????		00 00	    g8x8_4color4_color0 =	$00
     32  10000 ????		00 91	    g8x8_4color3_color1 =	$91
     33  10000 ????		00 00	    g8x8_4color3_color0 =	$00
     34  10000 ????		00 00	    g8x8_4color2_color3 =	0
     35  10000 ????		00 91	    g8x8_4color2_color2 =	$91
     36  10000 ????		00 91	    g8x8_4color2_color1 =	$91
     37  10000 ????		00 00	    g8x8_4color2_color0 =	$00
     38  10000 ????		00 a8	    g8x8_4color_color3 =	$a8
     39  10000 ????		00 91	    g8x8_4color_color2 =	$91
     40  10000 ????		00 91	    g8x8_4color_color1 =	$91
     41  10000 ????		00 00	    g8x8_4color_color0 =	$00
     42  10000 ????		00 01	    ROM48K     =	1
     43  10000 ????		00 01	    plotvalueonscreen =	1
     44  10000 ????		00 08	    ZONEHEIGHT =	8
------- FILE 7800basic.h
      6  10000 ????
      7  10000 ????						;************ 7800 overall RAM map **************
      8  10000 ????
      9  10000 ????						;	   40-FF	 zero page RAM
     10  10000 ????						;	  140-1FF	 RAM (stack)
     11  10000 ????						;	 1800-203F	 RAM
     12  10000 ????						;	 2100-213F	 RAM
     13  10000 ????						;	 2200-27FF	 RAM
     14  10000 ????
     15  10000 ????						;************ 7800basic RAM usage map **************
     16  10000 ????
     17  10000 ????						;	   40-FF	 numerous defines, listed below
     18  10000 ????						;	  140-1FF	 RAM (stack)
     19  10000 ????
     20  10000 ????						;	 1800-187F	 DLL  (1800-18DF with page flipping enabled)
     21  10000 ????						;	 1880-1FFF	 DLs  (18E0-1FFF with page flipping enabled)
     22  10000 ????
     23  10000 ????						;	 2000-203F	 Reserved
     24  10000 ????						;	 2100-213F	 Reserved
     25  10000 ????						;	 2200-27FF	 Free
     26  10000 ????
     27  10000 ????		1f e0	    eeprombuffer =	$1FE0
     28  10000 ????		18 00	    DLLMEM     =	$1800
     29  10000 ????		00 70	    DBOFFSET   =	$70	; $E0 length DL is /2 for double-buffering
     30  10000 ????
     31  10000 ????			   -	       ifconst	PLOTVALUEPAGE
     32  10000 ????			   -VALBUFFER  =	(PLOTVALUEPAGE*256)
     33  10000 ????				       else
     34  10000 ????		20 00	    VALBUFFER  =	$2000	; to $203F  ** never let VALBUFFER straddle pages
     35  10000 ????				       endif
     36  10000 ????
     37  10000 ????
     38  10000 ????		21 00	    pausestate =	$2100
     39  10000 ????		21 01	    dlzero     =	$2101	; zero to force end of $2100 DL, which we use in vblank and overscan
     40  10000 ????		21 02	    sINPT1     =	$2102	; save register for joy button joy0
     41  10000 ????		21 03	    sINPT3     =	$2103	; save register for joy button joy1
     42  10000 ????		21 04	    currentbank =	$2104
     43  10000 ????
     44  10000 ????		21 05	    currentrambank =	$2105
     45  10000 ????		21 06	    charactermode =	$2106
     46  10000 ????		21 07	    sCTRL      =	$2107
     47  10000 ????		21 08	    pokeydetected =	$2108
     48  10000 ????		21 09	    paldetected =	$2109
     49  10000 ????		21 0a	    avoxdetected =	$210A
     50  10000 ????		21 0b	    sCHARBASE  =	$210B	; save register for CHARBASE
     51  10000 ????
     52  10000 ????		21 0c	    hsdevice   =	$210C
     53  10000 ????		21 0d	    hsdifficulty =	$210D
     54  10000 ????		21 0e	    hserror    =	$210E
     55  10000 ????		21 0f	    hsgameslot =	$210F
     56  10000 ????		21 10	    hsnewscoreline =	$2110
     57  10000 ????		21 11	    hsnewscorerank =	$2111
     58  10000 ????		21 12	    HSRAMTable =	$2112	; to $212F (30 bytes) Format: III*5, SSS*5
     59  10000 ????		21 12	    HSRAMInitials =	$2112	; see above
     60  10000 ????		21 21	    HSRAMScores =	$2121	; see above
     61  10000 ????
     62  10000 ????		21 31	    ssCTRL     =	$2131
     63  10000 ????		21 32	    ssCHARBASE =	$2132
     64  10000 ????		21 33	    hsdisplaymode =	$2133
     65  10000 ????		21 34	    gamedifficulty =	$2134
     66  10000 ????		21 35	    hsinitialpos =	$2135
     67  10000 ????		21 36	    hsinitialhold =	$2136
     68  10000 ????		21 37	    hscursorx  =	$2137
     69  10000 ????		21 38	    hsjoydebounce =	$2138
     70  10000 ????		21 39	    hsswcha    =	$2139
     71  10000 ????		21 3a	    hsinpt1    =	$213A
     72  10000 ????		21 3b	    hscolorchaseindex =	$213B
     73  10000 ????		21 3c	    visibleDLLstart =	$213C
     74  10000 ????		21 3d	    overscanDLLstart =	$213D
     75  10000 ????		21 3e	    frameslost =	$213E
     76  10000 ????
     77  10000 ????
     78  10000 ????		00 40	    rand       =	$40
     79  10000 ????		00 41	    rand16     =	$41
     80  10000 ????		00 42	    temp1      =	$42
     81  10000 ????		00 43	    temp2      =	$43
     82  10000 ????		00 44	    temp3      =	$44
     83  10000 ????		00 45	    temp4      =	$45
     84  10000 ????		00 46	    temp5      =	$46
     85  10000 ????		00 47	    temp6      =	$47
     86  10000 ????		00 48	    temp7      =	$48
     87  10000 ????		00 49	    temp8      =	$49
     88  10000 ????		00 4a	    temp9      =	$4a
     89  10000 ????
     90  10000 ????		00 4b	    pokeybase  =	$4b
     91  10000 ????		00 4b	    pokeybaselo =	$4b
     92  10000 ????		00 4c	    pokeybasehi =	$4c
     93  10000 ????
     94  10000 ????		00 4d	    visibleover =	$4d
     95  10000 ????
     96  10000 ????		00 4e	    sfx1pointlo =	$4e
     97  10000 ????		00 4f	    sfx2pointlo =	$4f
     98  10000 ????		00 50	    sfx1pointhi =	$50
     99  10000 ????		00 51	    sfx2pointhi =	$51
    100  10000 ????
    101  10000 ????		00 52	    sfx1priority =	$52
    102  10000 ????		00 53	    sfx2priority =	$53
    103  10000 ????		00 54	    sfx1poffset =	$54
    104  10000 ????		00 55	    sfx2poffset =	$55
    105  10000 ????
    106  10000 ????		00 56	    sfx1frames =	$56
    107  10000 ????		00 57	    sfx2frames =	$57
    108  10000 ????		00 58	    sfx1tick   =	$58
    109  10000 ????		00 59	    sfx2tick   =	$59
    110  10000 ????
    111  10000 ????		00 5a	    tempmath   =	$5a
    112  10000 ????
    113  10000 ????		00 5b	    pokey1pointlo =	$5b
    114  10000 ????		00 5c	    pokey1pointhi =	$5c
    115  10000 ????		00 5d	    pokey2pointlo =	$5d
    116  10000 ????		00 5e	    pokey2pointhi =	$5e
    117  10000 ????		00 5f	    pokey3pointlo =	$5f
    118  10000 ????		00 60	    pokey3pointhi =	$60
    119  10000 ????		00 61	    pokey4pointlo =	$61
    120  10000 ????		00 62	    pokey4pointhi =	$62
    121  10000 ????
    122  10000 ????		00 63	    dlpnt      =	$63	; to $64
    123  10000 ????		00 65	    dlend      =	$65	; to $81 - for 28 possible visible dll entries
    124  10000 ????		00 82	    dlendsave  =	$82	; to $9e - for 28 possible visible dll entries
    125  10000 ????
    126  10000 ????		00 9f	    speech_addr =	$9f
    127  10000 ????		00 a0	    speech_addr_hi =	$a0
    128  10000 ????
    129  10000 ????		00 a1	    HSGameTableLo =	$a1
    130  10000 ????		00 a2	    HSGameTableHi =	$a2
    131  10000 ????		00 a3	    HSVoxHi    =	$a3
    132  10000 ????		00 a4	    HSVoxLo    =	$a4
    133  10000 ????
    134  10000 ????						;channel pointers
    135  10000 ????
    136  10000 ????		00 a5	    songchannel1layer1lo =	$a5
    137  10000 ????		00 a6	    songchannel2layer1lo =	$a6
    138  10000 ????		00 a7	    songchannel3layer1lo =	$a7
    139  10000 ????		00 a8	    songchannel4layer1lo =	$a8
    140  10000 ????
    141  10000 ????		00 a9	    songchannel1layer2lo =	$a9
    142  10000 ????		00 aa	    songchannel2layer2lo =	$aA
    143  10000 ????		00 ab	    songchannel3layer2lo =	$aB
    144  10000 ????		00 ac	    songchannel4layer2lo =	$aC
    145  10000 ????
    146  10000 ????		00 ad	    songchannel1layer3lo =	$aD
    147  10000 ????		00 ae	    songchannel2layer3lo =	$aE
    148  10000 ????		00 af	    songchannel3layer3lo =	$aF
    149  10000 ????		00 b0	    songchannel4layer3lo =	$b0
    150  10000 ????
    151  10000 ????		00 b1	    songchannel1layer1hi =	$b1
    152  10000 ????		00 b2	    songchannel2layer1hi =	$b2
    153  10000 ????		00 b3	    songchannel3layer1hi =	$b3
    154  10000 ????		00 b4	    songchannel4layer1hi =	$b4
    155  10000 ????
    156  10000 ????		00 b5	    songchannel1layer2hi =	$b5
    157  10000 ????		00 b6	    songchannel2layer2hi =	$b6
    158  10000 ????		00 b7	    songchannel3layer2hi =	$b7
    159  10000 ????		00 b8	    songchannel4layer2hi =	$b8
    160  10000 ????
    161  10000 ????		00 b9	    songchannel1layer3hi =	$b9
    162  10000 ????		00 ba	    songchannel2layer3hi =	$bA
    163  10000 ????		00 bb	    songchannel3layer3hi =	$bB
    164  10000 ????		00 bc	    songchannel4layer3hi =	$bC
    165  10000 ????
    166  10000 ????		00 bd	    songdatalo =	$bd
    167  10000 ????		00 be	    songdatahi =	$be
    168  10000 ????
    169  10000 ????		00 bf	    inactivechannelcount =	$bf
    170  10000 ????
    171  10000 ????
    172  10000 ????		00 c0	    songchannel1transpose =	$c0
    173  10000 ????		00 c1	    songchannel2transpose =	$c1
    174  10000 ????		00 c2	    songchannel3transpose =	$c2
    175  10000 ????		00 c3	    songchannel4transpose =	$c3
    176  10000 ????
    177  10000 ????		00 c4	    songstackindex =	$c4
    178  10000 ????
    179  10000 ????		00 c5	    songchannel1instrumentlo =	$c5
    180  10000 ????		00 c6	    songchannel2instrumentlo =	$c6
    181  10000 ????		00 c7	    songchannel3instrumentlo =	$c7
    182  10000 ????		00 c8	    songchannel4instrumentlo =	$c8
    183  10000 ????
    184  10000 ????		00 c9	    songchannel1instrumenthi =	$c9
    185  10000 ????		00 ca	    songchannel2instrumenthi =	$ca
    186  10000 ????		00 cb	    songchannel3instrumenthi =	$cb
    187  10000 ????		00 cc	    songchannel4instrumenthi =	$cc
    188  10000 ????
    189  10000 ????		00 cd	    sfx1notedata =	$cd
    190  10000 ????		00 ce	    sfx2notedata =	$ce
    191  10000 ????
    192  10000 ????		00 cf	    songloops  =	$cf
    193  10000 ????
    194  10000 ????		00 d0	    songpointerlo =	$D0
    195  10000 ????		00 d1	    songpointerhi =	$D1
    196  10000 ????
    197  10000 ????		00 d2	    voxlock    =	$D2
    198  10000 ????		00 d3	    voxqueuesize =	$D3
    199  10000 ????
    200  10000 ????		00 d4	    vblankroutines =	$D4
    201  10000 ????
    202  10000 ????		00 d5	    doublebufferstate =	$D5
    203  10000 ????		00 d6	    doublebufferdloffset =	$D6
    204  10000 ????		00 d7	    doublebufferbufferdirty =	$D7
    205  10000 ????
    206  10000 ????		00 d8	    inttemp1   =	$D8
    207  10000 ????		00 d9	    inttemp2   =	$D9
    208  10000 ????		00 da	    inttemp3   =	$DA
    209  10000 ????		00 db	    inttemp4   =	$DB
    210  10000 ????		00 dc	    inttemp5   =	$DC
    211  10000 ????		00 dd	    inttemp6   =	$DD
    212  10000 ????
    213  10000 ????		00 de	    sfxschedulelock =	$DE
    214  10000 ????		00 df	    sfxschedulemissed =	$DF
    215  10000 ????		00 e0	    sfxinstrumentlo =	$E0
    216  10000 ????		00 e1	    sfxinstrumenthi =	$E1
    217  10000 ????		00 e2	    sfxpitchoffset =	$E2
    218  10000 ????		00 e3	    sfxnoteindex =	$E3
    219  10000 ????
    220  10000 ????		00 e4	    CTLSWAs    =	$E4
    221  10000 ????		00 e5	    CTLSWBs    =	$E5
    222  10000 ????
    223  10000 ????		00 e6	    A	       =	$e6
    224  10000 ????		00 e6	    a	       =	$e6
    225  10000 ????		00 e7	    B	       =	$e7
    226  10000 ????		00 e7	    b	       =	$e7
    227  10000 ????		00 e8	    C	       =	$e8
    228  10000 ????		00 e8	    c	       =	$e8
    229  10000 ????		00 e9	    D	       =	$e9
    230  10000 ????		00 e9	    d	       =	$e9
    231  10000 ????		00 ea	    E	       =	$ea
    232  10000 ????		00 ea	    e	       =	$ea
    233  10000 ????		00 eb	    F	       =	$eb
    234  10000 ????		00 eb	    f	       =	$eb
    235  10000 ????		00 ec	    G	       =	$ec
    236  10000 ????		00 ec	    g	       =	$ec
    237  10000 ????		00 ed	    H	       =	$ed
    238  10000 ????		00 ed	    h	       =	$ed
    239  10000 ????		00 ee	    I	       =	$ee
    240  10000 ????		00 ee	    i	       =	$ee
    241  10000 ????		00 ef	    J	       =	$ef
    242  10000 ????		00 ef	    j	       =	$ef
    243  10000 ????		00 f0	    K	       =	$f0
    244  10000 ????		00 f0	    k	       =	$f0
    245  10000 ????		00 f1	    L	       =	$f1
    246  10000 ????		00 f1	    l	       =	$f1
    247  10000 ????		00 f2	    M	       =	$f2
    248  10000 ????		00 f2	    m	       =	$f2
    249  10000 ????		00 f3	    N	       =	$f3
    250  10000 ????		00 f3	    n	       =	$f3
    251  10000 ????		00 f4	    O	       =	$f4
    252  10000 ????		00 f4	    o	       =	$f4
    253  10000 ????		00 f5	    P	       =	$f5
    254  10000 ????		00 f5	    p	       =	$f5
    255  10000 ????		00 f6	    Q	       =	$f6
    256  10000 ????		00 f6	    q	       =	$f6
    257  10000 ????		00 f7	    R	       =	$f7
    258  10000 ????		00 f7	    r	       =	$f7
    259  10000 ????		00 f8	    S	       =	$f8
    260  10000 ????		00 f8	    s	       =	$f8
    261  10000 ????		00 f9	    T	       =	$f9
    262  10000 ????		00 f9	    t	       =	$f9
    263  10000 ????		00 fa	    U	       =	$fa
    264  10000 ????		00 fa	    u	       =	$fa
    265  10000 ????		00 fb	    V	       =	$fb
    266  10000 ????		00 fb	    v	       =	$fb
    267  10000 ????		00 fc	    W	       =	$fc
    268  10000 ????		00 fc	    w	       =	$fc
    269  10000 ????		00 fd	    X	       =	$fd
    270  10000 ????		00 fd	    x	       =	$fd
    271  10000 ????		00 fe	    Y	       =	$fe
    272  10000 ????		00 fe	    y	       =	$fe
    273  10000 ????		00 ff	    Z	       =	$ff
    274  10000 ????		00 ff	    z	       =	$ff
    275  10000 ????
    276  10000 ????						; var0-var99 variables use the top of the stack
    277  10000 ????		01 40	    var0       =	$140
    278  10000 ????		01 41	    var1       =	$141
    279  10000 ????		01 42	    var2       =	$142
    280  10000 ????		01 43	    var3       =	$143
    281  10000 ????		01 44	    var4       =	$144
    282  10000 ????		01 45	    var5       =	$145
    283  10000 ????		01 46	    var6       =	$146
    284  10000 ????		01 47	    var7       =	$147
    285  10000 ????		01 48	    var8       =	$148
    286  10000 ????		01 49	    var9       =	$149
    287  10000 ????		01 4a	    var10      =	$14a
    288  10000 ????		01 4b	    var11      =	$14b
    289  10000 ????		01 4c	    var12      =	$14c
    290  10000 ????		01 4d	    var13      =	$14d
    291  10000 ????		01 4e	    var14      =	$14e
    292  10000 ????		01 4f	    var15      =	$14f
    293  10000 ????		01 50	    var16      =	$150
    294  10000 ????		01 51	    var17      =	$151
    295  10000 ????		01 52	    var18      =	$152
    296  10000 ????		01 53	    var19      =	$153
    297  10000 ????		01 54	    var20      =	$154
    298  10000 ????		01 55	    var21      =	$155
    299  10000 ????		01 56	    var22      =	$156
    300  10000 ????		01 57	    var23      =	$157
    301  10000 ????		01 58	    var24      =	$158
    302  10000 ????		01 59	    var25      =	$159
    303  10000 ????		01 5a	    var26      =	$15a
    304  10000 ????		01 5b	    var27      =	$15b
    305  10000 ????		01 5c	    var28      =	$15c
    306  10000 ????		01 5d	    var29      =	$15d
    307  10000 ????		01 5e	    var30      =	$15e
    308  10000 ????		01 5f	    var31      =	$15f
    309  10000 ????		01 60	    var32      =	$160
    310  10000 ????		01 61	    var33      =	$161
    311  10000 ????		01 62	    var34      =	$162
    312  10000 ????		01 63	    var35      =	$163
    313  10000 ????		01 64	    var36      =	$164
    314  10000 ????		01 65	    var37      =	$165
    315  10000 ????		01 66	    var38      =	$166
    316  10000 ????		01 67	    var39      =	$167
    317  10000 ????		01 68	    var40      =	$168
    318  10000 ????		01 69	    var41      =	$169
    319  10000 ????		01 6a	    var42      =	$16a
    320  10000 ????		01 6b	    var43      =	$16b
    321  10000 ????		01 6c	    var44      =	$16c
    322  10000 ????		01 6d	    var45      =	$16d
    323  10000 ????		01 6e	    var46      =	$16e
    324  10000 ????		01 6f	    var47      =	$16f
    325  10000 ????		01 70	    var48      =	$170
    326  10000 ????		01 71	    var49      =	$171
    327  10000 ????		01 72	    var50      =	$172
    328  10000 ????		01 73	    var51      =	$173
    329  10000 ????		01 74	    var52      =	$174
    330  10000 ????		01 75	    var53      =	$175
    331  10000 ????		01 76	    var54      =	$176
    332  10000 ????		01 77	    var55      =	$177
    333  10000 ????		01 78	    var56      =	$178
    334  10000 ????		01 79	    var57      =	$179
    335  10000 ????		01 7a	    var58      =	$17a
    336  10000 ????		01 7b	    var59      =	$17b
    337  10000 ????		01 7c	    var60      =	$17c
    338  10000 ????		01 7d	    var61      =	$17d
    339  10000 ????		01 7e	    var62      =	$17e
    340  10000 ????		01 7f	    var63      =	$17f
    341  10000 ????		01 80	    var64      =	$180
    342  10000 ????		01 81	    var65      =	$181
    343  10000 ????		01 82	    var66      =	$182
    344  10000 ????		01 83	    var67      =	$183
    345  10000 ????		01 84	    var68      =	$184
    346  10000 ????		01 85	    var69      =	$185
    347  10000 ????		01 86	    var70      =	$186
    348  10000 ????		01 87	    var71      =	$187
    349  10000 ????		01 88	    var72      =	$188
    350  10000 ????		01 89	    var73      =	$189
    351  10000 ????		01 8a	    var74      =	$18a
    352  10000 ????		01 8b	    var75      =	$18b
    353  10000 ????		01 8c	    var76      =	$18c
    354  10000 ????		01 8d	    var77      =	$18d
    355  10000 ????		01 8e	    var78      =	$18e
    356  10000 ????		01 8f	    var79      =	$18f
    357  10000 ????		01 90	    var80      =	$190
    358  10000 ????		01 91	    var81      =	$191
    359  10000 ????		01 92	    var82      =	$192
    360  10000 ????		01 93	    var83      =	$193
    361  10000 ????		01 94	    var84      =	$194
    362  10000 ????		01 95	    var85      =	$195
    363  10000 ????		01 96	    var86      =	$196
    364  10000 ????		01 97	    var87      =	$197
    365  10000 ????		01 98	    var88      =	$198
    366  10000 ????		01 99	    var89      =	$199
    367  10000 ????		01 9a	    var90      =	$19a
    368  10000 ????		01 9b	    var91      =	$19b
    369  10000 ????		01 9c	    var92      =	$19c
    370  10000 ????		01 9d	    var93      =	$19d
    371  10000 ????		01 9e	    var94      =	$19e
    372  10000 ????		01 9f	    var95      =	$19f
    373  10000 ????		01 a0	    var96      =	$1a0
    374  10000 ????		01 a1	    var97      =	$1a1
    375  10000 ????		01 a2	    var98      =	$1a2
    376  10000 ????		01 a3	    var99      =	$1a3
    377  10000 ????
    378  10000 ????		01 a4	    framecounter =	$1A4
    379  10000 ????		01 a5	    countdownseconds =	$1A5
    380  10000 ????		01 a6	    score0     =	$1A6	; $1A7 $1A8
    381  10000 ????		01 a9	    score1     =	$1A9	; $1AA $1AB
    382  10000 ????		01 ac	    pausebuttonflag =	$1AC
    383  10000 ????		01 ad	    valbufend  =	$1AD
    384  10000 ????		01 ae	    valbufendsave =	$1AE
    385  10000 ????		01 af	    finescrollx =	$1AF
    386  10000 ????		01 b0	    finescrolly =	$1B0
    387  10000 ????		01 b1	    joybuttonmode =	$1B1	; used to track any joysticks that were changed to one-button mode
    388  10000 ????		01 b2	    interruptindex =	$1B2
    389  10000 ????		01 b3	    tempavox   =	$1B3
    390  10000 ????		01 b4	    doublebufferminimumframetarget =	$1B4
    391  10000 ????		01 b5	    doublebufferminimumframeindex =	$1B5
    392  10000 ????		01 b6	    pausedisable =	$1B6
    393  10000 ????		01 b7	    XCTRL1s    =	$1B7
    394  10000 ????		01 b8	    spritecount =	$1B8
    395  10000 ????		01 b9	    avoxenable =	$1B9
    396  10000 ????
    397  10000 ????		01 ba	    pokey1frames =	$1BA
    398  10000 ????		01 bb	    pokey1tick =	$1BB
    399  10000 ????		01 bc	    pokey2frames =	$1BC
    400  10000 ????		01 bd	    pokey2tick =	$1BD
    401  10000 ????		01 be	    pokey3frames =	$1BE
    402  10000 ????		01 bf	    pokey3tick =	$1BF
    403  10000 ????		01 c0	    pokey4frames =	$1C0
    404  10000 ????		01 c1	    pokey4tick =	$1C1
    405  10000 ????		01 c2	    pokey1priority =	$1C2
    406  10000 ????		01 c3	    pokey1offset =	$1C3
    407  10000 ????		01 c4	    pokey2priority =	$1C4
    408  10000 ????		01 c5	    pokey2offset =	$1C5
    409  10000 ????		01 c6	    pokey3priority =	$1C6
    410  10000 ????		01 c7	    pokey3offset =	$1C7
    411  10000 ????		01 c8	    pokey4priority =	$1C8
    412  10000 ????		01 c9	    pokey4offset =	$1C9
    413  10000 ????
    414  10000 ????		01 ca	    songtempo  =	$1CA
    415  10000 ????		01 cb	    songtick   =	$1CB
    416  10000 ????
    417  10000 ????		01 cc	    songchannel1layer1loops =	$1CC
    418  10000 ????		01 cd	    songchannel2layer1loops =	$1CD
    419  10000 ????		01 ce	    songchannel3layer1loops =	$1CE
    420  10000 ????		01 cf	    songchannel4layer1loops =	$1CF
    421  10000 ????
    422  10000 ????		01 d0	    songchannel1layer2loops =	$1D0
    423  10000 ????		01 d1	    songchannel2layer2loops =	$1D1
    424  10000 ????		01 d2	    songchannel3layer2loops =	$1D2
    425  10000 ????		01 d3	    songchannel4layer2loops =	$1D3
    426  10000 ????
    427  10000 ????		01 d4	    songchannel1layer3loops =	$1D4
    428  10000 ????		01 d5	    songchannel2layer3loops =	$1D5
    429  10000 ????		01 d6	    songchannel3layer3loops =	$1D6
    430  10000 ????		01 d7	    songchannel4layer3loops =	$1D7
    431  10000 ????
    432  10000 ????		01 d8	    songchannel1busywait =	$1D8
    433  10000 ????		01 d9	    songchannel2busywait =	$1D9
    434  10000 ????		01 da	    songchannel3busywait =	$1DA
    435  10000 ????		01 db	    songchannel4busywait =	$1DB
    436  10000 ????
    437  10000 ????		01 dc	    songchannel1stackdepth =	$1DC
    438  10000 ????		01 dd	    songchannel2stackdepth =	$1DD
    439  10000 ????		01 de	    songchannel3stackdepth =	$1DE
    440  10000 ????		01 df	    songchannel4stackdepth =	$1DF
    441  10000 ????
    442  10000 ????		01 e0	    palframes  =	$1E0
    443  10000 ????		01 e1	    palfastframe =	$1E1
    444  10000 ????
    445  10000 ????		01 e2	    port0control =	$1E2
    446  10000 ????		01 e3	    port1control =	$1E3
    447  10000 ????
    448  10000 ????						; port#control values...
    449  10000 ????						;	1 = proline
    450  10000 ????						;	2 = lightgun
    451  10000 ????						;	3 = paddle
    452  10000 ????						;	4 = trakball
    453  10000 ????						;	5 = vcs joystick
    454  10000 ????						;	6 = driving
    455  10000 ????						;	7 = keypad
    456  10000 ????						;	8 = st mouse/cx80
    457  10000 ????						;	9 = amiga mouse
    458  10000 ????						;     10 = atarivox
    459  10000 ????
    460  10000 ????						; controller 0 data...
    461  10000 ????		01 e4	    paddleposition0 =	$1E4
    462  10000 ????		01 e4	    keypadmatrix0a =	$1E4
    463  10000 ????		01 e4	    drivingposition0 =	$1E4
    464  10000 ????		01 e4	    trakballx0 =	$1E4
    465  10000 ????		01 e4	    mousex0    =	$1E4
    466  10000 ????		01 e4	    lighttgunx0 =	$1E4
    467  10000 ????
    468  10000 ????						; controller 1 data...
    469  10000 ????		01 e5	    paddleposition2 =	$1E5
    470  10000 ????		01 e5	    keypadmatrix1a =	$1E5
    471  10000 ????		01 e5	    drivingposition1 =	$1E5
    472  10000 ????		01 e5	    trakballx1 =	$1E5
    473  10000 ????		01 e5	    mousex1    =	$1E5
    474  10000 ????		01 e5	    lightgunx1 =	$1E5
    475  10000 ????
    476  10000 ????						; controller 0 altdata...
    477  10000 ????		01 e6	    paddleposition1 =	$1E6
    478  10000 ????		01 e6	    keypadmatrix0b =	$1E6
    479  10000 ????		01 e6	    trakbally0 =	$1E6
    480  10000 ????		01 e6	    mousey0    =	$1E6
    481  10000 ????		01 e6	    lightguny0 =	$1E6
    482  10000 ????
    483  10000 ????						; controller 1 altdata...
    484  10000 ????		01 e7	    paddleposition3 =	$1E7
    485  10000 ????		01 e7	    keypadmatrix1b =	$1E7
    486  10000 ????		01 e7	    trakbally1 =	$1E7
    487  10000 ????		01 e7	    mousey1    =	$1E7
    488  10000 ????		01 e7	    lightguny1 =	$1E7
    489  10000 ????
    490  10000 ????						; controller state save. for trakball state+dir codes, rotary position codes
    491  10000 ????		01 e8	    controller0statesave =	$1E8
    492  10000 ????		01 e8	    mousecodex0 =	$1E8
    493  10000 ????		01 e8	    trakballcodex0 =	$1E8
    494  10000 ????		01 e8	    keypadmatrix0c =	$1E8
    495  10000 ????
    496  10000 ????		01 e9	    controller1statesave =	$1E9
    497  10000 ????		01 e9	    mousecodex1 =	$1E9
    498  10000 ????		01 e9	    trakballcodex1 =	$1E9
    499  10000 ????		01 e9	    keypadmatrix1c =	$1E9
    500  10000 ????
    501  10000 ????		01 ea	    keypadmatrix0d =	$1EA
    502  10000 ????		01 ea	    mousecodey0 =	$1EA
    503  10000 ????		01 ea	    trakballcodey0 =	$1EA
    504  10000 ????
    505  10000 ????		01 eb	    keypadmatrix1d =	$1EB
    506  10000 ????		01 eb	    mousecodey1 =	$1EB
    507  10000 ????		01 eb	    trakballcodey1 =	$1EB
    508  10000 ????
    509  10000 ????		01 ec	    genesisdetected0 =	$1EC
    510  10000 ????		01 ed	    genesisdetected1 =	$1ED
    511  10000 ????
    512  10000 ????						; $1EE - $1FF reserved for stack
    513  10000 ????
------- FILE c:\Users\Steve\Desktop\2018dev\7800\7800basic\projects\lessons\lesson1_gfx_modes\lesson1_1.bas.asm
------- FILE 7800basic_variable_redefs.h LEVEL 2 PASS 3
      0  10000 ????				       include	"7800basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 00	    font_mode  =	$00
      4  10000 ????		00 0b	    font_width_twoscompliment =	$0b
      5  10000 ????		00 35	    font_width =	$35
      6  10000 ????		00 00	    zonebg80x16_8_tallsprite_00_mode =	$00
      7  10000 ????		00 0c	    zonebg80x16_8_tallsprite_00_width_twoscompliment =	$0c
      8  10000 ????		00 14	    zonebg80x16_8_tallsprite_00_width =	$14
      9  10000 ????		00 00	    zonebg80x16_8_mode =	$00
     10  10000 ????		00 0c	    zonebg80x16_8_width_twoscompliment =	$0c
     11  10000 ????		00 14	    zonebg80x16_8_width =	$14
     12  10000 ????		00 00	    g8x8_4color4_mode =	$00
     13  10000 ????		00 1e	    g8x8_4color4_width_twoscompliment =	$1e
     14  10000 ????		00 02	    g8x8_4color4_width =	$02
     15  10000 ????		00 00	    g8x8_4color3_mode =	$00
     16  10000 ????		00 1e	    g8x8_4color3_width_twoscompliment =	$1e
     17  10000 ????		00 02	    g8x8_4color3_width =	$02
     18  10000 ????		00 00	    g8x8_4color2_mode =	$00
     19  10000 ????		00 1e	    g8x8_4color2_width_twoscompliment =	$1e
     20  10000 ????		00 02	    g8x8_4color2_width =	$02
     21  10000 ????		00 00	    g8x8_4color_mode =	$00
     22  10000 ????		00 1e	    g8x8_4color_width_twoscompliment =	$1e
     23  10000 ????		00 02	    g8x8_4color_width =	$02
     24  10000 ????		00 0f	    font_color1 =	$0f
     25  10000 ????		00 00	    font_color0 =	$00
     26  10000 ????		00 08	    zonebg80x16_8_tallsprite_00_color1 =	$08
     27  10000 ????		00 00	    zonebg80x16_8_tallsprite_00_color0 =	$00
     28  10000 ????		00 08	    zonebg80x16_8_color1 =	$08
     29  10000 ????		00 00	    zonebg80x16_8_color0 =	$00
     30  10000 ????		00 00	    g8x8_4color4_color1 =	0
     31  10000 ????		00 00	    g8x8_4color4_color0 =	$00
     32  10000 ????		00 91	    g8x8_4color3_color1 =	$91
     33  10000 ????		00 00	    g8x8_4color3_color0 =	$00
     34  10000 ????		00 00	    g8x8_4color2_color3 =	0
     35  10000 ????		00 91	    g8x8_4color2_color2 =	$91
     36  10000 ????		00 91	    g8x8_4color2_color1 =	$91
     37  10000 ????		00 00	    g8x8_4color2_color0 =	$00
     38  10000 ????		00 a8	    g8x8_4color_color3 =	$a8
     39  10000 ????		00 91	    g8x8_4color_color2 =	$91
     40  10000 ????		00 91	    g8x8_4color_color1 =	$91
     41  10000 ????		00 00	    g8x8_4color_color0 =	$00
     42  10000 ????		00 01	    ROM48K     =	1
     43  10000 ????		00 01	    plotvalueonscreen =	1
     44  10000 ????		00 08	    ZONEHEIGHT =	8
------- FILE c:\Users\Steve\Desktop\2018dev\7800\7800basic\projects\lessons\lesson1_gfx_modes\lesson1_1.bas.asm
    285  10000 ????
    286  10000 ????						; A BEAD header gets automatically incorportated into the ROM header. 
    287  10000 ????						; For more BEAD executable info, check out the spec...
    288  10000 ????						; http://7800.8bitdev.org/index.php/The_Atari_7800_BEAD_Execuable_Specification
    289  10000 ????
    290  10000 ????		00 01	    GAMEDESCRIPTIONSET =	1
    291  10000 ????		4e 61 6d 65 GAMEDESCRIPTION =	"Test Name"
    292  10000 ????
    293  10000 ????		00 40	    BDHSC      =	%01000000
    294  10000 ????		00 20	    BDYM       =	%00100000
    295  10000 ????		00 10	    BDPOKEY    =	%00010000
    296  10000 ????		00 08	    BDROF      =	%00001000
    297  10000 ????		00 00	    BD16K      =	%00000000
    298  10000 ????		00 01	    BD32K      =	%00000001
    299  10000 ????		00 02	    BD48K      =	%00000010
    300  10000 ????		00 05	    BD1800     =	%00000101
    301  10000 ????		00 06	    BD4000     =	%00000110
    302  10000 ????
    303  10000 ????			   -	       ifconst	ROM16K
    304  10000 ????			   -BEADHEADER =	1
    305  10000 ????				       endif
    306  10000 ????			   -	       ifconst	ROM32K
    307  10000 ????			   -BEADHEADER =	1
    308  10000 ????				       endif
    309  10000 ????				       ifconst	ROM48K
    310  10000 ????		00 01	    BEADHEADER =	1
    311  10000 ????				       endif
    312  10000 ????
    313  10000 ????				       ifconst	BEADHEADER
    314  10000 ????			    BEADHARDWARE SET	0
    315  10000 ????			   -	       ifconst	ROM16K
    316  10000 ????			   -BEADHARDWARE SET	(BEADHARDWARE|BD16K)
    317  10000 ????				       endif
    318  10000 ????			   -	       ifconst	ROM32K
    319  10000 ????			   -BEADHARDWARE SET	(BEADHARDWARE|BD32K)
    320  10000 ????				       endif
    321  10000 ????				       ifconst	ROM48K
    322  10000 ????			    BEADHARDWARE SET	(BEADHARDWARE|BD48K)
    323  10000 ????				       endif
    324  10000 ????			   -	       ifconst	pokeysupport
    325  10000 ????			   -BEADHARDWARE SET	(BEADHARDWARE|BDPOKEY)
    326  10000 ????				       endif
    327  10000 ????			   -	       ifconst	HSSUPPORT
    328  10000 ????			   -BEADHARDWARE SET	(BEADHARDWARE|BDHSC)
    329  10000 ????				       endif
    330  10000 ????				       endif
    331  10000 ????
    332  10000 ????						;start address of cart...
    333  10000 ????				       ifconst	ROM48K
    334  4000					      ORG	$4000,0
    335  4000					      ifconst	BEADHEADER
    336  4000		       be ad 02 	      .byte.b	$BE,$AD,BEADHARDWARE
    337  4003					      ifconst	GAMEDESCRIPTIONSET
    338  4003		       18		      CLC
    339  4004		       90 0a		      BCC	_SKIPDESCRIPTION
    340  4006		       54 65 73 74*	      .byte.b	GAMEDESCRIPTION,0
    341  4010				   _SKIPDESCRIPTION
    342  4010					      endif
    343  4010		       6c fc ff 	      jmp	($FFFC)
    344  4013					      endif
    345  4013				  -	      else
    346  4013				  -	      ifconst	bankswitchmode
    347  4013				  -	      ifconst	ROMAT4K
    348  4013				  -	      ORG	$4000,0
    349  4013				  -	      RORG	$4000
    350  4013				  -	      else
    351  4013				  -	      ORG	$8000,0
    352  4013				  -	      RORG	$8000
    353  4013				  -	      endif
    354  4013				  -	      else		; not bankswitchmode
    355  4013				  -	      ifconst	ROM16K
    356  4013				  -	      ORG	$C000,0
    357  4013				  -	      ifconst	BEADHEADER
    358  4013				  -	      .byte	$BE,$AD,BEADHARDWARE
    359  4013				  -	      ifconst	GAMEDESCRIPTION
    360  4013				  -	      CLC
    361  4013				  -	      BCC	_SKIPDESCRIPTION
    362  4013				  -	      .byte	GAMEDESCRIPTION,0
    363  4013				  -_SKIPDESCRIPTION
    364  4013				  -	      endif
    365  4013				  -	      jmp	($FFFC)
    366  4013				  -	      endif
    367  4013				  -	      else
    368  4013				  -	      ifconst	ROM8K
    369  4013				  -	      ORG	$E000,0
    370  4013				  -	      else
    371  4013				  -	      ORG	$8000,0
    372  4013				  -	      ifconst	BEADHEADER
    373  4013				  -	      .byte	$BE,$AD,BEADHARDWARE
    374  4013				  -	      ifconst	GAMEDESCRIPTION
    375  4013				  -	      CLC
    376  4013				  -	      BCC	_SKIPDESCRIPTION
    377  4013				  -	      .byte	GAMEDESCRIPTION,0
    378  4013				  -_SKIPDESCRIPTION
    379  4013				  -	      endif
    380  4013				  -	      jmp	($FFFC)
    381  4013				  -	      endif
    382  4013				  -	      endif
    383  4013				  -	      endif
    384  4013				  -	      endif
    385  4013					      endif
    386  4013
    387  4013				   game
    388  4013				   .L00 		;;  set zoneheight 8
    389  4013
    390  4013				   .L01 		;;  displaymode 160A
    391  4013
    392  4013		       a9 40		      lda	#%01000000	;Enable DMA, mode=160x2/160x4
    393  4015		       85 3c		      sta	CTRL
    394  4017
    395  4017		       8d 07 21 	      sta	sCTRL
    396  401a
    397  401a				   .L02 		;;  set plotvalueonscreen on
    398  401a
    399  401a				   .L03 		;;  set romsize 48k
    400  401a
    401  401a				   .
    402  401a							;; 
    403  401a
    404  401a				   .L04 		;;  incgraphic g8x8_4color.png 160A
    405  401a
    406  401a				   .L05 		;;  incgraphic g8x8_4color2.png 160A
    407  401a
    408  401a				   .L06 		;;  incgraphic g8x8_4color3.png 160A
    409  401a
    410  401a				   .L07 		;;  incgraphic g8x8_4color4.png 160A 
    411  401a
    412  401a				   .L08 		;;  incgraphic zonebg80x16_8.png 160A
    413  401a
    414  401a				   .L09 		;;  incgraphic font.png 160A
    415  401a
    416  401a				   .
    417  401a							;; 
    418  401a
    419  401a				   .L010		;;  rem font
    420  401a
    421  401a				   .L011		;;  alphachars '0123456789abcdefghijklmnopqrstuvwxyz>`?!/.,-_()[]&AB '
    422  401a
    423  401a				   .L012		;;  characterset font
    424  401a
    425  401a		       a9 e0		      lda	#>font
    426  401c		       85 34		      sta	CHARBASE
    427  401e		       8d 0b 21 	      sta	sCHARBASE
    428  4021
    429  4021		       a9 60		      lda	#(font_mode | %01100000)
    430  4023		       8d 06 21 	      sta	charactermode
    431  4026
    432  4026				   .
    433  4026							;; 
    434  4026
    435  4026				   .L013		;;  rem blue
    436  4026
    437  4026				   .L014		;;  P0C1 = $90
    438  4026
    439  4026		       a9 90		      LDA	#$90
    440  4028		       85 21		      STA	P0C1
    441  402a				   .L015		;;  P0C2 = $70
    442  402a
    443  402a		       a9 70		      LDA	#$70
    444  402c		       85 22		      STA	P0C2
    445  402e				   .L016		;;  P0C3 = $98
    446  402e
    447  402e		       a9 98		      LDA	#$98
    448  4030		       85 23		      STA	P0C3
    449  4032				   .L017		;;  rem red
    450  4032
    451  4032				   .L018		;;  P1C1 = $20
    452  4032
    453  4032		       a9 20		      LDA	#$20
    454  4034		       85 25		      STA	P1C1
    455  4036				   .L019		;;  P1C2 = $32
    456  4036
    457  4036		       a9 32		      LDA	#$32
    458  4038		       85 26		      STA	P1C2
    459  403a				   .L020		;;  P1C3 = $36
    460  403a
    461  403a		       a9 36		      LDA	#$36
    462  403c		       85 27		      STA	P1C3
    463  403e				   .L021		;;  rem green
    464  403e
    465  403e				   .L022		;;  P2C1 = $C1
    466  403e
    467  403e		       a9 c1		      LDA	#$C1
    468  4040		       85 29		      STA	P2C1
    469  4042				   .L023		;;  P2C2 = $C6
    470  4042
    471  4042		       a9 c6		      LDA	#$C6
    472  4044		       85 2a		      STA	P2C2
    473  4046				   .L024		;;  P2C3 = $CB
    474  4046
    475  4046		       a9 cb		      LDA	#$CB
    476  4048		       85 2b		      STA	P2C3
    477  404a				   .L025		;;  rem purple
    478  404a
    479  404a				   .L026		;;  P3C1 = $50
    480  404a
    481  404a		       a9 50		      LDA	#$50
    482  404c		       85 2d		      STA	P3C1
    483  404e				   .L027		;;  P3C2 = $53
    484  404e
    485  404e		       a9 53		      LDA	#$53
    486  4050		       85 2e		      STA	P3C2
    487  4052				   .L028		;;  P3C3 = $58
    488  4052
    489  4052		       a9 58		      LDA	#$58
    490  4054		       85 2f		      STA	P3C3
    491  4056				   .L029		;;  rem orange
    492  4056
    493  4056				   .L030		;;  P4C1 = $35
    494  4056
    495  4056		       a9 35		      LDA	#$35
    496  4058		       85 31		      STA	P4C1
    497  405a				   .L031		;;  P4C2 = $38
    498  405a
    499  405a		       a9 38		      LDA	#$38
    500  405c		       85 32		      STA	P4C2
    501  405e				   .L032		;;  P4C3 = $3C
    502  405e
    503  405e		       a9 3c		      LDA	#$3C
    504  4060		       85 33		      STA	P4C3
    505  4062				   .L033		;;  rem yellow
    506  4062
    507  4062				   .L034		;;  P5C1 = $15
    508  4062
    509  4062		       a9 15		      LDA	#$15
    510  4064		       85 35		      STA	P5C1
    511  4066				   .L035		;;  P5C2 = $1A
    512  4066
    513  4066		       a9 1a		      LDA	#$1A
    514  4068		       85 36		      STA	P5C2
    515  406a				   .L036		;;  P5C3 = $1E
    516  406a
    517  406a		       a9 1e		      LDA	#$1E
    518  406c		       85 37		      STA	P5C3
    519  406e				   .L037		;;  rem teal
    520  406e
    521  406e				   .L038		;;  P6C1 = $A1
    522  406e
    523  406e		       a9 a1		      LDA	#$A1
    524  4070		       85 39		      STA	P6C1
    525  4072				   .L039		;;  P6C2 = $A6
    526  4072
    527  4072		       a9 a6		      LDA	#$A6
    528  4074		       85 3a		      STA	P6C2
    529  4076				   .L040		;;  P6C3 = $Ac
    530  4076
    531  4076		       a9 ac		      LDA	#$Ac
    532  4078		       85 3b		      STA	P6C3
    533  407a				   .L041		;;  rem white
    534  407a
    535  407a				   .L042		;;  P7C1 = $0F
    536  407a
    537  407a		       a9 0f		      LDA	#$0F
    538  407c		       85 3d		      STA	P7C1
    539  407e				   .L043		;;  P7C2 = $05
    540  407e
    541  407e		       a9 05		      LDA	#$05
    542  4080		       85 3e		      STA	P7C2
    543  4082				   .L044		;;  P7C3 = $09
    544  4082
    545  4082		       a9 09		      LDA	#$09
    546  4084		       85 3f		      STA	P7C3
    547  4086				   .
    548  4086							;; 
    549  4086
    550  4086				   .L045		;;  rem lesson 1
    551  4086
    552  4086				   .L046		;;  w	=  0
    553  4086
    554  4086		       a9 00		      LDA	#0
    555  4088		       85 fc		      STA	w
    556  408a				   .L047		;;  z	=  0
    557  408a
    558  408a		       a9 00		      LDA	#0
    559  408c		       85 ff		      STA	z
    560  408e				   .
    561  408e							;; 
    562  408e
    563  408e				   .
    564  408e							;; 
    565  408e
    566  408e				   .
    567  408e							;; 
    568  408e
    569  408e				   .
    570  408e							;; 
    571  408e
    572  408e				   ._title
    573  408e							;; _title
    574  408e
    575  408e				   .L048		;;  clearscreen
    576  408e
    577  408e		       20 77 f0 	      jsr	clearscreen
    578  4091				   .L049		;;  plotchars 'demo^1' 7 67 10 1
    579  4091
    580  4091		       4c 9a 40 	      JMP	skipalphadata0
    581  4094				   alphadata0
    582  4094		       3d		      .byte.b	(<font + $0d)
    583  4095		       3e		      .byte.b	(<font + $0e)
    584  4096		       46		      .byte.b	(<font + $16)
    585  4097		       48		      .byte.b	(<font + $18)
    586  4098		       64		      .byte.b	(<font + $34)
    587  4099		       31		      .byte.b	(<font + $01)
    588  409a				   skipalphadata0
    589  409a		       a9 94		      lda	#<alphadata0
    590  409c		       85 42		      sta	temp1
    591  409e
    592  409e		       a9 40		      lda	#>alphadata0
    593  40a0		       85 43		      sta	temp2
    594  40a2
    595  40a2		       a9 1a		      lda	#26	; width in two's complement
    596  40a4		       09 e0		      ora	#224	; palette left shifted 5 bits
    597  40a6		       85 44		      sta	temp3
    598  40a8		       a9 43		      lda	#67
    599  40aa		       85 45		      sta	temp4
    600  40ac
    601  40ac		       a9 0a		      lda	#10
    602  40ae		       85 46		      sta	temp5
    603  40b0
    604  40b0		       20 42 f3 	      jsr	plotcharacters
    605  40b3				   .L050		;;  plotchars 'atari^7800^basic^exploration' 1 23 12 1
    606  40b3
    607  40b3		       4c d2 40 	      JMP	skipalphadata1
    608  40b6				   alphadata1
    609  40b6		       3a		      .byte.b	(<font + $0a)
    610  40b7		       4d		      .byte.b	(<font + $1d)
    611  40b8		       3a		      .byte.b	(<font + $0a)
    612  40b9		       4b		      .byte.b	(<font + $1b)
    613  40ba		       42		      .byte.b	(<font + $12)
    614  40bb		       64		      .byte.b	(<font + $34)
    615  40bc		       37		      .byte.b	(<font + $07)
    616  40bd		       38		      .byte.b	(<font + $08)
    617  40be		       30		      .byte.b	(<font + $00)
    618  40bf		       30		      .byte.b	(<font + $00)
    619  40c0		       64		      .byte.b	(<font + $34)
    620  40c1		       3b		      .byte.b	(<font + $0b)
    621  40c2		       3a		      .byte.b	(<font + $0a)
    622  40c3		       4c		      .byte.b	(<font + $1c)
    623  40c4		       42		      .byte.b	(<font + $12)
    624  40c5		       3c		      .byte.b	(<font + $0c)
    625  40c6		       64		      .byte.b	(<font + $34)
    626  40c7		       3e		      .byte.b	(<font + $0e)
    627  40c8		       51		      .byte.b	(<font + $21)
    628  40c9		       49		      .byte.b	(<font + $19)
    629  40ca		       45		      .byte.b	(<font + $15)
    630  40cb		       48		      .byte.b	(<font + $18)
    631  40cc		       4b		      .byte.b	(<font + $1b)
    632  40cd		       3a		      .byte.b	(<font + $0a)
    633  40ce		       4d		      .byte.b	(<font + $1d)
    634  40cf		       42		      .byte.b	(<font + $12)
    635  40d0		       48		      .byte.b	(<font + $18)
    636  40d1		       47		      .byte.b	(<font + $17)
    637  40d2				   skipalphadata1
    638  40d2		       a9 b6		      lda	#<alphadata1
    639  40d4		       85 42		      sta	temp1
    640  40d6
    641  40d6		       a9 40		      lda	#>alphadata1
    642  40d8		       85 43		      sta	temp2
    643  40da
    644  40da		       a9 04		      lda	#4	; width in two's complement
    645  40dc		       09 20		      ora	#32	; palette left shifted 5 bits
    646  40de		       85 44		      sta	temp3
    647  40e0		       a9 17		      lda	#23
    648  40e2		       85 45		      sta	temp4
    649  40e4
    650  40e4		       a9 0c		      lda	#12
    651  40e6		       85 46		      sta	temp5
    652  40e8
    653  40e8		       20 42 f3 	      jsr	plotcharacters
    654  40eb				   .L051		;;  plotchars '160a^zoneheight^8' 7 47 14 1
    655  40eb
    656  40eb		       4c ff 40 	      JMP	skipalphadata2
    657  40ee				   alphadata2
    658  40ee		       31		      .byte.b	(<font + $01)
    659  40ef		       36		      .byte.b	(<font + $06)
    660  40f0		       30		      .byte.b	(<font + $00)
    661  40f1		       3a		      .byte.b	(<font + $0a)
    662  40f2		       64		      .byte.b	(<font + $34)
    663  40f3		       53		      .byte.b	(<font + $23)
    664  40f4		       48		      .byte.b	(<font + $18)
    665  40f5		       47		      .byte.b	(<font + $17)
    666  40f6		       3e		      .byte.b	(<font + $0e)
    667  40f7		       41		      .byte.b	(<font + $11)
    668  40f8		       3e		      .byte.b	(<font + $0e)
    669  40f9		       42		      .byte.b	(<font + $12)
    670  40fa		       40		      .byte.b	(<font + $10)
    671  40fb		       41		      .byte.b	(<font + $11)
    672  40fc		       4d		      .byte.b	(<font + $1d)
    673  40fd		       64		      .byte.b	(<font + $34)
    674  40fe		       38		      .byte.b	(<font + $08)
    675  40ff				   skipalphadata2
    676  40ff		       a9 ee		      lda	#<alphadata2
    677  4101		       85 42		      sta	temp1
    678  4103
    679  4103		       a9 40		      lda	#>alphadata2
    680  4105		       85 43		      sta	temp2
    681  4107
    682  4107		       a9 0f		      lda	#15	; width in two's complement
    683  4109		       09 e0		      ora	#224	; palette left shifted 5 bits
    684  410b		       85 44		      sta	temp3
    685  410d		       a9 2f		      lda	#47
    686  410f		       85 45		      sta	temp4
    687  4111
    688  4111		       a9 0e		      lda	#14
    689  4113		       85 46		      sta	temp5
    690  4115
    691  4115		       20 42 f3 	      jsr	plotcharacters
    692  4118				   .L052		;;  if w  >  8  &&  joy0fire then w  =  0  :  goto _screen2_setup
    693  4118
    694  4118		       a9 08		      LDA	#8
    695  411a		       c5 fc		      CMP	w
    696  411c		       b0 0c		      BCS	.skipL052
    697  411e				   .condpart0
    698  411e		       2c 02 21 	      bit	sINPT1
    699  4121		       10 07		      BPL	.skip0then
    700  4123				   .condpart1
    701  4123		       a9 00		      LDA	#0
    702  4125		       85 fc		      STA	w
    703  4127		       4c 37 41 	      jmp	._screen2_setup
    704  412a
    705  412a				   .skip0then
    706  412a				   .skipL052
    707  412a				   .L053		;;  w	=  w  +  1
    708  412a
    709  412a		       a5 fc		      LDA	w
    710  412c		       18		      CLC
    711  412d		       69 01		      ADC	#1
    712  412f		       85 fc		      STA	w
    713  4131				   .L054		;;  drawscreen
    714  4131
    715  4131		       20 ab f0 	      jsr	drawscreen
    716  4134				   .L055		;;  goto _title
    717  4134
    718  4134		       4c 8e 40 	      jmp	._title
    719  4137
    720  4137				   .
    721  4137							;; 
    722  4137
    723  4137				   .
    724  4137							;; 
    725  4137
    726  4137				   .
    727  4137							;; 
    728  4137
    729  4137				   .
    730  4137							;; 
    731  4137
    732  4137				   .L056		;;  rem draw sprites with arrow with bg
    733  4137
    734  4137				   ._screen2_setup
    735  4137							;; _screen2_setup
    736  4137
    737  4137				   .L057		;;  clearscreen
    738  4137
    739  4137		       20 77 f0 	      jsr	clearscreen
    740  413a				   .L058		;;  gosub drawZoneBG
    741  413a
    742  413a		       20 91 45 	      jsr	.drawZoneBG
    743  413d
    744  413d				   .L059		;;  m	=  0
    745  413d
    746  413d		       a9 00		      LDA	#0
    747  413f		       85 f2		      STA	m
    748  4141				   .L060		;;  n	=  0
    749  4141
    750  4141		       a9 00		      LDA	#0
    751  4143		       85 f3		      STA	n
    752  4145				   .L061		;;  c	=  0
    753  4145
    754  4145		       a9 00		      LDA	#0
    755  4147		       85 e8		      STA	c
    756  4149				   ._screen2
    757  4149							;; _screen2
    758  4149
    759  4149				   .L062		;;  restorescreen
    760  4149
    761  4149		       20 89 f0 	      jsr	restorescreen
    762  414c				   .L063		;;  y	=  0
    763  414c
    764  414c		       a9 00		      LDA	#0
    765  414e		       85 fe		      STA	y
    766  4150				   .L064		;;  x	=  0
    767  4150
    768  4150		       a9 00		      LDA	#0
    769  4152		       85 fd		      STA	x
    770  4154				   .L065		;;  c	=  0
    771  4154
    772  4154		       a9 00		      LDA	#0
    773  4156		       85 e8		      STA	c
    774  4158				   .L066		;;  for i  =  0 to n
    775  4158
    776  4158		       a9 00		      LDA	#0
    777  415a		       85 ee		      STA	i
    778  415c				   .L066fori
    779  415c				   .L067		;;  for j  =  0 to m
    780  415c
    781  415c		       a9 00		      LDA	#0
    782  415e		       85 ef		      STA	j
    783  4160				   .L067forj
    784  4160				   .L068		;;  plotsprite g8x8_4color c x y 0
    785  4160
    786  4160		       a9 00		      lda	#<g8x8_4color
    787  4162		       85 42		      sta	temp1
    788  4164
    789  4164		       a9 e0		      lda	#>g8x8_4color
    790  4166		       85 43		      sta	temp2
    791  4168
    792  4168		       a5 e8		      lda	c
    793  416a		       0a		      asl
    794  416b		       0a		      asl
    795  416c		       0a		      asl
    796  416d		       0a		      asl
    797  416e		       0a		      asl
    798  416f		       09 1e		      ora	#g8x8_4color_width_twoscompliment
    799  4171		       85 44		      sta	temp3
    800  4173
    801  4173		       a5 fd		      lda	x
    802  4175		       85 45		      sta	temp4
    803  4177
    804  4177		       a5 fe		      lda	y
    805  4179		       85 46		      sta	temp5
    806  417b
    807  417b		       a9 40		      lda	#(g8x8_4color_mode|%01000000)
    808  417d		       85 47		      sta	temp6
    809  417f
    810  417f		       20 8b f2 	      jsr	plotsprite
    811  4182				   .L069		;;  x	=  x  +  8
    812  4182
    813  4182		       a5 fd		      LDA	x
    814  4184		       18		      CLC
    815  4185		       69 08		      ADC	#8
    816  4187		       85 fd		      STA	x
    817  4189				   .L070		;;  next
    818  4189
    819  4189		       a5 ef		      LDA	j
    820  418b		       c5 f2		      CMP	m
    821  418d		       e6 ef		      INC	j
    822  418f					      if	((* - .L067forj) < 127) && ((* - .L067forj) > -128)
    823  418f		       90 cf		      bcc	.L067forj
    824  4191				  -	      else
    825  4191				  -	      bcs	.0skipL067forj
    826  4191				  -	      jmp	.L067forj
    827  4191				  -.0skipL067forj
    828  4191					      endif
    829  4191				   .L071		;;  x	=  0
    830  4191
    831  4191		       a9 00		      LDA	#0
    832  4193		       85 fd		      STA	x
    833  4195				   .L072		;;  y	=  y  +  8
    834  4195
    835  4195		       a5 fe		      LDA	y
    836  4197		       18		      CLC
    837  4198		       69 08		      ADC	#8
    838  419a		       85 fe		      STA	y
    839  419c				   .L073		;;  c	=  c  +  1
    840  419c
    841  419c		       a5 e8		      LDA	c
    842  419e		       18		      CLC
    843  419f		       69 01		      ADC	#1
    844  41a1		       85 e8		      STA	c
    845  41a3				   .L074		;;  if c  >  6 then c	=  0
    846  41a3
    847  41a3		       a9 06		      LDA	#6
    848  41a5		       c5 e8		      CMP	c
    849  41a7		       b0 04		      BCS	.skipL074
    850  41a9				   .condpart2
    851  41a9		       a9 00		      LDA	#0
    852  41ab		       85 e8		      STA	c
    853  41ad				   .skipL074
    854  41ad				   .L075		;;  next
    855  41ad
    856  41ad		       a5 ee		      LDA	i
    857  41af		       c5 f3		      CMP	n
    858  41b1		       e6 ee		      INC	i
    859  41b3					      if	((* - .L066fori) < 127) && ((* - .L066fori) > -128)
    860  41b3		       90 a7		      bcc	.L066fori
    861  41b5				  -	      else
    862  41b5				  -	      bcs	.1skipL066fori
    863  41b5				  -	      jmp	.L066fori
    864  41b5				  -.1skipL066fori
    865  41b5					      endif
    866  41b5				   .L076		;;  if w  >  8  &&  joy0right then w  = 0  :  m  =  m	+  1
    867  41b5
    868  41b5		       a9 08		      LDA	#8
    869  41b7		       c5 fc		      CMP	w
    870  41b9		       b0 10		      BCS	.skipL076
    871  41bb				   .condpart3
    872  41bb		       2c 80 02 	      bit	SWCHA
    873  41be		       30 0b		      BMI	.skip3then
    874  41c0				   .condpart4
    875  41c0		       a9 00		      LDA	#0
    876  41c2		       85 fc		      STA	w
    877  41c4		       a5 f2		      LDA	m
    878  41c6		       18		      CLC
    879  41c7		       69 01		      ADC	#1
    880  41c9		       85 f2		      STA	m
    881  41cb				   .skip3then
    882  41cb				   .skipL076
    883  41cb				   .L077		;;  if w  >  8  &&  joy0down then w  =  0  :  n  =  n	+  1
    884  41cb
    885  41cb		       a9 08		      LDA	#8
    886  41cd		       c5 fc		      CMP	w
    887  41cf		       b0 12		      BCS	.skipL077
    888  41d1				   .condpart5
    889  41d1		       a9 20		      lda	#$20
    890  41d3		       2c 80 02 	      bit	SWCHA
    891  41d6		       d0 0b		      BNE	.skip5then
    892  41d8				   .condpart6
    893  41d8		       a9 00		      LDA	#0
    894  41da		       85 fc		      STA	w
    895  41dc		       a5 f3		      LDA	n
    896  41de		       18		      CLC
    897  41df		       69 01		      ADC	#1
    898  41e1		       85 f3		      STA	n
    899  41e3				   .skip5then
    900  41e3				   .skipL077
    901  41e3				   .L078		;;  if w  >  8  &&  joy0left then w  = 0  :  m  =  m  -  1
    902  41e3
    903  41e3		       a9 08		      LDA	#8
    904  41e5		       c5 fc		      CMP	w
    905  41e7		       b0 10		      BCS	.skipL078
    906  41e9				   .condpart7
    907  41e9		       2c 80 02 	      bit	SWCHA
    908  41ec		       70 0b		      BVS	.skip7then
    909  41ee				   .condpart8
    910  41ee		       a9 00		      LDA	#0
    911  41f0		       85 fc		      STA	w
    912  41f2		       a5 f2		      LDA	m
    913  41f4		       38		      SEC
    914  41f5		       e9 01		      SBC	#1
    915  41f7		       85 f2		      STA	m
    916  41f9				   .skip7then
    917  41f9				   .skipL078
    918  41f9				   .L079		;;  if w  >  8  &&  joy0up then w  =  0  :  n	=  n  -  1
    919  41f9
    920  41f9		       a9 08		      LDA	#8
    921  41fb		       c5 fc		      CMP	w
    922  41fd		       b0 12		      BCS	.skipL079
    923  41ff				   .condpart9
    924  41ff		       a9 10		      lda	#$10
    925  4201		       2c 80 02 	      bit	SWCHA
    926  4204		       d0 0b		      BNE	.skip9then
    927  4206				   .condpart10
    928  4206		       a9 00		      LDA	#0
    929  4208		       85 fc		      STA	w
    930  420a		       a5 f3		      LDA	n
    931  420c		       38		      SEC
    932  420d		       e9 01		      SBC	#1
    933  420f		       85 f3		      STA	n
    934  4211				   .skip9then
    935  4211				   .skipL079
    936  4211				   .L080		;;  if w  >  8  &&  joy0fire then w  =  0  :  goto _screen3_setup
    937  4211
    938  4211		       a9 08		      LDA	#8
    939  4213		       c5 fc		      CMP	w
    940  4215		       b0 0c		      BCS	.skipL080
    941  4217				   .condpart11
    942  4217		       2c 02 21 	      bit	sINPT1
    943  421a		       10 07		      BPL	.skip11then
    944  421c				   .condpart12
    945  421c		       a9 00		      LDA	#0
    946  421e		       85 fc		      STA	w
    947  4220		       4c f2 42 	      jmp	._screen3_setup
    948  4223
    949  4223				   .skip11then
    950  4223				   .skipL080
    951  4223				   .L081		;;  w	=  w  +  1
    952  4223
    953  4223		       a5 fc		      LDA	w
    954  4225		       18		      CLC
    955  4226		       69 01		      ADC	#1
    956  4228		       85 fc		      STA	w
    957  422a				   .L082		;;  if n  >  24 then n  =  0
    958  422a
    959  422a		       a9 18		      LDA	#24
    960  422c		       c5 f3		      CMP	n
    961  422e		       b0 04		      BCS	.skipL082
    962  4230				   .condpart13
    963  4230		       a9 00		      LDA	#0
    964  4232		       85 f3		      STA	n
    965  4234				   .skipL082
    966  4234				   .L083		;;  if m  >  20 then m  =  0
    967  4234
    968  4234		       a9 14		      LDA	#20
    969  4236		       c5 f2		      CMP	m
    970  4238		       b0 04		      BCS	.skipL083
    971  423a				   .condpart14
    972  423a		       a9 00		      LDA	#0
    973  423c		       85 f2		      STA	m
    974  423e				   .skipL083
    975  423e				   .L084		;;  rem plotchars 'joystick to draw fire to next' 7 10 23 1
    976  423e
    977  423e				   .L085		;;  r	=  n  +  1
    978  423e
    979  423e		       a5 f3		      LDA	n
    980  4240		       18		      CLC
    981  4241		       69 01		      ADC	#1
    982  4243		       85 f7		      STA	r
    983  4245				   .L086		;;  s	=  m  +  1
    984  4245
    985  4245		       a5 f2		      LDA	m
    986  4247		       18		      CLC
    987  4248		       69 01		      ADC	#1
    988  424a		       85 f8		      STA	s
    989  424c				   .L087		;;  plotvalue font 7 s 2 25 23 doublewide
    990  424c
    991  424c		       a9 30		      lda	#<font
    992  424e		       85 42		      sta	temp1
    993  4250
    994  4250		       a9 e0		      lda	#>font
    995  4252		       85 43		      sta	temp2
    996  4254
    997  4254		       ad 06 21 	      lda	charactermode
    998  4257		       85 4a		      sta	temp9
    999  4259		       a9 60		      lda	#(font_mode | %01100000)
   1000  425b		       8d 06 21 	      sta	charactermode
   1001  425e		       a9 1e		      lda	#30	; width in two's complement
   1002  4260		       09 e0		      ora	#224	; palette left shifted 5 bits
   1003  4262		       85 44		      sta	temp3
   1004  4264		       a9 19		      lda	#25
   1005  4266		       85 45		      sta	temp4
   1006  4268
   1007  4268		       a9 17		      lda	#23
   1008  426a		       85 46		      sta	temp5
   1009  426c
   1010  426c		       a9 02		      lda	#2
   1011  426e		       85 47		      sta	temp6
   1012  4270
   1013  4270		       a9 f8		      lda	#<s
   1014  4272		       85 48		      sta	temp7
   1015  4274
   1016  4274		       a9 00		      lda	#>s
   1017  4276		       85 49		      sta	temp8
   1018  4278
   1019  4278		       20 9e f3 	      jsr	plotvalue
   1020  4278		       00 01	   USED_PLOTVALUE =	1
   1021  427b		       a5 4a		      lda	temp9
   1022  427d		       8d 06 21 	      sta	charactermode
   1023  4280				   .L088		;;  plotvalue font 7 r 2 35 23 doublewide
   1024  4280
   1025  4280		       a9 30		      lda	#<font
   1026  4282		       85 42		      sta	temp1
   1027  4284
   1028  4284		       a9 e0		      lda	#>font
   1029  4286		       85 43		      sta	temp2
   1030  4288
   1031  4288		       ad 06 21 	      lda	charactermode
   1032  428b		       85 4a		      sta	temp9
   1033  428d		       a9 60		      lda	#(font_mode | %01100000)
   1034  428f		       8d 06 21 	      sta	charactermode
   1035  4292		       a9 1e		      lda	#30	; width in two's complement
   1036  4294		       09 e0		      ora	#224	; palette left shifted 5 bits
   1037  4296		       85 44		      sta	temp3
   1038  4298		       a9 23		      lda	#35
   1039  429a		       85 45		      sta	temp4
   1040  429c
   1041  429c		       a9 17		      lda	#23
   1042  429e		       85 46		      sta	temp5
   1043  42a0
   1044  42a0		       a9 02		      lda	#2
   1045  42a2		       85 47		      sta	temp6
   1046  42a4
   1047  42a4		       a9 f7		      lda	#<r
   1048  42a6		       85 48		      sta	temp7
   1049  42a8
   1050  42a8		       a9 00		      lda	#>r
   1051  42aa		       85 49		      sta	temp8
   1052  42ac
   1053  42ac		       20 9e f3 	      jsr	plotvalue
   1054  42ac		       00 01	   USED_PLOTVALUE =	1
   1055  42af		       a5 4a		      lda	temp9
   1056  42b1		       8d 06 21 	      sta	charactermode
   1057  42b4				   .L089		;;  plotvalue font 7 z 2 45 23 doublewide
   1058  42b4
   1059  42b4		       a9 30		      lda	#<font
   1060  42b6		       85 42		      sta	temp1
   1061  42b8
   1062  42b8		       a9 e0		      lda	#>font
   1063  42ba		       85 43		      sta	temp2
   1064  42bc
   1065  42bc		       ad 06 21 	      lda	charactermode
   1066  42bf		       85 4a		      sta	temp9
   1067  42c1		       a9 60		      lda	#(font_mode | %01100000)
   1068  42c3		       8d 06 21 	      sta	charactermode
   1069  42c6		       a9 1e		      lda	#30	; width in two's complement
   1070  42c8		       09 e0		      ora	#224	; palette left shifted 5 bits
   1071  42ca		       85 44		      sta	temp3
   1072  42cc		       a9 2d		      lda	#45
   1073  42ce		       85 45		      sta	temp4
   1074  42d0
   1075  42d0		       a9 17		      lda	#23
   1076  42d2		       85 46		      sta	temp5
   1077  42d4
   1078  42d4		       a9 02		      lda	#2
   1079  42d6		       85 47		      sta	temp6
   1080  42d8
   1081  42d8		       a9 ff		      lda	#<z
   1082  42da		       85 48		      sta	temp7
   1083  42dc
   1084  42dc		       a9 00		      lda	#>z
   1085  42de		       85 49		      sta	temp8
   1086  42e0
   1087  42e0		       20 9e f3 	      jsr	plotvalue
   1088  42e0		       00 01	   USED_PLOTVALUE =	1
   1089  42e3		       a5 4a		      lda	temp9
   1090  42e5		       8d 06 21 	      sta	charactermode
   1091  42e8				   .L090		;;  drawscreen
   1092  42e8
   1093  42e8		       20 ab f0 	      jsr	drawscreen
   1094  42eb				   .L091		;;  z	=  0
   1095  42eb
   1096  42eb		       a9 00		      LDA	#0
   1097  42ed		       85 ff		      STA	z
   1098  42ef				   .L092		;;  goto _screen2
   1099  42ef
   1100  42ef		       4c 49 41 	      jmp	._screen2
   1101  42f2
   1102  42f2				   .
   1103  42f2							;; 
   1104  42f2
   1105  42f2				   .L093		;;  rem draw sprites with arrow no bg
   1106  42f2
   1107  42f2				   ._screen3_setup
   1108  42f2							;; _screen3_setup
   1109  42f2
   1110  42f2				   .L094		;;  m	=  0
   1111  42f2
   1112  42f2		       a9 00		      LDA	#0
   1113  42f4		       85 f2		      STA	m
   1114  42f6				   .L095		;;  n	=  0
   1115  42f6
   1116  42f6		       a9 00		      LDA	#0
   1117  42f8		       85 f3		      STA	n
   1118  42fa				   .L096		;;  c	=  0
   1119  42fa
   1120  42fa		       a9 00		      LDA	#0
   1121  42fc		       85 e8		      STA	c
   1122  42fe				   ._screen3
   1123  42fe							;; _screen3
   1124  42fe
   1125  42fe				   .L097		;;  clearscreen
   1126  42fe
   1127  42fe		       20 77 f0 	      jsr	clearscreen
   1128  4301				   .L098		;;  y	=  0
   1129  4301
   1130  4301		       a9 00		      LDA	#0
   1131  4303		       85 fe		      STA	y
   1132  4305				   .L099		;;  x	=  0
   1133  4305
   1134  4305		       a9 00		      LDA	#0
   1135  4307		       85 fd		      STA	x
   1136  4309				   .L0100		;;  c	=  0
   1137  4309
   1138  4309		       a9 00		      LDA	#0
   1139  430b		       85 e8		      STA	c
   1140  430d				   .L0101		;;  for i  =  0 to n
   1141  430d
   1142  430d		       a9 00		      LDA	#0
   1143  430f		       85 ee		      STA	i
   1144  4311				   .L0101fori
   1145  4311				   .L0102		;;  for j  =  0 to m
   1146  4311
   1147  4311		       a9 00		      LDA	#0
   1148  4313		       85 ef		      STA	j
   1149  4315				   .L0102forj
   1150  4315				   .L0103		;;  plotsprite g8x8_4color c x y 0
   1151  4315
   1152  4315		       a9 00		      lda	#<g8x8_4color
   1153  4317		       85 42		      sta	temp1
   1154  4319
   1155  4319		       a9 e0		      lda	#>g8x8_4color
   1156  431b		       85 43		      sta	temp2
   1157  431d
   1158  431d		       a5 e8		      lda	c
   1159  431f		       0a		      asl
   1160  4320		       0a		      asl
   1161  4321		       0a		      asl
   1162  4322		       0a		      asl
   1163  4323		       0a		      asl
   1164  4324		       09 1e		      ora	#g8x8_4color_width_twoscompliment
   1165  4326		       85 44		      sta	temp3
   1166  4328
   1167  4328		       a5 fd		      lda	x
   1168  432a		       85 45		      sta	temp4
   1169  432c
   1170  432c		       a5 fe		      lda	y
   1171  432e		       85 46		      sta	temp5
   1172  4330
   1173  4330		       a9 40		      lda	#(g8x8_4color_mode|%01000000)
   1174  4332		       85 47		      sta	temp6
   1175  4334
   1176  4334		       20 8b f2 	      jsr	plotsprite
   1177  4337				   .L0104		;;  x	=  x  +  8
   1178  4337
   1179  4337		       a5 fd		      LDA	x
   1180  4339		       18		      CLC
   1181  433a		       69 08		      ADC	#8
   1182  433c		       85 fd		      STA	x
   1183  433e				   .L0105		;;  next
   1184  433e
   1185  433e		       a5 ef		      LDA	j
   1186  4340		       c5 f2		      CMP	m
   1187  4342		       e6 ef		      INC	j
   1188  4344					      if	((* - .L0102forj) < 127) && ((* - .L0102forj) > -128)
   1189  4344		       90 cf		      bcc	.L0102forj
   1190  4346				  -	      else
   1191  4346				  -	      bcs	.2skipL0102forj
   1192  4346				  -	      jmp	.L0102forj
   1193  4346				  -.2skipL0102forj
   1194  4346					      endif
   1195  4346				   .L0106		;;  x	=  0
   1196  4346
   1197  4346		       a9 00		      LDA	#0
   1198  4348		       85 fd		      STA	x
   1199  434a				   .L0107		;;  y	=  y  +  8
   1200  434a
   1201  434a		       a5 fe		      LDA	y
   1202  434c		       18		      CLC
   1203  434d		       69 08		      ADC	#8
   1204  434f		       85 fe		      STA	y
   1205  4351				   .L0108		;;  c	=  c  +  1
   1206  4351
   1207  4351		       a5 e8		      LDA	c
   1208  4353		       18		      CLC
   1209  4354		       69 01		      ADC	#1
   1210  4356		       85 e8		      STA	c
   1211  4358				   .L0109		;;  if c  >  6 then c	=  0
   1212  4358
   1213  4358		       a9 06		      LDA	#6
   1214  435a		       c5 e8		      CMP	c
   1215  435c		       b0 04		      BCS	.skipL0109
   1216  435e				   .condpart15
   1217  435e		       a9 00		      LDA	#0
   1218  4360		       85 e8		      STA	c
   1219  4362				   .skipL0109
   1220  4362				   .L0110		;;  next
   1221  4362
   1222  4362		       a5 ee		      LDA	i
   1223  4364		       c5 f3		      CMP	n
   1224  4366		       e6 ee		      INC	i
   1225  4368					      if	((* - .L0101fori) < 127) && ((* - .L0101fori) > -128)
   1226  4368		       90 a7		      bcc	.L0101fori
   1227  436a				  -	      else
   1228  436a				  -	      bcs	.3skipL0101fori
   1229  436a				  -	      jmp	.L0101fori
   1230  436a				  -.3skipL0101fori
   1231  436a					      endif
   1232  436a				   .L0111		;;  if w  >  8  &&  joy0right then w  = 0  :  m  =  m	+  1
   1233  436a
   1234  436a		       a9 08		      LDA	#8
   1235  436c		       c5 fc		      CMP	w
   1236  436e		       b0 10		      BCS	.skipL0111
   1237  4370				   .condpart16
   1238  4370		       2c 80 02 	      bit	SWCHA
   1239  4373		       30 0b		      BMI	.skip16then
   1240  4375				   .condpart17
   1241  4375		       a9 00		      LDA	#0
   1242  4377		       85 fc		      STA	w
   1243  4379		       a5 f2		      LDA	m
   1244  437b		       18		      CLC
   1245  437c		       69 01		      ADC	#1
   1246  437e		       85 f2		      STA	m
   1247  4380				   .skip16then
   1248  4380				   .skipL0111
   1249  4380				   .L0112		;;  if w  >  8  &&  joy0down then w  =  0  :  n  =  n	+  1
   1250  4380
   1251  4380		       a9 08		      LDA	#8
   1252  4382		       c5 fc		      CMP	w
   1253  4384		       b0 12		      BCS	.skipL0112
   1254  4386				   .condpart18
   1255  4386		       a9 20		      lda	#$20
   1256  4388		       2c 80 02 	      bit	SWCHA
   1257  438b		       d0 0b		      BNE	.skip18then
   1258  438d				   .condpart19
   1259  438d		       a9 00		      LDA	#0
   1260  438f		       85 fc		      STA	w
   1261  4391		       a5 f3		      LDA	n
   1262  4393		       18		      CLC
   1263  4394		       69 01		      ADC	#1
   1264  4396		       85 f3		      STA	n
   1265  4398				   .skip18then
   1266  4398				   .skipL0112
   1267  4398				   .L0113		;;  if w  >  8  &&  joy0left then w  = 0  :  m  =  m  -  1
   1268  4398
   1269  4398		       a9 08		      LDA	#8
   1270  439a		       c5 fc		      CMP	w
   1271  439c		       b0 10		      BCS	.skipL0113
   1272  439e				   .condpart20
   1273  439e		       2c 80 02 	      bit	SWCHA
   1274  43a1		       70 0b		      BVS	.skip20then
   1275  43a3				   .condpart21
   1276  43a3		       a9 00		      LDA	#0
   1277  43a5		       85 fc		      STA	w
   1278  43a7		       a5 f2		      LDA	m
   1279  43a9		       38		      SEC
   1280  43aa		       e9 01		      SBC	#1
   1281  43ac		       85 f2		      STA	m
   1282  43ae				   .skip20then
   1283  43ae				   .skipL0113
   1284  43ae				   .L0114		;;  if w  >  8  &&  joy0up then w  =  0  :  n	=  n  -  1
   1285  43ae
   1286  43ae		       a9 08		      LDA	#8
   1287  43b0		       c5 fc		      CMP	w
   1288  43b2		       b0 12		      BCS	.skipL0114
   1289  43b4				   .condpart22
   1290  43b4		       a9 10		      lda	#$10
   1291  43b6		       2c 80 02 	      bit	SWCHA
   1292  43b9		       d0 0b		      BNE	.skip22then
   1293  43bb				   .condpart23
   1294  43bb		       a9 00		      LDA	#0
   1295  43bd		       85 fc		      STA	w
   1296  43bf		       a5 f3		      LDA	n
   1297  43c1		       38		      SEC
   1298  43c2		       e9 01		      SBC	#1
   1299  43c4		       85 f3		      STA	n
   1300  43c6				   .skip22then
   1301  43c6				   .skipL0114
   1302  43c6				   .L0115		;;  if w  >  8  &&  joy0fire then w  =  0  :  goto _screen4_setup
   1303  43c6
   1304  43c6		       a9 08		      LDA	#8
   1305  43c8		       c5 fc		      CMP	w
   1306  43ca		       b0 0c		      BCS	.skipL0115
   1307  43cc				   .condpart24
   1308  43cc		       2c 02 21 	      bit	sINPT1
   1309  43cf		       10 07		      BPL	.skip24then
   1310  43d1				   .condpart25
   1311  43d1		       a9 00		      LDA	#0
   1312  43d3		       85 fc		      STA	w
   1313  43d5		       4c 32 44 	      jmp	._screen4_setup
   1314  43d8
   1315  43d8				   .skip24then
   1316  43d8				   .skipL0115
   1317  43d8				   .L0116		;;  w	=  w  +  1
   1318  43d8
   1319  43d8		       a5 fc		      LDA	w
   1320  43da		       18		      CLC
   1321  43db		       69 01		      ADC	#1
   1322  43dd		       85 fc		      STA	w
   1323  43df				   .L0117		;;  if n  >  24 then n  =  0
   1324  43df
   1325  43df		       a9 18		      LDA	#24
   1326  43e1		       c5 f3		      CMP	n
   1327  43e3		       b0 04		      BCS	.skipL0117
   1328  43e5				   .condpart26
   1329  43e5		       a9 00		      LDA	#0
   1330  43e7		       85 f3		      STA	n
   1331  43e9				   .skipL0117
   1332  43e9				   .L0118		;;  if m  >  20 then m  =  0
   1333  43e9
   1334  43e9		       a9 14		      LDA	#20
   1335  43eb		       c5 f2		      CMP	m
   1336  43ed		       b0 04		      BCS	.skipL0118
   1337  43ef				   .condpart27
   1338  43ef		       a9 00		      LDA	#0
   1339  43f1		       85 f2		      STA	m
   1340  43f3				   .skipL0118
   1341  43f3				   .L0119		;;  plotchars 'joystick^to^draw^fire^to^next' 7 10 23 1
   1342  43f3
   1343  43f3		       4c 13 44 	      JMP	skipalphadata3
   1344  43f6				   alphadata3
   1345  43f6		       43		      .byte.b	(<font + $13)
   1346  43f7		       48		      .byte.b	(<font + $18)
   1347  43f8		       52		      .byte.b	(<font + $22)
   1348  43f9		       4c		      .byte.b	(<font + $1c)
   1349  43fa		       4d		      .byte.b	(<font + $1d)
   1350  43fb		       42		      .byte.b	(<font + $12)
   1351  43fc		       3c		      .byte.b	(<font + $0c)
   1352  43fd		       44		      .byte.b	(<font + $14)
   1353  43fe		       64		      .byte.b	(<font + $34)
   1354  43ff		       4d		      .byte.b	(<font + $1d)
   1355  4400		       48		      .byte.b	(<font + $18)
   1356  4401		       64		      .byte.b	(<font + $34)
   1357  4402		       3d		      .byte.b	(<font + $0d)
   1358  4403		       4b		      .byte.b	(<font + $1b)
   1359  4404		       3a		      .byte.b	(<font + $0a)
   1360  4405		       50		      .byte.b	(<font + $20)
   1361  4406		       64		      .byte.b	(<font + $34)
   1362  4407		       3f		      .byte.b	(<font + $0f)
   1363  4408		       42		      .byte.b	(<font + $12)
   1364  4409		       4b		      .byte.b	(<font + $1b)
   1365  440a		       3e		      .byte.b	(<font + $0e)
   1366  440b		       64		      .byte.b	(<font + $34)
   1367  440c		       4d		      .byte.b	(<font + $1d)
   1368  440d		       48		      .byte.b	(<font + $18)
   1369  440e		       64		      .byte.b	(<font + $34)
   1370  440f		       47		      .byte.b	(<font + $17)
   1371  4410		       3e		      .byte.b	(<font + $0e)
   1372  4411		       51		      .byte.b	(<font + $21)
   1373  4412		       4d		      .byte.b	(<font + $1d)
   1374  4413				   skipalphadata3
   1375  4413		       a9 f6		      lda	#<alphadata3
   1376  4415		       85 42		      sta	temp1
   1377  4417
   1378  4417		       a9 43		      lda	#>alphadata3
   1379  4419		       85 43		      sta	temp2
   1380  441b
   1381  441b		       a9 03		      lda	#3	; width in two's complement
   1382  441d		       09 e0		      ora	#224	; palette left shifted 5 bits
   1383  441f		       85 44		      sta	temp3
   1384  4421		       a9 0a		      lda	#10
   1385  4423		       85 45		      sta	temp4
   1386  4425
   1387  4425		       a9 17		      lda	#23
   1388  4427		       85 46		      sta	temp5
   1389  4429
   1390  4429		       20 42 f3 	      jsr	plotcharacters
   1391  442c				   .L0120		;;  drawscreen
   1392  442c
   1393  442c		       20 ab f0 	      jsr	drawscreen
   1394  442f				   .L0121		;;  goto _screen3
   1395  442f
   1396  442f		       4c fe 42 	      jmp	._screen3
   1397  4432
   1398  4432				   .
   1399  4432							;; 
   1400  4432
   1401  4432				   .L0122		;;  rem draw sprites with arrow no bg animated
   1402  4432
   1403  4432				   .
   1404  4432							;; 
   1405  4432
   1406  4432				   ._screen4_setup
   1407  4432							;; _screen4_setup
   1408  4432
   1409  4432				   .L0123		;;  m	=  0
   1410  4432
   1411  4432		       a9 00		      LDA	#0
   1412  4434		       85 f2		      STA	m
   1413  4436				   .L0124		;;  n	=  0
   1414  4436
   1415  4436		       a9 00		      LDA	#0
   1416  4438		       85 f3		      STA	n
   1417  443a				   .L0125		;;  c	=  0
   1418  443a
   1419  443a		       a9 00		      LDA	#0
   1420  443c		       85 e8		      STA	c
   1421  443e				   .L0126		;;  f	=  0
   1422  443e
   1423  443e		       a9 00		      LDA	#0
   1424  4440		       85 eb		      STA	f
   1425  4442				   .
   1426  4442							;; 
   1427  4442
   1428  4442				   ._screen4
   1429  4442							;; _screen4
   1430  4442
   1431  4442				   .L0127		;;  clearscreen
   1432  4442
   1433  4442		       20 77 f0 	      jsr	clearscreen
   1434  4445				   .L0128		;;  y	=  0
   1435  4445
   1436  4445		       a9 00		      LDA	#0
   1437  4447		       85 fe		      STA	y
   1438  4449				   .L0129		;;  x	=  0
   1439  4449
   1440  4449		       a9 00		      LDA	#0
   1441  444b		       85 fd		      STA	x
   1442  444d				   .L0130		;;  c	=  0
   1443  444d
   1444  444d		       a9 00		      LDA	#0
   1445  444f		       85 e8		      STA	c
   1446  4451				   .L0131		;;  for i  =  0 to n
   1447  4451
   1448  4451		       a9 00		      LDA	#0
   1449  4453		       85 ee		      STA	i
   1450  4455				   .L0131fori
   1451  4455				   .L0132		;;  for j  =  0 to m
   1452  4455
   1453  4455		       a9 00		      LDA	#0
   1454  4457		       85 ef		      STA	j
   1455  4459				   .L0132forj
   1456  4459				   .L0133		;;  plotsprite g8x8_4color c x y f
   1457  4459
   1458  4459		       a9 00		      lda	#<g8x8_4color
   1459  445b		       a0 02		      ldy	#g8x8_4color_width
   1460  445d		       18		      clc
   1461  445e		       f0 05		      beq	plotspritewidthskip4
   1462  4460				   plotspritewidthloop4
   1463  4460		       65 eb		      adc	f
   1464  4462		       88		      dey
   1465  4463		       d0 fb		      bne	plotspritewidthloop4
   1466  4465				   plotspritewidthskip4
   1467  4465		       85 42		      sta	temp1
   1468  4467
   1469  4467		       a9 e0		      lda	#>g8x8_4color
   1470  4469		       85 43		      sta	temp2
   1471  446b
   1472  446b		       a5 e8		      lda	c
   1473  446d		       0a		      asl
   1474  446e		       0a		      asl
   1475  446f		       0a		      asl
   1476  4470		       0a		      asl
   1477  4471		       0a		      asl
   1478  4472		       09 1e		      ora	#g8x8_4color_width_twoscompliment
   1479  4474		       85 44		      sta	temp3
   1480  4476
   1481  4476		       a5 fd		      lda	x
   1482  4478		       85 45		      sta	temp4
   1483  447a
   1484  447a		       a5 fe		      lda	y
   1485  447c		       85 46		      sta	temp5
   1486  447e
   1487  447e		       a9 40		      lda	#(g8x8_4color_mode|%01000000)
   1488  4480		       85 47		      sta	temp6
   1489  4482
   1490  4482		       20 8b f2 	      jsr	plotsprite
   1491  4485				   .L0134		;;  x	=  x  +  8
   1492  4485
   1493  4485		       a5 fd		      LDA	x
   1494  4487		       18		      CLC
   1495  4488		       69 08		      ADC	#8
   1496  448a		       85 fd		      STA	x
   1497  448c				   .L0135		;;  next
   1498  448c
   1499  448c		       a5 ef		      LDA	j
   1500  448e		       c5 f2		      CMP	m
   1501  4490		       e6 ef		      INC	j
   1502  4492					      if	((* - .L0132forj) < 127) && ((* - .L0132forj) > -128)
   1503  4492		       90 c5		      bcc	.L0132forj
   1504  4494				  -	      else
   1505  4494				  -	      bcs	.4skipL0132forj
   1506  4494				  -	      jmp	.L0132forj
   1507  4494				  -.4skipL0132forj
   1508  4494					      endif
   1509  4494				   .L0136		;;  x	=  0
   1510  4494
   1511  4494		       a9 00		      LDA	#0
   1512  4496		       85 fd		      STA	x
   1513  4498				   .L0137		;;  y	=  y  +  8
   1514  4498
   1515  4498		       a5 fe		      LDA	y
   1516  449a		       18		      CLC
   1517  449b		       69 08		      ADC	#8
   1518  449d		       85 fe		      STA	y
   1519  449f				   .L0138		;;  c	=  c  +  1
   1520  449f
   1521  449f		       a5 e8		      LDA	c
   1522  44a1		       18		      CLC
   1523  44a2		       69 01		      ADC	#1
   1524  44a4		       85 e8		      STA	c
   1525  44a6				   .L0139		;;  if c  >  6 then c	=  0
   1526  44a6
   1527  44a6		       a9 06		      LDA	#6
   1528  44a8		       c5 e8		      CMP	c
   1529  44aa		       b0 04		      BCS	.skipL0139
   1530  44ac				   .condpart28
   1531  44ac		       a9 00		      LDA	#0
   1532  44ae		       85 e8		      STA	c
   1533  44b0				   .skipL0139
   1534  44b0				   .L0140		;;  next
   1535  44b0
   1536  44b0		       a5 ee		      LDA	i
   1537  44b2		       c5 f3		      CMP	n
   1538  44b4		       e6 ee		      INC	i
   1539  44b6					      if	((* - .L0131fori) < 127) && ((* - .L0131fori) > -128)
   1540  44b6		       90 9d		      bcc	.L0131fori
   1541  44b8				  -	      else
   1542  44b8				  -	      bcs	.5skipL0131fori
   1543  44b8				  -	      jmp	.L0131fori
   1544  44b8				  -.5skipL0131fori
   1545  44b8					      endif
   1546  44b8				   .L0141		;;  if w  >  8  &&  joy0right then w  = 0  :  m  =  m	+  1
   1547  44b8
   1548  44b8		       a9 08		      LDA	#8
   1549  44ba		       c5 fc		      CMP	w
   1550  44bc		       b0 10		      BCS	.skipL0141
   1551  44be				   .condpart29
   1552  44be		       2c 80 02 	      bit	SWCHA
   1553  44c1		       30 0b		      BMI	.skip29then
   1554  44c3				   .condpart30
   1555  44c3		       a9 00		      LDA	#0
   1556  44c5		       85 fc		      STA	w
   1557  44c7		       a5 f2		      LDA	m
   1558  44c9		       18		      CLC
   1559  44ca		       69 01		      ADC	#1
   1560  44cc		       85 f2		      STA	m
   1561  44ce				   .skip29then
   1562  44ce				   .skipL0141
   1563  44ce				   .L0142		;;  if w  >  8  &&  joy0down then w  =  0  :  n  =  n	+  1
   1564  44ce
   1565  44ce		       a9 08		      LDA	#8
   1566  44d0		       c5 fc		      CMP	w
   1567  44d2		       b0 12		      BCS	.skipL0142
   1568  44d4				   .condpart31
   1569  44d4		       a9 20		      lda	#$20
   1570  44d6		       2c 80 02 	      bit	SWCHA
   1571  44d9		       d0 0b		      BNE	.skip31then
   1572  44db				   .condpart32
   1573  44db		       a9 00		      LDA	#0
   1574  44dd		       85 fc		      STA	w
   1575  44df		       a5 f3		      LDA	n
   1576  44e1		       18		      CLC
   1577  44e2		       69 01		      ADC	#1
   1578  44e4		       85 f3		      STA	n
   1579  44e6				   .skip31then
   1580  44e6				   .skipL0142
   1581  44e6				   .L0143		;;  if w  >  8  &&  joy0left then w  = 0  :  m  =  m  -  1
   1582  44e6
   1583  44e6		       a9 08		      LDA	#8
   1584  44e8		       c5 fc		      CMP	w
   1585  44ea		       b0 10		      BCS	.skipL0143
   1586  44ec				   .condpart33
   1587  44ec		       2c 80 02 	      bit	SWCHA
   1588  44ef		       70 0b		      BVS	.skip33then
   1589  44f1				   .condpart34
   1590  44f1		       a9 00		      LDA	#0
   1591  44f3		       85 fc		      STA	w
   1592  44f5		       a5 f2		      LDA	m
   1593  44f7		       38		      SEC
   1594  44f8		       e9 01		      SBC	#1
   1595  44fa		       85 f2		      STA	m
   1596  44fc				   .skip33then
   1597  44fc				   .skipL0143
   1598  44fc				   .L0144		;;  if w  >  8  &&  joy0up then w  =  0  :  n	=  n  -  1
   1599  44fc
   1600  44fc		       a9 08		      LDA	#8
   1601  44fe		       c5 fc		      CMP	w
   1602  4500		       b0 12		      BCS	.skipL0144
   1603  4502				   .condpart35
   1604  4502		       a9 10		      lda	#$10
   1605  4504		       2c 80 02 	      bit	SWCHA
   1606  4507		       d0 0b		      BNE	.skip35then
   1607  4509				   .condpart36
   1608  4509		       a9 00		      LDA	#0
   1609  450b		       85 fc		      STA	w
   1610  450d		       a5 f3		      LDA	n
   1611  450f		       38		      SEC
   1612  4510		       e9 01		      SBC	#1
   1613  4512		       85 f3		      STA	n
   1614  4514				   .skip35then
   1615  4514				   .skipL0144
   1616  4514				   .L0145		;;  if w  >  8  &&  joy0fire then w  =  0  :  goto _screen4
   1617  4514
   1618  4514		       a9 08		      LDA	#8
   1619  4516		       c5 fc		      CMP	w
   1620  4518		       b0 0c		      BCS	.skipL0145
   1621  451a				   .condpart37
   1622  451a		       2c 02 21 	      bit	sINPT1
   1623  451d		       10 07		      BPL	.skip37then
   1624  451f				   .condpart38
   1625  451f		       a9 00		      LDA	#0
   1626  4521		       85 fc		      STA	w
   1627  4523		       4c 42 44 	      jmp	._screen4
   1628  4526
   1629  4526				   .skip37then
   1630  4526				   .skipL0145
   1631  4526				   .L0146		;;  w	=  w  +  1
   1632  4526
   1633  4526		       a5 fc		      LDA	w
   1634  4528		       18		      CLC
   1635  4529		       69 01		      ADC	#1
   1636  452b		       85 fc		      STA	w
   1637  452d				   .L0147		;;  f	=  f  +  1
   1638  452d
   1639  452d		       a5 eb		      LDA	f
   1640  452f		       18		      CLC
   1641  4530		       69 01		      ADC	#1
   1642  4532		       85 eb		      STA	f
   1643  4534				   .L0148		;;  if f  >  3 then f	=  0
   1644  4534
   1645  4534		       a9 03		      LDA	#3
   1646  4536		       c5 eb		      CMP	f
   1647  4538		       b0 04		      BCS	.skipL0148
   1648  453a				   .condpart39
   1649  453a		       a9 00		      LDA	#0
   1650  453c		       85 eb		      STA	f
   1651  453e				   .skipL0148
   1652  453e				   .L0149		;;  if n  >  24 then n  =  0
   1653  453e
   1654  453e		       a9 18		      LDA	#24
   1655  4540		       c5 f3		      CMP	n
   1656  4542		       b0 04		      BCS	.skipL0149
   1657  4544				   .condpart40
   1658  4544		       a9 00		      LDA	#0
   1659  4546		       85 f3		      STA	n
   1660  4548				   .skipL0149
   1661  4548				   .L0150		;;  if m  >  20 then m  =  0
   1662  4548
   1663  4548		       a9 14		      LDA	#20
   1664  454a		       c5 f2		      CMP	m
   1665  454c		       b0 04		      BCS	.skipL0150
   1666  454e				   .condpart41
   1667  454e		       a9 00		      LDA	#0
   1668  4550		       85 f2		      STA	m
   1669  4552				   .skipL0150
   1670  4552				   .L0151		;;  plotchars 'joystick^to^draw^fire^to^next' 7 10 23 1
   1671  4552
   1672  4552		       4c 72 45 	      JMP	skipalphadata5
   1673  4555				   alphadata5
   1674  4555		       43		      .byte.b	(<font + $13)
   1675  4556		       48		      .byte.b	(<font + $18)
   1676  4557		       52		      .byte.b	(<font + $22)
   1677  4558		       4c		      .byte.b	(<font + $1c)
   1678  4559		       4d		      .byte.b	(<font + $1d)
   1679  455a		       42		      .byte.b	(<font + $12)
   1680  455b		       3c		      .byte.b	(<font + $0c)
   1681  455c		       44		      .byte.b	(<font + $14)
   1682  455d		       64		      .byte.b	(<font + $34)
   1683  455e		       4d		      .byte.b	(<font + $1d)
   1684  455f		       48		      .byte.b	(<font + $18)
   1685  4560		       64		      .byte.b	(<font + $34)
   1686  4561		       3d		      .byte.b	(<font + $0d)
   1687  4562		       4b		      .byte.b	(<font + $1b)
   1688  4563		       3a		      .byte.b	(<font + $0a)
   1689  4564		       50		      .byte.b	(<font + $20)
   1690  4565		       64		      .byte.b	(<font + $34)
   1691  4566		       3f		      .byte.b	(<font + $0f)
   1692  4567		       42		      .byte.b	(<font + $12)
   1693  4568		       4b		      .byte.b	(<font + $1b)
   1694  4569		       3e		      .byte.b	(<font + $0e)
   1695  456a		       64		      .byte.b	(<font + $34)
   1696  456b		       4d		      .byte.b	(<font + $1d)
   1697  456c		       48		      .byte.b	(<font + $18)
   1698  456d		       64		      .byte.b	(<font + $34)
   1699  456e		       47		      .byte.b	(<font + $17)
   1700  456f		       3e		      .byte.b	(<font + $0e)
   1701  4570		       51		      .byte.b	(<font + $21)
   1702  4571		       4d		      .byte.b	(<font + $1d)
   1703  4572				   skipalphadata5
   1704  4572		       a9 55		      lda	#<alphadata5
   1705  4574		       85 42		      sta	temp1
   1706  4576
   1707  4576		       a9 45		      lda	#>alphadata5
   1708  4578		       85 43		      sta	temp2
   1709  457a
   1710  457a		       a9 03		      lda	#3	; width in two's complement
   1711  457c		       09 e0		      ora	#224	; palette left shifted 5 bits
   1712  457e		       85 44		      sta	temp3
   1713  4580		       a9 0a		      lda	#10
   1714  4582		       85 45		      sta	temp4
   1715  4584
   1716  4584		       a9 17		      lda	#23
   1717  4586		       85 46		      sta	temp5
   1718  4588
   1719  4588		       20 42 f3 	      jsr	plotcharacters
   1720  458b				   .L0152		;;  drawscreen
   1721  458b
   1722  458b		       20 ab f0 	      jsr	drawscreen
   1723  458e				   .L0153		;;  goto _screen4
   1724  458e
   1725  458e		       4c 42 44 	      jmp	._screen4
   1726  4591
   1727  4591				   .
   1728  4591							;; 
   1729  4591
   1730  4591				   .drawZoneBG
   1731  4591							;; drawZoneBG
   1732  4591
   1733  4591				   .L0154		;;  x	=  0
   1734  4591
   1735  4591		       a9 00		      LDA	#0
   1736  4593		       85 fd		      STA	x
   1737  4595				   .L0155		;;  y	=  0
   1738  4595
   1739  4595		       a9 00		      LDA	#0
   1740  4597		       85 fe		      STA	y
   1741  4599				   .L0156		;;  for j  =  0 to 12
   1742  4599
   1743  4599		       a9 00		      LDA	#0
   1744  459b		       85 ef		      STA	j
   1745  459d				   .L0156forj
   1746  459d				   .L0157		;;  for i  =  0 to 1
   1747  459d
   1748  459d		       a9 00		      LDA	#0
   1749  459f		       85 ee		      STA	i
   1750  45a1				   .L0157fori
   1751  45a1				   .L0158		;;  plotsprite zonebg80x16_8 7 x y 0
   1752  45a1
   1753  45a1		       a9 08		      lda	#<zonebg80x16_8
   1754  45a3		       85 42		      sta	temp1
   1755  45a5
   1756  45a5		       a9 e0		      lda	#>zonebg80x16_8
   1757  45a7		       85 43		      sta	temp2
   1758  45a9
   1759  45a9		       a9 ec		      lda	#(224|zonebg80x16_8_width_twoscompliment)
   1760  45ab		       85 44		      sta	temp3
   1761  45ad
   1762  45ad		       a5 fd		      lda	x
   1763  45af		       85 45		      sta	temp4
   1764  45b1
   1765  45b1		       a5 fe		      lda	y
   1766  45b3		       85 46		      sta	temp5
   1767  45b5
   1768  45b5		       a9 40		      lda	#(zonebg80x16_8_mode|%01000000)
   1769  45b7		       85 47		      sta	temp6
   1770  45b9
   1771  45b9		       20 8b f2 	      jsr	plotsprite
   1772  45bc							; +tall sprite replot
   1773  45bc		       18		      clc
   1774  45bd		       a5 42		      lda	temp1
   1775  45bf		       69 14		      adc	#zonebg80x16_8_width
   1776  45c1		       85 42		      sta	temp1
   1777  45c3		       a5 46		      lda	temp5
   1778  45c5		       69 08		      adc	#WZONEHEIGHT
   1779  45c7		       85 46		      sta	temp5
   1780  45c9		       20 8b f2 	      jsr	plotsprite
   1781  45cc				   .L0159		;;  x	=  x  +  80
   1782  45cc
   1783  45cc		       a5 fd		      LDA	x
   1784  45ce		       18		      CLC
   1785  45cf		       69 50		      ADC	#80
   1786  45d1		       85 fd		      STA	x
   1787  45d3				   .L0160		;;  next
   1788  45d3
   1789  45d3		       a5 ee		      LDA	i
   1790  45d5		       c9 01		      CMP	#1
   1791  45d7		       e6 ee		      INC	i
   1792  45d9					      if	((* - .L0157fori) < 127) && ((* - .L0157fori) > -128)
   1793  45d9		       90 c6		      bcc	.L0157fori
   1794  45db				  -	      else
   1795  45db				  -	      bcs	.6skipL0157fori
   1796  45db				  -	      jmp	.L0157fori
   1797  45db				  -.6skipL0157fori
   1798  45db					      endif
   1799  45db				   .L0161		;;  x	=  0
   1800  45db
   1801  45db		       a9 00		      LDA	#0
   1802  45dd		       85 fd		      STA	x
   1803  45df				   .L0162		;;  y	=  y  +  16
   1804  45df
   1805  45df		       a5 fe		      LDA	y
   1806  45e1		       18		      CLC
   1807  45e2		       69 10		      ADC	#16
   1808  45e4		       85 fe		      STA	y
   1809  45e6				   .L0163		;;  next
   1810  45e6
   1811  45e6		       a5 ef		      LDA	j
   1812  45e8		       c9 0c		      CMP	#12
   1813  45ea		       e6 ef		      INC	j
   1814  45ec					      if	((* - .L0156forj) < 127) && ((* - .L0156forj) > -128)
   1815  45ec		       90 af		      bcc	.L0156forj
   1816  45ee				  -	      else
   1817  45ee				  -	      bcs	.7skipL0156forj
   1818  45ee				  -	      jmp	.L0156forj
   1819  45ee				  -.7skipL0156forj
   1820  45ee					      endif
   1821  45ee				   .L0164		;;  savescreen
   1822  45ee
   1823  45ee		       20 9b f0 	      jsr	savescreen
   1824  45f1				   .L0165		;;  return
   1825  45f1
   1826  45f1		       60		      RTS
   1827  45f2				   .
   1828  45f2							;; 
   1829  45f2
   1830  45f2				   .topscreenroutine
   1831  45f2							;; topscreenroutine
   1832  45f2
   1833  45f2				   .L0166		;;  z	=  z  +  1
   1834  45f2
   1835  45f2		       a5 ff		      LDA	z
   1836  45f4		       18		      CLC
   1837  45f5		       69 01		      ADC	#1
   1838  45f7		       85 ff		      STA	z
   1839  45f9				   .L0167		;;  return
   1840  45f9		       60		      RTS
   1841  45f9				   DMAHOLEEND0 SET	.
   1842  45fa				   gameend
   1843  45fa				   DMAHOLEEND0 SET	.
   39430 bytes of ROM space left in the main area.
   1844  45fa					      echo	" ",[($E000 - gameend)]d , "bytes of ROM space left in the main area."
   1845  45fa
   1846  e000					      ORG	$E000,0	; *************
   1847  e000
   1848  e000				   g8x8_4color
   1849  e000		       aa aa		      HEX	aaaa
   1850  e002				   g8x8_4color2
   1851  e002		       00 00		      HEX	0000
   1852  e004				   g8x8_4color3
   1853  e004		       00 00		      HEX	0000
   1854  e006				   g8x8_4color4
   1855  e006		       00 00		      HEX	0000
   1856  e008				   zonebg80x16_8
   1857  e008		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000
   1858  e01c				   zonebg80x16_8_tallsprite_00
   1859  e01c		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000
   1860  e030				   font
   1861  e030		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000000000000000000000000000
   1862  e050		       00 00 00 00*	      HEX	000000000000000000004000540000000000000000
   1863  e065
   1864  e100					      ORG	$E100,0	; *************
   1865  e100
   1866  e100							;g8x8_4color
   1867  e100		       95 56		      HEX	9556
   1868  e102							;g8x8_4color2
   1869  e102		       15 54		      HEX	1554
   1870  e104							;g8x8_4color3
   1871  e104		       00 00		      HEX	0000
   1872  e106							;g8x8_4color4
   1873  e106		       00 00		      HEX	0000
   1874  e108							;zonebg80x16_8
   1875  e108		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000
   1876  e11c							;zonebg80x16_8_tallsprite_00
   1877  e11c		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000
   1878  e130							;font
   1879  e130		       54 54 54 54*	      HEX	5454545404545410545444505450544054445454445444445440044454105410
   1880  e150		       44 44 10 54*	      HEX	444410544000101040101000000440545414154000
   1881  e165
   1882  e200					      ORG	$E200,0	; *************
   1883  e200
   1884  e200							;g8x8_4color
   1885  e200		       95 56		      HEX	9556
   1886  e202							;g8x8_4color2
   1887  e202		       15 54		      HEX	1554
   1888  e204							;g8x8_4color3
   1889  e204		       05 50		      HEX	0550
   1890  e206							;g8x8_4color4
   1891  e206		       00 00		      HEX	0000
   1892  e208							;zonebg80x16_8
   1893  e208		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000
   1894  e21c							;zonebg80x16_8_tallsprite_00
   1895  e21c		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000
   1896  e230							;font
   1897  e230		       44 10 40 04*	      HEX	4410400404444410440444444044404044441044444044444440504404104454
   1898  e250		       54 44 10 40*	      HEX	544410405000000040000000001010400441401000
   1899  e265
   1900  e300					      ORG	$E300,0	; *************
   1901  e300
   1902  e300							;g8x8_4color
   1903  e300		       97 d6		      HEX	97d6
   1904  e302							;g8x8_4color2
   1905  e302		       16 94		      HEX	1694
   1906  e304							;g8x8_4color3
   1907  e304		       05 50		      HEX	0550
   1908  e306							;g8x8_4color4
   1909  e306		       00 00		      HEX	0000
   1910  e308							;zonebg80x16_8
   1911  e308		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000
   1912  e31c							;zonebg80x16_8_tallsprite_00
   1913  e31c		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000
   1914  e330							;font
   1915  e330		       44 10 40 04*	      HEX	4410400404044410440454444044404044441004504044444454445004104444
   1916  e350		       54 54 10 40*	      HEX	545410405400101010000000004004400441451000
   1917  e365
   1918  e400					      ORG	$E400,0	; *************
   1919  e400
   1920  e400							;g8x8_4color
   1921  e400		       97 d6		      HEX	97d6
   1922  e402							;g8x8_4color2
   1923  e402		       16 94		      HEX	1694
   1924  e404							;g8x8_4color3
   1925  e404		       05 50		      HEX	0550
   1926  e406							;g8x8_4color4
   1927  e406		       00 00		      HEX	0000
   1928  e408							;zonebg80x16_8
   1929  e408		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000
   1930  e41c							;zonebg80x16_8_tallsprite_00
   1931  e41c		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000
   1932  e430							;font
   1933  e430		       44 10 54 14*	      HEX	4410541454045410545444504044505044541004504054444444444454104444
   1934  e450		       44 10 10 50*	      HEX	441010505500101010000054004004400414441000
   1935  e465
   1936  e500					      ORG	$E500,0	; *************
   1937  e500
   1938  e500							;g8x8_4color
   1939  e500		       95 56		      HEX	9556
   1940  e502							;g8x8_4color2
   1941  e502		       15 54		      HEX	1554
   1942  e504							;g8x8_4color3
   1943  e504		       05 50		      HEX	0550
   1944  e506							;g8x8_4color4
   1945  e506		       00 00		      HEX	0000
   1946  e508							;zonebg80x16_8
   1947  e508		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000
   1948  e51c							;zonebg80x16_8_tallsprite_00
   1949  e51c		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000
   1950  e530							;font
   1951  e530		       44 10 04 04*	      HEX	4410040444544004444444444044404040441004444054444444444440104444
   1952  e550		       44 54 44 14*	      HEX	445444145400041010000000004004400444451000
   1953  e565
   1954  e600					      ORG	$E600,0	; *************
   1955  e600
   1956  e600							;g8x8_4color
   1957  e600		       95 56		      HEX	9556
   1958  e602							;g8x8_4color2
   1959  e602		       15 54		      HEX	1554
   1960  e604							;g8x8_4color3
   1961  e604		       00 00		      HEX	0000
   1962  e606							;g8x8_4color4
   1963  e606		       00 00		      HEX	0000
   1964  e608							;zonebg80x16_8
   1965  e608		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000
   1966  e61c							;zonebg80x16_8_tallsprite_00
   1967  e61c		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000
   1968  e630							;font
   1969  e630		       44 50 04 04*	      HEX	4450040444404044444444444044404040441004444054444444444440104444
   1970  e650		       44 44 44 04*	      HEX	444444045044441004000000001010400444401000
   1971  e665
   1972  e700					      ORG	$E700,0	; *************
   1973  e700
   1974  e700							;g8x8_4color
   1975  e700		       aa aa		      HEX	aaaa
   1976  e702							;g8x8_4color2
   1977  e702		       00 00		      HEX	0000
   1978  e704							;g8x8_4color3
   1979  e704		       00 00		      HEX	0000
   1980  e706							;g8x8_4color4
   1981  e706		       00 00		      HEX	0000
   1982  e708							;zonebg80x16_8
   1983  e708		       55 55 55 55*	      HEX	5555555555555555555555555555555555555555
   1984  e71c							;zonebg80x16_8_tallsprite_00
   1985  e71c		       55 55 55 55*	      HEX	5555555555555555555555555555555555555555
   1986  e730							;font
   1987  e730		       54 10 54 54*	      HEX	5410545444545454545454505450545454445404444044545454545454544444
   1988  e750		       44 44 44 54*	      HEX	444444544044541004000000000440545410154000
   1989  e765
   1990  e765
   1991  e765							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1992  e765
   1993  e765					      ifnconst	bankswitchmode
   1994  e765					      if	( * < $f000 )
   1995  f000					      ORG	$F000
   1996  f000					      endif
   1997  f000				  -	      else
   1998  f000				  -	      ifconst	ROM128K
   1999  f000				  -	      if	( * < $f000 )
   2000  f000				  -	      ORG	$27000
   2001  f000				  -	      RORG	$F000
   2002  f000				  -	      endif
   2003  f000				  -	      endif
   2004  f000				  -	      ifconst	ROM144K
   2005  f000				  -	      if	( * < $f000 )
   2006  f000				  -	      ORG	$27000
   2007  f000				  -	      RORG	$F000
   2008  f000				  -	      endif
   2009  f000				  -	      endif
   2010  f000				  -	      ifconst	ROM256K
   2011  f000				  -	      if	( * < $f000 )
   2012  f000				  -	      ORG	$47000
   2013  f000				  -	      RORG	$F000
   2014  f000				  -	      endif
   2015  f000				  -	      endif
   2016  f000				  -	      ifconst	ROM272K
   2017  f000				  -	      if	( * < $f000 )
   2018  f000				  -	      ORG	$47000
   2019  f000				  -	      RORG	$F000
   2020  f000				  -	      endif
   2021  f000				  -	      endif
   2022  f000				  -	      ifconst	ROM512K
   2023  f000				  -	      if	( * < $f000 )
   2024  f000				  -	      ORG	$87000
   2025  f000				  -	      RORG	$F000
   2026  f000				  -	      endif
   2027  f000				  -	      endif
   2028  f000				  -	      ifconst	ROM528K
   2029  f000				  -	      if	( * < $f000 )
   2030  f000				  -	      ORG	$87000
   2031  f000				  -	      RORG	$F000
   2032  f000				  -	      endif
   2033  f000				  -	      endif
   2034  f000					      endif
   2035  f000
   2036  f000							; all of these "modules" have conditional clauses in them, so even though
   2037  f000							; they're always included here, they don't take up rom unless the user
   2038  f000							; explicitly enables support for the feature.
   2039  f000
   2040  f000					      ifnconst	included.7800vox.asm
------- FILE 7800vox.asm LEVEL 2 PASS 3
      0  f000					      include	7800vox.asm
      1  f000							; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  f000
      3  f000							; AtariVox 7800basic wrapper
      4  f000
      5  f000							; to be called with
      6  f000							; A=# of bytes
      7  f000							;
      8  f000
      9  f000				  -	      ifconst	HSSUPPORT
     10  f000				  -
     11  f000				  -AVoxReadBytes
     12  f000				  -	      sta	temp8
     13  f000				  -	      jsr	i2c_startwrite
     14  f000				  -	      bcs	eeprom_error
     15  f000				  -
     16  f000				  -	      lda	HSVoxHi
     17  f000				  -	      jsr	i2c_txbyte
     18  f000				  -	      lda	HSVoxLo
     19  f000				  -	      jsr	i2c_txbyte
     20  f000				  -	      jsr	i2c_stopwrite
     21  f000				  -
     22  f000				  -	      jsr	i2c_startread
     23  f000				  -
     24  f000				  -	      ldx	#0
     25  f000				  -AVoxReadBytesLoop
     26  f000				  -	      jsr	i2c_rxbyte
     27  f000				  -	      sta	eeprombuffer,x
     28  f000				  -	      inx
     29  f000				  -	      cpx	temp8
     30  f000				  -	      bne	AVoxReadBytesLoop
     31  f000				  -	      jsr	i2c_stopread
     32  f000				  -	      lda	#0
     33  f000				  -	      rts
     34  f000				  -
     35  f000				  -			; to be called with
     36  f000				  -			; A=# of bytes
     37  f000				  -			;
     38  f000				  -
     39  f000				  -AVoxWriteBytes
     40  f000				  -	      sta	temp8
     41  f000				  -	      jsr	i2c_startwrite
     42  f000				  -	      bcs	eeprom_error
     43  f000				  -
     44  f000				  -	      lda	HSVoxHi
     45  f000				  -	      jsr	i2c_txbyte
     46  f000				  -	      lda	HSVoxLo
     47  f000				  -	      jsr	i2c_txbyte
     48  f000				  -
     49  f000				  -	      ldx	#$00
     50  f000				  -AVoxWriteBytesLoop
     51  f000				  -	      lda	eeprombuffer,x
     52  f000				  -	      jsr	i2c_txbyte
     53  f000				  -	      inx
     54  f000				  -	      cpx	temp8
     55  f000				  -	      bne	AVoxWriteBytesLoop
     56  f000				  -	      jsr	i2c_stopwrite
     57  f000				  -
     58  f000				  -	      lda	#0
     59  f000				  -	      rts
     60  f000				  -
     61  f000				  -eeprom_error
     62  f000				  -	      lda	#$ff
     63  f000				  -	      rts
     64  f000				  -
     65  f000				  -AVoxDetect
     66  f000				  -
     67  f000				  -	      jsr	i2c_startwrite
     68  f000				  -	      bcs	eeprom_error
     69  f000				  -	      lda	#$30
     70  f000				  -	      jsr	i2c_txbyte
     71  f000				  -	      lda	#$00
     72  f000				  -	      jsr	i2c_txbyte
     73  f000				  -	      jsr	i2c_stopwrite
     74  f000				  -	      rts
     75  f000				  -
     76  f000				  -	      include	"i2c7800.inc"
     77  f000				  -	      I2C_SUBS	temp9
     78  f000				  -
     79  f000					      endif
     80  f000
------- FILE c:\Users\Steve\Desktop\2018dev\7800\7800basic\projects\lessons\lesson1_gfx_modes\lesson1_1.bas.asm
   2042  f000					      endif
   2043  f000					      ifnconst	included.pokeysound.asm
------- FILE pokeysound.asm LEVEL 2 PASS 3
      0  f000					      include	pokeysound.asm
      1  f000							; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  f000
      3  f000
      4  f000				  -	      ifconst	pokeysupport
      5  f000				  -
      6  f000				  -pokeysoundmodulestart
      7  f000				  -
      8  f000				  -mutepokey
      9  f000				  -	      lda	#0
     10  f000				  -	      ldy	#7
     11  f000				  -mutepokeyloop
     12  f000				  -	      sta	pokey1pointlo,y
     13  f000				  -	      sta	(pokeybaselo),y
     14  f000				  -	      dey
     15  f000				  -	      bpl	mutepokeyloop
     16  f000				  -	      rts
     17  f000				  -
     18  f000				  -checkpokeyplaying
     19  f000				  -	      ldx	#6
     20  f000				  -checkpokeyplayingloop
     21  f000				  -	      lda	pokey1pointlo,x
     22  f000				  -	      ora	pokey1pointhi,x
     23  f000				  -	      beq	pokeychannelinactive
     24  f000				  -	      jsr	playpokeysfxA	; x=channel*2
     25  f000				  -pokeychannelinactive
     26  f000				  -	      dex
     27  f000				  -	      dex
     28  f000				  -	      bpl	checkpokeyplayingloop
     29  f000				  -	      rts
     30  f000				  -
     31  f000				  -playpokeysfxA
     32  f000				  -	      txa
     33  f000				  -	      tay
     34  f000				  -	      lda	pokey1tick,x
     35  f000				  -	      beq	playpokeysfxAcont
     36  f000				  -	      sec
     37  f000				  -	      sbc	#1
     38  f000				  -	      sta	pokey1tick,x	; sound resolution is >1 frame, and we're mid-tock...
     39  f000				  -	      rts
     40  f000				  -
     41  f000				  -playpokeysfxAcont
     42  f000				  -	      lda	pokey1frames,x	; set the frame countdown for this sound chunk
     43  f000				  -	      sta	pokey1tick,x
     44  f000				  -
     45  f000				  -	      lda	pokey1priority,x	; decrease the sound's priority if its non-zero
     46  f000				  -	      beq	playpokeysfxAcont2
     47  f000				  -	      sec
     48  f000				  -	      sbc	#1
     49  f000				  -	      sta	pokey1priority,x
     50  f000				  -playpokeysfxAcont2
     51  f000				  -
     52  f000				  -			; *** FREQUENCY
     53  f000				  -	      lda	(pokey1pointlo,x)
     54  f000				  -	      sta	temp1
     55  f000				  -	      clc
     56  f000				  -	      adc	pokey1offset,x	; take into account any pitch modification
     57  f000				  -	      sta	(pokeybaselo),y	; PAUDF0,0
     58  f000				  -
     59  f000				  -			;advance the data pointer +1
     60  f000				  -	      inc	pokey1pointlo,x
     61  f000				  -	      bne	skippokeyhiinc1
     62  f000				  -	      inc	pokey1pointhi,x
     63  f000				  -skippokeyhiinc1
     64  f000				  -
     65  f000				  -			; *** WAVE
     66  f000				  -	      lda	(pokey1pointlo,x)
     67  f000				  -	      asl
     68  f000				  -	      asl
     69  f000				  -	      asl
     70  f000				  -	      asl		; x16
     71  f000				  -
     72  f000				  -			;advance the data pointer +1
     73  f000				  -	      inc	pokey1pointlo,x
     74  f000				  -	      bne	skippokeyhiinc2
     75  f000				  -	      inc	pokey1pointhi,x
     76  f000				  -skippokeyhiinc2
     77  f000				  -
     78  f000				  -	      ora	(pokey1pointlo,x)
     79  f000				  -	      iny
     80  f000				  -	      sta	(pokeybaselo),y
     81  f000				  -
     82  f000				  -	      ora	temp1	; check if F|C|V=0
     83  f000				  -	      beq	zeropokeypoint	; if so, we're at the end of the sound.
     84  f000				  -
     85  f000				  -			; advance the pointer +1, on to the next sound chunk
     86  f000				  -	      inc	pokey1pointlo,x
     87  f000				  -	      bne	skippokeyhiinc3
     88  f000				  -	      inc	pokey1pointhi,x
     89  f000				  -skippokeyhiinc3
     90  f000				  -	      rts
     91  f000				  -
     92  f000				  -zeropokeypoint
     93  f000				  -	      sta	pokey1pointlo,x
     94  f000				  -	      sta	pokey1pointhi,x
     95  f000				  -	      sta	pokey1priority,x
     96  f000				  -	      rts
     97  f000				  -
     98  f000				  -schedulepokeysfx
     99  f000				  -	      ldx	#6
    100  f000				  -schedulepokeysfxloop
    101  f000				  -	      lda	pokey1pointlo,x
    102  f000				  -	      ora	pokey1pointhi,x
    103  f000				  -	      bne	schedulespokeysearch
    104  f000				  -	      jmp	schedulepokeyX	; we found an unused channel, so use it...
    105  f000				  -schedulespokeysearch
    106  f000				  -	      dex
    107  f000				  -	      dex
    108  f000				  -	      bpl	schedulepokeysfxloop
    109  f000				  -
    110  f000				  -			; if we're here, all 4 channels are presently playing a sound...
    111  f000				  -	      ldy	#1
    112  f000				  -	      lda	(temp1),y	; peek at the priority of this sfx...
    113  f000				  -	      bne	schedulepokeysfxcont1
    114  f000				  -	      rts		; ...and skip it if it's 0 priority
    115  f000				  -schedulepokeysfxcont1
    116  f000				  -
    117  f000				  -			; figure out which current sound has the lowest priority...
    118  f000				  -	      lda	#0
    119  f000				  -	      sta	temp8
    120  f000				  -	      lda	pokey1priority
    121  f000				  -	      sta	temp9
    122  f000				  -	      ldx	#6
    123  f000				  -findlowprioritypokeyloop
    124  f000				  -	      lda	pokey1priority,x
    125  f000				  -	      cmp	temp9
    126  f000				  -	      bcs	findlowprioritypokeyloopcontinue
    127  f000				  -	      sta	temp9
    128  f000				  -	      stx	temp8
    129  f000				  -findlowprioritypokeyloopcontinue
    130  f000				  -	      dex
    131  f000				  -	      dex
    132  f000				  -	      bne	findlowprioritypokeyloop
    133  f000				  -	      ldx	temp8	; the low priority channel we'll interrupt
    134  f000				  -
    135  f000				  -schedulepokeyX
    136  f000				  -			;called with X=2*pokey channel to play on...
    137  f000				  -	      ldy	#1	; get priority and sound-resolution (in frames)
    138  f000				  -	      lda	(temp1),y
    139  f000				  -	      sta	pokey1priority,x
    140  f000				  -	      iny
    141  f000				  -	      lda	(temp1),y
    142  f000				  -	      sta	pokey1frames,x
    143  f000				  -
    144  f000				  -	      lda	temp1
    145  f000				  -	      clc
    146  f000				  -	      adc	#3
    147  f000				  -	      sta	pokey1pointlo,x
    148  f000				  -	      lda	temp2
    149  f000				  -	      adc	#0
    150  f000				  -	      sta	pokey1pointhi,x
    151  f000				  -	      lda	temp3
    152  f000				  -	      sta	pokey1offset,x
    153  f000				  -	      lda	#0
    154  f000				  -	      sta	pokey1tick,x
    155  f000				  -	      rts
    156  f000				  -
    157  f000				  -			; pokey detection routine. we check for pokey in the XBOARD/XM location,
    158  f000				  -			; and the standard $4000 location.
    159  f000				  -			; if pokey the pokey is present, this routine will reset it.
    160  f000				  -
    161  f000				  -detectpokeylocation
    162  f000				  -			;XBoard/XM...
    163  f000				  -	      ldx	#2
    164  f000				  -detectpokeyloop
    165  f000				  -	      lda	XCTRL1s
    166  f000				  -	      ora	#%00010100
    167  f000				  -	      and	POKEYXMMASK,x
    168  f000				  -	      sta	XCTRL1s
    169  f000				  -	      sta	XCTRL1
    170  f000				  -
    171  f000				  -	      lda	POKEYCHECKLO,x
    172  f000				  -	      sta	pokeybaselo
    173  f000				  -	      lda	POKEYCHECKHI,x
    174  f000				  -	      sta	pokeybasehi
    175  f000				  -	      jsr	checkforpokey
    176  f000				  -	      lda	pokeydetected
    177  f000				  -	      beq	foundpokeychip
    178  f000				  -	      dex
    179  f000				  -	      bpl	detectpokeyloop
    180  f000				  -foundpokeychip
    181  f000				  -	      eor	#$ff	; invert state for 7800basic if...then test
    182  f000				  -	      sta	pokeydetected
    183  f000				  -	      rts
    184  f000				  -
    185  f000				  -POKEYXMMASK
    186  f000				  -			;     XM POKEY on    XM POKEY off   XM POKEY off
    187  f000				  -	      .byte	%11111111, %11101111, %11101111
    188  f000				  -
    189  f000				  -POKEYCHECKLO
    190  f000				  -	      .byte	<$0450, <$0450, <$4000
    191  f000				  -POKEYCHECKHI
    192  f000				  -	      .byte	>$0450, >$0450, >$4000
    193  f000				  -
    194  f000				  -checkforpokey
    195  f000				  -	      ldy	#$0f
    196  f000				  -	      lda	#$00
    197  f000				  -	      sta	pokeydetected	; start off by assuming pokey will be detected
    198  f000				  -resetpokeyregistersloop
    199  f000				  -	      sta	(pokeybase),y
    200  f000				  -	      dey
    201  f000				  -	      bpl	resetpokeyregistersloop
    202  f000				  -
    203  f000				  -	      ldy	#PAUDCTL
    204  f000				  -	      sta	(pokeybase),y
    205  f000				  -	      ldy	#PSKCTL
    206  f000				  -	      sta	(pokeybase),y
    207  f000				  -
    208  f000				  -			; let the dust settle...
    209  f000				  -	      nop
    210  f000				  -	      nop
    211  f000				  -	      nop
    212  f000				  -
    213  f000				  -	      lda	#4
    214  f000				  -	      sta	temp9
    215  f000				  -pokeycheckloop1
    216  f000				  -			; we're in reset, so the RANDOM register should read $ff...
    217  f000				  -	      ldy	#PRANDOM
    218  f000				  -	      lda	(pokeybase),y
    219  f000				  -	      cmp	#$ff
    220  f000				  -	      bne	nopokeydetected
    221  f000				  -	      dec	temp9
    222  f000				  -	      bne	pokeycheckloop1
    223  f000				  -
    224  f000				  -			; take pokey out of reset...
    225  f000				  -	      ldy	#PSKCTL
    226  f000				  -	      lda	#3
    227  f000				  -	      sta	(pokeybase),y
    228  f000				  -	      ldy	#PAUDCTL
    229  f000				  -	      lda	#0
    230  f000				  -	      sta	(pokeybase),y
    231  f000				  -
    232  f000				  -			; let the dust settle again...
    233  f000				  -	      nop
    234  f000				  -	      nop
    235  f000				  -	      nop
    236  f000				  -
    237  f000				  -	      lda	#4
    238  f000				  -	      sta	temp9
    239  f000				  -pokeycheckloop2
    240  f000				  -			; we're out of reset, so RANDOM should read non-$ff...
    241  f000				  -	      ldy	#PRANDOM
    242  f000				  -	      lda	(pokeybase),y
    243  f000				  -	      cmp	#$ff
    244  f000				  -	      beq	skippokeycheckreturn
    245  f000				  -	      rts
    246  f000				  -skippokeycheckreturn
    247  f000				  -	      dec	temp9
    248  f000				  -	      bne	pokeycheckloop2
    249  f000				  -nopokeydetected
    250  f000				  -	      dec	pokeydetected	; pokeydetected=#$ff
    251  f000				  -	      rts
    252  f000				  -
    253  f000				  -pokeysoundmoduleend
    254  f000				  -
    255  f000				  -	      echo	"  pokeysound assembly: ",[(pokeysoundmoduleend-pokeysoundmodulestart)]d," bytes"
    256  f000				  -
    257  f000					      endif
------- FILE c:\Users\Steve\Desktop\2018dev\7800\7800basic\projects\lessons\lesson1_gfx_modes\lesson1_1.bas.asm
   2045  f000					      endif
   2046  f000					      ifnconst	included.tracker.asm
------- FILE tracker.asm LEVEL 2 PASS 3
      0  f000					      include	tracker.asm
      1  f000							; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  f000
      3  f000
      4  f000				  -	      ifconst	MUSICTRACKER
      5  f000				  -			; ** songtempo lists how many 256ths of a frame a 16th note lasts
      6  f000				  -			; ** the player operates on a 16th note grid.
      7  f000				  -
      8  f000				  -servicesongover
      9  f000				  -	      rts
     10  f000				  -servicesong
     11  f000				  -	      lda	songtempo
     12  f000				  -	      beq	servicesongover	; ** if song is off/paused then return
     13  f000				  -servicesongcontinue
     14  f000				  -	      lda	sfxschedulelock
     15  f000				  -	      sta	sfxschedulemissed
     16  f000				  -	      bne	servicesongover
     17  f000				  -	      lda	songtempo
     18  f000				  -	      clc
     19  f000				  -	      adc	songtick	; add songtempo to songtick until it rolls over
     20  f000				  -	      sta	songtick	; this is how we break away from 50/60Hz timing.
     21  f000				  -	      bcc	servicesongover
     22  f000				  -			; ** if we're here a new 16th note has passed
     23  f000				  -			; ** check if a new note is due on any of the 4 channels
     24  f000				  -servicesongredo
     25  f000				  -	      ldx	#3
     26  f000				  -checkchannelloop
     27  f000				  -	      dec	songchannel1busywait,x
     28  f000				  -	      bpl	carryoncheckingchannel
     29  f000				  -	      txa
     30  f000				  -	      pha		; save X for the loop
     31  f000				  -	      jsr	processsongdata
     32  f000				  -	      pla		; restore X for the loop
     33  f000				  -	      tax
     34  f000				  -carryoncheckingchannel
     35  f000				  -	      dex
     36  f000				  -	      bpl	checkchannelloop
     37  f000				  -	      lda	inactivechannelcount
     38  f000				  -	      cmp	#15
     39  f000				  -	      bne	skipstopsong
     40  f000				  -	      lda	songloops
     41  f000				  -	      bne	doasongloop
     42  f000				  -			;lda #0
     43  f000				  -	      sta	songtempo	; all channels are done. stop the song
     44  f000				  -	      rts
     45  f000				  -doasongloop
     46  f000				  -	      bmi	skipsongloopadjust
     47  f000				  -	      dec	songloops
     48  f000				  -skipsongloopadjust
     49  f000				  -	      jsr	setsongchannels
     50  f000				  -	      jmp	servicesongredo
     51  f000				  -skipstopsong
     52  f000				  -	      rts
     53  f000				  -
     54  f000				  -processsongdata
     55  f000				  -			; channel needs processing
     56  f000				  -			; X=channel #
     57  f000				  -
     58  f000				  -	      txa
     59  f000				  -	      clc
     60  f000				  -	      adc	songchannel1stackdepth,x	; stack depth value will be 0, 4, or 8
     61  f000				  -	      tay
     62  f000				  -
     63  f000				  -
     64  f000				  -			; ** indirect x is cumbersome with mult-byte commands.
     65  f000				  -			; ** setup a pointer to the song data for indirect y addressing.
     66  f000				  -	      lda	songchannel1layer1lo,y
     67  f000				  -	      sta	songdatalo
     68  f000				  -	      lda	songchannel1layer1hi,y
     69  f000				  -	      sta	songdatahi
     70  f000				  -	      ora	songdatalo
     71  f000				  -	      bne	channelhasdata
     72  f000				  -			;channel data is pointing at $0000
     73  f000				  -	      lda	#$7F
     74  f000				  -	      sta	songchannel1busywait,x	; skip a bunch of notes
     75  f000				  -setchannelcountbits
     76  f000				  -	      lda	channel2bits,x
     77  f000				  -	      ora	inactivechannelcount
     78  f000				  -	      sta	inactivechannelcount
     79  f000				  -	      rts
     80  f000				  -channelhasdata
     81  f000				  -
     82  f000				  -	      sty	songstackindex
     83  f000				  -	      ldy	#0
     84  f000				  -	      lda	(songdatalo),y	; ** load in the next byte of song data, so we can decode it
     85  f000				  -	      cmp	#$ff
     86  f000				  -	      bne	carryoncheckingdatatype	; ** $ff=pattern end marker
     87  f000				  -	      jmp	handlechannelEOD
     88  f000				  -
     89  f000				  -carryoncheckingdatatype
     90  f000				  -	      and	#$F0
     91  f000				  -	      cmp	#$C0
     92  f000				  -	      beq	handlechannelrest	; 0000XXXX=rest
     93  f000				  -	      cmp	#$F0
     94  f000				  -	      beq	handlemultibytecommand
     95  f000				  -	      cmp	#$D0
     96  f000				  -	      beq	handlesemiup
     97  f000				  -	      cmp	#$E0
     98  f000				  -	      beq	handlesemidown
     99  f000				  -handlenotedata
    100  f000				  -			; ** TODO: note playing is a terrible choice for fall-through
    101  f000				  -
    102  f000				  -			; ** its simple note data, prepare arguments for schedulesfx
    103  f000				  -
    104  f000				  -			; ** set the note length
    105  f000				  -	      lda	(songdatalo),y
    106  f000				  -	      and	#$0F
    107  f000				  -	      sta	songchannel1busywait,x
    108  f000				  -
    109  f000				  -			; ** load the instrument
    110  f000				  -	      lda	songchannel1instrumentlo,x
    111  f000				  -	      sta	sfxinstrumentlo
    112  f000				  -	      lda	songchannel1instrumenthi,x
    113  f000				  -	      sta	sfxinstrumenthi
    114  f000				  -
    115  f000				  -			; ** get the note, and transpose
    116  f000				  -	      lda	(songdatalo),y
    117  f000				  -	      lsr
    118  f000				  -	      lsr
    119  f000				  -	      lsr
    120  f000				  -	      lsr
    121  f000				  -	      clc
    122  f000				  -	      adc	songchannel1transpose,x	; ** add it to the transpose index
    123  f000				  -			; ** its up the respective SFX scheduler to handle and save the note data
    124  f000				  -	      sta	sfxnoteindex
    125  f000				  -
    126  f000				  -	      lda	#0
    127  f000				  -	      sta	sfxpitchoffset
    128  f000				  -
    129  f000				  -	      jsr	schedulesfx
    130  f000				  -
    131  f000				  -	      jmp	advancethesongpointer1byte	; advance to the next data byte and exit
    132  f000				  -
    133  f000				  -handlechannelrest
    134  f000				  -			; ** set the note length
    135  f000				  -	      lda	(songdatalo),y
    136  f000				  -	      and	#$0F
    137  f000				  -	      sta	songchannel1busywait,x
    138  f000				  -	      jmp	advancethesongpointer1byte	; advance to the next data byte and exit
    139  f000				  -
    140  f000				  -handlesemiup
    141  f000				  -	      lda	(songdatalo),y	; ** reload the song data, so we can get at the lower nibble
    142  f000				  -	      and	#$0f	; ** since we need to mask the nibble of the subtracted value,
    143  f000				  -	      clc
    144  f000				  -handlesemidownentry
    145  f000				  -	      adc	songchannel1transpose,x	; ** add it to the transpose index
    146  f000				  -	      sta	songchannel1transpose,x
    147  f000				  -	      jsr	advancethesongpointer1byte
    148  f000				  -	      jmp	processsongdata	; semi doesn't have note length, so process the next data byte...
    149  f000				  -
    150  f000				  -handlesemidown
    151  f000				  -	      lda	(songdatalo),y	; ** reload the song data, so we can get at the lower nibble
    152  f000				  -	      and	#$0f	; ** since we need to mask the nibble of the subtracted value,
    153  f000				  -	      eor	#$ff	; ** its easier if we negate it, and then add it instead.
    154  f000				  -	      sec
    155  f000				  -	      jmp	handlesemidownentry
    156  f000				  -
    157  f000				  -handlemultibytecommand
    158  f000				  -	      lda	(songdatalo),y	; ** reload the song data, so we can get at the lower nibble
    159  f000				  -	      and	#$0f	; ** since we need to mask the nibble of the subtracted value,
    160  f000				  -	      cmp	#$08	; ** load new instrument?
    161  f000				  -	      bne	nothandleinstrumentchange
    162  f000				  -handleinstrumentchange
    163  f000				  -	      iny
    164  f000				  -	      lda	(songdatalo),y
    165  f000				  -	      sta	songchannel1instrumentlo,x
    166  f000				  -	      iny
    167  f000				  -	      lda	(songdatalo),y
    168  f000				  -	      sta	songchannel1instrumenthi,x
    169  f000				  -	      lda	#3
    170  f000				  -	      jsr	advancethesongpointerNbytes	; advance 3 bytes
    171  f000				  -	      jmp	processsongdata
    172  f000				  -
    173  f000				  -nothandleinstrumentchange
    174  f000				  -	      cmp	#$09	; ** absolute tempo change?
    175  f000				  -	      bne	nothandletempochange
    176  f000				  -	      lda	#0
    177  f000				  -	      sta	songtempo
    178  f000				  -handlerelativetempochange
    179  f000				  -	      iny
    180  f000				  -	      lda	(songdatalo),y
    181  f000				  -	      clc
    182  f000				  -	      adc	songtempo
    183  f000				  -	      sta	songtempo
    184  f000				  -	      lda	#2
    185  f000				  -	      jsr	advancethesongpointerNbytes	; advance 2 bytes
    186  f000				  -	      jmp	processsongdata
    187  f000				  -
    188  f000				  -nothandletempochange
    189  f000				  -	      cmp	#$0A	; ** relative tempo change?:
    190  f000				  -	      beq	handlerelativetempochange
    191  f000				  -	      cmp	#$0B	; ** octave/semi change?
    192  f000				  -	      beq	handleoctavesemichange
    193  f000				  -handlepatterndata
    194  f000				  -			; ** if we're here its a pattern/loop "subroutine"
    195  f000				  -			; ** move the channel's "stack" pointer and populate the new stack level
    196  f000				  -
    197  f000				  -	      lda	#4
    198  f000				  -	      clc
    199  f000				  -	      adc	songchannel1stackdepth,x
    200  f000				  -	      sta	songchannel1stackdepth,x	; stack depth value will be 0, 4, or 8
    201  f000				  -
    202  f000				  -	      stx	inttemp6	; about to invalidate x. save it.
    203  f000				  -	      lda	songstackindex
    204  f000				  -	      adc	#4
    205  f000				  -	      tax
    206  f000				  -
    207  f000				  -	      lda	(songdatalo),y
    208  f000				  -	      and	#$7
    209  f000				  -	      sta	songchannel1layer1loops,x
    210  f000				  -	      iny
    211  f000				  -	      lda	(songdatalo),y
    212  f000				  -	      sta	songchannel1layer1lo,x
    213  f000				  -	      iny
    214  f000				  -	      lda	(songdatalo),y
    215  f000				  -	      sta	songchannel1layer1hi,x
    216  f000				  -
    217  f000				  -	      ldx	inttemp6	; restore x with the channel #
    218  f000				  -
    219  f000				  -			; ** advance will operate on the old stack level, since we didn't store the updated songstackindex...
    220  f000				  -	      lda	#3
    221  f000				  -	      jsr	advancethesongpointerNbytes	; advance 3 bytes
    222  f000				  -
    223  f000				  -			; ** ...but the new stack level will be correctly picked up when we process the next byte.
    224  f000				  -	      jmp	processsongdata
    225  f000				  -
    226  f000				  -handlechannelEOD
    227  f000				  -			; ** check if there are loops remaining on the pattern
    228  f000				  -	      stx	inttemp6
    229  f000				  -	      ldx	songstackindex
    230  f000				  -	      dec	songchannel1layer1loops,x
    231  f000				  -	      bmi	handlechannelEODnoloop
    232  f000				  -			; ** loops are remaining. set the pattern pointer to the pattern start, which is contained after the EOD
    233  f000				  -	      iny
    234  f000				  -	      lda	(songdatalo),y
    235  f000				  -	      sta	songchannel1layer1lo,x
    236  f000				  -	      iny
    237  f000				  -	      lda	(songdatalo),y
    238  f000				  -	      sta	songchannel1layer1hi,x
    239  f000				  -	      ldx	inttemp6
    240  f000				  -	      jmp	processsongdata	; EOD handling doesn't have note length, so process the next data byte...
    241  f000				  -
    242  f000				  -handlechannelEODnoloop
    243  f000				  -			; this pattern/loop is done playing. "pop" the stack
    244  f000				  -	      ldx	inttemp6
    245  f000				  -	      lda	songchannel1stackdepth,x
    246  f000				  -	      beq	handlerootchannelEOD
    247  f000				  -	      sec
    248  f000				  -	      sbc	#4
    249  f000				  -	      sta	songchannel1stackdepth,x
    250  f000				  -	      jmp	processsongdata	; EOD handling doesn't have note length, so process the next data byte...
    251  f000				  -
    252  f000				  -handlerootchannelEOD
    253  f000				  -			; this channel is done. point it to $ff data so we no longer process this channel.
    254  f000				  -	      lda	#0
    255  f000				  -	      sta	songchannel1layer1lo,x
    256  f000				  -	      sta	songchannel1layer1hi,x
    257  f000				  -	      sta	songchannel1busywait,x
    258  f000				  -	      jmp	setchannelcountbits
    259  f000				  -	      rts
    260  f000				  -
    261  f000				  -nothandlepatternchange
    262  f000				  -handleoctavesemichange
    263  f000				  -	      iny
    264  f000				  -	      lda	(songdatalo),y
    265  f000				  -	      sta	songchannel1transpose,x
    266  f000				  -	      lda	#2
    267  f000				  -	      jsr	advancethesongpointerNbytes	; advance 2 bytes
    268  f000				  -	      jmp	processsongdata
    269  f000				  -
    270  f000				  -advancethesongpointer1byte
    271  f000				  -	      txa
    272  f000				  -	      ldx	songstackindex
    273  f000				  -	      inc	songchannel1layer1lo,x
    274  f000				  -	      bne	skiphiadvancethesongpointer1byte
    275  f000				  -	      inc	songchannel1layer1hi,x
    276  f000				  -skiphiadvancethesongpointer1byte
    277  f000				  -	      tax
    278  f000				  -	      rts
    279  f000				  -
    280  f000				  -advancethesongpointerNbytes
    281  f000				  -			; entered with A=# of byte to advance
    282  f000				  -	      stx	inttemp6
    283  f000				  -	      ldx	songstackindex
    284  f000				  -	      clc
    285  f000				  -	      adc	songchannel1layer1lo,x
    286  f000				  -	      sta	songchannel1layer1lo,x
    287  f000				  -	      lda	#0
    288  f000				  -	      adc	songchannel1layer1hi,x
    289  f000				  -	      sta	songchannel1layer1hi,x
    290  f000				  -	      ldx	inttemp6
    291  f000				  -	      rts
    292  f000				  -
    293  f000				  -clearsongmemory
    294  f000				  -	      lda	#0
    295  f000				  -	      ldx	#(songchannel4instrumenthi-songchannel1layer1lo)
    296  f000				  -clearsongmemoryloop1
    297  f000				  -	      sta	songchannel1layer1lo,x
    298  f000				  -	      dex
    299  f000				  -	      bpl	clearsongmemoryloop1
    300  f000				  -
    301  f000				  -	      ldx	#(songchannel4stackdepth-songchannel1layer1loops)
    302  f000				  -clearsongmemoryloop2
    303  f000				  -	      sta	songchannel1layer1loops,x
    304  f000				  -	      dex
    305  f000				  -	      bpl	clearsongmemoryloop2
    306  f000				  -
    307  f000				  -	      lda	#$ff
    308  f000				  -	      ldx	#3
    309  f000				  -clearsongmemoryloop3
    310  f000				  -	      sta	songchannel1busywait,x
    311  f000				  -	      dex
    312  f000				  -	      bpl	clearsongmemoryloop3
    313  f000				  -	      rts
    314  f000				  -
    315  f000				  -setsongchannels
    316  f000				  -	      jsr	clearsongmemory
    317  f000				  -	      ldy	#7
    318  f000				  -	      ldx	#3
    319  f000				  -setsongchannelsloop
    320  f000				  -	      lda	(songpointerlo),y
    321  f000				  -	      sta	songchannel1layer1hi,x
    322  f000				  -	      dey
    323  f000				  -	      lda	(songpointerlo),y
    324  f000				  -	      sta	songchannel1layer1lo,x
    325  f000				  -	      dex
    326  f000				  -	      dey
    327  f000				  -	      bpl	setsongchannelsloop
    328  f000				  -	      rts
    329  f000				  -
    330  f000				  -channel2bits
    331  f000				  -	      .byte	1,2,4,8
    332  f000				  -
    333  f000				  -tiatrackeroctavenotes
    334  f000				  -	      ifconst	BUZZBASS
    335  f000				  -LOWC       =	15
    336  f000				  -	      else
    337  f000				  -LOWC       =	14
    338  f000				  -	      endif
    339  f000				  -			; ****** ELECTRONIC (0 to 11)
    340  f000				  -	      .byte	LOWC,20	; c0	 16.1Hz
    341  f000				  -	      .byte	LOWC,18	; c#0
    342  f000				  -	      .byte	LOWC,17	; d0
    343  f000				  -	      .byte	LOWC,16	; d#0
    344  f000				  -	      .byte	LOWC,15	; e0
    345  f000				  -	      .byte	LOWC,14	; f0  (very off)
    346  f000				  -	      .byte	LOWC,14	; f#0
    347  f000				  -	      .byte	LOWC,13	; g0
    348  f000				  -	      .byte	LOWC,12	; g#0
    349  f000				  -	      .byte	LOWC,11	; a0
    350  f000				  -	      .byte	LOWC,11	; a#0 (very off)
    351  f000				  -	      .byte	LOWC,10	; b0	 30.7Hz
    352  f000				  -
    353  f000				  -			; ****** SLIGHTLY BUZZY (12 to 23)
    354  f000				  -	      .byte	6,30	; c1	 32.7Hz
    355  f000				  -	      .byte	6,28	; c#1
    356  f000				  -	      .byte	6,27	; d1
    357  f000				  -	      .byte	6,25	; d#1
    358  f000				  -	      .byte	6,24	; e1
    359  f000				  -	      .byte	6,22	; f1
    360  f000				  -	      .byte	6,21	; f#1
    361  f000				  -	      .byte	6,20	; g1
    362  f000				  -	      .byte	6,18	; g#1
    363  f000				  -	      .byte	6,17	; a1
    364  f000				  -	      .byte	6,16	; a#1
    365  f000				  -	      .byte	6,15	; b1	 63.4Hz
    366  f000				  -
    367  f000				  -			; ****** BUZZY (24 to 39)
    368  f000				  -	      .byte	1,31	; c2	 65.5
    369  f000				  -	      .byte	1,30	; c#2	 67.6
    370  f000				  -	      .byte	1,27	; d2	 72.3
    371  f000				  -	      .byte	1,26	; d#2	 77.6
    372  f000				  -	      .byte	1,24	; e2
    373  f000				  -	      .byte	1,23	; f2
    374  f000				  -	      .byte	1,22	; f#2
    375  f000				  -	      .byte	1,20	; g2
    376  f000				  -	      .byte	1,19	; g#2
    377  f000				  -	      .byte	1,18	; a2
    378  f000				  -	      .byte	1,17	; a#2
    379  f000				  -	      .byte	1,16	; b2
    380  f000				  -	      .byte	1,15	; c3	126.8Hz
    381  f000				  -	      .byte	1,14	; c#3
    382  f000				  -	      .byte	1,13	; d3	149.7Hz
    383  f000				  -	      .byte	1,12	; d#3	161.2Hz (very off)
    384  f000				  -			; ****** PURE (40 to 71) - best key is A3 Major
    385  f000				  -	      .byte	12,31	; e3	163.8Hz
    386  f000				  -	      .byte	12,29	; f3
    387  f000				  -	      .byte	12,28	; f#3
    388  f000				  -	      .byte	12,26	; g3
    389  f000				  -	      .byte	12,24	; g#3
    390  f000				  -	      .byte	12,23	; a3  songs in key of A benefit from Perceptual Tuning
    391  f000				  -	      .byte	12,22	; a#3
    392  f000				  -	      .byte	12,20	; b3
    393  f000				  -	      .byte	12,19	; c4  (middle C)
    394  f000				  -	      .byte	12,18	; c#4
    395  f000				  -	      .byte	12,17	; d4
    396  f000				  -	      .byte	12,16	; d#4
    397  f000				  -	      .byte	12,15	; e4
    398  f000				  -	      .byte	12,14	; f4
    399  f000				  -	      .byte	12,13	; f#4
    400  f000				  -	      .byte	12,12	; g4  (very off)
    401  f000				  -	      .byte	12,12	; g#4
    402  f000				  -	      .byte	12,11	; a4
    403  f000				  -	      .byte	12,10	; a#4
    404  f000				  -	      .byte	4,31	; b4
    405  f000				  -	      .byte	4,29	; c5
    406  f000				  -	      .byte	4,28	; c#5
    407  f000				  -	      .byte	4,26	; d5
    408  f000				  -	      .byte	4,24	; d#5
    409  f000				  -	      .byte	4,23	; e5
    410  f000				  -	      .byte	4,22	; f5
    411  f000				  -	      .byte	4,20	; f#5
    412  f000				  -	      .byte	4,19	; g5
    413  f000				  -	      .byte	4,18	; g#5
    414  f000				  -	      .byte	4,17	; a5
    415  f000				  -	      .byte	4,16	; a#5
    416  f000				  -	      .byte	4,15	; b5
    417  f000				  -
    418  f000				  -			; ****** TUNED WIND (72 to 83)
    419  f000				  -	      .byte	8,30	; c
    420  f000				  -	      .byte	8,28	; c#
    421  f000				  -	      .byte	8,27	; d
    422  f000				  -	      .byte	8,25	; d#
    423  f000				  -	      .byte	8,24	; e
    424  f000				  -	      .byte	8,22	; f
    425  f000				  -	      .byte	8,21	; f#
    426  f000				  -	      .byte	8,20	; g
    427  f000				  -	      .byte	8,18	; g#
    428  f000				  -	      .byte	8,17	; a
    429  f000				  -	      .byte	8,16	; a#
    430  f000				  -	      .byte	8,15	; b
    431  f000				  -
    432  f000				  -	      include	"tiadrumkit.asm"
    433  f000				  -
    434  f000					      endif		;MUSICTRACKER
------- FILE c:\Users\Steve\Desktop\2018dev\7800\7800basic\projects\lessons\lesson1_gfx_modes\lesson1_1.bas.asm
   2048  f000					      endif
   2049  f000					      ifnconst	included.hiscore.asm
------- FILE hiscore.asm LEVEL 2 PASS 3
      0  f000					      include	hiscore.asm
      1  f000							; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  f000
      3  f000				  -	      ifconst	HSSUPPORT
      4  f000				  -detectatarivoxeeprom
      5  f000				  -hiscoremodulestart
      6  f000				  -			; do a test to see if atarivox eeprom can be accessed, and save results
      7  f000				  -	      jsr	AVoxDetect
      8  f000				  -	      eor	#$ff	; invert for easy 7800basic if...then logic
      9  f000				  -	      sta	avoxdetected
     10  f000				  -	      lda	#$0
     11  f000				  -	      sta	SWACNT
     12  f000				  -	      lda	avoxdetected
     13  f000				  -	      rts
     14  f000				  -
     15  f000				  -detecthsc
     16  f000				  -			; check for the HSC ROM signature...
     17  f000				  -	      lda	XCTRL1s
     18  f000				  -	      ora	#%00001100
     19  f000				  -	      sta	XCTRL1s
     20  f000				  -	      sta	XCTRL1
     21  f000				  -	      lda	$3900
     22  f000				  -	      cmp	#$C6
     23  f000				  -	      bne	detecthscfail
     24  f000				  -	      lda	$3904
     25  f000				  -	      cmp	#$FE
     26  f000				  -	      bne	detecthscfail
     27  f000				  -			; check if it's initialized...
     28  f000				  -	      ldy	#0
     29  f000				  -	      lda	#$ff
     30  f000				  -checkhscinit
     31  f000				  -	      and	$1000,y
     32  f000				  -	      dey
     33  f000				  -	      bpl	checkhscinit
     34  f000				  -	      cmp	#$ff
     35  f000				  -	      bne	hscisalreadyinit
     36  f000				  -			; if we're here, we need to do a minimal HSC init...
     37  f000				  -	      ldy	#$28
     38  f000				  -hscinitloop1
     39  f000				  -	      lda	hscheader,y
     40  f000				  -	      sta	$1000,y
     41  f000				  -	      dey
     42  f000				  -	      bpl	hscinitloop1
     43  f000				  -	      ldy	#$89
     44  f000				  -	      lda	#$7F
     45  f000				  -hscinitloop2
     46  f000				  -	      sta	$10B3,y
     47  f000				  -	      dey
     48  f000				  -	      cpy	#$ff
     49  f000				  -	      bne	hscinitloop2
     50  f000				  -hscisalreadyinit
     51  f000				  -	      lda	#$ff
     52  f000				  -	      rts
     53  f000				  -hscheader
     54  f000				  -	      .byte	$00,$00,$68,$83,$AA,$55,$9C,$FF,$07,$12,$02,$1F,$00,$00,$00,$00
     55  f000				  -	      .byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     56  f000				  -	      .byte	$00,$00,$00,$00,$00,$00,$00,$00,$03
     57  f000				  -detecthscfail
     58  f000				  -	      lda	XCTRL1s
     59  f000				  -	      and	#%11110111
     60  f000				  -	      sta	XCTRL1s
     61  f000				  -	      lda	#0
     62  f000				  -	      rts
     63  f000					      endif		; HSSUPPORT
     64  f000
     65  f000				  -	      ifconst	HSSUPPORT
     66  f000				  -	      ifnconst	hiscorefont
     67  f000				  -	      echo	""
     68  f000				  -	      echo	"WARNING: High score support is enabled, but the hiscorefont.png was"
     69  f000				  -	      echo	" NOT imported with incgraphic. The high score display code"
     70  f000				  -	      echo	" has been omitted from this build."
     71  f000				  -	      echo	""
     72  f000				  -	      else
     73  f000				  -hscdrawscreen
     74  f000				  -
     75  f000				  -			; we use 20 lines on a 24 line display
     76  f000				  -			; HSSCOREY to dynamically centers based on
     77  f000				  -			;HSSCOREY = 0
     78  f000				  -HSSCOREY   =	((WZONECOUNT*WZONEHEIGHT/8)-22)/2
     79  f000				  -HSCURSORY  =	((HSSCOREY/(WZONEHEIGHT/8))*WZONEHEIGHT)
     80  f000				  -
     81  f000				  -	      ifconst	HSSCORESIZE
     82  f000				  -SCORESIZE  =	HSSCORESIZE
     83  f000				  -	      else
     84  f000				  -SCORESIZE  =	6
     85  f000				  -	      endif
     86  f000				  -
     87  f000				  -			;save shadow registers for later return...
     88  f000				  -	      lda	sCTRL
     89  f000				  -	      sta	ssCTRL
     90  f000				  -	      lda	sCHARBASE
     91  f000				  -	      sta	ssCHARBASE
     92  f000				  -	      lda	#$60
     93  f000				  -	      sta	charactermode
     94  f000				  -	      jsr	drawwait
     95  f000				  -	      jsr	blacken320colors
     96  f000				  -	      jsr	clearscreen
     97  f000				  -
     98  f000				  -			;set the character base to the HSC font
     99  f000				  -	      lda	#>hiscorefont
    100  f000				  -	      sta	CHARBASE
    101  f000				  -	      sta	sCHARBASE
    102  f000				  -	      lda	#%01000011	;Enable DMA, mode=320A
    103  f000				  -	      sta	CTRL
    104  f000				  -	      sta	sCTRL
    105  f000				  -
    106  f000				  -	      lda	#60
    107  f000				  -	      sta	hsjoydebounce
    108  f000				  -
    109  f000				  -	      lda	#0
    110  f000				  -	      sta	hscursorx
    111  f000				  -	      sta	framecounter
    112  f000				  -	      ifnconst	HSCOLORCHASESTART
    113  f000				  -	      lda	#$8D	; default is blue. why not?
    114  f000				  -	      else
    115  f000				  -	      lda	#HSCOLORCHASESTART
    116  f000				  -	      endif
    117  f000				  -	      sta	hscolorchaseindex
    118  f000				  -
    119  f000				  -	      lda	#$0F
    120  f000				  -	      sta	P0C2	; base text is white
    121  f000				  -
    122  f000				  -	      jsr	hschasecolors
    123  f000				  -			; ** plot all of the initials
    124  f000				  -	      lda	#<HSRAMInitials
    125  f000				  -	      sta	temp1	; charmaplo
    126  f000				  -	      lda	#>HSRAMInitials
    127  f000				  -	      sta	temp2	; charmaphi
    128  f000				  -	      lda	#32+29	; palette=0-29 | 32-(width=3)
    129  f000				  -	      sta	temp3	; palette/width
    130  f000				  -	      lda	#104
    131  f000				  -	      sta	temp4	; X
    132  f000				  -	      lda	#((HSSCOREY+6)/(WZONEHEIGHT/8))
    133  f000				  -	      sta	temp5	; Y
    134  f000				  -plothsinitialsloop
    135  f000				  -	      jsr	plotcharacters
    136  f000				  -	      clc
    137  f000				  -	      lda	temp3
    138  f000				  -	      adc	#32
    139  f000				  -	      sta	temp3
    140  f000				  -	      inc	temp5
    141  f000				  -	      if	WZONEHEIGHT = 8
    142  f000				  -	      inc	temp5
    143  f000				  -	      endif
    144  f000				  -	      clc
    145  f000				  -	      lda	#3
    146  f000				  -	      adc	temp1
    147  f000				  -	      sta	temp1
    148  f000				  -	      cmp	#(<(HSRAMInitials+15))
    149  f000				  -	      bcc	plothsinitialsloop
    150  f000				  -
    151  f000				  -	      ifconst	HSGAMENAMELEN
    152  f000				  -			;plot the game name...
    153  f000				  -	      lda	#<HSGAMENAMEtable
    154  f000				  -	      sta	temp1	; charmaplo
    155  f000				  -	      lda	#>HSGAMENAMEtable
    156  f000				  -	      sta	temp2	; charmaphi
    157  f000				  -	      lda	#(32-HSGAMENAMELEN)	; palette=0*29 | 32-(width=3)
    158  f000				  -	      sta	temp3	; palette/width
    159  f000				  -	      lda	#(80-(HSGAMENAMELEN*2))
    160  f000				  -	      sta	temp4	; X
    161  f000				  -	      lda	#((HSSCOREY+0)/(WZONEHEIGHT/8))
    162  f000				  -	      sta	temp5	; Y
    163  f000				  -	      jsr	plotcharacters
    164  f000				  -	      endif		; HSGAMENAMELEN
    165  f000				  -
    166  f000				  -			;plot "difficulty"...
    167  f000				  -	      ldy	gamedifficulty
    168  f000				  -	      ifnconst	HSNOLEVELNAMES
    169  f000				  -	      lda	highscoredifficultytextlo,y
    170  f000				  -	      sta	temp1
    171  f000				  -	      lda	highscoredifficultytexthi,y
    172  f000				  -	      sta	temp2
    173  f000				  -	      sec
    174  f000				  -	      lda	#32
    175  f000				  -	      sbc	highscoredifficultytextlen,y
    176  f000				  -	      sta	temp3	; palette/width
    177  f000				  -	      sec
    178  f000				  -	      lda	#40
    179  f000				  -	      sbc	highscoredifficultytextlen,y
    180  f000				  -	      asl
    181  f000				  -	      sta	temp4	; X
    182  f000				  -	      else
    183  f000				  -	      lda	#<HSHIGHSCOREStext
    184  f000				  -	      sta	temp1	; charmaplo
    185  f000				  -	      lda	#>HSHIGHSCOREStext
    186  f000				  -	      sta	temp2	; charmaphi
    187  f000				  -	      lda	#(32-11)	; palette=0*29 | 32-(width=3)
    188  f000				  -	      sta	temp3	; palette/width
    189  f000				  -	      lda	#(80-(11*2))
    190  f000				  -	      sta	temp4	; X
    191  f000				  -	      endif		; HSNOLEVELNAMES
    192  f000				  -
    193  f000				  -	      lda	#((HSSCOREY+2)/(WZONEHEIGHT/8))
    194  f000				  -	      sta	temp5	; Y
    195  f000				  -	      jsr	plotcharacters
    196  f000				  -	      ldy	hsdisplaymode	; 0=attact mode, 1=player eval, 2=player 1 eval, 3=player 2 player eval
    197  f000				  -	      bne	carronwithscoreevaluation
    198  f000				  -	      jmp	donoscoreevaluation
    199  f000				  -carronwithscoreevaluation
    200  f000				  -	      dey
    201  f000				  -	      lda	highscorelabeltextlo,y
    202  f000				  -	      sta	temp1
    203  f000				  -	      lda	highscorelabeltexthi,y
    204  f000				  -	      sta	temp2
    205  f000				  -	      sec
    206  f000				  -	      lda	#(32-15)	; palette=0*29 | 32-(width=3)
    207  f000				  -	      sta	temp3	; palette/width
    208  f000				  -	      lda	highscorelabeladjust1,y
    209  f000				  -	      sta	temp4	; X
    210  f000				  -	      lda	#((HSSCOREY+18)/(WZONEHEIGHT/8))
    211  f000				  -	      sta	temp5	; Y
    212  f000				  -	      jsr	plotcharacters
    213  f000				  -
    214  f000				  -	      ldy	hsdisplaymode	; 0=attact mode, 1=player eval, 2=player 1 eval, 3=player 2 player eval
    215  f000				  -	      dey
    216  f000				  -			;plot the current player score...
    217  f000				  -	      lda	#(32-SCORESIZE)	; palette=0*32
    218  f000				  -	      sta	temp3	; palette/width
    219  f000				  -	      lda	highscorelabeladjust2,y
    220  f000				  -	      sta	temp4	; X
    221  f000				  -	      lda	#((HSSCOREY+18)/(WZONEHEIGHT/8))
    222  f000				  -	      sta	temp5	; Y
    223  f000				  -
    224  f000				  -	      lda	scorevarlo,y
    225  f000				  -	      sta	temp7	; score variable lo
    226  f000				  -	      lda	scorevarhi,y
    227  f000				  -	      sta	temp8	; score variable hi
    228  f000				  -
    229  f000				  -	      lda	#(hiscorefont_mode | %01100000)	; charactermode
    230  f000				  -	      sta	temp9
    231  f000				  -
    232  f000				  -	      lda	#<(hiscorefont+33)	; +33 to get to '0' character
    233  f000				  -	      sta	temp1	; charmaplo
    234  f000				  -	      lda	#>(hiscorefont+33)
    235  f000				  -	      sta	temp2	; charmaphi
    236  f000				  -	      lda	#SCORESIZE
    237  f000				  -	      sta	temp6
    238  f000				  -	      ifnconst	DOUBLEWIDE
    239  f000				  -	      jsr	plotvalue
    240  f000				  -	      else
    241  f000				  -	      jsr	plotvaluedw
    242  f000				  -	      endif
    243  f000				  -
    244  f000				  -USED_PLOTVALUE =	1	; ensure that plotvalue gets compiled in
    245  f000				  -
    246  f000				  -	      ifconst	HSGAMERANKS
    247  f000				  -
    248  f000				  -	      ldx	#$ff	; start at 0 after the inx...
    249  f000				  -comparescore2rankloop
    250  f000				  -	      inx
    251  f000				  -	      ldy	#0
    252  f000				  -	      lda	rankvalue_0,x
    253  f000				  -	      cmp	(temp7),y
    254  f000				  -	      bcc	score2rankloopdone
    255  f000				  -	      bne	comparescore2rankloop
    256  f000				  -	      iny
    257  f000				  -	      lda	rankvalue_1,x
    258  f000				  -	      cmp	(temp7),y
    259  f000				  -	      bcc	score2rankloopdone
    260  f000				  -	      bne	comparescore2rankloop
    261  f000				  -	      iny
    262  f000				  -	      lda	(temp7),y
    263  f000				  -	      cmp	rankvalue_2,x
    264  f000				  -	      bcs	score2rankloopdone
    265  f000				  -	      jmp	comparescore2rankloop
    266  f000				  -score2rankloopdone
    267  f000				  -	      stx	hsnewscorerank
    268  f000				  -
    269  f000				  -	      lda	ranklabello,x
    270  f000				  -	      sta	temp1
    271  f000				  -	      lda	ranklabelhi,x
    272  f000				  -	      sta	temp2
    273  f000				  -	      sec
    274  f000				  -	      lda	#32	; palette=0*29 | 32-(width=3)
    275  f000				  -	      sbc	ranklabellengths,x
    276  f000				  -	      sta	temp3	; palette/width
    277  f000				  -	      sec
    278  f000				  -	      lda	#(40+6)
    279  f000				  -	      sbc	ranklabellengths,x
    280  f000				  -	      asl
    281  f000				  -	      sta	temp4	; X
    282  f000				  -	      lda	#((HSSCOREY+20)/(WZONEHEIGHT/8))
    283  f000				  -	      sta	temp5	; Y
    284  f000				  -	      jsr	plotcharacters
    285  f000				  -
    286  f000				  -	      ldx	hsnewscorerank
    287  f000				  -
    288  f000				  -	      lda	#<highscoreranklabel
    289  f000				  -	      sta	temp1
    290  f000				  -	      lda	#>highscoreranklabel
    291  f000				  -	      sta	temp2
    292  f000				  -
    293  f000				  -	      lda	#(32-5)	; palette=0*29 | 32-(width=3)
    294  f000				  -	      sta	temp3	; palette/width
    295  f000				  -	      lda	#(40-6)
    296  f000				  -	      sec
    297  f000				  -	      sbc	ranklabellengths,x
    298  f000				  -	      asl
    299  f000				  -	      sta	temp4	; X
    300  f000				  -	      lda	#((HSSCOREY+20)/(WZONEHEIGHT/8))
    301  f000				  -	      sta	temp5	; Y
    302  f000				  -	      jsr	plotcharacters
    303  f000				  -	      endif
    304  f000				  -
    305  f000				  -
    306  f000				  -			; ** which line did this player beat?
    307  f000				  -	      lda	#$ff
    308  f000				  -	      sta	hsnewscoreline
    309  f000				  -	      ldx	#$fd
    310  f000				  -comparescoreadd2x
    311  f000				  -	      inx
    312  f000				  -comparescoreadd1x
    313  f000				  -	      inx
    314  f000				  -comparescore2lineloop
    315  f000				  -	      inc	hsnewscoreline
    316  f000				  -	      inx		; initialrun, x=0
    317  f000				  -	      cpx	#15
    318  f000				  -	      beq	nohighscoreforyou
    319  f000				  -	      ldy	#0
    320  f000				  -	      lda	HSRAMScores,x
    321  f000				  -	      cmp	(temp7),y	; first score digit
    322  f000				  -	      bcc	score2lineloopdonedel1x
    323  f000				  -	      bne	comparescoreadd2x
    324  f000				  -	      iny
    325  f000				  -	      inx
    326  f000				  -	      lda	HSRAMScores,x
    327  f000				  -	      cmp	(temp7),y
    328  f000				  -	      bcc	score2lineloopdonedel2x
    329  f000				  -	      bne	comparescoreadd1x
    330  f000				  -	      iny
    331  f000				  -	      inx
    332  f000				  -	      lda	(temp7),y
    333  f000				  -	      cmp	HSRAMScores,x
    334  f000				  -	      bcs	score2lineloopdonedel3x
    335  f000				  -	      jmp	comparescore2lineloop
    336  f000				  -nohighscoreforyou
    337  f000				  -	      lda	#$ff
    338  f000				  -	      sta	hsnewscoreline
    339  f000				  -	      sta	countdownseconds
    340  f000				  -	      jmp	donoscoreevaluation
    341  f000				  -score2lineloopdonedel3x
    342  f000				  -	      dex
    343  f000				  -score2lineloopdonedel2x
    344  f000				  -	      dex
    345  f000				  -score2lineloopdonedel1x
    346  f000				  -	      dex
    347  f000				  -
    348  f000				  -			; 0 1 2
    349  f000				  -			; 3 4 5
    350  f000				  -			; 6 7 8
    351  f000				  -			; 9 0 1
    352  f000				  -			; 2 3 4
    353  f000				  -
    354  f000				  -	      stx	temp9
    355  f000				  -	      cpx	#11
    356  f000				  -	      beq	postsortscoresuploop
    357  f000				  -	      ldx	#11
    358  f000				  -sortscoresuploop
    359  f000				  -	      lda	HSRAMScores,x
    360  f000				  -	      sta	HSRAMScores+3,x
    361  f000				  -	      lda	HSRAMInitials,x
    362  f000				  -	      sta	HSRAMInitials+3,x
    363  f000				  -	      dex
    364  f000				  -	      cpx	temp9
    365  f000				  -	      bne	sortscoresuploop
    366  f000				  -postsortscoresuploop
    367  f000				  -
    368  f000				  -			;stick the score and cleared initials in the slot...
    369  f000				  -	      inx
    370  f000				  -	      ldy	#0
    371  f000				  -	      sty	hsinitialhold
    372  f000				  -	      lda	(temp7),y
    373  f000				  -	      sta	HSRAMScores,x
    374  f000				  -	      iny
    375  f000				  -	      lda	(temp7),y
    376  f000				  -	      sta	HSRAMScores+1,x
    377  f000				  -	      iny
    378  f000				  -	      lda	(temp7),y
    379  f000				  -	      sta	HSRAMScores+2,x
    380  f000				  -	      lda	#0
    381  f000				  -	      sta	HSRAMInitials,x
    382  f000				  -	      lda	#29
    383  f000				  -	      sta	HSRAMInitials+1,x
    384  f000				  -	      sta	HSRAMInitials+2,x
    385  f000				  -
    386  f000				  -	      stx	hsinitialpos
    387  f000				  -
    388  f000				  -	      ifconst	vox_highscore
    389  f000				  -	      lda	<#vox_highscore
    390  f000				  -	      sta	speech_addr
    391  f000				  -	      lda	>#vox_highscore
    392  f000				  -	      sta	speech_addr+1
    393  f000				  -	      endif
    394  f000				  -	      ifconst	sfx_highscore
    395  f000				  -	      lda	<#sfx_highscore
    396  f000				  -	      sta	temp1
    397  f000				  -	      lda	>#sfx_highscore
    398  f000				  -	      sta	temp2
    399  f000				  -	      lda	#0
    400  f000				  -	      sta	temp3
    401  f000				  -	      jsr	schedulesfx
    402  f000				  -	      endif
    403  f000				  -	      ifconst	songdatastart_song_highscore
    404  f000				  -	      lda	#<songchanneltable_song_highscore
    405  f000				  -	      sta	songpointerlo
    406  f000				  -	      lda	#>songchanneltable_song_highscore
    407  f000				  -	      sta	songpointerhi
    408  f000				  -	      lda	#73
    409  f000				  -	      sta	songtempo
    410  f000				  -	      jsr	setsongchannels
    411  f000				  -	      endif
    412  f000				  -
    413  f000				  -
    414  f000				  -donoscoreevaluation
    415  f000				  -
    416  f000				  -	      lda	#(32+(32-SCORESIZE))	; palette=0*32 | 32-(width=6)
    417  f000				  -	      sta	temp3	; palette/width
    418  f000				  -	      lda	#(72+(4*(6-SCORESIZE)))
    419  f000				  -	      sta	temp4	; X
    420  f000				  -	      lda	#((HSSCOREY+6)/(WZONEHEIGHT/8))
    421  f000				  -	      sta	temp5	; Y
    422  f000				  -	      lda	#<HSRAMScores
    423  f000				  -	      sta	temp7	; score variable lo
    424  f000				  -	      lda	#>HSRAMScores
    425  f000				  -	      sta	temp8	; score variable hi
    426  f000				  -	      lda	#(hiscorefont_mode | %01100000)	; charactermode
    427  f000				  -	      sta	temp9
    428  f000				  -plothsscoresloop
    429  f000				  -	      lda	#<(hiscorefont+33)	; +33 to get to '0' character
    430  f000				  -	      sta	temp1	; charmaplo
    431  f000				  -	      lda	#>(hiscorefont+33)
    432  f000				  -	      sta	temp2	; charmaphi
    433  f000				  -	      lda	#6
    434  f000				  -	      sta	temp6
    435  f000				  -	      ifnconst	DOUBLEWIDE
    436  f000				  -	      jsr	plotvalue
    437  f000				  -	      else
    438  f000				  -	      jsr	plotvaluedw
    439  f000				  -	      endif
    440  f000				  -	      clc
    441  f000				  -	      lda	temp3
    442  f000				  -	      adc	#32
    443  f000				  -	      sta	temp3
    444  f000				  -	      inc	temp5
    445  f000				  -	      if	WZONEHEIGHT = 8
    446  f000				  -	      inc	temp5
    447  f000				  -	      endif
    448  f000				  -	      clc
    449  f000				  -	      lda	#3
    450  f000				  -	      adc	temp7
    451  f000				  -	      sta	temp7
    452  f000				  -	      cmp	#(<(HSRAMScores+15))
    453  f000				  -	      bcc	plothsscoresloop
    454  f000				  -plothsindex
    455  f000				  -	      lda	#32+31	; palette=0*32 | 32-(width=1)
    456  f000				  -	      sta	temp3	; palette/width
    457  f000				  -	      lda	#44
    458  f000				  -	      sta	temp4	; X
    459  f000				  -	      lda	#((HSSCOREY+6)/(WZONEHEIGHT/8))
    460  f000				  -	      sta	temp5	; Y
    461  f000				  -	      lda	#<hsgameslotnumbers
    462  f000				  -	      sta	temp7	; score variable lo
    463  f000				  -	      lda	#>hsgameslotnumbers
    464  f000				  -	      sta	temp8	; score variable hi
    465  f000				  -	      lda	#(hiscorefont_mode | %01100000)	; charactermode
    466  f000				  -	      sta	temp9
    467  f000				  -plothsindexloop
    468  f000				  -	      lda	#<(hiscorefont+33)
    469  f000				  -	      sta	temp1	; charmaplo
    470  f000				  -	      lda	#>(hiscorefont+33)
    471  f000				  -	      sta	temp2	; charmaphi
    472  f000				  -	      lda	#1
    473  f000				  -	      sta	temp6	; number of characters
    474  f000				  -	      ifnconst	DOUBLEWIDE
    475  f000				  -	      jsr	plotvalue
    476  f000				  -	      else
    477  f000				  -	      jsr	plotvaluedw
    478  f000				  -	      endif
    479  f000				  -	      clc
    480  f000				  -	      lda	temp3
    481  f000				  -	      adc	#32
    482  f000				  -	      sta	temp3
    483  f000				  -	      inc	temp5
    484  f000				  -	      if	WZONEHEIGHT = 8
    485  f000				  -	      inc	temp5
    486  f000				  -	      endif
    487  f000				  -	      inc	temp7
    488  f000				  -	      lda	temp7
    489  f000				  -	      cmp	#(<(hsgameslotnumbers+5))
    490  f000				  -	      bcc	plothsindexloop
    491  f000				  -
    492  f000				  -	      jsr	savescreen
    493  f000				  -	      ifnconst	HSSECONDS
    494  f000				  -	      lda	#6
    495  f000				  -	      else
    496  f000				  -	      lda	#HSSECONDS
    497  f000				  -	      endif
    498  f000				  -
    499  f000				  -	      sta	countdownseconds
    500  f000				  -
    501  f000				  -keepdisplayinghs
    502  f000				  -	      jsr	restorescreen
    503  f000				  -
    504  f000				  -	      jsr	setuphsinpt1
    505  f000				  -
    506  f000				  -	      lda	hsnewscoreline
    507  f000				  -	      bpl	carryonkeepdisplayinghs
    508  f000				  -	      jmp	skipenterscorecontrol
    509  f000				  -carryonkeepdisplayinghs
    510  f000				  -
    511  f000				  -
    512  f000				  -	      ifnconst	HSSECONDS
    513  f000				  -	      lda	#6
    514  f000				  -	      else
    515  f000				  -	      lda	#HSSECONDS
    516  f000				  -	      endif
    517  f000				  -
    518  f000				  -	      sta	countdownseconds
    519  f000				  -
    520  f000				  -			;plot the "cursor" initial sprite...
    521  f000				  -	      lda	hsinitialhold
    522  f000				  -
    523  f000				  -	      sta	temp1
    524  f000				  -	      lda	#>(hiscorefont+32)
    525  f000				  -	      sta	temp2
    526  f000				  -	      lda	#31	; palette=0*32 | 32-(width=1)
    527  f000				  -	      sta	temp3	; palette/width
    528  f000				  -	      lda	hscursorx
    529  f000				  -	      asl
    530  f000				  -	      asl
    531  f000				  -	      clc
    532  f000				  -	      adc	#104
    533  f000				  -	      sta	temp4	; X
    534  f000				  -	      lda	hsnewscoreline
    535  f000				  -	      asl
    536  f000				  -	      asl
    537  f000				  -	      asl
    538  f000				  -	      asl
    539  f000				  -	      adc	#((3*16)+HSCURSORY)
    540  f000				  -	      sta	temp5	; Y
    541  f000				  -	      lda	#%01000000
    542  f000				  -	      sta	temp6
    543  f000				  -	      jsr	plotsprite
    544  f000				  -
    545  f000				  -	      ldx	hscursorx
    546  f000				  -	      ldy	hsdisplaymode
    547  f000				  -	      lda	SWCHA
    548  f000				  -	      cpy	#3
    549  f000				  -	      bne	hsskipadjustjoystick1
    550  f000				  -	      asl
    551  f000				  -	      asl
    552  f000				  -	      asl
    553  f000				  -	      asl
    554  f000				  -hsskipadjustjoystick1
    555  f000				  -	      sta	hsswcha
    556  f000				  -	      and	#%00110000
    557  f000				  -	      cmp	#%00110000
    558  f000				  -	      beq	hsjoystickskipped
    559  f000				  -	      lda	hsjoydebounce
    560  f000				  -	      beq	hsdontdebounce
    561  f000				  -	      jmp	hspostjoystick
    562  f000				  -hsdontdebounce
    563  f000				  -	      ldx	#1	; small tick sound
    564  f000				  -	      jsr	playhssfx
    565  f000				  -	      lda	hsswcha
    566  f000				  -	      and	#%00110000
    567  f000				  -	      ldx	hscursorx
    568  f000				  -	      cmp	#%00100000	; check down
    569  f000				  -	      bne	hsjoycheckup
    570  f000				  -	      ldy	hsinitialhold
    571  f000				  -	      cpx	#0
    572  f000				  -	      bne	skipavoid31_1
    573  f000				  -	      cpy	#0	; if we're about to change to the <- char (#31) then double-decrement to skip over it
    574  f000				  -	      bne	skipavoid31_1
    575  f000				  -	      dey
    576  f000				  -skipavoid31_1
    577  f000				  -	      dey
    578  f000				  -	      jmp	hssetdebounce
    579  f000				  -hsjoycheckup
    580  f000				  -	      cmp	#%00010000	; check up
    581  f000				  -	      bne	hsjoystickskipped
    582  f000				  -	      ldy	hsinitialhold
    583  f000				  -	      cpx	#0
    584  f000				  -	      bne	skipavoid31_2
    585  f000				  -	      cpy	#30	; if we're about to change to the <- char (#31) then double-increment to skip over it
    586  f000				  -	      bne	skipavoid31_2
    587  f000				  -	      iny
    588  f000				  -skipavoid31_2
    589  f000				  -	      iny
    590  f000				  -hssetdebounce
    591  f000				  -	      tya
    592  f000				  -	      and	#31
    593  f000				  -	      sta	hsinitialhold
    594  f000				  -	      lda	#15
    595  f000				  -	      sta	hsjoydebounce
    596  f000				  -	      bne	hspostjoystick
    597  f000				  -hsjoystickskipped
    598  f000				  -			; check the fire button only when the stick isn't engaged
    599  f000				  -	      lda	hsinpt1
    600  f000				  -	      bpl	hsbuttonskipped
    601  f000				  -	      lda	hsjoydebounce
    602  f000				  -	      beq	hsfiredontdebounce
    603  f000				  -	      bne	hspostjoystick
    604  f000				  -hsfiredontdebounce
    605  f000				  -	      lda	hsinitialhold
    606  f000				  -	      cmp	#31
    607  f000				  -	      beq	hsmovecursorback
    608  f000				  -	      inc	hscursorx
    609  f000				  -	      inc	hsinitialpos
    610  f000				  -	      lda	hscursorx
    611  f000				  -	      cmp	#3
    612  f000				  -	      bne	skiphsentryisdone
    613  f000				  -	      lda	#0
    614  f000				  -	      sta	framecounter
    615  f000				  -	      lda	#$ff
    616  f000				  -	      sta	hsnewscoreline
    617  f000				  -	      dec	hsinitialpos
    618  f000				  -	      bne	skiphsentryisdone
    619  f000				  -hsmovecursorback
    620  f000				  -	      lda	hscursorx
    621  f000				  -	      beq	skiphsmovecursorback
    622  f000				  -	      lda	#29
    623  f000				  -	      ldx	hsinitialpos
    624  f000				  -	      sta	HSRAMInitials,x
    625  f000				  -	      dec	hsinitialpos
    626  f000				  -	      dec	hscursorx
    627  f000				  -	      dex
    628  f000				  -	      lda	HSRAMInitials,x
    629  f000				  -	      sta	hsinitialhold
    630  f000				  -skiphsmovecursorback
    631  f000				  -skiphsentryisdone
    632  f000				  -	      ldx	#0
    633  f000				  -	      jsr	playhssfx
    634  f000				  -	      lda	#20
    635  f000				  -	      sta	hsjoydebounce
    636  f000				  -	      bne	hspostjoystick
    637  f000				  -
    638  f000				  -hsbuttonskipped
    639  f000				  -	      lda	#0
    640  f000				  -	      sta	hsjoydebounce
    641  f000				  -hspostjoystick
    642  f000				  -
    643  f000				  -	      ldx	hsinitialpos
    644  f000				  -	      lda	hsinitialhold
    645  f000				  -	      sta	HSRAMInitials,x
    646  f000				  -
    647  f000				  -	      jmp	skiphschasecolors
    648  f000				  -
    649  f000				  -skipenterscorecontrol
    650  f000				  -	      jsr	hschasecolors
    651  f000				  -	      jsr	setuphsinpt1
    652  f000				  -	      lda	hsjoydebounce
    653  f000				  -	      bne	skiphschasecolors
    654  f000				  -	      lda	hsinpt1
    655  f000				  -	      bmi	returnfromhs
    656  f000				  -skiphschasecolors
    657  f000				  -
    658  f000				  -	      jsr	drawscreen
    659  f000				  -
    660  f000				  -	      lda	countdownseconds
    661  f000				  -	      beq	returnfromhs
    662  f000				  -	      jmp	keepdisplayinghs
    663  f000				  -returnfromhs
    664  f000				  -
    665  f000				  -	      ifconst	songdatastart_song_highscore
    666  f000				  -	      lda	hsdisplaymode
    667  f000				  -	      beq	skipclearHSCsong
    668  f000				  -	      lda	#0
    669  f000				  -	      sta	songtempo
    670  f000				  -skipclearHSCsong
    671  f000				  -	      endif
    672  f000				  -	      jsr	drawwait
    673  f000				  -	      jsr	clearscreen
    674  f000				  -	      lda	#0
    675  f000				  -	      ldy	#7
    676  f000				  -	      jsr	blacken320colors
    677  f000				  -	      lda	ssCTRL
    678  f000				  -	      sta	sCTRL
    679  f000				  -	      lda	ssCHARBASE
    680  f000				  -	      sta	sCHARBASE
    681  f000				  -	      rts
    682  f000				  -
    683  f000				  -setuphsinpt1
    684  f000				  -	      lda	#$ff
    685  f000				  -	      sta	hsinpt1
    686  f000				  -	      lda	hsjoydebounce
    687  f000				  -	      beq	skipdebounceadjust
    688  f000				  -	      dec	hsjoydebounce
    689  f000				  -	      bne	skipstorefirebuttonstatus
    690  f000				  -skipdebounceadjust
    691  f000				  -	      ldx	hsdisplaymode
    692  f000				  -	      cpx	#3
    693  f000				  -	      bne	hsskipadjustjoyfire1
    694  f000				  -	      lda	sINPT3
    695  f000				  -	      jmp	hsskipadjustjoyfire1done
    696  f000				  -hsskipadjustjoyfire1
    697  f000				  -	      lda	sINPT1
    698  f000				  -hsskipadjustjoyfire1done
    699  f000				  -	      sta	hsinpt1
    700  f000				  -skipstorefirebuttonstatus
    701  f000				  -	      rts
    702  f000				  -
    703  f000				  -blacken320colors
    704  f000				  -	      ldy	#7
    705  f000				  -blacken320colorsloop
    706  f000				  -	      sta	P0C2,y
    707  f000				  -	      dey
    708  f000				  -	      bpl	blacken320colorsloop
    709  f000				  -	      rts
    710  f000				  -
    711  f000				  -hschasecolors
    712  f000				  -	      lda	framecounter
    713  f000				  -	      and	#3
    714  f000				  -	      bne	hschasecolorsreturn
    715  f000				  -	      inc	hscolorchaseindex
    716  f000				  -	      lda	hscolorchaseindex
    717  f000				  -
    718  f000				  -	      sta	P5C2
    719  f000				  -	      sbc	#$02
    720  f000				  -	      sta	P4C2
    721  f000				  -	      sbc	#$02
    722  f000				  -	      sta	P3C2
    723  f000				  -	      sbc	#$02
    724  f000				  -	      sta	P2C2
    725  f000				  -	      sbc	#$02
    726  f000				  -	      sta	P1C2
    727  f000				  -hschasecolorsreturn
    728  f000				  -	      rts
    729  f000				  -
    730  f000				  -playhssfx
    731  f000				  -	      lda	hssfx_lo,x
    732  f000				  -	      sta	temp1
    733  f000				  -	      lda	hssfx_hi,x
    734  f000				  -	      sta	temp2
    735  f000				  -	      lda	#0
    736  f000				  -	      sta	temp3
    737  f000				  -	      jmp	schedulesfx
    738  f000				  -
    739  f000				  -hssfx_lo
    740  f000				  -	      .byte	<sfx_hsletterpositionchange, <sfx_hslettertick
    741  f000				  -hssfx_hi
    742  f000				  -	      .byte	>sfx_hsletterpositionchange, >sfx_hslettertick
    743  f000				  -
    744  f000				  -sfx_hsletterpositionchange
    745  f000				  -	      .byte	$10,$18,$00
    746  f000				  -	      .byte	$02,$06,$08
    747  f000				  -	      .byte	$02,$06,$04
    748  f000				  -	      .byte	$00,$00,$00
    749  f000				  -sfx_hslettertick
    750  f000				  -	      .byte	$10,$18,$00
    751  f000				  -	      .byte	$00,$00,$0a
    752  f000				  -	      .byte	$00,$00,$00
    753  f000				  -
    754  f000				  -highscorelabeladjust1
    755  f000				  -	      .byte	(80-(14*2)-(SCORESIZE*2)),(80-(16*2)-(SCORESIZE*2)),(80-(16*2)-(SCORESIZE*2))
    756  f000				  -highscorelabeladjust2
    757  f000				  -	      .byte	(80+(14*2)-(SCORESIZE*2)),(80+(16*2)-(SCORESIZE*2)),(80+(16*2)-(SCORESIZE*2))
    758  f000				  -
    759  f000				  -scorevarlo
    760  f000				  -	      .byte	<(score0+((6-SCORESIZE)/2)),<(score0+((6-SCORESIZE)/2)),<(score1+((6-SCORESIZE)/2))
    761  f000				  -scorevarhi
    762  f000				  -	      .byte	>(score0+((6-SCORESIZE)/2)),>(score0+((6-SCORESIZE)/2)),>(score1+((6-SCORESIZE)/2))
    763  f000				  -
    764  f000				  -	      ifnconst	HSNOLEVELNAMES
    765  f000				  -highscoredifficultytextlo
    766  f000				  -	      .byte	<easylevelname, <mediumlevelname, <hardlevelname, <expertlevelname
    767  f000				  -highscoredifficultytexthi
    768  f000				  -	      .byte	>easylevelname, >mediumlevelname, >hardlevelname, >expertlevelname
    769  f000				  -	      ifnconst	HSCUSTOMLEVELNAMES
    770  f000				  -highscoredifficultytextlen
    771  f000				  -	      .byte	22, 30, 26, 24
    772  f000				  -
    773  f000				  -easylevelname
    774  f000				  -	      .byte	$04,$00,$12,$18,$1d,$0b,$04,$15,$04,$0b,$1d,$07,$08,$06,$07,$1d,$12,$02,$0e,$11,$04,$12
    775  f000				  -mediumlevelname
    776  f000				  -	      .byte	$08,$0d,$13,$04,$11,$0c,$04,$03,$08,$00,$13,$04,$1d,$0b,$04,$15,$04,$0b,$1d,$07,$08,$06,$07,$1d,$12,$02,$0e,$11,$04,$12
    777  f000				  -hardlevelname
    778  f000				  -	      .byte	$00,$03,$15,$00,$0d,$02,$04,$03,$1d,$0b,$04,$15,$04,$0b,$1d,$07,$08,$06,$07,$1d,$12,$02,$0e,$11,$04,$12
    779  f000				  -expertlevelname
    780  f000				  -	      .byte	$04,$17,$0f,$04,$11,$13,$1d,$0b,$04,$15,$04,$0b,$1d,$07,$08,$06,$07,$1d,$12,$02,$0e,$11,$04,$12
    781  f000				  -	      else
    782  f000				  -	      include	"7800hsgamediffnames.asm"
    783  f000				  -	      endif		; HSCUSTOMLEVELNAMES
    784  f000				  -	      else
    785  f000				  -HSHIGHSCOREStext
    786  f000				  -	      .byte	$07,$08,$06,$07,$1d,$12,$02,$0e,$11,$04,$12
    787  f000				  -	      endif		; HSNOLEVELNAMES
    788  f000				  -
    789  f000				  -highscorelabeltextlo
    790  f000				  -	      .byte	<player0label, <player1label, <player2label
    791  f000				  -highscorelabeltexthi
    792  f000				  -	      .byte	>player0label, >player1label, >player2label
    793  f000				  -
    794  f000				  -player0label
    795  f000				  -	      .byte	$0f,$0b,$00,$18,$04,$11,$1d,$12,$02,$0e,$11,$04,$1a,$1d,$1d
    796  f000				  -
    797  f000				  -player1label
    798  f000				  -	      .byte	$0f,$0b,$00,$18,$04,$11,$1d,$22,$1d,$12,$02,$0e,$11,$04,$1a
    799  f000				  -
    800  f000				  -player2label
    801  f000				  -	      .byte	$0f,$0b,$00,$18,$04,$11,$1d,$23,$1d,$12,$02,$0e,$11,$04,$1a
    802  f000				  -
    803  f000				  -
    804  f000				  -	      ifconst	HSGAMENAMELEN
    805  f000				  -HSGAMENAMEtable
    806  f000				  -	      include	"7800hsgamename.asm"
    807  f000				  -	      endif
    808  f000				  -	      ifconst	HSGAMERANKS
    809  f000				  -	      include	"7800hsgameranks.asm"
    810  f000				  -highscoreranklabel
    811  f000				  -	      .byte	$11,$00,$0d,$0a,$1a
    812  f000				  -	      endif
    813  f000				  -
    814  f000				  -			;ensure our table doesn't wrap a page...
    815  f000				  -	      if	((<*)>251)
    816  f000				  -	      align	256
    817  f000				  -	      endif
    818  f000				  -hsgameslotnumbers
    819  f000				  -	      .byte	33,34,35,36,37
    820  f000				  -	      endif
    821  f000				  -
    822  f000				  -loaddifficultytable
    823  f000				  -	      lda	gamedifficulty
    824  f000				  -	      and	#$03	; ensure the user hasn't selected an invalid difficulty
    825  f000				  -	      sta	gamedifficulty
    826  f000				  -	      cmp	hsdifficulty	; check game difficulty is the same as RAM table
    827  f000				  -	      bne	loaddifficultytablecontinue1
    828  f000				  -	      rts		; this high score difficulty table is already loaded
    829  f000				  -loaddifficultytablecontinue1
    830  f000				  -	      lda	gamedifficulty
    831  f000				  -	      sta	hsdifficulty
    832  f000				  -			;we need to check the device for the table
    833  f000				  -	      lda	hsdevice
    834  f000				  -	      bne	loaddifficultytablecontinue2
    835  f000				  -			; there's no save device. clear out this table.
    836  f000				  -	      jmp	cleardifficultytablemem
    837  f000				  -loaddifficultytablecontinue2
    838  f000				  -	      lda	hsdevice
    839  f000				  -	      and	#1
    840  f000				  -	      beq	memdeviceisntHSC
    841  f000				  -	      jmp	loaddifficultytableHSC
    842  f000				  -memdeviceisntHSC
    843  f000				  -	      jmp	loaddifficultytableAVOX
    844  f000				  -
    845  f000				  -savedifficultytable
    846  f000				  -			;*** we need to check wich device we should use...
    847  f000				  -	      lda	hsdevice
    848  f000				  -	      bne	savedifficultytablerealdevice
    849  f000				  -	      rts		; its a ram device
    850  f000				  -savedifficultytablerealdevice
    851  f000				  -	      and	#1
    852  f000				  -	      beq	savememdeviceisntHSC
    853  f000				  -	      jmp	savedifficultytableHSC
    854  f000				  -savememdeviceisntHSC
    855  f000				  -	      jmp	savedifficultytableAVOX
    856  f000				  -
    857  f000				  -savedifficultytableAVOX
    858  f000				  -			; the load call already setup the memory structure and atarivox memory location
    859  f000				  -	      jsr	savealoadedHSCtablecontinue
    860  f000				  -savedifficultytableAVOXskipconvert
    861  f000				  -	      lda	#HSIDHI
    862  f000				  -	      sta	eeprombuffer
    863  f000				  -	      lda	#HSIDLO
    864  f000				  -	      sta	eeprombuffer+1
    865  f000				  -	      lda	hsdifficulty
    866  f000				  -	      sta	eeprombuffer+2
    867  f000				  -	      lda	#32
    868  f000				  -	      jsr	AVoxWriteBytes
    869  f000				  -	      rts
    870  f000				  -
    871  f000				  -savedifficultytableHSC
    872  f000				  -			;we always load a table before reaching here, so the
    873  f000				  -			;memory structures from the load should be intact...
    874  f000				  -	      ldy	hsgameslot
    875  f000				  -	      bpl	savealoadedHSCtable
    876  f000				  -	      rts
    877  f000				  -savealoadedHSCtable
    878  f000				  -	      lda	HSCGameDifficulty,y
    879  f000				  -	      cmp	#$7F
    880  f000				  -	      bne	savealoadedHSCtablecontinue
    881  f000				  -	      jsr	initializeHSCtableentry
    882  f000				  -savealoadedHSCtablecontinue
    883  f000				  -			;convert our RAM table to HSC format and write it out...
    884  f000				  -	      ldy	#0
    885  f000				  -	      ldx	#0
    886  f000				  -savedifficultytableScores
    887  f000				  -
    888  f000				  -	      lda	HSRAMInitials,x
    889  f000				  -	      sta	temp3
    890  f000				  -	      lda	HSRAMInitials+1,x
    891  f000				  -	      sta	temp4
    892  f000				  -	      lda	HSRAMInitials+2,x
    893  f000				  -	      sta	temp5
    894  f000				  -	      jsr	encodeHSCInitials	; takes 3 byte initials from temp3,4,5 and stores 2 byte initials in temp1,2
    895  f000				  -
    896  f000				  -	      lda	temp1
    897  f000				  -	      sta	(HSGameTableLo),y
    898  f000				  -	      iny
    899  f000				  -	      lda	temp2
    900  f000				  -	      sta	(HSGameTableLo),y
    901  f000				  -	      iny
    902  f000				  -
    903  f000				  -	      lda	HSRAMScores,x
    904  f000				  -	      sta	(HSGameTableLo),y
    905  f000				  -	      iny
    906  f000				  -	      lda	HSRAMScores+1,x
    907  f000				  -	      sta	(HSGameTableLo),y
    908  f000				  -	      iny
    909  f000				  -	      lda	HSRAMScores+2,x
    910  f000				  -	      sta	(HSGameTableLo),y
    911  f000				  -	      iny
    912  f000				  -	      inx
    913  f000				  -	      inx
    914  f000				  -	      inx		; +3
    915  f000				  -	      cpx	#15
    916  f000				  -	      bne	savedifficultytableScores
    917  f000				  -	      rts
    918  f000				  -
    919  f000				  -loaddifficultytableHSC
    920  f000				  -			; routine responsible for loading the difficulty table from HSC
    921  f000				  -	      jsr	findindexHSC
    922  f000				  -	      ldy	hsgameslot
    923  f000				  -	      lda	HSCGameDifficulty,y
    924  f000				  -	      cmp	#$7F
    925  f000				  -	      bne	loaddifficultytableHSCcontinue
    926  f000				  -			;there was an error. use a new RAM table instead...
    927  f000				  -	      jmp	cleardifficultytablemem
    928  f000				  -loaddifficultytableHSCcontinue
    929  f000				  -			; parse the data into the HS memory...
    930  f000				  -	      ldy	#0
    931  f000				  -	      ldx	#0
    932  f000				  -loaddifficultytableScores
    933  f000				  -	      lda	(HSGameTableLo),y
    934  f000				  -	      sta	temp1
    935  f000				  -	      iny
    936  f000				  -	      lda	(HSGameTableLo),y
    937  f000				  -	      sta	temp2
    938  f000				  -	      jsr	decodeHSCInitials	; takes 2 byte initials from temp1,2 and stores 3 byte initials in temp3,4,5
    939  f000				  -	      iny
    940  f000				  -	      lda	(HSGameTableLo),y
    941  f000				  -	      sta	HSRAMScores,x
    942  f000				  -	      lda	temp3
    943  f000				  -	      sta	HSRAMInitials,x
    944  f000				  -	      inx
    945  f000				  -	      iny
    946  f000				  -	      lda	(HSGameTableLo),y
    947  f000				  -	      sta	HSRAMScores,x
    948  f000				  -	      lda	temp4
    949  f000				  -	      sta	HSRAMInitials,x
    950  f000				  -	      inx
    951  f000				  -	      iny
    952  f000				  -	      lda	(HSGameTableLo),y
    953  f000				  -	      sta	HSRAMScores,x
    954  f000				  -	      lda	temp5
    955  f000				  -	      sta	HSRAMInitials,x
    956  f000				  -	      inx
    957  f000				  -	      iny
    958  f000				  -	      cpx	#15
    959  f000				  -	      bne	loaddifficultytableScores
    960  f000				  -	      rts
    961  f000				  -
    962  f000				  -decodeHSCInitials
    963  f000				  -			; takes 2 byte initials from temp1,2 and stores 3 byte initials in temp3,4,5
    964  f000				  -			; 2 bytes are packed in the form: 22211111 22_33333
    965  f000				  -	      lda	#0
    966  f000				  -	      sta	temp4
    967  f000				  -	      lda	temp1
    968  f000				  -	      and	#%00011111
    969  f000				  -	      sta	temp3
    970  f000				  -
    971  f000				  -	      lda	temp2
    972  f000				  -	      and	#%00011111
    973  f000				  -	      sta	temp5
    974  f000				  -
    975  f000				  -	      lda	temp1
    976  f000				  -	      asl
    977  f000				  -	      rol	temp4
    978  f000				  -	      asl
    979  f000				  -	      rol	temp4
    980  f000				  -	      asl
    981  f000				  -	      rol	temp4
    982  f000				  -	      lda	temp2
    983  f000				  -	      asl
    984  f000				  -	      rol	temp4
    985  f000				  -	      asl
    986  f000				  -	      rol	temp4
    987  f000				  -	      rts
    988  f000				  -encodeHSCInitials
    989  f000				  -			; takes 3 byte initials from temp3,4,5 and stores 2 byte initials in temp1,2
    990  f000				  -			; 2 bytes are packed in the form: 22211111 22_33333
    991  f000				  -			; start with packing temp1...
    992  f000				  -	      lda	temp4
    993  f000				  -	      and	#%00011100
    994  f000				  -	      sta	temp1
    995  f000				  -	      asl	temp1
    996  f000				  -	      asl	temp1
    997  f000				  -	      asl	temp1
    998  f000				  -	      lda	temp3
    999  f000				  -	      and	#%00011111
   1000  f000				  -	      ora	temp1
   1001  f000				  -	      sta	temp1
   1002  f000				  -			; ...temp1 is now packed, on to temp2...
   1003  f000				  -	      lda	temp5
   1004  f000				  -	      asl
   1005  f000				  -	      asl
   1006  f000				  -	      ror	temp4
   1007  f000				  -	      ror
   1008  f000				  -	      ror	temp4
   1009  f000				  -	      ror
   1010  f000				  -	      sta	temp2
   1011  f000				  -	      rts
   1012  f000				  -
   1013  f000				  -findindexHSCerror
   1014  f000				  -			;the HSC is stuffed. return the bad slot flag
   1015  f000				  -	      ldy	#$ff
   1016  f000				  -	      sty	hsgameslot
   1017  f000				  -	      rts
   1018  f000				  -
   1019  f000				  -findindexHSC
   1020  f000				  -HSCGameID1 =	$1029
   1021  f000				  -HSCGameID2 =	$106E
   1022  f000				  -HSCGameDifficulty =	$10B3
   1023  f000				  -HSCGameIndex =	$10F8
   1024  f000				  -			; routine responsible for finding the game index from HSC
   1025  f000				  -			; call with x=0 to create a new table if none exist, call with x=$ff to avoid creating new tables
   1026  f000				  -			; the HS loading routine will use x=$ff, the HS saving routine will use x=0
   1027  f000				  -	      ldy	#69	; start +1 to account for the dey
   1028  f000				  -findindexHSCloop
   1029  f000				  -	      dey
   1030  f000				  -	      bmi	findindexHSCerror
   1031  f000				  -	      lda	HSCGameDifficulty,y
   1032  f000				  -	      cmp	#$7F
   1033  f000				  -	      beq	findourindexHSC
   1034  f000				  -	      cmp	gamedifficulty
   1035  f000				  -	      bne	findindexHSCloop
   1036  f000				  -	      lda	HSCGameID1,y
   1037  f000				  -	      cmp	#HSIDHI
   1038  f000				  -	      bne	findindexHSCloop
   1039  f000				  -	      lda	HSCGameID2,y
   1040  f000				  -	      cmp	#HSIDLO
   1041  f000				  -	      bne	findindexHSCloop
   1042  f000				  -findourindexHSC
   1043  f000				  -			; if we're here we found our index in the table
   1044  f000				  -			; or we found the first empty one
   1045  f000				  -	      sty	hsgameslot
   1046  f000				  -	      jsr	setupHSCGamepointer	; setup the pointer to the HS Table for this game...
   1047  f000				  -	      rts
   1048  f000				  -
   1049  f000				  -
   1050  f000				  -initializeHSCtableentry
   1051  f000				  -	      ldy	hsgameslot
   1052  f000				  -			; we need to make a new entry...
   1053  f000				  -	      lda	#HSIDHI
   1054  f000				  -	      sta	HSCGameID1,y
   1055  f000				  -	      lda	#HSIDLO
   1056  f000				  -	      sta	HSCGameID2,y
   1057  f000				  -	      lda	gamedifficulty
   1058  f000				  -	      sta	HSCGameDifficulty,y
   1059  f000				  -	      ldx	#0
   1060  f000				  -fixHSDGameDifficultylistLoop
   1061  f000				  -	      inx
   1062  f000				  -	      txa
   1063  f000				  -	      sta	HSCGameIndex,y
   1064  f000				  -	      iny
   1065  f000				  -	      cpy	#69
   1066  f000				  -	      bne	fixHSDGameDifficultylistLoop
   1067  f000				  -	      rts
   1068  f000				  -
   1069  f000				  -setupHSCGamepointer
   1070  f000				  -			; this routines sets (HSGameTableLo) pointing to the game's HS table
   1071  f000				  -	      lda	#$17
   1072  f000				  -	      sta	HSGameTableHi
   1073  f000				  -	      lda	#$FA
   1074  f000				  -	      sta	HSGameTableLo
   1075  f000				  -setupHSCGamepointerLoop
   1076  f000				  -	      lda	HSGameTableLo
   1077  f000				  -	      sec
   1078  f000				  -	      sbc	#25
   1079  f000				  -	      sta	HSGameTableLo
   1080  f000				  -	      lda	HSGameTableHi
   1081  f000				  -	      sbc	#0
   1082  f000				  -	      sta	HSGameTableHi
   1083  f000				  -	      iny
   1084  f000				  -	      cpy	#69
   1085  f000				  -	      bne	setupHSCGamepointerLoop
   1086  f000				  -	      rts
   1087  f000				  -
   1088  f000				  -loaddifficultytableAVOX
   1089  f000				  -			; routine responsible for loading the difficulty table from Avox
   1090  f000				  -			; we reuse HSC routines to format data to/from our Avox RAM buffer...
   1091  f000				  -	      lda	#>(eeprombuffer+3)
   1092  f000				  -	      sta	HSGameTableHi
   1093  f000				  -	      lda	#<(eeprombuffer+3)
   1094  f000				  -	      sta	HSGameTableLo
   1095  f000				  -
   1096  f000				  -			; the start location in EEPROM, subtract 32...
   1097  f000				  -	      lda	#$5F
   1098  f000				  -	      sta	HSVoxHi
   1099  f000				  -	      lda	#$E0
   1100  f000				  -	      sta	HSVoxLo
   1101  f000				  -	      lda	#0
   1102  f000				  -	      sta	temp1
   1103  f000				  -loaddifficultytableAVOXloop
   1104  f000				  -	      inc	temp1
   1105  f000				  -	      beq	loaddifficultytableAVOXfull
   1106  f000				  -	      clc
   1107  f000				  -	      lda	HSVoxLo
   1108  f000				  -	      adc	#32
   1109  f000				  -	      sta	HSVoxLo
   1110  f000				  -	      lda	HSVoxHi
   1111  f000				  -	      adc	#0
   1112  f000				  -	      sta	HSVoxHi
   1113  f000				  -	      lda	#3
   1114  f000				  -	      jsr	AVoxReadBytes	; read in 3 bytes, ID1,ID2,Difficulty
   1115  f000				  -	      lda	eeprombuffer
   1116  f000				  -	      cmp	#$FF
   1117  f000				  -	      beq	loaddifficultytableAVOXempty
   1118  f000				  -	      cmp	#HSIDHI
   1119  f000				  -	      bne	loaddifficultytableAVOXloop
   1120  f000				  -	      lda	eeprombuffer+1
   1121  f000				  -	      cmp	#HSIDLO
   1122  f000				  -	      bne	loaddifficultytableAVOXloop
   1123  f000				  -	      lda	eeprombuffer+2
   1124  f000				  -	      cmp	gamedifficulty
   1125  f000				  -	      bne	loaddifficultytableAVOXloop
   1126  f000				  -loaddifficultytableAVOXdone
   1127  f000				  -	      lda	#32
   1128  f000				  -	      jsr	AVoxReadBytes
   1129  f000				  -	      jsr	loaddifficultytableHSCcontinue
   1130  f000				  -	      rts
   1131  f000				  -loaddifficultytableAVOXfull
   1132  f000				  -	      lda	#0
   1133  f000				  -	      sta	hsdevice	; looks like all 255 entries are taken... disable it.
   1134  f000				  -loaddifficultytableAVOXempty
   1135  f000				  -	      jmp	cleardifficultytablemem
   1136  f000				  -	      rts
   1137  f000				  -
   1138  f000				  -cleardifficultytablemem
   1139  f000				  -	      ldy	#29
   1140  f000				  -	      lda	#0
   1141  f000				  -cleardifficultytablememloop
   1142  f000				  -	      sta	HSRAMTable,y
   1143  f000				  -	      dey
   1144  f000				  -	      bpl	cleardifficultytablememloop
   1145  f000				  -	      rts
   1146  f000				  -hiscoremoduleend
   1147  f000				  -
   1148  f000				  -	      echo	"  hiscore assembly: ",[(hiscoremoduleend-hiscoremodulestart)]d," bytes"
   1149  f000				  -
   1150  f000				  -	      ifconst	DOUBLEWIDE
   1151  f000				  -plotvaluedw
   1152  f000				  -plotdigitcount =	temp6
   1153  f000				  -	      lda	#0
   1154  f000				  -	      tay
   1155  f000				  -	      ldx	valbufend
   1156  f000				  -
   1157  f000				  -	      lda	plotdigitcount
   1158  f000				  -	      and	#1
   1159  f000				  -	      beq	pvnibble2chardw
   1160  f000				  -	      lda	#0
   1161  f000				  -	      sta	VALBUFFER,x	; just in case we skip this digit
   1162  f000				  -	      beq	pvnibble2char_skipnibbledw
   1163  f000				  -
   1164  f000				  -pvnibble2chardw
   1165  f000				  -			; high nibble...
   1166  f000				  -	      lda	(temp7),y
   1167  f000				  -	      and	#$f0
   1168  f000				  -	      lsr
   1169  f000				  -	      lsr
   1170  f000				  -	      lsr
   1171  f000				  -	      lsr
   1172  f000				  -
   1173  f000				  -	      clc
   1174  f000				  -	      adc	temp1	; add the offset to character graphics to our value
   1175  f000				  -	      sta	VALBUFFER,x
   1176  f000				  -	      inx
   1177  f000				  -	      dec	plotdigitcount
   1178  f000				  -pvnibble2char_skipnibbledw
   1179  f000				  -			; low nibble...
   1180  f000				  -	      lda	(temp7),y
   1181  f000				  -	      and	#$0f
   1182  f000				  -	      clc
   1183  f000				  -	      adc	temp1	; add the offset to character graphics to our value
   1184  f000				  -	      sta	VALBUFFER,x
   1185  f000				  -	      inx
   1186  f000				  -	      iny
   1187  f000				  -
   1188  f000				  -	      dec	plotdigitcount
   1189  f000				  -	      bne	pvnibble2chardw
   1190  f000				  -			;point to the start of our valuebuffer
   1191  f000				  -	      clc
   1192  f000				  -	      lda	#<VALBUFFER
   1193  f000				  -	      adc	valbufend
   1194  f000				  -	      sta	temp1
   1195  f000				  -	      lda	#>VALBUFFER
   1196  f000				  -	      adc	#0
   1197  f000				  -	      sta	temp2
   1198  f000				  -
   1199  f000				  -			;advance valbufend to the end of our value buffer
   1200  f000				  -	      stx	valbufend
   1201  f000				  -
   1202  f000				  -	      ifnconst	plotvalueonscreen
   1203  f000				  -	      jmp	plotcharacters
   1204  f000				  -	      else
   1205  f000				  -	      jmp	plotcharacterslive
   1206  f000				  -	      endif
   1207  f000				  -	      endif		; DOUBLEWIDE
   1208  f000				  -
   1209  f000					      endif		; HSSUPPORT
   1210  f000
------- FILE c:\Users\Steve\Desktop\2018dev\7800\7800basic\projects\lessons\lesson1_gfx_modes\lesson1_1.bas.asm
   2051  f000					      endif
   2052  f000							; Provided under the CC0 license. See the included LICENSE.txt for details.
   2053  f000
   2054  f000							;standard routimes needed for pretty much all games
   2055  f000
   2056  f000							; some definitions used with "set debug color"
   2057  f000		       00 91	   DEBUGCALC  =	$91
   2058  f000		       00 41	   DEBUGWASTE =	$41
   2059  f000		       00 c1	   DEBUGDRAW  =	$C1
   2060  f000
   2061  f000							;NMI and IRQ handlers
   2062  f000				   NMI
   2063  f000							;VISIBLEOVER is 255 while the screen is drawn, and 0 right after the visible screen is done.
   2064  f000		       48		      pha		; save A
   2065  f001		       a5 4d		      lda	visibleover
   2066  f003		       49 ff		      eor	#255
   2067  f005		       85 4d		      sta	visibleover
   2068  f007				  -	      ifconst	DEBUGINTERRUPT
   2069  f007				  -	      and	#$93
   2070  f007				  -	      sta	BACKGRND
   2071  f007					      endif
   2072  f007		       ce b2 01 	      dec	interruptindex
   2073  f00a		       d0 03		      bne	skipreallyoffvisible
   2074  f00c		       4c 5e f0 	      jmp	reallyoffvisible
   2075  f00f				   skipreallyoffvisible
   2076  f00f		       a5 4d		      lda	visibleover
   2077  f011		       f0 49		      beq	skiptopscreenroutine
   2078  f013		       8a		      txa		; save X+Y
   2079  f014		       48		      pha
   2080  f015		       98		      tya
   2081  f016		       48		      pha
   2082  f017		       d8		      cld
   2083  f018					      ifconst	.topscreenroutine
   2084  f018		       20 f2 45 	      jsr	.topscreenroutine
   2085  f01b					      endif
   2086  f01b		       ee 3e 21 	      inc	frameslost	; this is balanced with a "dec frameslost" when drawscreen is called.
   2087  f01e
   2088  f01e							; ** Other important routines that need to regularly run, and can run onscreen.
   2089  f01e							; ** Atarivox can't go here, because Maria might interrupt it while it's bit-banging.
   2090  f01e
   2091  f01e				   longcontrollerreads		; ** controllers that take a lot of time to read. We use much of the visible screen here.
   2092  f01e				  -	      ifconst	LONGCONTROLLERREAD
   2093  f01e				  -	      lda	#$38
   2094  f01e				  -	      ifconst	LONGDEBUG
   2095  f01e				  -	      sta	BACKGRND
   2096  f01e				  -	      endif
   2097  f01e				  -	      sta	inttemp6
   2098  f01e				  -
   2099  f01e				  -longreadlineloop
   2100  f01e				  -	      ldx	#1
   2101  f01e				  -longreadloop
   2102  f01e				  -	      ldy	port0control,x
   2103  f01e				  -	      lda	longreadroutinelo,y
   2104  f01e				  -	      sta	inttemp3
   2105  f01e				  -	      lda	longreadroutinehi,y
   2106  f01e				  -	      sta	inttemp4
   2107  f01e				  -	      ora	inttemp3
   2108  f01e				  -	      beq	longreadloopreturn
   2109  f01e				  -	      jmp	(inttemp3)
   2110  f01e				  -longreadloopreturn
   2111  f01e				  -	      dex
   2112  f01e				  -	      bpl	longreadloop
   2113  f01e				  -	      dec	inttemp6
   2114  f01e				  -	      sta	WSYNC
   2115  f01e				  -	      bne	longreadlineloop
   2116  f01e				  -
   2117  f01e				  -	      ifconst	LONGDEBUG
   2118  f01e				  -	      lda	#$00
   2119  f01e				  -	      sta	BACKGRND
   2120  f01e				  -	      endif
   2121  f01e					      endif		; LONGCONTROLLERREAD
   2122  f01e
   2123  f01e		       20 d0 f1 	      jsr	servicesfxchannels
   2124  f021				  -	      ifconst	MUSICTRACKER
   2125  f021				  -	      jsr	servicesong
   2126  f021					      endif		; MUSICTRACKER
   2127  f021
   2128  f021		       ee a4 01 	      inc	framecounter
   2129  f024		       ad a4 01 	      lda	framecounter
   2130  f027		       29 3f		      and	#63
   2131  f029		       d0 08		      bne	skipcountdownseconds
   2132  f02b		       ad a5 01 	      lda	countdownseconds
   2133  f02e		       f0 03		      beq	skipcountdownseconds
   2134  f030		       ce a5 01 	      dec	countdownseconds
   2135  f033				   skipcountdownseconds
   2136  f033
   2137  f033		       a2 01		      ldx	#1
   2138  f035				   buttonreadloop
   2139  f035		       8a		      txa
   2140  f036		       48		      pha
   2141  f037		       bc e2 01 	      ldy	port0control,x
   2142  f03a		       b9 b3 f1 	      lda	buttonhandlerlo,y
   2143  f03d		       85 da		      sta	inttemp3
   2144  f03f		       b9 a8 f1 	      lda	buttonhandlerhi,y
   2145  f042		       85 db		      sta	inttemp4
   2146  f044		       05 da		      ora	inttemp3
   2147  f046		       f0 03		      beq	buttonreadloopreturn
   2148  f048		       6c da 00 	      jmp	(inttemp3)
   2149  f04b				   buttonreadloopreturn
   2150  f04b		       68		      pla
   2151  f04c		       aa		      tax
   2152  f04d		       ca		      dex
   2153  f04e		       10 e5		      bpl	buttonreadloop
   2154  f050
   2155  f050				  -	      ifconst	DRIVINGSUPPORT
   2156  f050				  -	      jsr	drivingupdate
   2157  f050					      endif		; DRIVINGSUPPORT
   2158  f050				  -	      ifconst	KEYPADSUPPORT
   2159  f050				  -	      jsr	keypadrowselect
   2160  f050					      endif		; KEYPADSUPPORT
   2161  f050
   2162  f050
   2163  f050		       ad b5 01 	      lda	doublebufferminimumframeindex
   2164  f053		       f0 03		      beq	skipdoublebufferminimumframeindexadjust
   2165  f055		       ce b5 01 	      dec	doublebufferminimumframeindex
   2166  f058				   skipdoublebufferminimumframeindexadjust
   2167  f058
   2168  f058		       68		      pla
   2169  f059		       a8		      tay
   2170  f05a		       68		      pla
   2171  f05b		       aa		      tax
   2172  f05c				   skiptopscreenroutine
   2173  f05c		       68		      pla
   2174  f05d				   IRQ
   2175  f05d		       40		      RTI
   2176  f05e
   2177  f05e				  -	      ifconst	LONGCONTROLLERREAD
   2178  f05e				  -longreadroutinelo
   2179  f05e				  -			;	  NONE		PROLINE        LIGHTGUN      PADDLE
   2180  f05e				  -	      .byte	0, 0, 0, 0
   2181  f05e				  -			;	  TRKBALL	VCS STICK      DRIVING	     KEYPAD
   2182  f05e				  -	      .byte	0, 0, 0, 0
   2183  f05e				  -			;	  STMOUSE	AMOUSE	       ATARIVOX
   2184  f05e				  -	      .byte	<mouseupdate, <mouseupdate, 0
   2185  f05e				  -
   2186  f05e				  -longreadroutinehi
   2187  f05e				  -			;	  NONE		PROLINE        LIGHTGUN      PADDLE
   2188  f05e				  -	      .byte	0, 0, 0, 0
   2189  f05e				  -			;	  TRKBALL	VCS STICK      DRIVING	     KEYPAD
   2190  f05e				  -	      .byte	0, 0, 0, 0
   2191  f05e				  -			;	  STMOUSE	AMOUSE	       ATARIVOX
   2192  f05e				  -	      .byte	>mouseupdate, >mouseupdate, 0
   2193  f05e				  -nullroutine
   2194  f05e				  -	      rts
   2195  f05e					      endif		; LONGCONTROLLERREAD
   2196  f05e
   2197  f05e				   reallyoffvisible
   2198  f05e		       85 24		      sta	WSYNC
   2199  f060
   2200  f060		       a9 00		      lda	#0
   2201  f062		       85 4d		      sta	visibleover
   2202  f064				  -	      ifconst	DEBUGINTERRUPT
   2203  f064				  -	      sta	BACKGRND
   2204  f064					      endif
   2205  f064
   2206  f064		       a9 03		      lda	#3
   2207  f066		       8d b2 01 	      sta	interruptindex
   2208  f069
   2209  f069		       8a		      txa
   2210  f06a		       48		      pha
   2211  f06b		       98		      tya
   2212  f06c		       48		      pha
   2213  f06d		       d8		      cld
   2214  f06e
   2215  f06e		       20 4a f1 	      jsr	uninterruptableroutines
   2216  f071
   2217  f071				  -	      ifconst	.userinterrupt
   2218  f071				  -	      jsr	.userinterrupt
   2219  f071					      endif
   2220  f071
   2221  f071				  -	      ifconst	KEYPADSUPPORT
   2222  f071				  -	      jsr	keypadcolumnread
   2223  f071					      endif
   2224  f071
   2225  f071		       68		      pla
   2226  f072		       a8		      tay
   2227  f073		       68		      pla
   2228  f074		       aa		      tax
   2229  f075		       68		      pla
   2230  f076		       40		      RTI
   2231  f077
   2232  f077				   clearscreen
   2233  f077		       a2 17		      ldx	#(WZONECOUNT-1)
   2234  f079		       a9 00		      lda	#0
   2235  f07b				   clearscreenloop
   2236  f07b		       95 65		      sta	dlend,x
   2237  f07d		       ca		      dex
   2238  f07e		       10 fb		      bpl	clearscreenloop
   2239  f080		       a9 00		      lda	#0
   2240  f082		       8d ad 01 	      sta	valbufend	; clear the bcd value buffer
   2241  f085		       8d ae 01 	      sta	valbufendsave
   2242  f088		       60		      rts
   2243  f089
   2244  f089				   restorescreen
   2245  f089		       a2 17		      ldx	#(WZONECOUNT-1)
   2246  f08b		       a9 00		      lda	#0
   2247  f08d				   restorescreenloop
   2248  f08d		       b5 82		      lda	dlendsave,x
   2249  f08f		       95 65		      sta	dlend,x
   2250  f091		       ca		      dex
   2251  f092		       10 f9		      bpl	restorescreenloop
   2252  f094		       ad ae 01 	      lda	valbufendsave
   2253  f097		       8d ad 01 	      sta	valbufend
   2254  f09a		       60		      rts
   2255  f09b
   2256  f09b				   savescreen
   2257  f09b		       a2 17		      ldx	#(WZONECOUNT-1)
   2258  f09d				   savescreenloop
   2259  f09d		       b5 65		      lda	dlend,x
   2260  f09f		       95 82		      sta	dlendsave,x
   2261  f0a1		       ca		      dex
   2262  f0a2		       10 f9		      bpl	savescreenloop
   2263  f0a4		       ad ad 01 	      lda	valbufend
   2264  f0a7		       8d ae 01 	      sta	valbufendsave
   2265  f0aa				  -	      ifconst	DOUBLEBUFFER
   2266  f0aa				  -	      lda	doublebufferstate
   2267  f0aa				  -	      beq	savescreenrts
   2268  f0aa				  -	      lda	#1
   2269  f0aa				  -	      sta	doublebufferbufferdirty
   2270  f0aa				  -savescreenrts
   2271  f0aa					      endif		; DOUBLEBUFFER
   2272  f0aa		       60		      rts
   2273  f0ab
   2274  f0ab				   drawscreen
   2275  f0ab
   2276  f0ab		       a9 00		      lda	#0
   2277  f0ad		       85 42		      sta	temp1	; not B&W if we're here...
   2278  f0af
   2279  f0af				   drawscreenwait
   2280  f0af		       a5 4d		      lda	visibleover
   2281  f0b1		       d0 fc		      bne	drawscreenwait	; make sure the visible screen isn't being drawn
   2282  f0b3
   2283  f0b3							;restore some registers in case the game changed them mid-screen...
   2284  f0b3		       ad 07 21 	      lda	sCTRL
   2285  f0b6		       05 42		      ora	temp1
   2286  f0b8		       85 3c		      sta	CTRL
   2287  f0ba		       ad 0b 21 	      lda	sCHARBASE
   2288  f0bd		       85 34		      sta	CHARBASE
   2289  f0bf
   2290  f0bf							;ensure all of the display list is terminated...
   2291  f0bf		       20 30 f1 	      jsr	terminatedisplaylist
   2292  f0c2
   2293  f0c2					      ifnconst	pauseroutineoff
   2294  f0c2		       20 cd f0 	      jsr	pauseroutine
   2295  f0c5					      endif		; pauseroutineoff
   2296  f0c5
   2297  f0c5							; Make sure the visible screen has *started* before we exit. That way we can rely on drawscreen
   2298  f0c5							; delaying a full frame, but still allowing time for basic calculations.
   2299  f0c5				   visiblescreenstartedwait
   2300  f0c5		       a5 4d		      lda	visibleover
   2301  f0c7		       f0 fc		      beq	visiblescreenstartedwait
   2302  f0c9				   visiblescreenstartedwaitdone
   2303  f0c9		       ce 3e 21 	      dec	frameslost	; ; this gets balanced with an "inc frameslost" by an NMI at the top of the screen
   2304  f0cc		       60		      rts
   2305  f0cd
   2306  f0cd					      ifnconst	pauseroutineoff
   2307  f0cd							; check to see if pause was pressed and released
   2308  f0cd				   pauseroutine
   2309  f0cd		       ad b6 01 	      lda	pausedisable
   2310  f0d0		       d0 4e		      bne	leavepauseroutine
   2311  f0d2		       a9 08		      lda	#8
   2312  f0d4		       2c 82 02 	      bit	SWCHB
   2313  f0d7		       f0 29		      beq	pausepressed
   2314  f0d9
   2315  f0d9					      ifnconst	SOFTRESETASPAUSEOFF
   2316  f0d9					      ifnconst	MOUSESUPPORT
   2317  f0d9		       ad 80 02 	      lda	SWCHA	; then check the soft "RESET" joysick code...
   2318  f0dc		       29 70		      and	#%01110000	; _LDU
   2319  f0de		       f0 22		      beq	pausepressed
   2320  f0e0					      endif
   2321  f0e0					      endif
   2322  f0e0
   2323  f0e0							;pause isn't pressed
   2324  f0e0		       a9 00		      lda	#0
   2325  f0e2		       8d ac 01 	      sta	pausebuttonflag	; clear pause hold state in case its set
   2326  f0e5
   2327  f0e5							;check if we're in an already paused state
   2328  f0e5		       ad 00 21 	      lda	pausestate
   2329  f0e8		       f0 36		      beq	leavepauseroutine	; nope, leave
   2330  f0ea
   2331  f0ea		       c9 01		      cmp	#1	; last frame was the start of pausing
   2332  f0ec		       f0 2b		      beq	enterpausestate2	; move from state 1 to 2
   2333  f0ee
   2334  f0ee		       c9 02		      cmp	#2
   2335  f0f0		       f0 34		      beq	carryonpausing
   2336  f0f2
   2337  f0f2							;pausestate must be >2, which means we're ending an unpause 
   2338  f0f2		       a9 00		      lda	#0
   2339  f0f4		       8d ac 01 	      sta	pausebuttonflag
   2340  f0f7		       8d 00 21 	      sta	pausestate
   2341  f0fa		       ad 07 21 	      lda	sCTRL
   2342  f0fd		       85 3c		      sta	CTRL
   2343  f0ff		       4c 20 f1 	      jmp	leavepauseroutine
   2344  f102
   2345  f102				   pausepressed
   2346  f102							;pause is pressed
   2347  f102		       ad ac 01 	      lda	pausebuttonflag
   2348  f105		       c9 ff		      cmp	#$ff
   2349  f107		       f0 1d		      beq	carryonpausing
   2350  f109
   2351  f109							;its a new press, increment the state
   2352  f109		       ee 00 21 	      inc	pausestate
   2353  f10c
   2354  f10c							;silence volume at the start and end of pausing
   2355  f10c		       a9 00		      lda	#0
   2356  f10e		       85 19		      sta	AUDV0
   2357  f110		       85 1a		      sta	AUDV1
   2358  f112
   2359  f112				  -	      ifconst	pokeysupport
   2360  f112				  -	      ldy	#7
   2361  f112				  -pausesilencepokeyaudioloop
   2362  f112				  -	      sta	(pokeybase),y
   2363  f112				  -	      dey
   2364  f112				  -	      bpl	pausesilencepokeyaudioloop
   2365  f112					      endif		; pokeysupport
   2366  f112
   2367  f112		       a9 ff		      lda	#$ff
   2368  f114		       8d ac 01 	      sta	pausebuttonflag
   2369  f117		       d0 0d		      bne	carryonpausing
   2370  f119
   2371  f119				   enterpausestate2
   2372  f119		       a9 02		      lda	#2
   2373  f11b		       8d 00 21 	      sta	pausestate
   2374  f11e		       d0 06		      bne	carryonpausing
   2375  f120				   leavepauseroutine
   2376  f120		       ad 07 21 	      lda	sCTRL
   2377  f123		       85 3c		      sta	CTRL
   2378  f125		       60		      rts
   2379  f126				   carryonpausing
   2380  f126				  -	      ifconst	.pause
   2381  f126				  -	      jsr	.pause
   2382  f126					      endif		; .pause
   2383  f126		       ad 07 21 	      lda	sCTRL
   2384  f129		       09 80		      ora	#%10000000	; turn off colorburst during pause...
   2385  f12b		       85 3c		      sta	CTRL
   2386  f12d		       4c cd f0 	      jmp	pauseroutine
   2387  f130					      endif		; pauseroutineoff
   2388  f130
   2389  f130
   2390  f130				  -	      ifconst	DOUBLEBUFFER
   2391  f130				  -skipterminatedisplaylistreturn
   2392  f130				  -	      rts
   2393  f130					      endif		; DOUBLEBUFFER
   2394  f130				   terminatedisplaylist
   2395  f130				  -	      ifconst	DOUBLEBUFFER
   2396  f130				  -	      lda	doublebufferstate
   2397  f130				  -	      bne	skipterminatedisplaylistreturn	; double-buffering runs it's own DL termination code
   2398  f130					      endif		; DOUBLEBUFFER
   2399  f130				   terminatedisplaybuffer
   2400  f130							;add DL end entry on each DL
   2401  f130		       a2 17		      ldx	#(WZONECOUNT-1)
   2402  f132				   dlendloop
   2403  f132		       bd 50 f6 	      lda	DLPOINTL,x
   2404  f135				  -	      ifconst	DOUBLEBUFFER
   2405  f135				  -	      clc
   2406  f135				  -	      adc	doublebufferdloffset
   2407  f135					      endif		; DOUBLEBUFFER
   2408  f135		       85 63		      sta	dlpnt
   2409  f137		       bd 38 f6 	      lda	DLPOINTH,x
   2410  f13a				  -	      ifconst	DOUBLEBUFFER
   2411  f13a				  -	      adc	#0
   2412  f13a					      endif		; DOUBLEBUFFER
   2413  f13a		       85 64		      sta	dlpnt+1
   2414  f13c		       b4 65		      ldy	dlend,x
   2415  f13e		       a9 00		      lda	#$00
   2416  f140				   dlendmoreloops
   2417  f140		       c8		      iny
   2418  f141		       91 63		      sta	(dlpnt),y
   2419  f143				  -	      ifconst	FRAMESKIPGLITCHFIXWEAK
   2420  f143				  -	      cpy	#DLLASTOBJ+1
   2421  f143				  -	      beq	dlendthiszonedone
   2422  f143				  -	      iny
   2423  f143				  -	      iny
   2424  f143				  -	      iny
   2425  f143				  -	      iny
   2426  f143				  -	      iny
   2427  f143				  -	      sta	(dlpnt),y
   2428  f143				  -dlendthiszonedone
   2429  f143					      endif	FRAMESKIPGLITCHFIXWEAK
   2430  f143				  -	      ifconst	FRAMESKIPGLITCHFIX
   2431  f143				  -	      iny
   2432  f143				  -	      iny
   2433  f143				  -	      iny
   2434  f143				  -	      iny
   2435  f143				  -	      cpy	#DLLASTOBJ-1
   2436  f143				  -	      bcc	dlendmoreloops
   2437  f143					      endif		; FRAMESKIPGLITCHFIX
   2438  f143		       ca		      dex
   2439  f144		       10 ec		      bpl	dlendloop
   2440  f146
   2441  f146					      ifnconst	pauseroutineoff
   2442  f146		       20 cd f0 	      jsr	pauseroutine
   2443  f149					      endif		; pauseroutineoff
   2444  f149		       60		      rts
   2445  f14a
   2446  f14a				   uninterruptableroutines
   2447  f14a							; this is for routines that must happen off the visible screen, each frame.
   2448  f14a
   2449  f14a				  -	      ifconst	AVOXVOICE
   2450  f14a				  -	      jsr	serviceatarivoxqueue
   2451  f14a					      endif
   2452  f14a
   2453  f14a		       a9 00		      lda	#0
   2454  f14c		       8d e1 01 	      sta	palfastframe
   2455  f14f		       ad 09 21 	      lda	paldetected
   2456  f152		       f0 10		      beq	skippalframeadjusting
   2457  f154							; ** PAL console is detected. we increment palframes to accurately count 5 frames,
   2458  f154		       ae e0 01 	      ldx	palframes
   2459  f157		       e8		      inx
   2460  f158		       e0 05		      cpx	#5
   2461  f15a		       d0 05		      bne	palframeskipdone
   2462  f15c		       ee e1 01 	      inc	palfastframe
   2463  f15f		       a2 00		      ldx	#0
   2464  f161				   palframeskipdone
   2465  f161		       8e e0 01 	      stx	palframes
   2466  f164				   skippalframeadjusting
   2467  f164
   2468  f164				  -	      ifconst	MUSICTRACKER
   2469  f164				  -			; We normally run the servicesong routine from the top-screen interrupt, but if it
   2470  f164				  -			; happens to interrupt the scheduling of a sound effect in the game code, we skip it.
   2471  f164				  -			; If that happens, we try again here. Chances are very small we'll run into the same
   2472  f164				  -			; problem twice, and if we do, we just drop a musical note or two.
   2473  f164				  -	      lda	sfxschedulemissed
   2474  f164				  -	      beq	servicesongwasnotmissed
   2475  f164				  -	      jsr	servicesong
   2476  f164				  -servicesongwasnotmissed
   2477  f164					      endif		; MUSICTRACKER
   2478  f164
   2479  f164		       60		      rts
   2480  f165
   2481  f165				   serviceatarivoxqueue
   2482  f165				  -	      ifconst	AVOXVOICE
   2483  f165				  -	      lda	voxlock
   2484  f165				  -	      bne	skipvoxprocessing	; the vox is in the middle of speech address update
   2485  f165				  -skipvoxqueuesizedec
   2486  f165				  -	      jmp	processavoxvoice
   2487  f165				  -skipvoxprocessing
   2488  f165				  -	      rts
   2489  f165				  -
   2490  f165				  -processavoxvoice
   2491  f165				  -	      lda	avoxenable
   2492  f165				  -	      bne	avoxfixport
   2493  f165				  -	      SPKOUT	tempavox
   2494  f165				  -	      rts
   2495  f165				  -avoxfixport
   2496  f165				  -	      lda	#0	; restore the port to all bits as inputs...
   2497  f165				  -	      sta	CTLSWA
   2498  f165				  -	      rts
   2499  f165				  -silenceavoxvoice
   2500  f165				  -	      SPEAK	avoxsilentdata
   2501  f165				  -	      rts
   2502  f165				  -avoxsilentdata
   2503  f165				  -	      .byte	31,255
   2504  f165					      else
   2505  f165		       60		      rts
   2506  f166					      endif		; AVOXVOICE
   2507  f166
   2508  f166				   joybuttonhandler
   2509  f166		       8a		      txa
   2510  f167		       0a		      asl
   2511  f168		       a8		      tay
   2512  f169		       b9 08 00 	      lda	INPT0,y
   2513  f16c		       4a		      lsr
   2514  f16d		       9d 02 21 	      sta	sINPT1,x
   2515  f170		       b9 09 00 	      lda	INPT1,y
   2516  f173		       29 80		      and	#%10000000
   2517  f175		       1d 02 21 	      ora	sINPT1,x
   2518  f178							;eor genesisdetected0,x ; invert INPT1 if genesis is detected
   2519  f178		       9d 02 21 	      sta	sINPT1,x
   2520  f17b
   2521  f17b		       b5 0c		      lda	INPT4,x
   2522  f17d		       30 19		      bmi	.skip1bjoyfirecheck
   2523  f17f							;one button joystick is down
   2524  f17f		       49 80		      eor	#%10000000
   2525  f181		       9d 02 21 	      sta	sINPT1,x
   2526  f184
   2527  f184		       ad b1 01 	      lda	joybuttonmode
   2528  f187		       3d 9b f1 	      and	twobuttonmask,x
   2529  f18a		       f0 0c		      beq	.skip1bjoyfirecheck
   2530  f18c		       ad b1 01 	      lda	joybuttonmode
   2531  f18f		       1d 9b f1 	      ora	twobuttonmask,x
   2532  f192		       8d b1 01 	      sta	joybuttonmode
   2533  f195		       8d 82 02 	      sta	SWCHB
   2534  f198				   .skip1bjoyfirecheck
   2535  f198		       4c 4b f0 	      jmp	buttonreadloopreturn
   2536  f19b
   2537  f19b				   twobuttonmask
   2538  f19b		       04 10		      .byte.b	%00000100,%00010000
   2539  f19d
   2540  f19d				   gunbuttonhandler		; outside of the conditional, so our button handler LUT is valid
   2541  f19d				  -	      ifconst	LIGHTGUNSUPPORT
   2542  f19d				  -	      cpx	#0
   2543  f19d				  -	      bne	secondportgunhandler
   2544  f19d				  -firstportgunhandler
   2545  f19d				  -	      lda	SWCHA
   2546  f19d				  -	      asl
   2547  f19d				  -	      asl
   2548  f19d				  -	      asl		; shift D4 to D7
   2549  f19d				  -	      and	#%10000000
   2550  f19d				  -	      eor	#%10000000
   2551  f19d				  -	      sta	sINPT1
   2552  f19d				  -	      jmp	buttonreadloopreturn
   2553  f19d				  -secondportgunhandler
   2554  f19d				  -	      lda	SWCHA
   2555  f19d				  -	      lsr		; shift D0 into carry
   2556  f19d				  -	      lsr		; shift carry into D7
   2557  f19d				  -	      and	#%10000000
   2558  f19d				  -	      eor	#%10000000
   2559  f19d				  -	      sta	sINPT3
   2560  f19d				  -	      jmp	buttonreadloopreturn
   2561  f19d					      endif		; LIGHTGUNSUPPORT
   2562  f19d
   2563  f19d				   controlsusing2buttoncode
   2564  f19d		       00		      .byte.b	0	; 00=no controller plugged in
   2565  f19e		       01		      .byte.b	1	; 01=proline joystick
   2566  f19f		       00		      .byte.b	0	; 02=lightgun
   2567  f1a0		       00		      .byte.b	0	; 03=paddle
   2568  f1a1		       01		      .byte.b	1	; 04=trakball
   2569  f1a2		       01		      .byte.b	1	; 05=vcs joystick
   2570  f1a3		       01		      .byte.b	1	; 06=driving control
   2571  f1a4		       00		      .byte.b	0	; 07=keypad control
   2572  f1a5		       00		      .byte.b	0	; 08=st mouse/cx80
   2573  f1a6		       00		      .byte.b	0	; 09=amiga mouse
   2574  f1a7		       01		      .byte.b	1	; 10=atarivox
   2575  f1a8
   2576  f1a8				   buttonhandlerhi
   2577  f1a8		       00		      .byte.b	0	; 00=no controller plugged in
   2578  f1a9		       f1		      .byte.b	>joybuttonhandler	; 01=proline joystick
   2579  f1aa		       f1		      .byte.b	>gunbuttonhandler	; 02=lightgun
   2580  f1ab		       00		      .byte.b	0	; 03=paddle [not implemented yet]
   2581  f1ac		       f1		      .byte.b	>joybuttonhandler	; 04=trakball
   2582  f1ad		       f1		      .byte.b	>joybuttonhandler	; 05=vcs joystick
   2583  f1ae		       f1		      .byte.b	>joybuttonhandler	; 06=driving control
   2584  f1af		       00		      .byte.b	0	; 07=keypad
   2585  f1b0		       f5		      .byte.b	>mousebuttonhandler	; 08=st mouse
   2586  f1b1		       f5		      .byte.b	>mousebuttonhandler	; 09=amiga mouse
   2587  f1b2		       f1		      .byte.b	>joybuttonhandler	; 10=atarivox
   2588  f1b3				   buttonhandlerlo
   2589  f1b3		       00		      .byte.b	0	; 00=no controller plugged in
   2590  f1b4		       66		      .byte.b	<joybuttonhandler	; 01=proline joystick
   2591  f1b5		       9d		      .byte.b	<gunbuttonhandler	; 02=lightgun 
   2592  f1b6		       00		      .byte.b	0	; 03=paddle [not implemented yet]
   2593  f1b7		       66		      .byte.b	<joybuttonhandler	; 04=trakball
   2594  f1b8		       66		      .byte.b	<joybuttonhandler	; 05=vcs joystick
   2595  f1b9		       66		      .byte.b	<joybuttonhandler	; 06=driving control
   2596  f1ba		       00		      .byte.b	0	; 07=keypad
   2597  f1bb		       49		      .byte.b	<mousebuttonhandler	; 08=st mouse
   2598  f1bc		       49		      .byte.b	<mousebuttonhandler	; 09=amiga mouse
   2599  f1bd		       66		      .byte.b	<joybuttonhandler	; 10=atarivox
   2600  f1be
   2601  f1be				   drawwait
   2602  f1be		       a5 4d		      lda	visibleover
   2603  f1c0		       d0 fc		      bne	drawwait	; make sure the visible screen isn't being drawn
   2604  f1c2		       60		      rts
   2605  f1c3
   2606  f1c3				   mutetia
   2607  f1c3		       a9 00		      lda	#0
   2608  f1c5		       a2 03		      ldx	#3
   2609  f1c7				   mutetialoop
   2610  f1c7		       95 4e		      sta	sfx1pointlo,x
   2611  f1c9		       95 17		      sta	AUDF0,x
   2612  f1cb		       ca		      dex
   2613  f1cc		       10 f9		      bpl	mutetialoop
   2614  f1ce		       60		      rts
   2615  f1cf
   2616  f1cf				   servicesfxchannelsdone
   2617  f1cf					      ifnconst	pokeysupport
   2618  f1cf		       60		      rts
   2619  f1d0				  -	      else
   2620  f1d0				  -	      jmp	checkpokeyplaying
   2621  f1d0					      endif
   2622  f1d0				   servicesfxchannels
   2623  f1d0		       a2 ff		      ldx	#255
   2624  f1d2				   servicesfxchannelsloop
   2625  f1d2		       e8		      inx
   2626  f1d3					      ifnconst	TIASFXMONO
   2627  f1d3		       e0 02		      cpx	#2
   2628  f1d5				  -	      else
   2629  f1d5				  -	      cpx	#1
   2630  f1d5					      endif
   2631  f1d5		       f0 f8		      beq	servicesfxchannelsdone
   2632  f1d7
   2633  f1d7		       b5 4e		      lda	sfx1pointlo,x
   2634  f1d9		       85 dc		      sta	inttemp5
   2635  f1db		       15 50		      ora	sfx1pointhi,x
   2636  f1dd		       f0 f3		      beq	servicesfxchannelsloop
   2637  f1df		       b5 50		      lda	sfx1pointhi,x
   2638  f1e1		       85 dd		      sta	inttemp6
   2639  f1e3
   2640  f1e3		       b5 58		      lda	sfx1tick,x
   2641  f1e5		       f0 05		      beq	servicesfx_cont1	; this chunk is over, load the next!
   2642  f1e7		       d6 58		      dec	sfx1tick,x	; frame countdown is non-zero, subtract one
   2643  f1e9		       4c d2 f1 	      jmp	servicesfxchannelsloop
   2644  f1ec				   servicesfx_cont1
   2645  f1ec
   2646  f1ec		       b5 56		      lda	sfx1frames,x	; set the frame countdown for this sound chunk
   2647  f1ee		       95 58		      sta	sfx1tick,x
   2648  f1f0
   2649  f1f0		       b5 52		      lda	sfx1priority,x	; decrease the sound's priority if its non-zero
   2650  f1f2		       f0 02		      beq	servicesfx_cont2
   2651  f1f4		       d6 52		      dec	sfx1priority,x
   2652  f1f6				   servicesfx_cont2
   2653  f1f6
   2654  f1f6		       a0 00		      ldy	#0	; play the sound
   2655  f1f8		       b1 dc		      lda	(inttemp5),y
   2656  f1fa		       85 d8		      sta	inttemp1
   2657  f1fc
   2658  f1fc				  -	      ifconst	MUSICTRACKER
   2659  f1fc				  -	      lda	sfx1notedata,x
   2660  f1fc				  -	      beq	exitmusictracker	; exit if this isn't a pitched instrument
   2661  f1fc				  -	      ldy	#0
   2662  f1fc				  -	      sty	inttemp2
   2663  f1fc				  -	      clc
   2664  f1fc				  -	      adc	(inttemp5),y
   2665  f1fc				  -	      asl		; x2
   2666  f1fc				  -	      tay
   2667  f1fc				  -	      lda	tiatrackeroctavenotes,y
   2668  f1fc				  -	      sta	AUDC0,x
   2669  f1fc				  -	      iny
   2670  f1fc				  -	      lda	tiatrackeroctavenotes,y
   2671  f1fc				  -	      sta	AUDF0,x
   2672  f1fc				  -	      ldy	#1
   2673  f1fc				  -	      jmp	sfxvolumeentrypt
   2674  f1fc				  -exitmusictracker
   2675  f1fc				  -	      lda	inttemp1
   2676  f1fc					      endif		; MUSICTRACKER
   2677  f1fc
   2678  f1fc		       18		      clc
   2679  f1fd		       75 54		      adc	sfx1poffset,x	; take into account any pitch modification
   2680  f1ff		       95 17		      sta	AUDF0,x
   2681  f201		       c8		      iny
   2682  f202		       b1 dc		      lda	(inttemp5),y
   2683  f204		       95 15		      sta	AUDC0,x
   2684  f206		       85 d9		      sta	inttemp2
   2685  f208		       c8		      iny
   2686  f209				   sfxvolumeentrypt
   2687  f209		       b1 dc		      lda	(inttemp5),y
   2688  f20b		       95 19		      sta	AUDV0,x
   2689  f20d		       c9 10		      cmp	#$10
   2690  f20f		       b0 19		      bcs	sfxsoundloop	; AUDV0>$0F means the sound is looped while priority is active
   2691  f211
   2692  f211		       05 d9		      ora	inttemp2
   2693  f213		       05 d8		      ora	inttemp1	; check if F|C|V=0
   2694  f215		       f0 23		      beq	zerosfx	; if so, we're at the end of the sound.
   2695  f217
   2696  f217				   advancesfxpointer
   2697  f217							; advance the pointer to the next sound chunk
   2698  f217		       c8		      iny
   2699  f218		       84 da		      sty	inttemp3
   2700  f21a		       18		      clc
   2701  f21b		       b5 4e		      lda	sfx1pointlo,x
   2702  f21d		       65 da		      adc	inttemp3
   2703  f21f		       95 4e		      sta	sfx1pointlo,x
   2704  f221		       b5 50		      lda	sfx1pointhi,x
   2705  f223		       69 00		      adc	#0
   2706  f225		       95 50		      sta	sfx1pointhi,x
   2707  f227		       4c d2 f1 	      jmp	servicesfxchannelsloop
   2708  f22a
   2709  f22a				   sfxsoundloop
   2710  f22a		       48		      pha
   2711  f22b		       b5 52		      lda	sfx1priority,x
   2712  f22d		       d0 04		      bne	sfxsoundloop_carryon
   2713  f22f		       68		      pla		; fix the stack before we go
   2714  f230		       4c 17 f2 	      jmp	advancesfxpointer
   2715  f233				   sfxsoundloop_carryon
   2716  f233		       68		      pla
   2717  f234		       29 f0		      and	#$F0
   2718  f236		       4a		      lsr
   2719  f237		       4a		      lsr
   2720  f238		       4a		      lsr
   2721  f239		       4a		      lsr
   2722  f23a
   2723  f23a				   zerosfx
   2724  f23a		       95 4e		      sta	sfx1pointlo,x
   2725  f23c		       95 50		      sta	sfx1pointhi,x
   2726  f23e		       95 52		      sta	sfx1priority,x
   2727  f240		       4c d2 f1 	      jmp	servicesfxchannelsloop
   2728  f243
   2729  f243
   2730  f243				   schedulesfx
   2731  f243							; called with sfxinstrumentlo=<data sfxinstrumenthi=>data sfxpitchoffset=pitch-offset sfxnoteindex=note index
   2732  f243		       a0 00		      ldy	#0
   2733  f245		       b1 e0		      lda	(sfxinstrumentlo),y
   2734  f247				  -	      ifconst	pokeysupport
   2735  f247				  -	      cmp	#$20	; POKEY?
   2736  f247				  -	      bne	scheduletiasfx
   2737  f247				  -	      jmp	schedulepokeysfx
   2738  f247					      endif
   2739  f247				   scheduletiasfx
   2740  f247							;cmp #$10 ; TIA?
   2741  f247							;beq continuescheduletiasfx
   2742  f247							; rts ; unhandled!!! 
   2743  f247				   continuescheduletiasfx
   2744  f247					      ifnconst	TIASFXMONO
   2745  f247		       a5 4e		      lda	sfx1pointlo
   2746  f249		       05 50		      ora	sfx1pointhi
   2747  f24b		       f0 13		      beq	schedulesfx1	;if channel 1 is idle, use it
   2748  f24d		       a5 4f		      lda	sfx2pointlo
   2749  f24f		       05 51		      ora	sfx2pointhi
   2750  f251		       f0 11		      beq	schedulesfx2	;if channel 2 is idle, use it
   2751  f253							; Both channels are scheduled. 
   2752  f253		       a0 01		      ldy	#1
   2753  f255		       b1 e0		      lda	(sfxinstrumentlo),y
   2754  f257		       d0 01		      bne	interruptsfx
   2755  f259		       60		      rts		; the new sound has 0 priority and both channels are busy. Skip playing it.
   2756  f25a				   interruptsfx
   2757  f25a							;Compare which active sound has a lower priority. We'll interrupt the lower one.
   2758  f25a		       a5 52		      lda	sfx1priority
   2759  f25c		       c5 53		      cmp	sfx2priority
   2760  f25e		       b0 04		      bcs	schedulesfx2
   2761  f260					      endif		; !TIASFXMONO
   2762  f260
   2763  f260				   schedulesfx1
   2764  f260		       a2 00		      ldx	#0	; channel 1
   2765  f262					      ifnconst	TIASFXMONO
   2766  f262		       f0 02		      beq	skipschedulesfx2
   2767  f264				   schedulesfx2
   2768  f264		       a2 01		      ldx	#1	; channel 2
   2769  f266				   skipschedulesfx2
   2770  f266					      endif		; !TIASFXMONO
   2771  f266
   2772  f266				  -	      ifconst	MUSICTRACKER
   2773  f266				  -	      lda	sfxnoteindex
   2774  f266				  -	      bpl	skipdrumkitoverride
   2775  f266				  -	      and	#$7F	; subtract 128
   2776  f266				  -	      sec
   2777  f266				  -	      sbc	#4	; drums start at 132, i.e. octave 10
   2778  f266				  -	      asl
   2779  f266				  -	      tay
   2780  f266				  -	      lda	tiadrumkitdefinition,y
   2781  f266				  -	      sta	sfxinstrumentlo
   2782  f266				  -	      iny
   2783  f266				  -	      lda	tiadrumkitdefinition,y
   2784  f266				  -	      sta	sfxinstrumenthi
   2785  f266				  -	      lda	#0
   2786  f266				  -	      sta	sfxnoteindex	; and tell the driver it's a non-pitched instrument
   2787  f266				  -skipdrumkitoverride
   2788  f266					      endif		; MUSICTRACKER
   2789  f266		       a0 01		      ldy	#1	; get priority and sound-resolution (in frames)
   2790  f268		       b1 e0		      lda	(sfxinstrumentlo),y
   2791  f26a		       95 52		      sta	sfx1priority,x
   2792  f26c		       c8		      iny
   2793  f26d		       b1 e0		      lda	(sfxinstrumentlo),y
   2794  f26f		       95 56		      sta	sfx1frames,x
   2795  f271		       a5 e0		      lda	sfxinstrumentlo
   2796  f273		       18		      clc
   2797  f274		       69 03		      adc	#3
   2798  f276		       95 4e		      sta	sfx1pointlo,x
   2799  f278		       a5 e1		      lda	sfxinstrumenthi
   2800  f27a		       69 00		      adc	#0
   2801  f27c		       95 50		      sta	sfx1pointhi,x
   2802  f27e		       a5 e2		      lda	sfxpitchoffset
   2803  f280		       95 54		      sta	sfx1poffset,x
   2804  f282		       a9 00		      lda	#0
   2805  f284		       95 58		      sta	sfx1tick,x
   2806  f286		       a5 e3		      lda	sfxnoteindex
   2807  f288		       95 cd		      sta	sfx1notedata,x
   2808  f28a		       60		      rts
   2809  f28b
   2810  f28b				   plotsprite
   2811  f28b				  -	      ifconst	DOUBLEBUFFER
   2812  f28b				  -	      lda	doublebufferstate
   2813  f28b				  -	      bne	skipplotspritewait
   2814  f28b					      endif		; DOUBLEBUFFER
   2815  f28b				   plotspritewait
   2816  f28b		       a5 4d		      lda	visibleover
   2817  f28d		       d0 fc		      bne	plotspritewait
   2818  f28f				   skipplotspritewait
   2819  f28f
   2820  f28f							;arguments: 
   2821  f28f							; temp1=lo graphicdata 
   2822  f28f							; temp2=hi graphicdata 
   2823  f28f							; temp3=palette | width byte
   2824  f28f							; temp4=x
   2825  f28f							; temp5=y
   2826  f28f							; temp6=mode
   2827  f28f		       a5 46		      lda	temp5	;Y position
   2828  f291		       4a		      lsr		; 2 - Divide by 8 or 16
   2829  f292		       4a		      lsr		; 2
   2830  f293		       4a		      lsr		; 2
   2831  f294				  -	      if	WZONEHEIGHT = 16
   2832  f294				  -	      lsr		; 2
   2833  f294					      endif
   2834  f294
   2835  f294		       aa		      tax
   2836  f295
   2837  f295							; the next block allows for vertical masking, and ensures we don't overwrite non-DL memory
   2838  f295
   2839  f295		       c9 18		      cmp	#WZONECOUNT
   2840  f297
   2841  f297		       90 0a		      bcc	continueplotsprite1	; the sprite is fully on-screen, so carry on...
   2842  f299							; otherwise, check to see if the bottom half is in zone 0...
   2843  f299
   2844  f299				  -	      if	WZONEHEIGHT = 16
   2845  f299				  -	      cmp	#15
   2846  f299					      else
   2847  f299		       c9 1f		      cmp	#31
   2848  f29b					      endif
   2849  f29b
   2850  f29b		       d0 05		      bne	exitplotsprite1
   2851  f29d		       a2 00		      ldx	#0
   2852  f29f		       4c da f2 	      jmp	continueplotsprite2
   2853  f2a2				   exitplotsprite1
   2854  f2a2		       60		      rts
   2855  f2a3
   2856  f2a3				   continueplotsprite1
   2857  f2a3
   2858  f2a3		       bd 50 f6 	      lda	DLPOINTL,x	;Get pointer to DL that this sprite starts in
   2859  f2a6				  -	      ifconst	DOUBLEBUFFER
   2860  f2a6				  -	      clc
   2861  f2a6				  -	      adc	doublebufferdloffset
   2862  f2a6					      endif		; DOUBLEBUFFER
   2863  f2a6		       85 63		      sta	dlpnt
   2864  f2a8		       bd 38 f6 	      lda	DLPOINTH,x
   2865  f2ab				  -	      ifconst	DOUBLEBUFFER
   2866  f2ab				  -	      adc	#0
   2867  f2ab					      endif		; DOUBLEBUFFER
   2868  f2ab		       85 64		      sta	dlpnt+1
   2869  f2ad
   2870  f2ad							;Create DL entry for upper part of sprite
   2871  f2ad
   2872  f2ad		       b4 65		      ldy	dlend,x	;Get the index to the end of this DL
   2873  f2af
   2874  f2af				  -	      ifconst	CHECKOVERWRITE
   2875  f2af				  -	      cpy	#DLLASTOBJ
   2876  f2af				  -	      beq	checkcontinueplotsprite2
   2877  f2af				  -continueplotsprite1a
   2878  f2af					      endif
   2879  f2af
   2880  f2af		       a5 42		      lda	temp1	; graphic data, lo byte
   2881  f2b1		       91 63		      sta	(dlpnt),y	;Low byte of data address
   2882  f2b3
   2883  f2b3					      ifnconst	ATOMICSPRITEUPDATE
   2884  f2b3		       c8		      iny
   2885  f2b4		       a5 47		      lda	temp6
   2886  f2b6		       91 63		      sta	(dlpnt),y
   2887  f2b8				  -	      else
   2888  f2b8				  -	      iny
   2889  f2b8				  -	      sty	temp8
   2890  f2b8				  -			;lda #0
   2891  f2b8				  -			;sta (dlpnt),y
   2892  f2b8					      endif
   2893  f2b8
   2894  f2b8		       c8		      iny
   2895  f2b9		       a5 46		      lda	temp5	;Y position
   2896  f2bb
   2897  f2bb				  -	      if	WZONEHEIGHT = 16
   2898  f2bb				  -	      and	#$0F
   2899  f2bb					      else		; WZONEHEIGHT = 8
   2900  f2bb		       29 07		      and	#$7
   2901  f2bd					      endif
   2902  f2bd
   2903  f2bd		       05 43		      ora	temp2	; graphic data, hi byte
   2904  f2bf		       91 63		      sta	(dlpnt),y
   2905  f2c1
   2906  f2c1		       c8		      iny
   2907  f2c2		       a5 44		      lda	temp3	;palette|width
   2908  f2c4		       91 63		      sta	(dlpnt),y
   2909  f2c6
   2910  f2c6		       c8		      iny
   2911  f2c7		       a5 45		      lda	temp4	;Horizontal position
   2912  f2c9		       91 63		      sta	(dlpnt),y
   2913  f2cb
   2914  f2cb		       c8		      iny
   2915  f2cc		       94 65		      sty	dlend,x
   2916  f2ce
   2917  f2ce				  -	      ifconst	ATOMICSPRITEUPDATE
   2918  f2ce				  -	      ldy	temp8
   2919  f2ce				  -	      lda	temp6
   2920  f2ce				  -	      sta	(dlpnt),y
   2921  f2ce					      endif
   2922  f2ce				   checkcontinueplotsprite2
   2923  f2ce
   2924  f2ce		       a5 46		      lda	temp5
   2925  f2d0		       29 07		      and	#(WZONEHEIGHT-1)
   2926  f2d2
   2927  f2d2		       f0 38		      beq	doneSPDL	;branch if it is
   2928  f2d4
   2929  f2d4							;Create DL entry for lower part of sprite
   2930  f2d4
   2931  f2d4		       e8		      inx		;Next region
   2932  f2d5
   2933  f2d5		       e0 18		      cpx	#WZONECOUNT
   2934  f2d7
   2935  f2d7		       90 01		      bcc	continueplotsprite2	; the second half of the sprite is fully on-screen, so carry on...
   2936  f2d9		       60		      rts
   2937  f2da				   continueplotsprite2
   2938  f2da
   2939  f2da		       bd 50 f6 	      lda	DLPOINTL,x	;Get pointer to next DL
   2940  f2dd				  -	      ifconst	DOUBLEBUFFER
   2941  f2dd				  -	      clc
   2942  f2dd				  -	      adc	doublebufferdloffset
   2943  f2dd					      endif		; DOUBLEBUFFER
   2944  f2dd		       85 63		      sta	dlpnt
   2945  f2df		       bd 38 f6 	      lda	DLPOINTH,x
   2946  f2e2				  -	      ifconst	DOUBLEBUFFER
   2947  f2e2				  -	      adc	#0
   2948  f2e2					      endif		; DOUBLEBUFFER
   2949  f2e2		       85 64		      sta	dlpnt+1
   2950  f2e4		       b4 65		      ldy	dlend,x	;Get the index to the end of this DL
   2951  f2e6
   2952  f2e6				  -	      ifconst	CHECKOVERWRITE
   2953  f2e6				  -	      cpy	#DLLASTOBJ
   2954  f2e6				  -	      bne	continueplotsprite2a
   2955  f2e6				  -	      rts
   2956  f2e6				  -continueplotsprite2a
   2957  f2e6					      endif
   2958  f2e6
   2959  f2e6		       a5 42		      lda	temp1	; graphic data, lo byte
   2960  f2e8		       91 63		      sta	(dlpnt),y
   2961  f2ea
   2962  f2ea					      ifnconst	ATOMICSPRITEUPDATE
   2963  f2ea		       c8		      iny
   2964  f2eb		       a5 47		      lda	temp6
   2965  f2ed		       91 63		      sta	(dlpnt),y
   2966  f2ef				  -	      else
   2967  f2ef				  -	      iny
   2968  f2ef				  -	      sty	temp8
   2969  f2ef				  -			;lda #0
   2970  f2ef				  -			;sta (dlpnt),y
   2971  f2ef					      endif
   2972  f2ef
   2973  f2ef		       c8		      iny
   2974  f2f0		       a5 46		      lda	temp5	;Y position
   2975  f2f2
   2976  f2f2				  -	      if	WZONEHEIGHT = 16
   2977  f2f2				  -	      and	#$0F
   2978  f2f2				  -	      eor	#$0F
   2979  f2f2					      endif
   2980  f2f2					      if	WZONEHEIGHT = 8
   2981  f2f2		       29 07		      and	#$07
   2982  f2f4		       49 07		      eor	#$07
   2983  f2f6					      endif
   2984  f2f6
   2985  f2f6		       85 4a		      sta	temp9
   2986  f2f8		       a5 43		      lda	temp2	; graphic data, hi byte
   2987  f2fa		       18		      clc
   2988  f2fb		       e5 4a		      sbc	temp9
   2989  f2fd		       91 63		      sta	(dlpnt),y
   2990  f2ff
   2991  f2ff		       c8		      iny
   2992  f300		       a5 44		      lda	temp3	;palette|width
   2993  f302		       91 63		      sta	(dlpnt),y
   2994  f304
   2995  f304		       c8		      iny
   2996  f305		       a5 45		      lda	temp4	;Horizontal position
   2997  f307		       91 63		      sta	(dlpnt),y
   2998  f309
   2999  f309		       c8		      iny
   3000  f30a		       94 65		      sty	dlend,x
   3001  f30c
   3002  f30c				  -	      ifconst	ATOMICSPRITEUPDATE
   3003  f30c				  -	      ldy	temp8
   3004  f30c				  -	      lda	temp6
   3005  f30c				  -	      sta	(dlpnt),y
   3006  f30c					      endif
   3007  f30c
   3008  f30c				   doneSPDL
   3009  f30c		       60		      rts
   3010  f30d
   3011  f30d				   lockzonex
   3012  f30d				  -	      ifconst	ZONELOCKS
   3013  f30d				  -	      ldy	dlend,x
   3014  f30d				  -	      cpy	#DLLASTOBJ
   3015  f30d				  -	      beq	lockzonexreturn	; the zone is either stuffed or locked. abort!
   3016  f30d				  -	      lda	DLPOINTL,x
   3017  f30d				  -	      ifconst	DOUBLEBUFFER
   3018  f30d				  -	      clc
   3019  f30d				  -	      adc	doublebufferdloffset
   3020  f30d				  -	      endif		; DOUBLEBUFFER
   3021  f30d				  -	      sta	dlpnt
   3022  f30d				  -	      lda	DLPOINTH,x
   3023  f30d				  -	      ifconst	DOUBLEBUFFER
   3024  f30d				  -	      adc	#0
   3025  f30d				  -	      endif		; DOUBLEBUFFER
   3026  f30d				  -	      sta	dlpnt+1
   3027  f30d				  -	      iny
   3028  f30d				  -	      lda	#0
   3029  f30d				  -	      sta	(dlpnt),y
   3030  f30d				  -	      dey
   3031  f30d				  -	      tya
   3032  f30d				  -	      ldy	#(DLLASTOBJ-1)
   3033  f30d				  -	      sta	(dlpnt),y
   3034  f30d				  -	      iny
   3035  f30d				  -	      sty	dlend,x
   3036  f30d				  -lockzonexreturn
   3037  f30d				  -	      rts
   3038  f30d					      endif		; ZONELOCKS
   3039  f30d				   unlockzonex
   3040  f30d				  -	      ifconst	ZONELOCKS
   3041  f30d				  -	      ldy	dlend,x
   3042  f30d				  -	      cpy	#DLLASTOBJ
   3043  f30d				  -	      bne	unlockzonexreturn	; if the zone isn't stuffed, it's not locked. abort!
   3044  f30d				  -	      lda	DLPOINTL,x
   3045  f30d				  -	      ifconst	DOUBLEBUFFER
   3046  f30d				  -	      clc
   3047  f30d				  -	      adc	doublebufferdloffset
   3048  f30d				  -	      endif		; DOUBLEBUFFER
   3049  f30d				  -	      sta	dlpnt
   3050  f30d				  -	      lda	DLPOINTH,x
   3051  f30d				  -	      ifconst	DOUBLEBUFFER
   3052  f30d				  -	      adc	#0
   3053  f30d				  -	      endif		; DOUBLEBUFFER
   3054  f30d				  -	      sta	dlpnt+1
   3055  f30d				  -	      dey
   3056  f30d				  -			;ldy #(DLLASTOBJ-1)
   3057  f30d				  -	      lda	(dlpnt),y
   3058  f30d				  -	      tay
   3059  f30d				  -	      sty	dlend,x
   3060  f30d				  -unlockzonexreturn
   3061  f30d					      endif		; ZONELOCKS
   3062  f30d		       60		      rts
   3063  f30e
   3064  f30e				   plotcharloop
   3065  f30e							; ** read from a data indirectly pointed to from temp8,temp9
   3066  f30e							; ** format is: lo_data, hi_data, palette|width, x, y
   3067  f30e							; ** format ends with lo_data | hi_data = 0
   3068  f30e
   3069  f30e				  -	      ifconst	DOUBLEBUFFER
   3070  f30e				  -	      lda	doublebufferstate
   3071  f30e				  -	      bne	skipplotcharloopwait
   3072  f30e					      endif		; DOUBLEBUFFER
   3073  f30e				   plotcharloopwait
   3074  f30e		       a5 4d		      lda	visibleover
   3075  f310		       d0 fc		      bne	plotcharloopwait
   3076  f312				   skipplotcharloopwait
   3077  f312				   plotcharlooploop
   3078  f312		       a0 00		      ldy	#0
   3079  f314		       b1 49		      lda	(temp8),y
   3080  f316		       85 42		      sta	temp1
   3081  f318		       c8		      iny
   3082  f319		       b1 49		      lda	(temp8),y
   3083  f31b		       85 43		      sta	temp2
   3084  f31d		       05 42		      ora	temp1
   3085  f31f		       d0 01		      bne	plotcharloopcontinue
   3086  f321							;the pointer=0, so return
   3087  f321		       60		      rts
   3088  f322				   plotcharloopcontinue
   3089  f322		       c8		      iny
   3090  f323		       b1 49		      lda	(temp8),y
   3091  f325		       85 44		      sta	temp3
   3092  f327		       c8		      iny
   3093  f328		       b1 49		      lda	(temp8),y
   3094  f32a		       85 45		      sta	temp4
   3095  f32c		       c8		      iny
   3096  f32d		       b1 49		      lda	(temp8),y
   3097  f32f							;sta temp5 ; not needed with our late entry.
   3098  f32f		       20 48 f3 	      jsr	plotcharactersskipentry
   3099  f332		       a5 49		      lda	temp8
   3100  f334		       18		      clc
   3101  f335		       69 05		      adc	#5
   3102  f337		       85 49		      sta	temp8
   3103  f339		       a5 4a		      lda	temp9
   3104  f33b		       69 00		      adc	#0
   3105  f33d		       85 4a		      sta	temp9
   3106  f33f		       4c 12 f3 	      jmp	plotcharlooploop
   3107  f342
   3108  f342				   plotcharacters
   3109  f342				  -	      ifconst	DOUBLEBUFFER
   3110  f342				  -	      lda	doublebufferstate
   3111  f342				  -	      bne	skipplotcharacterswait
   3112  f342					      endif		; DOUBLEBUFFER
   3113  f342				   plotcharacterswait
   3114  f342		       a5 4d		      lda	visibleover
   3115  f344		       d0 fc		      bne	plotcharacterswait
   3116  f346				   skipplotcharacterswait
   3117  f346							;arguments: 
   3118  f346							; temp1=lo charactermap
   3119  f346							; temp2=hi charactermap
   3120  f346							; temp3=palette | width byte
   3121  f346							; temp4=x
   3122  f346							; temp5=y
   3123  f346
   3124  f346		       a5 46		      lda	temp5	;Y position
   3125  f348
   3126  f348				   plotcharactersskipentry
   3127  f348
   3128  f348							;ifconst ZONEHEIGHT
   3129  f348							; if ZONEHEIGHT = 16
   3130  f348							; and #$0F
   3131  f348							; endif
   3132  f348							; if ZONEHEIGHT = 8
   3133  f348							; and #$1F
   3134  f348							; endif
   3135  f348							;else
   3136  f348							; and #$0F
   3137  f348							;endif
   3138  f348
   3139  f348		       aa		      tax
   3140  f349		       bd 50 f6 	      lda	DLPOINTL,x	;Get pointer to DL that the characters are in
   3141  f34c				  -	      ifconst	DOUBLEBUFFER
   3142  f34c				  -	      clc
   3143  f34c				  -	      adc	doublebufferdloffset
   3144  f34c					      endif		; DOUBLEBUFFER
   3145  f34c		       85 63		      sta	dlpnt
   3146  f34e		       bd 38 f6 	      lda	DLPOINTH,x
   3147  f351				  -	      ifconst	DOUBLEBUFFER
   3148  f351				  -	      adc	#0
   3149  f351					      endif		; DOUBLEBUFFER
   3150  f351		       85 64		      sta	dlpnt+1
   3151  f353
   3152  f353							;Create DL entry for the characters
   3153  f353
   3154  f353		       b4 65		      ldy	dlend,x	;Get the index to the end of this DL
   3155  f355
   3156  f355				  -	      ifconst	CHECKOVERWRITE
   3157  f355				  -	      cpy	#DLLASTOBJ
   3158  f355				  -	      bne	continueplotcharacters
   3159  f355				  -	      rts
   3160  f355				  -continueplotcharacters
   3161  f355					      endif
   3162  f355
   3163  f355		       a5 42		      lda	temp1	; character map data, lo byte
   3164  f357		       91 63		      sta	(dlpnt),y	;(1) store low address
   3165  f359
   3166  f359		       c8		      iny
   3167  f35a		       ad 06 21 	      lda	charactermode
   3168  f35d		       91 63		      sta	(dlpnt),y	;(2) store mode
   3169  f35f
   3170  f35f		       c8		      iny
   3171  f360		       a5 43		      lda	temp2	; character map, hi byte
   3172  f362		       91 63		      sta	(dlpnt),y	;(3) store high address
   3173  f364
   3174  f364		       c8		      iny
   3175  f365		       a5 44		      lda	temp3	;palette|width
   3176  f367		       91 63		      sta	(dlpnt),y	;(4) store palette|width
   3177  f369
   3178  f369		       c8		      iny
   3179  f36a		       a5 45		      lda	temp4	;Horizontal position
   3180  f36c		       91 63		      sta	(dlpnt),y	;(5) store horizontal position
   3181  f36e
   3182  f36e		       c8		      iny
   3183  f36f		       94 65		      sty	dlend,x	; save display list end byte
   3184  f371		       60		      rts
   3185  f372
   3186  f372
   3187  f372					      ifconst	plotvalueonscreen
   3188  f372				   plotcharacterslive
   3189  f372							; a version of plotcharacters that draws live and minimally disrupts the screen...
   3190  f372
   3191  f372							;arguments: 
   3192  f372							; temp1=lo charactermap
   3193  f372							; temp2=hi charactermap
   3194  f372							; temp3=palette | width byte
   3195  f372							; temp4=x
   3196  f372							; temp5=y
   3197  f372
   3198  f372		       a5 46		      lda	temp5	;Y position
   3199  f374
   3200  f374		       aa		      tax
   3201  f375		       bd 50 f6 	      lda	DLPOINTL,x	;Get pointer to DL that the characters are in
   3202  f378				  -	      ifconst	DOUBLEBUFFER
   3203  f378				  -	      clc
   3204  f378				  -	      adc	doublebufferdloffset
   3205  f378					      endif		; DOUBLEBUFFER
   3206  f378		       85 63		      sta	dlpnt
   3207  f37a		       bd 38 f6 	      lda	DLPOINTH,x
   3208  f37d				  -	      ifconst	DOUBLEBUFFER
   3209  f37d				  -	      adc	#0
   3210  f37d					      endif		; DOUBLEBUFFER
   3211  f37d		       85 64		      sta	dlpnt+1
   3212  f37f
   3213  f37f							;Create DL entry for the characters
   3214  f37f
   3215  f37f		       b4 65		      ldy	dlend,x	;Get the index to the end of this DL
   3216  f381
   3217  f381				  -	      ifconst	CHECKOVERWRITE
   3218  f381				  -	      cpy	#DLLASTOBJ
   3219  f381				  -	      bne	continueplotcharacterslive
   3220  f381				  -	      rts
   3221  f381				  -continueplotcharacterslive
   3222  f381					      endif
   3223  f381
   3224  f381		       a5 42		      lda	temp1	; character map data, lo byte
   3225  f383		       91 63		      sta	(dlpnt),y	;(1) store low address
   3226  f385
   3227  f385		       c8		      iny
   3228  f386							; we don't add the second byte yet, since the charmap could briefly
   3229  f386							; render without a proper character map address, width, or position.
   3230  f386		       ad 06 21 	      lda	charactermode
   3231  f389		       91 63		      sta	(dlpnt),y	;(2) store mode
   3232  f38b
   3233  f38b		       c8		      iny
   3234  f38c		       a5 43		      lda	temp2	; character map, hi byte
   3235  f38e		       91 63		      sta	(dlpnt),y	;(3) store high address
   3236  f390
   3237  f390		       c8		      iny
   3238  f391		       a5 44		      lda	temp3	;palette|width
   3239  f393		       91 63		      sta	(dlpnt),y	;(4) store palette|width
   3240  f395
   3241  f395		       c8		      iny
   3242  f396		       a5 45		      lda	temp4	;Horizontal position
   3243  f398		       91 63		      sta	(dlpnt),y	;(5) store horizontal position
   3244  f39a
   3245  f39a		       c8		      iny
   3246  f39b		       94 65		      sty	dlend,x	; save display list end byte
   3247  f39d
   3248  f39d		       60		      rts
   3249  f39e					      endif		;plotcharacterslive
   3250  f39e
   3251  f39e					      ifconst	USED_PLOTVALUE
   3252  f39e				   plotvalue
   3253  f39e							; calling 7800basic command:
   3254  f39e							; plotvalue digit_gfx palette variable/data number_of_digits screen_x screen_y
   3255  f39e							; ...displays the variable as BCD digits
   3256  f39e							;
   3257  f39e							; asm sub arguments: 
   3258  f39e							; temp1=lo charactermap
   3259  f39e							; temp2=hi charactermap
   3260  f39e							; temp3=palette | width byte
   3261  f39e							; temp4=x
   3262  f39e							; temp5=y
   3263  f39e							; temp6=number of digits
   3264  f39e							; temp7=lo variable
   3265  f39e							; temp8=hi variable
   3266  f39e							; temp9=character mode
   3267  f39e
   3268  f39e		       00 47	   plotdigitcount =	temp6
   3269  f39e
   3270  f39e				  -	      ifconst	ZONELOCKS
   3271  f39e				  -	      ldx	temp5
   3272  f39e				  -	      ldy	dlend,x
   3273  f39e				  -	      cpy	#DLLASTOBJ
   3274  f39e				  -	      bne	carryonplotvalue
   3275  f39e				  -	      rts
   3276  f39e				  -carryonplotvalue
   3277  f39e					      endif
   3278  f39e
   3279  f39e		       a9 00		      lda	#0
   3280  f3a0		       a8		      tay
   3281  f3a1		       ae ad 01 	      ldx	valbufend
   3282  f3a4
   3283  f3a4		       a5 47		      lda	plotdigitcount
   3284  f3a6		       29 01		      and	#1
   3285  f3a8		       f0 07		      beq	pvnibble2char
   3286  f3aa		       a9 00		      lda	#0
   3287  f3ac		       9d 00 20 	      sta	VALBUFFER,x	; just in case we skip this digit
   3288  f3af		       f0 11		      beq	pvnibble2char_skipnibble
   3289  f3b1
   3290  f3b1				   pvnibble2char
   3291  f3b1							; high nibble...
   3292  f3b1		       b1 48		      lda	(temp7),y
   3293  f3b3		       29 f0		      and	#$f0
   3294  f3b5		       4a		      lsr
   3295  f3b6		       4a		      lsr
   3296  f3b7		       4a		      lsr
   3297  f3b8					      ifnconst	DOUBLEWIDE	; multiply value by 2 for double-width
   3298  f3b8		       4a		      lsr
   3299  f3b9					      endif
   3300  f3b9
   3301  f3b9		       18		      clc
   3302  f3ba		       65 42		      adc	temp1	; add the offset to character graphics to our value
   3303  f3bc		       9d 00 20 	      sta	VALBUFFER,x
   3304  f3bf		       e8		      inx
   3305  f3c0		       c6 47		      dec	plotdigitcount
   3306  f3c2
   3307  f3c2				   pvnibble2char_skipnibble
   3308  f3c2							; low nibble...
   3309  f3c2		       b1 48		      lda	(temp7),y
   3310  f3c4		       29 0f		      and	#$0f
   3311  f3c6				  -	      ifconst	DOUBLEWIDE	; multiply value by 2 for double-width
   3312  f3c6				  -	      asl
   3313  f3c6					      endif
   3314  f3c6		       18		      clc
   3315  f3c7		       65 42		      adc	temp1	; add the offset to character graphics to our value
   3316  f3c9		       9d 00 20 	      sta	VALBUFFER,x
   3317  f3cc		       e8		      inx
   3318  f3cd		       c8		      iny
   3319  f3ce
   3320  f3ce		       c6 47		      dec	plotdigitcount
   3321  f3d0		       d0 df		      bne	pvnibble2char
   3322  f3d2
   3323  f3d2							;point to the start of our valuebuffer
   3324  f3d2		       18		      clc
   3325  f3d3		       a9 00		      lda	#<VALBUFFER
   3326  f3d5		       6d ad 01 	      adc	valbufend
   3327  f3d8		       85 42		      sta	temp1
   3328  f3da		       a9 20		      lda	#>VALBUFFER
   3329  f3dc		       69 00		      adc	#0
   3330  f3de		       85 43		      sta	temp2
   3331  f3e0
   3332  f3e0							;advance valbufend to the end of our value buffer
   3333  f3e0		       8e ad 01 	      stx	valbufend
   3334  f3e3
   3335  f3e3				  -	      ifnconst	plotvalueonscreen
   3336  f3e3				  -	      jmp	plotcharacters
   3337  f3e3					      else
   3338  f3e3		       4c 72 f3 	      jmp	plotcharacterslive
   3339  f3e6					      endif
   3340  f3e6
   3341  f3e6					      endif		; USED_PLOTVALUE
   3342  f3e6
   3343  f3e6
   3344  f3e6				  -	      ifconst	USED_PLOTVALUEEXTRA
   3345  f3e6				  -plotdigitcount =	temp6
   3346  f3e6				  -plotvalueextra
   3347  f3e6				  -			; calling 7800basic command:
   3348  f3e6				  -			; plotvalue digit_gfx palette variable/data number_of_digits screen_x screen_y
   3349  f3e6				  -			; ...displays the variable as BCD digits
   3350  f3e6				  -			;
   3351  f3e6				  -			; asm sub arguments: 
   3352  f3e6				  -			; temp1=lo charactermap
   3353  f3e6				  -			; temp2=hi charactermap
   3354  f3e6				  -			; temp3=palette | width byte
   3355  f3e6				  -			; temp4=x
   3356  f3e6				  -			; temp5=y
   3357  f3e6				  -			; temp6=number of digits
   3358  f3e6				  -			; temp7=lo variable
   3359  f3e6				  -			; temp8=hi variable
   3360  f3e6				  -
   3361  f3e6				  -	      lda	#0
   3362  f3e6				  -	      tay
   3363  f3e6				  -	      ldx	valbufend
   3364  f3e6				  -	      ifnconst	plotvalueonscreen
   3365  f3e6				  -	      sta	VALBUFFER,x
   3366  f3e6				  -	      endif
   3367  f3e6				  -
   3368  f3e6				  -	      lda	plotdigitcount
   3369  f3e6				  -	      and	#1
   3370  f3e6				  -
   3371  f3e6				  -	      bne	pvnibble2char_skipnibbleextra
   3372  f3e6				  -
   3373  f3e6				  -pvnibble2charextra
   3374  f3e6				  -			; high nibble...
   3375  f3e6				  -	      lda	(temp7),y
   3376  f3e6				  -	      and	#$f0
   3377  f3e6				  -	      lsr
   3378  f3e6				  -	      lsr
   3379  f3e6				  -	      ifnconst	DOUBLEWIDE	; multiply value by 2 for double-width
   3380  f3e6				  -	      lsr
   3381  f3e6				  -	      endif
   3382  f3e6				  -	      clc
   3383  f3e6				  -	      adc	temp1	; add the offset to character graphics to our value
   3384  f3e6				  -	      sta	VALBUFFER,x
   3385  f3e6				  -	      inx
   3386  f3e6				  -
   3387  f3e6				  -			; second half of the digit
   3388  f3e6				  -	      clc
   3389  f3e6				  -	      adc	#1
   3390  f3e6				  -	      sta	VALBUFFER,x
   3391  f3e6				  -	      inx
   3392  f3e6				  -
   3393  f3e6				  -pvnibble2char_skipnibbleextra
   3394  f3e6				  -			; low nibble...
   3395  f3e6				  -	      lda	(temp7),y
   3396  f3e6				  -	      and	#$0f
   3397  f3e6				  -	      ifconst	DOUBLEWIDE	; multiply value by 2 for double-width
   3398  f3e6				  -	      asl
   3399  f3e6				  -	      endif
   3400  f3e6				  -	      asl
   3401  f3e6				  -
   3402  f3e6				  -	      clc
   3403  f3e6				  -	      adc	temp1	; add the offset to character graphics to our value
   3404  f3e6				  -	      sta	VALBUFFER,x
   3405  f3e6				  -	      inx
   3406  f3e6				  -
   3407  f3e6				  -	      clc
   3408  f3e6				  -	      adc	#1
   3409  f3e6				  -	      sta	VALBUFFER,x
   3410  f3e6				  -	      inx
   3411  f3e6				  -	      iny
   3412  f3e6				  -
   3413  f3e6				  -	      dec	plotdigitcount
   3414  f3e6				  -	      bne	pvnibble2charextra
   3415  f3e6				  -
   3416  f3e6				  -			;point to the start of our valuebuffer
   3417  f3e6				  -	      clc
   3418  f3e6				  -	      lda	#<VALBUFFER
   3419  f3e6				  -	      adc	valbufend
   3420  f3e6				  -	      sta	temp1
   3421  f3e6				  -	      lda	#>VALBUFFER
   3422  f3e6				  -	      adc	#0
   3423  f3e6				  -	      sta	temp2
   3424  f3e6				  -
   3425  f3e6				  -			;advance valbufend to the end of our value buffer
   3426  f3e6				  -	      stx	valbufend
   3427  f3e6				  -
   3428  f3e6				  -	      ifnconst	plotvalueonscreen
   3429  f3e6				  -	      jmp	plotcharacters
   3430  f3e6				  -	      else
   3431  f3e6				  -	      jmp	plotcharacterslive
   3432  f3e6				  -	      endif
   3433  f3e6					      endif		; USED_PLOTVALUEEXTRA
   3434  f3e6
   3435  f3e6				   boxcollision
   3436  f3e6							; the worst case cycle-time for the code below is 43 cycles.
   3437  f3e6							; unfortunately, prior to getting here we've burned 44 cycles in argument setup. eep!
   3438  f3e6
   3439  f3e6							;__boxx1 = accumulator
   3440  f3e6							;__boxy1 = y
   3441  f3e6		       00 44	   __boxw1    =	temp3
   3442  f3e6		       00 45	   __boxh1    =	temp4
   3443  f3e6
   3444  f3e6		       00 46	   __boxx2    =	temp5
   3445  f3e6		       00 47	   __boxy2    =	temp6
   3446  f3e6		       00 48	   __boxw2    =	temp7
   3447  f3e6		       00 49	   __boxh2    =	temp8
   3448  f3e6
   3449  f3e6				   DoXCollisionCheck
   3450  f3e6							;lda __boxx1 ; skipped. already in the accumulator
   3451  f3e6		       c5 46		      cmp	__boxx2	;3
   3452  f3e8		       b0 07		      bcs	X1isbiggerthanX2	;2/3
   3453  f3ea				   X2isbiggerthanX1
   3454  f3ea							; carry is clear
   3455  f3ea		       65 44		      adc	__boxw1	;3
   3456  f3ec		       c5 46		      cmp	__boxx2	;3
   3457  f3ee		       b0 08		      bcs	DoYCollisionCheck	;3/2
   3458  f3f0		       60		      rts		;6 - carry clear, no collision
   3459  f3f1				   X1isbiggerthanX2
   3460  f3f1		       18		      clc		;2
   3461  f3f2		       e5 48		      sbc	__boxw2	;3
   3462  f3f4		       c5 46		      cmp	__boxx2	;3
   3463  f3f6		       b0 13		      bcs	noboxcollision	;3/2
   3464  f3f8				   DoYCollisionCheck
   3465  f3f8		       98		      tya		; 2 ; use to be "lda __boxy1"
   3466  f3f9		       c5 47		      cmp	__boxy2	;3
   3467  f3fb		       b0 05		      bcs	Y1isbiggerthanY2	;3/2
   3468  f3fd				   Y2isbiggerthanY1
   3469  f3fd							; carry is clear
   3470  f3fd		       65 45		      adc	__boxh1	;3
   3471  f3ff		       c5 47		      cmp	__boxy2	;3
   3472  f401		       60		      rts		;6 
   3473  f402				   Y1isbiggerthanY2
   3474  f402		       18		      clc		;2
   3475  f403		       e5 49		      sbc	__boxh2	;3
   3476  f405		       c5 47		      cmp	__boxy2	;3
   3477  f407		       b0 02		      bcs	noboxcollision	;3/2
   3478  f409				   yesboxcollision
   3479  f409		       38		      sec		;2
   3480  f40a		       60		      rts		;6
   3481  f40b				   noboxcollision
   3482  f40b		       18		      clc		;2
   3483  f40c		       60		      rts		;6
   3484  f40d
   3485  f40d				   randomize
   3486  f40d		       a5 40		      lda	rand
   3487  f40f		       4a		      lsr
   3488  f410		       26 41		      rol	rand16
   3489  f412		       90 02		      bcc	noeor
   3490  f414		       49 b4		      eor	#$B4
   3491  f416				   noeor
   3492  f416		       85 40		      sta	rand
   3493  f418		       45 41		      eor	rand16
   3494  f41a		       60		      rts
   3495  f41b
   3496  f41b							; bcd conversion routine courtesy Omegamatrix
   3497  f41b							; http://atariage.com/forums/blog/563/entry-10832-hex-to-bcd-conversion-0-99/
   3498  f41b				   converttobcd
   3499  f41b							;value to convert is in the accumulator
   3500  f41b		       85 42		      sta	temp1
   3501  f41d		       4a		      lsr
   3502  f41e		       65 42		      adc	temp1
   3503  f420		       6a		      ror
   3504  f421		       4a		      lsr
   3505  f422		       4a		      lsr
   3506  f423		       65 42		      adc	temp1
   3507  f425		       6a		      ror
   3508  f426		       65 42		      adc	temp1
   3509  f428		       6a		      ror
   3510  f429		       4a		      lsr
   3511  f42a		       29 3c		      and	#$3C
   3512  f42c		       85 43		      sta	temp2
   3513  f42e		       4a		      lsr
   3514  f42f		       65 43		      adc	temp2
   3515  f431		       65 42		      adc	temp1
   3516  f433		       60		      rts		; return the result in the accumulator
   3517  f434
   3518  f434							; Y and A contain multiplicands, result in A
   3519  f434				   mul8
   3520  f434		       84 42		      sty	temp1
   3521  f436		       85 43		      sta	temp2
   3522  f438		       a9 00		      lda	#0
   3523  f43a				   reptmul8
   3524  f43a		       46 43		      lsr	temp2
   3525  f43c		       90 03		      bcc	skipmul8
   3526  f43e		       18		      clc
   3527  f43f		       65 42		      adc	temp1
   3528  f441							;bcs donemul8 might save cycles?
   3529  f441				   skipmul8
   3530  f441							;beq donemul8 might save cycles?
   3531  f441		       06 42		      asl	temp1
   3532  f443		       d0 f5		      bne	reptmul8
   3533  f445				   donemul8
   3534  f445		       60		      rts
   3535  f446
   3536  f446				   div8
   3537  f446							; A=numerator Y=denominator, result in A
   3538  f446		       c0 02		      cpy	#2
   3539  f448		       90 0a		      bcc	div8end+1	;div by 0 = bad, div by 1=no calc needed, so bail out
   3540  f44a		       84 42		      sty	temp1
   3541  f44c		       a0 ff		      ldy	#$ff
   3542  f44e				   div8loop
   3543  f44e		       e5 42		      sbc	temp1
   3544  f450		       c8		      iny
   3545  f451		       b0 fb		      bcs	div8loop
   3546  f453				   div8end
   3547  f453		       98		      tya
   3548  f454							; result in A
   3549  f454		       60		      rts
   3550  f455
   3551  f455							; Y and A contain multiplicands, result in temp2,A=low, temp1=high
   3552  f455				   mul16
   3553  f455		       84 42		      sty	temp1
   3554  f457		       85 43		      sta	temp2
   3555  f459
   3556  f459		       a9 00		      lda	#0
   3557  f45b		       a2 08		      ldx	#8
   3558  f45d		       46 42		      lsr	temp1
   3559  f45f				   mul16_1
   3560  f45f		       90 03		      bcc	mul16_2
   3561  f461		       18		      clc
   3562  f462		       65 43		      adc	temp2
   3563  f464				   mul16_2
   3564  f464		       6a		      ror
   3565  f465		       66 42		      ror	temp1
   3566  f467		       ca		      dex
   3567  f468		       d0 f5		      bne	mul16_1
   3568  f46a		       85 43		      sta	temp2
   3569  f46c		       60		      rts
   3570  f46d
   3571  f46d							; div int/int
   3572  f46d							; numerator in A, denom in temp1
   3573  f46d							; returns with quotient in A, remainder in temp1
   3574  f46d				   div16
   3575  f46d		       85 43		      sta	temp2
   3576  f46f		       84 42		      sty	temp1
   3577  f471		       a9 00		      lda	#0
   3578  f473		       a2 08		      ldx	#8
   3579  f475		       06 43		      asl	temp2
   3580  f477				   div16_1
   3581  f477		       2a		      rol
   3582  f478		       c5 42		      cmp	temp1
   3583  f47a		       90 02		      bcc	div16_2
   3584  f47c		       e5 42		      sbc	temp1
   3585  f47e				   div16_2
   3586  f47e		       26 43		      rol	temp2
   3587  f480		       ca		      dex
   3588  f481		       d0 f4		      bne	div16_1
   3589  f483		       85 42		      sta	temp1
   3590  f485		       a5 43		      lda	temp2
   3591  f487		       60		      rts
   3592  f488
   3593  f488				  -	      ifconst	bankswitchmode
   3594  f488				  -BS_jsr
   3595  f488				  -	      ifconst	MCPDEVCART
   3596  f488				  -	      ora	#$18
   3597  f488				  -	      sta	$3000
   3598  f488				  -	      else
   3599  f488				  -	      sta	$8000
   3600  f488				  -	      endif
   3601  f488				  -	      pla
   3602  f488				  -	      tax
   3603  f488				  -	      pla
   3604  f488				  -	      rts
   3605  f488				  -
   3606  f488				  -BS_return
   3607  f488				  -	      pla		; bankswitch bank
   3608  f488				  -	      ifconst	BANKRAM
   3609  f488				  -	      sta	currentbank
   3610  f488				  -	      ora	currentrambank
   3611  f488				  -	      endif
   3612  f488				  -	      ifconst	MCPDEVCART
   3613  f488				  -	      ora	#$18
   3614  f488				  -	      sta	$3000
   3615  f488				  -	      else
   3616  f488				  -	      sta	$8000
   3617  f488				  -	      endif
   3618  f488				  -	      pla		; bankswitch $0 flag
   3619  f488				  -	      rts
   3620  f488					      endif
   3621  f488
   3622  f488				   checkselectswitch
   3623  f488		       ad 82 02 	      lda	SWCHB	; first check the real select switch...
   3624  f48b		       29 02		      and	#%00000010
   3625  f48d					      ifnconst	MOUSESUPPORT
   3626  f48d		       f0 05		      beq	checkselectswitchreturn	; switch is pressed
   3627  f48f		       ad 80 02 	      lda	SWCHA	; then check the soft "select" joysick code...
   3628  f492		       29 b0		      and	#%10110000	; R_DU
   3629  f494					      endif		; MOUSESUPPORT
   3630  f494				   checkselectswitchreturn
   3631  f494		       60		      rts
   3632  f495
   3633  f495				   checkresetswitch
   3634  f495		       ad 82 02 	      lda	SWCHB	; first check the real reset switch...
   3635  f498		       29 01		      and	#%00000001
   3636  f49a					      ifnconst	MOUSESUPPORT
   3637  f49a		       f0 05		      beq	checkresetswitchreturn	; switch is pressed
   3638  f49c		       ad 80 02 	      lda	SWCHA	; then check the soft "reset" joysick code...
   3639  f49f		       29 70		      and	#%01110000	; _LDU
   3640  f4a1					      endif		; MOUSESUPPORT
   3641  f4a1				   checkresetswitchreturn
   3642  f4a1		       60		      rts
   3643  f4a2
   3644  f4a2				  -	      ifconst	FINESCROLLENABLED
   3645  f4a2				  -finescrolldlls
   3646  f4a2				  -	      ldx	temp1	; first DLL index x3
   3647  f4a2				  -	      lda	DLLMEM,x
   3648  f4a2				  -	      and	#%11110000
   3649  f4a2				  -	      ora	finescrolly
   3650  f4a2				  -	      sta	DLLMEM,x
   3651  f4a2				  -
   3652  f4a2				  -	      ldx	temp2	; last DLL index x3
   3653  f4a2				  -	      lda	DLLMEM,x
   3654  f4a2				  -	      and	#%11110000
   3655  f4a2				  -	      ora	finescrolly
   3656  f4a2				  -	      eor	#(WZONEHEIGHT-1)
   3657  f4a2				  -	      sta	DLLMEM,x
   3658  f4a2				  -	      rts
   3659  f4a2					      endif		; FINESCROLLENABLED
   3660  f4a2
   3661  f4a2				  -	      ifconst	USED_ADJUSTVISIBLE
   3662  f4a2				  -adjustvisible
   3663  f4a2				  -			; called with temp1=first visible zone *3, temp2=last visible zone *3
   3664  f4a2				  -	      jsr	waitforvblankstart	; ensure vblank just started
   3665  f4a2				  -	      ldx	visibleDLLstart
   3666  f4a2				  -findfirstinterrupt
   3667  f4a2				  -	      lda	DLLMEM,x
   3668  f4a2				  -	      bmi	foundfirstinterrupt
   3669  f4a2				  -	      inx
   3670  f4a2				  -	      inx
   3671  f4a2				  -	      inx
   3672  f4a2				  -	      bne	findfirstinterrupt
   3673  f4a2				  -foundfirstinterrupt
   3674  f4a2				  -	      and	#%01111111	; clear the interrupt bit
   3675  f4a2				  -	      sta	DLLMEM,x
   3676  f4a2				  -	      ifconst	DOUBLEBUFFER
   3677  f4a2				  -	      sta	DLLMEM+DBOFFSET,x
   3678  f4a2				  -	      endif		; DOUBLEBUFFER
   3679  f4a2				  -	      ldx	overscanDLLstart
   3680  f4a2				  -findlastinterrupt
   3681  f4a2				  -	      lda	DLLMEM,x
   3682  f4a2				  -	      bmi	foundlastinterrupt
   3683  f4a2				  -	      dex
   3684  f4a2				  -	      dex
   3685  f4a2				  -	      dex
   3686  f4a2				  -	      bne	findlastinterrupt
   3687  f4a2				  -foundlastinterrupt
   3688  f4a2				  -	      and	#%01111111	; clear the interrupt bit
   3689  f4a2				  -	      sta	DLLMEM,x
   3690  f4a2				  -	      ifconst	DOUBLEBUFFER
   3691  f4a2				  -	      sta	DLLMEM+DBOFFSET,x
   3692  f4a2				  -	      endif		; DOUBLEBUFFER
   3693  f4a2				  -			;now we need to set the new interrupts
   3694  f4a2				  -	      clc
   3695  f4a2				  -	      lda	temp1
   3696  f4a2				  -	      adc	visibleDLLstart
   3697  f4a2				  -	      tax
   3698  f4a2				  -	      lda	DLLMEM,x
   3699  f4a2				  -	      ora	#%10000000
   3700  f4a2				  -	      sta	DLLMEM,x
   3701  f4a2				  -	      ifconst	DOUBLEBUFFER
   3702  f4a2				  -	      sta	DLLMEM+DBOFFSET,x
   3703  f4a2				  -	      endif		; DOUBLEBUFFER
   3704  f4a2				  -	      clc
   3705  f4a2				  -	      lda	temp2
   3706  f4a2				  -	      adc	visibleDLLstart
   3707  f4a2				  -	      tax
   3708  f4a2				  -	      lda	DLLMEM,x
   3709  f4a2				  -	      ora	#%10000000
   3710  f4a2				  -	      sta	DLLMEM,x
   3711  f4a2				  -	      ifconst	DOUBLEBUFFER
   3712  f4a2				  -	      sta	DLLMEM+DBOFFSET,x
   3713  f4a2				  -	      endif		; DOUBLEBUFFER
   3714  f4a2				  -	      jsr	vblankresync
   3715  f4a2				  -	      rts
   3716  f4a2					      endif		; USED_ADJUSTVISIBLE
   3717  f4a2
   3718  f4a2				   vblankresync
   3719  f4a2		       20 40 f5 	      jsr	waitforvblankstart	; ensure vblank just started
   3720  f4a5		       a9 00		      lda	#0
   3721  f4a7		       85 4d		      sta	visibleover
   3722  f4a9		       a9 03		      lda	#3
   3723  f4ab		       8d b2 01 	      sta	interruptindex
   3724  f4ae		       60		      rts
   3725  f4af
   3726  f4af				   createallgamedlls
   3727  f4af		       a2 00		      ldx	#0
   3728  f4b1		       a9 19		      lda	#NVLINES
   3729  f4b3		       ac 09 21 	      ldy	paldetected
   3730  f4b6		       f0 03		      beq	skipcreatePALpadding
   3731  f4b8		       18		      clc
   3732  f4b9		       69 15		      adc	#21
   3733  f4bb				   skipcreatePALpadding
   3734  f4bb		       20 f0 f4 	      jsr	createnonvisibledlls
   3735  f4be		       8e 3c 21 	      stx	visibleDLLstart
   3736  f4c1		       20 21 f5 	      jsr	createvisiblezones
   3737  f4c4		       8e 3d 21 	      stx	overscanDLLstart
   3738  f4c7				   createallgamedllscontinue
   3739  f4c7		       a9 50		      lda	#(NVLINES+55)	; extras for PAL
   3740  f4c9		       20 f0 f4 	      jsr	createnonvisibledlls
   3741  f4cc
   3742  f4cc		       ae 3c 21 	      ldx	visibleDLLstart
   3743  f4cf		       bd 00 18 	      lda	DLLMEM,x
   3744  f4d2		       09 80		      ora	#%10000000	; NMI 1 - start of visible screen
   3745  f4d4		       9d 00 18 	      sta	DLLMEM,x
   3746  f4d7				  -	      ifconst	DOUBLEBUFFER
   3747  f4d7				  -	      sta	DLLMEM+DBOFFSET,x
   3748  f4d7					      endif		; DOUBLEBUFFER
   3749  f4d7
   3750  f4d7		       ae 3d 21 	      ldx	overscanDLLstart
   3751  f4da		       bd 00 18 	      lda	DLLMEM,x
   3752  f4dd		       09 83		      ora	#%10000011	; NMI 2 - end of visible screen
   3753  f4df		       29 f3		      and	#%11110011	; change this to a 1-line DLL, so there's time enough for the "deeper overscan" DLL
   3754  f4e1		       9d 00 18 	      sta	DLLMEM,x
   3755  f4e4				  -	      ifconst	DOUBLEBUFFER
   3756  f4e4				  -	      sta	DLLMEM+DBOFFSET,x
   3757  f4e4					      endif		; DOUBLEBUFFER
   3758  f4e4
   3759  f4e4		       e8		      inx
   3760  f4e5		       e8		      inx
   3761  f4e6		       e8		      inx
   3762  f4e7
   3763  f4e7		       bd 00 18 	      lda	DLLMEM,x
   3764  f4ea		       09 80		      ora	#%10000000	; NMI 3 - deeper overscan
   3765  f4ec		       9d 00 18 	      sta	DLLMEM,x
   3766  f4ef				  -	      ifconst	DOUBLEBUFFER
   3767  f4ef				  -	      sta	DLLMEM+DBOFFSET,x
   3768  f4ef					      endif		; DOUBLEBUFFER
   3769  f4ef
   3770  f4ef		       60		      rts
   3771  f4f0
   3772  f4f0				   createnonvisibledlls
   3773  f4f0		       85 42		      sta	temp1
   3774  f4f2		       4a		      lsr
   3775  f4f3		       4a		      lsr
   3776  f4f4		       4a		      lsr
   3777  f4f5		       4a		      lsr		; /16
   3778  f4f6		       f0 09		      beq	skipcreatenonvisibledlls1loop
   3779  f4f8		       a8		      tay
   3780  f4f9				   createnonvisibledlls1loop
   3781  f4f9		       a9 4f		      lda	#%01001111	;low nibble=16 lines, high nibble=Holey DMA
   3782  f4fb		       20 10 f5 	      jsr	createblankdllentry
   3783  f4fe		       88		      dey
   3784  f4ff		       d0 f8		      bne	createnonvisibledlls1loop
   3785  f501				   skipcreatenonvisibledlls1loop
   3786  f501		       a5 42		      lda	temp1
   3787  f503		       29 0f		      and	#%00001111
   3788  f505		       f0 08		      beq	createnonvisibledllsreturn
   3789  f507		       38		      sec
   3790  f508		       e9 01		      sbc	#1
   3791  f50a		       09 40		      ora	#%01000000
   3792  f50c		       20 10 f5 	      jsr	createblankdllentry
   3793  f50f				   createnonvisibledllsreturn
   3794  f50f		       60		      rts
   3795  f510
   3796  f510				   createblankdllentry
   3797  f510		       9d 00 18 	      sta	DLLMEM,x
   3798  f513				  -	      ifconst	DOUBLEBUFFER
   3799  f513				  -	      sta	DLLMEM+DBOFFSET,x
   3800  f513					      endif		; DOUBLEBUFFER
   3801  f513		       e8		      inx
   3802  f514		       a9 21		      lda	#$21	; blank
   3803  f516		       9d 00 18 	      sta	DLLMEM,x
   3804  f519				  -	      ifconst	DOUBLEBUFFER
   3805  f519				  -	      sta	DLLMEM+DBOFFSET,x
   3806  f519					      endif		; DOUBLEBUFFER
   3807  f519		       e8		      inx
   3808  f51a		       a9 00		      lda	#$00
   3809  f51c		       9d 00 18 	      sta	DLLMEM,x
   3810  f51f				  -	      ifconst	DOUBLEBUFFER
   3811  f51f				  -	      sta	DLLMEM+DBOFFSET,x
   3812  f51f					      endif		; DOUBLEBUFFER
   3813  f51f		       e8		      inx
   3814  f520		       60		      rts
   3815  f521
   3816  f521				   createvisiblezones
   3817  f521		       a0 00		      ldy	#0
   3818  f523				   createvisiblezonesloop
   3819  f523		       b9 68 f6 	      lda.w	DLHEIGHT,y
   3820  f526		       09 20		      ora	#(WZONEHEIGHT * 4)	; set Holey DMA for 8 or 16 tall zones
   3821  f528		       9d 00 18 	      sta	DLLMEM,x
   3822  f52b				  -	      ifconst	DOUBLEBUFFER
   3823  f52b				  -	      sta	DLLMEM+DBOFFSET,x
   3824  f52b					      endif		; DOUBLEBUFFER
   3825  f52b		       e8		      inx
   3826  f52c		       b9 38 f6 	      lda	DLPOINTH,y
   3827  f52f		       9d 00 18 	      sta	DLLMEM,x
   3828  f532				  -	      ifconst	DOUBLEBUFFER
   3829  f532				  -	      sta	DLLMEM+DBOFFSET,x
   3830  f532					      endif		; DOUBLEBUFFER
   3831  f532		       e8		      inx
   3832  f533		       b9 50 f6 	      lda	DLPOINTL,y
   3833  f536		       9d 00 18 	      sta	DLLMEM,x
   3834  f539				  -	      ifconst	DOUBLEBUFFER
   3835  f539				  -	      clc
   3836  f539				  -	      adc	#DOUBLEBUFFEROFFSET
   3837  f539				  -	      sta	DLLMEM+DBOFFSET,x
   3838  f539				  -	      bcc	skiphidoublebufferadjust	; dlls are big endian, so we need to fix the hi byte after-the-fact...
   3839  f539				  -	      inc	DLLMEM+DBOFFSET-1,x
   3840  f539				  -skiphidoublebufferadjust
   3841  f539					      endif		; DOUBLEBUFFER
   3842  f539		       e8		      inx
   3843  f53a		       c8		      iny
   3844  f53b		       c0 18		      cpy	#WZONECOUNT
   3845  f53d		       d0 e4		      bne	createvisiblezonesloop
   3846  f53f		       60		      rts
   3847  f540
   3848  f540				   waitforvblankstart
   3849  f540				   visibleoverwait
   3850  f540		       24 28		      BIT	MSTAT
   3851  f542		       10 fc		      bpl	visibleoverwait
   3852  f544				   vblankstartwait
   3853  f544		       24 28		      BIT	MSTAT
   3854  f546		       30 fc		      bmi	vblankstartwait
   3855  f548		       60		      rts
   3856  f549
   3857  f549				  -	      ifconst	DOUBLEBUFFER
   3858  f549				  -flipdisplaybufferreturn
   3859  f549				  -	      rts
   3860  f549				  -flipdisplaybuffer
   3861  f549				  -	      lda	doublebufferstate
   3862  f549				  -	      beq	flipdisplaybufferreturn	; exit if we're not in double-buffer
   3863  f549				  -
   3864  f549				  -	      jsr	terminatedisplaybuffer	; terminate the working buffer before we flip
   3865  f549				  -
   3866  f549				  -	      lda	doublebufferstate
   3867  f549				  -	      lsr		; /2, so we'll see 0 or 1, rather than 1 or 3
   3868  f549				  -	      tax
   3869  f549				  -
   3870  f549				  -			; ensure we don't flip mid-display. otherwise the displayed DL will be the one the game is working on.
   3871  f549				  -
   3872  f549				  -flipdisplaybufferwait1
   3873  f549				  -	      lda	visibleover
   3874  f549				  -	      beq	flipdisplaybufferwait1
   3875  f549				  -
   3876  f549				  -flipdisplaybufferwait
   3877  f549				  -	      lda	visibleover
   3878  f549				  -	      bne	flipdisplaybufferwait
   3879  f549				  -
   3880  f549				  -	      lda	doublebufferminimumframetarget
   3881  f549				  -	      beq	skipminimumframecode
   3882  f549				  -	      lda	doublebufferminimumframeindex
   3883  f549				  -	      bne	flipdisplaybufferwait1
   3884  f549				  -	      lda	doublebufferminimumframetarget
   3885  f549				  -	      sta	doublebufferminimumframeindex
   3886  f549				  -skipminimumframecode
   3887  f549				  -
   3888  f549				  -	      lda	DLLMEMLutHi,x
   3889  f549				  -	      sta	DPPH
   3890  f549				  -	      lda	DLLMEMLutLo,x
   3891  f549				  -	      sta	DPPL
   3892  f549				  -
   3893  f549				  -	      lda	NewPageflipstate,x
   3894  f549				  -	      sta	doublebufferstate
   3895  f549				  -	      lda	NewPageflipoffset,x
   3896  f549				  -	      sta	doublebufferdloffset
   3897  f549				  -
   3898  f549				  -	      lda	doublebufferbufferdirty
   3899  f549				  -	      beq	flipdisplaybufferreturn
   3900  f549				  -
   3901  f549				  -			; The doublebuffer buffer is dirty, so the game code must have issued a savescreen recently.
   3902  f549				  -			; To make savescreen work with the new working buffer, we need to copy over the saved objects
   3903  f549				  -			; from the displayed buffer to the working buffer...
   3904  f549				  -
   3905  f549				  -	      lda	doublebufferdloffset
   3906  f549				  -	      eor	#DOUBLEBUFFEROFFSET
   3907  f549				  -	      sta	temp6	; make temp6 the anti-doublebufferdloffset variable
   3908  f549				  -
   3909  f549				  -	      ldx	#(WZONECOUNT-1)
   3910  f549				  -copybufferzoneloop
   3911  f549				  -
   3912  f549				  -	      lda	DLPOINTL,x
   3913  f549				  -	      clc
   3914  f549				  -	      adc	doublebufferdloffset
   3915  f549				  -	      sta	temp1
   3916  f549				  -	      lda	DLPOINTH,x
   3917  f549				  -	      adc	#0
   3918  f549				  -	      sta	temp2
   3919  f549				  -
   3920  f549				  -	      lda	DLPOINTL,x
   3921  f549				  -	      clc
   3922  f549				  -	      adc	temp6
   3923  f549				  -	      sta	temp3
   3924  f549				  -	      lda	DLPOINTH,x
   3925  f549				  -	      adc	#0
   3926  f549				  -	      sta	temp4
   3927  f549				  -
   3928  f549				  -	      lda	dlendsave,x
   3929  f549				  -	      tay
   3930  f549				  -copybuffercharsloop
   3931  f549				  -	      lda	(temp3),y
   3932  f549				  -	      sta	(temp1),y
   3933  f549				  -	      dey
   3934  f549				  -	      bpl	copybuffercharsloop
   3935  f549				  -	      dex
   3936  f549				  -	      bpl	copybufferzoneloop
   3937  f549				  -	      lda	#0
   3938  f549				  -	      sta	doublebufferbufferdirty
   3939  f549				  -	      rts
   3940  f549				  -
   3941  f549				  -doublebufferoff
   3942  f549				  -	      lda	#1
   3943  f549				  -	      sta	doublebufferstate
   3944  f549				  -	      jsr	flipdisplaybuffer
   3945  f549				  -	      lda	#0
   3946  f549				  -	      sta	doublebufferstate
   3947  f549				  -	      sta	doublebufferdloffset
   3948  f549				  -	      rts
   3949  f549				  -
   3950  f549				  -DLLMEMLutLo
   3951  f549				  -	      .byte	<DLLMEM,<(DLLMEM+DBOFFSET)
   3952  f549				  -DLLMEMLutHi
   3953  f549				  -	      .byte	>DLLMEM,>(DLLMEM+DBOFFSET)
   3954  f549				  -NewPageflipstate
   3955  f549				  -	      .byte	3,1
   3956  f549				  -NewPageflipoffset
   3957  f549				  -	      .byte	DOUBLEBUFFEROFFSET,0
   3958  f549				  -
   3959  f549					      endif		; DOUBLEBUFFER
   3960  f549
   3961  f549				  -	      ifconst	MOUSESUPPORT
   3962  f549				  -	      ifnconst	DRIVINGSUPPORT
   3963  f549				  -rotationalcompare
   3964  f549				  -			; new=00, old=xx
   3965  f549				  -	      .byte	$00, $01, $ff, $00
   3966  f549				  -			; new=01, old=xx
   3967  f549				  -	      .byte	$ff, $00, $00, $01
   3968  f549				  -			; new=10, old=xx
   3969  f549				  -	      .byte	$01, $00, $00, $ff
   3970  f549				  -			; new=11, old=xx
   3971  f549				  -	      .byte	$00, $ff, $01, $00
   3972  f549				  -	      endif
   3973  f549				  -
   3974  f549				  -			;  0000YyXx st mouse
   3975  f549				  -			;  0000xyXY amiga mouse
   3976  f549				  -amigatoataribits		; swap bits 1 and 4...
   3977  f549				  -	      .byte	%00000000, %00001000, %00000010, %00001010
   3978  f549				  -	      .byte	%00000100, %00001100, %00000110, %00001110
   3979  f549				  -	      .byte	%00000001, %00001001, %00000011, %00001011
   3980  f549				  -	      .byte	%00000101, %00001101, %00000111, %00001111
   3981  f549				  -
   3982  f549				  -mouseupdate
   3983  f549				  -			;LONGDEBUG = 1
   3984  f549				  -	      lda	SWCHA
   3985  f549				  -	      and	#$0f
   3986  f549				  -	      sta	inttemp2
   3987  f549				  -	      lda	SWCHA
   3988  f549				  -	      lsr
   3989  f549				  -	      lsr
   3990  f549				  -	      lsr
   3991  f549				  -	      lsr
   3992  f549				  -	      sta	inttemp1
   3993  f549				  -
   3994  f549				  -	      lda	port0control,x
   3995  f549				  -	      cmp	#8	; st mouse
   3996  f549				  -	      beq	domousecontrol
   3997  f549				  -	      cmp	#9	; amiga mouse
   3998  f549				  -	      bne	skipmousecontrol
   3999  f549				  -			; st mice encode on different bits/joystick-lines than amiga mice...
   4000  f549				  -			;  0000YyXx st mouse
   4001  f549				  -			;  0000xyXY amiga mouse
   4002  f549				  -			; ...so can shuffle the amiga bits to reuse the st driver.
   4003  f549				  -	      lda	inttemp1,x
   4004  f549				  -	      tay
   4005  f549				  -	      lda	amigatoataribits,y
   4006  f549				  -	      sta	inttemp1,x
   4007  f549				  -domousecontrol
   4008  f549				  -			;port X has a mouse enabled
   4009  f549				  -	      lda	inttemp1,x
   4010  f549				  -	      and	#%00000011
   4011  f549				  -	      asl
   4012  f549				  -	      asl
   4013  f549				  -	      ora	mousecodex0,x
   4014  f549				  -	      and	#%00001111
   4015  f549				  -	      tay
   4016  f549				  -	      lda	rotationalcompare,y
   4017  f549				  -	      clc
   4018  f549				  -	      adc	mousex0,x
   4019  f549				  -	      sta	mousex0,x
   4020  f549				  -	      tya
   4021  f549				  -	      lsr
   4022  f549				  -	      lsr
   4023  f549				  -	      sta	mousecodex0,x
   4024  f549				  -
   4025  f549				  -	      lda	inttemp1,x
   4026  f549				  -	      and	#%00001100
   4027  f549				  -	      ora	mousecodey0,x
   4028  f549				  -	      and	#%00001111
   4029  f549				  -	      tay
   4030  f549				  -	      lda	rotationalcompare,y
   4031  f549				  -	      asl		; *2 for y axis, since it has ~double the resolution of x
   4032  f549				  -	      clc
   4033  f549				  -	      adc	mousey0,x
   4034  f549				  -	      sta	mousey0,x
   4035  f549				  -	      tya
   4036  f549				  -	      lsr
   4037  f549				  -	      lsr
   4038  f549				  -	      sta	mousecodey0,x
   4039  f549				  -skipmousecontrol
   4040  f549				  -	      jmp	longreadloopreturn
   4041  f549					      endif		; MOUSESUPPORT
   4042  f549
   4043  f549				   mousebuttonhandler		; outside of conditional, so button handler entry in LUT is valid
   4044  f549				  -	      ifconst	MOUSESUPPORT
   4045  f549				  -			; stick the mouse buttons in the correct shadow register...
   4046  f549				  -	      txa
   4047  f549				  -	      asl
   4048  f549				  -	      tay		; y=x*2
   4049  f549				  -	      lda	INPT1,y
   4050  f549				  -	      eor	#%10000000
   4051  f549				  -	      lsr
   4052  f549				  -	      sta	sINPT1,x
   4053  f549				  -
   4054  f549				  -	      lda	INPT4,x
   4055  f549				  -	      and	#%10000000
   4056  f549				  -	      eor	#%10000000
   4057  f549				  -	      ora	sINPT1,x
   4058  f549				  -	      sta	sINPT1,x
   4059  f549				  -	      jmp	buttonreadloopreturn
   4060  f549					      endif		; MOUSESUPPORT
   4061  f549
   4062  f549				  -	      ifconst	DRIVINGSUPPORT
   4063  f549				  -rotationalcompare
   4064  f549				  -			; new=00, old=xx
   4065  f549				  -	      .byte	$00, $01, $ff, $00
   4066  f549				  -			; new=01, old=xx
   4067  f549				  -	      .byte	$ff, $00, $00, $01
   4068  f549				  -			; new=10, old=xx
   4069  f549				  -	      .byte	$01, $00, $00, $ff
   4070  f549				  -			; new=11, old=xx
   4071  f549				  -	      .byte	$00, $ff, $01, $00
   4072  f549				  -drivingupdate
   4073  f549				  -	      ldx	#1
   4074  f549				  -	      lda	port1control
   4075  f549				  -	      cmp	#6	; check if port1=driving
   4076  f549				  -	      bne	skipfirstdrivingcontrol
   4077  f549				  -	      lda	SWCHA
   4078  f549				  -	      and	#%00000011
   4079  f549				  -	      asl
   4080  f549				  -	      asl
   4081  f549				  -drivingupdateloop
   4082  f549				  -	      ora	controller0statesave,x
   4083  f549				  -	      tay
   4084  f549				  -	      lda	rotationalcompare,y
   4085  f549				  -	      clc
   4086  f549				  -	      adc	drivingposition0,x
   4087  f549				  -	      sta	drivingposition0,x
   4088  f549				  -	      tya
   4089  f549				  -	      lsr
   4090  f549				  -	      lsr
   4091  f549				  -	      sta	controller0statesave,x
   4092  f549				  -skipfirstdrivingcontrol
   4093  f549				  -	      lda	port0control
   4094  f549				  -	      cmp	#6	; check if port0=driving
   4095  f549				  -	      bne	drivingcontrolsloopdone
   4096  f549				  -	      lda	SWCHA
   4097  f549				  -	      and	#%00110000
   4098  f549				  -	      lsr
   4099  f549				  -	      lsr
   4100  f549				  -	      dex
   4101  f549				  -	      bpl	drivingupdateloop
   4102  f549				  -drivingcontrolsloopdone
   4103  f549				  -	      rts
   4104  f549					      endif		; DRIVINGSUPPORT
   4105  f549
   4106  f549				  -	      ifconst	KEYPADSUPPORT
   4107  f549				  -			; ** select keypad rows 0 to 3 over 4 frames...
   4108  f549				  -keypadrowselect
   4109  f549				  -	      ldy	#0
   4110  f549				  -	      lda	port0control
   4111  f549				  -	      cmp	#7
   4112  f549				  -	      bne	skipport0val
   4113  f549				  -	      iny		; y=y+1
   4114  f549				  -skipport0val
   4115  f549				  -	      lda	port1control
   4116  f549				  -	      cmp	#7
   4117  f549				  -	      bne	skipport1val
   4118  f549				  -	      iny
   4119  f549				  -	      iny		; y=y+2
   4120  f549				  -skipport1val
   4121  f549				  -	      lda	keyrowdirectionmask,y
   4122  f549				  -	      sta	CTLSWA
   4123  f549				  -	      tya
   4124  f549				  -	      asl
   4125  f549				  -	      asl
   4126  f549				  -	      sta	inttemp1
   4127  f549				  -	      lda	framecounter
   4128  f549				  -	      and	#3
   4129  f549				  -	      ora	inttemp1
   4130  f549				  -	      tax
   4131  f549				  -	      lda	keyrowselectvalue,x
   4132  f549				  -	      sta	SWCHA
   4133  f549				  -	      rts
   4134  f549				  -
   4135  f549				  -keyrowdirectionmask
   4136  f549				  -	      .byte	#%00000000	; 0 : port0=input  port1=input
   4137  f549				  -	      .byte	#%11110000	; 1 : port0=output port1=input
   4138  f549				  -	      .byte	#%00001111	; 2 : port0=input  port1=output
   4139  f549				  -	      .byte	#%11111111	; 3 : port0=output port1=output
   4140  f549				  -
   4141  f549				  -keyrowselectvalue
   4142  f549				  -	      .byte	#%00000000, #%00000000, #%00000000, #%00000000	; no row selected, all pins high, always
   4143  f549				  -	      .byte	#%11100000, #%11010000, #%10110000, #%01110000	; p0 keypad in
   4144  f549				  -	      .byte	#%00001110, #%00001101, #%00001011, #%00000111	; p1 keypad in
   4145  f549				  -	      .byte	#%11101110, #%11011101, #%10111011, #%01110111	; p0+p1 keypads in
   4146  f549					      endif		;  KEYPADSUPPORT
   4147  f549
   4148  f549				  -	      ifconst	KEYPADSUPPORT
   4149  f549				  -keypadcolumnread
   4150  f549				  -	      lda	framecounter
   4151  f549				  -	      and	#3
   4152  f549				  -	      asl		; x2 because keypad variables are interleaved
   4153  f549				  -	      tax
   4154  f549				  -
   4155  f549				  -	      lda	#0
   4156  f549				  -	      sta	keypadmatrix0a,x
   4157  f549				  -	      sta	keypadmatrix1a,x
   4158  f549				  -
   4159  f549				  -	      lda	INPT0
   4160  f549				  -	      cmp	#$80
   4161  f549				  -	      rol	keypadmatrix0a,x
   4162  f549				  -	      lda	INPT1
   4163  f549				  -	      cmp	#$80
   4164  f549				  -	      rol	keypadmatrix0a,x
   4165  f549				  -	      lda	INPT4
   4166  f549				  -	      cmp	#$80
   4167  f549				  -	      rol	keypadmatrix0a,x
   4168  f549				  -	      lda	keypadmatrix0a,x
   4169  f549				  -	      eor	#%00000111
   4170  f549				  -	      sta	keypadmatrix0a,x
   4171  f549				  -
   4172  f549				  -	      rol	keypadmatrix1a,x
   4173  f549				  -	      lda	INPT2
   4174  f549				  -	      cmp	#$80
   4175  f549				  -	      rol	keypadmatrix1a,x
   4176  f549				  -	      lda	INPT3
   4177  f549				  -	      cmp	#$80
   4178  f549				  -	      rol	keypadmatrix1a,x
   4179  f549				  -	      lda	INPT5
   4180  f549				  -	      cmp	#$80
   4181  f549				  -	      rol	keypadmatrix1a,x
   4182  f549				  -	      lda	keypadmatrix1a,x
   4183  f549				  -	      eor	#%00000111
   4184  f549				  -	      sta	keypadmatrix1a,x
   4185  f549				  -
   4186  f549				  -	      rts
   4187  f549					      endif		; KEYPADSUPPORT
   4188  f549
   4189  f549				   setportforinput
   4190  f549		       a5 e4		      lda	CTLSWAs
   4191  f54b		       3d 54 f5 	      and	allpinsinputlut,x
   4192  f54e		       85 e4		      sta	CTLSWAs
   4193  f550		       8d 81 02 	      sta	CTLSWA
   4194  f553		       60		      rts
   4195  f554
   4196  f554				   allpinsinputlut
   4197  f554		       0f f0		      .byte.b	$0F, $F0
   4198  f556
   4199  f556				   setonebuttonmode
   4200  f556		       a9 14		      lda	#$14
   4201  f558		       8d 83 02 	      sta	CTLSWB	; set both 2-button disable bits to writable
   4202  f55b		       a5 e5		      lda	CTLSWBs
   4203  f55d		       1d 66 f5 	      ora	thisjoy2buttonbit,x
   4204  f560		       85 e5		      sta	CTLSWBs
   4205  f562		       8d 82 02 	      sta	SWCHB	; turn off the 2-button disable bits
   4206  f565		       60		      rts
   4207  f566
   4208  f566				   thisjoy2buttonbit
   4209  f566		       04 10		      .byte.b	$04, $10
   4210  f568
   4211  f568				   settwobuttonmode
   4212  f568		       a9 14		      lda	#$14
   4213  f56a		       8d 83 02 	      sta	CTLSWB	; set both 2-button disable bits to writable
   4214  f56d		       a5 e5		      lda	CTLSWBs
   4215  f56f		       3d 78 f5 	      and	thisjoy2buttonmask,x
   4216  f572		       85 e5		      sta	CTLSWBs
   4217  f574		       8d 82 02 	      sta	SWCHB
   4218  f577		       60		      rts
   4219  f578
   4220  f578				   thisjoy2buttonmask
   4221  f578		       fb ef		      .byte.b	$fb, $ef
   4222  f57a
   4223  f57a							; Provided under the CC0 license. See the included LICENSE.txt for details.
   4224  f57a
   4225  f57a				   START
   4226  f57a				   start
   4227  f57a
   4228  f57a							;******** more or less the Atari recommended startup procedure
   4229  f57a
   4230  f57a		       78		      sei
   4231  f57b		       d8		      cld
   4232  f57c
   4233  f57c					      ifnconst	NOTIALOCK
   4234  f57c		       a9 07		      lda	#$07
   4235  f57e				  -	      else
   4236  f57e				  -	      lda	#$06
   4237  f57e					      endif
   4238  f57e		       85 01		      sta	INPTCTRL	;lock 7800 into 7800 mode
   4239  f580		       a9 7f		      lda	#$7F
   4240  f582		       85 3c		      sta	CTRL	;disable DMA
   4241  f584		       a9 00		      lda	#$00
   4242  f586		       85 38		      sta	OFFSET
   4243  f588					      ifnconst	NOTIALOCK
   4244  f588		       85 01		      sta	INPTCTRL
   4245  f58a					      endif
   4246  f58a		       a2 ff		      ldx	#$FF
   4247  f58c		       9a		      txs
   4248  f58d
   4249  f58d							;************** Clear Memory
   4250  f58d
   4251  f58d		       a2 40		      ldx	#$40
   4252  f58f		       a9 00		      lda	#$00
   4253  f591				   crloop1
   4254  f591		       95 00		      sta	$00,x	;Clear zero page
   4255  f593		       9d 00 01 	      sta	$100,x	;Clear page 1
   4256  f596		       e8		      inx
   4257  f597		       d0 f8		      bne	crloop1
   4258  f599
   4259  f599
   4260  f599		       a0 00		      ldy	#$00	;Clear Ram
   4261  f59b		       a9 18		      lda	#$18	;Start at $1800
   4262  f59d		       85 81		      sta	$81
   4263  f59f		       a9 00		      lda	#$00
   4264  f5a1		       85 80		      sta	$80
   4265  f5a3				   crloop3
   4266  f5a3		       a9 00		      lda	#$00
   4267  f5a5		       91 80		      sta	($80),y	;Store data
   4268  f5a7		       c8		      iny		;Next byte
   4269  f5a8		       d0 f9		      bne	crloop3	;Branch if not done page
   4270  f5aa		       e6 81		      inc	$81	;Next page
   4271  f5ac		       a5 81		      lda	$81
   4272  f5ae		       c9 20		      cmp	#$20	;End at $1FFF
   4273  f5b0		       d0 f1		      bne	crloop3	;Branch if not
   4274  f5b2
   4275  f5b2		       a0 00		      ldy	#$00	;Clear Ram
   4276  f5b4		       a9 22		      lda	#$22	;Start at $2200
   4277  f5b6		       85 81		      sta	$81
   4278  f5b8		       a9 00		      lda	#$00
   4279  f5ba		       85 80		      sta	$80
   4280  f5bc				   crloop4
   4281  f5bc		       a9 00		      lda	#$00
   4282  f5be		       91 80		      sta	($80),y	;Store data
   4283  f5c0		       c8		      iny		;Next byte
   4284  f5c1		       d0 f9		      bne	crloop4	;Branch if not done page
   4285  f5c3		       e6 81		      inc	$81	;Next page
   4286  f5c5		       a5 81		      lda	$81
   4287  f5c7		       c9 27		      cmp	#$27	;End at $27FF
   4288  f5c9		       d0 f1		      bne	crloop4	;Branch if not
   4289  f5cb
   4290  f5cb		       a2 00		      ldx	#$00
   4291  f5cd		       a9 00		      lda	#$00
   4292  f5cf				   crloop5		;Clear 2100-213F, 2000-203F
   4293  f5cf		       9d 00 20 	      sta	$2000,x
   4294  f5d2		       9d 00 21 	      sta	$2100,x
   4295  f5d5		       e8		      inx
   4296  f5d6		       e0 40		      cpx	#$40
   4297  f5d8		       d0 f5		      bne	crloop5
   4298  f5da
   4299  f5da		       85 80		      sta	$80
   4300  f5dc		       85 81		      sta	$81
   4301  f5de		       85 82		      sta	$82
   4302  f5e0		       85 83		      sta	$83
   4303  f5e2
   4304  f5e2							;seed random number with hopefully-random timer value
   4305  f5e2		       a9 01		      lda	#1
   4306  f5e4		       0d 84 02 	      ora	INTIM
   4307  f5e7		       85 40		      sta	rand
   4308  f5e9
   4309  f5e9							; detect the console type...
   4310  f5e9				   pndetectvblankstart
   4311  f5e9		       a5 28		      lda	MSTAT
   4312  f5eb		       10 fc		      bpl	pndetectvblankstart	; if we're not in VBLANK, wait for it to start 
   4313  f5ed				   pndetectvblankover
   4314  f5ed		       a5 28		      lda	MSTAT
   4315  f5ef		       30 fc		      bmi	pndetectvblankover	;  then wait for it to be over
   4316  f5f1		       a0 00		      ldy	#$00
   4317  f5f3		       a2 00		      ldx	#$00
   4318  f5f5				   pndetectvblankhappening
   4319  f5f5		       a5 28		      lda	MSTAT
   4320  f5f7		       30 07		      bmi	pndetectinvblank	;  if VBLANK starts, exit our counting loop 
   4321  f5f9		       85 24		      sta	WSYNC
   4322  f5fb		       85 24		      sta	WSYNC
   4323  f5fd		       e8		      inx
   4324  f5fe		       d0 f5		      bne	pndetectvblankhappening
   4325  f600				   pndetectinvblank
   4326  f600		       e0 7d		      cpx	#125
   4327  f602		       90 02		      bcc	pndetecispal
   4328  f604		       a0 01		      ldy	#$01
   4329  f606				   pndetecispal
   4330  f606		       8c 09 21 	      sty	paldetected
   4331  f609
   4332  f609		       20 af f4 	      jsr	createallgamedlls
   4333  f60c
   4334  f60c		       a9 18		      lda	#>DLLMEM
   4335  f60e		       85 2c		      sta	DPPH
   4336  f610		       a9 00		      lda	#<DLLMEM
   4337  f612		       85 30		      sta	DPPL
   4338  f614
   4339  f614							; CTRL 76543210
   4340  f614							; 7 colorburst kill
   4341  f614							; 6,5 dma ctrl 2=normal DMA, 3=no DMA
   4342  f614							; 4 character width 1=2 byte chars, 0=1 byte chars
   4343  f614							; 3 border control 0=background color border, 1=black border
   4344  f614							; 2 kangaroo mode 0=transparancy, 1=kangaroo
   4345  f614							; 1,0 read mode 0=160x2/160x4 1=N/A 2=320B/320D 3=320A/320C
   4346  f614
   4347  f614				  -	      ifconst	DOUBLEWIDE
   4348  f614				  -	      lda	#%01010000	;Enable DMA, mode=160x2/160x4, 2x character width
   4349  f614					      else
   4350  f614		       a9 40		      lda	#%01000000	;Enable DMA, mode=160x2/160x4
   4351  f616					      endif
   4352  f616		       85 3c		      sta	CTRL
   4353  f618		       8d 07 21 	      sta	sCTRL
   4354  f61b
   4355  f61b		       20 a2 f4 	      jsr	vblankresync
   4356  f61e
   4357  f61e		       a9 04		      lda	#%00000100	; leave cartridge plugged in for any testing
   4358  f620		       8d b7 01 	      sta	XCTRL1s
   4359  f623
   4360  f623				  -	      ifconst	pokeysupport
   4361  f623				  -			; pokey support is compiled in, so try to detect it...
   4362  f623				  -	      jsr	detectpokeylocation
   4363  f623					      endif
   4364  f623
   4365  f623		       a9 01		      lda	#1	; default for port 0 and 1 is a regular joystick
   4366  f625		       8d e2 01 	      sta	port0control
   4367  f628		       8d e3 01 	      sta	port1control
   4368  f62b
   4369  f62b							;Setup port A to read mode
   4370  f62b							;lda #$00
   4371  f62b							;sta SWCHA
   4372  f62b							;sta CTLSWA
   4373  f62b
   4374  f62b				  -	      ifconst	HSSUPPORT
   4375  f62b				  -			; try to detect HSC
   4376  f62b				  -	      jsr	detecthsc
   4377  f62b				  -	      and	#1
   4378  f62b				  -	      sta	hsdevice
   4379  f62b				  -skipHSCdetect
   4380  f62b				  -			; try to detect AtariVox eeprom
   4381  f62b				  -	      jsr	detectatarivoxeeprom
   4382  f62b				  -	      and	#2
   4383  f62b				  -	      ora	hsdevice
   4384  f62b				  -	      cmp	#3
   4385  f62b				  -	      bne	storeAinhsdevice
   4386  f62b				  -			; For now, we tie break by giving HSC priority over AtariVox.
   4387  f62b				  -			; Later we should check each device's priority byte if set, instead, 
   4388  f62b				  -	      lda	#2
   4389  f62b				  -storeAinhsdevice
   4390  f62b				  -	      sta	hsdevice
   4391  f62b				  -	      lda	#$ff
   4392  f62b				  -	      sta	hsdifficulty
   4393  f62b				  -	      sta	hsgameslot
   4394  f62b				  -	      sta	hsnewscoreline
   4395  f62b					      endif
   4396  f62b
   4397  f62b				  -	      ifconst	AVOXVOICE
   4398  f62b				  -	      jsr	silenceavoxvoice
   4399  f62b					      endif
   4400  f62b
   4401  f62b				  -	      ifconst	SGRAM
   4402  f62b				  -			; check if we actually have SGRAM. If not, probe XM for it...
   4403  f62b				  -	      ldy	#$EA
   4404  f62b				  -	      sty	$4000
   4405  f62b				  -	      ldy	$4000
   4406  f62b				  -	      cpy	#$EA
   4407  f62b				  -	      beq	skipSGRAMcheck
   4408  f62b				  -	      lda	XCTRL1s
   4409  f62b				  -	      ora	#%01100100
   4410  f62b				  -	      sta	XCTRL1
   4411  f62b				  -	      sty	$4000
   4412  f62b				  -	      ldy	$4000
   4413  f62b				  -	      cpy	#$EA
   4414  f62b				  -	      bne	skipSGRAMcheck
   4415  f62b				  -			;if we're here, XM memory satisfied our RAM requirement
   4416  f62b				  -	      sta	XCTRL1s	; save it
   4417  f62b				  -	      lda	#$10
   4418  f62b				  -	      sta	XCTRL2
   4419  f62b				  -	      sta	XCTRL3
   4420  f62b				  -skipSGRAMcheck
   4421  f62b					      endif
   4422  f62b
   4423  f62b				  -	      ifconst	TURNEDOFF
   4424  f62b				  -	      ldx	#1
   4425  f62b				  -	      ldy	#3
   4426  f62b				  -joystickdetectloop
   4427  f62b				  -	      jsr	setonebuttonmode
   4428  f62b				  -			; ensure we're in one-button mode and check for a genesis controller
   4429  f62b				  -	      lda	INPT0,y
   4430  f62b				  -	      and	#$80
   4431  f62b				  -	      sta	genesisdetected0,x
   4432  f62b				  -	      bne	skipsetgenesistwobutton
   4433  f62b				  -skipsetgenesis
   4434  f62b				  -	      jsr	settwobuttonmode
   4435  f62b				  -skipsetgenesistwobutton
   4436  f62b				  -	      dey
   4437  f62b				  -	      dey
   4438  f62b				  -	      dex
   4439  f62b				  -	      bpl	joystickdetectloop
   4440  f62b					      endif
   4441  f62b
   4442  f62b		       a2 01		      ldx	#1
   4443  f62d		       20 68 f5 	      jsr	settwobuttonmode
   4444  f630		       a2 00		      ldx	#0
   4445  f632		       20 68 f5 	      jsr	settwobuttonmode
   4446  f635
   4447  f635				  -	      ifconst	bankswitchmode
   4448  f635				  -			; we need to switch to the first bank before we jump there!
   4449  f635				  -	      ifconst	MCPDEVCART
   4450  f635				  -	      lda	#$18	; xxx11nnn - switch to bank 0
   4451  f635				  -	      sta	$3000
   4452  f635				  -	      else
   4453  f635				  -	      lda	#0
   4454  f635				  -	      sta	$8000
   4455  f635				  -	      endif
   4456  f635					      endif
   4457  f635
   4458  f635		       4c 13 40 	      jmp	game
   4459  f638
   4460  f638
   4461  f638							; Provided under the CC0 license. See the included LICENSE.txt for details.
   4462  f638
   4463  f638							;************** Setup DLL entries
   4464  f638
   4465  f638							; setup some working definitions, to avoid ifnconst mess elsewhere...
   4466  f638					      ifnconst	SCREENHEIGHT
   4467  f638		       00 c0	   WSCREENHEIGHT =	192
   4468  f638				  -	      else
   4469  f638				  -WSCREENHEIGHT =	SCREENHEIGHT
   4470  f638					      endif
   4471  f638
   4472  f638				  -	      ifnconst	ZONEHEIGHT
   4473  f638				  -WZONEHEIGHT =	16
   4474  f638					      else
   4475  f638		       00 08	   WZONEHEIGHT =	ZONEHEIGHT
   4476  f638					      endif
   4477  f638
   4478  f638					      ifnconst	ZONECOUNT
   4479  f638		       00 18	   WZONECOUNT =	(WSCREENHEIGHT/WZONEHEIGHT)
   4480  f638				  -	      else
   4481  f638				  -WZONECOUNT =	ZONECOUNT
   4482  f638					      endif
   4483  f638
   4484  f638							; top of the frame, non-visible lines. this is based on NTSC,
   4485  f638							; but we add in extra NV lines at the end of the display to ensure
   4486  f638							; our PAL friends can play the game without it crashing.
   4487  f638		       00 19	   NVLINES    =	((243-WSCREENHEIGHT)/2)
   4488  f638
   4489  f638					      ifnconst	DLMEMSTART
   4490  f638					      ifnconst	DOUBLEBUFFER
   4491  f638		       18 80	   WDLMEMSTART =	$1880
   4492  f638				  -	      else
   4493  f638				  -WDLMEMSTART =	$18E0
   4494  f638					      endif		; DOUBLEBUFFER
   4495  f638				  -	      else
   4496  f638				  -WDLMEMSTART =	DLMEMSTART
   4497  f638					      endif
   4498  f638
   4499  f638					      ifnconst	DLMEMEND
   4500  f638				  -	      ifconst	EXTRADLMEMORY
   4501  f638				  -WDLMEMEND  =	$23FF
   4502  f638					      else
   4503  f638		       1f ff	   WDLMEMEND  =	$1FFF
   4504  f638					      endif
   4505  f638				  -	      else
   4506  f638				  -WDLMEMEND  =	DLMEMEND
   4507  f638					      endif
   4508  f638
   4509  f638
   4510  f638		       07 80	   WMEMSIZE   =	(WDLMEMEND-WDLMEMSTART+1)
   4511  f638
   4512  f638					      ifnconst	DOUBLEBUFFER
   4513  f638		       00 4b	   DLLASTOBJ  =	((((WMEMSIZE/WZONECOUNT)-2)/5)*5)	; -2 to always ensure we have 1x double-byte terminator
   4514  f638				  -	      else
   4515  f638				  -DLLASTOBJ  =	((((WMEMSIZE/WZONECOUNT)-4)/10)*5)	; -4 to always ensure we have 2x double-byte terminators
   4516  f638					      endif
   4517  f638
   4518  f638		       00 4d	   TDOUBLEBUFFEROFFSET =	(DLLASTOBJ+2)	; offset between DL buffers. ie. half the real DL
   4519  f638				  -	      if	TDOUBLEBUFFEROFFSET > 255
   4520  f638				  -DOUBLEBUFFEROFFSET =	255
   4521  f638					      else
   4522  f638		       00 4d	   DOUBLEBUFFEROFFSET =	(DLLASTOBJ+2)
   4523  f638					      endif
   4524  f638
   4525  f638				  -	      ifconst	EXTRADLMEMORY
   4526  f638				  -SECONDDLHALFSTART SET	$2300
   4527  f638					      endif
   4528  f638
   4529  f638				   DLPOINTH
   4530  f638				   DLINDEX    SET	0
   4531  f638					      REPEAT	WZONECOUNT
   4532  f638				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4533  f638				  -	      ifconst	EXTRADLMEMORY
   4534  f638				  -	      if	TMPMEMADDRESS > $1FFF
   4535  f638				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4536  f638				  -	      else
   4537  f638				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4538  f638				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4539  f638				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   4540  f638				  -	      endif
   4541  f638				  -	      endif		; TMPMEMADDRESS > $1FFF
   4542  f638					      endif		; EXTRADLMEMORY
   4543  f638							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   4544  f638		       18		      .byte.b	>TMPMEMADDRESS
   4545  f638				   DLINDEX    SET	DLINDEX + 1
   4531  f638					      REPEND
   4532  f638				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4533  f639				  -	      ifconst	EXTRADLMEMORY
   4534  f639				  -	      if	TMPMEMADDRESS > $1FFF
   4535  f639				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4536  f639				  -	      else
   4537  f639				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4538  f639				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4539  f639				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   4540  f639				  -	      endif
   4541  f639				  -	      endif		; TMPMEMADDRESS > $1FFF
   4542  f639					      endif		; EXTRADLMEMORY
   4543  f639							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   4544  f639		       18		      .byte.b	>TMPMEMADDRESS
   4545  f639				   DLINDEX    SET	DLINDEX + 1
   4531  f639					      REPEND
   4532  f639				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4533  f63a				  -	      ifconst	EXTRADLMEMORY
   4534  f63a				  -	      if	TMPMEMADDRESS > $1FFF
   4535  f63a				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4536  f63a				  -	      else
   4537  f63a				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4538  f63a				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4539  f63a				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   4540  f63a				  -	      endif
   4541  f63a				  -	      endif		; TMPMEMADDRESS > $1FFF
   4542  f63a					      endif		; EXTRADLMEMORY
   4543  f63a							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   4544  f63a		       19		      .byte.b	>TMPMEMADDRESS
   4545  f63a				   DLINDEX    SET	DLINDEX + 1
   4531  f63a					      REPEND
   4532  f63a				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4533  f63b				  -	      ifconst	EXTRADLMEMORY
   4534  f63b				  -	      if	TMPMEMADDRESS > $1FFF
   4535  f63b				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4536  f63b				  -	      else
   4537  f63b				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4538  f63b				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4539  f63b				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   4540  f63b				  -	      endif
   4541  f63b				  -	      endif		; TMPMEMADDRESS > $1FFF
   4542  f63b					      endif		; EXTRADLMEMORY
   4543  f63b							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   4544  f63b		       19		      .byte.b	>TMPMEMADDRESS
   4545  f63b				   DLINDEX    SET	DLINDEX + 1
   4531  f63b					      REPEND
   4532  f63b				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4533  f63c				  -	      ifconst	EXTRADLMEMORY
   4534  f63c				  -	      if	TMPMEMADDRESS > $1FFF
   4535  f63c				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4536  f63c				  -	      else
   4537  f63c				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4538  f63c				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4539  f63c				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   4540  f63c				  -	      endif
   4541  f63c				  -	      endif		; TMPMEMADDRESS > $1FFF
   4542  f63c					      endif		; EXTRADLMEMORY
   4543  f63c							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   4544  f63c		       19		      .byte.b	>TMPMEMADDRESS
   4545  f63c				   DLINDEX    SET	DLINDEX + 1
   4531  f63c					      REPEND
   4532  f63c				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4533  f63d				  -	      ifconst	EXTRADLMEMORY
   4534  f63d				  -	      if	TMPMEMADDRESS > $1FFF
   4535  f63d				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4536  f63d				  -	      else
   4537  f63d				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4538  f63d				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4539  f63d				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   4540  f63d				  -	      endif
   4541  f63d				  -	      endif		; TMPMEMADDRESS > $1FFF
   4542  f63d					      endif		; EXTRADLMEMORY
   4543  f63d							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   4544  f63d		       1a		      .byte.b	>TMPMEMADDRESS
   4545  f63d				   DLINDEX    SET	DLINDEX + 1
   4531  f63d					      REPEND
   4532  f63d				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4533  f63e				  -	      ifconst	EXTRADLMEMORY
   4534  f63e				  -	      if	TMPMEMADDRESS > $1FFF
   4535  f63e				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4536  f63e				  -	      else
   4537  f63e				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4538  f63e				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4539  f63e				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   4540  f63e				  -	      endif
   4541  f63e				  -	      endif		; TMPMEMADDRESS > $1FFF
   4542  f63e					      endif		; EXTRADLMEMORY
   4543  f63e							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   4544  f63e		       1a		      .byte.b	>TMPMEMADDRESS
   4545  f63e				   DLINDEX    SET	DLINDEX + 1
   4531  f63e					      REPEND
   4532  f63e				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4533  f63f				  -	      ifconst	EXTRADLMEMORY
   4534  f63f				  -	      if	TMPMEMADDRESS > $1FFF
   4535  f63f				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4536  f63f				  -	      else
   4537  f63f				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4538  f63f				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4539  f63f				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   4540  f63f				  -	      endif
   4541  f63f				  -	      endif		; TMPMEMADDRESS > $1FFF
   4542  f63f					      endif		; EXTRADLMEMORY
   4543  f63f							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   4544  f63f		       1a		      .byte.b	>TMPMEMADDRESS
   4545  f63f				   DLINDEX    SET	DLINDEX + 1
   4531  f63f					      REPEND
   4532  f63f				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4533  f640				  -	      ifconst	EXTRADLMEMORY
   4534  f640				  -	      if	TMPMEMADDRESS > $1FFF
   4535  f640				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4536  f640				  -	      else
   4537  f640				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4538  f640				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4539  f640				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   4540  f640				  -	      endif
   4541  f640				  -	      endif		; TMPMEMADDRESS > $1FFF
   4542  f640					      endif		; EXTRADLMEMORY
   4543  f640							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   4544  f640		       1b		      .byte.b	>TMPMEMADDRESS
   4545  f640				   DLINDEX    SET	DLINDEX + 1
   4531  f640					      REPEND
   4532  f640				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4533  f641				  -	      ifconst	EXTRADLMEMORY
   4534  f641				  -	      if	TMPMEMADDRESS > $1FFF
   4535  f641				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4536  f641				  -	      else
   4537  f641				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4538  f641				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4539  f641				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   4540  f641				  -	      endif
   4541  f641				  -	      endif		; TMPMEMADDRESS > $1FFF
   4542  f641					      endif		; EXTRADLMEMORY
   4543  f641							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   4544  f641		       1b		      .byte.b	>TMPMEMADDRESS
   4545  f641				   DLINDEX    SET	DLINDEX + 1
   4531  f641					      REPEND
   4532  f641				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4533  f642				  -	      ifconst	EXTRADLMEMORY
   4534  f642				  -	      if	TMPMEMADDRESS > $1FFF
   4535  f642				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4536  f642				  -	      else
   4537  f642				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4538  f642				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4539  f642				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   4540  f642				  -	      endif
   4541  f642				  -	      endif		; TMPMEMADDRESS > $1FFF
   4542  f642					      endif		; EXTRADLMEMORY
   4543  f642							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   4544  f642		       1b		      .byte.b	>TMPMEMADDRESS
   4545  f642				   DLINDEX    SET	DLINDEX + 1
   4531  f642					      REPEND
   4532  f642				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4533  f643				  -	      ifconst	EXTRADLMEMORY
   4534  f643				  -	      if	TMPMEMADDRESS > $1FFF
   4535  f643				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4536  f643				  -	      else
   4537  f643				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4538  f643				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4539  f643				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   4540  f643				  -	      endif
   4541  f643				  -	      endif		; TMPMEMADDRESS > $1FFF
   4542  f643					      endif		; EXTRADLMEMORY
   4543  f643							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   4544  f643		       1b		      .byte.b	>TMPMEMADDRESS
   4545  f643				   DLINDEX    SET	DLINDEX + 1
   4531  f643					      REPEND
   4532  f643				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4533  f644				  -	      ifconst	EXTRADLMEMORY
   4534  f644				  -	      if	TMPMEMADDRESS > $1FFF
   4535  f644				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4536  f644				  -	      else
   4537  f644				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4538  f644				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4539  f644				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   4540  f644				  -	      endif
   4541  f644				  -	      endif		; TMPMEMADDRESS > $1FFF
   4542  f644					      endif		; EXTRADLMEMORY
   4543  f644							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   4544  f644		       1c		      .byte.b	>TMPMEMADDRESS
   4545  f644				   DLINDEX    SET	DLINDEX + 1
   4531  f644					      REPEND
   4532  f644				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4533  f645				  -	      ifconst	EXTRADLMEMORY
   4534  f645				  -	      if	TMPMEMADDRESS > $1FFF
   4535  f645				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4536  f645				  -	      else
   4537  f645				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4538  f645				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4539  f645				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   4540  f645				  -	      endif
   4541  f645				  -	      endif		; TMPMEMADDRESS > $1FFF
   4542  f645					      endif		; EXTRADLMEMORY
   4543  f645							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   4544  f645		       1c		      .byte.b	>TMPMEMADDRESS
   4545  f645				   DLINDEX    SET	DLINDEX + 1
   4531  f645					      REPEND
   4532  f645				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4533  f646				  -	      ifconst	EXTRADLMEMORY
   4534  f646				  -	      if	TMPMEMADDRESS > $1FFF
   4535  f646				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4536  f646				  -	      else
   4537  f646				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4538  f646				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4539  f646				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   4540  f646				  -	      endif
   4541  f646				  -	      endif		; TMPMEMADDRESS > $1FFF
   4542  f646					      endif		; EXTRADLMEMORY
   4543  f646							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   4544  f646		       1c		      .byte.b	>TMPMEMADDRESS
   4545  f646				   DLINDEX    SET	DLINDEX + 1
   4531  f646					      REPEND
   4532  f646				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4533  f647				  -	      ifconst	EXTRADLMEMORY
   4534  f647				  -	      if	TMPMEMADDRESS > $1FFF
   4535  f647				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4536  f647				  -	      else
   4537  f647				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4538  f647				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4539  f647				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   4540  f647				  -	      endif
   4541  f647				  -	      endif		; TMPMEMADDRESS > $1FFF
   4542  f647					      endif		; EXTRADLMEMORY
   4543  f647							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   4544  f647		       1d		      .byte.b	>TMPMEMADDRESS
   4545  f647				   DLINDEX    SET	DLINDEX + 1
   4531  f647					      REPEND
   4532  f647				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4533  f648				  -	      ifconst	EXTRADLMEMORY
   4534  f648				  -	      if	TMPMEMADDRESS > $1FFF
   4535  f648				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4536  f648				  -	      else
   4537  f648				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4538  f648				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4539  f648				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   4540  f648				  -	      endif
   4541  f648				  -	      endif		; TMPMEMADDRESS > $1FFF
   4542  f648					      endif		; EXTRADLMEMORY
   4543  f648							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   4544  f648		       1d		      .byte.b	>TMPMEMADDRESS
   4545  f648				   DLINDEX    SET	DLINDEX + 1
   4531  f648					      REPEND
   4532  f648				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4533  f649				  -	      ifconst	EXTRADLMEMORY
   4534  f649				  -	      if	TMPMEMADDRESS > $1FFF
   4535  f649				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4536  f649				  -	      else
   4537  f649				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4538  f649				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4539  f649				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   4540  f649				  -	      endif
   4541  f649				  -	      endif		; TMPMEMADDRESS > $1FFF
   4542  f649					      endif		; EXTRADLMEMORY
   4543  f649							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   4544  f649		       1d		      .byte.b	>TMPMEMADDRESS
   4545  f649				   DLINDEX    SET	DLINDEX + 1
   4531  f649					      REPEND
   4532  f649				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4533  f64a				  -	      ifconst	EXTRADLMEMORY
   4534  f64a				  -	      if	TMPMEMADDRESS > $1FFF
   4535  f64a				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4536  f64a				  -	      else
   4537  f64a				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4538  f64a				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4539  f64a				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   4540  f64a				  -	      endif
   4541  f64a				  -	      endif		; TMPMEMADDRESS > $1FFF
   4542  f64a					      endif		; EXTRADLMEMORY
   4543  f64a							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   4544  f64a		       1e		      .byte.b	>TMPMEMADDRESS
   4545  f64a				   DLINDEX    SET	DLINDEX + 1
   4531  f64a					      REPEND
   4532  f64a				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4533  f64b				  -	      ifconst	EXTRADLMEMORY
   4534  f64b				  -	      if	TMPMEMADDRESS > $1FFF
   4535  f64b				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4536  f64b				  -	      else
   4537  f64b				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4538  f64b				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4539  f64b				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   4540  f64b				  -	      endif
   4541  f64b				  -	      endif		; TMPMEMADDRESS > $1FFF
   4542  f64b					      endif		; EXTRADLMEMORY
   4543  f64b							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   4544  f64b		       1e		      .byte.b	>TMPMEMADDRESS
   4545  f64b				   DLINDEX    SET	DLINDEX + 1
   4531  f64b					      REPEND
   4532  f64b				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4533  f64c				  -	      ifconst	EXTRADLMEMORY
   4534  f64c				  -	      if	TMPMEMADDRESS > $1FFF
   4535  f64c				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4536  f64c				  -	      else
   4537  f64c				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4538  f64c				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4539  f64c				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   4540  f64c				  -	      endif
   4541  f64c				  -	      endif		; TMPMEMADDRESS > $1FFF
   4542  f64c					      endif		; EXTRADLMEMORY
   4543  f64c							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   4544  f64c		       1e		      .byte.b	>TMPMEMADDRESS
   4545  f64c				   DLINDEX    SET	DLINDEX + 1
   4531  f64c					      REPEND
   4532  f64c				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4533  f64d				  -	      ifconst	EXTRADLMEMORY
   4534  f64d				  -	      if	TMPMEMADDRESS > $1FFF
   4535  f64d				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4536  f64d				  -	      else
   4537  f64d				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4538  f64d				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4539  f64d				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   4540  f64d				  -	      endif
   4541  f64d				  -	      endif		; TMPMEMADDRESS > $1FFF
   4542  f64d					      endif		; EXTRADLMEMORY
   4543  f64d							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   4544  f64d		       1f		      .byte.b	>TMPMEMADDRESS
   4545  f64d				   DLINDEX    SET	DLINDEX + 1
   4531  f64d					      REPEND
   4532  f64d				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4533  f64e				  -	      ifconst	EXTRADLMEMORY
   4534  f64e				  -	      if	TMPMEMADDRESS > $1FFF
   4535  f64e				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4536  f64e				  -	      else
   4537  f64e				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4538  f64e				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4539  f64e				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   4540  f64e				  -	      endif
   4541  f64e				  -	      endif		; TMPMEMADDRESS > $1FFF
   4542  f64e					      endif		; EXTRADLMEMORY
   4543  f64e							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   4544  f64e		       1f		      .byte.b	>TMPMEMADDRESS
   4545  f64e				   DLINDEX    SET	DLINDEX + 1
   4531  f64e					      REPEND
   4532  f64e				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4533  f64f				  -	      ifconst	EXTRADLMEMORY
   4534  f64f				  -	      if	TMPMEMADDRESS > $1FFF
   4535  f64f				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4536  f64f				  -	      else
   4537  f64f				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4538  f64f				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4539  f64f				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   4540  f64f				  -	      endif
   4541  f64f				  -	      endif		; TMPMEMADDRESS > $1FFF
   4542  f64f					      endif		; EXTRADLMEMORY
   4543  f64f							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   4544  f64f		       1f		      .byte.b	>TMPMEMADDRESS
   4545  f64f				   DLINDEX    SET	DLINDEX + 1
   4546  f650					      REPEND
   4547  f650
   4548  f650				  -	      ifconst	EXTRADLMEMORY
   4549  f650				  -	      echo	"   ",[SECONDDLHALFSTART],"to",[$27FF],"was claimed as extra DL memory."
   4550  f650					      endif
   4551  f650
   4552  f650
   4553  f650				   DLPOINTL
   4554  f650				   DLINDEX    SET	0
   4555  f650					      REPEAT	WZONECOUNT
   4556  f650				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4557  f650				  -	      ifconst	EXTRADLMEMORY
   4558  f650				  -	      if	TMPMEMADDRESS > $1FFF
   4559  f650				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4560  f650				  -	      else
   4561  f650				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4562  f650				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4563  f650				  -	      endif
   4564  f650				  -	      endif		; TMPMEMADDRESS > $1FFF
   4565  f650					      endif		; EXTRADLMEMORY
   4566  f650		       80		      .byte.b	<TMPMEMADDRESS
   4567  f650				   DLINDEX    SET	DLINDEX + 1
   4555  f650					      REPEND
   4556  f650				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4557  f651				  -	      ifconst	EXTRADLMEMORY
   4558  f651				  -	      if	TMPMEMADDRESS > $1FFF
   4559  f651				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4560  f651				  -	      else
   4561  f651				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4562  f651				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4563  f651				  -	      endif
   4564  f651				  -	      endif		; TMPMEMADDRESS > $1FFF
   4565  f651					      endif		; EXTRADLMEMORY
   4566  f651		       d0		      .byte.b	<TMPMEMADDRESS
   4567  f651				   DLINDEX    SET	DLINDEX + 1
   4555  f651					      REPEND
   4556  f651				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4557  f652				  -	      ifconst	EXTRADLMEMORY
   4558  f652				  -	      if	TMPMEMADDRESS > $1FFF
   4559  f652				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4560  f652				  -	      else
   4561  f652				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4562  f652				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4563  f652				  -	      endif
   4564  f652				  -	      endif		; TMPMEMADDRESS > $1FFF
   4565  f652					      endif		; EXTRADLMEMORY
   4566  f652		       20		      .byte.b	<TMPMEMADDRESS
   4567  f652				   DLINDEX    SET	DLINDEX + 1
   4555  f652					      REPEND
   4556  f652				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4557  f653				  -	      ifconst	EXTRADLMEMORY
   4558  f653				  -	      if	TMPMEMADDRESS > $1FFF
   4559  f653				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4560  f653				  -	      else
   4561  f653				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4562  f653				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4563  f653				  -	      endif
   4564  f653				  -	      endif		; TMPMEMADDRESS > $1FFF
   4565  f653					      endif		; EXTRADLMEMORY
   4566  f653		       70		      .byte.b	<TMPMEMADDRESS
   4567  f653				   DLINDEX    SET	DLINDEX + 1
   4555  f653					      REPEND
   4556  f653				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4557  f654				  -	      ifconst	EXTRADLMEMORY
   4558  f654				  -	      if	TMPMEMADDRESS > $1FFF
   4559  f654				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4560  f654				  -	      else
   4561  f654				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4562  f654				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4563  f654				  -	      endif
   4564  f654				  -	      endif		; TMPMEMADDRESS > $1FFF
   4565  f654					      endif		; EXTRADLMEMORY
   4566  f654		       c0		      .byte.b	<TMPMEMADDRESS
   4567  f654				   DLINDEX    SET	DLINDEX + 1
   4555  f654					      REPEND
   4556  f654				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4557  f655				  -	      ifconst	EXTRADLMEMORY
   4558  f655				  -	      if	TMPMEMADDRESS > $1FFF
   4559  f655				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4560  f655				  -	      else
   4561  f655				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4562  f655				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4563  f655				  -	      endif
   4564  f655				  -	      endif		; TMPMEMADDRESS > $1FFF
   4565  f655					      endif		; EXTRADLMEMORY
   4566  f655		       10		      .byte.b	<TMPMEMADDRESS
   4567  f655				   DLINDEX    SET	DLINDEX + 1
   4555  f655					      REPEND
   4556  f655				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4557  f656				  -	      ifconst	EXTRADLMEMORY
   4558  f656				  -	      if	TMPMEMADDRESS > $1FFF
   4559  f656				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4560  f656				  -	      else
   4561  f656				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4562  f656				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4563  f656				  -	      endif
   4564  f656				  -	      endif		; TMPMEMADDRESS > $1FFF
   4565  f656					      endif		; EXTRADLMEMORY
   4566  f656		       60		      .byte.b	<TMPMEMADDRESS
   4567  f656				   DLINDEX    SET	DLINDEX + 1
   4555  f656					      REPEND
   4556  f656				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4557  f657				  -	      ifconst	EXTRADLMEMORY
   4558  f657				  -	      if	TMPMEMADDRESS > $1FFF
   4559  f657				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4560  f657				  -	      else
   4561  f657				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4562  f657				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4563  f657				  -	      endif
   4564  f657				  -	      endif		; TMPMEMADDRESS > $1FFF
   4565  f657					      endif		; EXTRADLMEMORY
   4566  f657		       b0		      .byte.b	<TMPMEMADDRESS
   4567  f657				   DLINDEX    SET	DLINDEX + 1
   4555  f657					      REPEND
   4556  f657				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4557  f658				  -	      ifconst	EXTRADLMEMORY
   4558  f658				  -	      if	TMPMEMADDRESS > $1FFF
   4559  f658				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4560  f658				  -	      else
   4561  f658				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4562  f658				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4563  f658				  -	      endif
   4564  f658				  -	      endif		; TMPMEMADDRESS > $1FFF
   4565  f658					      endif		; EXTRADLMEMORY
   4566  f658		       00		      .byte.b	<TMPMEMADDRESS
   4567  f658				   DLINDEX    SET	DLINDEX + 1
   4555  f658					      REPEND
   4556  f658				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4557  f659				  -	      ifconst	EXTRADLMEMORY
   4558  f659				  -	      if	TMPMEMADDRESS > $1FFF
   4559  f659				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4560  f659				  -	      else
   4561  f659				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4562  f659				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4563  f659				  -	      endif
   4564  f659				  -	      endif		; TMPMEMADDRESS > $1FFF
   4565  f659					      endif		; EXTRADLMEMORY
   4566  f659		       50		      .byte.b	<TMPMEMADDRESS
   4567  f659				   DLINDEX    SET	DLINDEX + 1
   4555  f659					      REPEND
   4556  f659				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4557  f65a				  -	      ifconst	EXTRADLMEMORY
   4558  f65a				  -	      if	TMPMEMADDRESS > $1FFF
   4559  f65a				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4560  f65a				  -	      else
   4561  f65a				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4562  f65a				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4563  f65a				  -	      endif
   4564  f65a				  -	      endif		; TMPMEMADDRESS > $1FFF
   4565  f65a					      endif		; EXTRADLMEMORY
   4566  f65a		       a0		      .byte.b	<TMPMEMADDRESS
   4567  f65a				   DLINDEX    SET	DLINDEX + 1
   4555  f65a					      REPEND
   4556  f65a				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4557  f65b				  -	      ifconst	EXTRADLMEMORY
   4558  f65b				  -	      if	TMPMEMADDRESS > $1FFF
   4559  f65b				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4560  f65b				  -	      else
   4561  f65b				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4562  f65b				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4563  f65b				  -	      endif
   4564  f65b				  -	      endif		; TMPMEMADDRESS > $1FFF
   4565  f65b					      endif		; EXTRADLMEMORY
   4566  f65b		       f0		      .byte.b	<TMPMEMADDRESS
   4567  f65b				   DLINDEX    SET	DLINDEX + 1
   4555  f65b					      REPEND
   4556  f65b				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4557  f65c				  -	      ifconst	EXTRADLMEMORY
   4558  f65c				  -	      if	TMPMEMADDRESS > $1FFF
   4559  f65c				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4560  f65c				  -	      else
   4561  f65c				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4562  f65c				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4563  f65c				  -	      endif
   4564  f65c				  -	      endif		; TMPMEMADDRESS > $1FFF
   4565  f65c					      endif		; EXTRADLMEMORY
   4566  f65c		       40		      .byte.b	<TMPMEMADDRESS
   4567  f65c				   DLINDEX    SET	DLINDEX + 1
   4555  f65c					      REPEND
   4556  f65c				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4557  f65d				  -	      ifconst	EXTRADLMEMORY
   4558  f65d				  -	      if	TMPMEMADDRESS > $1FFF
   4559  f65d				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4560  f65d				  -	      else
   4561  f65d				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4562  f65d				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4563  f65d				  -	      endif
   4564  f65d				  -	      endif		; TMPMEMADDRESS > $1FFF
   4565  f65d					      endif		; EXTRADLMEMORY
   4566  f65d		       90		      .byte.b	<TMPMEMADDRESS
   4567  f65d				   DLINDEX    SET	DLINDEX + 1
   4555  f65d					      REPEND
   4556  f65d				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4557  f65e				  -	      ifconst	EXTRADLMEMORY
   4558  f65e				  -	      if	TMPMEMADDRESS > $1FFF
   4559  f65e				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4560  f65e				  -	      else
   4561  f65e				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4562  f65e				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4563  f65e				  -	      endif
   4564  f65e				  -	      endif		; TMPMEMADDRESS > $1FFF
   4565  f65e					      endif		; EXTRADLMEMORY
   4566  f65e		       e0		      .byte.b	<TMPMEMADDRESS
   4567  f65e				   DLINDEX    SET	DLINDEX + 1
   4555  f65e					      REPEND
   4556  f65e				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4557  f65f				  -	      ifconst	EXTRADLMEMORY
   4558  f65f				  -	      if	TMPMEMADDRESS > $1FFF
   4559  f65f				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4560  f65f				  -	      else
   4561  f65f				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4562  f65f				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4563  f65f				  -	      endif
   4564  f65f				  -	      endif		; TMPMEMADDRESS > $1FFF
   4565  f65f					      endif		; EXTRADLMEMORY
   4566  f65f		       30		      .byte.b	<TMPMEMADDRESS
   4567  f65f				   DLINDEX    SET	DLINDEX + 1
   4555  f65f					      REPEND
   4556  f65f				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4557  f660				  -	      ifconst	EXTRADLMEMORY
   4558  f660				  -	      if	TMPMEMADDRESS > $1FFF
   4559  f660				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4560  f660				  -	      else
   4561  f660				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4562  f660				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4563  f660				  -	      endif
   4564  f660				  -	      endif		; TMPMEMADDRESS > $1FFF
   4565  f660					      endif		; EXTRADLMEMORY
   4566  f660		       80		      .byte.b	<TMPMEMADDRESS
   4567  f660				   DLINDEX    SET	DLINDEX + 1
   4555  f660					      REPEND
   4556  f660				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4557  f661				  -	      ifconst	EXTRADLMEMORY
   4558  f661				  -	      if	TMPMEMADDRESS > $1FFF
   4559  f661				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4560  f661				  -	      else
   4561  f661				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4562  f661				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4563  f661				  -	      endif
   4564  f661				  -	      endif		; TMPMEMADDRESS > $1FFF
   4565  f661					      endif		; EXTRADLMEMORY
   4566  f661		       d0		      .byte.b	<TMPMEMADDRESS
   4567  f661				   DLINDEX    SET	DLINDEX + 1
   4555  f661					      REPEND
   4556  f661				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4557  f662				  -	      ifconst	EXTRADLMEMORY
   4558  f662				  -	      if	TMPMEMADDRESS > $1FFF
   4559  f662				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4560  f662				  -	      else
   4561  f662				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4562  f662				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4563  f662				  -	      endif
   4564  f662				  -	      endif		; TMPMEMADDRESS > $1FFF
   4565  f662					      endif		; EXTRADLMEMORY
   4566  f662		       20		      .byte.b	<TMPMEMADDRESS
   4567  f662				   DLINDEX    SET	DLINDEX + 1
   4555  f662					      REPEND
   4556  f662				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4557  f663				  -	      ifconst	EXTRADLMEMORY
   4558  f663				  -	      if	TMPMEMADDRESS > $1FFF
   4559  f663				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4560  f663				  -	      else
   4561  f663				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4562  f663				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4563  f663				  -	      endif
   4564  f663				  -	      endif		; TMPMEMADDRESS > $1FFF
   4565  f663					      endif		; EXTRADLMEMORY
   4566  f663		       70		      .byte.b	<TMPMEMADDRESS
   4567  f663				   DLINDEX    SET	DLINDEX + 1
   4555  f663					      REPEND
   4556  f663				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4557  f664				  -	      ifconst	EXTRADLMEMORY
   4558  f664				  -	      if	TMPMEMADDRESS > $1FFF
   4559  f664				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4560  f664				  -	      else
   4561  f664				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4562  f664				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4563  f664				  -	      endif
   4564  f664				  -	      endif		; TMPMEMADDRESS > $1FFF
   4565  f664					      endif		; EXTRADLMEMORY
   4566  f664		       c0		      .byte.b	<TMPMEMADDRESS
   4567  f664				   DLINDEX    SET	DLINDEX + 1
   4555  f664					      REPEND
   4556  f664				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4557  f665				  -	      ifconst	EXTRADLMEMORY
   4558  f665				  -	      if	TMPMEMADDRESS > $1FFF
   4559  f665				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4560  f665				  -	      else
   4561  f665				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4562  f665				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4563  f665				  -	      endif
   4564  f665				  -	      endif		; TMPMEMADDRESS > $1FFF
   4565  f665					      endif		; EXTRADLMEMORY
   4566  f665		       10		      .byte.b	<TMPMEMADDRESS
   4567  f665				   DLINDEX    SET	DLINDEX + 1
   4555  f665					      REPEND
   4556  f665				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4557  f666				  -	      ifconst	EXTRADLMEMORY
   4558  f666				  -	      if	TMPMEMADDRESS > $1FFF
   4559  f666				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4560  f666				  -	      else
   4561  f666				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4562  f666				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4563  f666				  -	      endif
   4564  f666				  -	      endif		; TMPMEMADDRESS > $1FFF
   4565  f666					      endif		; EXTRADLMEMORY
   4566  f666		       60		      .byte.b	<TMPMEMADDRESS
   4567  f666				   DLINDEX    SET	DLINDEX + 1
   4555  f666					      REPEND
   4556  f666				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4557  f667				  -	      ifconst	EXTRADLMEMORY
   4558  f667				  -	      if	TMPMEMADDRESS > $1FFF
   4559  f667				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4560  f667				  -	      else
   4561  f667				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4562  f667				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4563  f667				  -	      endif
   4564  f667				  -	      endif		; TMPMEMADDRESS > $1FFF
   4565  f667					      endif		; EXTRADLMEMORY
   4566  f667		       b0		      .byte.b	<TMPMEMADDRESS
   4567  f667				   DLINDEX    SET	DLINDEX + 1
   4568  f668					      REPEND
   4569  f668
   4570  f668
   4571  f668				   DLINDEX    SET	0
   4572  f668					      REPEAT	WZONECOUNT
   4573  f668				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4574  f668				  -	      ifconst	EXTRADLMEMORY
   4575  f668				  -	      if	TMPMEMADDRESS > $1FFF
   4576  f668				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4577  f668				  -	      else
   4578  f668				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4579  f668				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4580  f668				  -	      endif
   4581  f668				  -	      endif		; TMPMEMADDRESS > $1FFF
   4582  f668					      endif		; EXTRADLMEMORY
   4583  f668					      if	DLINDEX = 0
   4584  f668		       18 80	   ZONE0ADDRESS =	TMPMEMADDRESS
   4585  f668					      endif
   4586  f668				  -	      if	DLINDEX = 1
   4587  f668				  -ZONE1ADDRESS =	TMPMEMADDRESS
   4588  f668					      endif
   4589  f668				  -	      if	DLINDEX = 2
   4590  f668				  -ZONE2ADDRESS =	TMPMEMADDRESS
   4591  f668					      endif
   4592  f668				  -	      if	DLINDEX = 3
   4593  f668				  -ZONE3ADDRESS =	TMPMEMADDRESS
   4594  f668					      endif
   4595  f668				  -	      if	DLINDEX = 4
   4596  f668				  -ZONE4ADDRESS =	TMPMEMADDRESS
   4597  f668					      endif
   4598  f668				  -	      if	DLINDEX = 5
   4599  f668				  -ZONE5ADDRESS =	TMPMEMADDRESS
   4600  f668					      endif
   4601  f668				  -	      if	DLINDEX = 6
   4602  f668				  -ZONE6ADDRESS =	TMPMEMADDRESS
   4603  f668					      endif
   4604  f668				  -	      if	DLINDEX = 7
   4605  f668				  -ZONE7ADDRESS =	TMPMEMADDRESS
   4606  f668					      endif
   4607  f668				  -	      if	DLINDEX = 8
   4608  f668				  -ZONE8ADDRESS =	TMPMEMADDRESS
   4609  f668					      endif
   4610  f668				  -	      if	DLINDEX = 9
   4611  f668				  -ZONE9ADDRESS =	TMPMEMADDRESS
   4612  f668					      endif
   4613  f668				  -	      if	DLINDEX = 10
   4614  f668				  -ZONE10ADDRESS =	TMPMEMADDRESS
   4615  f668					      endif
   4616  f668				  -	      if	DLINDEX = 11
   4617  f668				  -ZONE11ADDRESS =	TMPMEMADDRESS
   4618  f668					      endif
   4619  f668				  -	      if	DLINDEX = 12
   4620  f668				  -ZONE12ADDRESS =	TMPMEMADDRESS
   4621  f668					      endif
   4622  f668				  -	      if	DLINDEX = 13
   4623  f668				  -ZONE13ADDRESS =	TMPMEMADDRESS
   4624  f668					      endif
   4625  f668				  -	      if	DLINDEX = 14
   4626  f668				  -ZONE14ADDRESS =	TMPMEMADDRESS
   4627  f668					      endif
   4628  f668				  -	      if	DLINDEX = 15
   4629  f668				  -ZONE15ADDRESS =	TMPMEMADDRESS
   4630  f668					      endif
   4631  f668				  -	      if	DLINDEX = 16
   4632  f668				  -ZONE16ADDRESS =	TMPMEMADDRESS
   4633  f668					      endif
   4634  f668				  -	      if	DLINDEX = 17
   4635  f668				  -ZONE17ADDRESS =	TMPMEMADDRESS
   4636  f668					      endif
   4637  f668				  -	      if	DLINDEX = 18
   4638  f668				  -ZONE18ADDRESS =	TMPMEMADDRESS
   4639  f668					      endif
   4640  f668				  -	      if	DLINDEX = 19
   4641  f668				  -ZONE19ADDRESS =	TMPMEMADDRESS
   4642  f668					      endif
   4643  f668				  -	      if	DLINDEX = 20
   4644  f668				  -ZONE20ADDRESS =	TMPMEMADDRESS
   4645  f668					      endif
   4646  f668				  -	      if	DLINDEX = 21
   4647  f668				  -ZONE21ADDRESS =	TMPMEMADDRESS
   4648  f668					      endif
   4649  f668				  -	      if	DLINDEX = 22
   4650  f668				  -ZONE22ADDRESS =	TMPMEMADDRESS
   4651  f668					      endif
   4652  f668				  -	      if	DLINDEX = 23
   4653  f668				  -ZONE23ADDRESS =	TMPMEMADDRESS
   4654  f668					      endif
   4655  f668				  -	      if	DLINDEX = 24
   4656  f668				  -ZONE24ADDRESS =	TMPMEMADDRESS
   4657  f668					      endif
   4658  f668				  -	      if	DLINDEX = 25
   4659  f668				  -ZONE25ADDRESS =	TMPMEMADDRESS
   4660  f668					      endif
   4661  f668				  -	      if	DLINDEX = 26
   4662  f668				  -ZONE26ADDRESS =	TMPMEMADDRESS
   4663  f668					      endif
   4664  f668				  -	      if	DLINDEX = 27
   4665  f668				  -ZONE27ADDRESS =	TMPMEMADDRESS
   4666  f668					      endif
   4667  f668				   DLINDEX    SET	DLINDEX + 1
   4572  f668					      REPEND
   4573  f668				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4574  f668				  -	      ifconst	EXTRADLMEMORY
   4575  f668				  -	      if	TMPMEMADDRESS > $1FFF
   4576  f668				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4577  f668				  -	      else
   4578  f668				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4579  f668				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4580  f668				  -	      endif
   4581  f668				  -	      endif		; TMPMEMADDRESS > $1FFF
   4582  f668					      endif		; EXTRADLMEMORY
   4583  f668				  -	      if	DLINDEX = 0
   4584  f668				  -ZONE0ADDRESS =	TMPMEMADDRESS
   4585  f668					      endif
   4586  f668					      if	DLINDEX = 1
   4587  f668		       18 d0	   ZONE1ADDRESS =	TMPMEMADDRESS
   4588  f668					      endif
   4589  f668				  -	      if	DLINDEX = 2
   4590  f668				  -ZONE2ADDRESS =	TMPMEMADDRESS
   4591  f668					      endif
   4592  f668				  -	      if	DLINDEX = 3
   4593  f668				  -ZONE3ADDRESS =	TMPMEMADDRESS
   4594  f668					      endif
   4595  f668				  -	      if	DLINDEX = 4
   4596  f668				  -ZONE4ADDRESS =	TMPMEMADDRESS
   4597  f668					      endif
   4598  f668				  -	      if	DLINDEX = 5
   4599  f668				  -ZONE5ADDRESS =	TMPMEMADDRESS
   4600  f668					      endif
   4601  f668				  -	      if	DLINDEX = 6
   4602  f668				  -ZONE6ADDRESS =	TMPMEMADDRESS
   4603  f668					      endif
   4604  f668				  -	      if	DLINDEX = 7
   4605  f668				  -ZONE7ADDRESS =	TMPMEMADDRESS
   4606  f668					      endif
   4607  f668				  -	      if	DLINDEX = 8
   4608  f668				  -ZONE8ADDRESS =	TMPMEMADDRESS
   4609  f668					      endif
   4610  f668				  -	      if	DLINDEX = 9
   4611  f668				  -ZONE9ADDRESS =	TMPMEMADDRESS
   4612  f668					      endif
   4613  f668				  -	      if	DLINDEX = 10
   4614  f668				  -ZONE10ADDRESS =	TMPMEMADDRESS
   4615  f668					      endif
   4616  f668				  -	      if	DLINDEX = 11
   4617  f668				  -ZONE11ADDRESS =	TMPMEMADDRESS
   4618  f668					      endif
   4619  f668				  -	      if	DLINDEX = 12
   4620  f668				  -ZONE12ADDRESS =	TMPMEMADDRESS
   4621  f668					      endif
   4622  f668				  -	      if	DLINDEX = 13
   4623  f668				  -ZONE13ADDRESS =	TMPMEMADDRESS
   4624  f668					      endif
   4625  f668				  -	      if	DLINDEX = 14
   4626  f668				  -ZONE14ADDRESS =	TMPMEMADDRESS
   4627  f668					      endif
   4628  f668				  -	      if	DLINDEX = 15
   4629  f668				  -ZONE15ADDRESS =	TMPMEMADDRESS
   4630  f668					      endif
   4631  f668				  -	      if	DLINDEX = 16
   4632  f668				  -ZONE16ADDRESS =	TMPMEMADDRESS
   4633  f668					      endif
   4634  f668				  -	      if	DLINDEX = 17
   4635  f668				  -ZONE17ADDRESS =	TMPMEMADDRESS
   4636  f668					      endif
   4637  f668				  -	      if	DLINDEX = 18
   4638  f668				  -ZONE18ADDRESS =	TMPMEMADDRESS
   4639  f668					      endif
   4640  f668				  -	      if	DLINDEX = 19
   4641  f668				  -ZONE19ADDRESS =	TMPMEMADDRESS
   4642  f668					      endif
   4643  f668				  -	      if	DLINDEX = 20
   4644  f668				  -ZONE20ADDRESS =	TMPMEMADDRESS
   4645  f668					      endif
   4646  f668				  -	      if	DLINDEX = 21
   4647  f668				  -ZONE21ADDRESS =	TMPMEMADDRESS
   4648  f668					      endif
   4649  f668				  -	      if	DLINDEX = 22
   4650  f668				  -ZONE22ADDRESS =	TMPMEMADDRESS
   4651  f668					      endif
   4652  f668				  -	      if	DLINDEX = 23
   4653  f668				  -ZONE23ADDRESS =	TMPMEMADDRESS
   4654  f668					      endif
   4655  f668				  -	      if	DLINDEX = 24
   4656  f668				  -ZONE24ADDRESS =	TMPMEMADDRESS
   4657  f668					      endif
   4658  f668				  -	      if	DLINDEX = 25
   4659  f668				  -ZONE25ADDRESS =	TMPMEMADDRESS
   4660  f668					      endif
   4661  f668				  -	      if	DLINDEX = 26
   4662  f668				  -ZONE26ADDRESS =	TMPMEMADDRESS
   4663  f668					      endif
   4664  f668				  -	      if	DLINDEX = 27
   4665  f668				  -ZONE27ADDRESS =	TMPMEMADDRESS
   4666  f668					      endif
   4667  f668				   DLINDEX    SET	DLINDEX + 1
   4572  f668					      REPEND
   4573  f668				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4574  f668				  -	      ifconst	EXTRADLMEMORY
   4575  f668				  -	      if	TMPMEMADDRESS > $1FFF
   4576  f668				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4577  f668				  -	      else
   4578  f668				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4579  f668				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4580  f668				  -	      endif
   4581  f668				  -	      endif		; TMPMEMADDRESS > $1FFF
   4582  f668					      endif		; EXTRADLMEMORY
   4583  f668				  -	      if	DLINDEX = 0
   4584  f668				  -ZONE0ADDRESS =	TMPMEMADDRESS
   4585  f668					      endif
   4586  f668				  -	      if	DLINDEX = 1
   4587  f668				  -ZONE1ADDRESS =	TMPMEMADDRESS
   4588  f668					      endif
   4589  f668					      if	DLINDEX = 2
   4590  f668		       19 20	   ZONE2ADDRESS =	TMPMEMADDRESS
   4591  f668					      endif
   4592  f668				  -	      if	DLINDEX = 3
   4593  f668				  -ZONE3ADDRESS =	TMPMEMADDRESS
   4594  f668					      endif
   4595  f668				  -	      if	DLINDEX = 4
   4596  f668				  -ZONE4ADDRESS =	TMPMEMADDRESS
   4597  f668					      endif
   4598  f668				  -	      if	DLINDEX = 5
   4599  f668				  -ZONE5ADDRESS =	TMPMEMADDRESS
   4600  f668					      endif
   4601  f668				  -	      if	DLINDEX = 6
   4602  f668				  -ZONE6ADDRESS =	TMPMEMADDRESS
   4603  f668					      endif
   4604  f668				  -	      if	DLINDEX = 7
   4605  f668				  -ZONE7ADDRESS =	TMPMEMADDRESS
   4606  f668					      endif
   4607  f668				  -	      if	DLINDEX = 8
   4608  f668				  -ZONE8ADDRESS =	TMPMEMADDRESS
   4609  f668					      endif
   4610  f668				  -	      if	DLINDEX = 9
   4611  f668				  -ZONE9ADDRESS =	TMPMEMADDRESS
   4612  f668					      endif
   4613  f668				  -	      if	DLINDEX = 10
   4614  f668				  -ZONE10ADDRESS =	TMPMEMADDRESS
   4615  f668					      endif
   4616  f668				  -	      if	DLINDEX = 11
   4617  f668				  -ZONE11ADDRESS =	TMPMEMADDRESS
   4618  f668					      endif
   4619  f668				  -	      if	DLINDEX = 12
   4620  f668				  -ZONE12ADDRESS =	TMPMEMADDRESS
   4621  f668					      endif
   4622  f668				  -	      if	DLINDEX = 13
   4623  f668				  -ZONE13ADDRESS =	TMPMEMADDRESS
   4624  f668					      endif
   4625  f668				  -	      if	DLINDEX = 14
   4626  f668				  -ZONE14ADDRESS =	TMPMEMADDRESS
   4627  f668					      endif
   4628  f668				  -	      if	DLINDEX = 15
   4629  f668				  -ZONE15ADDRESS =	TMPMEMADDRESS
   4630  f668					      endif
   4631  f668				  -	      if	DLINDEX = 16
   4632  f668				  -ZONE16ADDRESS =	TMPMEMADDRESS
   4633  f668					      endif
   4634  f668				  -	      if	DLINDEX = 17
   4635  f668				  -ZONE17ADDRESS =	TMPMEMADDRESS
   4636  f668					      endif
   4637  f668				  -	      if	DLINDEX = 18
   4638  f668				  -ZONE18ADDRESS =	TMPMEMADDRESS
   4639  f668					      endif
   4640  f668				  -	      if	DLINDEX = 19
   4641  f668				  -ZONE19ADDRESS =	TMPMEMADDRESS
   4642  f668					      endif
   4643  f668				  -	      if	DLINDEX = 20
   4644  f668				  -ZONE20ADDRESS =	TMPMEMADDRESS
   4645  f668					      endif
   4646  f668				  -	      if	DLINDEX = 21
   4647  f668				  -ZONE21ADDRESS =	TMPMEMADDRESS
   4648  f668					      endif
   4649  f668				  -	      if	DLINDEX = 22
   4650  f668				  -ZONE22ADDRESS =	TMPMEMADDRESS
   4651  f668					      endif
   4652  f668				  -	      if	DLINDEX = 23
   4653  f668				  -ZONE23ADDRESS =	TMPMEMADDRESS
   4654  f668					      endif
   4655  f668				  -	      if	DLINDEX = 24
   4656  f668				  -ZONE24ADDRESS =	TMPMEMADDRESS
   4657  f668					      endif
   4658  f668				  -	      if	DLINDEX = 25
   4659  f668				  -ZONE25ADDRESS =	TMPMEMADDRESS
   4660  f668					      endif
   4661  f668				  -	      if	DLINDEX = 26
   4662  f668				  -ZONE26ADDRESS =	TMPMEMADDRESS
   4663  f668					      endif
   4664  f668				  -	      if	DLINDEX = 27
   4665  f668				  -ZONE27ADDRESS =	TMPMEMADDRESS
   4666  f668					      endif
   4667  f668				   DLINDEX    SET	DLINDEX + 1
   4572  f668					      REPEND
   4573  f668				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4574  f668				  -	      ifconst	EXTRADLMEMORY
   4575  f668				  -	      if	TMPMEMADDRESS > $1FFF
   4576  f668				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4577  f668				  -	      else
   4578  f668				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4579  f668				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4580  f668				  -	      endif
   4581  f668				  -	      endif		; TMPMEMADDRESS > $1FFF
   4582  f668					      endif		; EXTRADLMEMORY
   4583  f668				  -	      if	DLINDEX = 0
   4584  f668				  -ZONE0ADDRESS =	TMPMEMADDRESS
   4585  f668					      endif
   4586  f668				  -	      if	DLINDEX = 1
   4587  f668				  -ZONE1ADDRESS =	TMPMEMADDRESS
   4588  f668					      endif
   4589  f668				  -	      if	DLINDEX = 2
   4590  f668				  -ZONE2ADDRESS =	TMPMEMADDRESS
   4591  f668					      endif
   4592  f668					      if	DLINDEX = 3
   4593  f668		       19 70	   ZONE3ADDRESS =	TMPMEMADDRESS
   4594  f668					      endif
   4595  f668				  -	      if	DLINDEX = 4
   4596  f668				  -ZONE4ADDRESS =	TMPMEMADDRESS
   4597  f668					      endif
   4598  f668				  -	      if	DLINDEX = 5
   4599  f668				  -ZONE5ADDRESS =	TMPMEMADDRESS
   4600  f668					      endif
   4601  f668				  -	      if	DLINDEX = 6
   4602  f668				  -ZONE6ADDRESS =	TMPMEMADDRESS
   4603  f668					      endif
   4604  f668				  -	      if	DLINDEX = 7
   4605  f668				  -ZONE7ADDRESS =	TMPMEMADDRESS
   4606  f668					      endif
   4607  f668				  -	      if	DLINDEX = 8
   4608  f668				  -ZONE8ADDRESS =	TMPMEMADDRESS
   4609  f668					      endif
   4610  f668				  -	      if	DLINDEX = 9
   4611  f668				  -ZONE9ADDRESS =	TMPMEMADDRESS
   4612  f668					      endif
   4613  f668				  -	      if	DLINDEX = 10
   4614  f668				  -ZONE10ADDRESS =	TMPMEMADDRESS
   4615  f668					      endif
   4616  f668				  -	      if	DLINDEX = 11
   4617  f668				  -ZONE11ADDRESS =	TMPMEMADDRESS
   4618  f668					      endif
   4619  f668				  -	      if	DLINDEX = 12
   4620  f668				  -ZONE12ADDRESS =	TMPMEMADDRESS
   4621  f668					      endif
   4622  f668				  -	      if	DLINDEX = 13
   4623  f668				  -ZONE13ADDRESS =	TMPMEMADDRESS
   4624  f668					      endif
   4625  f668				  -	      if	DLINDEX = 14
   4626  f668				  -ZONE14ADDRESS =	TMPMEMADDRESS
   4627  f668					      endif
   4628  f668				  -	      if	DLINDEX = 15
   4629  f668				  -ZONE15ADDRESS =	TMPMEMADDRESS
   4630  f668					      endif
   4631  f668				  -	      if	DLINDEX = 16
   4632  f668				  -ZONE16ADDRESS =	TMPMEMADDRESS
   4633  f668					      endif
   4634  f668				  -	      if	DLINDEX = 17
   4635  f668				  -ZONE17ADDRESS =	TMPMEMADDRESS
   4636  f668					      endif
   4637  f668				  -	      if	DLINDEX = 18
   4638  f668				  -ZONE18ADDRESS =	TMPMEMADDRESS
   4639  f668					      endif
   4640  f668				  -	      if	DLINDEX = 19
   4641  f668				  -ZONE19ADDRESS =	TMPMEMADDRESS
   4642  f668					      endif
   4643  f668				  -	      if	DLINDEX = 20
   4644  f668				  -ZONE20ADDRESS =	TMPMEMADDRESS
   4645  f668					      endif
   4646  f668				  -	      if	DLINDEX = 21
   4647  f668				  -ZONE21ADDRESS =	TMPMEMADDRESS
   4648  f668					      endif
   4649  f668				  -	      if	DLINDEX = 22
   4650  f668				  -ZONE22ADDRESS =	TMPMEMADDRESS
   4651  f668					      endif
   4652  f668				  -	      if	DLINDEX = 23
   4653  f668				  -ZONE23ADDRESS =	TMPMEMADDRESS
   4654  f668					      endif
   4655  f668				  -	      if	DLINDEX = 24
   4656  f668				  -ZONE24ADDRESS =	TMPMEMADDRESS
   4657  f668					      endif
   4658  f668				  -	      if	DLINDEX = 25
   4659  f668				  -ZONE25ADDRESS =	TMPMEMADDRESS
   4660  f668					      endif
   4661  f668				  -	      if	DLINDEX = 26
   4662  f668				  -ZONE26ADDRESS =	TMPMEMADDRESS
   4663  f668					      endif
   4664  f668				  -	      if	DLINDEX = 27
   4665  f668				  -ZONE27ADDRESS =	TMPMEMADDRESS
   4666  f668					      endif
   4667  f668				   DLINDEX    SET	DLINDEX + 1
   4572  f668					      REPEND
   4573  f668				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4574  f668				  -	      ifconst	EXTRADLMEMORY
   4575  f668				  -	      if	TMPMEMADDRESS > $1FFF
   4576  f668				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4577  f668				  -	      else
   4578  f668				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4579  f668				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4580  f668				  -	      endif
   4581  f668				  -	      endif		; TMPMEMADDRESS > $1FFF
   4582  f668					      endif		; EXTRADLMEMORY
   4583  f668				  -	      if	DLINDEX = 0
   4584  f668				  -ZONE0ADDRESS =	TMPMEMADDRESS
   4585  f668					      endif
   4586  f668				  -	      if	DLINDEX = 1
   4587  f668				  -ZONE1ADDRESS =	TMPMEMADDRESS
   4588  f668					      endif
   4589  f668				  -	      if	DLINDEX = 2
   4590  f668				  -ZONE2ADDRESS =	TMPMEMADDRESS
   4591  f668					      endif
   4592  f668				  -	      if	DLINDEX = 3
   4593  f668				  -ZONE3ADDRESS =	TMPMEMADDRESS
   4594  f668					      endif
   4595  f668					      if	DLINDEX = 4
   4596  f668		       19 c0	   ZONE4ADDRESS =	TMPMEMADDRESS
   4597  f668					      endif
   4598  f668				  -	      if	DLINDEX = 5
   4599  f668				  -ZONE5ADDRESS =	TMPMEMADDRESS
   4600  f668					      endif
   4601  f668				  -	      if	DLINDEX = 6
   4602  f668				  -ZONE6ADDRESS =	TMPMEMADDRESS
   4603  f668					      endif
   4604  f668				  -	      if	DLINDEX = 7
   4605  f668				  -ZONE7ADDRESS =	TMPMEMADDRESS
   4606  f668					      endif
   4607  f668				  -	      if	DLINDEX = 8
   4608  f668				  -ZONE8ADDRESS =	TMPMEMADDRESS
   4609  f668					      endif
   4610  f668				  -	      if	DLINDEX = 9
   4611  f668				  -ZONE9ADDRESS =	TMPMEMADDRESS
   4612  f668					      endif
   4613  f668				  -	      if	DLINDEX = 10
   4614  f668				  -ZONE10ADDRESS =	TMPMEMADDRESS
   4615  f668					      endif
   4616  f668				  -	      if	DLINDEX = 11
   4617  f668				  -ZONE11ADDRESS =	TMPMEMADDRESS
   4618  f668					      endif
   4619  f668				  -	      if	DLINDEX = 12
   4620  f668				  -ZONE12ADDRESS =	TMPMEMADDRESS
   4621  f668					      endif
   4622  f668				  -	      if	DLINDEX = 13
   4623  f668				  -ZONE13ADDRESS =	TMPMEMADDRESS
   4624  f668					      endif
   4625  f668				  -	      if	DLINDEX = 14
   4626  f668				  -ZONE14ADDRESS =	TMPMEMADDRESS
   4627  f668					      endif
   4628  f668				  -	      if	DLINDEX = 15
   4629  f668				  -ZONE15ADDRESS =	TMPMEMADDRESS
   4630  f668					      endif
   4631  f668				  -	      if	DLINDEX = 16
   4632  f668				  -ZONE16ADDRESS =	TMPMEMADDRESS
   4633  f668					      endif
   4634  f668				  -	      if	DLINDEX = 17
   4635  f668				  -ZONE17ADDRESS =	TMPMEMADDRESS
   4636  f668					      endif
   4637  f668				  -	      if	DLINDEX = 18
   4638  f668				  -ZONE18ADDRESS =	TMPMEMADDRESS
   4639  f668					      endif
   4640  f668				  -	      if	DLINDEX = 19
   4641  f668				  -ZONE19ADDRESS =	TMPMEMADDRESS
   4642  f668					      endif
   4643  f668				  -	      if	DLINDEX = 20
   4644  f668				  -ZONE20ADDRESS =	TMPMEMADDRESS
   4645  f668					      endif
   4646  f668				  -	      if	DLINDEX = 21
   4647  f668				  -ZONE21ADDRESS =	TMPMEMADDRESS
   4648  f668					      endif
   4649  f668				  -	      if	DLINDEX = 22
   4650  f668				  -ZONE22ADDRESS =	TMPMEMADDRESS
   4651  f668					      endif
   4652  f668				  -	      if	DLINDEX = 23
   4653  f668				  -ZONE23ADDRESS =	TMPMEMADDRESS
   4654  f668					      endif
   4655  f668				  -	      if	DLINDEX = 24
   4656  f668				  -ZONE24ADDRESS =	TMPMEMADDRESS
   4657  f668					      endif
   4658  f668				  -	      if	DLINDEX = 25
   4659  f668				  -ZONE25ADDRESS =	TMPMEMADDRESS
   4660  f668					      endif
   4661  f668				  -	      if	DLINDEX = 26
   4662  f668				  -ZONE26ADDRESS =	TMPMEMADDRESS
   4663  f668					      endif
   4664  f668				  -	      if	DLINDEX = 27
   4665  f668				  -ZONE27ADDRESS =	TMPMEMADDRESS
   4666  f668					      endif
   4667  f668				   DLINDEX    SET	DLINDEX + 1
   4572  f668					      REPEND
   4573  f668				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4574  f668				  -	      ifconst	EXTRADLMEMORY
   4575  f668				  -	      if	TMPMEMADDRESS > $1FFF
   4576  f668				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4577  f668				  -	      else
   4578  f668				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4579  f668				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4580  f668				  -	      endif
   4581  f668				  -	      endif		; TMPMEMADDRESS > $1FFF
   4582  f668					      endif		; EXTRADLMEMORY
   4583  f668				  -	      if	DLINDEX = 0
   4584  f668				  -ZONE0ADDRESS =	TMPMEMADDRESS
   4585  f668					      endif
   4586  f668				  -	      if	DLINDEX = 1
   4587  f668				  -ZONE1ADDRESS =	TMPMEMADDRESS
   4588  f668					      endif
   4589  f668				  -	      if	DLINDEX = 2
   4590  f668				  -ZONE2ADDRESS =	TMPMEMADDRESS
   4591  f668					      endif
   4592  f668				  -	      if	DLINDEX = 3
   4593  f668				  -ZONE3ADDRESS =	TMPMEMADDRESS
   4594  f668					      endif
   4595  f668				  -	      if	DLINDEX = 4
   4596  f668				  -ZONE4ADDRESS =	TMPMEMADDRESS
   4597  f668					      endif
   4598  f668					      if	DLINDEX = 5
   4599  f668		       1a 10	   ZONE5ADDRESS =	TMPMEMADDRESS
   4600  f668					      endif
   4601  f668				  -	      if	DLINDEX = 6
   4602  f668				  -ZONE6ADDRESS =	TMPMEMADDRESS
   4603  f668					      endif
   4604  f668				  -	      if	DLINDEX = 7
   4605  f668				  -ZONE7ADDRESS =	TMPMEMADDRESS
   4606  f668					      endif
   4607  f668				  -	      if	DLINDEX = 8
   4608  f668				  -ZONE8ADDRESS =	TMPMEMADDRESS
   4609  f668					      endif
   4610  f668				  -	      if	DLINDEX = 9
   4611  f668				  -ZONE9ADDRESS =	TMPMEMADDRESS
   4612  f668					      endif
   4613  f668				  -	      if	DLINDEX = 10
   4614  f668				  -ZONE10ADDRESS =	TMPMEMADDRESS
   4615  f668					      endif
   4616  f668				  -	      if	DLINDEX = 11
   4617  f668				  -ZONE11ADDRESS =	TMPMEMADDRESS
   4618  f668					      endif
   4619  f668				  -	      if	DLINDEX = 12
   4620  f668				  -ZONE12ADDRESS =	TMPMEMADDRESS
   4621  f668					      endif
   4622  f668				  -	      if	DLINDEX = 13
   4623  f668				  -ZONE13ADDRESS =	TMPMEMADDRESS
   4624  f668					      endif
   4625  f668				  -	      if	DLINDEX = 14
   4626  f668				  -ZONE14ADDRESS =	TMPMEMADDRESS
   4627  f668					      endif
   4628  f668				  -	      if	DLINDEX = 15
   4629  f668				  -ZONE15ADDRESS =	TMPMEMADDRESS
   4630  f668					      endif
   4631  f668				  -	      if	DLINDEX = 16
   4632  f668				  -ZONE16ADDRESS =	TMPMEMADDRESS
   4633  f668					      endif
   4634  f668				  -	      if	DLINDEX = 17
   4635  f668				  -ZONE17ADDRESS =	TMPMEMADDRESS
   4636  f668					      endif
   4637  f668				  -	      if	DLINDEX = 18
   4638  f668				  -ZONE18ADDRESS =	TMPMEMADDRESS
   4639  f668					      endif
   4640  f668				  -	      if	DLINDEX = 19
   4641  f668				  -ZONE19ADDRESS =	TMPMEMADDRESS
   4642  f668					      endif
   4643  f668				  -	      if	DLINDEX = 20
   4644  f668				  -ZONE20ADDRESS =	TMPMEMADDRESS
   4645  f668					      endif
   4646  f668				  -	      if	DLINDEX = 21
   4647  f668				  -ZONE21ADDRESS =	TMPMEMADDRESS
   4648  f668					      endif
   4649  f668				  -	      if	DLINDEX = 22
   4650  f668				  -ZONE22ADDRESS =	TMPMEMADDRESS
   4651  f668					      endif
   4652  f668				  -	      if	DLINDEX = 23
   4653  f668				  -ZONE23ADDRESS =	TMPMEMADDRESS
   4654  f668					      endif
   4655  f668				  -	      if	DLINDEX = 24
   4656  f668				  -ZONE24ADDRESS =	TMPMEMADDRESS
   4657  f668					      endif
   4658  f668				  -	      if	DLINDEX = 25
   4659  f668				  -ZONE25ADDRESS =	TMPMEMADDRESS
   4660  f668					      endif
   4661  f668				  -	      if	DLINDEX = 26
   4662  f668				  -ZONE26ADDRESS =	TMPMEMADDRESS
   4663  f668					      endif
   4664  f668				  -	      if	DLINDEX = 27
   4665  f668				  -ZONE27ADDRESS =	TMPMEMADDRESS
   4666  f668					      endif
   4667  f668				   DLINDEX    SET	DLINDEX + 1
   4572  f668					      REPEND
   4573  f668				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4574  f668				  -	      ifconst	EXTRADLMEMORY
   4575  f668				  -	      if	TMPMEMADDRESS > $1FFF
   4576  f668				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4577  f668				  -	      else
   4578  f668				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4579  f668				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4580  f668				  -	      endif
   4581  f668				  -	      endif		; TMPMEMADDRESS > $1FFF
   4582  f668					      endif		; EXTRADLMEMORY
   4583  f668				  -	      if	DLINDEX = 0
   4584  f668				  -ZONE0ADDRESS =	TMPMEMADDRESS
   4585  f668					      endif
   4586  f668				  -	      if	DLINDEX = 1
   4587  f668				  -ZONE1ADDRESS =	TMPMEMADDRESS
   4588  f668					      endif
   4589  f668				  -	      if	DLINDEX = 2
   4590  f668				  -ZONE2ADDRESS =	TMPMEMADDRESS
   4591  f668					      endif
   4592  f668				  -	      if	DLINDEX = 3
   4593  f668				  -ZONE3ADDRESS =	TMPMEMADDRESS
   4594  f668					      endif
   4595  f668				  -	      if	DLINDEX = 4
   4596  f668				  -ZONE4ADDRESS =	TMPMEMADDRESS
   4597  f668					      endif
   4598  f668				  -	      if	DLINDEX = 5
   4599  f668				  -ZONE5ADDRESS =	TMPMEMADDRESS
   4600  f668					      endif
   4601  f668					      if	DLINDEX = 6
   4602  f668		       1a 60	   ZONE6ADDRESS =	TMPMEMADDRESS
   4603  f668					      endif
   4604  f668				  -	      if	DLINDEX = 7
   4605  f668				  -ZONE7ADDRESS =	TMPMEMADDRESS
   4606  f668					      endif
   4607  f668				  -	      if	DLINDEX = 8
   4608  f668				  -ZONE8ADDRESS =	TMPMEMADDRESS
   4609  f668					      endif
   4610  f668				  -	      if	DLINDEX = 9
   4611  f668				  -ZONE9ADDRESS =	TMPMEMADDRESS
   4612  f668					      endif
   4613  f668				  -	      if	DLINDEX = 10
   4614  f668				  -ZONE10ADDRESS =	TMPMEMADDRESS
   4615  f668					      endif
   4616  f668				  -	      if	DLINDEX = 11
   4617  f668				  -ZONE11ADDRESS =	TMPMEMADDRESS
   4618  f668					      endif
   4619  f668				  -	      if	DLINDEX = 12
   4620  f668				  -ZONE12ADDRESS =	TMPMEMADDRESS
   4621  f668					      endif
   4622  f668				  -	      if	DLINDEX = 13
   4623  f668				  -ZONE13ADDRESS =	TMPMEMADDRESS
   4624  f668					      endif
   4625  f668				  -	      if	DLINDEX = 14
   4626  f668				  -ZONE14ADDRESS =	TMPMEMADDRESS
   4627  f668					      endif
   4628  f668				  -	      if	DLINDEX = 15
   4629  f668				  -ZONE15ADDRESS =	TMPMEMADDRESS
   4630  f668					      endif
   4631  f668				  -	      if	DLINDEX = 16
   4632  f668				  -ZONE16ADDRESS =	TMPMEMADDRESS
   4633  f668					      endif
   4634  f668				  -	      if	DLINDEX = 17
   4635  f668				  -ZONE17ADDRESS =	TMPMEMADDRESS
   4636  f668					      endif
   4637  f668				  -	      if	DLINDEX = 18
   4638  f668				  -ZONE18ADDRESS =	TMPMEMADDRESS
   4639  f668					      endif
   4640  f668				  -	      if	DLINDEX = 19
   4641  f668				  -ZONE19ADDRESS =	TMPMEMADDRESS
   4642  f668					      endif
   4643  f668				  -	      if	DLINDEX = 20
   4644  f668				  -ZONE20ADDRESS =	TMPMEMADDRESS
   4645  f668					      endif
   4646  f668				  -	      if	DLINDEX = 21
   4647  f668				  -ZONE21ADDRESS =	TMPMEMADDRESS
   4648  f668					      endif
   4649  f668				  -	      if	DLINDEX = 22
   4650  f668				  -ZONE22ADDRESS =	TMPMEMADDRESS
   4651  f668					      endif
   4652  f668				  -	      if	DLINDEX = 23
   4653  f668				  -ZONE23ADDRESS =	TMPMEMADDRESS
   4654  f668					      endif
   4655  f668				  -	      if	DLINDEX = 24
   4656  f668				  -ZONE24ADDRESS =	TMPMEMADDRESS
   4657  f668					      endif
   4658  f668				  -	      if	DLINDEX = 25
   4659  f668				  -ZONE25ADDRESS =	TMPMEMADDRESS
   4660  f668					      endif
   4661  f668				  -	      if	DLINDEX = 26
   4662  f668				  -ZONE26ADDRESS =	TMPMEMADDRESS
   4663  f668					      endif
   4664  f668				  -	      if	DLINDEX = 27
   4665  f668				  -ZONE27ADDRESS =	TMPMEMADDRESS
   4666  f668					      endif
   4667  f668				   DLINDEX    SET	DLINDEX + 1
   4572  f668					      REPEND
   4573  f668				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4574  f668				  -	      ifconst	EXTRADLMEMORY
   4575  f668				  -	      if	TMPMEMADDRESS > $1FFF
   4576  f668				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4577  f668				  -	      else
   4578  f668				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4579  f668				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4580  f668				  -	      endif
   4581  f668				  -	      endif		; TMPMEMADDRESS > $1FFF
   4582  f668					      endif		; EXTRADLMEMORY
   4583  f668				  -	      if	DLINDEX = 0
   4584  f668				  -ZONE0ADDRESS =	TMPMEMADDRESS
   4585  f668					      endif
   4586  f668				  -	      if	DLINDEX = 1
   4587  f668				  -ZONE1ADDRESS =	TMPMEMADDRESS
   4588  f668					      endif
   4589  f668				  -	      if	DLINDEX = 2
   4590  f668				  -ZONE2ADDRESS =	TMPMEMADDRESS
   4591  f668					      endif
   4592  f668				  -	      if	DLINDEX = 3
   4593  f668				  -ZONE3ADDRESS =	TMPMEMADDRESS
   4594  f668					      endif
   4595  f668				  -	      if	DLINDEX = 4
   4596  f668				  -ZONE4ADDRESS =	TMPMEMADDRESS
   4597  f668					      endif
   4598  f668				  -	      if	DLINDEX = 5
   4599  f668				  -ZONE5ADDRESS =	TMPMEMADDRESS
   4600  f668					      endif
   4601  f668				  -	      if	DLINDEX = 6
   4602  f668				  -ZONE6ADDRESS =	TMPMEMADDRESS
   4603  f668					      endif
   4604  f668					      if	DLINDEX = 7
   4605  f668		       1a b0	   ZONE7ADDRESS =	TMPMEMADDRESS
   4606  f668					      endif
   4607  f668				  -	      if	DLINDEX = 8
   4608  f668				  -ZONE8ADDRESS =	TMPMEMADDRESS
   4609  f668					      endif
   4610  f668				  -	      if	DLINDEX = 9
   4611  f668				  -ZONE9ADDRESS =	TMPMEMADDRESS
   4612  f668					      endif
   4613  f668				  -	      if	DLINDEX = 10
   4614  f668				  -ZONE10ADDRESS =	TMPMEMADDRESS
   4615  f668					      endif
   4616  f668				  -	      if	DLINDEX = 11
   4617  f668				  -ZONE11ADDRESS =	TMPMEMADDRESS
   4618  f668					      endif
   4619  f668				  -	      if	DLINDEX = 12
   4620  f668				  -ZONE12ADDRESS =	TMPMEMADDRESS
   4621  f668					      endif
   4622  f668				  -	      if	DLINDEX = 13
   4623  f668				  -ZONE13ADDRESS =	TMPMEMADDRESS
   4624  f668					      endif
   4625  f668				  -	      if	DLINDEX = 14
   4626  f668				  -ZONE14ADDRESS =	TMPMEMADDRESS
   4627  f668					      endif
   4628  f668				  -	      if	DLINDEX = 15
   4629  f668				  -ZONE15ADDRESS =	TMPMEMADDRESS
   4630  f668					      endif
   4631  f668				  -	      if	DLINDEX = 16
   4632  f668				  -ZONE16ADDRESS =	TMPMEMADDRESS
   4633  f668					      endif
   4634  f668				  -	      if	DLINDEX = 17
   4635  f668				  -ZONE17ADDRESS =	TMPMEMADDRESS
   4636  f668					      endif
   4637  f668				  -	      if	DLINDEX = 18
   4638  f668				  -ZONE18ADDRESS =	TMPMEMADDRESS
   4639  f668					      endif
   4640  f668				  -	      if	DLINDEX = 19
   4641  f668				  -ZONE19ADDRESS =	TMPMEMADDRESS
   4642  f668					      endif
   4643  f668				  -	      if	DLINDEX = 20
   4644  f668				  -ZONE20ADDRESS =	TMPMEMADDRESS
   4645  f668					      endif
   4646  f668				  -	      if	DLINDEX = 21
   4647  f668				  -ZONE21ADDRESS =	TMPMEMADDRESS
   4648  f668					      endif
   4649  f668				  -	      if	DLINDEX = 22
   4650  f668				  -ZONE22ADDRESS =	TMPMEMADDRESS
   4651  f668					      endif
   4652  f668				  -	      if	DLINDEX = 23
   4653  f668				  -ZONE23ADDRESS =	TMPMEMADDRESS
   4654  f668					      endif
   4655  f668				  -	      if	DLINDEX = 24
   4656  f668				  -ZONE24ADDRESS =	TMPMEMADDRESS
   4657  f668					      endif
   4658  f668				  -	      if	DLINDEX = 25
   4659  f668				  -ZONE25ADDRESS =	TMPMEMADDRESS
   4660  f668					      endif
   4661  f668				  -	      if	DLINDEX = 26
   4662  f668				  -ZONE26ADDRESS =	TMPMEMADDRESS
   4663  f668					      endif
   4664  f668				  -	      if	DLINDEX = 27
   4665  f668				  -ZONE27ADDRESS =	TMPMEMADDRESS
   4666  f668					      endif
   4667  f668				   DLINDEX    SET	DLINDEX + 1
   4572  f668					      REPEND
   4573  f668				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4574  f668				  -	      ifconst	EXTRADLMEMORY
   4575  f668				  -	      if	TMPMEMADDRESS > $1FFF
   4576  f668				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4577  f668				  -	      else
   4578  f668				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4579  f668				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4580  f668				  -	      endif
   4581  f668				  -	      endif		; TMPMEMADDRESS > $1FFF
   4582  f668					      endif		; EXTRADLMEMORY
   4583  f668				  -	      if	DLINDEX = 0
   4584  f668				  -ZONE0ADDRESS =	TMPMEMADDRESS
   4585  f668					      endif
   4586  f668				  -	      if	DLINDEX = 1
   4587  f668				  -ZONE1ADDRESS =	TMPMEMADDRESS
   4588  f668					      endif
   4589  f668				  -	      if	DLINDEX = 2
   4590  f668				  -ZONE2ADDRESS =	TMPMEMADDRESS
   4591  f668					      endif
   4592  f668				  -	      if	DLINDEX = 3
   4593  f668				  -ZONE3ADDRESS =	TMPMEMADDRESS
   4594  f668					      endif
   4595  f668				  -	      if	DLINDEX = 4
   4596  f668				  -ZONE4ADDRESS =	TMPMEMADDRESS
   4597  f668					      endif
   4598  f668				  -	      if	DLINDEX = 5
   4599  f668				  -ZONE5ADDRESS =	TMPMEMADDRESS
   4600  f668					      endif
   4601  f668				  -	      if	DLINDEX = 6
   4602  f668				  -ZONE6ADDRESS =	TMPMEMADDRESS
   4603  f668					      endif
   4604  f668				  -	      if	DLINDEX = 7
   4605  f668				  -ZONE7ADDRESS =	TMPMEMADDRESS
   4606  f668					      endif
   4607  f668					      if	DLINDEX = 8
   4608  f668		       1b 00	   ZONE8ADDRESS =	TMPMEMADDRESS
   4609  f668					      endif
   4610  f668				  -	      if	DLINDEX = 9
   4611  f668				  -ZONE9ADDRESS =	TMPMEMADDRESS
   4612  f668					      endif
   4613  f668				  -	      if	DLINDEX = 10
   4614  f668				  -ZONE10ADDRESS =	TMPMEMADDRESS
   4615  f668					      endif
   4616  f668				  -	      if	DLINDEX = 11
   4617  f668				  -ZONE11ADDRESS =	TMPMEMADDRESS
   4618  f668					      endif
   4619  f668				  -	      if	DLINDEX = 12
   4620  f668				  -ZONE12ADDRESS =	TMPMEMADDRESS
   4621  f668					      endif
   4622  f668				  -	      if	DLINDEX = 13
   4623  f668				  -ZONE13ADDRESS =	TMPMEMADDRESS
   4624  f668					      endif
   4625  f668				  -	      if	DLINDEX = 14
   4626  f668				  -ZONE14ADDRESS =	TMPMEMADDRESS
   4627  f668					      endif
   4628  f668				  -	      if	DLINDEX = 15
   4629  f668				  -ZONE15ADDRESS =	TMPMEMADDRESS
   4630  f668					      endif
   4631  f668				  -	      if	DLINDEX = 16
   4632  f668				  -ZONE16ADDRESS =	TMPMEMADDRESS
   4633  f668					      endif
   4634  f668				  -	      if	DLINDEX = 17
   4635  f668				  -ZONE17ADDRESS =	TMPMEMADDRESS
   4636  f668					      endif
   4637  f668				  -	      if	DLINDEX = 18
   4638  f668				  -ZONE18ADDRESS =	TMPMEMADDRESS
   4639  f668					      endif
   4640  f668				  -	      if	DLINDEX = 19
   4641  f668				  -ZONE19ADDRESS =	TMPMEMADDRESS
   4642  f668					      endif
   4643  f668				  -	      if	DLINDEX = 20
   4644  f668				  -ZONE20ADDRESS =	TMPMEMADDRESS
   4645  f668					      endif
   4646  f668				  -	      if	DLINDEX = 21
   4647  f668				  -ZONE21ADDRESS =	TMPMEMADDRESS
   4648  f668					      endif
   4649  f668				  -	      if	DLINDEX = 22
   4650  f668				  -ZONE22ADDRESS =	TMPMEMADDRESS
   4651  f668					      endif
   4652  f668				  -	      if	DLINDEX = 23
   4653  f668				  -ZONE23ADDRESS =	TMPMEMADDRESS
   4654  f668					      endif
   4655  f668				  -	      if	DLINDEX = 24
   4656  f668				  -ZONE24ADDRESS =	TMPMEMADDRESS
   4657  f668					      endif
   4658  f668				  -	      if	DLINDEX = 25
   4659  f668				  -ZONE25ADDRESS =	TMPMEMADDRESS
   4660  f668					      endif
   4661  f668				  -	      if	DLINDEX = 26
   4662  f668				  -ZONE26ADDRESS =	TMPMEMADDRESS
   4663  f668					      endif
   4664  f668				  -	      if	DLINDEX = 27
   4665  f668				  -ZONE27ADDRESS =	TMPMEMADDRESS
   4666  f668					      endif
   4667  f668				   DLINDEX    SET	DLINDEX + 1
   4572  f668					      REPEND
   4573  f668				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4574  f668				  -	      ifconst	EXTRADLMEMORY
   4575  f668				  -	      if	TMPMEMADDRESS > $1FFF
   4576  f668				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4577  f668				  -	      else
   4578  f668				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4579  f668				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4580  f668				  -	      endif
   4581  f668				  -	      endif		; TMPMEMADDRESS > $1FFF
   4582  f668					      endif		; EXTRADLMEMORY
   4583  f668				  -	      if	DLINDEX = 0
   4584  f668				  -ZONE0ADDRESS =	TMPMEMADDRESS
   4585  f668					      endif
   4586  f668				  -	      if	DLINDEX = 1
   4587  f668				  -ZONE1ADDRESS =	TMPMEMADDRESS
   4588  f668					      endif
   4589  f668				  -	      if	DLINDEX = 2
   4590  f668				  -ZONE2ADDRESS =	TMPMEMADDRESS
   4591  f668					      endif
   4592  f668				  -	      if	DLINDEX = 3
   4593  f668				  -ZONE3ADDRESS =	TMPMEMADDRESS
   4594  f668					      endif
   4595  f668				  -	      if	DLINDEX = 4
   4596  f668				  -ZONE4ADDRESS =	TMPMEMADDRESS
   4597  f668					      endif
   4598  f668				  -	      if	DLINDEX = 5
   4599  f668				  -ZONE5ADDRESS =	TMPMEMADDRESS
   4600  f668					      endif
   4601  f668				  -	      if	DLINDEX = 6
   4602  f668				  -ZONE6ADDRESS =	TMPMEMADDRESS
   4603  f668					      endif
   4604  f668				  -	      if	DLINDEX = 7
   4605  f668				  -ZONE7ADDRESS =	TMPMEMADDRESS
   4606  f668					      endif
   4607  f668				  -	      if	DLINDEX = 8
   4608  f668				  -ZONE8ADDRESS =	TMPMEMADDRESS
   4609  f668					      endif
   4610  f668					      if	DLINDEX = 9
   4611  f668		       1b 50	   ZONE9ADDRESS =	TMPMEMADDRESS
   4612  f668					      endif
   4613  f668				  -	      if	DLINDEX = 10
   4614  f668				  -ZONE10ADDRESS =	TMPMEMADDRESS
   4615  f668					      endif
   4616  f668				  -	      if	DLINDEX = 11
   4617  f668				  -ZONE11ADDRESS =	TMPMEMADDRESS
   4618  f668					      endif
   4619  f668				  -	      if	DLINDEX = 12
   4620  f668				  -ZONE12ADDRESS =	TMPMEMADDRESS
   4621  f668					      endif
   4622  f668				  -	      if	DLINDEX = 13
   4623  f668				  -ZONE13ADDRESS =	TMPMEMADDRESS
   4624  f668					      endif
   4625  f668				  -	      if	DLINDEX = 14
   4626  f668				  -ZONE14ADDRESS =	TMPMEMADDRESS
   4627  f668					      endif
   4628  f668				  -	      if	DLINDEX = 15
   4629  f668				  -ZONE15ADDRESS =	TMPMEMADDRESS
   4630  f668					      endif
   4631  f668				  -	      if	DLINDEX = 16
   4632  f668				  -ZONE16ADDRESS =	TMPMEMADDRESS
   4633  f668					      endif
   4634  f668				  -	      if	DLINDEX = 17
   4635  f668				  -ZONE17ADDRESS =	TMPMEMADDRESS
   4636  f668					      endif
   4637  f668				  -	      if	DLINDEX = 18
   4638  f668				  -ZONE18ADDRESS =	TMPMEMADDRESS
   4639  f668					      endif
   4640  f668				  -	      if	DLINDEX = 19
   4641  f668				  -ZONE19ADDRESS =	TMPMEMADDRESS
   4642  f668					      endif
   4643  f668				  -	      if	DLINDEX = 20
   4644  f668				  -ZONE20ADDRESS =	TMPMEMADDRESS
   4645  f668					      endif
   4646  f668				  -	      if	DLINDEX = 21
   4647  f668				  -ZONE21ADDRESS =	TMPMEMADDRESS
   4648  f668					      endif
   4649  f668				  -	      if	DLINDEX = 22
   4650  f668				  -ZONE22ADDRESS =	TMPMEMADDRESS
   4651  f668					      endif
   4652  f668				  -	      if	DLINDEX = 23
   4653  f668				  -ZONE23ADDRESS =	TMPMEMADDRESS
   4654  f668					      endif
   4655  f668				  -	      if	DLINDEX = 24
   4656  f668				  -ZONE24ADDRESS =	TMPMEMADDRESS
   4657  f668					      endif
   4658  f668				  -	      if	DLINDEX = 25
   4659  f668				  -ZONE25ADDRESS =	TMPMEMADDRESS
   4660  f668					      endif
   4661  f668				  -	      if	DLINDEX = 26
   4662  f668				  -ZONE26ADDRESS =	TMPMEMADDRESS
   4663  f668					      endif
   4664  f668				  -	      if	DLINDEX = 27
   4665  f668				  -ZONE27ADDRESS =	TMPMEMADDRESS
   4666  f668					      endif
   4667  f668				   DLINDEX    SET	DLINDEX + 1
   4572  f668					      REPEND
   4573  f668				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4574  f668				  -	      ifconst	EXTRADLMEMORY
   4575  f668				  -	      if	TMPMEMADDRESS > $1FFF
   4576  f668				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4577  f668				  -	      else
   4578  f668				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4579  f668				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4580  f668				  -	      endif
   4581  f668				  -	      endif		; TMPMEMADDRESS > $1FFF
   4582  f668					      endif		; EXTRADLMEMORY
   4583  f668				  -	      if	DLINDEX = 0
   4584  f668				  -ZONE0ADDRESS =	TMPMEMADDRESS
   4585  f668					      endif
   4586  f668				  -	      if	DLINDEX = 1
   4587  f668				  -ZONE1ADDRESS =	TMPMEMADDRESS
   4588  f668					      endif
   4589  f668				  -	      if	DLINDEX = 2
   4590  f668				  -ZONE2ADDRESS =	TMPMEMADDRESS
   4591  f668					      endif
   4592  f668				  -	      if	DLINDEX = 3
   4593  f668				  -ZONE3ADDRESS =	TMPMEMADDRESS
   4594  f668					      endif
   4595  f668				  -	      if	DLINDEX = 4
   4596  f668				  -ZONE4ADDRESS =	TMPMEMADDRESS
   4597  f668					      endif
   4598  f668				  -	      if	DLINDEX = 5
   4599  f668				  -ZONE5ADDRESS =	TMPMEMADDRESS
   4600  f668					      endif
   4601  f668				  -	      if	DLINDEX = 6
   4602  f668				  -ZONE6ADDRESS =	TMPMEMADDRESS
   4603  f668					      endif
   4604  f668				  -	      if	DLINDEX = 7
   4605  f668				  -ZONE7ADDRESS =	TMPMEMADDRESS
   4606  f668					      endif
   4607  f668				  -	      if	DLINDEX = 8
   4608  f668				  -ZONE8ADDRESS =	TMPMEMADDRESS
   4609  f668					      endif
   4610  f668				  -	      if	DLINDEX = 9
   4611  f668				  -ZONE9ADDRESS =	TMPMEMADDRESS
   4612  f668					      endif
   4613  f668					      if	DLINDEX = 10
   4614  f668		       1b a0	   ZONE10ADDRESS =	TMPMEMADDRESS
   4615  f668					      endif
   4616  f668				  -	      if	DLINDEX = 11
   4617  f668				  -ZONE11ADDRESS =	TMPMEMADDRESS
   4618  f668					      endif
   4619  f668				  -	      if	DLINDEX = 12
   4620  f668				  -ZONE12ADDRESS =	TMPMEMADDRESS
   4621  f668					      endif
   4622  f668				  -	      if	DLINDEX = 13
   4623  f668				  -ZONE13ADDRESS =	TMPMEMADDRESS
   4624  f668					      endif
   4625  f668				  -	      if	DLINDEX = 14
   4626  f668				  -ZONE14ADDRESS =	TMPMEMADDRESS
   4627  f668					      endif
   4628  f668				  -	      if	DLINDEX = 15
   4629  f668				  -ZONE15ADDRESS =	TMPMEMADDRESS
   4630  f668					      endif
   4631  f668				  -	      if	DLINDEX = 16
   4632  f668				  -ZONE16ADDRESS =	TMPMEMADDRESS
   4633  f668					      endif
   4634  f668				  -	      if	DLINDEX = 17
   4635  f668				  -ZONE17ADDRESS =	TMPMEMADDRESS
   4636  f668					      endif
   4637  f668				  -	      if	DLINDEX = 18
   4638  f668				  -ZONE18ADDRESS =	TMPMEMADDRESS
   4639  f668					      endif
   4640  f668				  -	      if	DLINDEX = 19
   4641  f668				  -ZONE19ADDRESS =	TMPMEMADDRESS
   4642  f668					      endif
   4643  f668				  -	      if	DLINDEX = 20
   4644  f668				  -ZONE20ADDRESS =	TMPMEMADDRESS
   4645  f668					      endif
   4646  f668				  -	      if	DLINDEX = 21
   4647  f668				  -ZONE21ADDRESS =	TMPMEMADDRESS
   4648  f668					      endif
   4649  f668				  -	      if	DLINDEX = 22
   4650  f668				  -ZONE22ADDRESS =	TMPMEMADDRESS
   4651  f668					      endif
   4652  f668				  -	      if	DLINDEX = 23
   4653  f668				  -ZONE23ADDRESS =	TMPMEMADDRESS
   4654  f668					      endif
   4655  f668				  -	      if	DLINDEX = 24
   4656  f668				  -ZONE24ADDRESS =	TMPMEMADDRESS
   4657  f668					      endif
   4658  f668				  -	      if	DLINDEX = 25
   4659  f668				  -ZONE25ADDRESS =	TMPMEMADDRESS
   4660  f668					      endif
   4661  f668				  -	      if	DLINDEX = 26
   4662  f668				  -ZONE26ADDRESS =	TMPMEMADDRESS
   4663  f668					      endif
   4664  f668				  -	      if	DLINDEX = 27
   4665  f668				  -ZONE27ADDRESS =	TMPMEMADDRESS
   4666  f668					      endif
   4667  f668				   DLINDEX    SET	DLINDEX + 1
   4572  f668					      REPEND
   4573  f668				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4574  f668				  -	      ifconst	EXTRADLMEMORY
   4575  f668				  -	      if	TMPMEMADDRESS > $1FFF
   4576  f668				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4577  f668				  -	      else
   4578  f668				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4579  f668				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4580  f668				  -	      endif
   4581  f668				  -	      endif		; TMPMEMADDRESS > $1FFF
   4582  f668					      endif		; EXTRADLMEMORY
   4583  f668				  -	      if	DLINDEX = 0
   4584  f668				  -ZONE0ADDRESS =	TMPMEMADDRESS
   4585  f668					      endif
   4586  f668				  -	      if	DLINDEX = 1
   4587  f668				  -ZONE1ADDRESS =	TMPMEMADDRESS
   4588  f668					      endif
   4589  f668				  -	      if	DLINDEX = 2
   4590  f668				  -ZONE2ADDRESS =	TMPMEMADDRESS
   4591  f668					      endif
   4592  f668				  -	      if	DLINDEX = 3
   4593  f668				  -ZONE3ADDRESS =	TMPMEMADDRESS
   4594  f668					      endif
   4595  f668				  -	      if	DLINDEX = 4
   4596  f668				  -ZONE4ADDRESS =	TMPMEMADDRESS
   4597  f668					      endif
   4598  f668				  -	      if	DLINDEX = 5
   4599  f668				  -ZONE5ADDRESS =	TMPMEMADDRESS
   4600  f668					      endif
   4601  f668				  -	      if	DLINDEX = 6
   4602  f668				  -ZONE6ADDRESS =	TMPMEMADDRESS
   4603  f668					      endif
   4604  f668				  -	      if	DLINDEX = 7
   4605  f668				  -ZONE7ADDRESS =	TMPMEMADDRESS
   4606  f668					      endif
   4607  f668				  -	      if	DLINDEX = 8
   4608  f668				  -ZONE8ADDRESS =	TMPMEMADDRESS
   4609  f668					      endif
   4610  f668				  -	      if	DLINDEX = 9
   4611  f668				  -ZONE9ADDRESS =	TMPMEMADDRESS
   4612  f668					      endif
   4613  f668				  -	      if	DLINDEX = 10
   4614  f668				  -ZONE10ADDRESS =	TMPMEMADDRESS
   4615  f668					      endif
   4616  f668					      if	DLINDEX = 11
   4617  f668		       1b f0	   ZONE11ADDRESS =	TMPMEMADDRESS
   4618  f668					      endif
   4619  f668				  -	      if	DLINDEX = 12
   4620  f668				  -ZONE12ADDRESS =	TMPMEMADDRESS
   4621  f668					      endif
   4622  f668				  -	      if	DLINDEX = 13
   4623  f668				  -ZONE13ADDRESS =	TMPMEMADDRESS
   4624  f668					      endif
   4625  f668				  -	      if	DLINDEX = 14
   4626  f668				  -ZONE14ADDRESS =	TMPMEMADDRESS
   4627  f668					      endif
   4628  f668				  -	      if	DLINDEX = 15
   4629  f668				  -ZONE15ADDRESS =	TMPMEMADDRESS
   4630  f668					      endif
   4631  f668				  -	      if	DLINDEX = 16
   4632  f668				  -ZONE16ADDRESS =	TMPMEMADDRESS
   4633  f668					      endif
   4634  f668				  -	      if	DLINDEX = 17
   4635  f668				  -ZONE17ADDRESS =	TMPMEMADDRESS
   4636  f668					      endif
   4637  f668				  -	      if	DLINDEX = 18
   4638  f668				  -ZONE18ADDRESS =	TMPMEMADDRESS
   4639  f668					      endif
   4640  f668				  -	      if	DLINDEX = 19
   4641  f668				  -ZONE19ADDRESS =	TMPMEMADDRESS
   4642  f668					      endif
   4643  f668				  -	      if	DLINDEX = 20
   4644  f668				  -ZONE20ADDRESS =	TMPMEMADDRESS
   4645  f668					      endif
   4646  f668				  -	      if	DLINDEX = 21
   4647  f668				  -ZONE21ADDRESS =	TMPMEMADDRESS
   4648  f668					      endif
   4649  f668				  -	      if	DLINDEX = 22
   4650  f668				  -ZONE22ADDRESS =	TMPMEMADDRESS
   4651  f668					      endif
   4652  f668				  -	      if	DLINDEX = 23
   4653  f668				  -ZONE23ADDRESS =	TMPMEMADDRESS
   4654  f668					      endif
   4655  f668				  -	      if	DLINDEX = 24
   4656  f668				  -ZONE24ADDRESS =	TMPMEMADDRESS
   4657  f668					      endif
   4658  f668				  -	      if	DLINDEX = 25
   4659  f668				  -ZONE25ADDRESS =	TMPMEMADDRESS
   4660  f668					      endif
   4661  f668				  -	      if	DLINDEX = 26
   4662  f668				  -ZONE26ADDRESS =	TMPMEMADDRESS
   4663  f668					      endif
   4664  f668				  -	      if	DLINDEX = 27
   4665  f668				  -ZONE27ADDRESS =	TMPMEMADDRESS
   4666  f668					      endif
   4667  f668				   DLINDEX    SET	DLINDEX + 1
   4572  f668					      REPEND
   4573  f668				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4574  f668				  -	      ifconst	EXTRADLMEMORY
   4575  f668				  -	      if	TMPMEMADDRESS > $1FFF
   4576  f668				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4577  f668				  -	      else
   4578  f668				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4579  f668				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4580  f668				  -	      endif
   4581  f668				  -	      endif		; TMPMEMADDRESS > $1FFF
   4582  f668					      endif		; EXTRADLMEMORY
   4583  f668				  -	      if	DLINDEX = 0
   4584  f668				  -ZONE0ADDRESS =	TMPMEMADDRESS
   4585  f668					      endif
   4586  f668				  -	      if	DLINDEX = 1
   4587  f668				  -ZONE1ADDRESS =	TMPMEMADDRESS
   4588  f668					      endif
   4589  f668				  -	      if	DLINDEX = 2
   4590  f668				  -ZONE2ADDRESS =	TMPMEMADDRESS
   4591  f668					      endif
   4592  f668				  -	      if	DLINDEX = 3
   4593  f668				  -ZONE3ADDRESS =	TMPMEMADDRESS
   4594  f668					      endif
   4595  f668				  -	      if	DLINDEX = 4
   4596  f668				  -ZONE4ADDRESS =	TMPMEMADDRESS
   4597  f668					      endif
   4598  f668				  -	      if	DLINDEX = 5
   4599  f668				  -ZONE5ADDRESS =	TMPMEMADDRESS
   4600  f668					      endif
   4601  f668				  -	      if	DLINDEX = 6
   4602  f668				  -ZONE6ADDRESS =	TMPMEMADDRESS
   4603  f668					      endif
   4604  f668				  -	      if	DLINDEX = 7
   4605  f668				  -ZONE7ADDRESS =	TMPMEMADDRESS
   4606  f668					      endif
   4607  f668				  -	      if	DLINDEX = 8
   4608  f668				  -ZONE8ADDRESS =	TMPMEMADDRESS
   4609  f668					      endif
   4610  f668				  -	      if	DLINDEX = 9
   4611  f668				  -ZONE9ADDRESS =	TMPMEMADDRESS
   4612  f668					      endif
   4613  f668				  -	      if	DLINDEX = 10
   4614  f668				  -ZONE10ADDRESS =	TMPMEMADDRESS
   4615  f668					      endif
   4616  f668				  -	      if	DLINDEX = 11
   4617  f668				  -ZONE11ADDRESS =	TMPMEMADDRESS
   4618  f668					      endif
   4619  f668					      if	DLINDEX = 12
   4620  f668		       1c 40	   ZONE12ADDRESS =	TMPMEMADDRESS
   4621  f668					      endif
   4622  f668				  -	      if	DLINDEX = 13
   4623  f668				  -ZONE13ADDRESS =	TMPMEMADDRESS
   4624  f668					      endif
   4625  f668				  -	      if	DLINDEX = 14
   4626  f668				  -ZONE14ADDRESS =	TMPMEMADDRESS
   4627  f668					      endif
   4628  f668				  -	      if	DLINDEX = 15
   4629  f668				  -ZONE15ADDRESS =	TMPMEMADDRESS
   4630  f668					      endif
   4631  f668				  -	      if	DLINDEX = 16
   4632  f668				  -ZONE16ADDRESS =	TMPMEMADDRESS
   4633  f668					      endif
   4634  f668				  -	      if	DLINDEX = 17
   4635  f668				  -ZONE17ADDRESS =	TMPMEMADDRESS
   4636  f668					      endif
   4637  f668				  -	      if	DLINDEX = 18
   4638  f668				  -ZONE18ADDRESS =	TMPMEMADDRESS
   4639  f668					      endif
   4640  f668				  -	      if	DLINDEX = 19
   4641  f668				  -ZONE19ADDRESS =	TMPMEMADDRESS
   4642  f668					      endif
   4643  f668				  -	      if	DLINDEX = 20
   4644  f668				  -ZONE20ADDRESS =	TMPMEMADDRESS
   4645  f668					      endif
   4646  f668				  -	      if	DLINDEX = 21
   4647  f668				  -ZONE21ADDRESS =	TMPMEMADDRESS
   4648  f668					      endif
   4649  f668				  -	      if	DLINDEX = 22
   4650  f668				  -ZONE22ADDRESS =	TMPMEMADDRESS
   4651  f668					      endif
   4652  f668				  -	      if	DLINDEX = 23
   4653  f668				  -ZONE23ADDRESS =	TMPMEMADDRESS
   4654  f668					      endif
   4655  f668				  -	      if	DLINDEX = 24
   4656  f668				  -ZONE24ADDRESS =	TMPMEMADDRESS
   4657  f668					      endif
   4658  f668				  -	      if	DLINDEX = 25
   4659  f668				  -ZONE25ADDRESS =	TMPMEMADDRESS
   4660  f668					      endif
   4661  f668				  -	      if	DLINDEX = 26
   4662  f668				  -ZONE26ADDRESS =	TMPMEMADDRESS
   4663  f668					      endif
   4664  f668				  -	      if	DLINDEX = 27
   4665  f668				  -ZONE27ADDRESS =	TMPMEMADDRESS
   4666  f668					      endif
   4667  f668				   DLINDEX    SET	DLINDEX + 1
   4572  f668					      REPEND
   4573  f668				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4574  f668				  -	      ifconst	EXTRADLMEMORY
   4575  f668				  -	      if	TMPMEMADDRESS > $1FFF
   4576  f668				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4577  f668				  -	      else
   4578  f668				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4579  f668				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4580  f668				  -	      endif
   4581  f668				  -	      endif		; TMPMEMADDRESS > $1FFF
   4582  f668					      endif		; EXTRADLMEMORY
   4583  f668				  -	      if	DLINDEX = 0
   4584  f668				  -ZONE0ADDRESS =	TMPMEMADDRESS
   4585  f668					      endif
   4586  f668				  -	      if	DLINDEX = 1
   4587  f668				  -ZONE1ADDRESS =	TMPMEMADDRESS
   4588  f668					      endif
   4589  f668				  -	      if	DLINDEX = 2
   4590  f668				  -ZONE2ADDRESS =	TMPMEMADDRESS
   4591  f668					      endif
   4592  f668				  -	      if	DLINDEX = 3
   4593  f668				  -ZONE3ADDRESS =	TMPMEMADDRESS
   4594  f668					      endif
   4595  f668				  -	      if	DLINDEX = 4
   4596  f668				  -ZONE4ADDRESS =	TMPMEMADDRESS
   4597  f668					      endif
   4598  f668				  -	      if	DLINDEX = 5
   4599  f668				  -ZONE5ADDRESS =	TMPMEMADDRESS
   4600  f668					      endif
   4601  f668				  -	      if	DLINDEX = 6
   4602  f668				  -ZONE6ADDRESS =	TMPMEMADDRESS
   4603  f668					      endif
   4604  f668				  -	      if	DLINDEX = 7
   4605  f668				  -ZONE7ADDRESS =	TMPMEMADDRESS
   4606  f668					      endif
   4607  f668				  -	      if	DLINDEX = 8
   4608  f668				  -ZONE8ADDRESS =	TMPMEMADDRESS
   4609  f668					      endif
   4610  f668				  -	      if	DLINDEX = 9
   4611  f668				  -ZONE9ADDRESS =	TMPMEMADDRESS
   4612  f668					      endif
   4613  f668				  -	      if	DLINDEX = 10
   4614  f668				  -ZONE10ADDRESS =	TMPMEMADDRESS
   4615  f668					      endif
   4616  f668				  -	      if	DLINDEX = 11
   4617  f668				  -ZONE11ADDRESS =	TMPMEMADDRESS
   4618  f668					      endif
   4619  f668				  -	      if	DLINDEX = 12
   4620  f668				  -ZONE12ADDRESS =	TMPMEMADDRESS
   4621  f668					      endif
   4622  f668					      if	DLINDEX = 13
   4623  f668		       1c 90	   ZONE13ADDRESS =	TMPMEMADDRESS
   4624  f668					      endif
   4625  f668				  -	      if	DLINDEX = 14
   4626  f668				  -ZONE14ADDRESS =	TMPMEMADDRESS
   4627  f668					      endif
   4628  f668				  -	      if	DLINDEX = 15
   4629  f668				  -ZONE15ADDRESS =	TMPMEMADDRESS
   4630  f668					      endif
   4631  f668				  -	      if	DLINDEX = 16
   4632  f668				  -ZONE16ADDRESS =	TMPMEMADDRESS
   4633  f668					      endif
   4634  f668				  -	      if	DLINDEX = 17
   4635  f668				  -ZONE17ADDRESS =	TMPMEMADDRESS
   4636  f668					      endif
   4637  f668				  -	      if	DLINDEX = 18
   4638  f668				  -ZONE18ADDRESS =	TMPMEMADDRESS
   4639  f668					      endif
   4640  f668				  -	      if	DLINDEX = 19
   4641  f668				  -ZONE19ADDRESS =	TMPMEMADDRESS
   4642  f668					      endif
   4643  f668				  -	      if	DLINDEX = 20
   4644  f668				  -ZONE20ADDRESS =	TMPMEMADDRESS
   4645  f668					      endif
   4646  f668				  -	      if	DLINDEX = 21
   4647  f668				  -ZONE21ADDRESS =	TMPMEMADDRESS
   4648  f668					      endif
   4649  f668				  -	      if	DLINDEX = 22
   4650  f668				  -ZONE22ADDRESS =	TMPMEMADDRESS
   4651  f668					      endif
   4652  f668				  -	      if	DLINDEX = 23
   4653  f668				  -ZONE23ADDRESS =	TMPMEMADDRESS
   4654  f668					      endif
   4655  f668				  -	      if	DLINDEX = 24
   4656  f668				  -ZONE24ADDRESS =	TMPMEMADDRESS
   4657  f668					      endif
   4658  f668				  -	      if	DLINDEX = 25
   4659  f668				  -ZONE25ADDRESS =	TMPMEMADDRESS
   4660  f668					      endif
   4661  f668				  -	      if	DLINDEX = 26
   4662  f668				  -ZONE26ADDRESS =	TMPMEMADDRESS
   4663  f668					      endif
   4664  f668				  -	      if	DLINDEX = 27
   4665  f668				  -ZONE27ADDRESS =	TMPMEMADDRESS
   4666  f668					      endif
   4667  f668				   DLINDEX    SET	DLINDEX + 1
   4572  f668					      REPEND
   4573  f668				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4574  f668				  -	      ifconst	EXTRADLMEMORY
   4575  f668				  -	      if	TMPMEMADDRESS > $1FFF
   4576  f668				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4577  f668				  -	      else
   4578  f668				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4579  f668				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4580  f668				  -	      endif
   4581  f668				  -	      endif		; TMPMEMADDRESS > $1FFF
   4582  f668					      endif		; EXTRADLMEMORY
   4583  f668				  -	      if	DLINDEX = 0
   4584  f668				  -ZONE0ADDRESS =	TMPMEMADDRESS
   4585  f668					      endif
   4586  f668				  -	      if	DLINDEX = 1
   4587  f668				  -ZONE1ADDRESS =	TMPMEMADDRESS
   4588  f668					      endif
   4589  f668				  -	      if	DLINDEX = 2
   4590  f668				  -ZONE2ADDRESS =	TMPMEMADDRESS
   4591  f668					      endif
   4592  f668				  -	      if	DLINDEX = 3
   4593  f668				  -ZONE3ADDRESS =	TMPMEMADDRESS
   4594  f668					      endif
   4595  f668				  -	      if	DLINDEX = 4
   4596  f668				  -ZONE4ADDRESS =	TMPMEMADDRESS
   4597  f668					      endif
   4598  f668				  -	      if	DLINDEX = 5
   4599  f668				  -ZONE5ADDRESS =	TMPMEMADDRESS
   4600  f668					      endif
   4601  f668				  -	      if	DLINDEX = 6
   4602  f668				  -ZONE6ADDRESS =	TMPMEMADDRESS
   4603  f668					      endif
   4604  f668				  -	      if	DLINDEX = 7
   4605  f668				  -ZONE7ADDRESS =	TMPMEMADDRESS
   4606  f668					      endif
   4607  f668				  -	      if	DLINDEX = 8
   4608  f668				  -ZONE8ADDRESS =	TMPMEMADDRESS
   4609  f668					      endif
   4610  f668				  -	      if	DLINDEX = 9
   4611  f668				  -ZONE9ADDRESS =	TMPMEMADDRESS
   4612  f668					      endif
   4613  f668				  -	      if	DLINDEX = 10
   4614  f668				  -ZONE10ADDRESS =	TMPMEMADDRESS
   4615  f668					      endif
   4616  f668				  -	      if	DLINDEX = 11
   4617  f668				  -ZONE11ADDRESS =	TMPMEMADDRESS
   4618  f668					      endif
   4619  f668				  -	      if	DLINDEX = 12
   4620  f668				  -ZONE12ADDRESS =	TMPMEMADDRESS
   4621  f668					      endif
   4622  f668				  -	      if	DLINDEX = 13
   4623  f668				  -ZONE13ADDRESS =	TMPMEMADDRESS
   4624  f668					      endif
   4625  f668					      if	DLINDEX = 14
   4626  f668		       1c e0	   ZONE14ADDRESS =	TMPMEMADDRESS
   4627  f668					      endif
   4628  f668				  -	      if	DLINDEX = 15
   4629  f668				  -ZONE15ADDRESS =	TMPMEMADDRESS
   4630  f668					      endif
   4631  f668				  -	      if	DLINDEX = 16
   4632  f668				  -ZONE16ADDRESS =	TMPMEMADDRESS
   4633  f668					      endif
   4634  f668				  -	      if	DLINDEX = 17
   4635  f668				  -ZONE17ADDRESS =	TMPMEMADDRESS
   4636  f668					      endif
   4637  f668				  -	      if	DLINDEX = 18
   4638  f668				  -ZONE18ADDRESS =	TMPMEMADDRESS
   4639  f668					      endif
   4640  f668				  -	      if	DLINDEX = 19
   4641  f668				  -ZONE19ADDRESS =	TMPMEMADDRESS
   4642  f668					      endif
   4643  f668				  -	      if	DLINDEX = 20
   4644  f668				  -ZONE20ADDRESS =	TMPMEMADDRESS
   4645  f668					      endif
   4646  f668				  -	      if	DLINDEX = 21
   4647  f668				  -ZONE21ADDRESS =	TMPMEMADDRESS
   4648  f668					      endif
   4649  f668				  -	      if	DLINDEX = 22
   4650  f668				  -ZONE22ADDRESS =	TMPMEMADDRESS
   4651  f668					      endif
   4652  f668				  -	      if	DLINDEX = 23
   4653  f668				  -ZONE23ADDRESS =	TMPMEMADDRESS
   4654  f668					      endif
   4655  f668				  -	      if	DLINDEX = 24
   4656  f668				  -ZONE24ADDRESS =	TMPMEMADDRESS
   4657  f668					      endif
   4658  f668				  -	      if	DLINDEX = 25
   4659  f668				  -ZONE25ADDRESS =	TMPMEMADDRESS
   4660  f668					      endif
   4661  f668				  -	      if	DLINDEX = 26
   4662  f668				  -ZONE26ADDRESS =	TMPMEMADDRESS
   4663  f668					      endif
   4664  f668				  -	      if	DLINDEX = 27
   4665  f668				  -ZONE27ADDRESS =	TMPMEMADDRESS
   4666  f668					      endif
   4667  f668				   DLINDEX    SET	DLINDEX + 1
   4572  f668					      REPEND
   4573  f668				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4574  f668				  -	      ifconst	EXTRADLMEMORY
   4575  f668				  -	      if	TMPMEMADDRESS > $1FFF
   4576  f668				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4577  f668				  -	      else
   4578  f668				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4579  f668				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4580  f668				  -	      endif
   4581  f668				  -	      endif		; TMPMEMADDRESS > $1FFF
   4582  f668					      endif		; EXTRADLMEMORY
   4583  f668				  -	      if	DLINDEX = 0
   4584  f668				  -ZONE0ADDRESS =	TMPMEMADDRESS
   4585  f668					      endif
   4586  f668				  -	      if	DLINDEX = 1
   4587  f668				  -ZONE1ADDRESS =	TMPMEMADDRESS
   4588  f668					      endif
   4589  f668				  -	      if	DLINDEX = 2
   4590  f668				  -ZONE2ADDRESS =	TMPMEMADDRESS
   4591  f668					      endif
   4592  f668				  -	      if	DLINDEX = 3
   4593  f668				  -ZONE3ADDRESS =	TMPMEMADDRESS
   4594  f668					      endif
   4595  f668				  -	      if	DLINDEX = 4
   4596  f668				  -ZONE4ADDRESS =	TMPMEMADDRESS
   4597  f668					      endif
   4598  f668				  -	      if	DLINDEX = 5
   4599  f668				  -ZONE5ADDRESS =	TMPMEMADDRESS
   4600  f668					      endif
   4601  f668				  -	      if	DLINDEX = 6
   4602  f668				  -ZONE6ADDRESS =	TMPMEMADDRESS
   4603  f668					      endif
   4604  f668				  -	      if	DLINDEX = 7
   4605  f668				  -ZONE7ADDRESS =	TMPMEMADDRESS
   4606  f668					      endif
   4607  f668				  -	      if	DLINDEX = 8
   4608  f668				  -ZONE8ADDRESS =	TMPMEMADDRESS
   4609  f668					      endif
   4610  f668				  -	      if	DLINDEX = 9
   4611  f668				  -ZONE9ADDRESS =	TMPMEMADDRESS
   4612  f668					      endif
   4613  f668				  -	      if	DLINDEX = 10
   4614  f668				  -ZONE10ADDRESS =	TMPMEMADDRESS
   4615  f668					      endif
   4616  f668				  -	      if	DLINDEX = 11
   4617  f668				  -ZONE11ADDRESS =	TMPMEMADDRESS
   4618  f668					      endif
   4619  f668				  -	      if	DLINDEX = 12
   4620  f668				  -ZONE12ADDRESS =	TMPMEMADDRESS
   4621  f668					      endif
   4622  f668				  -	      if	DLINDEX = 13
   4623  f668				  -ZONE13ADDRESS =	TMPMEMADDRESS
   4624  f668					      endif
   4625  f668				  -	      if	DLINDEX = 14
   4626  f668				  -ZONE14ADDRESS =	TMPMEMADDRESS
   4627  f668					      endif
   4628  f668					      if	DLINDEX = 15
   4629  f668		       1d 30	   ZONE15ADDRESS =	TMPMEMADDRESS
   4630  f668					      endif
   4631  f668				  -	      if	DLINDEX = 16
   4632  f668				  -ZONE16ADDRESS =	TMPMEMADDRESS
   4633  f668					      endif
   4634  f668				  -	      if	DLINDEX = 17
   4635  f668				  -ZONE17ADDRESS =	TMPMEMADDRESS
   4636  f668					      endif
   4637  f668				  -	      if	DLINDEX = 18
   4638  f668				  -ZONE18ADDRESS =	TMPMEMADDRESS
   4639  f668					      endif
   4640  f668				  -	      if	DLINDEX = 19
   4641  f668				  -ZONE19ADDRESS =	TMPMEMADDRESS
   4642  f668					      endif
   4643  f668				  -	      if	DLINDEX = 20
   4644  f668				  -ZONE20ADDRESS =	TMPMEMADDRESS
   4645  f668					      endif
   4646  f668				  -	      if	DLINDEX = 21
   4647  f668				  -ZONE21ADDRESS =	TMPMEMADDRESS
   4648  f668					      endif
   4649  f668				  -	      if	DLINDEX = 22
   4650  f668				  -ZONE22ADDRESS =	TMPMEMADDRESS
   4651  f668					      endif
   4652  f668				  -	      if	DLINDEX = 23
   4653  f668				  -ZONE23ADDRESS =	TMPMEMADDRESS
   4654  f668					      endif
   4655  f668				  -	      if	DLINDEX = 24
   4656  f668				  -ZONE24ADDRESS =	TMPMEMADDRESS
   4657  f668					      endif
   4658  f668				  -	      if	DLINDEX = 25
   4659  f668				  -ZONE25ADDRESS =	TMPMEMADDRESS
   4660  f668					      endif
   4661  f668				  -	      if	DLINDEX = 26
   4662  f668				  -ZONE26ADDRESS =	TMPMEMADDRESS
   4663  f668					      endif
   4664  f668				  -	      if	DLINDEX = 27
   4665  f668				  -ZONE27ADDRESS =	TMPMEMADDRESS
   4666  f668					      endif
   4667  f668				   DLINDEX    SET	DLINDEX + 1
   4572  f668					      REPEND
   4573  f668				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4574  f668				  -	      ifconst	EXTRADLMEMORY
   4575  f668				  -	      if	TMPMEMADDRESS > $1FFF
   4576  f668				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4577  f668				  -	      else
   4578  f668				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4579  f668				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4580  f668				  -	      endif
   4581  f668				  -	      endif		; TMPMEMADDRESS > $1FFF
   4582  f668					      endif		; EXTRADLMEMORY
   4583  f668				  -	      if	DLINDEX = 0
   4584  f668				  -ZONE0ADDRESS =	TMPMEMADDRESS
   4585  f668					      endif
   4586  f668				  -	      if	DLINDEX = 1
   4587  f668				  -ZONE1ADDRESS =	TMPMEMADDRESS
   4588  f668					      endif
   4589  f668				  -	      if	DLINDEX = 2
   4590  f668				  -ZONE2ADDRESS =	TMPMEMADDRESS
   4591  f668					      endif
   4592  f668				  -	      if	DLINDEX = 3
   4593  f668				  -ZONE3ADDRESS =	TMPMEMADDRESS
   4594  f668					      endif
   4595  f668				  -	      if	DLINDEX = 4
   4596  f668				  -ZONE4ADDRESS =	TMPMEMADDRESS
   4597  f668					      endif
   4598  f668				  -	      if	DLINDEX = 5
   4599  f668				  -ZONE5ADDRESS =	TMPMEMADDRESS
   4600  f668					      endif
   4601  f668				  -	      if	DLINDEX = 6
   4602  f668				  -ZONE6ADDRESS =	TMPMEMADDRESS
   4603  f668					      endif
   4604  f668				  -	      if	DLINDEX = 7
   4605  f668				  -ZONE7ADDRESS =	TMPMEMADDRESS
   4606  f668					      endif
   4607  f668				  -	      if	DLINDEX = 8
   4608  f668				  -ZONE8ADDRESS =	TMPMEMADDRESS
   4609  f668					      endif
   4610  f668				  -	      if	DLINDEX = 9
   4611  f668				  -ZONE9ADDRESS =	TMPMEMADDRESS
   4612  f668					      endif
   4613  f668				  -	      if	DLINDEX = 10
   4614  f668				  -ZONE10ADDRESS =	TMPMEMADDRESS
   4615  f668					      endif
   4616  f668				  -	      if	DLINDEX = 11
   4617  f668				  -ZONE11ADDRESS =	TMPMEMADDRESS
   4618  f668					      endif
   4619  f668				  -	      if	DLINDEX = 12
   4620  f668				  -ZONE12ADDRESS =	TMPMEMADDRESS
   4621  f668					      endif
   4622  f668				  -	      if	DLINDEX = 13
   4623  f668				  -ZONE13ADDRESS =	TMPMEMADDRESS
   4624  f668					      endif
   4625  f668				  -	      if	DLINDEX = 14
   4626  f668				  -ZONE14ADDRESS =	TMPMEMADDRESS
   4627  f668					      endif
   4628  f668				  -	      if	DLINDEX = 15
   4629  f668				  -ZONE15ADDRESS =	TMPMEMADDRESS
   4630  f668					      endif
   4631  f668					      if	DLINDEX = 16
   4632  f668		       1d 80	   ZONE16ADDRESS =	TMPMEMADDRESS
   4633  f668					      endif
   4634  f668				  -	      if	DLINDEX = 17
   4635  f668				  -ZONE17ADDRESS =	TMPMEMADDRESS
   4636  f668					      endif
   4637  f668				  -	      if	DLINDEX = 18
   4638  f668				  -ZONE18ADDRESS =	TMPMEMADDRESS
   4639  f668					      endif
   4640  f668				  -	      if	DLINDEX = 19
   4641  f668				  -ZONE19ADDRESS =	TMPMEMADDRESS
   4642  f668					      endif
   4643  f668				  -	      if	DLINDEX = 20
   4644  f668				  -ZONE20ADDRESS =	TMPMEMADDRESS
   4645  f668					      endif
   4646  f668				  -	      if	DLINDEX = 21
   4647  f668				  -ZONE21ADDRESS =	TMPMEMADDRESS
   4648  f668					      endif
   4649  f668				  -	      if	DLINDEX = 22
   4650  f668				  -ZONE22ADDRESS =	TMPMEMADDRESS
   4651  f668					      endif
   4652  f668				  -	      if	DLINDEX = 23
   4653  f668				  -ZONE23ADDRESS =	TMPMEMADDRESS
   4654  f668					      endif
   4655  f668				  -	      if	DLINDEX = 24
   4656  f668				  -ZONE24ADDRESS =	TMPMEMADDRESS
   4657  f668					      endif
   4658  f668				  -	      if	DLINDEX = 25
   4659  f668				  -ZONE25ADDRESS =	TMPMEMADDRESS
   4660  f668					      endif
   4661  f668				  -	      if	DLINDEX = 26
   4662  f668				  -ZONE26ADDRESS =	TMPMEMADDRESS
   4663  f668					      endif
   4664  f668				  -	      if	DLINDEX = 27
   4665  f668				  -ZONE27ADDRESS =	TMPMEMADDRESS
   4666  f668					      endif
   4667  f668				   DLINDEX    SET	DLINDEX + 1
   4572  f668					      REPEND
   4573  f668				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4574  f668				  -	      ifconst	EXTRADLMEMORY
   4575  f668				  -	      if	TMPMEMADDRESS > $1FFF
   4576  f668				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4577  f668				  -	      else
   4578  f668				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4579  f668				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4580  f668				  -	      endif
   4581  f668				  -	      endif		; TMPMEMADDRESS > $1FFF
   4582  f668					      endif		; EXTRADLMEMORY
   4583  f668				  -	      if	DLINDEX = 0
   4584  f668				  -ZONE0ADDRESS =	TMPMEMADDRESS
   4585  f668					      endif
   4586  f668				  -	      if	DLINDEX = 1
   4587  f668				  -ZONE1ADDRESS =	TMPMEMADDRESS
   4588  f668					      endif
   4589  f668				  -	      if	DLINDEX = 2
   4590  f668				  -ZONE2ADDRESS =	TMPMEMADDRESS
   4591  f668					      endif
   4592  f668				  -	      if	DLINDEX = 3
   4593  f668				  -ZONE3ADDRESS =	TMPMEMADDRESS
   4594  f668					      endif
   4595  f668				  -	      if	DLINDEX = 4
   4596  f668				  -ZONE4ADDRESS =	TMPMEMADDRESS
   4597  f668					      endif
   4598  f668				  -	      if	DLINDEX = 5
   4599  f668				  -ZONE5ADDRESS =	TMPMEMADDRESS
   4600  f668					      endif
   4601  f668				  -	      if	DLINDEX = 6
   4602  f668				  -ZONE6ADDRESS =	TMPMEMADDRESS
   4603  f668					      endif
   4604  f668				  -	      if	DLINDEX = 7
   4605  f668				  -ZONE7ADDRESS =	TMPMEMADDRESS
   4606  f668					      endif
   4607  f668				  -	      if	DLINDEX = 8
   4608  f668				  -ZONE8ADDRESS =	TMPMEMADDRESS
   4609  f668					      endif
   4610  f668				  -	      if	DLINDEX = 9
   4611  f668				  -ZONE9ADDRESS =	TMPMEMADDRESS
   4612  f668					      endif
   4613  f668				  -	      if	DLINDEX = 10
   4614  f668				  -ZONE10ADDRESS =	TMPMEMADDRESS
   4615  f668					      endif
   4616  f668				  -	      if	DLINDEX = 11
   4617  f668				  -ZONE11ADDRESS =	TMPMEMADDRESS
   4618  f668					      endif
   4619  f668				  -	      if	DLINDEX = 12
   4620  f668				  -ZONE12ADDRESS =	TMPMEMADDRESS
   4621  f668					      endif
   4622  f668				  -	      if	DLINDEX = 13
   4623  f668				  -ZONE13ADDRESS =	TMPMEMADDRESS
   4624  f668					      endif
   4625  f668				  -	      if	DLINDEX = 14
   4626  f668				  -ZONE14ADDRESS =	TMPMEMADDRESS
   4627  f668					      endif
   4628  f668				  -	      if	DLINDEX = 15
   4629  f668				  -ZONE15ADDRESS =	TMPMEMADDRESS
   4630  f668					      endif
   4631  f668				  -	      if	DLINDEX = 16
   4632  f668				  -ZONE16ADDRESS =	TMPMEMADDRESS
   4633  f668					      endif
   4634  f668					      if	DLINDEX = 17
   4635  f668		       1d d0	   ZONE17ADDRESS =	TMPMEMADDRESS
   4636  f668					      endif
   4637  f668				  -	      if	DLINDEX = 18
   4638  f668				  -ZONE18ADDRESS =	TMPMEMADDRESS
   4639  f668					      endif
   4640  f668				  -	      if	DLINDEX = 19
   4641  f668				  -ZONE19ADDRESS =	TMPMEMADDRESS
   4642  f668					      endif
   4643  f668				  -	      if	DLINDEX = 20
   4644  f668				  -ZONE20ADDRESS =	TMPMEMADDRESS
   4645  f668					      endif
   4646  f668				  -	      if	DLINDEX = 21
   4647  f668				  -ZONE21ADDRESS =	TMPMEMADDRESS
   4648  f668					      endif
   4649  f668				  -	      if	DLINDEX = 22
   4650  f668				  -ZONE22ADDRESS =	TMPMEMADDRESS
   4651  f668					      endif
   4652  f668				  -	      if	DLINDEX = 23
   4653  f668				  -ZONE23ADDRESS =	TMPMEMADDRESS
   4654  f668					      endif
   4655  f668				  -	      if	DLINDEX = 24
   4656  f668				  -ZONE24ADDRESS =	TMPMEMADDRESS
   4657  f668					      endif
   4658  f668				  -	      if	DLINDEX = 25
   4659  f668				  -ZONE25ADDRESS =	TMPMEMADDRESS
   4660  f668					      endif
   4661  f668				  -	      if	DLINDEX = 26
   4662  f668				  -ZONE26ADDRESS =	TMPMEMADDRESS
   4663  f668					      endif
   4664  f668				  -	      if	DLINDEX = 27
   4665  f668				  -ZONE27ADDRESS =	TMPMEMADDRESS
   4666  f668					      endif
   4667  f668				   DLINDEX    SET	DLINDEX + 1
   4572  f668					      REPEND
   4573  f668				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4574  f668				  -	      ifconst	EXTRADLMEMORY
   4575  f668				  -	      if	TMPMEMADDRESS > $1FFF
   4576  f668				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4577  f668				  -	      else
   4578  f668				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4579  f668				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4580  f668				  -	      endif
   4581  f668				  -	      endif		; TMPMEMADDRESS > $1FFF
   4582  f668					      endif		; EXTRADLMEMORY
   4583  f668				  -	      if	DLINDEX = 0
   4584  f668				  -ZONE0ADDRESS =	TMPMEMADDRESS
   4585  f668					      endif
   4586  f668				  -	      if	DLINDEX = 1
   4587  f668				  -ZONE1ADDRESS =	TMPMEMADDRESS
   4588  f668					      endif
   4589  f668				  -	      if	DLINDEX = 2
   4590  f668				  -ZONE2ADDRESS =	TMPMEMADDRESS
   4591  f668					      endif
   4592  f668				  -	      if	DLINDEX = 3
   4593  f668				  -ZONE3ADDRESS =	TMPMEMADDRESS
   4594  f668					      endif
   4595  f668				  -	      if	DLINDEX = 4
   4596  f668				  -ZONE4ADDRESS =	TMPMEMADDRESS
   4597  f668					      endif
   4598  f668				  -	      if	DLINDEX = 5
   4599  f668				  -ZONE5ADDRESS =	TMPMEMADDRESS
   4600  f668					      endif
   4601  f668				  -	      if	DLINDEX = 6
   4602  f668				  -ZONE6ADDRESS =	TMPMEMADDRESS
   4603  f668					      endif
   4604  f668				  -	      if	DLINDEX = 7
   4605  f668				  -ZONE7ADDRESS =	TMPMEMADDRESS
   4606  f668					      endif
   4607  f668				  -	      if	DLINDEX = 8
   4608  f668				  -ZONE8ADDRESS =	TMPMEMADDRESS
   4609  f668					      endif
   4610  f668				  -	      if	DLINDEX = 9
   4611  f668				  -ZONE9ADDRESS =	TMPMEMADDRESS
   4612  f668					      endif
   4613  f668				  -	      if	DLINDEX = 10
   4614  f668				  -ZONE10ADDRESS =	TMPMEMADDRESS
   4615  f668					      endif
   4616  f668				  -	      if	DLINDEX = 11
   4617  f668				  -ZONE11ADDRESS =	TMPMEMADDRESS
   4618  f668					      endif
   4619  f668				  -	      if	DLINDEX = 12
   4620  f668				  -ZONE12ADDRESS =	TMPMEMADDRESS
   4621  f668					      endif
   4622  f668				  -	      if	DLINDEX = 13
   4623  f668				  -ZONE13ADDRESS =	TMPMEMADDRESS
   4624  f668					      endif
   4625  f668				  -	      if	DLINDEX = 14
   4626  f668				  -ZONE14ADDRESS =	TMPMEMADDRESS
   4627  f668					      endif
   4628  f668				  -	      if	DLINDEX = 15
   4629  f668				  -ZONE15ADDRESS =	TMPMEMADDRESS
   4630  f668					      endif
   4631  f668				  -	      if	DLINDEX = 16
   4632  f668				  -ZONE16ADDRESS =	TMPMEMADDRESS
   4633  f668					      endif
   4634  f668				  -	      if	DLINDEX = 17
   4635  f668				  -ZONE17ADDRESS =	TMPMEMADDRESS
   4636  f668					      endif
   4637  f668					      if	DLINDEX = 18
   4638  f668		       1e 20	   ZONE18ADDRESS =	TMPMEMADDRESS
   4639  f668					      endif
   4640  f668				  -	      if	DLINDEX = 19
   4641  f668				  -ZONE19ADDRESS =	TMPMEMADDRESS
   4642  f668					      endif
   4643  f668				  -	      if	DLINDEX = 20
   4644  f668				  -ZONE20ADDRESS =	TMPMEMADDRESS
   4645  f668					      endif
   4646  f668				  -	      if	DLINDEX = 21
   4647  f668				  -ZONE21ADDRESS =	TMPMEMADDRESS
   4648  f668					      endif
   4649  f668				  -	      if	DLINDEX = 22
   4650  f668				  -ZONE22ADDRESS =	TMPMEMADDRESS
   4651  f668					      endif
   4652  f668				  -	      if	DLINDEX = 23
   4653  f668				  -ZONE23ADDRESS =	TMPMEMADDRESS
   4654  f668					      endif
   4655  f668				  -	      if	DLINDEX = 24
   4656  f668				  -ZONE24ADDRESS =	TMPMEMADDRESS
   4657  f668					      endif
   4658  f668				  -	      if	DLINDEX = 25
   4659  f668				  -ZONE25ADDRESS =	TMPMEMADDRESS
   4660  f668					      endif
   4661  f668				  -	      if	DLINDEX = 26
   4662  f668				  -ZONE26ADDRESS =	TMPMEMADDRESS
   4663  f668					      endif
   4664  f668				  -	      if	DLINDEX = 27
   4665  f668				  -ZONE27ADDRESS =	TMPMEMADDRESS
   4666  f668					      endif
   4667  f668				   DLINDEX    SET	DLINDEX + 1
   4572  f668					      REPEND
   4573  f668				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4574  f668				  -	      ifconst	EXTRADLMEMORY
   4575  f668				  -	      if	TMPMEMADDRESS > $1FFF
   4576  f668				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4577  f668				  -	      else
   4578  f668				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4579  f668				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4580  f668				  -	      endif
   4581  f668				  -	      endif		; TMPMEMADDRESS > $1FFF
   4582  f668					      endif		; EXTRADLMEMORY
   4583  f668				  -	      if	DLINDEX = 0
   4584  f668				  -ZONE0ADDRESS =	TMPMEMADDRESS
   4585  f668					      endif
   4586  f668				  -	      if	DLINDEX = 1
   4587  f668				  -ZONE1ADDRESS =	TMPMEMADDRESS
   4588  f668					      endif
   4589  f668				  -	      if	DLINDEX = 2
   4590  f668				  -ZONE2ADDRESS =	TMPMEMADDRESS
   4591  f668					      endif
   4592  f668				  -	      if	DLINDEX = 3
   4593  f668				  -ZONE3ADDRESS =	TMPMEMADDRESS
   4594  f668					      endif
   4595  f668				  -	      if	DLINDEX = 4
   4596  f668				  -ZONE4ADDRESS =	TMPMEMADDRESS
   4597  f668					      endif
   4598  f668				  -	      if	DLINDEX = 5
   4599  f668				  -ZONE5ADDRESS =	TMPMEMADDRESS
   4600  f668					      endif
   4601  f668				  -	      if	DLINDEX = 6
   4602  f668				  -ZONE6ADDRESS =	TMPMEMADDRESS
   4603  f668					      endif
   4604  f668				  -	      if	DLINDEX = 7
   4605  f668				  -ZONE7ADDRESS =	TMPMEMADDRESS
   4606  f668					      endif
   4607  f668				  -	      if	DLINDEX = 8
   4608  f668				  -ZONE8ADDRESS =	TMPMEMADDRESS
   4609  f668					      endif
   4610  f668				  -	      if	DLINDEX = 9
   4611  f668				  -ZONE9ADDRESS =	TMPMEMADDRESS
   4612  f668					      endif
   4613  f668				  -	      if	DLINDEX = 10
   4614  f668				  -ZONE10ADDRESS =	TMPMEMADDRESS
   4615  f668					      endif
   4616  f668				  -	      if	DLINDEX = 11
   4617  f668				  -ZONE11ADDRESS =	TMPMEMADDRESS
   4618  f668					      endif
   4619  f668				  -	      if	DLINDEX = 12
   4620  f668				  -ZONE12ADDRESS =	TMPMEMADDRESS
   4621  f668					      endif
   4622  f668				  -	      if	DLINDEX = 13
   4623  f668				  -ZONE13ADDRESS =	TMPMEMADDRESS
   4624  f668					      endif
   4625  f668				  -	      if	DLINDEX = 14
   4626  f668				  -ZONE14ADDRESS =	TMPMEMADDRESS
   4627  f668					      endif
   4628  f668				  -	      if	DLINDEX = 15
   4629  f668				  -ZONE15ADDRESS =	TMPMEMADDRESS
   4630  f668					      endif
   4631  f668				  -	      if	DLINDEX = 16
   4632  f668				  -ZONE16ADDRESS =	TMPMEMADDRESS
   4633  f668					      endif
   4634  f668				  -	      if	DLINDEX = 17
   4635  f668				  -ZONE17ADDRESS =	TMPMEMADDRESS
   4636  f668					      endif
   4637  f668				  -	      if	DLINDEX = 18
   4638  f668				  -ZONE18ADDRESS =	TMPMEMADDRESS
   4639  f668					      endif
   4640  f668					      if	DLINDEX = 19
   4641  f668		       1e 70	   ZONE19ADDRESS =	TMPMEMADDRESS
   4642  f668					      endif
   4643  f668				  -	      if	DLINDEX = 20
   4644  f668				  -ZONE20ADDRESS =	TMPMEMADDRESS
   4645  f668					      endif
   4646  f668				  -	      if	DLINDEX = 21
   4647  f668				  -ZONE21ADDRESS =	TMPMEMADDRESS
   4648  f668					      endif
   4649  f668				  -	      if	DLINDEX = 22
   4650  f668				  -ZONE22ADDRESS =	TMPMEMADDRESS
   4651  f668					      endif
   4652  f668				  -	      if	DLINDEX = 23
   4653  f668				  -ZONE23ADDRESS =	TMPMEMADDRESS
   4654  f668					      endif
   4655  f668				  -	      if	DLINDEX = 24
   4656  f668				  -ZONE24ADDRESS =	TMPMEMADDRESS
   4657  f668					      endif
   4658  f668				  -	      if	DLINDEX = 25
   4659  f668				  -ZONE25ADDRESS =	TMPMEMADDRESS
   4660  f668					      endif
   4661  f668				  -	      if	DLINDEX = 26
   4662  f668				  -ZONE26ADDRESS =	TMPMEMADDRESS
   4663  f668					      endif
   4664  f668				  -	      if	DLINDEX = 27
   4665  f668				  -ZONE27ADDRESS =	TMPMEMADDRESS
   4666  f668					      endif
   4667  f668				   DLINDEX    SET	DLINDEX + 1
   4572  f668					      REPEND
   4573  f668				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4574  f668				  -	      ifconst	EXTRADLMEMORY
   4575  f668				  -	      if	TMPMEMADDRESS > $1FFF
   4576  f668				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4577  f668				  -	      else
   4578  f668				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4579  f668				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4580  f668				  -	      endif
   4581  f668				  -	      endif		; TMPMEMADDRESS > $1FFF
   4582  f668					      endif		; EXTRADLMEMORY
   4583  f668				  -	      if	DLINDEX = 0
   4584  f668				  -ZONE0ADDRESS =	TMPMEMADDRESS
   4585  f668					      endif
   4586  f668				  -	      if	DLINDEX = 1
   4587  f668				  -ZONE1ADDRESS =	TMPMEMADDRESS
   4588  f668					      endif
   4589  f668				  -	      if	DLINDEX = 2
   4590  f668				  -ZONE2ADDRESS =	TMPMEMADDRESS
   4591  f668					      endif
   4592  f668				  -	      if	DLINDEX = 3
   4593  f668				  -ZONE3ADDRESS =	TMPMEMADDRESS
   4594  f668					      endif
   4595  f668				  -	      if	DLINDEX = 4
   4596  f668				  -ZONE4ADDRESS =	TMPMEMADDRESS
   4597  f668					      endif
   4598  f668				  -	      if	DLINDEX = 5
   4599  f668				  -ZONE5ADDRESS =	TMPMEMADDRESS
   4600  f668					      endif
   4601  f668				  -	      if	DLINDEX = 6
   4602  f668				  -ZONE6ADDRESS =	TMPMEMADDRESS
   4603  f668					      endif
   4604  f668				  -	      if	DLINDEX = 7
   4605  f668				  -ZONE7ADDRESS =	TMPMEMADDRESS
   4606  f668					      endif
   4607  f668				  -	      if	DLINDEX = 8
   4608  f668				  -ZONE8ADDRESS =	TMPMEMADDRESS
   4609  f668					      endif
   4610  f668				  -	      if	DLINDEX = 9
   4611  f668				  -ZONE9ADDRESS =	TMPMEMADDRESS
   4612  f668					      endif
   4613  f668				  -	      if	DLINDEX = 10
   4614  f668				  -ZONE10ADDRESS =	TMPMEMADDRESS
   4615  f668					      endif
   4616  f668				  -	      if	DLINDEX = 11
   4617  f668				  -ZONE11ADDRESS =	TMPMEMADDRESS
   4618  f668					      endif
   4619  f668				  -	      if	DLINDEX = 12
   4620  f668				  -ZONE12ADDRESS =	TMPMEMADDRESS
   4621  f668					      endif
   4622  f668				  -	      if	DLINDEX = 13
   4623  f668				  -ZONE13ADDRESS =	TMPMEMADDRESS
   4624  f668					      endif
   4625  f668				  -	      if	DLINDEX = 14
   4626  f668				  -ZONE14ADDRESS =	TMPMEMADDRESS
   4627  f668					      endif
   4628  f668				  -	      if	DLINDEX = 15
   4629  f668				  -ZONE15ADDRESS =	TMPMEMADDRESS
   4630  f668					      endif
   4631  f668				  -	      if	DLINDEX = 16
   4632  f668				  -ZONE16ADDRESS =	TMPMEMADDRESS
   4633  f668					      endif
   4634  f668				  -	      if	DLINDEX = 17
   4635  f668				  -ZONE17ADDRESS =	TMPMEMADDRESS
   4636  f668					      endif
   4637  f668				  -	      if	DLINDEX = 18
   4638  f668				  -ZONE18ADDRESS =	TMPMEMADDRESS
   4639  f668					      endif
   4640  f668				  -	      if	DLINDEX = 19
   4641  f668				  -ZONE19ADDRESS =	TMPMEMADDRESS
   4642  f668					      endif
   4643  f668					      if	DLINDEX = 20
   4644  f668		       1e c0	   ZONE20ADDRESS =	TMPMEMADDRESS
   4645  f668					      endif
   4646  f668				  -	      if	DLINDEX = 21
   4647  f668				  -ZONE21ADDRESS =	TMPMEMADDRESS
   4648  f668					      endif
   4649  f668				  -	      if	DLINDEX = 22
   4650  f668				  -ZONE22ADDRESS =	TMPMEMADDRESS
   4651  f668					      endif
   4652  f668				  -	      if	DLINDEX = 23
   4653  f668				  -ZONE23ADDRESS =	TMPMEMADDRESS
   4654  f668					      endif
   4655  f668				  -	      if	DLINDEX = 24
   4656  f668				  -ZONE24ADDRESS =	TMPMEMADDRESS
   4657  f668					      endif
   4658  f668				  -	      if	DLINDEX = 25
   4659  f668				  -ZONE25ADDRESS =	TMPMEMADDRESS
   4660  f668					      endif
   4661  f668				  -	      if	DLINDEX = 26
   4662  f668				  -ZONE26ADDRESS =	TMPMEMADDRESS
   4663  f668					      endif
   4664  f668				  -	      if	DLINDEX = 27
   4665  f668				  -ZONE27ADDRESS =	TMPMEMADDRESS
   4666  f668					      endif
   4667  f668				   DLINDEX    SET	DLINDEX + 1
   4572  f668					      REPEND
   4573  f668				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4574  f668				  -	      ifconst	EXTRADLMEMORY
   4575  f668				  -	      if	TMPMEMADDRESS > $1FFF
   4576  f668				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4577  f668				  -	      else
   4578  f668				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4579  f668				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4580  f668				  -	      endif
   4581  f668				  -	      endif		; TMPMEMADDRESS > $1FFF
   4582  f668					      endif		; EXTRADLMEMORY
   4583  f668				  -	      if	DLINDEX = 0
   4584  f668				  -ZONE0ADDRESS =	TMPMEMADDRESS
   4585  f668					      endif
   4586  f668				  -	      if	DLINDEX = 1
   4587  f668				  -ZONE1ADDRESS =	TMPMEMADDRESS
   4588  f668					      endif
   4589  f668				  -	      if	DLINDEX = 2
   4590  f668				  -ZONE2ADDRESS =	TMPMEMADDRESS
   4591  f668					      endif
   4592  f668				  -	      if	DLINDEX = 3
   4593  f668				  -ZONE3ADDRESS =	TMPMEMADDRESS
   4594  f668					      endif
   4595  f668				  -	      if	DLINDEX = 4
   4596  f668				  -ZONE4ADDRESS =	TMPMEMADDRESS
   4597  f668					      endif
   4598  f668				  -	      if	DLINDEX = 5
   4599  f668				  -ZONE5ADDRESS =	TMPMEMADDRESS
   4600  f668					      endif
   4601  f668				  -	      if	DLINDEX = 6
   4602  f668				  -ZONE6ADDRESS =	TMPMEMADDRESS
   4603  f668					      endif
   4604  f668				  -	      if	DLINDEX = 7
   4605  f668				  -ZONE7ADDRESS =	TMPMEMADDRESS
   4606  f668					      endif
   4607  f668				  -	      if	DLINDEX = 8
   4608  f668				  -ZONE8ADDRESS =	TMPMEMADDRESS
   4609  f668					      endif
   4610  f668				  -	      if	DLINDEX = 9
   4611  f668				  -ZONE9ADDRESS =	TMPMEMADDRESS
   4612  f668					      endif
   4613  f668				  -	      if	DLINDEX = 10
   4614  f668				  -ZONE10ADDRESS =	TMPMEMADDRESS
   4615  f668					      endif
   4616  f668				  -	      if	DLINDEX = 11
   4617  f668				  -ZONE11ADDRESS =	TMPMEMADDRESS
   4618  f668					      endif
   4619  f668				  -	      if	DLINDEX = 12
   4620  f668				  -ZONE12ADDRESS =	TMPMEMADDRESS
   4621  f668					      endif
   4622  f668				  -	      if	DLINDEX = 13
   4623  f668				  -ZONE13ADDRESS =	TMPMEMADDRESS
   4624  f668					      endif
   4625  f668				  -	      if	DLINDEX = 14
   4626  f668				  -ZONE14ADDRESS =	TMPMEMADDRESS
   4627  f668					      endif
   4628  f668				  -	      if	DLINDEX = 15
   4629  f668				  -ZONE15ADDRESS =	TMPMEMADDRESS
   4630  f668					      endif
   4631  f668				  -	      if	DLINDEX = 16
   4632  f668				  -ZONE16ADDRESS =	TMPMEMADDRESS
   4633  f668					      endif
   4634  f668				  -	      if	DLINDEX = 17
   4635  f668				  -ZONE17ADDRESS =	TMPMEMADDRESS
   4636  f668					      endif
   4637  f668				  -	      if	DLINDEX = 18
   4638  f668				  -ZONE18ADDRESS =	TMPMEMADDRESS
   4639  f668					      endif
   4640  f668				  -	      if	DLINDEX = 19
   4641  f668				  -ZONE19ADDRESS =	TMPMEMADDRESS
   4642  f668					      endif
   4643  f668				  -	      if	DLINDEX = 20
   4644  f668				  -ZONE20ADDRESS =	TMPMEMADDRESS
   4645  f668					      endif
   4646  f668					      if	DLINDEX = 21
   4647  f668		       1f 10	   ZONE21ADDRESS =	TMPMEMADDRESS
   4648  f668					      endif
   4649  f668				  -	      if	DLINDEX = 22
   4650  f668				  -ZONE22ADDRESS =	TMPMEMADDRESS
   4651  f668					      endif
   4652  f668				  -	      if	DLINDEX = 23
   4653  f668				  -ZONE23ADDRESS =	TMPMEMADDRESS
   4654  f668					      endif
   4655  f668				  -	      if	DLINDEX = 24
   4656  f668				  -ZONE24ADDRESS =	TMPMEMADDRESS
   4657  f668					      endif
   4658  f668				  -	      if	DLINDEX = 25
   4659  f668				  -ZONE25ADDRESS =	TMPMEMADDRESS
   4660  f668					      endif
   4661  f668				  -	      if	DLINDEX = 26
   4662  f668				  -ZONE26ADDRESS =	TMPMEMADDRESS
   4663  f668					      endif
   4664  f668				  -	      if	DLINDEX = 27
   4665  f668				  -ZONE27ADDRESS =	TMPMEMADDRESS
   4666  f668					      endif
   4667  f668				   DLINDEX    SET	DLINDEX + 1
   4572  f668					      REPEND
   4573  f668				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4574  f668				  -	      ifconst	EXTRADLMEMORY
   4575  f668				  -	      if	TMPMEMADDRESS > $1FFF
   4576  f668				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4577  f668				  -	      else
   4578  f668				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4579  f668				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4580  f668				  -	      endif
   4581  f668				  -	      endif		; TMPMEMADDRESS > $1FFF
   4582  f668					      endif		; EXTRADLMEMORY
   4583  f668				  -	      if	DLINDEX = 0
   4584  f668				  -ZONE0ADDRESS =	TMPMEMADDRESS
   4585  f668					      endif
   4586  f668				  -	      if	DLINDEX = 1
   4587  f668				  -ZONE1ADDRESS =	TMPMEMADDRESS
   4588  f668					      endif
   4589  f668				  -	      if	DLINDEX = 2
   4590  f668				  -ZONE2ADDRESS =	TMPMEMADDRESS
   4591  f668					      endif
   4592  f668				  -	      if	DLINDEX = 3
   4593  f668				  -ZONE3ADDRESS =	TMPMEMADDRESS
   4594  f668					      endif
   4595  f668				  -	      if	DLINDEX = 4
   4596  f668				  -ZONE4ADDRESS =	TMPMEMADDRESS
   4597  f668					      endif
   4598  f668				  -	      if	DLINDEX = 5
   4599  f668				  -ZONE5ADDRESS =	TMPMEMADDRESS
   4600  f668					      endif
   4601  f668				  -	      if	DLINDEX = 6
   4602  f668				  -ZONE6ADDRESS =	TMPMEMADDRESS
   4603  f668					      endif
   4604  f668				  -	      if	DLINDEX = 7
   4605  f668				  -ZONE7ADDRESS =	TMPMEMADDRESS
   4606  f668					      endif
   4607  f668				  -	      if	DLINDEX = 8
   4608  f668				  -ZONE8ADDRESS =	TMPMEMADDRESS
   4609  f668					      endif
   4610  f668				  -	      if	DLINDEX = 9
   4611  f668				  -ZONE9ADDRESS =	TMPMEMADDRESS
   4612  f668					      endif
   4613  f668				  -	      if	DLINDEX = 10
   4614  f668				  -ZONE10ADDRESS =	TMPMEMADDRESS
   4615  f668					      endif
   4616  f668				  -	      if	DLINDEX = 11
   4617  f668				  -ZONE11ADDRESS =	TMPMEMADDRESS
   4618  f668					      endif
   4619  f668				  -	      if	DLINDEX = 12
   4620  f668				  -ZONE12ADDRESS =	TMPMEMADDRESS
   4621  f668					      endif
   4622  f668				  -	      if	DLINDEX = 13
   4623  f668				  -ZONE13ADDRESS =	TMPMEMADDRESS
   4624  f668					      endif
   4625  f668				  -	      if	DLINDEX = 14
   4626  f668				  -ZONE14ADDRESS =	TMPMEMADDRESS
   4627  f668					      endif
   4628  f668				  -	      if	DLINDEX = 15
   4629  f668				  -ZONE15ADDRESS =	TMPMEMADDRESS
   4630  f668					      endif
   4631  f668				  -	      if	DLINDEX = 16
   4632  f668				  -ZONE16ADDRESS =	TMPMEMADDRESS
   4633  f668					      endif
   4634  f668				  -	      if	DLINDEX = 17
   4635  f668				  -ZONE17ADDRESS =	TMPMEMADDRESS
   4636  f668					      endif
   4637  f668				  -	      if	DLINDEX = 18
   4638  f668				  -ZONE18ADDRESS =	TMPMEMADDRESS
   4639  f668					      endif
   4640  f668				  -	      if	DLINDEX = 19
   4641  f668				  -ZONE19ADDRESS =	TMPMEMADDRESS
   4642  f668					      endif
   4643  f668				  -	      if	DLINDEX = 20
   4644  f668				  -ZONE20ADDRESS =	TMPMEMADDRESS
   4645  f668					      endif
   4646  f668				  -	      if	DLINDEX = 21
   4647  f668				  -ZONE21ADDRESS =	TMPMEMADDRESS
   4648  f668					      endif
   4649  f668					      if	DLINDEX = 22
   4650  f668		       1f 60	   ZONE22ADDRESS =	TMPMEMADDRESS
   4651  f668					      endif
   4652  f668				  -	      if	DLINDEX = 23
   4653  f668				  -ZONE23ADDRESS =	TMPMEMADDRESS
   4654  f668					      endif
   4655  f668				  -	      if	DLINDEX = 24
   4656  f668				  -ZONE24ADDRESS =	TMPMEMADDRESS
   4657  f668					      endif
   4658  f668				  -	      if	DLINDEX = 25
   4659  f668				  -ZONE25ADDRESS =	TMPMEMADDRESS
   4660  f668					      endif
   4661  f668				  -	      if	DLINDEX = 26
   4662  f668				  -ZONE26ADDRESS =	TMPMEMADDRESS
   4663  f668					      endif
   4664  f668				  -	      if	DLINDEX = 27
   4665  f668				  -ZONE27ADDRESS =	TMPMEMADDRESS
   4666  f668					      endif
   4667  f668				   DLINDEX    SET	DLINDEX + 1
   4572  f668					      REPEND
   4573  f668				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4574  f668				  -	      ifconst	EXTRADLMEMORY
   4575  f668				  -	      if	TMPMEMADDRESS > $1FFF
   4576  f668				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4577  f668				  -	      else
   4578  f668				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4579  f668				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4580  f668				  -	      endif
   4581  f668				  -	      endif		; TMPMEMADDRESS > $1FFF
   4582  f668					      endif		; EXTRADLMEMORY
   4583  f668				  -	      if	DLINDEX = 0
   4584  f668				  -ZONE0ADDRESS =	TMPMEMADDRESS
   4585  f668					      endif
   4586  f668				  -	      if	DLINDEX = 1
   4587  f668				  -ZONE1ADDRESS =	TMPMEMADDRESS
   4588  f668					      endif
   4589  f668				  -	      if	DLINDEX = 2
   4590  f668				  -ZONE2ADDRESS =	TMPMEMADDRESS
   4591  f668					      endif
   4592  f668				  -	      if	DLINDEX = 3
   4593  f668				  -ZONE3ADDRESS =	TMPMEMADDRESS
   4594  f668					      endif
   4595  f668				  -	      if	DLINDEX = 4
   4596  f668				  -ZONE4ADDRESS =	TMPMEMADDRESS
   4597  f668					      endif
   4598  f668				  -	      if	DLINDEX = 5
   4599  f668				  -ZONE5ADDRESS =	TMPMEMADDRESS
   4600  f668					      endif
   4601  f668				  -	      if	DLINDEX = 6
   4602  f668				  -ZONE6ADDRESS =	TMPMEMADDRESS
   4603  f668					      endif
   4604  f668				  -	      if	DLINDEX = 7
   4605  f668				  -ZONE7ADDRESS =	TMPMEMADDRESS
   4606  f668					      endif
   4607  f668				  -	      if	DLINDEX = 8
   4608  f668				  -ZONE8ADDRESS =	TMPMEMADDRESS
   4609  f668					      endif
   4610  f668				  -	      if	DLINDEX = 9
   4611  f668				  -ZONE9ADDRESS =	TMPMEMADDRESS
   4612  f668					      endif
   4613  f668				  -	      if	DLINDEX = 10
   4614  f668				  -ZONE10ADDRESS =	TMPMEMADDRESS
   4615  f668					      endif
   4616  f668				  -	      if	DLINDEX = 11
   4617  f668				  -ZONE11ADDRESS =	TMPMEMADDRESS
   4618  f668					      endif
   4619  f668				  -	      if	DLINDEX = 12
   4620  f668				  -ZONE12ADDRESS =	TMPMEMADDRESS
   4621  f668					      endif
   4622  f668				  -	      if	DLINDEX = 13
   4623  f668				  -ZONE13ADDRESS =	TMPMEMADDRESS
   4624  f668					      endif
   4625  f668				  -	      if	DLINDEX = 14
   4626  f668				  -ZONE14ADDRESS =	TMPMEMADDRESS
   4627  f668					      endif
   4628  f668				  -	      if	DLINDEX = 15
   4629  f668				  -ZONE15ADDRESS =	TMPMEMADDRESS
   4630  f668					      endif
   4631  f668				  -	      if	DLINDEX = 16
   4632  f668				  -ZONE16ADDRESS =	TMPMEMADDRESS
   4633  f668					      endif
   4634  f668				  -	      if	DLINDEX = 17
   4635  f668				  -ZONE17ADDRESS =	TMPMEMADDRESS
   4636  f668					      endif
   4637  f668				  -	      if	DLINDEX = 18
   4638  f668				  -ZONE18ADDRESS =	TMPMEMADDRESS
   4639  f668					      endif
   4640  f668				  -	      if	DLINDEX = 19
   4641  f668				  -ZONE19ADDRESS =	TMPMEMADDRESS
   4642  f668					      endif
   4643  f668				  -	      if	DLINDEX = 20
   4644  f668				  -ZONE20ADDRESS =	TMPMEMADDRESS
   4645  f668					      endif
   4646  f668				  -	      if	DLINDEX = 21
   4647  f668				  -ZONE21ADDRESS =	TMPMEMADDRESS
   4648  f668					      endif
   4649  f668				  -	      if	DLINDEX = 22
   4650  f668				  -ZONE22ADDRESS =	TMPMEMADDRESS
   4651  f668					      endif
   4652  f668					      if	DLINDEX = 23
   4653  f668		       1f b0	   ZONE23ADDRESS =	TMPMEMADDRESS
   4654  f668					      endif
   4655  f668				  -	      if	DLINDEX = 24
   4656  f668				  -ZONE24ADDRESS =	TMPMEMADDRESS
   4657  f668					      endif
   4658  f668				  -	      if	DLINDEX = 25
   4659  f668				  -ZONE25ADDRESS =	TMPMEMADDRESS
   4660  f668					      endif
   4661  f668				  -	      if	DLINDEX = 26
   4662  f668				  -ZONE26ADDRESS =	TMPMEMADDRESS
   4663  f668					      endif
   4664  f668				  -	      if	DLINDEX = 27
   4665  f668				  -ZONE27ADDRESS =	TMPMEMADDRESS
   4666  f668					      endif
   4667  f668				   DLINDEX    SET	DLINDEX + 1
   4668  f668					      REPEND
   4669  f668
   4670  f668
     $1880 to $1fff used as zone memory, allowing 15 display objects per zone.
   4671  f668					      echo	"   ",[WDLMEMSTART],"to",[WDLMEMEND],"used as zone memory, allowing",[(DLLASTOBJ/5)]d,"display objects per zone."
   4672  f668
   4673  f668				   DLHEIGHT
   4674  f668					      REPEAT	WZONECOUNT
   4675  f668		       07		      .byte.b	(WZONEHEIGHT-1)
   4674  f668					      REPEND
   4675  f669		       07		      .byte.b	(WZONEHEIGHT-1)
   4674  f669					      REPEND
   4675  f66a		       07		      .byte.b	(WZONEHEIGHT-1)
   4674  f66a					      REPEND
   4675  f66b		       07		      .byte.b	(WZONEHEIGHT-1)
   4674  f66b					      REPEND
   4675  f66c		       07		      .byte.b	(WZONEHEIGHT-1)
   4674  f66c					      REPEND
   4675  f66d		       07		      .byte.b	(WZONEHEIGHT-1)
   4674  f66d					      REPEND
   4675  f66e		       07		      .byte.b	(WZONEHEIGHT-1)
   4674  f66e					      REPEND
   4675  f66f		       07		      .byte.b	(WZONEHEIGHT-1)
   4674  f66f					      REPEND
   4675  f670		       07		      .byte.b	(WZONEHEIGHT-1)
   4674  f670					      REPEND
   4675  f671		       07		      .byte.b	(WZONEHEIGHT-1)
   4674  f671					      REPEND
   4675  f672		       07		      .byte.b	(WZONEHEIGHT-1)
   4674  f672					      REPEND
   4675  f673		       07		      .byte.b	(WZONEHEIGHT-1)
   4674  f673					      REPEND
   4675  f674		       07		      .byte.b	(WZONEHEIGHT-1)
   4674  f674					      REPEND
   4675  f675		       07		      .byte.b	(WZONEHEIGHT-1)
   4674  f675					      REPEND
   4675  f676		       07		      .byte.b	(WZONEHEIGHT-1)
   4674  f676					      REPEND
   4675  f677		       07		      .byte.b	(WZONEHEIGHT-1)
   4674  f677					      REPEND
   4675  f678		       07		      .byte.b	(WZONEHEIGHT-1)
   4674  f678					      REPEND
   4675  f679		       07		      .byte.b	(WZONEHEIGHT-1)
   4674  f679					      REPEND
   4675  f67a		       07		      .byte.b	(WZONEHEIGHT-1)
   4674  f67a					      REPEND
   4675  f67b		       07		      .byte.b	(WZONEHEIGHT-1)
   4674  f67b					      REPEND
   4675  f67c		       07		      .byte.b	(WZONEHEIGHT-1)
   4674  f67c					      REPEND
   4675  f67d		       07		      .byte.b	(WZONEHEIGHT-1)
   4674  f67d					      REPEND
   4675  f67e		       07		      .byte.b	(WZONEHEIGHT-1)
   4674  f67e					      REPEND
   4675  f67f		       07		      .byte.b	(WZONEHEIGHT-1)
   4676  f680					      REPEND
   4677  f680
   4678  f680							; Provided under the CC0 license. See the included LICENSE.txt for details.
   4679  f680
   4680  f680							; a simple guard, than ensures the 7800basic code hasn't
   4681  f680							; spilled into the encryption area...
     2302 bytes left in the 7800basic reserved area.
   4682  f680					      echo	"   ",($FF7E-*)d,"bytes left in the 7800basic reserved area."
   4683  f680				  -	      if	(*>$FF7D)
   4684  f680				  -	      ERR		; abort the assembly
   4685  f680					      endif
   4686  f680							; Provided under the CC0 license. See the included LICENSE.txt for details.
   4687  f680
   4688  f680				  -	      ifconst	DEV
   4689  f680				  -	      ifnconst	ZONEHEIGHT
   4690  f680				  -	      echo	"* the 4k 7800basic area has",[($FF7E - *)]d,"bytes free."
   4691  f680				  -	      else
   4692  f680				  -	      if	ZONEHEIGHT = 8
   4693  f680				  -	      echo	"* the 4k 7800basic area has",[($FF7E - *)]d,"bytes free."
   4694  f680				  -	      else
   4695  f680				  -	      echo	"* the 4k 7800basic area has",[($FF7E - *)]d,"bytes free."
   4696  f680				  -	      endif
   4697  f680				  -	      endif
   4698  f680					      endif
   4699  f680
   4700  f680							; FF7E/FF7F contains the 7800basic crc checksum word
   4701  f680
   4702  f680							; FF80 - FFF7 contains the 7800 encryption key 
   4703  f680
   4704  f680					      ifnconst	bankswitchmode
   4705  fff8					      ORG	$FFF8
   4706  fff8				  -	      else
   4707  fff8				  -	      ifconst	ROM128K
   4708  fff8				  -	      ORG	$27FF8
   4709  fff8				  -	      RORG	$FFF8
   4710  fff8				  -	      endif
   4711  fff8				  -	      ifconst	ROM144K
   4712  fff8				  -	      ORG	$27FF8
   4713  fff8				  -	      RORG	$FFF8
   4714  fff8				  -	      endif
   4715  fff8				  -	      ifconst	ROM256K
   4716  fff8				  -	      ORG	$47FF8
   4717  fff8				  -	      RORG	$FFF8
   4718  fff8				  -	      endif
   4719  fff8				  -	      ifconst	ROM272K
   4720  fff8				  -	      ORG	$47FF8
   4721  fff8				  -	      RORG	$FFF8
   4722  fff8				  -	      endif
   4723  fff8				  -	      ifconst	ROM512K
   4724  fff8				  -	      ORG	$87FF8
   4725  fff8				  -	      RORG	$FFF8
   4726  fff8				  -	      endif
   4727  fff8				  -	      ifconst	ROM528K
   4728  fff8				  -	      ORG	$87FF8
   4729  fff8				  -	      RORG	$FFF8
   4730  fff8				  -	      endif
   4731  fff8					      endif
   4732  fff8
   4733  fff8
   4734  fff8		       ff		      .byte.b	$FF	; region verification. $FF=all regions
   4735  fff9		       f7		      .byte.b	$F7	; high nibble:  encryption check from $N000 to $FF7F. we only hash the last 4k for faster boot.
   4736  fffa							; low nibble :  N=7 atari rainbow start, N=3 no atari rainbow
   4737  fffa
   4738  fffa							;Vectors
   4739  fffa		       00 f0		      .word.w	NMI
   4740  fffc		       7a f5		      .word.w	START
   4741  fffe		       5d f0		      .word.w	IRQ
   4742  10000
