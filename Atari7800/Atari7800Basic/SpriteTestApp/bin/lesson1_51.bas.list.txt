------- FILE c:\Users\Steve\Desktop\2018dev\7800\7800basic\projects\lessons\lesson1_gfx_modes\lesson1_51.bas.asm LEVEL 1 PASS 3
      1  10000 ????						; MACRO.H
      2  10000 ????
      3  10000 ????						; Based on the 2600 macro.h file.
      4  10000 ????						; Macros irrelevant to the 7800 have been removed, and the sleep macro 
      5  10000 ????						; has been adapted to give accurate results on the 7800.
      6  10000 ????
      7  10000 ????						; Version 1.0 2019/12/11 (based on the 2600 Version 1.05, 13/NOVEMBER/2003)
      8  10000 ????
      9  10000 ????						; Available macros...
     10  10000 ????						;   SLEEP n		 - sleep for n cycles
     11  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     12  10000 ????
     13  10000 ????						;-------------------------------------------------------------------------------
     14  10000 ????						; SLEEP duration
     15  10000 ????						; Original author: Thomas Jentzsch
     16  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     17  10000 ????						; useful for code where precise timing is required.
     18  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     19  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     20  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     21  10000 ????
     22  10000 ????				       MAC	sleep
     23  10000 ????			    .CYCLES    SET	{1}
     24  10000 ????
     25  10000 ????				       IF	.CYCLES < 2
     26  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     27  10000 ????				       ERR
     28  10000 ????				       ENDIF
     29  10000 ????
     30  10000 ????				       IF	.CYCLES & 1
     31  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     32  10000 ????				       nop	$80
     33  10000 ????				       ELSE
     34  10000 ????				       bit	$80
     35  10000 ????				       ENDIF
     36  10000 ????			    .CYCLES    SET	.CYCLES - 3
     37  10000 ????				       ENDIF
     38  10000 ????
     39  10000 ????				       REPEAT	.CYCLES / 2
     40  10000 ????				       nop
     41  10000 ????				       REPEND
     42  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     43  10000 ????
     44  10000 ????						;-------------------------------------------------------
     45  10000 ????						; SET_POINTER
     46  10000 ????						; Original author: Manuel Rotschkar
     47  10000 ????						;
     48  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
     49  10000 ????						;
     50  10000 ????						; Usage: SET_POINTER pointer, address
     51  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
     52  10000 ????						;
     53  10000 ????						; Note: Alters the accumulator, NZ flags
     54  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
     55  10000 ????						; IN 2: absolute address
     56  10000 ????
     57  10000 ????				       MAC	set_pointer
     58  10000 ????			    .POINTER   SET	{1}
     59  10000 ????			    .ADDRESS   SET	{2}
     60  10000 ????
     61  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
     62  10000 ????				       STA	.POINTER	; Store in pointer
     63  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
     64  10000 ????				       STA	.POINTER+1	; Store in pointer+1
     65  10000 ????
     66  10000 ????				       ENDM
     67  10000 ????
     68  10000 ????						; EOF
     69  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
     70  10000 ????
     71  10000 ????						; 7800MACRO.H
     72  10000 ????
     73  10000 ????						;-------------------------------------------------------
     74  10000 ????						; BOXCOLLISIONCHECK
     75  10000 ????						; author: Mike Saarna
     76  10000 ????						;
     77  10000 ????						; A general bounding box collision check. compares 2 rectangles of differing size
     78  10000 ????						; and shape for overlap. Carry is set for collision detected, clear for none.
     79  10000 ????						; 
     80  10000 ????						; Usage: BOXCOLLISIONCHECK x1var,y1var,w1var,h1var,x2var,y2var,w2var,h2var
     81  10000 ????						;
     82  10000 ????
     83  10000 ????				       MAC	boxcollisioncheck
     84  10000 ????			    .boxx1     SET	{1}
     85  10000 ????			    .boxy1     SET	{2}
     86  10000 ????			    .boxw1     SET	{3}
     87  10000 ????			    .boxh1     SET	{4}
     88  10000 ????			    .boxx2     SET	{5}
     89  10000 ????			    .boxy2     SET	{6}
     90  10000 ????			    .boxw2     SET	{7}
     91  10000 ????			    .boxh2     SET	{8}
     92  10000 ????
     93  10000 ????			    .DoXCollisionCheck
     94  10000 ????				       lda	.boxx1	;3
     95  10000 ????				       cmp	.boxx2	;2
     96  10000 ????				       bcs	.X1isbiggerthanX2	;2/3
     97  10000 ????			    .X2isbiggerthanX1
     98  10000 ????				       adc	#.boxw1	;2
     99  10000 ????				       cmp	.boxx2	;3
    100  10000 ????				       bcs	.DoYCollisionCheck	;3/2
    101  10000 ????				       bcc	.noboxcollision	;3
    102  10000 ????			    .X1isbiggerthanX2
    103  10000 ????				       clc		;2
    104  10000 ????				       sbc	#.boxw2	;2
    105  10000 ????				       cmp	.boxx2	;3
    106  10000 ????				       bcs	.noboxcollision	;3/2
    107  10000 ????			    .DoYCollisionCheck
    108  10000 ????				       lda	.boxy1	;3
    109  10000 ????				       cmp	.boxy2	;3
    110  10000 ????				       bcs	.Y1isbiggerthanY2	;3/2
    111  10000 ????			    .Y2isbiggerthanY1
    112  10000 ????				       adc	#.boxh1	;2
    113  10000 ????				       cmp	.boxy2	;3
    114  10000 ????				       jmp	.checkdone	;6 
    115  10000 ????			    .Y1isbiggerthanY2
    116  10000 ????				       clc		;2
    117  10000 ????				       sbc	#.boxh2	;2
    118  10000 ????				       cmp	.boxy2	;3
    119  10000 ????				       bcs	.noboxcollision	;3/2
    120  10000 ????			    .boxcollision
    121  10000 ????				       sec		;2
    122  10000 ????				       .byte	$24	; hardcoded "BIT [clc opcode]", used to skip over the following clc
    123  10000 ????			    .noboxcollision
    124  10000 ????				       clc		;2
    125  10000 ????			    .checkdone
    126  10000 ????
    127  10000 ????				       ENDM
    128  10000 ????
    129  10000 ????				       MAC	median3
    130  10000 ????
    131  10000 ????						; A median filter (for smoothing paddle jitter)
    132  10000 ????						;   this macro takes the current paddle value, compares it to historic
    133  10000 ????						;   values, and replaces the current paddle value with the median.
    134  10000 ????						; 
    135  10000 ????						; called as:  MEDIAN3 STORAGE CURRENT
    136  10000 ????						;    where STORAGE points to 3 consecutive bytes of memory. The first 2
    137  10000 ????						;	  must be dedicated to this MEDIAN filter. The last 1 is a temp.
    138  10000 ????						;    where CURRENT is memory holding the new value you wish to compare to
    139  10000 ????						;	  the previous values, and update with the median value.
    140  10000 ????						;
    141  10000 ????						; returns: CURRENT (modified to contain median value)
    142  10000 ????						;
    143  10000 ????						; author: Mike Saarna (aka RevEng)
    144  10000 ????
    145  10000 ????			    .MedianBytes SET	{1}
    146  10000 ????			    .NewValue  SET	{2}
    147  10000 ????
    148  10000 ????				       lda	#0
    149  10000 ????				       ldy	.NewValue
    150  10000 ????				       sty	.MedianBytes+2	; put the new value in the most "recent" slot
    151  10000 ????
    152  10000 ????						; build an index from relative size comparisons between our 3 values.
    153  10000 ????				       cpy	.MedianBytes
    154  10000 ????				       rol
    155  10000 ????				       cpy	.MedianBytes+1
    156  10000 ????				       rol
    157  10000 ????				       ldy	.MedianBytes
    158  10000 ????				       cpy	.MedianBytes+1
    159  10000 ????				       rol
    160  10000 ????				       tay
    161  10000 ????
    162  10000 ????				       ldx	MedianOrderLUT,y	; convert the size-comparison index to an index to the median value
    163  10000 ????				       lda	.MedianBytes,x
    164  10000 ????				       sta	.NewValue	; we replace the new value memory with the median value
    165  10000 ????
    166  10000 ????						; then shift values from "newer" bytes to "older" bytes, leaving the 
    167  10000 ????						; newest byte (.MedianBytes+2) empty for next time.
    168  10000 ????				       lda	.MedianBytes+1
    169  10000 ????				       sta	.MedianBytes
    170  10000 ????				       lda	.MedianBytes+2
    171  10000 ????				       sta	.MedianBytes+1
    172  10000 ????				       ifnconst	MedianOrderLUT
    173  10000 ????				       jmp	MedianOrderLUTend
    174  10000 ????			    MedianOrderLUT		; converts our "comparison index" to an index to the median value
    175  10000 ????				       .byte	0	; 0  B2 < B0 < B1
    176  10000 ????				       .byte	1	; 1  B2 < B1 < B0
    177  10000 ????				       .byte	2	; 2   impossible 
    178  10000 ????				       .byte	2	; 3  B1 < B2 < B0
    179  10000 ????				       .byte	2	; 4  B0 < B2 < B1
    180  10000 ????				       .byte	2	; 5   impossible 
    181  10000 ????				       .byte	1	; 6  B0 < B1 < B2
    182  10000 ????				       .byte	0	; 7  B1 < B0 < B2
    183  10000 ????			    MedianOrderLUTend
    184  10000 ????				       endif
    185  10000 ????				       ENDM
    186  10000 ????
    187  10000 ????						; EOF
    188  10000 ????						;
    189  10000 ????						; speakjet.inc
    190  10000 ????						;
    191  10000 ????						;
    192  10000 ????						; AtariVox Speech Synth Driver
    193  10000 ????						;
    194  10000 ????						; By Alex Herbert, 2004
    195  10000 ????						;
    196  10000 ????
    197  10000 ????
    198  10000 ????
    199  10000 ????
    200  10000 ????						; Constants
    201  10000 ????
    202  10000 ????
    203  10000 ????		00 01	    SERIAL_OUTMASK equ	$01
    204  10000 ????		00 02	    SERIAL_RDYMASK equ	$02
    205  10000 ????
    206  10000 ????
    207  10000 ????
    208  10000 ????						; Macros
    209  10000 ????
    210  10000 ????				       mac	spkout
    211  10000 ????
    212  10000 ????						; check buffer-full status
    213  10000 ????				       lda	SWCHA
    214  10000 ????				       and	#SERIAL_RDYMASK
    215  10000 ????				       beq	.speech_done
    216  10000 ????
    217  10000 ????						; get next speech byte
    218  10000 ????				       ldy	#$00
    219  10000 ????				       lda	(speech_addr),y
    220  10000 ????
    221  10000 ????						; invert data and check for end of string
    222  10000 ????				       eor	#$ff
    223  10000 ????						;sta BACKGRND ; debug - uncomment to flash the background color with vox data
    224  10000 ????				       beq	.speech_done
    225  10000 ????				       sta	{1}
    226  10000 ????
    227  10000 ????						; increment speech pointer
    228  10000 ????				       inc	speech_addr
    229  10000 ????				       bne	.incaddr_skip
    230  10000 ????				       inc	speech_addr+1
    231  10000 ????			    .incaddr_skip
    232  10000 ????
    233  10000 ????						; output byte as serial data
    234  10000 ????
    235  10000 ????				       sec		; start bit
    236  10000 ????			    .byteout_loop
    237  10000 ????						; put carry flag into bit 0 of SWACNT, perserving other bits
    238  10000 ????				       lda	SWACNT	; 4
    239  10000 ????				       and	#$fe	; 2 6
    240  10000 ????				       adc	#$00	; 2 8
    241  10000 ????				       sta	SWACNT	; 4 12
    242  10000 ????
    243  10000 ????						; 10 bits sent? (1 start bit, 8 data bits, 1 stop bit)
    244  10000 ????				       cpy	#$09	; 2 14
    245  10000 ????				       beq	.speech_done	; 2 16
    246  10000 ????				       iny		; 2 18
    247  10000 ????
    248  10000 ????						; the 7800 is 1.5x faster than the 2600. Waste more cycles here
    249  10000 ????						; to match the original baud rate...
    250  10000 ????						;ldx	  #$07 ; 2600
    251  10000 ????				       ldx	#$0D
    252  10000 ????
    253  10000 ????			    .delay_loop
    254  10000 ????				       dex		; 
    255  10000 ????				       bne	.delay_loop	; 36 54
    256  10000 ????
    257  10000 ????						; shift next data bit into carry
    258  10000 ????				       lsr	{1}	; 5 59
    259  10000 ????
    260  10000 ????						; and loop (branch always taken)
    261  10000 ????				       bpl	.byteout_loop	; 3 62 cycles for loop
    262  10000 ????
    263  10000 ????			    .speech_done
    264  10000 ????
    265  10000 ????				       endm
    266  10000 ????
    267  10000 ????
    268  10000 ????				       mac	speak
    269  10000 ????
    270  10000 ????				       lda	#<{1}
    271  10000 ????				       sta	speech_addr
    272  10000 ????				       lda	#>{1}
    273  10000 ????				       sta	speech_addr+1
    274  10000 ????
    275  10000 ????				       endm
    276  10000 ????
    277  10000 ????
    278  10000 ????
    279  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
    280  10000 ????
    281  10000 ????				       processor	6502
    282  10000 ????
------- FILE 7800basic.h LEVEL 2 PASS 3
      0  10000 ????				       include	"7800basic.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE 7800.h LEVEL 3 PASS 3
      0  10000 ????				       include	"7800.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; 7800.h
      4  10000 ????						; Version 1.0, 2019/12/13
      5  10000 ????
      6  10000 ????						; This file defines hardware registers and memory mapping for the
      7  10000 ????						; Atari 7800. It is distributed as a companion machine-specific support package
      8  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
      9  10000 ????						; available at https://github.com/dasm-assembler/dasm
     10  10000 ????
     11  10000 ????
     12  10000 ????						; ******************** 7800 Hardware Adresses ***************************
     13  10000 ????						;
     14  10000 ????						;	 MEMORY MAP USAGE OF THE 7800
     15  10000 ????						;
     16  10000 ????						;	  00 -   1F	TIA REGISTERS
     17  10000 ????						;	  20 -   3F	MARIA REGISTERS
     18  10000 ????						;	  40 -   FF	RAM block 0 (zero page)
     19  10000 ????						;	 100 -  11F	TIA   (mirror of 0000-001f)
     20  10000 ????						;	 120 -  13F	MARIA (mirror of 0020-003f)
     21  10000 ????						;	 140 -  1FF	RAM block 1 (stack)
     22  10000 ????						;	 200 -  21F	TIA   (mirror of 0000-001f)
     23  10000 ????						;	 220 -  23F	MARIA (mirror of 0020-003f)
     24  10000 ????						;	 240 -  27F	???
     25  10000 ????						;	 280 -  2FF	RIOT I/O ports and timers
     26  10000 ????						;	 300 -  31F	TIA   (mirror of 0000-001f)
     27  10000 ????						;	 320 -  33F	MARIA (mirror of 0020-003f)
     28  10000 ????						;	 340 -  3FF	???
     29  10000 ????						;	 400 -  47F	unused address space
     30  10000 ????						;	 480 -  4FF	RIOT RAM
     31  10000 ????						;	 500 -  57F	unused address space
     32  10000 ????						;	 580 -  5FF	RIOT RAM (mirror of 0480-04ff)
     33  10000 ????						;	 600 - 17FF	unused address space
     34  10000 ????						;	1800 - 203F	RAM
     35  10000 ????						;	2040 - 20FF	RAM block 0 (mirror of 0000-001f)
     36  10000 ????						;	2100 - 213F	RAM
     37  10000 ????						;	2140 - 21FF	RAM block 1 (mirror of 0140-01ff)
     38  10000 ????						;	2200 - 27FF	RAM
     39  10000 ????						;	2800 - 2FFF	mirror of 1800-27ff
     40  10000 ????						;	3000 - 3FFF	unused address space
     41  10000 ????						;	4000 - FF7F	potential cartridge address space
     42  10000 ????						;	FF80 - FFF9	RESERVED FOR ENCRYPTION
     43  10000 ????						;	FFFA - FFFF	6502 VECTORS
     44  10000 ????
     45  10000 ????
     46  10000 ????						;****** 00-1F ********* TIA REGISTERS ******************
     47  10000 ????
     48  10000 ????		00 01	    INPTCTRL   =	$01	;Input control. In same address space as TIA. write-only
     49  10000 ????		00 01	    VBLANK     =	$01	;VBLANK. D7=1:dump paddle caps to ground.     write-only
     50  10000 ????		00 08	    INPT0      =	$08	;Paddle Control Input 0		       read-only
     51  10000 ????		00 09	    INPT1      =	$09	;Paddle Control Input 1		       read-only
     52  10000 ????		00 0a	    INPT2      =	$0A	;Paddle Control Input 2		       read-only
     53  10000 ????		00 0b	    INPT3      =	$0B	;Paddle Control Input 3		       read-only
     54  10000 ????
     55  10000 ????						; ** some common alternate names for INPT0/1/2/3
     56  10000 ????		00 08	    INPT4B     =	$08	;Joystick 0 Fire 1			       read-only
     57  10000 ????		00 09	    INPT4A     =	$09	;Joystick 0 Fire 1			       read-only
     58  10000 ????		00 0a	    INPT5B     =	$0A	;Joystick 1 Fire 0			       read-only
     59  10000 ????		00 0b	    INPT5A     =	$0B	;Joystick 1 Fire 1			       read-only
     60  10000 ????		00 08	    INPT4R     =	$08	;Joystick 0 Fire 1			       read-only
     61  10000 ????		00 09	    INPT4L     =	$09	;Joystick 0 Fire 1			       read-only
     62  10000 ????		00 0a	    INPT5R     =	$0A	;Joystick 1 Fire 0			       read-only
     63  10000 ????		00 0b	    INPT5L     =	$0B	;Joystick 1 Fire 1			       read-only
     64  10000 ????
     65  10000 ????		00 0c	    INPT4      =	$0C	;Player 0 Fire Button Input		       read-only
     66  10000 ????		00 0d	    INPT5      =	$0D	;Player 1 Fire Button Input		       read-only
     67  10000 ????
     68  10000 ????		00 15	    AUDC0      =	$15	;Audio Control Channel   0		       write-only
     69  10000 ????		00 16	    AUDC1      =	$16	;Audio Control Channel   1		       write-only
     70  10000 ????		00 17	    AUDF0      =	$17	;Audio Frequency Channel 0		       write-only
     71  10000 ????		00 18	    AUDF1      =	$18	;Audio Frequency Channel 1		       write-only
     72  10000 ????		00 19	    AUDV0      =	$19	;Audio Volume Channel	  0		       write-only
     73  10000 ????		00 1a	    AUDV1      =	$1A	;Audio Volume Channel	  1		       write-only
     74  10000 ????
     75  10000 ????						;****** 20-3F ********* MARIA REGISTERS ***************
     76  10000 ????
     77  10000 ????		00 20	    BACKGRND   =	$20	;Background Color			       write-only
     78  10000 ????		00 21	    P0C1       =	$21	;Palette 0 - Color 1			       write-only
     79  10000 ????		00 22	    P0C2       =	$22	;Palette 0 - Color 2			       write-only
     80  10000 ????		00 23	    P0C3       =	$23	;Palette 0 - Color 3			       write-only
     81  10000 ????		00 24	    WSYNC      =	$24	;Wait For Sync 			       write-only
     82  10000 ????		00 25	    P1C1       =	$25	;Palette 1 - Color 1			       write-only
     83  10000 ????		00 26	    P1C2       =	$26	;Palette 1 - Color 2			       write-only
     84  10000 ????		00 27	    P1C3       =	$27	;Palette 1 - Color 3			       write-only
     85  10000 ????		00 28	    MSTAT      =	$28	;Maria Status				       read-only
     86  10000 ????		00 29	    P2C1       =	$29	;Palette 2 - Color 1			       write-only
     87  10000 ????		00 2a	    P2C2       =	$2A	;Palette 2 - Color 2			       write-only
     88  10000 ????		00 2b	    P2C3       =	$2B	;Palette 2 - Color 3			       write-only
     89  10000 ????		00 2c	    DPPH       =	$2C	;Display List List Pointer High	       write-only
     90  10000 ????		00 2d	    P3C1       =	$2D	;Palette 3 - Color 1			       write-only
     91  10000 ????		00 2e	    P3C2       =	$2E	;Palette 3 - Color 2			       write-only
     92  10000 ????		00 2f	    P3C3       =	$2F	;Palette 3 - Color 3			       write-only
     93  10000 ????		00 30	    DPPL       =	$30	;Display List List Pointer Low 	       write-only
     94  10000 ????		00 31	    P4C1       =	$31	;Palette 4 - Color 1			       write-only
     95  10000 ????		00 32	    P4C2       =	$32	;Palette 4 - Color 2			       write-only
     96  10000 ????		00 33	    P4C3       =	$33	;Palette 4 - Color 3			       write-only
     97  10000 ????		00 34	    CHARBASE   =	$34	;Character Base Address		       write-only
     98  10000 ????		00 34	    CHBASE     =	$34	;Character Base Address		       write-only
     99  10000 ????		00 35	    P5C1       =	$35	;Palette 5 - Color 1			       write-only
    100  10000 ????		00 36	    P5C2       =	$36	;Palette 5 - Color 2			       write-only
    101  10000 ????		00 37	    P5C3       =	$37	;Palette 5 - Color 3			       write-only
    102  10000 ????		00 38	    OFFSET     =	$38	;Unused - Store zero here		       write-only
    103  10000 ????		00 39	    P6C1       =	$39	;Palette 6 - Color 1			       write-only
    104  10000 ????		00 3a	    P6C2       =	$3A	;Palette 6 - Color 2			       write-only
    105  10000 ????		00 3b	    P6C3       =	$3B	;Palette 6 - Color 3			       write-only
    106  10000 ????		00 3c	    CTRL       =	$3C	;Maria Control Register		       write-only
    107  10000 ????		00 3d	    P7C1       =	$3D	;Palette 7 - Color 1			       write-only
    108  10000 ????		00 3e	    P7C2       =	$3E	;Palette 7 - Color 2			       write-only
    109  10000 ????		00 3f	    P7C3       =	$3F	;Palette 7 - Color 3			       write-only
    110  10000 ????
    111  10000 ????
    112  10000 ????						;****** 280-2FF ******* PIA PORTS AND TIMERS ************
    113  10000 ????
    114  10000 ????		02 80	    SWCHA      =	$280	;P0+P1 Joystick Directional Input	       read-write
    115  10000 ????		02 81	    CTLSWA     =	$281	;I/O Control for SCHWA 		       read-write
    116  10000 ????		02 81	    SWACNT     =	$281	;VCS name for above			       read-write
    117  10000 ????		02 82	    SWCHB      =	$282	;Console Switches			       read-write
    118  10000 ????		02 83	    CTLSWB     =	$283	;I/O Control for SCHWB 		       read-write
    119  10000 ????		02 83	    SWBCNT     =	$283	;VCS name for above			       read-write
    120  10000 ????
    121  10000 ????		02 84	    INTIM      =	$284	;Iterval Timer Read			       read-only
    122  10000 ????		02 94	    TIM1T      =	$294	;Set 1    CLK Interval (838   nsec/interval)  write-only
    123  10000 ????		02 95	    TIM8T      =	$295	;Set 8    CLK Interval (6.7   usec/interval)  write-only
    124  10000 ????		02 96	    TIM64T     =	$296	;Set 64   CLK Interval (63.6  usec/interval)  write-only
    125  10000 ????		02 97	    T1024T     =	$297	;Set 1024 CLK Interval (858.2 usec/interval)  write-only
    126  10000 ????		02 9e	    TIM64TI    =	$29E	;Interrupt timer 64T			       write-only
    127  10000 ????
    128  10000 ????						;XM
    129  10000 ????		04 70	    XCTRL      =	$470	; 7=YM2151 6=RAM@6k 5=RAM@4k 4=pokey@450 3=hsc 2=cart 1=RoF_bank1 0=RoF_bank2
    130  10000 ????		04 70	    XCTRL1     =	$470
    131  10000 ????		04 78	    XCTRL2     =	$478
    132  10000 ????		04 7c	    XCTRL3     =	$47c
    133  10000 ????		04 71	    XCTRL4     =	$471
    134  10000 ????		04 72	    XCTRL5     =	$472
    135  10000 ????
    136  10000 ????						; Pokey register relative locations, since its base may be different
    137  10000 ????						; depending on the hardware.
    138  10000 ????		00 00	    PAUDF0     =	$0	; extra audio channels and frequencies
    139  10000 ????		00 01	    PAUDC0     =	$1
    140  10000 ????		00 02	    PAUDF1     =	$2
    141  10000 ????		00 03	    PAUDC1     =	$3
    142  10000 ????		00 04	    PAUDF2     =	$4
    143  10000 ????		00 05	    PAUDC2     =	$5
    144  10000 ????		00 06	    PAUDF3     =	$6
    145  10000 ????		00 07	    PAUDC3     =	$7
    146  10000 ????		00 08	    PAUDCTL    =	$8	; Audio Control
    147  10000 ????		00 0a	    PRANDOM    =	$A	; 17 bit polycounter pseudo random
    148  10000 ????		00 0f	    PSKCTL     =	$F	; Serial Port control
------- FILE 7800basic.h
------- FILE 7800basic_variable_redefs.h LEVEL 3 PASS 3
      0  10000 ????				       include	"7800basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 00	    font_mode  =	$00
      4  10000 ????		00 0b	    font_width_twoscompliment =	$0b
      5  10000 ????		00 35	    font_width =	$35
      6  10000 ????		00 00	    blank_mode =	$00
      7  10000 ????		00 1c	    blank_width_twoscompliment =	$1c
      8  10000 ????		00 04	    blank_width =	$04
      9  10000 ????		00 00	    p1_mode    =	$00
     10  10000 ????		00 1e	    p1_width_twoscompliment =	$1e
     11  10000 ????		00 02	    p1_width   =	$02
     12  10000 ????		00 00	    ex7_mode   =	$00
     13  10000 ????		00 1c	    ex7_width_twoscompliment =	$1c
     14  10000 ????		00 04	    ex7_width  =	$04
     15  10000 ????		00 00	    ex6_mode   =	$00
     16  10000 ????		00 1c	    ex6_width_twoscompliment =	$1c
     17  10000 ????		00 04	    ex6_width  =	$04
     18  10000 ????		00 00	    ex5_mode   =	$00
     19  10000 ????		00 1c	    ex5_width_twoscompliment =	$1c
     20  10000 ????		00 04	    ex5_width  =	$04
     21  10000 ????		00 00	    ex4_mode   =	$00
     22  10000 ????		00 1c	    ex4_width_twoscompliment =	$1c
     23  10000 ????		00 04	    ex4_width  =	$04
     24  10000 ????		00 00	    ex3_mode   =	$00
     25  10000 ????		00 1c	    ex3_width_twoscompliment =	$1c
     26  10000 ????		00 04	    ex3_width  =	$04
     27  10000 ????		00 00	    ex2_mode   =	$00
     28  10000 ????		00 1c	    ex2_width_twoscompliment =	$1c
     29  10000 ????		00 04	    ex2_width  =	$04
     30  10000 ????		00 00	    ex1_mode   =	$00
     31  10000 ????		00 1c	    ex1_width_twoscompliment =	$1c
     32  10000 ????		00 04	    ex1_width  =	$04
     33  10000 ????		00 00	    zonebg80x16_16_mode =	$00
     34  10000 ????		00 0c	    zonebg80x16_16_width_twoscompliment =	$0c
     35  10000 ????		00 14	    zonebg80x16_16_width =	$14
     36  10000 ????		00 00	    g16x16_4color8_mode =	$00
     37  10000 ????		00 1c	    g16x16_4color8_width_twoscompliment =	$1c
     38  10000 ????		00 04	    g16x16_4color8_width =	$04
     39  10000 ????		00 00	    g16x16_4color7_mode =	$00
     40  10000 ????		00 1c	    g16x16_4color7_width_twoscompliment =	$1c
     41  10000 ????		00 04	    g16x16_4color7_width =	$04
     42  10000 ????		00 00	    g16x16_4color6_mode =	$00
     43  10000 ????		00 1c	    g16x16_4color6_width_twoscompliment =	$1c
     44  10000 ????		00 04	    g16x16_4color6_width =	$04
     45  10000 ????		00 00	    g16x16_4color5_mode =	$00
     46  10000 ????		00 1c	    g16x16_4color5_width_twoscompliment =	$1c
     47  10000 ????		00 04	    g16x16_4color5_width =	$04
     48  10000 ????		00 00	    g16x16_4color4_mode =	$00
     49  10000 ????		00 1c	    g16x16_4color4_width_twoscompliment =	$1c
     50  10000 ????		00 04	    g16x16_4color4_width =	$04
     51  10000 ????		00 00	    g16x16_4color3_mode =	$00
     52  10000 ????		00 1c	    g16x16_4color3_width_twoscompliment =	$1c
     53  10000 ????		00 04	    g16x16_4color3_width =	$04
     54  10000 ????		00 00	    g16x16_4color2_mode =	$00
     55  10000 ????		00 1c	    g16x16_4color2_width_twoscompliment =	$1c
     56  10000 ????		00 04	    g16x16_4color2_width =	$04
     57  10000 ????		00 00	    g16x16_4color_mode =	$00
     58  10000 ????		00 1c	    g16x16_4color_width_twoscompliment =	$1c
     59  10000 ????		00 04	    g16x16_4color_width =	$04
     60  10000 ????		00 80	    g16x16_12_2_mode =	$80
     61  10000 ????		00 18	    g16x16_12_2_width_twoscompliment =	$18
     62  10000 ????		00 08	    g16x16_12_2_width =	$08
     63  10000 ????		00 80	    g16x16_12_1_mode =	$80
     64  10000 ????		00 18	    g16x16_12_1_width_twoscompliment =	$18
     65  10000 ????		00 08	    g16x16_12_1_width =	$08
     66  10000 ????		00 01	    DOUBLEBUFFER =	1
     67  10000 ????		01 45	    wrap       =	var5
     68  10000 ????
     69  10000 ????		01 44	    ex	       =	var4
     70  10000 ????
     71  10000 ????		01 43	    an	       =	var3
     72  10000 ????
     73  10000 ????		01 42	    db	       =	var2
     74  10000 ????
     75  10000 ????		01 41	    bg	       =	var1
     76  10000 ????
     77  10000 ????		00 0f	    font_color1 =	$0f
     78  10000 ????		00 00	    font_color0 =	$00
     79  10000 ????		00 00	    blank_color1 =	0
     80  10000 ????		00 00	    blank_color0 =	$00
     81  10000 ????		00 35	    p1_color3  =	$35
     82  10000 ????		00 07	    p1_color2  =	$07
     83  10000 ????		00 0c	    p1_color1  =	$0c
     84  10000 ????		00 00	    p1_color0  =	$00
     85  10000 ????		00 07	    ex7_color1 =	$07
     86  10000 ????		00 00	    ex7_color0 =	$00
     87  10000 ????		00 00	    ex6_color3 =	0
     88  10000 ????		00 35	    ex6_color2 =	$35
     89  10000 ????		00 07	    ex6_color1 =	$07
     90  10000 ????		00 00	    ex6_color0 =	$00
     91  10000 ????		00 35	    ex5_color3 =	$35
     92  10000 ????		00 0c	    ex5_color2 =	$0c
     93  10000 ????		00 07	    ex5_color1 =	$07
     94  10000 ????		00 00	    ex5_color0 =	$00
     95  10000 ????		00 35	    ex4_color3 =	$35
     96  10000 ????		00 0c	    ex4_color2 =	$0c
     97  10000 ????		00 07	    ex4_color1 =	$07
     98  10000 ????		00 00	    ex4_color0 =	$00
     99  10000 ????		00 35	    ex3_color3 =	$35
    100  10000 ????		00 0c	    ex3_color2 =	$0c
    101  10000 ????		00 07	    ex3_color1 =	$07
    102  10000 ????		00 00	    ex3_color0 =	$00
    103  10000 ????		00 35	    ex2_color3 =	$35
    104  10000 ????		00 0c	    ex2_color2 =	$0c
    105  10000 ????		00 07	    ex2_color1 =	$07
    106  10000 ????		00 00	    ex2_color0 =	$00
    107  10000 ????		00 35	    ex1_color3 =	$35
    108  10000 ????		00 0c	    ex1_color2 =	$0c
    109  10000 ????		00 07	    ex1_color1 =	$07
    110  10000 ????		00 00	    ex1_color0 =	$00
    111  10000 ????		00 08	    zonebg80x16_16_color1 =	$08
    112  10000 ????		00 00	    zonebg80x16_16_color0 =	$00
    113  10000 ????		00 91	    g16x16_4color8_color3 =	$91
    114  10000 ????		00 a8	    g16x16_4color8_color2 =	$a8
    115  10000 ????		00 91	    g16x16_4color8_color1 =	$91
    116  10000 ????		00 00	    g16x16_4color8_color0 =	$00
    117  10000 ????		00 a8	    g16x16_4color7_color3 =	$a8
    118  10000 ????		00 91	    g16x16_4color7_color2 =	$91
    119  10000 ????		00 91	    g16x16_4color7_color1 =	$91
    120  10000 ????		00 00	    g16x16_4color7_color0 =	$00
    121  10000 ????		00 91	    g16x16_4color6_color3 =	$91
    122  10000 ????		00 a8	    g16x16_4color6_color2 =	$a8
    123  10000 ????		00 91	    g16x16_4color6_color1 =	$91
    124  10000 ????		00 00	    g16x16_4color6_color0 =	$00
    125  10000 ????		00 91	    g16x16_4color5_color3 =	$91
    126  10000 ????		00 a8	    g16x16_4color5_color2 =	$a8
    127  10000 ????		00 91	    g16x16_4color5_color1 =	$91
    128  10000 ????		00 00	    g16x16_4color5_color0 =	$00
    129  10000 ????		00 91	    g16x16_4color4_color3 =	$91
    130  10000 ????		00 a8	    g16x16_4color4_color2 =	$a8
    131  10000 ????		00 91	    g16x16_4color4_color1 =	$91
    132  10000 ????		00 00	    g16x16_4color4_color0 =	$00
    133  10000 ????		00 91	    g16x16_4color3_color3 =	$91
    134  10000 ????		00 a8	    g16x16_4color3_color2 =	$a8
    135  10000 ????		00 91	    g16x16_4color3_color1 =	$91
    136  10000 ????		00 00	    g16x16_4color3_color0 =	$00
    137  10000 ????		00 91	    g16x16_4color2_color3 =	$91
    138  10000 ????		00 a8	    g16x16_4color2_color2 =	$a8
    139  10000 ????		00 91	    g16x16_4color2_color1 =	$91
    140  10000 ????		00 00	    g16x16_4color2_color0 =	$00
    141  10000 ????		00 91	    g16x16_4color_color3 =	$91
    142  10000 ????		00 a8	    g16x16_4color_color2 =	$a8
    143  10000 ????		00 91	    g16x16_4color_color1 =	$91
    144  10000 ????		00 00	    g16x16_4color_color0 =	$00
    145  10000 ????		00 00	    g16x16_12_2_color15 =	0
    146  10000 ????		00 00	    g16x16_12_2_color14 =	0
    147  10000 ????		00 00	    g16x16_12_2_color13 =	0
    148  10000 ????		00 02	    g16x16_12_2_color12 =	$02
    149  10000 ????		00 06	    g16x16_12_2_color11 =	$06
    150  10000 ????		00 42	    g16x16_12_2_color10 =	$42
    151  10000 ????		00 08	    g16x16_12_2_color9 =	$08
    152  10000 ????		00 3b	    g16x16_12_2_color8 =	$3b
    153  10000 ????		00 36	    g16x16_12_2_color7 =	$36
    154  10000 ????		00 0b	    g16x16_12_2_color6 =	$0b
    155  10000 ????		00 39	    g16x16_12_2_color5 =	$39
    156  10000 ????		00 04	    g16x16_12_2_color4 =	$04
    157  10000 ????		00 07	    g16x16_12_2_color3 =	$07
    158  10000 ????		00 01	    g16x16_12_2_color2 =	$01
    159  10000 ????		00 42	    g16x16_12_2_color1 =	$42
    160  10000 ????		00 00	    g16x16_12_2_color0 =	$00
    161  10000 ????		00 00	    g16x16_12_1_color15 =	0
    162  10000 ????		00 00	    g16x16_12_1_color14 =	0
    163  10000 ????		00 00	    g16x16_12_1_color13 =	0
    164  10000 ????		00 02	    g16x16_12_1_color12 =	$02
    165  10000 ????		00 07	    g16x16_12_1_color11 =	$07
    166  10000 ????		00 08	    g16x16_12_1_color10 =	$08
    167  10000 ????		00 0b	    g16x16_12_1_color9 =	$0b
    168  10000 ????		00 04	    g16x16_12_1_color8 =	$04
    169  10000 ????		00 01	    g16x16_12_1_color7 =	$01
    170  10000 ????		00 06	    g16x16_12_1_color6 =	$06
    171  10000 ????		00 42	    g16x16_12_1_color5 =	$42
    172  10000 ????		00 39	    g16x16_12_1_color4 =	$39
    173  10000 ????		00 3b	    g16x16_12_1_color3 =	$3b
    174  10000 ????		00 42	    g16x16_12_1_color2 =	$42
    175  10000 ????		00 36	    g16x16_12_1_color1 =	$36
    176  10000 ????		00 00	    g16x16_12_1_color0 =	$00
    177  10000 ????		00 01	    ROM48K     =	1
    178  10000 ????		00 01	    plotvalueonscreen =	1
    179  10000 ????		00 10	    ZONEHEIGHT =	16
------- FILE 7800basic.h
      6  10000 ????
      7  10000 ????						;************ 7800 overall RAM map **************
      8  10000 ????
      9  10000 ????						;	   40-FF	 zero page RAM
     10  10000 ????						;	  140-1FF	 RAM (stack)
     11  10000 ????						;	 1800-203F	 RAM
     12  10000 ????						;	 2100-213F	 RAM
     13  10000 ????						;	 2200-27FF	 RAM
     14  10000 ????
     15  10000 ????						;************ 7800basic RAM usage map **************
     16  10000 ????
     17  10000 ????						;	   40-FF	 numerous defines, listed below
     18  10000 ????						;	  140-1FF	 RAM (stack)
     19  10000 ????
     20  10000 ????						;	 1800-187F	 DLL  (1800-18DF with page flipping enabled)
     21  10000 ????						;	 1880-1FFF	 DLs  (18E0-1FFF with page flipping enabled)
     22  10000 ????
     23  10000 ????						;	 2000-203F	 Reserved
     24  10000 ????						;	 2100-213F	 Reserved
     25  10000 ????						;	 2200-27FF	 Free
     26  10000 ????
     27  10000 ????		1f e0	    eeprombuffer =	$1FE0
     28  10000 ????		18 00	    DLLMEM     =	$1800
     29  10000 ????		00 70	    DBOFFSET   =	$70	; $E0 length DL is /2 for double-buffering
     30  10000 ????
     31  10000 ????			   -	       ifconst	PLOTVALUEPAGE
     32  10000 ????			   -VALBUFFER  =	(PLOTVALUEPAGE*256)
     33  10000 ????				       else
     34  10000 ????		20 00	    VALBUFFER  =	$2000	; to $203F  ** never let VALBUFFER straddle pages
     35  10000 ????				       endif
     36  10000 ????
     37  10000 ????
     38  10000 ????		21 00	    pausestate =	$2100
     39  10000 ????		21 01	    dlzero     =	$2101	; zero to force end of $2100 DL, which we use in vblank and overscan
     40  10000 ????		21 02	    sINPT1     =	$2102	; save register for joy button joy0
     41  10000 ????		21 03	    sINPT3     =	$2103	; save register for joy button joy1
     42  10000 ????		21 04	    currentbank =	$2104
     43  10000 ????
     44  10000 ????		21 05	    currentrambank =	$2105
     45  10000 ????		21 06	    charactermode =	$2106
     46  10000 ????		21 07	    sCTRL      =	$2107
     47  10000 ????		21 08	    pokeydetected =	$2108
     48  10000 ????		21 09	    paldetected =	$2109
     49  10000 ????		21 0a	    avoxdetected =	$210A
     50  10000 ????		21 0b	    sCHARBASE  =	$210B	; save register for CHARBASE
     51  10000 ????
     52  10000 ????		21 0c	    hsdevice   =	$210C
     53  10000 ????		21 0d	    hsdifficulty =	$210D
     54  10000 ????		21 0e	    hserror    =	$210E
     55  10000 ????		21 0f	    hsgameslot =	$210F
     56  10000 ????		21 10	    hsnewscoreline =	$2110
     57  10000 ????		21 11	    hsnewscorerank =	$2111
     58  10000 ????		21 12	    HSRAMTable =	$2112	; to $212F (30 bytes) Format: III*5, SSS*5
     59  10000 ????		21 12	    HSRAMInitials =	$2112	; see above
     60  10000 ????		21 21	    HSRAMScores =	$2121	; see above
     61  10000 ????
     62  10000 ????		21 31	    ssCTRL     =	$2131
     63  10000 ????		21 32	    ssCHARBASE =	$2132
     64  10000 ????		21 33	    hsdisplaymode =	$2133
     65  10000 ????		21 34	    gamedifficulty =	$2134
     66  10000 ????		21 35	    hsinitialpos =	$2135
     67  10000 ????		21 36	    hsinitialhold =	$2136
     68  10000 ????		21 37	    hscursorx  =	$2137
     69  10000 ????		21 38	    hsjoydebounce =	$2138
     70  10000 ????		21 39	    hsswcha    =	$2139
     71  10000 ????		21 3a	    hsinpt1    =	$213A
     72  10000 ????		21 3b	    hscolorchaseindex =	$213B
     73  10000 ????		21 3c	    visibleDLLstart =	$213C
     74  10000 ????		21 3d	    overscanDLLstart =	$213D
     75  10000 ????		21 3e	    frameslost =	$213E
     76  10000 ????
     77  10000 ????
     78  10000 ????		00 40	    rand       =	$40
     79  10000 ????		00 41	    rand16     =	$41
     80  10000 ????		00 42	    temp1      =	$42
     81  10000 ????		00 43	    temp2      =	$43
     82  10000 ????		00 44	    temp3      =	$44
     83  10000 ????		00 45	    temp4      =	$45
     84  10000 ????		00 46	    temp5      =	$46
     85  10000 ????		00 47	    temp6      =	$47
     86  10000 ????		00 48	    temp7      =	$48
     87  10000 ????		00 49	    temp8      =	$49
     88  10000 ????		00 4a	    temp9      =	$4a
     89  10000 ????
     90  10000 ????		00 4b	    pokeybase  =	$4b
     91  10000 ????		00 4b	    pokeybaselo =	$4b
     92  10000 ????		00 4c	    pokeybasehi =	$4c
     93  10000 ????
     94  10000 ????		00 4d	    visibleover =	$4d
     95  10000 ????
     96  10000 ????		00 4e	    sfx1pointlo =	$4e
     97  10000 ????		00 4f	    sfx2pointlo =	$4f
     98  10000 ????		00 50	    sfx1pointhi =	$50
     99  10000 ????		00 51	    sfx2pointhi =	$51
    100  10000 ????
    101  10000 ????		00 52	    sfx1priority =	$52
    102  10000 ????		00 53	    sfx2priority =	$53
    103  10000 ????		00 54	    sfx1poffset =	$54
    104  10000 ????		00 55	    sfx2poffset =	$55
    105  10000 ????
    106  10000 ????		00 56	    sfx1frames =	$56
    107  10000 ????		00 57	    sfx2frames =	$57
    108  10000 ????		00 58	    sfx1tick   =	$58
    109  10000 ????		00 59	    sfx2tick   =	$59
    110  10000 ????
    111  10000 ????		00 5a	    tempmath   =	$5a
    112  10000 ????
    113  10000 ????		00 5b	    pokey1pointlo =	$5b
    114  10000 ????		00 5c	    pokey1pointhi =	$5c
    115  10000 ????		00 5d	    pokey2pointlo =	$5d
    116  10000 ????		00 5e	    pokey2pointhi =	$5e
    117  10000 ????		00 5f	    pokey3pointlo =	$5f
    118  10000 ????		00 60	    pokey3pointhi =	$60
    119  10000 ????		00 61	    pokey4pointlo =	$61
    120  10000 ????		00 62	    pokey4pointhi =	$62
    121  10000 ????
    122  10000 ????		00 63	    dlpnt      =	$63	; to $64
    123  10000 ????		00 65	    dlend      =	$65	; to $81 - for 28 possible visible dll entries
    124  10000 ????		00 82	    dlendsave  =	$82	; to $9e - for 28 possible visible dll entries
    125  10000 ????
    126  10000 ????		00 9f	    speech_addr =	$9f
    127  10000 ????		00 a0	    speech_addr_hi =	$a0
    128  10000 ????
    129  10000 ????		00 a1	    HSGameTableLo =	$a1
    130  10000 ????		00 a2	    HSGameTableHi =	$a2
    131  10000 ????		00 a3	    HSVoxHi    =	$a3
    132  10000 ????		00 a4	    HSVoxLo    =	$a4
    133  10000 ????
    134  10000 ????						;channel pointers
    135  10000 ????
    136  10000 ????		00 a5	    songchannel1layer1lo =	$a5
    137  10000 ????		00 a6	    songchannel2layer1lo =	$a6
    138  10000 ????		00 a7	    songchannel3layer1lo =	$a7
    139  10000 ????		00 a8	    songchannel4layer1lo =	$a8
    140  10000 ????
    141  10000 ????		00 a9	    songchannel1layer2lo =	$a9
    142  10000 ????		00 aa	    songchannel2layer2lo =	$aA
    143  10000 ????		00 ab	    songchannel3layer2lo =	$aB
    144  10000 ????		00 ac	    songchannel4layer2lo =	$aC
    145  10000 ????
    146  10000 ????		00 ad	    songchannel1layer3lo =	$aD
    147  10000 ????		00 ae	    songchannel2layer3lo =	$aE
    148  10000 ????		00 af	    songchannel3layer3lo =	$aF
    149  10000 ????		00 b0	    songchannel4layer3lo =	$b0
    150  10000 ????
    151  10000 ????		00 b1	    songchannel1layer1hi =	$b1
    152  10000 ????		00 b2	    songchannel2layer1hi =	$b2
    153  10000 ????		00 b3	    songchannel3layer1hi =	$b3
    154  10000 ????		00 b4	    songchannel4layer1hi =	$b4
    155  10000 ????
    156  10000 ????		00 b5	    songchannel1layer2hi =	$b5
    157  10000 ????		00 b6	    songchannel2layer2hi =	$b6
    158  10000 ????		00 b7	    songchannel3layer2hi =	$b7
    159  10000 ????		00 b8	    songchannel4layer2hi =	$b8
    160  10000 ????
    161  10000 ????		00 b9	    songchannel1layer3hi =	$b9
    162  10000 ????		00 ba	    songchannel2layer3hi =	$bA
    163  10000 ????		00 bb	    songchannel3layer3hi =	$bB
    164  10000 ????		00 bc	    songchannel4layer3hi =	$bC
    165  10000 ????
    166  10000 ????		00 bd	    songdatalo =	$bd
    167  10000 ????		00 be	    songdatahi =	$be
    168  10000 ????
    169  10000 ????		00 bf	    inactivechannelcount =	$bf
    170  10000 ????
    171  10000 ????
    172  10000 ????		00 c0	    songchannel1transpose =	$c0
    173  10000 ????		00 c1	    songchannel2transpose =	$c1
    174  10000 ????		00 c2	    songchannel3transpose =	$c2
    175  10000 ????		00 c3	    songchannel4transpose =	$c3
    176  10000 ????
    177  10000 ????		00 c4	    songstackindex =	$c4
    178  10000 ????
    179  10000 ????		00 c5	    songchannel1instrumentlo =	$c5
    180  10000 ????		00 c6	    songchannel2instrumentlo =	$c6
    181  10000 ????		00 c7	    songchannel3instrumentlo =	$c7
    182  10000 ????		00 c8	    songchannel4instrumentlo =	$c8
    183  10000 ????
    184  10000 ????		00 c9	    songchannel1instrumenthi =	$c9
    185  10000 ????		00 ca	    songchannel2instrumenthi =	$ca
    186  10000 ????		00 cb	    songchannel3instrumenthi =	$cb
    187  10000 ????		00 cc	    songchannel4instrumenthi =	$cc
    188  10000 ????
    189  10000 ????		00 cd	    sfx1notedata =	$cd
    190  10000 ????		00 ce	    sfx2notedata =	$ce
    191  10000 ????
    192  10000 ????		00 cf	    songloops  =	$cf
    193  10000 ????
    194  10000 ????		00 d0	    songpointerlo =	$D0
    195  10000 ????		00 d1	    songpointerhi =	$D1
    196  10000 ????
    197  10000 ????		00 d2	    voxlock    =	$D2
    198  10000 ????		00 d3	    voxqueuesize =	$D3
    199  10000 ????
    200  10000 ????		00 d4	    vblankroutines =	$D4
    201  10000 ????
    202  10000 ????		00 d5	    doublebufferstate =	$D5
    203  10000 ????		00 d6	    doublebufferdloffset =	$D6
    204  10000 ????		00 d7	    doublebufferbufferdirty =	$D7
    205  10000 ????
    206  10000 ????		00 d8	    inttemp1   =	$D8
    207  10000 ????		00 d9	    inttemp2   =	$D9
    208  10000 ????		00 da	    inttemp3   =	$DA
    209  10000 ????		00 db	    inttemp4   =	$DB
    210  10000 ????		00 dc	    inttemp5   =	$DC
    211  10000 ????		00 dd	    inttemp6   =	$DD
    212  10000 ????
    213  10000 ????		00 de	    sfxschedulelock =	$DE
    214  10000 ????		00 df	    sfxschedulemissed =	$DF
    215  10000 ????		00 e0	    sfxinstrumentlo =	$E0
    216  10000 ????		00 e1	    sfxinstrumenthi =	$E1
    217  10000 ????		00 e2	    sfxpitchoffset =	$E2
    218  10000 ????		00 e3	    sfxnoteindex =	$E3
    219  10000 ????
    220  10000 ????		00 e4	    CTLSWAs    =	$E4
    221  10000 ????		00 e5	    CTLSWBs    =	$E5
    222  10000 ????
    223  10000 ????		00 e6	    A	       =	$e6
    224  10000 ????		00 e6	    a	       =	$e6
    225  10000 ????		00 e7	    B	       =	$e7
    226  10000 ????		00 e7	    b	       =	$e7
    227  10000 ????		00 e8	    C	       =	$e8
    228  10000 ????		00 e8	    c	       =	$e8
    229  10000 ????		00 e9	    D	       =	$e9
    230  10000 ????		00 e9	    d	       =	$e9
    231  10000 ????		00 ea	    E	       =	$ea
    232  10000 ????		00 ea	    e	       =	$ea
    233  10000 ????		00 eb	    F	       =	$eb
    234  10000 ????		00 eb	    f	       =	$eb
    235  10000 ????		00 ec	    G	       =	$ec
    236  10000 ????		00 ec	    g	       =	$ec
    237  10000 ????		00 ed	    H	       =	$ed
    238  10000 ????		00 ed	    h	       =	$ed
    239  10000 ????		00 ee	    I	       =	$ee
    240  10000 ????		00 ee	    i	       =	$ee
    241  10000 ????		00 ef	    J	       =	$ef
    242  10000 ????		00 ef	    j	       =	$ef
    243  10000 ????		00 f0	    K	       =	$f0
    244  10000 ????		00 f0	    k	       =	$f0
    245  10000 ????		00 f1	    L	       =	$f1
    246  10000 ????		00 f1	    l	       =	$f1
    247  10000 ????		00 f2	    M	       =	$f2
    248  10000 ????		00 f2	    m	       =	$f2
    249  10000 ????		00 f3	    N	       =	$f3
    250  10000 ????		00 f3	    n	       =	$f3
    251  10000 ????		00 f4	    O	       =	$f4
    252  10000 ????		00 f4	    o	       =	$f4
    253  10000 ????		00 f5	    P	       =	$f5
    254  10000 ????		00 f5	    p	       =	$f5
    255  10000 ????		00 f6	    Q	       =	$f6
    256  10000 ????		00 f6	    q	       =	$f6
    257  10000 ????		00 f7	    R	       =	$f7
    258  10000 ????		00 f7	    r	       =	$f7
    259  10000 ????		00 f8	    S	       =	$f8
    260  10000 ????		00 f8	    s	       =	$f8
    261  10000 ????		00 f9	    T	       =	$f9
    262  10000 ????		00 f9	    t	       =	$f9
    263  10000 ????		00 fa	    U	       =	$fa
    264  10000 ????		00 fa	    u	       =	$fa
    265  10000 ????		00 fb	    V	       =	$fb
    266  10000 ????		00 fb	    v	       =	$fb
    267  10000 ????		00 fc	    W	       =	$fc
    268  10000 ????		00 fc	    w	       =	$fc
    269  10000 ????		00 fd	    X	       =	$fd
    270  10000 ????		00 fd	    x	       =	$fd
    271  10000 ????		00 fe	    Y	       =	$fe
    272  10000 ????		00 fe	    y	       =	$fe
    273  10000 ????		00 ff	    Z	       =	$ff
    274  10000 ????		00 ff	    z	       =	$ff
    275  10000 ????
    276  10000 ????						; var0-var99 variables use the top of the stack
    277  10000 ????		01 40	    var0       =	$140
    278  10000 ????		01 41	    var1       =	$141
    279  10000 ????		01 42	    var2       =	$142
    280  10000 ????		01 43	    var3       =	$143
    281  10000 ????		01 44	    var4       =	$144
    282  10000 ????		01 45	    var5       =	$145
    283  10000 ????		01 46	    var6       =	$146
    284  10000 ????		01 47	    var7       =	$147
    285  10000 ????		01 48	    var8       =	$148
    286  10000 ????		01 49	    var9       =	$149
    287  10000 ????		01 4a	    var10      =	$14a
    288  10000 ????		01 4b	    var11      =	$14b
    289  10000 ????		01 4c	    var12      =	$14c
    290  10000 ????		01 4d	    var13      =	$14d
    291  10000 ????		01 4e	    var14      =	$14e
    292  10000 ????		01 4f	    var15      =	$14f
    293  10000 ????		01 50	    var16      =	$150
    294  10000 ????		01 51	    var17      =	$151
    295  10000 ????		01 52	    var18      =	$152
    296  10000 ????		01 53	    var19      =	$153
    297  10000 ????		01 54	    var20      =	$154
    298  10000 ????		01 55	    var21      =	$155
    299  10000 ????		01 56	    var22      =	$156
    300  10000 ????		01 57	    var23      =	$157
    301  10000 ????		01 58	    var24      =	$158
    302  10000 ????		01 59	    var25      =	$159
    303  10000 ????		01 5a	    var26      =	$15a
    304  10000 ????		01 5b	    var27      =	$15b
    305  10000 ????		01 5c	    var28      =	$15c
    306  10000 ????		01 5d	    var29      =	$15d
    307  10000 ????		01 5e	    var30      =	$15e
    308  10000 ????		01 5f	    var31      =	$15f
    309  10000 ????		01 60	    var32      =	$160
    310  10000 ????		01 61	    var33      =	$161
    311  10000 ????		01 62	    var34      =	$162
    312  10000 ????		01 63	    var35      =	$163
    313  10000 ????		01 64	    var36      =	$164
    314  10000 ????		01 65	    var37      =	$165
    315  10000 ????		01 66	    var38      =	$166
    316  10000 ????		01 67	    var39      =	$167
    317  10000 ????		01 68	    var40      =	$168
    318  10000 ????		01 69	    var41      =	$169
    319  10000 ????		01 6a	    var42      =	$16a
    320  10000 ????		01 6b	    var43      =	$16b
    321  10000 ????		01 6c	    var44      =	$16c
    322  10000 ????		01 6d	    var45      =	$16d
    323  10000 ????		01 6e	    var46      =	$16e
    324  10000 ????		01 6f	    var47      =	$16f
    325  10000 ????		01 70	    var48      =	$170
    326  10000 ????		01 71	    var49      =	$171
    327  10000 ????		01 72	    var50      =	$172
    328  10000 ????		01 73	    var51      =	$173
    329  10000 ????		01 74	    var52      =	$174
    330  10000 ????		01 75	    var53      =	$175
    331  10000 ????		01 76	    var54      =	$176
    332  10000 ????		01 77	    var55      =	$177
    333  10000 ????		01 78	    var56      =	$178
    334  10000 ????		01 79	    var57      =	$179
    335  10000 ????		01 7a	    var58      =	$17a
    336  10000 ????		01 7b	    var59      =	$17b
    337  10000 ????		01 7c	    var60      =	$17c
    338  10000 ????		01 7d	    var61      =	$17d
    339  10000 ????		01 7e	    var62      =	$17e
    340  10000 ????		01 7f	    var63      =	$17f
    341  10000 ????		01 80	    var64      =	$180
    342  10000 ????		01 81	    var65      =	$181
    343  10000 ????		01 82	    var66      =	$182
    344  10000 ????		01 83	    var67      =	$183
    345  10000 ????		01 84	    var68      =	$184
    346  10000 ????		01 85	    var69      =	$185
    347  10000 ????		01 86	    var70      =	$186
    348  10000 ????		01 87	    var71      =	$187
    349  10000 ????		01 88	    var72      =	$188
    350  10000 ????		01 89	    var73      =	$189
    351  10000 ????		01 8a	    var74      =	$18a
    352  10000 ????		01 8b	    var75      =	$18b
    353  10000 ????		01 8c	    var76      =	$18c
    354  10000 ????		01 8d	    var77      =	$18d
    355  10000 ????		01 8e	    var78      =	$18e
    356  10000 ????		01 8f	    var79      =	$18f
    357  10000 ????		01 90	    var80      =	$190
    358  10000 ????		01 91	    var81      =	$191
    359  10000 ????		01 92	    var82      =	$192
    360  10000 ????		01 93	    var83      =	$193
    361  10000 ????		01 94	    var84      =	$194
    362  10000 ????		01 95	    var85      =	$195
    363  10000 ????		01 96	    var86      =	$196
    364  10000 ????		01 97	    var87      =	$197
    365  10000 ????		01 98	    var88      =	$198
    366  10000 ????		01 99	    var89      =	$199
    367  10000 ????		01 9a	    var90      =	$19a
    368  10000 ????		01 9b	    var91      =	$19b
    369  10000 ????		01 9c	    var92      =	$19c
    370  10000 ????		01 9d	    var93      =	$19d
    371  10000 ????		01 9e	    var94      =	$19e
    372  10000 ????		01 9f	    var95      =	$19f
    373  10000 ????		01 a0	    var96      =	$1a0
    374  10000 ????		01 a1	    var97      =	$1a1
    375  10000 ????		01 a2	    var98      =	$1a2
    376  10000 ????		01 a3	    var99      =	$1a3
    377  10000 ????
    378  10000 ????		01 a4	    framecounter =	$1A4
    379  10000 ????		01 a5	    countdownseconds =	$1A5
    380  10000 ????		01 a6	    score0     =	$1A6	; $1A7 $1A8
    381  10000 ????		01 a9	    score1     =	$1A9	; $1AA $1AB
    382  10000 ????		01 ac	    pausebuttonflag =	$1AC
    383  10000 ????		01 ad	    valbufend  =	$1AD
    384  10000 ????		01 ae	    valbufendsave =	$1AE
    385  10000 ????		01 af	    finescrollx =	$1AF
    386  10000 ????		01 b0	    finescrolly =	$1B0
    387  10000 ????		01 b1	    joybuttonmode =	$1B1	; used to track any joysticks that were changed to one-button mode
    388  10000 ????		01 b2	    interruptindex =	$1B2
    389  10000 ????		01 b3	    tempavox   =	$1B3
    390  10000 ????		01 b4	    doublebufferminimumframetarget =	$1B4
    391  10000 ????		01 b5	    doublebufferminimumframeindex =	$1B5
    392  10000 ????		01 b6	    pausedisable =	$1B6
    393  10000 ????		01 b7	    XCTRL1s    =	$1B7
    394  10000 ????		01 b8	    spritecount =	$1B8
    395  10000 ????		01 b9	    avoxenable =	$1B9
    396  10000 ????
    397  10000 ????		01 ba	    pokey1frames =	$1BA
    398  10000 ????		01 bb	    pokey1tick =	$1BB
    399  10000 ????		01 bc	    pokey2frames =	$1BC
    400  10000 ????		01 bd	    pokey2tick =	$1BD
    401  10000 ????		01 be	    pokey3frames =	$1BE
    402  10000 ????		01 bf	    pokey3tick =	$1BF
    403  10000 ????		01 c0	    pokey4frames =	$1C0
    404  10000 ????		01 c1	    pokey4tick =	$1C1
    405  10000 ????		01 c2	    pokey1priority =	$1C2
    406  10000 ????		01 c3	    pokey1offset =	$1C3
    407  10000 ????		01 c4	    pokey2priority =	$1C4
    408  10000 ????		01 c5	    pokey2offset =	$1C5
    409  10000 ????		01 c6	    pokey3priority =	$1C6
    410  10000 ????		01 c7	    pokey3offset =	$1C7
    411  10000 ????		01 c8	    pokey4priority =	$1C8
    412  10000 ????		01 c9	    pokey4offset =	$1C9
    413  10000 ????
    414  10000 ????		01 ca	    songtempo  =	$1CA
    415  10000 ????		01 cb	    songtick   =	$1CB
    416  10000 ????
    417  10000 ????		01 cc	    songchannel1layer1loops =	$1CC
    418  10000 ????		01 cd	    songchannel2layer1loops =	$1CD
    419  10000 ????		01 ce	    songchannel3layer1loops =	$1CE
    420  10000 ????		01 cf	    songchannel4layer1loops =	$1CF
    421  10000 ????
    422  10000 ????		01 d0	    songchannel1layer2loops =	$1D0
    423  10000 ????		01 d1	    songchannel2layer2loops =	$1D1
    424  10000 ????		01 d2	    songchannel3layer2loops =	$1D2
    425  10000 ????		01 d3	    songchannel4layer2loops =	$1D3
    426  10000 ????
    427  10000 ????		01 d4	    songchannel1layer3loops =	$1D4
    428  10000 ????		01 d5	    songchannel2layer3loops =	$1D5
    429  10000 ????		01 d6	    songchannel3layer3loops =	$1D6
    430  10000 ????		01 d7	    songchannel4layer3loops =	$1D7
    431  10000 ????
    432  10000 ????		01 d8	    songchannel1busywait =	$1D8
    433  10000 ????		01 d9	    songchannel2busywait =	$1D9
    434  10000 ????		01 da	    songchannel3busywait =	$1DA
    435  10000 ????		01 db	    songchannel4busywait =	$1DB
    436  10000 ????
    437  10000 ????		01 dc	    songchannel1stackdepth =	$1DC
    438  10000 ????		01 dd	    songchannel2stackdepth =	$1DD
    439  10000 ????		01 de	    songchannel3stackdepth =	$1DE
    440  10000 ????		01 df	    songchannel4stackdepth =	$1DF
    441  10000 ????
    442  10000 ????		01 e0	    palframes  =	$1E0
    443  10000 ????		01 e1	    palfastframe =	$1E1
    444  10000 ????
    445  10000 ????		01 e2	    port0control =	$1E2
    446  10000 ????		01 e3	    port1control =	$1E3
    447  10000 ????
    448  10000 ????						; port#control values...
    449  10000 ????						;	1 = proline
    450  10000 ????						;	2 = lightgun
    451  10000 ????						;	3 = paddle
    452  10000 ????						;	4 = trakball
    453  10000 ????						;	5 = vcs joystick
    454  10000 ????						;	6 = driving
    455  10000 ????						;	7 = keypad
    456  10000 ????						;	8 = st mouse/cx80
    457  10000 ????						;	9 = amiga mouse
    458  10000 ????						;     10 = atarivox
    459  10000 ????
    460  10000 ????						; controller 0 data...
    461  10000 ????		01 e4	    paddleposition0 =	$1E4
    462  10000 ????		01 e4	    keypadmatrix0a =	$1E4
    463  10000 ????		01 e4	    drivingposition0 =	$1E4
    464  10000 ????		01 e4	    trakballx0 =	$1E4
    465  10000 ????		01 e4	    mousex0    =	$1E4
    466  10000 ????		01 e4	    lighttgunx0 =	$1E4
    467  10000 ????
    468  10000 ????						; controller 1 data...
    469  10000 ????		01 e5	    paddleposition2 =	$1E5
    470  10000 ????		01 e5	    keypadmatrix1a =	$1E5
    471  10000 ????		01 e5	    drivingposition1 =	$1E5
    472  10000 ????		01 e5	    trakballx1 =	$1E5
    473  10000 ????		01 e5	    mousex1    =	$1E5
    474  10000 ????		01 e5	    lightgunx1 =	$1E5
    475  10000 ????
    476  10000 ????						; controller 0 altdata...
    477  10000 ????		01 e6	    paddleposition1 =	$1E6
    478  10000 ????		01 e6	    keypadmatrix0b =	$1E6
    479  10000 ????		01 e6	    trakbally0 =	$1E6
    480  10000 ????		01 e6	    mousey0    =	$1E6
    481  10000 ????		01 e6	    lightguny0 =	$1E6
    482  10000 ????
    483  10000 ????						; controller 1 altdata...
    484  10000 ????		01 e7	    paddleposition3 =	$1E7
    485  10000 ????		01 e7	    keypadmatrix1b =	$1E7
    486  10000 ????		01 e7	    trakbally1 =	$1E7
    487  10000 ????		01 e7	    mousey1    =	$1E7
    488  10000 ????		01 e7	    lightguny1 =	$1E7
    489  10000 ????
    490  10000 ????						; controller state save. for trakball state+dir codes, rotary position codes
    491  10000 ????		01 e8	    controller0statesave =	$1E8
    492  10000 ????		01 e8	    mousecodex0 =	$1E8
    493  10000 ????		01 e8	    trakballcodex0 =	$1E8
    494  10000 ????		01 e8	    keypadmatrix0c =	$1E8
    495  10000 ????
    496  10000 ????		01 e9	    controller1statesave =	$1E9
    497  10000 ????		01 e9	    mousecodex1 =	$1E9
    498  10000 ????		01 e9	    trakballcodex1 =	$1E9
    499  10000 ????		01 e9	    keypadmatrix1c =	$1E9
    500  10000 ????
    501  10000 ????		01 ea	    keypadmatrix0d =	$1EA
    502  10000 ????		01 ea	    mousecodey0 =	$1EA
    503  10000 ????		01 ea	    trakballcodey0 =	$1EA
    504  10000 ????
    505  10000 ????		01 eb	    keypadmatrix1d =	$1EB
    506  10000 ????		01 eb	    mousecodey1 =	$1EB
    507  10000 ????		01 eb	    trakballcodey1 =	$1EB
    508  10000 ????
    509  10000 ????		01 ec	    genesisdetected0 =	$1EC
    510  10000 ????		01 ed	    genesisdetected1 =	$1ED
    511  10000 ????
    512  10000 ????						; $1EE - $1FF reserved for stack
    513  10000 ????
------- FILE c:\Users\Steve\Desktop\2018dev\7800\7800basic\projects\lessons\lesson1_gfx_modes\lesson1_51.bas.asm
------- FILE 7800basic_variable_redefs.h LEVEL 2 PASS 3
      0  10000 ????				       include	"7800basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 00	    font_mode  =	$00
      4  10000 ????		00 0b	    font_width_twoscompliment =	$0b
      5  10000 ????		00 35	    font_width =	$35
      6  10000 ????		00 00	    blank_mode =	$00
      7  10000 ????		00 1c	    blank_width_twoscompliment =	$1c
      8  10000 ????		00 04	    blank_width =	$04
      9  10000 ????		00 00	    p1_mode    =	$00
     10  10000 ????		00 1e	    p1_width_twoscompliment =	$1e
     11  10000 ????		00 02	    p1_width   =	$02
     12  10000 ????		00 00	    ex7_mode   =	$00
     13  10000 ????		00 1c	    ex7_width_twoscompliment =	$1c
     14  10000 ????		00 04	    ex7_width  =	$04
     15  10000 ????		00 00	    ex6_mode   =	$00
     16  10000 ????		00 1c	    ex6_width_twoscompliment =	$1c
     17  10000 ????		00 04	    ex6_width  =	$04
     18  10000 ????		00 00	    ex5_mode   =	$00
     19  10000 ????		00 1c	    ex5_width_twoscompliment =	$1c
     20  10000 ????		00 04	    ex5_width  =	$04
     21  10000 ????		00 00	    ex4_mode   =	$00
     22  10000 ????		00 1c	    ex4_width_twoscompliment =	$1c
     23  10000 ????		00 04	    ex4_width  =	$04
     24  10000 ????		00 00	    ex3_mode   =	$00
     25  10000 ????		00 1c	    ex3_width_twoscompliment =	$1c
     26  10000 ????		00 04	    ex3_width  =	$04
     27  10000 ????		00 00	    ex2_mode   =	$00
     28  10000 ????		00 1c	    ex2_width_twoscompliment =	$1c
     29  10000 ????		00 04	    ex2_width  =	$04
     30  10000 ????		00 00	    ex1_mode   =	$00
     31  10000 ????		00 1c	    ex1_width_twoscompliment =	$1c
     32  10000 ????		00 04	    ex1_width  =	$04
     33  10000 ????		00 00	    zonebg80x16_16_mode =	$00
     34  10000 ????		00 0c	    zonebg80x16_16_width_twoscompliment =	$0c
     35  10000 ????		00 14	    zonebg80x16_16_width =	$14
     36  10000 ????		00 00	    g16x16_4color8_mode =	$00
     37  10000 ????		00 1c	    g16x16_4color8_width_twoscompliment =	$1c
     38  10000 ????		00 04	    g16x16_4color8_width =	$04
     39  10000 ????		00 00	    g16x16_4color7_mode =	$00
     40  10000 ????		00 1c	    g16x16_4color7_width_twoscompliment =	$1c
     41  10000 ????		00 04	    g16x16_4color7_width =	$04
     42  10000 ????		00 00	    g16x16_4color6_mode =	$00
     43  10000 ????		00 1c	    g16x16_4color6_width_twoscompliment =	$1c
     44  10000 ????		00 04	    g16x16_4color6_width =	$04
     45  10000 ????		00 00	    g16x16_4color5_mode =	$00
     46  10000 ????		00 1c	    g16x16_4color5_width_twoscompliment =	$1c
     47  10000 ????		00 04	    g16x16_4color5_width =	$04
     48  10000 ????		00 00	    g16x16_4color4_mode =	$00
     49  10000 ????		00 1c	    g16x16_4color4_width_twoscompliment =	$1c
     50  10000 ????		00 04	    g16x16_4color4_width =	$04
     51  10000 ????		00 00	    g16x16_4color3_mode =	$00
     52  10000 ????		00 1c	    g16x16_4color3_width_twoscompliment =	$1c
     53  10000 ????		00 04	    g16x16_4color3_width =	$04
     54  10000 ????		00 00	    g16x16_4color2_mode =	$00
     55  10000 ????		00 1c	    g16x16_4color2_width_twoscompliment =	$1c
     56  10000 ????		00 04	    g16x16_4color2_width =	$04
     57  10000 ????		00 00	    g16x16_4color_mode =	$00
     58  10000 ????		00 1c	    g16x16_4color_width_twoscompliment =	$1c
     59  10000 ????		00 04	    g16x16_4color_width =	$04
     60  10000 ????		00 80	    g16x16_12_2_mode =	$80
     61  10000 ????		00 18	    g16x16_12_2_width_twoscompliment =	$18
     62  10000 ????		00 08	    g16x16_12_2_width =	$08
     63  10000 ????		00 80	    g16x16_12_1_mode =	$80
     64  10000 ????		00 18	    g16x16_12_1_width_twoscompliment =	$18
     65  10000 ????		00 08	    g16x16_12_1_width =	$08
     66  10000 ????		00 01	    DOUBLEBUFFER =	1
     67  10000 ????		01 45	    wrap       =	var5
     68  10000 ????
     69  10000 ????		01 44	    ex	       =	var4
     70  10000 ????
     71  10000 ????		01 43	    an	       =	var3
     72  10000 ????
     73  10000 ????		01 42	    db	       =	var2
     74  10000 ????
     75  10000 ????		01 41	    bg	       =	var1
     76  10000 ????
     77  10000 ????		00 0f	    font_color1 =	$0f
     78  10000 ????		00 00	    font_color0 =	$00
     79  10000 ????		00 00	    blank_color1 =	0
     80  10000 ????		00 00	    blank_color0 =	$00
     81  10000 ????		00 35	    p1_color3  =	$35
     82  10000 ????		00 07	    p1_color2  =	$07
     83  10000 ????		00 0c	    p1_color1  =	$0c
     84  10000 ????		00 00	    p1_color0  =	$00
     85  10000 ????		00 07	    ex7_color1 =	$07
     86  10000 ????		00 00	    ex7_color0 =	$00
     87  10000 ????		00 00	    ex6_color3 =	0
     88  10000 ????		00 35	    ex6_color2 =	$35
     89  10000 ????		00 07	    ex6_color1 =	$07
     90  10000 ????		00 00	    ex6_color0 =	$00
     91  10000 ????		00 35	    ex5_color3 =	$35
     92  10000 ????		00 0c	    ex5_color2 =	$0c
     93  10000 ????		00 07	    ex5_color1 =	$07
     94  10000 ????		00 00	    ex5_color0 =	$00
     95  10000 ????		00 35	    ex4_color3 =	$35
     96  10000 ????		00 0c	    ex4_color2 =	$0c
     97  10000 ????		00 07	    ex4_color1 =	$07
     98  10000 ????		00 00	    ex4_color0 =	$00
     99  10000 ????		00 35	    ex3_color3 =	$35
    100  10000 ????		00 0c	    ex3_color2 =	$0c
    101  10000 ????		00 07	    ex3_color1 =	$07
    102  10000 ????		00 00	    ex3_color0 =	$00
    103  10000 ????		00 35	    ex2_color3 =	$35
    104  10000 ????		00 0c	    ex2_color2 =	$0c
    105  10000 ????		00 07	    ex2_color1 =	$07
    106  10000 ????		00 00	    ex2_color0 =	$00
    107  10000 ????		00 35	    ex1_color3 =	$35
    108  10000 ????		00 0c	    ex1_color2 =	$0c
    109  10000 ????		00 07	    ex1_color1 =	$07
    110  10000 ????		00 00	    ex1_color0 =	$00
    111  10000 ????		00 08	    zonebg80x16_16_color1 =	$08
    112  10000 ????		00 00	    zonebg80x16_16_color0 =	$00
    113  10000 ????		00 91	    g16x16_4color8_color3 =	$91
    114  10000 ????		00 a8	    g16x16_4color8_color2 =	$a8
    115  10000 ????		00 91	    g16x16_4color8_color1 =	$91
    116  10000 ????		00 00	    g16x16_4color8_color0 =	$00
    117  10000 ????		00 a8	    g16x16_4color7_color3 =	$a8
    118  10000 ????		00 91	    g16x16_4color7_color2 =	$91
    119  10000 ????		00 91	    g16x16_4color7_color1 =	$91
    120  10000 ????		00 00	    g16x16_4color7_color0 =	$00
    121  10000 ????		00 91	    g16x16_4color6_color3 =	$91
    122  10000 ????		00 a8	    g16x16_4color6_color2 =	$a8
    123  10000 ????		00 91	    g16x16_4color6_color1 =	$91
    124  10000 ????		00 00	    g16x16_4color6_color0 =	$00
    125  10000 ????		00 91	    g16x16_4color5_color3 =	$91
    126  10000 ????		00 a8	    g16x16_4color5_color2 =	$a8
    127  10000 ????		00 91	    g16x16_4color5_color1 =	$91
    128  10000 ????		00 00	    g16x16_4color5_color0 =	$00
    129  10000 ????		00 91	    g16x16_4color4_color3 =	$91
    130  10000 ????		00 a8	    g16x16_4color4_color2 =	$a8
    131  10000 ????		00 91	    g16x16_4color4_color1 =	$91
    132  10000 ????		00 00	    g16x16_4color4_color0 =	$00
    133  10000 ????		00 91	    g16x16_4color3_color3 =	$91
    134  10000 ????		00 a8	    g16x16_4color3_color2 =	$a8
    135  10000 ????		00 91	    g16x16_4color3_color1 =	$91
    136  10000 ????		00 00	    g16x16_4color3_color0 =	$00
    137  10000 ????		00 91	    g16x16_4color2_color3 =	$91
    138  10000 ????		00 a8	    g16x16_4color2_color2 =	$a8
    139  10000 ????		00 91	    g16x16_4color2_color1 =	$91
    140  10000 ????		00 00	    g16x16_4color2_color0 =	$00
    141  10000 ????		00 91	    g16x16_4color_color3 =	$91
    142  10000 ????		00 a8	    g16x16_4color_color2 =	$a8
    143  10000 ????		00 91	    g16x16_4color_color1 =	$91
    144  10000 ????		00 00	    g16x16_4color_color0 =	$00
    145  10000 ????		00 00	    g16x16_12_2_color15 =	0
    146  10000 ????		00 00	    g16x16_12_2_color14 =	0
    147  10000 ????		00 00	    g16x16_12_2_color13 =	0
    148  10000 ????		00 02	    g16x16_12_2_color12 =	$02
    149  10000 ????		00 06	    g16x16_12_2_color11 =	$06
    150  10000 ????		00 42	    g16x16_12_2_color10 =	$42
    151  10000 ????		00 08	    g16x16_12_2_color9 =	$08
    152  10000 ????		00 3b	    g16x16_12_2_color8 =	$3b
    153  10000 ????		00 36	    g16x16_12_2_color7 =	$36
    154  10000 ????		00 0b	    g16x16_12_2_color6 =	$0b
    155  10000 ????		00 39	    g16x16_12_2_color5 =	$39
    156  10000 ????		00 04	    g16x16_12_2_color4 =	$04
    157  10000 ????		00 07	    g16x16_12_2_color3 =	$07
    158  10000 ????		00 01	    g16x16_12_2_color2 =	$01
    159  10000 ????		00 42	    g16x16_12_2_color1 =	$42
    160  10000 ????		00 00	    g16x16_12_2_color0 =	$00
    161  10000 ????		00 00	    g16x16_12_1_color15 =	0
    162  10000 ????		00 00	    g16x16_12_1_color14 =	0
    163  10000 ????		00 00	    g16x16_12_1_color13 =	0
    164  10000 ????		00 02	    g16x16_12_1_color12 =	$02
    165  10000 ????		00 07	    g16x16_12_1_color11 =	$07
    166  10000 ????		00 08	    g16x16_12_1_color10 =	$08
    167  10000 ????		00 0b	    g16x16_12_1_color9 =	$0b
    168  10000 ????		00 04	    g16x16_12_1_color8 =	$04
    169  10000 ????		00 01	    g16x16_12_1_color7 =	$01
    170  10000 ????		00 06	    g16x16_12_1_color6 =	$06
    171  10000 ????		00 42	    g16x16_12_1_color5 =	$42
    172  10000 ????		00 39	    g16x16_12_1_color4 =	$39
    173  10000 ????		00 3b	    g16x16_12_1_color3 =	$3b
    174  10000 ????		00 42	    g16x16_12_1_color2 =	$42
    175  10000 ????		00 36	    g16x16_12_1_color1 =	$36
    176  10000 ????		00 00	    g16x16_12_1_color0 =	$00
    177  10000 ????		00 01	    ROM48K     =	1
    178  10000 ????		00 01	    plotvalueonscreen =	1
    179  10000 ????		00 10	    ZONEHEIGHT =	16
------- FILE c:\Users\Steve\Desktop\2018dev\7800\7800basic\projects\lessons\lesson1_gfx_modes\lesson1_51.bas.asm
    285  10000 ????
    286  10000 ????						; A BEAD header gets automatically incorportated into the ROM header. 
    287  10000 ????						; For more BEAD executable info, check out the spec...
    288  10000 ????						; http://7800.8bitdev.org/index.php/The_Atari_7800_BEAD_Execuable_Specification
    289  10000 ????
    290  10000 ????		00 01	    GAMEDESCRIPTIONSET =	1
    291  10000 ????		4e 61 6d 65 GAMEDESCRIPTION =	"Test Name"
    292  10000 ????
    293  10000 ????		00 40	    BDHSC      =	%01000000
    294  10000 ????		00 20	    BDYM       =	%00100000
    295  10000 ????		00 10	    BDPOKEY    =	%00010000
    296  10000 ????		00 08	    BDROF      =	%00001000
    297  10000 ????		00 00	    BD16K      =	%00000000
    298  10000 ????		00 01	    BD32K      =	%00000001
    299  10000 ????		00 02	    BD48K      =	%00000010
    300  10000 ????		00 05	    BD1800     =	%00000101
    301  10000 ????		00 06	    BD4000     =	%00000110
    302  10000 ????
    303  10000 ????			   -	       ifconst	ROM16K
    304  10000 ????			   -BEADHEADER =	1
    305  10000 ????				       endif
    306  10000 ????			   -	       ifconst	ROM32K
    307  10000 ????			   -BEADHEADER =	1
    308  10000 ????				       endif
    309  10000 ????				       ifconst	ROM48K
    310  10000 ????		00 01	    BEADHEADER =	1
    311  10000 ????				       endif
    312  10000 ????
    313  10000 ????				       ifconst	BEADHEADER
    314  10000 ????			    BEADHARDWARE SET	0
    315  10000 ????			   -	       ifconst	ROM16K
    316  10000 ????			   -BEADHARDWARE SET	(BEADHARDWARE|BD16K)
    317  10000 ????				       endif
    318  10000 ????			   -	       ifconst	ROM32K
    319  10000 ????			   -BEADHARDWARE SET	(BEADHARDWARE|BD32K)
    320  10000 ????				       endif
    321  10000 ????				       ifconst	ROM48K
    322  10000 ????			    BEADHARDWARE SET	(BEADHARDWARE|BD48K)
    323  10000 ????				       endif
    324  10000 ????			   -	       ifconst	pokeysupport
    325  10000 ????			   -BEADHARDWARE SET	(BEADHARDWARE|BDPOKEY)
    326  10000 ????				       endif
    327  10000 ????			   -	       ifconst	HSSUPPORT
    328  10000 ????			   -BEADHARDWARE SET	(BEADHARDWARE|BDHSC)
    329  10000 ????				       endif
    330  10000 ????				       endif
    331  10000 ????
    332  10000 ????						;start address of cart...
    333  10000 ????				       ifconst	ROM48K
    334  4000					      ORG	$4000,0
    335  4000					      ifconst	BEADHEADER
    336  4000		       be ad 02 	      .byte.b	$BE,$AD,BEADHARDWARE
    337  4003					      ifconst	GAMEDESCRIPTIONSET
    338  4003		       18		      CLC
    339  4004		       90 0a		      BCC	_SKIPDESCRIPTION
    340  4006		       54 65 73 74*	      .byte.b	GAMEDESCRIPTION,0
    341  4010				   _SKIPDESCRIPTION
    342  4010					      endif
    343  4010		       6c fc ff 	      jmp	($FFFC)
    344  4013					      endif
    345  4013				  -	      else
    346  4013				  -	      ifconst	bankswitchmode
    347  4013				  -	      ifconst	ROMAT4K
    348  4013				  -	      ORG	$4000,0
    349  4013				  -	      RORG	$4000
    350  4013				  -	      else
    351  4013				  -	      ORG	$8000,0
    352  4013				  -	      RORG	$8000
    353  4013				  -	      endif
    354  4013				  -	      else		; not bankswitchmode
    355  4013				  -	      ifconst	ROM16K
    356  4013				  -	      ORG	$C000,0
    357  4013				  -	      ifconst	BEADHEADER
    358  4013				  -	      .byte	$BE,$AD,BEADHARDWARE
    359  4013				  -	      ifconst	GAMEDESCRIPTION
    360  4013				  -	      CLC
    361  4013				  -	      BCC	_SKIPDESCRIPTION
    362  4013				  -	      .byte	GAMEDESCRIPTION,0
    363  4013				  -_SKIPDESCRIPTION
    364  4013				  -	      endif
    365  4013				  -	      jmp	($FFFC)
    366  4013				  -	      endif
    367  4013				  -	      else
    368  4013				  -	      ifconst	ROM8K
    369  4013				  -	      ORG	$E000,0
    370  4013				  -	      else
    371  4013				  -	      ORG	$8000,0
    372  4013				  -	      ifconst	BEADHEADER
    373  4013				  -	      .byte	$BE,$AD,BEADHARDWARE
    374  4013				  -	      ifconst	GAMEDESCRIPTION
    375  4013				  -	      CLC
    376  4013				  -	      BCC	_SKIPDESCRIPTION
    377  4013				  -	      .byte	GAMEDESCRIPTION,0
    378  4013				  -_SKIPDESCRIPTION
    379  4013				  -	      endif
    380  4013				  -	      jmp	($FFFC)
    381  4013				  -	      endif
    382  4013				  -	      endif
    383  4013				  -	      endif
    384  4013				  -	      endif
    385  4013					      endif
    386  4013
    387  4013				   game
    388  4013				   .L00 		;;  set zoneheight 16
    389  4013
    390  4013				   .L01 		;;  displaymode 160B
    391  4013
    392  4013		       a9 40		      lda	#%01000000	;Enable DMA, mode=160x2/160x4
    393  4015		       85 3c		      sta	CTRL
    394  4017
    395  4017		       8d 07 21 	      sta	sCTRL
    396  401a
    397  401a				   .L02 		;;  set plotvalueonscreen on
    398  401a
    399  401a				   .L03 		;;  set romsize 48k
    400  401a
    401  401a				   .
    402  401a							;; 
    403  401a
    404  401a				   .L04 		;;  incgraphic g16x16_12_1.png 160B 0 3 4 7 6 8 5 9 10 11 12 1 2 
    405  401a
    406  401a				   .L05 		;;  incgraphic g16x16_12_2.png 160B 0 1 2 3 5 6 7 9 10 11 13 14 15 
    407  401a
    408  401a				   .L06 		;;  incgraphic g16x16_4color.png 160A
    409  401a
    410  401a				   .L07 		;;  incgraphic g16x16_4color2.png 160A
    411  401a
    412  401a				   .L08 		;;  incgraphic g16x16_4color3.png 160A
    413  401a
    414  401a				   .L09 		;;  incgraphic g16x16_4color4.png 160A 
    415  401a
    416  401a				   .L010		;;  incgraphic g16x16_4color5.png 160A
    417  401a
    418  401a				   .L011		;;  incgraphic g16x16_4color6.png 160A
    419  401a
    420  401a				   .L012		;;  incgraphic g16x16_4color7.png 160A
    421  401a
    422  401a				   .L013		;;  incgraphic g16x16_4color8.png 160A 
    423  401a
    424  401a				   .L014		;;  incgraphic zonebg80x16_16.png 160A
    425  401a
    426  401a				   .L015		;;  incgraphic ex1.png 160A
    427  401a
    428  401a				   .L016		;;  incgraphic ex2.png 160A
    429  401a
    430  401a				   .L017		;;  incgraphic ex3.png 160A
    431  401a
    432  401a				   .L018		;;  incgraphic ex4.png 160A
    433  401a
    434  401a				   .L019		;;  incgraphic ex5.png 160A
    435  401a
    436  401a				   .L020		;;  incgraphic ex6.png 160A
    437  401a
    438  401a				   .L021		;;  incgraphic ex7.png 160A
    439  401a
    440  401a				   .L022		;;  incgraphic p1.png 160A
    441  401a
    442  401a				   .L023		;;  incgraphic blank.png 160A
    443  401a
    444  401a				   .
    445  401a							;; 
    446  401a
    447  401a				   .L024		;;  incgraphic font.png 160A 
    448  401a
    449  401a				   .
    450  401a							;; 
    451  401a
    452  401a				   .L025		;;  rem font
    453  401a
    454  401a				   .L026		;;  alphachars '0123456789abcdefghijklmnopqrstuvwxyz>`?!/.,-_()[]&AB '
    455  401a
    456  401a				   .L027		;;  characterset font
    457  401a
    458  401a		       a9 e0		      lda	#>font
    459  401c		       85 34		      sta	CHARBASE
    460  401e		       8d 0b 21 	      sta	sCHARBASE
    461  4021
    462  4021		       a9 60		      lda	#(font_mode | %01100000)
    463  4023		       8d 06 21 	      sta	charactermode
    464  4026
    465  4026				   .L028		;;  rem $02 $03 $05 $06 $07 $09 $0b $40 $32 $35 $38 $3B
    466  4026
    467  4026				   .L029		;;  rem blue
    468  4026
    469  4026				   .L030		;;  P0C1 = $58
    470  4026
    471  4026		       a9 58		      LDA	#$58
    472  4028		       85 21		      STA	P0C1
    473  402a				   .L031		;;  P0C2 = $03
    474  402a
    475  402a		       a9 03		      LDA	#$03
    476  402c		       85 22		      STA	P0C2
    477  402e				   .L032		;;  P0C3 = $05
    478  402e
    479  402e		       a9 05		      LDA	#$05
    480  4030		       85 23		      STA	P0C3
    481  4032				   .L033		;;  rem red
    482  4032
    483  4032				   .L034		;;  P1C1 = $06
    484  4032
    485  4032		       a9 06		      LDA	#$06
    486  4034		       85 25		      STA	P1C1
    487  4036				   .L035		;;  P1C2 = $07
    488  4036
    489  4036		       a9 07		      LDA	#$07
    490  4038		       85 26		      STA	P1C2
    491  403a				   .L036		;;  P1C3 = $09
    492  403a
    493  403a		       a9 09		      LDA	#$09
    494  403c		       85 27		      STA	P1C3
    495  403e				   .L037		;;  rem green
    496  403e
    497  403e				   .L038		;;  P2C1 = $0B
    498  403e
    499  403e		       a9 0b		      LDA	#$0B
    500  4040		       85 29		      STA	P2C1
    501  4042				   .L039		;;  P2C2 = $40
    502  4042
    503  4042		       a9 40		      LDA	#$40
    504  4044		       85 2a		      STA	P2C2
    505  4046				   .L040		;;  P2C3 = $32
    506  4046
    507  4046		       a9 32		      LDA	#$32
    508  4048		       85 2b		      STA	P2C3
    509  404a				   .L041		;;  rem purple
    510  404a
    511  404a				   .L042		;;  P3C1 = $35
    512  404a
    513  404a		       a9 35		      LDA	#$35
    514  404c		       85 2d		      STA	P3C1
    515  404e				   .L043		;;  P3C2 = $38
    516  404e
    517  404e		       a9 38		      LDA	#$38
    518  4050		       85 2e		      STA	P3C2
    519  4052				   .L044		;;  P3C3 = $3B
    520  4052
    521  4052		       a9 3b		      LDA	#$3B
    522  4054		       85 2f		      STA	P3C3
    523  4056				   .L045		;;  rem orange
    524  4056
    525  4056				   .L046		;;  P4C1 = $35
    526  4056
    527  4056		       a9 35		      LDA	#$35
    528  4058		       85 31		      STA	P4C1
    529  405a				   .L047		;;  P4C2 = $38
    530  405a
    531  405a		       a9 38		      LDA	#$38
    532  405c		       85 32		      STA	P4C2
    533  405e				   .L048		;;  P4C3 = $3C
    534  405e
    535  405e		       a9 3c		      LDA	#$3C
    536  4060		       85 33		      STA	P4C3
    537  4062				   .L049		;;  rem yellow
    538  4062
    539  4062				   .L050		;;  P5C1 = $15
    540  4062
    541  4062		       a9 15		      LDA	#$15
    542  4064		       85 35		      STA	P5C1
    543  4066				   .L051		;;  P5C2 = $1A
    544  4066
    545  4066		       a9 1a		      LDA	#$1A
    546  4068		       85 36		      STA	P5C2
    547  406a				   .L052		;;  P5C3 = $1E
    548  406a
    549  406a		       a9 1e		      LDA	#$1E
    550  406c		       85 37		      STA	P5C3
    551  406e				   .L053		;;  rem teal
    552  406e
    553  406e				   .L054		;;  P6C1 = $A1
    554  406e
    555  406e		       a9 a1		      LDA	#$A1
    556  4070		       85 39		      STA	P6C1
    557  4072				   .L055		;;  P6C2 = $A6
    558  4072
    559  4072		       a9 a6		      LDA	#$A6
    560  4074		       85 3a		      STA	P6C2
    561  4076				   .L056		;;  P6C3 = $Ac
    562  4076
    563  4076		       a9 ac		      LDA	#$Ac
    564  4078		       85 3b		      STA	P6C3
    565  407a				   .L057		;;  rem white
    566  407a
    567  407a				   .L058		;;  P7C1 = $0F
    568  407a
    569  407a		       a9 0f		      LDA	#$0F
    570  407c		       85 3d		      STA	P7C1
    571  407e				   .L059		;;  P7C2 = $05
    572  407e
    573  407e		       a9 05		      LDA	#$05
    574  4080		       85 3e		      STA	P7C2
    575  4082				   .L060		;;  P7C3 = $09
    576  4082
    577  4082		       a9 09		      LDA	#$09
    578  4084		       85 3f		      STA	P7C3
    579  4086				   .
    580  4086							;; 
    581  4086
    582  4086				   .L061		;;  dim bg  =	var1
    583  4086
    584  4086				   .L062		;;  dim db  =	var2
    585  4086
    586  4086				   .L063		;;  dim an  =	var3
    587  4086
    588  4086				   .L064		;;  dim ex  =	var4
    589  4086
    590  4086				   .L065		;;  dim wrap  =  var5
    591  4086
    592  4086				   .
    593  4086							;; 
    594  4086
    595  4086				   .L066		;;  bg  =  0
    596  4086
    597  4086		       a9 00		      LDA	#0
    598  4088		       8d 41 01 	      STA	bg
    599  408b				   .L067		;;  db  =  0
    600  408b
    601  408b		       a9 00		      LDA	#0
    602  408d		       8d 42 01 	      STA	db
    603  4090				   .L068		;;  an  =  0
    604  4090
    605  4090		       a9 00		      LDA	#0
    606  4092		       8d 43 01 	      STA	an
    607  4095				   .L069		;;  ex  =  0
    608  4095
    609  4095		       a9 00		      LDA	#0
    610  4097		       8d 44 01 	      STA	ex
    611  409a				   .L070		;;  wrap  =  0
    612  409a
    613  409a		       a9 00		      LDA	#0
    614  409c		       8d 45 01 	      STA	wrap
    615  409f				   .
    616  409f							;; 
    617  409f
    618  409f				   .L071		;;  w	=  0
    619  409f
    620  409f		       a9 00		      LDA	#0
    621  40a1		       85 fc		      STA	w
    622  40a3				   .L072		;;  z	=  0
    623  40a3
    624  40a3		       a9 00		      LDA	#0
    625  40a5		       85 ff		      STA	z
    626  40a7				   .
    627  40a7							;; 
    628  40a7
    629  40a7				   ._title
    630  40a7							;; _title
    631  40a7
    632  40a7				   .L073		;;  clearscreen
    633  40a7
    634  40a7		       20 77 f0 	      jsr	clearscreen
    635  40aa				   .L074		;;  plotchars 'demo^1' 7 67 3 1
    636  40aa
    637  40aa		       4c b3 40 	      JMP	skipalphadata0
    638  40ad				   alphadata0
    639  40ad		       73		      .byte.b	(<font + $0d)
    640  40ae		       74		      .byte.b	(<font + $0e)
    641  40af		       7c		      .byte.b	(<font + $16)
    642  40b0		       7e		      .byte.b	(<font + $18)
    643  40b1		       9a		      .byte.b	(<font + $34)
    644  40b2		       67		      .byte.b	(<font + $01)
    645  40b3				   skipalphadata0
    646  40b3		       a9 ad		      lda	#<alphadata0
    647  40b5		       85 42		      sta	temp1
    648  40b7
    649  40b7		       a9 40		      lda	#>alphadata0
    650  40b9		       85 43		      sta	temp2
    651  40bb
    652  40bb		       a9 1a		      lda	#26	; width in two's complement
    653  40bd		       09 e0		      ora	#224	; palette left shifted 5 bits
    654  40bf		       85 44		      sta	temp3
    655  40c1		       a9 43		      lda	#67
    656  40c3		       85 45		      sta	temp4
    657  40c5
    658  40c5		       a9 03		      lda	#3
    659  40c7		       85 46		      sta	temp5
    660  40c9
    661  40c9		       20 67 f3 	      jsr	plotcharacters
    662  40cc				   .L075		;;  plotchars 'atari^7800^basic^exploration' 1 23 5 1
    663  40cc
    664  40cc		       4c eb 40 	      JMP	skipalphadata1
    665  40cf				   alphadata1
    666  40cf		       70		      .byte.b	(<font + $0a)
    667  40d0		       83		      .byte.b	(<font + $1d)
    668  40d1		       70		      .byte.b	(<font + $0a)
    669  40d2		       81		      .byte.b	(<font + $1b)
    670  40d3		       78		      .byte.b	(<font + $12)
    671  40d4		       9a		      .byte.b	(<font + $34)
    672  40d5		       6d		      .byte.b	(<font + $07)
    673  40d6		       6e		      .byte.b	(<font + $08)
    674  40d7		       66		      .byte.b	(<font + $00)
    675  40d8		       66		      .byte.b	(<font + $00)
    676  40d9		       9a		      .byte.b	(<font + $34)
    677  40da		       71		      .byte.b	(<font + $0b)
    678  40db		       70		      .byte.b	(<font + $0a)
    679  40dc		       82		      .byte.b	(<font + $1c)
    680  40dd		       78		      .byte.b	(<font + $12)
    681  40de		       72		      .byte.b	(<font + $0c)
    682  40df		       9a		      .byte.b	(<font + $34)
    683  40e0		       74		      .byte.b	(<font + $0e)
    684  40e1		       87		      .byte.b	(<font + $21)
    685  40e2		       7f		      .byte.b	(<font + $19)
    686  40e3		       7b		      .byte.b	(<font + $15)
    687  40e4		       7e		      .byte.b	(<font + $18)
    688  40e5		       81		      .byte.b	(<font + $1b)
    689  40e6		       70		      .byte.b	(<font + $0a)
    690  40e7		       83		      .byte.b	(<font + $1d)
    691  40e8		       78		      .byte.b	(<font + $12)
    692  40e9		       7e		      .byte.b	(<font + $18)
    693  40ea		       7d		      .byte.b	(<font + $17)
    694  40eb				   skipalphadata1
    695  40eb		       a9 cf		      lda	#<alphadata1
    696  40ed		       85 42		      sta	temp1
    697  40ef
    698  40ef		       a9 40		      lda	#>alphadata1
    699  40f1		       85 43		      sta	temp2
    700  40f3
    701  40f3		       a9 04		      lda	#4	; width in two's complement
    702  40f5		       09 20		      ora	#32	; palette left shifted 5 bits
    703  40f7		       85 44		      sta	temp3
    704  40f9		       a9 17		      lda	#23
    705  40fb		       85 45		      sta	temp4
    706  40fd
    707  40fd		       a9 05		      lda	#5
    708  40ff		       85 46		      sta	temp5
    709  4101
    710  4101		       20 67 f3 	      jsr	plotcharacters
    711  4104				   .L076		;;  plotchars '160b^zoneheight^16' 7 47 7 1
    712  4104
    713  4104		       4c 19 41 	      JMP	skipalphadata2
    714  4107				   alphadata2
    715  4107		       67		      .byte.b	(<font + $01)
    716  4108		       6c		      .byte.b	(<font + $06)
    717  4109		       66		      .byte.b	(<font + $00)
    718  410a		       71		      .byte.b	(<font + $0b)
    719  410b		       9a		      .byte.b	(<font + $34)
    720  410c		       89		      .byte.b	(<font + $23)
    721  410d		       7e		      .byte.b	(<font + $18)
    722  410e		       7d		      .byte.b	(<font + $17)
    723  410f		       74		      .byte.b	(<font + $0e)
    724  4110		       77		      .byte.b	(<font + $11)
    725  4111		       74		      .byte.b	(<font + $0e)
    726  4112		       78		      .byte.b	(<font + $12)
    727  4113		       76		      .byte.b	(<font + $10)
    728  4114		       77		      .byte.b	(<font + $11)
    729  4115		       83		      .byte.b	(<font + $1d)
    730  4116		       9a		      .byte.b	(<font + $34)
    731  4117		       67		      .byte.b	(<font + $01)
    732  4118		       6c		      .byte.b	(<font + $06)
    733  4119				   skipalphadata2
    734  4119		       a9 07		      lda	#<alphadata2
    735  411b		       85 42		      sta	temp1
    736  411d
    737  411d		       a9 41		      lda	#>alphadata2
    738  411f		       85 43		      sta	temp2
    739  4121
    740  4121		       a9 0e		      lda	#14	; width in two's complement
    741  4123		       09 e0		      ora	#224	; palette left shifted 5 bits
    742  4125		       85 44		      sta	temp3
    743  4127		       a9 2f		      lda	#47
    744  4129		       85 45		      sta	temp4
    745  412b
    746  412b		       a9 07		      lda	#7
    747  412d		       85 46		      sta	temp5
    748  412f
    749  412f		       20 67 f3 	      jsr	plotcharacters
    750  4132				   .L077		;;  if w  >  8  &&  joy0fire then w  =  0  :  goto _screen2_init
    751  4132
    752  4132		       a9 08		      LDA	#8
    753  4134		       c5 fc		      CMP	w
    754  4136		       b0 0c		      BCS	.skipL077
    755  4138				   .condpart0
    756  4138		       2c 02 21 	      bit	sINPT1
    757  413b		       10 07		      BPL	.skip0then
    758  413d				   .condpart1
    759  413d		       a9 00		      LDA	#0
    760  413f		       85 fc		      STA	w
    761  4141		       4c 51 41 	      jmp	._screen2_init
    762  4144
    763  4144				   .skip0then
    764  4144				   .skipL077
    765  4144				   .L078		;;  w	=  w  +  1
    766  4144
    767  4144		       a5 fc		      LDA	w
    768  4146		       18		      CLC
    769  4147		       69 01		      ADC	#1
    770  4149		       85 fc		      STA	w
    771  414b				   .L079		;;  drawscreen
    772  414b
    773  414b		       20 b3 f0 	      jsr	drawscreen
    774  414e				   .L080		;;  goto _title
    775  414e
    776  414e		       4c a7 40 	      jmp	._title
    777  4151
    778  4151				   .
    779  4151							;; 
    780  4151
    781  4151				   .L081		;;  rem background with no animation or doublebuffering
    782  4151
    783  4151				   ._screen2_init
    784  4151							;; _screen2_init
    785  4151
    786  4151				   .L082		;;  bg  =  1
    787  4151
    788  4151		       a9 01		      LDA	#1
    789  4153		       8d 41 01 	      STA	bg
    790  4156				   .L083		;;  db  =  0
    791  4156
    792  4156		       a9 00		      LDA	#0
    793  4158		       8d 42 01 	      STA	db
    794  415b				   .L084		;;  an  =  0
    795  415b
    796  415b		       a9 00		      LDA	#0
    797  415d		       8d 43 01 	      STA	an
    798  4160				   .L085		;;  w	=  0
    799  4160
    800  4160		       a9 00		      LDA	#0
    801  4162		       85 fc		      STA	w
    802  4164				   .L086		;;  gosub _screen_setup
    803  4164
    804  4164		       20 c9 42 	      jsr	._screen_setup
    805  4167
    806  4167				   ._screen2_loop
    807  4167							;; _screen2_loop
    808  4167
    809  4167				   .L087		;;  gosub _screen
    810  4167
    811  4167		       20 fb 42 	      jsr	._screen
    812  416a
    813  416a				   .L088		;;  if w  >  8  &&  joy0fire then w  =  0  :  goto _screen3_init
    814  416a
    815  416a		       a9 08		      LDA	#8
    816  416c		       c5 fc		      CMP	w
    817  416e		       b0 0c		      BCS	.skipL088
    818  4170				   .condpart2
    819  4170		       2c 02 21 	      bit	sINPT1
    820  4173		       10 07		      BPL	.skip2then
    821  4175				   .condpart3
    822  4175		       a9 00		      LDA	#0
    823  4177		       85 fc		      STA	w
    824  4179		       4c 86 41 	      jmp	._screen3_init
    825  417c
    826  417c				   .skip2then
    827  417c				   .skipL088
    828  417c				   .L089		;;  w	=  w  +  1
    829  417c
    830  417c		       a5 fc		      LDA	w
    831  417e		       18		      CLC
    832  417f		       69 01		      ADC	#1
    833  4181		       85 fc		      STA	w
    834  4183				   .L090		;;  goto _screen2_loop
    835  4183
    836  4183		       4c 67 41 	      jmp	._screen2_loop
    837  4186
    838  4186				   .
    839  4186							;; 
    840  4186
    841  4186				   .L091		;;  rem no background with no animation or doublebuffering
    842  4186
    843  4186				   ._screen3_init
    844  4186							;; _screen3_init
    845  4186
    846  4186				   .L092		;;  bg  =  0
    847  4186
    848  4186		       a9 00		      LDA	#0
    849  4188		       8d 41 01 	      STA	bg
    850  418b				   .L093		;;  db  =  0
    851  418b
    852  418b		       a9 00		      LDA	#0
    853  418d		       8d 42 01 	      STA	db
    854  4190				   .L094		;;  an  =  0
    855  4190
    856  4190		       a9 00		      LDA	#0
    857  4192		       8d 43 01 	      STA	an
    858  4195				   .L095		;;  w	=  0
    859  4195
    860  4195		       a9 00		      LDA	#0
    861  4197		       85 fc		      STA	w
    862  4199				   .L096		;;  gosub _screen_setup
    863  4199
    864  4199		       20 c9 42 	      jsr	._screen_setup
    865  419c
    866  419c				   ._screen3_loop
    867  419c							;; _screen3_loop
    868  419c
    869  419c				   .L097		;;  gosub _screen
    870  419c
    871  419c		       20 fb 42 	      jsr	._screen
    872  419f
    873  419f				   .L098		;;  if w  >  8  &&  joy0fire then w  =  0  :  goto _screen4_init
    874  419f
    875  419f		       a9 08		      LDA	#8
    876  41a1		       c5 fc		      CMP	w
    877  41a3		       b0 0c		      BCS	.skipL098
    878  41a5				   .condpart4
    879  41a5		       2c 02 21 	      bit	sINPT1
    880  41a8		       10 07		      BPL	.skip4then
    881  41aa				   .condpart5
    882  41aa		       a9 00		      LDA	#0
    883  41ac		       85 fc		      STA	w
    884  41ae		       4c bb 41 	      jmp	._screen4_init
    885  41b1
    886  41b1				   .skip4then
    887  41b1				   .skipL098
    888  41b1				   .L099		;;  w	=  w  +  1
    889  41b1
    890  41b1		       a5 fc		      LDA	w
    891  41b3		       18		      CLC
    892  41b4		       69 01		      ADC	#1
    893  41b6		       85 fc		      STA	w
    894  41b8				   .L0100		;;  goto _screen3_loop
    895  41b8
    896  41b8		       4c 9c 41 	      jmp	._screen3_loop
    897  41bb
    898  41bb				   .
    899  41bb							;; 
    900  41bb
    901  41bb				   .L0101		;;  rem no background with  animation and no doublebuffering
    902  41bb
    903  41bb				   ._screen4_init
    904  41bb							;; _screen4_init
    905  41bb
    906  41bb				   .L0102		;;  bg  =  0
    907  41bb
    908  41bb		       a9 00		      LDA	#0
    909  41bd		       8d 41 01 	      STA	bg
    910  41c0				   .L0103		;;  db  =  0
    911  41c0
    912  41c0		       a9 00		      LDA	#0
    913  41c2		       8d 42 01 	      STA	db
    914  41c5				   .L0104		;;  an  =  1
    915  41c5
    916  41c5		       a9 01		      LDA	#1
    917  41c7		       8d 43 01 	      STA	an
    918  41ca				   .L0105		;;  w	=  0
    919  41ca
    920  41ca		       a9 00		      LDA	#0
    921  41cc		       85 fc		      STA	w
    922  41ce				   .L0106		;;  gosub _screen_setup
    923  41ce
    924  41ce		       20 c9 42 	      jsr	._screen_setup
    925  41d1
    926  41d1				   ._screen4_loop
    927  41d1							;; _screen4_loop
    928  41d1
    929  41d1				   .L0107		;;  gosub _screen
    930  41d1
    931  41d1		       20 fb 42 	      jsr	._screen
    932  41d4
    933  41d4				   .L0108		;;  if w  >  8  &&  joy0fire then w  =  0  :  goto _screen5_init
    934  41d4
    935  41d4		       a9 08		      LDA	#8
    936  41d6		       c5 fc		      CMP	w
    937  41d8		       b0 0c		      BCS	.skipL0108
    938  41da				   .condpart6
    939  41da		       2c 02 21 	      bit	sINPT1
    940  41dd		       10 07		      BPL	.skip6then
    941  41df				   .condpart7
    942  41df		       a9 00		      LDA	#0
    943  41e1		       85 fc		      STA	w
    944  41e3		       4c f0 41 	      jmp	._screen5_init
    945  41e6
    946  41e6				   .skip6then
    947  41e6				   .skipL0108
    948  41e6				   .L0109		;;  w	=  w  +  1
    949  41e6
    950  41e6		       a5 fc		      LDA	w
    951  41e8		       18		      CLC
    952  41e9		       69 01		      ADC	#1
    953  41eb		       85 fc		      STA	w
    954  41ed				   .L0110		;;  goto _screen4_loop
    955  41ed
    956  41ed		       4c d1 41 	      jmp	._screen4_loop
    957  41f0
    958  41f0				   .
    959  41f0							;; 
    960  41f0
    961  41f0				   .L0111		;;  rem with background with animation and no doublebuffering
    962  41f0
    963  41f0				   ._screen5_init
    964  41f0							;; _screen5_init
    965  41f0
    966  41f0				   .L0112		;;  bg  =  1
    967  41f0
    968  41f0		       a9 01		      LDA	#1
    969  41f2		       8d 41 01 	      STA	bg
    970  41f5				   .L0113		;;  db  =  0
    971  41f5
    972  41f5		       a9 00		      LDA	#0
    973  41f7		       8d 42 01 	      STA	db
    974  41fa				   .L0114		;;  an  =  1
    975  41fa
    976  41fa		       a9 01		      LDA	#1
    977  41fc		       8d 43 01 	      STA	an
    978  41ff				   .L0115		;;  w	=  0
    979  41ff
    980  41ff		       a9 00		      LDA	#0
    981  4201		       85 fc		      STA	w
    982  4203				   .L0116		;;  gosub _screen_setup
    983  4203
    984  4203		       20 c9 42 	      jsr	._screen_setup
    985  4206
    986  4206				   ._screen5_loop
    987  4206							;; _screen5_loop
    988  4206
    989  4206				   .L0117		;;  gosub _screen
    990  4206
    991  4206		       20 fb 42 	      jsr	._screen
    992  4209
    993  4209				   .L0118		;;  if w  >  8  &&  joy0fire then w  =  0  :  goto _screen6_init
    994  4209
    995  4209		       a9 08		      LDA	#8
    996  420b		       c5 fc		      CMP	w
    997  420d		       b0 0c		      BCS	.skipL0118
    998  420f				   .condpart8
    999  420f		       2c 02 21 	      bit	sINPT1
   1000  4212		       10 07		      BPL	.skip8then
   1001  4214				   .condpart9
   1002  4214		       a9 00		      LDA	#0
   1003  4216		       85 fc		      STA	w
   1004  4218		       4c 25 42 	      jmp	._screen6_init
   1005  421b
   1006  421b				   .skip8then
   1007  421b				   .skipL0118
   1008  421b				   .L0119		;;  w	=  w  +  1
   1009  421b
   1010  421b		       a5 fc		      LDA	w
   1011  421d		       18		      CLC
   1012  421e		       69 01		      ADC	#1
   1013  4220		       85 fc		      STA	w
   1014  4222				   .L0120		;;  goto _screen5_loop
   1015  4222
   1016  4222		       4c 06 42 	      jmp	._screen5_loop
   1017  4225
   1018  4225				   .
   1019  4225							;; 
   1020  4225
   1021  4225				   .L0121		;;  rem with no background with animation and with doublebuffering
   1022  4225
   1023  4225				   ._screen6_init
   1024  4225							;; _screen6_init
   1025  4225
   1026  4225				   .L0122		;;  bg  =  0
   1027  4225
   1028  4225		       a9 00		      LDA	#0
   1029  4227		       8d 41 01 	      STA	bg
   1030  422a				   .L0123		;;  db  =  1
   1031  422a
   1032  422a		       a9 01		      LDA	#1
   1033  422c		       8d 42 01 	      STA	db
   1034  422f				   .L0124		;;  an  =  1
   1035  422f
   1036  422f		       a9 01		      LDA	#1
   1037  4231		       8d 43 01 	      STA	an
   1038  4234				   .L0125		;;  w	=  0
   1039  4234
   1040  4234		       a9 00		      LDA	#0
   1041  4236		       85 fc		      STA	w
   1042  4238				   .L0126		;;  gosub _screen_setup
   1043  4238
   1044  4238		       20 c9 42 	      jsr	._screen_setup
   1045  423b
   1046  423b				   ._screen6_loop
   1047  423b							;; _screen6_loop
   1048  423b
   1049  423b				   .L0127		;;  gosub _screen
   1050  423b
   1051  423b		       20 fb 42 	      jsr	._screen
   1052  423e
   1053  423e				   .L0128		;;  if w  >  8  &&  joy0fire then w  =  0  :  goto _screen7_init
   1054  423e
   1055  423e		       a9 08		      LDA	#8
   1056  4240		       c5 fc		      CMP	w
   1057  4242		       b0 0c		      BCS	.skipL0128
   1058  4244				   .condpart10
   1059  4244		       2c 02 21 	      bit	sINPT1
   1060  4247		       10 07		      BPL	.skip10then
   1061  4249				   .condpart11
   1062  4249		       a9 00		      LDA	#0
   1063  424b		       85 fc		      STA	w
   1064  424d		       4c 5a 42 	      jmp	._screen7_init
   1065  4250
   1066  4250				   .skip10then
   1067  4250				   .skipL0128
   1068  4250				   .L0129		;;  w	=  w  +  1
   1069  4250
   1070  4250		       a5 fc		      LDA	w
   1071  4252		       18		      CLC
   1072  4253		       69 01		      ADC	#1
   1073  4255		       85 fc		      STA	w
   1074  4257				   .L0130		;;  goto _screen6_loop
   1075  4257
   1076  4257		       4c 3b 42 	      jmp	._screen6_loop
   1077  425a
   1078  425a				   .
   1079  425a							;; 
   1080  425a
   1081  425a				   .L0131		;;  rem with background with animation and with doublebuffering
   1082  425a
   1083  425a				   ._screen7_init
   1084  425a							;; _screen7_init
   1085  425a
   1086  425a				   .L0132		;;  bg  =  1
   1087  425a
   1088  425a		       a9 01		      LDA	#1
   1089  425c		       8d 41 01 	      STA	bg
   1090  425f				   .L0133		;;  db  =  1
   1091  425f
   1092  425f		       a9 01		      LDA	#1
   1093  4261		       8d 42 01 	      STA	db
   1094  4264				   .L0134		;;  an  =  1
   1095  4264
   1096  4264		       a9 01		      LDA	#1
   1097  4266		       8d 43 01 	      STA	an
   1098  4269				   .L0135		;;  w	=  0
   1099  4269
   1100  4269		       a9 00		      LDA	#0
   1101  426b		       85 fc		      STA	w
   1102  426d				   .L0136		;;  gosub _screen_setup
   1103  426d
   1104  426d		       20 c9 42 	      jsr	._screen_setup
   1105  4270
   1106  4270				   ._screen7_loop
   1107  4270							;; _screen7_loop
   1108  4270
   1109  4270				   .L0137		;;  gosub _screen
   1110  4270
   1111  4270		       20 fb 42 	      jsr	._screen
   1112  4273
   1113  4273				   .L0138		;;  if w  >  8  &&  joy0fire then w  =  0  :  goto _screen8_init
   1114  4273
   1115  4273		       a9 08		      LDA	#8
   1116  4275		       c5 fc		      CMP	w
   1117  4277		       b0 0c		      BCS	.skipL0138
   1118  4279				   .condpart12
   1119  4279		       2c 02 21 	      bit	sINPT1
   1120  427c		       10 07		      BPL	.skip12then
   1121  427e				   .condpart13
   1122  427e		       a9 00		      LDA	#0
   1123  4280		       85 fc		      STA	w
   1124  4282		       4c 8f 42 	      jmp	._screen8_init
   1125  4285
   1126  4285				   .skip12then
   1127  4285				   .skipL0138
   1128  4285				   .L0139		;;  w	=  w  +  1
   1129  4285
   1130  4285		       a5 fc		      LDA	w
   1131  4287		       18		      CLC
   1132  4288		       69 01		      ADC	#1
   1133  428a		       85 fc		      STA	w
   1134  428c				   .L0140		;;  goto _screen7_loop
   1135  428c
   1136  428c		       4c 70 42 	      jmp	._screen7_loop
   1137  428f
   1138  428f				   .
   1139  428f							;; 
   1140  428f
   1141  428f				   ._screen8_init
   1142  428f							;; _screen8_init
   1143  428f
   1144  428f				   .L0141		;;  bg  =  1
   1145  428f
   1146  428f		       a9 01		      LDA	#1
   1147  4291		       8d 41 01 	      STA	bg
   1148  4294				   .L0142		;;  db  =  1
   1149  4294
   1150  4294		       a9 01		      LDA	#1
   1151  4296		       8d 42 01 	      STA	db
   1152  4299				   .L0143		;;  an  =  1
   1153  4299
   1154  4299		       a9 01		      LDA	#1
   1155  429b		       8d 43 01 	      STA	an
   1156  429e				   .L0144		;;  ex  =  1
   1157  429e
   1158  429e		       a9 01		      LDA	#1
   1159  42a0		       8d 44 01 	      STA	ex
   1160  42a3				   .L0145		;;  w	=  0
   1161  42a3
   1162  42a3		       a9 00		      LDA	#0
   1163  42a5		       85 fc		      STA	w
   1164  42a7				   .L0146		;;  gosub _screen_setup
   1165  42a7
   1166  42a7		       20 c9 42 	      jsr	._screen_setup
   1167  42aa
   1168  42aa				   ._screen8_loop
   1169  42aa							;; _screen8_loop
   1170  42aa
   1171  42aa				   .L0147		;;  gosub _screen
   1172  42aa
   1173  42aa		       20 fb 42 	      jsr	._screen
   1174  42ad
   1175  42ad				   .L0148		;;  if w  >  8  &&  joy0fire then w  =  0  :  goto _screen2_init
   1176  42ad
   1177  42ad		       a9 08		      LDA	#8
   1178  42af		       c5 fc		      CMP	w
   1179  42b1		       b0 0c		      BCS	.skipL0148
   1180  42b3				   .condpart14
   1181  42b3		       2c 02 21 	      bit	sINPT1
   1182  42b6		       10 07		      BPL	.skip14then
   1183  42b8				   .condpart15
   1184  42b8		       a9 00		      LDA	#0
   1185  42ba		       85 fc		      STA	w
   1186  42bc		       4c 51 41 	      jmp	._screen2_init
   1187  42bf
   1188  42bf				   .skip14then
   1189  42bf				   .skipL0148
   1190  42bf				   .L0149		;;  w	=  w  +  1
   1191  42bf
   1192  42bf		       a5 fc		      LDA	w
   1193  42c1		       18		      CLC
   1194  42c2		       69 01		      ADC	#1
   1195  42c4		       85 fc		      STA	w
   1196  42c6				   .L0150		;;  goto _screen8_loop
   1197  42c6
   1198  42c6		       4c aa 42 	      jmp	._screen8_loop
   1199  42c9
   1200  42c9				   .
   1201  42c9							;; 
   1202  42c9
   1203  42c9				   .L0151		;;  rem set-up screen vars
   1204  42c9
   1205  42c9				   ._screen_setup
   1206  42c9							;; _screen_setup
   1207  42c9
   1208  42c9				   .L0152		;;  clearscreen
   1209  42c9
   1210  42c9		       20 77 f0 	      jsr	clearscreen
   1211  42cc				   .L0153		;;  if db then doublebuffer on
   1212  42cc
   1213  42cc		       ad 42 01 	      LDA	db
   1214  42cf		       f0 04		      BEQ	.skipL0153
   1215  42d1				   .condpart16
   1216  42d1		       a9 01		      lda	#1
   1217  42d3		       85 d5		      sta	doublebufferstate
   1218  42d5				   .skipL0153
   1219  42d5				   .L0154		;;  if !db then doublebuffer off
   1220  42d5
   1221  42d5		       ad 42 01 	      LDA	db
   1222  42d8		       d0 03		      BNE	.skipL0154
   1223  42da				   .condpart17
   1224  42da		       20 13 f6 	      jsr	doublebufferoff
   1225  42dd				   .skipL0154
   1226  42dd				   .L0155		;;  if bg then gosub drawZoneBG
   1227  42dd
   1228  42dd		       ad 41 01 	      LDA	bg
   1229  42e0		       f0 03		      BEQ	.skipL0155
   1230  42e2				   .condpart18
   1231  42e2		       20 de 45 	      jsr	.drawZoneBG
   1232  42e5
   1233  42e5				   .skipL0155
   1234  42e5				   .L0156		;;  m	=  0
   1235  42e5
   1236  42e5		       a9 00		      LDA	#0
   1237  42e7		       85 f2		      STA	m
   1238  42e9				   .L0157		;;  n	=  0
   1239  42e9
   1240  42e9		       a9 00		      LDA	#0
   1241  42eb		       85 f3		      STA	n
   1242  42ed				   .L0158		;;  c	=  0
   1243  42ed
   1244  42ed		       a9 00		      LDA	#0
   1245  42ef		       85 e8		      STA	c
   1246  42f1				   .L0159		;;  f	=  0
   1247  42f1
   1248  42f1		       a9 00		      LDA	#0
   1249  42f3		       85 eb		      STA	f
   1250  42f5				   .L0160		;;  wrap  =  0
   1251  42f5
   1252  42f5		       a9 00		      LDA	#0
   1253  42f7		       8d 45 01 	      STA	wrap
   1254  42fa				   .L0161		;;  return
   1255  42fa
   1256  42fa		       60		      RTS
   1257  42fb				   .
   1258  42fb							;; 
   1259  42fb
   1260  42fb				   .L0162		;;  rem draw screen
   1261  42fb
   1262  42fb				   ._screen
   1263  42fb							;; _screen
   1264  42fb
   1265  42fb				   .L0163		;;  if bg then restorescreen
   1266  42fb
   1267  42fb		       ad 41 01 	      LDA	bg
   1268  42fe		       f0 03		      BEQ	.skipL0163
   1269  4300				   .condpart19
   1270  4300		       20 89 f0 	      jsr	restorescreen
   1271  4303				   .skipL0163
   1272  4303				   .L0164		;;  if !bg then clearscreen
   1273  4303
   1274  4303		       ad 41 01 	      LDA	bg
   1275  4306		       d0 03		      BNE	.skipL0164
   1276  4308				   .condpart20
   1277  4308		       20 77 f0 	      jsr	clearscreen
   1278  430b				   .skipL0164
   1279  430b				   .L0165		;;  y	=  0
   1280  430b
   1281  430b		       a9 00		      LDA	#0
   1282  430d		       85 fe		      STA	y
   1283  430f				   .L0166		;;  x	=  0
   1284  430f
   1285  430f		       a9 00		      LDA	#0
   1286  4311		       85 fd		      STA	x
   1287  4313				   .L0167		;;  c	=  0
   1288  4313
   1289  4313		       a9 00		      LDA	#0
   1290  4315		       85 e8		      STA	c
   1291  4317				   .L0168		;;  for i  =  0 to n
   1292  4317
   1293  4317		       a9 00		      LDA	#0
   1294  4319		       85 ee		      STA	i
   1295  431b				   .L0168fori
   1296  431b				   .L0169		;;  for j  =  0 to m
   1297  431b
   1298  431b		       a9 00		      LDA	#0
   1299  431d		       85 ef		      STA	j
   1300  431f				   .L0169forj
   1301  431f				   .L0170		;;  if ex  =  1  &&  wrap  =  0 then plotsprite ex1 0 x y f
   1302  431f
   1303  431f		       ad 44 01 	      LDA	ex
   1304  4322		       c9 01		      CMP	#1
   1305  4324		       d0 2c		      BNE	.skipL0170
   1306  4326				   .condpart21
   1307  4326		       ad 45 01 	      LDA	wrap
   1308  4329		       c9 00		      CMP	#0
   1309  432b		       d0 25		      BNE	.skip21then
   1310  432d				   .condpart22
   1311  432d		       a9 44		      lda	#<ex1
   1312  432f		       a0 04		      ldy	#ex1_width
   1313  4331		       18		      clc
   1314  4332		       f0 05		      beq	plotspritewidthskip3
   1315  4334				   plotspritewidthloop3
   1316  4334		       65 eb		      adc	f
   1317  4336		       88		      dey
   1318  4337		       d0 fb		      bne	plotspritewidthloop3
   1319  4339				   plotspritewidthskip3
   1320  4339		       85 42		      sta	temp1
   1321  433b
   1322  433b		       a9 e0		      lda	#>ex1
   1323  433d		       85 43		      sta	temp2
   1324  433f
   1325  433f		       a9 1c		      lda	#(0|ex1_width_twoscompliment)
   1326  4341		       85 44		      sta	temp3
   1327  4343
   1328  4343		       a5 fd		      lda	x
   1329  4345		       85 45		      sta	temp4
   1330  4347
   1331  4347		       a5 fe		      lda	y
   1332  4349		       85 46		      sta	temp5
   1333  434b
   1334  434b		       a9 40		      lda	#(ex1_mode|%01000000)
   1335  434d		       85 47		      sta	temp6
   1336  434f
   1337  434f		       20 9d f2 	      jsr	plotsprite
   1338  4352				   .skip21then
   1339  4352				   .skipL0170
   1340  4352				   .L0171		;;  if ex  =  0  &&  wrap  =  0 then plotsprite g16x16_12_2 0 x y f
   1341  4352
   1342  4352		       ad 44 01 	      LDA	ex
   1343  4355		       c9 00		      CMP	#0
   1344  4357		       d0 2c		      BNE	.skipL0171
   1345  4359				   .condpart23
   1346  4359		       ad 45 01 	      LDA	wrap
   1347  435c		       c9 00		      CMP	#0
   1348  435e		       d0 25		      BNE	.skip23then
   1349  4360				   .condpart24
   1350  4360		       a9 08		      lda	#<g16x16_12_2
   1351  4362		       a0 08		      ldy	#g16x16_12_2_width
   1352  4364		       18		      clc
   1353  4365		       f0 05		      beq	plotspritewidthskip4
   1354  4367				   plotspritewidthloop4
   1355  4367		       65 eb		      adc	f
   1356  4369		       88		      dey
   1357  436a		       d0 fb		      bne	plotspritewidthloop4
   1358  436c				   plotspritewidthskip4
   1359  436c		       85 42		      sta	temp1
   1360  436e
   1361  436e		       a9 e0		      lda	#>g16x16_12_2
   1362  4370		       85 43		      sta	temp2
   1363  4372
   1364  4372		       a9 18		      lda	#(0|g16x16_12_2_width_twoscompliment)
   1365  4374		       85 44		      sta	temp3
   1366  4376
   1367  4376		       a5 fd		      lda	x
   1368  4378		       85 45		      sta	temp4
   1369  437a
   1370  437a		       a5 fe		      lda	y
   1371  437c		       85 46		      sta	temp5
   1372  437e
   1373  437e		       a9 c0		      lda	#(g16x16_12_2_mode|%01000000)
   1374  4380		       85 47		      sta	temp6
   1375  4382
   1376  4382		       20 9d f2 	      jsr	plotsprite
   1377  4385				   .skip23then
   1378  4385				   .skipL0171
   1379  4385				   .L0172		;;  if wrap  =  1 then plotsprite p1 7 x y 0
   1380  4385
   1381  4385		       ad 45 01 	      LDA	wrap
   1382  4388		       c9 01		      CMP	#1
   1383  438a		       d0 1b		      BNE	.skipL0172
   1384  438c				   .condpart25
   1385  438c		       a9 60		      lda	#<p1
   1386  438e		       85 42		      sta	temp1
   1387  4390
   1388  4390		       a9 e0		      lda	#>p1
   1389  4392		       85 43		      sta	temp2
   1390  4394
   1391  4394		       a9 fe		      lda	#(224|p1_width_twoscompliment)
   1392  4396		       85 44		      sta	temp3
   1393  4398
   1394  4398		       a5 fd		      lda	x
   1395  439a		       85 45		      sta	temp4
   1396  439c
   1397  439c		       a5 fe		      lda	y
   1398  439e		       85 46		      sta	temp5
   1399  43a0
   1400  43a0		       a9 40		      lda	#(p1_mode|%01000000)
   1401  43a2		       85 47		      sta	temp6
   1402  43a4
   1403  43a4		       20 9d f2 	      jsr	plotsprite
   1404  43a7				   .skipL0172
   1405  43a7				   .L0173		;;  x	=  x  +  16
   1406  43a7
   1407  43a7		       a5 fd		      LDA	x
   1408  43a9		       18		      CLC
   1409  43aa		       69 10		      ADC	#16
   1410  43ac		       85 fd		      STA	x
   1411  43ae				   .L0174		;;  if x  >  144 then x  =  0	:  wrap  =  1
   1412  43ae
   1413  43ae		       a9 90		      LDA	#144
   1414  43b0		       c5 fd		      CMP	x
   1415  43b2		       b0 09		      BCS	.skipL0174
   1416  43b4				   .condpart26
   1417  43b4		       a9 00		      LDA	#0
   1418  43b6		       85 fd		      STA	x
   1419  43b8		       a9 01		      LDA	#1
   1420  43ba		       8d 45 01 	      STA	wrap
   1421  43bd				   .skipL0174
   1422  43bd				   .L0175		;;  next
   1423  43bd
   1424  43bd		       a5 ef		      LDA	j
   1425  43bf		       c5 f2		      CMP	m
   1426  43c1		       e6 ef		      INC	j
   1427  43c3				  -	      if	((* - .L0169forj) < 127) && ((* - .L0169forj) > -128)
   1428  43c3				  -	      bcc	.L0169forj
   1429  43c3					      else
   1430  43c3		       b0 03		      bcs	.0skipL0169forj
   1431  43c5		       4c 1f 43 	      jmp	.L0169forj
   1432  43c8				   .0skipL0169forj
   1433  43c8					      endif
   1434  43c8				   .L0176		;;  wrap  =  0
   1435  43c8
   1436  43c8		       a9 00		      LDA	#0
   1437  43ca		       8d 45 01 	      STA	wrap
   1438  43cd				   .L0177		;;  x	=  0
   1439  43cd
   1440  43cd		       a9 00		      LDA	#0
   1441  43cf		       85 fd		      STA	x
   1442  43d1				   .L0178		;;  y	=  y  +  16
   1443  43d1
   1444  43d1		       a5 fe		      LDA	y
   1445  43d3		       18		      CLC
   1446  43d4		       69 10		      ADC	#16
   1447  43d6		       85 fe		      STA	y
   1448  43d8				   .L0179		;;  c	=  c  +  1
   1449  43d8
   1450  43d8		       a5 e8		      LDA	c
   1451  43da		       18		      CLC
   1452  43db		       69 01		      ADC	#1
   1453  43dd		       85 e8		      STA	c
   1454  43df				   .L0180		;;  if c  >  6 then c	=  0
   1455  43df
   1456  43df		       a9 06		      LDA	#6
   1457  43e1		       c5 e8		      CMP	c
   1458  43e3		       b0 04		      BCS	.skipL0180
   1459  43e5				   .condpart27
   1460  43e5		       a9 00		      LDA	#0
   1461  43e7		       85 e8		      STA	c
   1462  43e9				   .skipL0180
   1463  43e9				   .L0181		;;  next
   1464  43e9
   1465  43e9		       a5 ee		      LDA	i
   1466  43eb		       c5 f3		      CMP	n
   1467  43ed		       e6 ee		      INC	i
   1468  43ef				  -	      if	((* - .L0168fori) < 127) && ((* - .L0168fori) > -128)
   1469  43ef				  -	      bcc	.L0168fori
   1470  43ef					      else
   1471  43ef		       b0 03		      bcs	.1skipL0168fori
   1472  43f1		       4c 1b 43 	      jmp	.L0168fori
   1473  43f4				   .1skipL0168fori
   1474  43f4					      endif
   1475  43f4				   .L0182		;;  if w  >  8  &&  joy0right then w  = 0  :  m  =  m	+  1
   1476  43f4
   1477  43f4		       a9 08		      LDA	#8
   1478  43f6		       c5 fc		      CMP	w
   1479  43f8		       b0 10		      BCS	.skipL0182
   1480  43fa				   .condpart28
   1481  43fa		       2c 80 02 	      bit	SWCHA
   1482  43fd		       30 0b		      BMI	.skip28then
   1483  43ff				   .condpart29
   1484  43ff		       a9 00		      LDA	#0
   1485  4401		       85 fc		      STA	w
   1486  4403		       a5 f2		      LDA	m
   1487  4405		       18		      CLC
   1488  4406		       69 01		      ADC	#1
   1489  4408		       85 f2		      STA	m
   1490  440a				   .skip28then
   1491  440a				   .skipL0182
   1492  440a				   .L0183		;;  if w  >  8  &&  joy0down then w  =  0  :  n  =  n	+  1
   1493  440a
   1494  440a		       a9 08		      LDA	#8
   1495  440c		       c5 fc		      CMP	w
   1496  440e		       b0 12		      BCS	.skipL0183
   1497  4410				   .condpart30
   1498  4410		       a9 20		      lda	#$20
   1499  4412		       2c 80 02 	      bit	SWCHA
   1500  4415		       d0 0b		      BNE	.skip30then
   1501  4417				   .condpart31
   1502  4417		       a9 00		      LDA	#0
   1503  4419		       85 fc		      STA	w
   1504  441b		       a5 f3		      LDA	n
   1505  441d		       18		      CLC
   1506  441e		       69 01		      ADC	#1
   1507  4420		       85 f3		      STA	n
   1508  4422				   .skip30then
   1509  4422				   .skipL0183
   1510  4422				   .L0184		;;  if w  >  8  &&  joy0left then w  = 0  :  m  =  m  -  1
   1511  4422
   1512  4422		       a9 08		      LDA	#8
   1513  4424		       c5 fc		      CMP	w
   1514  4426		       b0 10		      BCS	.skipL0184
   1515  4428				   .condpart32
   1516  4428		       2c 80 02 	      bit	SWCHA
   1517  442b		       70 0b		      BVS	.skip32then
   1518  442d				   .condpart33
   1519  442d		       a9 00		      LDA	#0
   1520  442f		       85 fc		      STA	w
   1521  4431		       a5 f2		      LDA	m
   1522  4433		       38		      SEC
   1523  4434		       e9 01		      SBC	#1
   1524  4436		       85 f2		      STA	m
   1525  4438				   .skip32then
   1526  4438				   .skipL0184
   1527  4438				   .L0185		;;  if w  >  8  &&  joy0up then w  =  0  :  n	=  n  -  1
   1528  4438
   1529  4438		       a9 08		      LDA	#8
   1530  443a		       c5 fc		      CMP	w
   1531  443c		       b0 12		      BCS	.skipL0185
   1532  443e				   .condpart34
   1533  443e		       a9 10		      lda	#$10
   1534  4440		       2c 80 02 	      bit	SWCHA
   1535  4443		       d0 0b		      BNE	.skip34then
   1536  4445				   .condpart35
   1537  4445		       a9 00		      LDA	#0
   1538  4447		       85 fc		      STA	w
   1539  4449		       a5 f3		      LDA	n
   1540  444b		       38		      SEC
   1541  444c		       e9 01		      SBC	#1
   1542  444e		       85 f3		      STA	n
   1543  4450				   .skip34then
   1544  4450				   .skipL0185
   1545  4450				   .L0186		;;  if n  >  24 then n  =  0
   1546  4450
   1547  4450		       a9 18		      LDA	#24
   1548  4452		       c5 f3		      CMP	n
   1549  4454		       b0 04		      BCS	.skipL0186
   1550  4456				   .condpart36
   1551  4456		       a9 00		      LDA	#0
   1552  4458		       85 f3		      STA	n
   1553  445a				   .skipL0186
   1554  445a				   .L0187		;;  if m  >  40 then m  =  0
   1555  445a
   1556  445a		       a9 28		      LDA	#40
   1557  445c		       c5 f2		      CMP	m
   1558  445e		       b0 04		      BCS	.skipL0187
   1559  4460				   .condpart37
   1560  4460		       a9 00		      LDA	#0
   1561  4462		       85 f2		      STA	m
   1562  4464				   .skipL0187
   1563  4464				   .L0188		;;  if an  =  1 then f  =  f  +  1
   1564  4464
   1565  4464		       ad 43 01 	      LDA	an
   1566  4467		       c9 01		      CMP	#1
   1567  4469		       d0 07		      BNE	.skipL0188
   1568  446b				   .condpart38
   1569  446b		       a5 eb		      LDA	f
   1570  446d		       18		      CLC
   1571  446e		       69 01		      ADC	#1
   1572  4470		       85 eb		      STA	f
   1573  4472				   .skipL0188
   1574  4472				   .L0189		;;  if an  =  1  &&  f  >  7 then f  =  0
   1575  4472
   1576  4472		       ad 43 01 	      LDA	an
   1577  4475		       c9 01		      CMP	#1
   1578  4477		       d0 0a		      BNE	.skipL0189
   1579  4479				   .condpart39
   1580  4479		       a9 07		      LDA	#7
   1581  447b		       c5 eb		      CMP	f
   1582  447d		       b0 04		      BCS	.skip39then
   1583  447f				   .condpart40
   1584  447f		       a9 00		      LDA	#0
   1585  4481		       85 eb		      STA	f
   1586  4483				   .skip39then
   1587  4483				   .skipL0189
   1588  4483				   .
   1589  4483							;; 
   1590  4483
   1591  4483				   .L0190		;;  rem plotchars 'joystick to draw fire to next' 7 10 23 1
   1592  4483
   1593  4483				   .L0191		;;  r	=  n  +  1
   1594  4483
   1595  4483		       a5 f3		      LDA	n
   1596  4485		       18		      CLC
   1597  4486		       69 01		      ADC	#1
   1598  4488		       85 f7		      STA	r
   1599  448a				   .L0192		;;  s	=  m  +  1
   1600  448a
   1601  448a		       a5 f2		      LDA	m
   1602  448c		       18		      CLC
   1603  448d		       69 01		      ADC	#1
   1604  448f		       85 f8		      STA	s
   1605  4491				   .
   1606  4491							;; 
   1607  4491
   1608  4491				   .L0193		;;  plotvalue font 4 s 2 8 11
   1609  4491
   1610  4491		       a9 66		      lda	#<font
   1611  4493		       85 42		      sta	temp1
   1612  4495
   1613  4495		       a9 e0		      lda	#>font
   1614  4497		       85 43		      sta	temp2
   1615  4499
   1616  4499		       ad 06 21 	      lda	charactermode
   1617  449c		       85 4a		      sta	temp9
   1618  449e		       a9 60		      lda	#(font_mode | %01100000)
   1619  44a0		       8d 06 21 	      sta	charactermode
   1620  44a3		       a9 1e		      lda	#30	; width in two's complement
   1621  44a5		       09 80		      ora	#128	; palette left shifted 5 bits
   1622  44a7		       85 44		      sta	temp3
   1623  44a9		       a9 08		      lda	#8
   1624  44ab		       85 45		      sta	temp4
   1625  44ad
   1626  44ad		       a9 0b		      lda	#11
   1627  44af		       85 46		      sta	temp5
   1628  44b1
   1629  44b1		       a9 02		      lda	#2
   1630  44b3		       85 47		      sta	temp6
   1631  44b5
   1632  44b5		       a9 f8		      lda	#<s
   1633  44b7		       85 48		      sta	temp7
   1634  44b9
   1635  44b9		       a9 00		      lda	#>s
   1636  44bb		       85 49		      sta	temp8
   1637  44bd
   1638  44bd		       20 d1 f3 	      jsr	plotvalue
   1639  44bd		       00 01	   USED_PLOTVALUE =	1
   1640  44c0		       a5 4a		      lda	temp9
   1641  44c2		       8d 06 21 	      sta	charactermode
   1642  44c5				   .L0194		;;  plotvalue font 4 r 2 24 11
   1643  44c5
   1644  44c5		       a9 66		      lda	#<font
   1645  44c7		       85 42		      sta	temp1
   1646  44c9
   1647  44c9		       a9 e0		      lda	#>font
   1648  44cb		       85 43		      sta	temp2
   1649  44cd
   1650  44cd		       ad 06 21 	      lda	charactermode
   1651  44d0		       85 4a		      sta	temp9
   1652  44d2		       a9 60		      lda	#(font_mode | %01100000)
   1653  44d4		       8d 06 21 	      sta	charactermode
   1654  44d7		       a9 1e		      lda	#30	; width in two's complement
   1655  44d9		       09 80		      ora	#128	; palette left shifted 5 bits
   1656  44db		       85 44		      sta	temp3
   1657  44dd		       a9 18		      lda	#24
   1658  44df		       85 45		      sta	temp4
   1659  44e1
   1660  44e1		       a9 0b		      lda	#11
   1661  44e3		       85 46		      sta	temp5
   1662  44e5
   1663  44e5		       a9 02		      lda	#2
   1664  44e7		       85 47		      sta	temp6
   1665  44e9
   1666  44e9		       a9 f7		      lda	#<r
   1667  44eb		       85 48		      sta	temp7
   1668  44ed
   1669  44ed		       a9 00		      lda	#>r
   1670  44ef		       85 49		      sta	temp8
   1671  44f1
   1672  44f1		       20 d1 f3 	      jsr	plotvalue
   1673  44f1		       00 01	   USED_PLOTVALUE =	1
   1674  44f4		       a5 4a		      lda	temp9
   1675  44f6		       8d 06 21 	      sta	charactermode
   1676  44f9				   .L0195		;;  plotvalue font 4 z 2 40 11
   1677  44f9
   1678  44f9		       a9 66		      lda	#<font
   1679  44fb		       85 42		      sta	temp1
   1680  44fd
   1681  44fd		       a9 e0		      lda	#>font
   1682  44ff		       85 43		      sta	temp2
   1683  4501
   1684  4501		       ad 06 21 	      lda	charactermode
   1685  4504		       85 4a		      sta	temp9
   1686  4506		       a9 60		      lda	#(font_mode | %01100000)
   1687  4508		       8d 06 21 	      sta	charactermode
   1688  450b		       a9 1e		      lda	#30	; width in two's complement
   1689  450d		       09 80		      ora	#128	; palette left shifted 5 bits
   1690  450f		       85 44		      sta	temp3
   1691  4511		       a9 28		      lda	#40
   1692  4513		       85 45		      sta	temp4
   1693  4515
   1694  4515		       a9 0b		      lda	#11
   1695  4517		       85 46		      sta	temp5
   1696  4519
   1697  4519		       a9 02		      lda	#2
   1698  451b		       85 47		      sta	temp6
   1699  451d
   1700  451d		       a9 ff		      lda	#<z
   1701  451f		       85 48		      sta	temp7
   1702  4521
   1703  4521		       a9 00		      lda	#>z
   1704  4523		       85 49		      sta	temp8
   1705  4525
   1706  4525		       20 d1 f3 	      jsr	plotvalue
   1707  4525		       00 01	   USED_PLOTVALUE =	1
   1708  4528		       a5 4a		      lda	temp9
   1709  452a		       8d 06 21 	      sta	charactermode
   1710  452d				   .L0196		;;  plotvalue font 4 bg 2 56 11
   1711  452d
   1712  452d		       a9 66		      lda	#<font
   1713  452f		       85 42		      sta	temp1
   1714  4531
   1715  4531		       a9 e0		      lda	#>font
   1716  4533		       85 43		      sta	temp2
   1717  4535
   1718  4535		       ad 06 21 	      lda	charactermode
   1719  4538		       85 4a		      sta	temp9
   1720  453a		       a9 60		      lda	#(font_mode | %01100000)
   1721  453c		       8d 06 21 	      sta	charactermode
   1722  453f		       a9 1e		      lda	#30	; width in two's complement
   1723  4541		       09 80		      ora	#128	; palette left shifted 5 bits
   1724  4543		       85 44		      sta	temp3
   1725  4545		       a9 38		      lda	#56
   1726  4547		       85 45		      sta	temp4
   1727  4549
   1728  4549		       a9 0b		      lda	#11
   1729  454b		       85 46		      sta	temp5
   1730  454d
   1731  454d		       a9 02		      lda	#2
   1732  454f		       85 47		      sta	temp6
   1733  4551
   1734  4551		       a9 41		      lda	#<bg
   1735  4553		       85 48		      sta	temp7
   1736  4555
   1737  4555		       a9 01		      lda	#>bg
   1738  4557		       85 49		      sta	temp8
   1739  4559
   1740  4559		       20 d1 f3 	      jsr	plotvalue
   1741  4559		       00 01	   USED_PLOTVALUE =	1
   1742  455c		       a5 4a		      lda	temp9
   1743  455e		       8d 06 21 	      sta	charactermode
   1744  4561				   .L0197		;;  plotvalue font 4 an 2 72 11
   1745  4561
   1746  4561		       a9 66		      lda	#<font
   1747  4563		       85 42		      sta	temp1
   1748  4565
   1749  4565		       a9 e0		      lda	#>font
   1750  4567		       85 43		      sta	temp2
   1751  4569
   1752  4569		       ad 06 21 	      lda	charactermode
   1753  456c		       85 4a		      sta	temp9
   1754  456e		       a9 60		      lda	#(font_mode | %01100000)
   1755  4570		       8d 06 21 	      sta	charactermode
   1756  4573		       a9 1e		      lda	#30	; width in two's complement
   1757  4575		       09 80		      ora	#128	; palette left shifted 5 bits
   1758  4577		       85 44		      sta	temp3
   1759  4579		       a9 48		      lda	#72
   1760  457b		       85 45		      sta	temp4
   1761  457d
   1762  457d		       a9 0b		      lda	#11
   1763  457f		       85 46		      sta	temp5
   1764  4581
   1765  4581		       a9 02		      lda	#2
   1766  4583		       85 47		      sta	temp6
   1767  4585
   1768  4585		       a9 43		      lda	#<an
   1769  4587		       85 48		      sta	temp7
   1770  4589
   1771  4589		       a9 01		      lda	#>an
   1772  458b		       85 49		      sta	temp8
   1773  458d
   1774  458d		       20 d1 f3 	      jsr	plotvalue
   1775  458d		       00 01	   USED_PLOTVALUE =	1
   1776  4590		       a5 4a		      lda	temp9
   1777  4592		       8d 06 21 	      sta	charactermode
   1778  4595				   .L0198		;;  plotvalue font 4 db 2 88 11
   1779  4595
   1780  4595		       a9 66		      lda	#<font
   1781  4597		       85 42		      sta	temp1
   1782  4599
   1783  4599		       a9 e0		      lda	#>font
   1784  459b		       85 43		      sta	temp2
   1785  459d
   1786  459d		       ad 06 21 	      lda	charactermode
   1787  45a0		       85 4a		      sta	temp9
   1788  45a2		       a9 60		      lda	#(font_mode | %01100000)
   1789  45a4		       8d 06 21 	      sta	charactermode
   1790  45a7		       a9 1e		      lda	#30	; width in two's complement
   1791  45a9		       09 80		      ora	#128	; palette left shifted 5 bits
   1792  45ab		       85 44		      sta	temp3
   1793  45ad		       a9 58		      lda	#88
   1794  45af		       85 45		      sta	temp4
   1795  45b1
   1796  45b1		       a9 0b		      lda	#11
   1797  45b3		       85 46		      sta	temp5
   1798  45b5
   1799  45b5		       a9 02		      lda	#2
   1800  45b7		       85 47		      sta	temp6
   1801  45b9
   1802  45b9		       a9 42		      lda	#<db
   1803  45bb		       85 48		      sta	temp7
   1804  45bd
   1805  45bd		       a9 01		      lda	#>db
   1806  45bf		       85 49		      sta	temp8
   1807  45c1
   1808  45c1		       20 d1 f3 	      jsr	plotvalue
   1809  45c1		       00 01	   USED_PLOTVALUE =	1
   1810  45c4		       a5 4a		      lda	temp9
   1811  45c6		       8d 06 21 	      sta	charactermode
   1812  45c9				   .
   1813  45c9							;; 
   1814  45c9
   1815  45c9				   .L0199		;;  if db then doublebuffer flip
   1816  45c9
   1817  45c9		       ad 42 01 	      LDA	db
   1818  45cc		       f0 03		      BEQ	.skipL0199
   1819  45ce				   .condpart41
   1820  45ce		       20 a0 f5 	      jsr	flipdisplaybuffer
   1821  45d1				   .skipL0199
   1822  45d1				   .L0200		;;  if !db then drawscreen
   1823  45d1
   1824  45d1		       ad 42 01 	      LDA	db
   1825  45d4		       d0 03		      BNE	.skipL0200
   1826  45d6				   .condpart42
   1827  45d6		       20 b3 f0 	      jsr	drawscreen
   1828  45d9				   .skipL0200
   1829  45d9				   .L0201		;;  z	=  0
   1830  45d9
   1831  45d9		       a9 00		      LDA	#0
   1832  45db		       85 ff		      STA	z
   1833  45dd				   .L0202		;;  return
   1834  45dd
   1835  45dd		       60		      RTS
   1836  45de				   .
   1837  45de							;; 
   1838  45de
   1839  45de				   .L0203		;;  rem draw sprites with arrow no bg
   1840  45de
   1841  45de				   .
   1842  45de							;; 
   1843  45de
   1844  45de				   .
   1845  45de							;; 
   1846  45de
   1847  45de				   .
   1848  45de							;; 
   1849  45de
   1850  45de				   .
   1851  45de							;; 
   1852  45de
   1853  45de				   .
   1854  45de							;; 
   1855  45de
   1856  45de				   .
   1857  45de							;; 
   1858  45de
   1859  45de				   .
   1860  45de							;; 
   1861  45de
   1862  45de				   .
   1863  45de							;; 
   1864  45de
   1865  45de				   .
   1866  45de							;; 
   1867  45de
   1868  45de				   .
   1869  45de							;; 
   1870  45de
   1871  45de				   .
   1872  45de							;; 
   1873  45de
   1874  45de				   .
   1875  45de							;; 
   1876  45de
   1877  45de				   .
   1878  45de							;; 
   1879  45de
   1880  45de				   .
   1881  45de							;; 
   1882  45de
   1883  45de				   .
   1884  45de							;; 
   1885  45de
   1886  45de				   .
   1887  45de							;; 
   1888  45de
   1889  45de				   .
   1890  45de							;; 
   1891  45de
   1892  45de				   .
   1893  45de							;; 
   1894  45de
   1895  45de				   .
   1896  45de							;; 
   1897  45de
   1898  45de				   .
   1899  45de							;; 
   1900  45de
   1901  45de				   .
   1902  45de							;; 
   1903  45de
   1904  45de				   .
   1905  45de							;; 
   1906  45de
   1907  45de				   .
   1908  45de							;; 
   1909  45de
   1910  45de				   .
   1911  45de							;; 
   1912  45de
   1913  45de				   .
   1914  45de							;; 
   1915  45de
   1916  45de				   .
   1917  45de							;; 
   1918  45de
   1919  45de				   .
   1920  45de							;; 
   1921  45de
   1922  45de				   .
   1923  45de							;; 
   1924  45de
   1925  45de				   .
   1926  45de							;; 
   1927  45de
   1928  45de				   .
   1929  45de							;; 
   1930  45de
   1931  45de				   .
   1932  45de							;; 
   1933  45de
   1934  45de				   .
   1935  45de							;; 
   1936  45de
   1937  45de				   .
   1938  45de							;; 
   1939  45de
   1940  45de				   .
   1941  45de							;; 
   1942  45de
   1943  45de				   .
   1944  45de							;; 
   1945  45de
   1946  45de				   .
   1947  45de							;; 
   1948  45de
   1949  45de				   .
   1950  45de							;; 
   1951  45de
   1952  45de				   .
   1953  45de							;; 
   1954  45de
   1955  45de				   .
   1956  45de							;; 
   1957  45de
   1958  45de				   .
   1959  45de							;; 
   1960  45de
   1961  45de				   .
   1962  45de							;; 
   1963  45de
   1964  45de				   .
   1965  45de							;; 
   1966  45de
   1967  45de				   .
   1968  45de							;; 
   1969  45de
   1970  45de				   .
   1971  45de							;; 
   1972  45de
   1973  45de				   .
   1974  45de							;; 
   1975  45de
   1976  45de				   .
   1977  45de							;; 
   1978  45de
   1979  45de				   .
   1980  45de							;; 
   1981  45de
   1982  45de				   .
   1983  45de							;; 
   1984  45de
   1985  45de				   .
   1986  45de							;; 
   1987  45de
   1988  45de				   .
   1989  45de							;; 
   1990  45de
   1991  45de				   .
   1992  45de							;; 
   1993  45de
   1994  45de				   .
   1995  45de							;; 
   1996  45de
   1997  45de				   .
   1998  45de							;; 
   1999  45de
   2000  45de				   .
   2001  45de							;; 
   2002  45de
   2003  45de				   .
   2004  45de							;; 
   2005  45de
   2006  45de				   .
   2007  45de							;; 
   2008  45de
   2009  45de				   .
   2010  45de							;; 
   2011  45de
   2012  45de				   .
   2013  45de							;; 
   2014  45de
   2015  45de				   .
   2016  45de							;; 
   2017  45de
   2018  45de				   .
   2019  45de							;; 
   2020  45de
   2021  45de				   .
   2022  45de							;; 
   2023  45de
   2024  45de				   .
   2025  45de							;; 
   2026  45de
   2027  45de				   .
   2028  45de							;; 
   2029  45de
   2030  45de				   .
   2031  45de							;; 
   2032  45de
   2033  45de				   .
   2034  45de							;; 
   2035  45de
   2036  45de				   .
   2037  45de							;; 
   2038  45de
   2039  45de				   .
   2040  45de							;; 
   2041  45de
   2042  45de				   .
   2043  45de							;; 
   2044  45de
   2045  45de				   .
   2046  45de							;; 
   2047  45de
   2048  45de				   .
   2049  45de							;; 
   2050  45de
   2051  45de				   .
   2052  45de							;; 
   2053  45de
   2054  45de				   .
   2055  45de							;; 
   2056  45de
   2057  45de				   .
   2058  45de							;; 
   2059  45de
   2060  45de				   .
   2061  45de							;; 
   2062  45de
   2063  45de				   .
   2064  45de							;; 
   2065  45de
   2066  45de				   .
   2067  45de							;; 
   2068  45de
   2069  45de				   .
   2070  45de							;; 
   2071  45de
   2072  45de				   .drawZoneBG
   2073  45de							;; drawZoneBG
   2074  45de
   2075  45de				   .L0204		;;  x	=  0
   2076  45de
   2077  45de		       a9 00		      LDA	#0
   2078  45e0		       85 fd		      STA	x
   2079  45e2				   .L0205		;;  y	=  0
   2080  45e2
   2081  45e2		       a9 00		      LDA	#0
   2082  45e4		       85 fe		      STA	y
   2083  45e6				   .L0206		;;  for j  =  0 to 10
   2084  45e6
   2085  45e6		       a9 00		      LDA	#0
   2086  45e8		       85 ef		      STA	j
   2087  45ea				   .L0206forj
   2088  45ea				   .L0207		;;  for i  =  0 to 1
   2089  45ea
   2090  45ea		       a9 00		      LDA	#0
   2091  45ec		       85 ee		      STA	i
   2092  45ee				   .L0207fori
   2093  45ee				   .L0208		;;  plotsprite zonebg80x16_16 7 x y 0
   2094  45ee
   2095  45ee		       a9 30		      lda	#<zonebg80x16_16
   2096  45f0		       85 42		      sta	temp1
   2097  45f2
   2098  45f2		       a9 e0		      lda	#>zonebg80x16_16
   2099  45f4		       85 43		      sta	temp2
   2100  45f6
   2101  45f6		       a9 ec		      lda	#(224|zonebg80x16_16_width_twoscompliment)
   2102  45f8		       85 44		      sta	temp3
   2103  45fa
   2104  45fa		       a5 fd		      lda	x
   2105  45fc		       85 45		      sta	temp4
   2106  45fe
   2107  45fe		       a5 fe		      lda	y
   2108  4600		       85 46		      sta	temp5
   2109  4602
   2110  4602		       a9 40		      lda	#(zonebg80x16_16_mode|%01000000)
   2111  4604		       85 47		      sta	temp6
   2112  4606
   2113  4606		       20 9d f2 	      jsr	plotsprite
   2114  4609				   .L0209		;;  x	=  x  +  80
   2115  4609
   2116  4609		       a5 fd		      LDA	x
   2117  460b		       18		      CLC
   2118  460c		       69 50		      ADC	#80
   2119  460e		       85 fd		      STA	x
   2120  4610				   .L0210		;;  next
   2121  4610
   2122  4610		       a5 ee		      LDA	i
   2123  4612		       c9 01		      CMP	#1
   2124  4614		       e6 ee		      INC	i
   2125  4616					      if	((* - .L0207fori) < 127) && ((* - .L0207fori) > -128)
   2126  4616		       90 d6		      bcc	.L0207fori
   2127  4618				  -	      else
   2128  4618				  -	      bcs	.2skipL0207fori
   2129  4618				  -	      jmp	.L0207fori
   2130  4618				  -.2skipL0207fori
   2131  4618					      endif
   2132  4618				   .L0211		;;  x	=  0
   2133  4618
   2134  4618		       a9 00		      LDA	#0
   2135  461a		       85 fd		      STA	x
   2136  461c				   .L0212		;;  y	=  y  +  16
   2137  461c
   2138  461c		       a5 fe		      LDA	y
   2139  461e		       18		      CLC
   2140  461f		       69 10		      ADC	#16
   2141  4621		       85 fe		      STA	y
   2142  4623				   .L0213		;;  next
   2143  4623
   2144  4623		       a5 ef		      LDA	j
   2145  4625		       c9 0a		      CMP	#10
   2146  4627		       e6 ef		      INC	j
   2147  4629					      if	((* - .L0206forj) < 127) && ((* - .L0206forj) > -128)
   2148  4629		       90 bf		      bcc	.L0206forj
   2149  462b				  -	      else
   2150  462b				  -	      bcs	.3skipL0206forj
   2151  462b				  -	      jmp	.L0206forj
   2152  462b				  -.3skipL0206forj
   2153  462b					      endif
   2154  462b				   .L0214		;;  savescreen
   2155  462b
   2156  462b		       20 9b f0 	      jsr	savescreen
   2157  462e				   .L0215		;;  return
   2158  462e
   2159  462e		       60		      RTS
   2160  462f				   .
   2161  462f							;; 
   2162  462f
   2163  462f				   .topscreenroutine
   2164  462f							;; topscreenroutine
   2165  462f
   2166  462f				   .L0216		;;  z	=  z  +  1
   2167  462f
   2168  462f		       a5 ff		      LDA	z
   2169  4631		       18		      CLC
   2170  4632		       69 01		      ADC	#1
   2171  4634		       85 ff		      STA	z
   2172  4636				   .L0217		;;  return
   2173  4636		       60		      RTS
   2174  4636				   DMAHOLEEND0 SET	.
   2175  4637				   gameend
   2176  4637				   DMAHOLEEND0 SET	.
   39369 bytes of ROM space left in the main area.
   2177  4637					      echo	" ",[($E000 - gameend)]d , "bytes of ROM space left in the main area."
   2178  4637
   2179  e000					      ORG	$E000,0	; *************
   2180  e000
   2181  e000				   g16x16_12_1
   2182  e000		       00 01 38 b5*	      HEX	000138b5e5c20400
   2183  e008				   g16x16_12_2
   2184  e008		       00 00 00 00*	      HEX	0000000000000000
   2185  e010				   g16x16_4color
   2186  e010		       aa aa aa aa	      HEX	aaaaaaaa
   2187  e014				   g16x16_4color2
   2188  e014		       aa aa aa aa	      HEX	aaaaaaaa
   2189  e018				   g16x16_4color3
   2190  e018		       ff ff ff ff	      HEX	ffffffff
   2191  e01c				   g16x16_4color4
   2192  e01c		       ff ff ff ff	      HEX	ffffffff
   2193  e020				   g16x16_4color5
   2194  e020		       55 55 55 55	      HEX	55555555
   2195  e024				   g16x16_4color6
   2196  e024		       55 55 55 55	      HEX	55555555
   2197  e028				   g16x16_4color7
   2198  e028		       55 55 55 55	      HEX	55555555
   2199  e02c				   g16x16_4color8
   2200  e02c		       00 00 00 00	      HEX	00000000
   2201  e030				   zonebg80x16_16
   2202  e030		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000
   2203  e044				   ex1
   2204  e044		       00 00 00 00	      HEX	00000000
   2205  e048				   ex2
   2206  e048		       00 00 00 00	      HEX	00000000
   2207  e04c				   ex3
   2208  e04c		       00 00 00 00	      HEX	00000000
   2209  e050				   ex4
   2210  e050		       00 41 50 00	      HEX	00415000
   2211  e054				   ex5
   2212  e054		       31 41 51 00	      HEX	31415100
   2213  e058				   ex6
   2214  e058		       00 15 15 00	      HEX	00151500
   2215  e05c				   ex7
   2216  e05c		       01 50 55 40	      HEX	01505540
   2217  e060				   p1
   2218  e060		       00 00		      HEX	0000
   2219  e062				   blank
   2220  e062		       00 00 00 00	      HEX	00000000
   2221  e066				   font
   2222  e066		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000000000000000000000000000
   2223  e086		       00 00 00 00*	      HEX	000000000000000000000000000000000000000000
   2224  e09b
   2225  e100					      ORG	$E100,0	; *************
   2226  e100
   2227  e100							;g16x16_12_1
   2228  e100		       5a 49 38 b5*	      HEX	5a4938b5e5c2165a
   2229  e108							;g16x16_12_2
   2230  e108		       00 00 00 00*	      HEX	0000000000000000
   2231  e110							;g16x16_4color
   2232  e110		       aa aa aa aa	      HEX	aaaaaaaa
   2233  e114							;g16x16_4color2
   2234  e114		       ff ff ff ff	      HEX	ffffffff
   2235  e118							;g16x16_4color3
   2236  e118		       ff ff ff ff	      HEX	ffffffff
   2237  e11c							;g16x16_4color4
   2238  e11c		       55 55 55 55	      HEX	55555555
   2239  e120							;g16x16_4color5
   2240  e120		       55 55 55 55	      HEX	55555555
   2241  e124							;g16x16_4color6
   2242  e124		       00 00 00 00	      HEX	00000000
   2243  e128							;g16x16_4color7
   2244  e128		       55 55 55 55	      HEX	55555555
   2245  e12c							;g16x16_4color8
   2246  e12c		       aa aa aa aa	      HEX	aaaaaaaa
   2247  e130							;zonebg80x16_16
   2248  e130		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000
   2249  e144							;ex1
   2250  e144		       00 00 00 00	      HEX	00000000
   2251  e148							;ex2
   2252  e148		       00 03 00 30	      HEX	00030030
   2253  e14c							;ex3
   2254  e14c		       30 15 40 0c	      HEX	3015400c
   2255  e150							;ex4
   2256  e150		       00 51 25 90	      HEX	00512590
   2257  e154							;ex5
   2258  e154		       01 55 35 53	      HEX	01553553
   2259  e158							;ex6
   2260  e158		       05 65 56 40	      HEX	05655640
   2261  e15c							;ex7
   2262  e15c		       04 00 00 00	      HEX	04000000
   2263  e160							;p1
   2264  e160		       00 00		      HEX	0000
   2265  e162							;blank
   2266  e162		       00 00 00 00	      HEX	00000000
   2267  e166							;font
   2268  e166		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000000000000000000000000000
   2269  e186		       00 00 00 00*	      HEX	000000000000000000000000000000000000000000
   2270  e19b
   2271  e200					      ORG	$E200,0	; *************
   2272  e200
   2273  e200							;g16x16_12_1
   2274  e200		       a0 81 38 b5*	      HEX	a08138b5e5c224a0
   2275  e208							;g16x16_12_2
   2276  e208		       00 00 00 00*	      HEX	0000000000000000
   2277  e210							;g16x16_4color
   2278  e210		       ff ff ff ff	      HEX	ffffffff
   2279  e214							;g16x16_4color2
   2280  e214		       ff ff ff ff	      HEX	ffffffff
   2281  e218							;g16x16_4color3
   2282  e218		       55 55 55 55	      HEX	55555555
   2283  e21c							;g16x16_4color4
   2284  e21c		       55 55 55 55	      HEX	55555555
   2285  e220							;g16x16_4color5
   2286  e220		       00 00 00 00	      HEX	00000000
   2287  e224							;g16x16_4color6
   2288  e224		       00 00 00 00	      HEX	00000000
   2289  e228							;g16x16_4color7
   2290  e228		       ff ff ff ff	      HEX	ffffffff
   2291  e22c							;g16x16_4color8
   2292  e22c		       aa aa aa aa	      HEX	aaaaaaaa
   2293  e230							;zonebg80x16_16
   2294  e230		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000
   2295  e244							;ex1
   2296  e244		       00 30 00 00	      HEX	00300000
   2297  e248							;ex2
   2298  e248		       0c 14 14 00	      HEX	0c141400
   2299  e24c							;ex3
   2300  e24c		       00 2b 91 00	      HEX	002b9100
   2301  e250							;ex4
   2302  e250		       05 aa 3a 60	      HEX	05aa3a60
   2303  e254							;ex5
   2304  e254		       15 9a a9 10	      HEX	159aa910
   2305  e258							;ex6
   2306  e258		       11 40 14 54	      HEX	11401454
   2307  e25c							;ex7
   2308  e25c		       10 00 00 04	      HEX	10000004
   2309  e260							;p1
   2310  e260		       00 00		      HEX	0000
   2311  e262							;blank
   2312  e262		       00 00 00 00	      HEX	00000000
   2313  e266							;font
   2314  e266		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000000000000000000000000000
   2315  e286		       00 00 00 00*	      HEX	000000000000000000000000000000000000000000
   2316  e29b
   2317  e300					      ORG	$E300,0	; *************
   2318  e300
   2319  e300							;g16x16_12_1
   2320  e300		       aa 89 38 b5*	      HEX	aa8938b5e5c226aa
   2321  e308							;g16x16_12_2
   2322  e308		       00 00 00 00*	      HEX	0000000000000000
   2323  e310							;g16x16_4color
   2324  e310		       ff ff ff ff	      HEX	ffffffff
   2325  e314							;g16x16_4color2
   2326  e314		       55 55 55 55	      HEX	55555555
   2327  e318							;g16x16_4color3
   2328  e318		       55 55 55 55	      HEX	55555555
   2329  e31c							;g16x16_4color4
   2330  e31c		       00 00 00 00	      HEX	00000000
   2331  e320							;g16x16_4color5
   2332  e320		       00 00 00 00	      HEX	00000000
   2333  e324							;g16x16_4color6
   2334  e324		       aa aa aa aa	      HEX	aaaaaaaa
   2335  e328							;g16x16_4color7
   2336  e328		       ff ff ff ff	      HEX	ffffffff
   2337  e32c							;g16x16_4color8
   2338  e32c		       ff ff ff ff	      HEX	ffffffff
   2339  e330							;zonebg80x16_16
   2340  e330		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000
   2341  e344							;ex1
   2342  e344		       00 01 43 00	      HEX	00014300
   2343  e348							;ex2
   2344  e348		       00 29 69 00	      HEX	00296900
   2345  e34c							;ex3
   2346  e34c		       01 85 a2 40	      HEX	0185a240
   2347  e350							;ex4
   2348  e350		       19 12 a4 94	      HEX	1912a494
   2349  e354							;ex5
   2350  e354		       52 79 1a d4	      HEX	52791ad4
   2351  e358							;ex6
   2352  e358		       15 00 00 10	      HEX	15000010
   2353  e35c							;ex7
   2354  e35c		       00 00 00 01	      HEX	00000001
   2355  e360							;p1
   2356  e360		       00 00		      HEX	0000
   2357  e362							;blank
   2358  e362		       00 00 00 00	      HEX	00000000
   2359  e366							;font
   2360  e366		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000000000000000000000000000
   2361  e386		       00 00 00 00*	      HEX	000000000000000000000000000000000000000000
   2362  e39b
   2363  e400					      ORG	$E400,0	; *************
   2364  e400
   2365  e400							;g16x16_12_1
   2366  e400		       55 45 38 b5*	      HEX	554538b5e5c21555
   2367  e408							;g16x16_12_2
   2368  e408		       aa aa aa aa*	      HEX	aaaaaaaaaaaaaaaa
   2369  e410							;g16x16_4color
   2370  e410		       55 55 55 55	      HEX	55555555
   2371  e414							;g16x16_4color2
   2372  e414		       55 55 55 55	      HEX	55555555
   2373  e418							;g16x16_4color3
   2374  e418		       00 00 00 00	      HEX	00000000
   2375  e41c							;g16x16_4color4
   2376  e41c		       00 00 00 00	      HEX	00000000
   2377  e420							;g16x16_4color5
   2378  e420		       aa aa aa aa	      HEX	aaaaaaaa
   2379  e424							;g16x16_4color6
   2380  e424		       aa aa aa aa	      HEX	aaaaaaaa
   2381  e428							;g16x16_4color7
   2382  e428		       aa aa aa aa	      HEX	aaaaaaaa
   2383  e42c							;g16x16_4color8
   2384  e42c		       ff ff ff ff	      HEX	ffffffff
   2385  e430							;zonebg80x16_16
   2386  e430		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000
   2387  e444							;ex1
   2388  e444		       00 01 80 00	      HEX	00018000
   2389  e448							;ex2
   2390  e448		       01 95 8a 03	      HEX	01958a03
   2391  e44c							;ex3
   2392  e44c		       04 6a 98 90	      HEX	046a9890
   2393  e450							;ex4
   2394  e450		       62 eb 4a 89	      HEX	62eb4a89
   2395  e454							;ex5
   2396  e454		       5a 94 04 a5	      HEX	5a9404a5
   2397  e458							;ex6
   2398  e458		       54 00 00 16	      HEX	54000016
   2399  e45c							;ex7
   2400  e45c		       40 00 00 01	      HEX	40000001
   2401  e460							;p1
   2402  e460		       00 00		      HEX	0000
   2403  e462							;blank
   2404  e462		       00 00 00 00	      HEX	00000000
   2405  e466							;font
   2406  e466		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000000000000000000000000000
   2407  e486		       00 00 00 00*	      HEX	000000000000000000000000000000000000000000
   2408  e49b
   2409  e500					      ORG	$E500,0	; *************
   2410  e500
   2411  e500							;g16x16_12_1
   2412  e500		       50 41 38 b5*	      HEX	504138b5e5c21450
   2413  e508							;g16x16_12_2
   2414  e508		       a5 a5 a5 a5*	      HEX	a5a5a5a5a5a5a5a5
   2415  e510							;g16x16_4color
   2416  e510		       55 55 55 55	      HEX	55555555
   2417  e514							;g16x16_4color2
   2418  e514		       00 00 00 00	      HEX	00000000
   2419  e518							;g16x16_4color3
   2420  e518		       00 00 00 00	      HEX	00000000
   2421  e51c							;g16x16_4color4
   2422  e51c		       aa aa aa aa	      HEX	aaaaaaaa
   2423  e520							;g16x16_4color5
   2424  e520		       aa aa aa aa	      HEX	aaaaaaaa
   2425  e524							;g16x16_4color6
   2426  e524		       ff ff ff ff	      HEX	ffffffff
   2427  e528							;g16x16_4color7
   2428  e528		       aa aa aa aa	      HEX	aaaaaaaa
   2429  e52c							;g16x16_4color8
   2430  e52c		       55 55 55 55	      HEX	55555555
   2431  e530							;zonebg80x16_16
   2432  e530		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000
   2433  e544							;ex1
   2434  e544		       00 da 24 00	      HEX	00da2400
   2435  e548							;ex2
   2436  e548		       06 46 6e 40	      HEX	06466e40
   2437  e54c							;ex3
   2438  e54c		       1a 88 69 e4	      HEX	1a8869e4
   2439  e550							;ex4
   2440  e550		       52 44 1a 6c	      HEX	52441a6c
   2441  e554							;ex5
   2442  e554		       ca 00 00 49	      HEX	ca000049
   2443  e558							;ex6
   2444  e558		       60 00 00 05	      HEX	60000005
   2445  e55c							;ex7
   2446  e55c		       40 00 00 01	      HEX	40000001
   2447  e560							;p1
   2448  e560		       00 00		      HEX	0000
   2449  e562							;blank
   2450  e562		       00 00 00 00	      HEX	00000000
   2451  e566							;font
   2452  e566		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000000000000000000000000000
   2453  e586		       00 00 00 00*	      HEX	000000000000000000000000000000000000000000
   2454  e59b
   2455  e600					      ORG	$E600,0	; *************
   2456  e600
   2457  e600							;g16x16_12_1
   2458  e600		       0f 0d 38 b5*	      HEX	0f0d38b5e5c2070f
   2459  e608							;g16x16_12_2
   2460  e608		       5a 5a 5a 5a*	      HEX	5a5a5a5a5a5a5a5a
   2461  e610							;g16x16_4color
   2462  e610		       00 00 00 00	      HEX	00000000
   2463  e614							;g16x16_4color2
   2464  e614		       00 00 00 00	      HEX	00000000
   2465  e618							;g16x16_4color3
   2466  e618		       aa aa aa aa	      HEX	aaaaaaaa
   2467  e61c							;g16x16_4color4
   2468  e61c		       aa aa aa aa	      HEX	aaaaaaaa
   2469  e620							;g16x16_4color5
   2470  e620		       ff ff ff ff	      HEX	ffffffff
   2471  e624							;g16x16_4color6
   2472  e624		       ff ff ff ff	      HEX	ffffffff
   2473  e628							;g16x16_4color7
   2474  e628		       55 55 55 55	      HEX	55555555
   2475  e62c							;g16x16_4color8
   2476  e62c		       55 55 55 55	      HEX	55555555
   2477  e630							;zonebg80x16_16
   2478  e630		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000
   2479  e644							;ex1
   2480  e644		       00 05 b9 00	      HEX	0005b900
   2481  e648							;ex2
   2482  e648		       c5 ae a1 90	      HEX	c5aea190
   2483  e64c							;ex3
   2484  e64c		       07 67 18 90	      HEX	07671890
   2485  e650							;ex4
   2486  e650		       6a 90 07 64	      HEX	6a900764
   2487  e654							;ex5
   2488  e654		       58 40 00 69	      HEX	58400069
   2489  e658							;ex6
   2490  e658		       50 00 00 04	      HEX	50000004
   2491  e65c							;ex7
   2492  e65c		       40 00 00 00	      HEX	40000000
   2493  e660							;p1
   2494  e660		       00 00		      HEX	0000
   2495  e662							;blank
   2496  e662		       00 00 00 00	      HEX	00000000
   2497  e666							;font
   2498  e666		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000000000000000000000000000
   2499  e686		       00 00 00 00*	      HEX	000000000000000000000000000000000000000000
   2500  e69b
   2501  e700					      ORG	$E700,0	; *************
   2502  e700
   2503  e700							;g16x16_12_1
   2504  e700		       fa c9 38 b5*	      HEX	fac938b5e5c236fa
   2505  e708							;g16x16_12_2
   2506  e708		       5f 5f 5f 5f*	      HEX	5f5f5f5f5f5f5f5f
   2507  e710							;g16x16_4color
   2508  e710		       00 00 00 00	      HEX	00000000
   2509  e714							;g16x16_4color2
   2510  e714		       aa aa aa aa	      HEX	aaaaaaaa
   2511  e718							;g16x16_4color3
   2512  e718		       aa aa aa aa	      HEX	aaaaaaaa
   2513  e71c							;g16x16_4color4
   2514  e71c		       ff ff ff ff	      HEX	ffffffff
   2515  e720							;g16x16_4color5
   2516  e720		       ff ff ff ff	      HEX	ffffffff
   2517  e724							;g16x16_4color6
   2518  e724		       55 55 55 55	      HEX	55555555
   2519  e728							;g16x16_4color7
   2520  e728		       55 55 55 55	      HEX	55555555
   2521  e72c							;g16x16_4color8
   2522  e72c		       00 00 00 00	      HEX	00000000
   2523  e730							;zonebg80x16_16
   2524  e730		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000
   2525  e744							;ex1
   2526  e744		       00 63 44 00	      HEX	00634400
   2527  e748							;ex2
   2528  e748		       06 28 91 40	      HEX	06289140
   2529  e74c							;ex3
   2530  e74c		       18 a0 ca 10	      HEX	18a0ca10
   2531  e750							;ex4
   2532  e750		       1d 80 02 05	      HEX	1d800205
   2533  e754							;ex5
   2534  e754		       12 00 00 63	      HEX	12000063
   2535  e758							;ex6
   2536  e758		       14 00 00 01	      HEX	14000001
   2537  e75c							;ex7
   2538  e75c		       00 00 00 01	      HEX	00000001
   2539  e760							;p1
   2540  e760		       00 00		      HEX	0000
   2541  e762							;blank
   2542  e762		       00 00 00 00	      HEX	00000000
   2543  e766							;font
   2544  e766		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000000000000000000000000000
   2545  e786		       00 00 00 00*	      HEX	000000000000000000000000000000000000000000
   2546  e79b
   2547  e800					      ORG	$E800,0	; *************
   2548  e800
   2549  e800							;g16x16_12_1
   2550  e800		       fa c9 38 b5*	      HEX	fac938b5e5c236fa
   2551  e808							;g16x16_12_2
   2552  e808		       50 50 50 50*	      HEX	5050505050505050
   2553  e810							;g16x16_4color
   2554  e810		       aa aa aa aa	      HEX	aaaaaaaa
   2555  e814							;g16x16_4color2
   2556  e814		       aa aa aa aa	      HEX	aaaaaaaa
   2557  e818							;g16x16_4color3
   2558  e818		       ff ff ff ff	      HEX	ffffffff
   2559  e81c							;g16x16_4color4
   2560  e81c		       ff ff ff ff	      HEX	ffffffff
   2561  e820							;g16x16_4color5
   2562  e820		       55 55 55 55	      HEX	55555555
   2563  e824							;g16x16_4color6
   2564  e824		       55 55 55 55	      HEX	55555555
   2565  e828							;g16x16_4color7
   2566  e828		       00 00 00 00	      HEX	00000000
   2567  e82c							;g16x16_4color8
   2568  e82c		       00 00 00 00	      HEX	00000000
   2569  e830							;zonebg80x16_16
   2570  e830		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000
   2571  e844							;ex1
   2572  e844		       00 66 b9 00	      HEX	0066b900
   2573  e848							;ex2
   2574  e848		       01 6a f9 80	      HEX	016af980
   2575  e84c							;ex3
   2576  e84c		       c5 ac 16 c4	      HEX	c5ac16c4
   2577  e850							;ex4
   2578  e850		       16 90 04 64	      HEX	16900464
   2579  e854							;ex5
   2580  e854		       5e 00 00 34	      HEX	5e000034
   2581  e858							;ex6
   2582  e858		       14 00 00 01	      HEX	14000001
   2583  e85c							;ex7
   2584  e85c		       40 00 00 00	      HEX	40000000
   2585  e860							;p1
   2586  e860		       56 00		      HEX	5600
   2587  e862							;blank
   2588  e862		       00 00 00 00	      HEX	00000000
   2589  e866							;font
   2590  e866		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000000000000000000000000000
   2591  e886		       00 00 00 00*	      HEX	000000000000000000004000540000000000000000
   2592  e89b
   2593  e900					      ORG	$E900,0	; *************
   2594  e900
   2595  e900							;g16x16_12_1
   2596  e900		       0f 0d 38 b5*	      HEX	0f0d38b5e5c2070f
   2597  e908							;g16x16_12_2
   2598  e908		       f5 f5 f5 f5*	      HEX	f5f5f5f5f5f5f5f5
   2599  e910							;g16x16_4color
   2600  e910		       aa aa aa aa	      HEX	aaaaaaaa
   2601  e914							;g16x16_4color2
   2602  e914		       ff ff ff ff	      HEX	ffffffff
   2603  e918							;g16x16_4color3
   2604  e918		       ff ff ff ff	      HEX	ffffffff
   2605  e91c							;g16x16_4color4
   2606  e91c		       55 55 55 55	      HEX	55555555
   2607  e920							;g16x16_4color5
   2608  e920		       55 55 55 55	      HEX	55555555
   2609  e924							;g16x16_4color6
   2610  e924		       00 00 00 00	      HEX	00000000
   2611  e928							;g16x16_4color7
   2612  e928		       00 00 00 00	      HEX	00000000
   2613  e92c							;g16x16_4color8
   2614  e92c		       aa aa aa aa	      HEX	aaaaaaaa
   2615  e930							;zonebg80x16_16
   2616  e930		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000
   2617  e944							;ex1
   2618  e944		       03 19 24 00	      HEX	03192400
   2619  e948							;ex2
   2620  e948		       06 7b 69 10	      HEX	067b6910
   2621  e94c							;ex3
   2622  e94c		       04 99 6a 64	      HEX	04996a64
   2623  e950							;ex4
   2624  e950		       62 74 06 64	      HEX	62740664
   2625  e954							;ex5
   2626  e954		       19 40 00 65	      HEX	19400065
   2627  e958							;ex6
   2628  e958		       50 00 00 01	      HEX	50000001
   2629  e95c							;ex7
   2630  e95c		       40 00 00 01	      HEX	40000001
   2631  e960							;p1
   2632  e960		       14 00		      HEX	1400
   2633  e962							;blank
   2634  e962		       00 00 00 00	      HEX	00000000
   2635  e966							;font
   2636  e966		       54 54 54 54*	      HEX	5454545404545410545444505450544054445454445444445440044454105410
   2637  e986		       44 44 10 54*	      HEX	444410544000101040101000000440545414154000
   2638  e99b
   2639  ea00					      ORG	$EA00,0	; *************
   2640  ea00
   2641  ea00							;g16x16_12_1
   2642  ea00		       50 41 38 b5*	      HEX	504138b5e5c21450
   2643  ea08							;g16x16_12_2
   2644  ea08		       fa fa fa fa*	      HEX	fafafafafafafafa
   2645  ea10							;g16x16_4color
   2646  ea10		       ff ff ff ff	      HEX	ffffffff
   2647  ea14							;g16x16_4color2
   2648  ea14		       ff ff ff ff	      HEX	ffffffff
   2649  ea18							;g16x16_4color3
   2650  ea18		       55 55 55 55	      HEX	55555555
   2651  ea1c							;g16x16_4color4
   2652  ea1c		       55 55 55 55	      HEX	55555555
   2653  ea20							;g16x16_4color5
   2654  ea20		       00 00 00 00	      HEX	00000000
   2655  ea24							;g16x16_4color6
   2656  ea24		       00 00 00 00	      HEX	00000000
   2657  ea28							;g16x16_4color7
   2658  ea28		       ff ff ff ff	      HEX	ffffffff
   2659  ea2c							;g16x16_4color8
   2660  ea2c		       aa aa aa aa	      HEX	aaaaaaaa
   2661  ea30							;zonebg80x16_16
   2662  ea30		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000
   2663  ea44							;ex1
   2664  ea44		       00 05 90 c0	      HEX	000590c0
   2665  ea48							;ex2
   2666  ea48		       05 96 2e 90	      HEX	05962e90
   2667  ea4c							;ex3
   2668  ea4c		       1b 8a 98 50	      HEX	1b8a9850
   2669  ea50							;ex4
   2670  ea50		       66 69 1e a5	      HEX	66691ea5
   2671  ea54							;ex5
   2672  ea54		       5a 50 00 61	      HEX	5a500061
   2673  ea58							;ex6
   2674  ea58		       54 00 00 05	      HEX	54000005
   2675  ea5c							;ex7
   2676  ea5c		       00 00 00 01	      HEX	00000001
   2677  ea60							;p1
   2678  ea60		       15 80		      HEX	1580
   2679  ea62							;blank
   2680  ea62		       00 00 00 00	      HEX	00000000
   2681  ea66							;font
   2682  ea66		       44 10 40 04*	      HEX	4410400404444410440444444044404044441044444044444440504404104454
   2683  ea86		       54 44 10 40*	      HEX	544410405000000040000000001010400441401000
   2684  ea9b
   2685  eb00					      ORG	$EB00,0	; *************
   2686  eb00
   2687  eb00							;g16x16_12_1
   2688  eb00		       55 45 38 b5*	      HEX	554538b5e5c21555
   2689  eb08							;g16x16_12_2
   2690  eb08		       f0 f0 f0 f0*	      HEX	f0f0f0f0f0f0f0f0
   2691  eb10							;g16x16_4color
   2692  eb10		       ff ff ff ff	      HEX	ffffffff
   2693  eb14							;g16x16_4color2
   2694  eb14		       55 55 55 55	      HEX	55555555
   2695  eb18							;g16x16_4color3
   2696  eb18		       55 55 55 55	      HEX	55555555
   2697  eb1c							;g16x16_4color4
   2698  eb1c		       00 00 00 00	      HEX	00000000
   2699  eb20							;g16x16_4color5
   2700  eb20		       00 00 00 00	      HEX	00000000
   2701  eb24							;g16x16_4color6
   2702  eb24		       aa aa aa aa	      HEX	aaaaaaaa
   2703  eb28							;g16x16_4color7
   2704  eb28		       ff ff ff ff	      HEX	ffffffff
   2705  eb2c							;g16x16_4color8
   2706  eb2c		       ff ff ff ff	      HEX	ffffffff
   2707  eb30							;zonebg80x16_16
   2708  eb30		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000
   2709  eb44							;ex1
   2710  eb44		       00 30 40 00	      HEX	00304000
   2711  eb48							;ex2
   2712  eb48		       30 69 9a 40	      HEX	30699a40
   2713  eb4c							;ex3
   2714  eb4c		       05 a5 6d 83	      HEX	05a56d83
   2715  eb50							;ex4
   2716  eb50		       26 9a 68 d8	      HEX	269a68d8
   2717  eb54							;ex5
   2718  eb54		       18 d4 04 69	      HEX	18d40469
   2719  eb58							;ex6
   2720  eb58		       14 00 00 01	      HEX	14000001
   2721  eb5c							;ex7
   2722  eb5c		       40 00 00 01	      HEX	40000001
   2723  eb60							;p1
   2724  eb60		       0d 56		      HEX	0d56
   2725  eb62							;blank
   2726  eb62		       00 00 00 00	      HEX	00000000
   2727  eb66							;font
   2728  eb66		       44 10 40 04*	      HEX	4410400404044410440454444044404044441004504044444454445004104444
   2729  eb86		       54 54 10 40*	      HEX	545410405400101010000000004004400441451000
   2730  eb9b
   2731  ec00					      ORG	$EC00,0	; *************
   2732  ec00
   2733  ec00							;g16x16_12_1
   2734  ec00		       aa 89 38 b5*	      HEX	aa8938b5e5c226aa
   2735  ec08							;g16x16_12_2
   2736  ec08		       af af af af*	      HEX	afafafafafafafaf
   2737  ec10							;g16x16_4color
   2738  ec10		       55 55 55 55	      HEX	55555555
   2739  ec14							;g16x16_4color2
   2740  ec14		       55 55 55 55	      HEX	55555555
   2741  ec18							;g16x16_4color3
   2742  ec18		       00 00 00 00	      HEX	00000000
   2743  ec1c							;g16x16_4color4
   2744  ec1c		       00 00 00 00	      HEX	00000000
   2745  ec20							;g16x16_4color5
   2746  ec20		       aa aa aa aa	      HEX	aaaaaaaa
   2747  ec24							;g16x16_4color6
   2748  ec24		       aa aa aa aa	      HEX	aaaaaaaa
   2749  ec28							;g16x16_4color7
   2750  ec28		       aa aa aa aa	      HEX	aaaaaaaa
   2751  ec2c							;g16x16_4color8
   2752  ec2c		       ff ff ff ff	      HEX	ffffffff
   2753  ec30							;zonebg80x16_16
   2754  ec30		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000
   2755  ec44							;ex1
   2756  ec44		       00 00 00 00	      HEX	00000000
   2757  ec48							;ex2
   2758  ec48		       00 64 a8 00	      HEX	0064a800
   2759  ec4c							;ex3
   2760  ec4c		       00 6e a2 40	      HEX	006ea240
   2761  ec50							;ex4
   2762  ec50		       1b 26 a6 a4	      HEX	1b26a6a4
   2763  ec54							;ex5
   2764  ec54		       12 a5 5a a4	      HEX	12a55aa4
   2765  ec58							;ex6
   2766  ec58		       11 00 00 14	      HEX	11000014
   2767  ec5c							;ex7
   2768  ec5c		       10 00 00 00	      HEX	10000000
   2769  ec60							;p1
   2770  ec60		       0d 56		      HEX	0d56
   2771  ec62							;blank
   2772  ec62		       00 00 00 00	      HEX	00000000
   2773  ec66							;font
   2774  ec66		       44 10 54 14*	      HEX	4410541454045410545444504044505044541004504054444444444454104444
   2775  ec86		       44 10 10 50*	      HEX	441010505500101010000054004004400414441000
   2776  ec9b
   2777  ed00					      ORG	$ED00,0	; *************
   2778  ed00
   2779  ed00							;g16x16_12_1
   2780  ed00		       a0 81 38 b5*	      HEX	a08138b5e5c224a0
   2781  ed08							;g16x16_12_2
   2782  ed08		       55 55 55 55*	      HEX	5555555555555555
   2783  ed10							;g16x16_4color
   2784  ed10		       55 55 55 55	      HEX	55555555
   2785  ed14							;g16x16_4color2
   2786  ed14		       00 00 00 00	      HEX	00000000
   2787  ed18							;g16x16_4color3
   2788  ed18		       00 00 00 00	      HEX	00000000
   2789  ed1c							;g16x16_4color4
   2790  ed1c		       aa aa aa aa	      HEX	aaaaaaaa
   2791  ed20							;g16x16_4color5
   2792  ed20		       aa aa aa aa	      HEX	aaaaaaaa
   2793  ed24							;g16x16_4color6
   2794  ed24		       ff ff ff ff	      HEX	ffffffff
   2795  ed28							;g16x16_4color7
   2796  ed28		       aa aa aa aa	      HEX	aaaaaaaa
   2797  ed2c							;g16x16_4color8
   2798  ed2c		       55 55 55 55	      HEX	55555555
   2799  ed30							;zonebg80x16_16
   2800  ed30		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000
   2801  ed44							;ex1
   2802  ed44		       00 00 00 00	      HEX	00000000
   2803  ed48							;ex2
   2804  ed48		       00 14 14 0c	      HEX	0014140c
   2805  ed4c							;ex3
   2806  ed4c		       00 65 95 03	      HEX	00659503
   2807  ed50							;ex4
   2808  ed50		       16 68 4a 60	      HEX	16684a60
   2809  ed54							;ex5
   2810  ed54		       15 82 a3 54	      HEX	1582a354
   2811  ed58							;ex6
   2812  ed58		       25 51 05 24	      HEX	25510524
   2813  ed5c							;ex7
   2814  ed5c		       00 00 00 04	      HEX	00000004
   2815  ed60							;p1
   2816  ed60		       15 80		      HEX	1580
   2817  ed62							;blank
   2818  ed62		       00 00 00 00	      HEX	00000000
   2819  ed66							;font
   2820  ed66		       44 10 04 04*	      HEX	4410040444544004444444444044404040441004444054444444444440104444
   2821  ed86		       44 54 44 14*	      HEX	445444145400041010000000004004400444451000
   2822  ed9b
   2823  ee00					      ORG	$EE00,0	; *************
   2824  ee00
   2825  ee00							;g16x16_12_1
   2826  ee00		       5a 49 38 b5*	      HEX	5a4938b5e5c2165a
   2827  ee08							;g16x16_12_2
   2828  ee08		       ff ff ff ff*	      HEX	ffffffffffffffff
   2829  ee10							;g16x16_4color
   2830  ee10		       00 00 00 00	      HEX	00000000
   2831  ee14							;g16x16_4color2
   2832  ee14		       00 00 00 00	      HEX	00000000
   2833  ee18							;g16x16_4color3
   2834  ee18		       aa aa aa aa	      HEX	aaaaaaaa
   2835  ee1c							;g16x16_4color4
   2836  ee1c		       aa aa aa aa	      HEX	aaaaaaaa
   2837  ee20							;g16x16_4color5
   2838  ee20		       ff ff ff ff	      HEX	ffffffff
   2839  ee24							;g16x16_4color6
   2840  ee24		       ff ff ff ff	      HEX	ffffffff
   2841  ee28							;g16x16_4color7
   2842  ee28		       55 55 55 55	      HEX	55555555
   2843  ee2c							;g16x16_4color8
   2844  ee2c		       55 55 55 55	      HEX	55555555
   2845  ee30							;zonebg80x16_16
   2846  ee30		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000
   2847  ee44							;ex1
   2848  ee44		       00 00 00 00	      HEX	00000000
   2849  ee48							;ex2
   2850  ee48		       00 c0 00 00	      HEX	00c00000
   2851  ee4c							;ex3
   2852  ee4c		       c0 10 50 00	      HEX	c0105000
   2853  ee50							;ex4
   2854  ee50		       06 a5 79 40	      HEX	06a57940
   2855  ee54							;ex5
   2856  ee54		       31 55 45 13	      HEX	31554513
   2857  ee58							;ex6
   2858  ee58		       01 15 45 50	      HEX	01154550
   2859  ee5c							;ex7
   2860  ee5c		       05 00 00 10	      HEX	05000010
   2861  ee60							;p1
   2862  ee60		       14 00		      HEX	1400
   2863  ee62							;blank
   2864  ee62		       00 00 00 00	      HEX	00000000
   2865  ee66							;font
   2866  ee66		       44 50 04 04*	      HEX	4450040444404044444444444044404040441004444054444444444440104444
   2867  ee86		       44 44 44 04*	      HEX	444444045044441004000000001010400444401000
   2868  ee9b
   2869  ef00					      ORG	$EF00,0	; *************
   2870  ef00
   2871  ef00							;g16x16_12_1
   2872  ef00		       00 01 38 b5*	      HEX	000138b5e5c20400
   2873  ef08							;g16x16_12_2
   2874  ef08		       a0 a0 a0 a0*	      HEX	a0a0a0a0a0a0a0a0
   2875  ef10							;g16x16_4color
   2876  ef10		       00 00 00 00	      HEX	00000000
   2877  ef14							;g16x16_4color2
   2878  ef14		       aa aa aa aa	      HEX	aaaaaaaa
   2879  ef18							;g16x16_4color3
   2880  ef18		       aa aa aa aa	      HEX	aaaaaaaa
   2881  ef1c							;g16x16_4color4
   2882  ef1c		       ff ff ff ff	      HEX	ffffffff
   2883  ef20							;g16x16_4color5
   2884  ef20		       ff ff ff ff	      HEX	ffffffff
   2885  ef24							;g16x16_4color6
   2886  ef24		       55 55 55 55	      HEX	55555555
   2887  ef28							;g16x16_4color7
   2888  ef28		       55 55 55 55	      HEX	55555555
   2889  ef2c							;g16x16_4color8
   2890  ef2c		       00 00 00 00	      HEX	00000000
   2891  ef30							;zonebg80x16_16
   2892  ef30		       55 55 55 55*	      HEX	5555555555555555555555555555555555555555
   2893  ef44							;ex1
   2894  ef44		       00 00 00 00	      HEX	00000000
   2895  ef48							;ex2
   2896  ef48		       00 00 c0 00	      HEX	0000c000
   2897  ef4c							;ex3
   2898  ef4c		       00 00 00 c0	      HEX	000000c0
   2899  ef50							;ex4
   2900  ef50		       00 50 54 00	      HEX	00505400
   2901  ef54							;ex5
   2902  ef54		       01 15 07 40	      HEX	01150740
   2903  ef58							;ex6
   2904  ef58		       00 50 64 40	      HEX	00506440
   2905  ef5c							;ex7
   2906  ef5c		       01 45 45 40	      HEX	01454540
   2907  ef60							;p1
   2908  ef60		       56 00		      HEX	5600
   2909  ef62							;blank
   2910  ef62		       00 00 00 00	      HEX	00000000
   2911  ef66							;font
   2912  ef66		       54 10 54 54*	      HEX	5410545444545454545454505450545454445404444044545454545454544444
   2913  ef86		       44 44 44 54*	      HEX	444444544044541004000000000440545410154000
   2914  ef9b
   2915  ef9b
   2916  ef9b							; Provided under the CC0 license. See the included LICENSE.txt for details.
   2917  ef9b
   2918  ef9b					      ifnconst	bankswitchmode
   2919  ef9b					      if	( * < $f000 )
   2920  f000					      ORG	$F000
   2921  f000					      endif
   2922  f000				  -	      else
   2923  f000				  -	      ifconst	ROM128K
   2924  f000				  -	      if	( * < $f000 )
   2925  f000				  -	      ORG	$27000
   2926  f000				  -	      RORG	$F000
   2927  f000				  -	      endif
   2928  f000				  -	      endif
   2929  f000				  -	      ifconst	ROM144K
   2930  f000				  -	      if	( * < $f000 )
   2931  f000				  -	      ORG	$27000
   2932  f000				  -	      RORG	$F000
   2933  f000				  -	      endif
   2934  f000				  -	      endif
   2935  f000				  -	      ifconst	ROM256K
   2936  f000				  -	      if	( * < $f000 )
   2937  f000				  -	      ORG	$47000
   2938  f000				  -	      RORG	$F000
   2939  f000				  -	      endif
   2940  f000				  -	      endif
   2941  f000				  -	      ifconst	ROM272K
   2942  f000				  -	      if	( * < $f000 )
   2943  f000				  -	      ORG	$47000
   2944  f000				  -	      RORG	$F000
   2945  f000				  -	      endif
   2946  f000				  -	      endif
   2947  f000				  -	      ifconst	ROM512K
   2948  f000				  -	      if	( * < $f000 )
   2949  f000				  -	      ORG	$87000
   2950  f000				  -	      RORG	$F000
   2951  f000				  -	      endif
   2952  f000				  -	      endif
   2953  f000				  -	      ifconst	ROM528K
   2954  f000				  -	      if	( * < $f000 )
   2955  f000				  -	      ORG	$87000
   2956  f000				  -	      RORG	$F000
   2957  f000				  -	      endif
   2958  f000				  -	      endif
   2959  f000					      endif
   2960  f000
   2961  f000							; all of these "modules" have conditional clauses in them, so even though
   2962  f000							; they're always included here, they don't take up rom unless the user
   2963  f000							; explicitly enables support for the feature.
   2964  f000
   2965  f000					      ifnconst	included.7800vox.asm
------- FILE 7800vox.asm LEVEL 2 PASS 3
      0  f000					      include	7800vox.asm
      1  f000							; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  f000
      3  f000							; AtariVox 7800basic wrapper
      4  f000
      5  f000							; to be called with
      6  f000							; A=# of bytes
      7  f000							;
      8  f000
      9  f000				  -	      ifconst	HSSUPPORT
     10  f000				  -
     11  f000				  -AVoxReadBytes
     12  f000				  -	      sta	temp8
     13  f000				  -	      jsr	i2c_startwrite
     14  f000				  -	      bcs	eeprom_error
     15  f000				  -
     16  f000				  -	      lda	HSVoxHi
     17  f000				  -	      jsr	i2c_txbyte
     18  f000				  -	      lda	HSVoxLo
     19  f000				  -	      jsr	i2c_txbyte
     20  f000				  -	      jsr	i2c_stopwrite
     21  f000				  -
     22  f000				  -	      jsr	i2c_startread
     23  f000				  -
     24  f000				  -	      ldx	#0
     25  f000				  -AVoxReadBytesLoop
     26  f000				  -	      jsr	i2c_rxbyte
     27  f000				  -	      sta	eeprombuffer,x
     28  f000				  -	      inx
     29  f000				  -	      cpx	temp8
     30  f000				  -	      bne	AVoxReadBytesLoop
     31  f000				  -	      jsr	i2c_stopread
     32  f000				  -	      lda	#0
     33  f000				  -	      rts
     34  f000				  -
     35  f000				  -			; to be called with
     36  f000				  -			; A=# of bytes
     37  f000				  -			;
     38  f000				  -
     39  f000				  -AVoxWriteBytes
     40  f000				  -	      sta	temp8
     41  f000				  -	      jsr	i2c_startwrite
     42  f000				  -	      bcs	eeprom_error
     43  f000				  -
     44  f000				  -	      lda	HSVoxHi
     45  f000				  -	      jsr	i2c_txbyte
     46  f000				  -	      lda	HSVoxLo
     47  f000				  -	      jsr	i2c_txbyte
     48  f000				  -
     49  f000				  -	      ldx	#$00
     50  f000				  -AVoxWriteBytesLoop
     51  f000				  -	      lda	eeprombuffer,x
     52  f000				  -	      jsr	i2c_txbyte
     53  f000				  -	      inx
     54  f000				  -	      cpx	temp8
     55  f000				  -	      bne	AVoxWriteBytesLoop
     56  f000				  -	      jsr	i2c_stopwrite
     57  f000				  -
     58  f000				  -	      lda	#0
     59  f000				  -	      rts
     60  f000				  -
     61  f000				  -eeprom_error
     62  f000				  -	      lda	#$ff
     63  f000				  -	      rts
     64  f000				  -
     65  f000				  -AVoxDetect
     66  f000				  -
     67  f000				  -	      jsr	i2c_startwrite
     68  f000				  -	      bcs	eeprom_error
     69  f000				  -	      lda	#$30
     70  f000				  -	      jsr	i2c_txbyte
     71  f000				  -	      lda	#$00
     72  f000				  -	      jsr	i2c_txbyte
     73  f000				  -	      jsr	i2c_stopwrite
     74  f000				  -	      rts
     75  f000				  -
     76  f000				  -	      include	"i2c7800.inc"
     77  f000				  -	      I2C_SUBS	temp9
     78  f000				  -
     79  f000					      endif
     80  f000
------- FILE c:\Users\Steve\Desktop\2018dev\7800\7800basic\projects\lessons\lesson1_gfx_modes\lesson1_51.bas.asm
   2967  f000					      endif
   2968  f000					      ifnconst	included.pokeysound.asm
------- FILE pokeysound.asm LEVEL 2 PASS 3
      0  f000					      include	pokeysound.asm
      1  f000							; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  f000
      3  f000
      4  f000				  -	      ifconst	pokeysupport
      5  f000				  -
      6  f000				  -pokeysoundmodulestart
      7  f000				  -
      8  f000				  -mutepokey
      9  f000				  -	      lda	#0
     10  f000				  -	      ldy	#7
     11  f000				  -mutepokeyloop
     12  f000				  -	      sta	pokey1pointlo,y
     13  f000				  -	      sta	(pokeybaselo),y
     14  f000				  -	      dey
     15  f000				  -	      bpl	mutepokeyloop
     16  f000				  -	      rts
     17  f000				  -
     18  f000				  -checkpokeyplaying
     19  f000				  -	      ldx	#6
     20  f000				  -checkpokeyplayingloop
     21  f000				  -	      lda	pokey1pointlo,x
     22  f000				  -	      ora	pokey1pointhi,x
     23  f000				  -	      beq	pokeychannelinactive
     24  f000				  -	      jsr	playpokeysfxA	; x=channel*2
     25  f000				  -pokeychannelinactive
     26  f000				  -	      dex
     27  f000				  -	      dex
     28  f000				  -	      bpl	checkpokeyplayingloop
     29  f000				  -	      rts
     30  f000				  -
     31  f000				  -playpokeysfxA
     32  f000				  -	      txa
     33  f000				  -	      tay
     34  f000				  -	      lda	pokey1tick,x
     35  f000				  -	      beq	playpokeysfxAcont
     36  f000				  -	      sec
     37  f000				  -	      sbc	#1
     38  f000				  -	      sta	pokey1tick,x	; sound resolution is >1 frame, and we're mid-tock...
     39  f000				  -	      rts
     40  f000				  -
     41  f000				  -playpokeysfxAcont
     42  f000				  -	      lda	pokey1frames,x	; set the frame countdown for this sound chunk
     43  f000				  -	      sta	pokey1tick,x
     44  f000				  -
     45  f000				  -	      lda	pokey1priority,x	; decrease the sound's priority if its non-zero
     46  f000				  -	      beq	playpokeysfxAcont2
     47  f000				  -	      sec
     48  f000				  -	      sbc	#1
     49  f000				  -	      sta	pokey1priority,x
     50  f000				  -playpokeysfxAcont2
     51  f000				  -
     52  f000				  -			; *** FREQUENCY
     53  f000				  -	      lda	(pokey1pointlo,x)
     54  f000				  -	      sta	temp1
     55  f000				  -	      clc
     56  f000				  -	      adc	pokey1offset,x	; take into account any pitch modification
     57  f000				  -	      sta	(pokeybaselo),y	; PAUDF0,0
     58  f000				  -
     59  f000				  -			;advance the data pointer +1
     60  f000				  -	      inc	pokey1pointlo,x
     61  f000				  -	      bne	skippokeyhiinc1
     62  f000				  -	      inc	pokey1pointhi,x
     63  f000				  -skippokeyhiinc1
     64  f000				  -
     65  f000				  -			; *** WAVE
     66  f000				  -	      lda	(pokey1pointlo,x)
     67  f000				  -	      asl
     68  f000				  -	      asl
     69  f000				  -	      asl
     70  f000				  -	      asl		; x16
     71  f000				  -
     72  f000				  -			;advance the data pointer +1
     73  f000				  -	      inc	pokey1pointlo,x
     74  f000				  -	      bne	skippokeyhiinc2
     75  f000				  -	      inc	pokey1pointhi,x
     76  f000				  -skippokeyhiinc2
     77  f000				  -
     78  f000				  -	      ora	(pokey1pointlo,x)
     79  f000				  -	      iny
     80  f000				  -	      sta	(pokeybaselo),y
     81  f000				  -
     82  f000				  -	      ora	temp1	; check if F|C|V=0
     83  f000				  -	      beq	zeropokeypoint	; if so, we're at the end of the sound.
     84  f000				  -
     85  f000				  -			; advance the pointer +1, on to the next sound chunk
     86  f000				  -	      inc	pokey1pointlo,x
     87  f000				  -	      bne	skippokeyhiinc3
     88  f000				  -	      inc	pokey1pointhi,x
     89  f000				  -skippokeyhiinc3
     90  f000				  -	      rts
     91  f000				  -
     92  f000				  -zeropokeypoint
     93  f000				  -	      sta	pokey1pointlo,x
     94  f000				  -	      sta	pokey1pointhi,x
     95  f000				  -	      sta	pokey1priority,x
     96  f000				  -	      rts
     97  f000				  -
     98  f000				  -schedulepokeysfx
     99  f000				  -	      ldx	#6
    100  f000				  -schedulepokeysfxloop
    101  f000				  -	      lda	pokey1pointlo,x
    102  f000				  -	      ora	pokey1pointhi,x
    103  f000				  -	      bne	schedulespokeysearch
    104  f000				  -	      jmp	schedulepokeyX	; we found an unused channel, so use it...
    105  f000				  -schedulespokeysearch
    106  f000				  -	      dex
    107  f000				  -	      dex
    108  f000				  -	      bpl	schedulepokeysfxloop
    109  f000				  -
    110  f000				  -			; if we're here, all 4 channels are presently playing a sound...
    111  f000				  -	      ldy	#1
    112  f000				  -	      lda	(temp1),y	; peek at the priority of this sfx...
    113  f000				  -	      bne	schedulepokeysfxcont1
    114  f000				  -	      rts		; ...and skip it if it's 0 priority
    115  f000				  -schedulepokeysfxcont1
    116  f000				  -
    117  f000				  -			; figure out which current sound has the lowest priority...
    118  f000				  -	      lda	#0
    119  f000				  -	      sta	temp8
    120  f000				  -	      lda	pokey1priority
    121  f000				  -	      sta	temp9
    122  f000				  -	      ldx	#6
    123  f000				  -findlowprioritypokeyloop
    124  f000				  -	      lda	pokey1priority,x
    125  f000				  -	      cmp	temp9
    126  f000				  -	      bcs	findlowprioritypokeyloopcontinue
    127  f000				  -	      sta	temp9
    128  f000				  -	      stx	temp8
    129  f000				  -findlowprioritypokeyloopcontinue
    130  f000				  -	      dex
    131  f000				  -	      dex
    132  f000				  -	      bne	findlowprioritypokeyloop
    133  f000				  -	      ldx	temp8	; the low priority channel we'll interrupt
    134  f000				  -
    135  f000				  -schedulepokeyX
    136  f000				  -			;called with X=2*pokey channel to play on...
    137  f000				  -	      ldy	#1	; get priority and sound-resolution (in frames)
    138  f000				  -	      lda	(temp1),y
    139  f000				  -	      sta	pokey1priority,x
    140  f000				  -	      iny
    141  f000				  -	      lda	(temp1),y
    142  f000				  -	      sta	pokey1frames,x
    143  f000				  -
    144  f000				  -	      lda	temp1
    145  f000				  -	      clc
    146  f000				  -	      adc	#3
    147  f000				  -	      sta	pokey1pointlo,x
    148  f000				  -	      lda	temp2
    149  f000				  -	      adc	#0
    150  f000				  -	      sta	pokey1pointhi,x
    151  f000				  -	      lda	temp3
    152  f000				  -	      sta	pokey1offset,x
    153  f000				  -	      lda	#0
    154  f000				  -	      sta	pokey1tick,x
    155  f000				  -	      rts
    156  f000				  -
    157  f000				  -			; pokey detection routine. we check for pokey in the XBOARD/XM location,
    158  f000				  -			; and the standard $4000 location.
    159  f000				  -			; if pokey the pokey is present, this routine will reset it.
    160  f000				  -
    161  f000				  -detectpokeylocation
    162  f000				  -			;XBoard/XM...
    163  f000				  -	      ldx	#2
    164  f000				  -detectpokeyloop
    165  f000				  -	      lda	XCTRL1s
    166  f000				  -	      ora	#%00010100
    167  f000				  -	      and	POKEYXMMASK,x
    168  f000				  -	      sta	XCTRL1s
    169  f000				  -	      sta	XCTRL1
    170  f000				  -
    171  f000				  -	      lda	POKEYCHECKLO,x
    172  f000				  -	      sta	pokeybaselo
    173  f000				  -	      lda	POKEYCHECKHI,x
    174  f000				  -	      sta	pokeybasehi
    175  f000				  -	      jsr	checkforpokey
    176  f000				  -	      lda	pokeydetected
    177  f000				  -	      beq	foundpokeychip
    178  f000				  -	      dex
    179  f000				  -	      bpl	detectpokeyloop
    180  f000				  -foundpokeychip
    181  f000				  -	      eor	#$ff	; invert state for 7800basic if...then test
    182  f000				  -	      sta	pokeydetected
    183  f000				  -	      rts
    184  f000				  -
    185  f000				  -POKEYXMMASK
    186  f000				  -			;     XM POKEY on    XM POKEY off   XM POKEY off
    187  f000				  -	      .byte	%11111111, %11101111, %11101111
    188  f000				  -
    189  f000				  -POKEYCHECKLO
    190  f000				  -	      .byte	<$0450, <$0450, <$4000
    191  f000				  -POKEYCHECKHI
    192  f000				  -	      .byte	>$0450, >$0450, >$4000
    193  f000				  -
    194  f000				  -checkforpokey
    195  f000				  -	      ldy	#$0f
    196  f000				  -	      lda	#$00
    197  f000				  -	      sta	pokeydetected	; start off by assuming pokey will be detected
    198  f000				  -resetpokeyregistersloop
    199  f000				  -	      sta	(pokeybase),y
    200  f000				  -	      dey
    201  f000				  -	      bpl	resetpokeyregistersloop
    202  f000				  -
    203  f000				  -	      ldy	#PAUDCTL
    204  f000				  -	      sta	(pokeybase),y
    205  f000				  -	      ldy	#PSKCTL
    206  f000				  -	      sta	(pokeybase),y
    207  f000				  -
    208  f000				  -			; let the dust settle...
    209  f000				  -	      nop
    210  f000				  -	      nop
    211  f000				  -	      nop
    212  f000				  -
    213  f000				  -	      lda	#4
    214  f000				  -	      sta	temp9
    215  f000				  -pokeycheckloop1
    216  f000				  -			; we're in reset, so the RANDOM register should read $ff...
    217  f000				  -	      ldy	#PRANDOM
    218  f000				  -	      lda	(pokeybase),y
    219  f000				  -	      cmp	#$ff
    220  f000				  -	      bne	nopokeydetected
    221  f000				  -	      dec	temp9
    222  f000				  -	      bne	pokeycheckloop1
    223  f000				  -
    224  f000				  -			; take pokey out of reset...
    225  f000				  -	      ldy	#PSKCTL
    226  f000				  -	      lda	#3
    227  f000				  -	      sta	(pokeybase),y
    228  f000				  -	      ldy	#PAUDCTL
    229  f000				  -	      lda	#0
    230  f000				  -	      sta	(pokeybase),y
    231  f000				  -
    232  f000				  -			; let the dust settle again...
    233  f000				  -	      nop
    234  f000				  -	      nop
    235  f000				  -	      nop
    236  f000				  -
    237  f000				  -	      lda	#4
    238  f000				  -	      sta	temp9
    239  f000				  -pokeycheckloop2
    240  f000				  -			; we're out of reset, so RANDOM should read non-$ff...
    241  f000				  -	      ldy	#PRANDOM
    242  f000				  -	      lda	(pokeybase),y
    243  f000				  -	      cmp	#$ff
    244  f000				  -	      beq	skippokeycheckreturn
    245  f000				  -	      rts
    246  f000				  -skippokeycheckreturn
    247  f000				  -	      dec	temp9
    248  f000				  -	      bne	pokeycheckloop2
    249  f000				  -nopokeydetected
    250  f000				  -	      dec	pokeydetected	; pokeydetected=#$ff
    251  f000				  -	      rts
    252  f000				  -
    253  f000				  -pokeysoundmoduleend
    254  f000				  -
    255  f000				  -	      echo	"  pokeysound assembly: ",[(pokeysoundmoduleend-pokeysoundmodulestart)]d," bytes"
    256  f000				  -
    257  f000					      endif
------- FILE c:\Users\Steve\Desktop\2018dev\7800\7800basic\projects\lessons\lesson1_gfx_modes\lesson1_51.bas.asm
   2970  f000					      endif
   2971  f000					      ifnconst	included.tracker.asm
------- FILE tracker.asm LEVEL 2 PASS 3
      0  f000					      include	tracker.asm
      1  f000							; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  f000
      3  f000
      4  f000				  -	      ifconst	MUSICTRACKER
      5  f000				  -			; ** songtempo lists how many 256ths of a frame a 16th note lasts
      6  f000				  -			; ** the player operates on a 16th note grid.
      7  f000				  -
      8  f000				  -servicesongover
      9  f000				  -	      rts
     10  f000				  -servicesong
     11  f000				  -	      lda	songtempo
     12  f000				  -	      beq	servicesongover	; ** if song is off/paused then return
     13  f000				  -servicesongcontinue
     14  f000				  -	      lda	sfxschedulelock
     15  f000				  -	      sta	sfxschedulemissed
     16  f000				  -	      bne	servicesongover
     17  f000				  -	      lda	songtempo
     18  f000				  -	      clc
     19  f000				  -	      adc	songtick	; add songtempo to songtick until it rolls over
     20  f000				  -	      sta	songtick	; this is how we break away from 50/60Hz timing.
     21  f000				  -	      bcc	servicesongover
     22  f000				  -			; ** if we're here a new 16th note has passed
     23  f000				  -			; ** check if a new note is due on any of the 4 channels
     24  f000				  -servicesongredo
     25  f000				  -	      ldx	#3
     26  f000				  -checkchannelloop
     27  f000				  -	      dec	songchannel1busywait,x
     28  f000				  -	      bpl	carryoncheckingchannel
     29  f000				  -	      txa
     30  f000				  -	      pha		; save X for the loop
     31  f000				  -	      jsr	processsongdata
     32  f000				  -	      pla		; restore X for the loop
     33  f000				  -	      tax
     34  f000				  -carryoncheckingchannel
     35  f000				  -	      dex
     36  f000				  -	      bpl	checkchannelloop
     37  f000				  -	      lda	inactivechannelcount
     38  f000				  -	      cmp	#15
     39  f000				  -	      bne	skipstopsong
     40  f000				  -	      lda	songloops
     41  f000				  -	      bne	doasongloop
     42  f000				  -			;lda #0
     43  f000				  -	      sta	songtempo	; all channels are done. stop the song
     44  f000				  -	      rts
     45  f000				  -doasongloop
     46  f000				  -	      bmi	skipsongloopadjust
     47  f000				  -	      dec	songloops
     48  f000				  -skipsongloopadjust
     49  f000				  -	      jsr	setsongchannels
     50  f000				  -	      jmp	servicesongredo
     51  f000				  -skipstopsong
     52  f000				  -	      rts
     53  f000				  -
     54  f000				  -processsongdata
     55  f000				  -			; channel needs processing
     56  f000				  -			; X=channel #
     57  f000				  -
     58  f000				  -	      txa
     59  f000				  -	      clc
     60  f000				  -	      adc	songchannel1stackdepth,x	; stack depth value will be 0, 4, or 8
     61  f000				  -	      tay
     62  f000				  -
     63  f000				  -
     64  f000				  -			; ** indirect x is cumbersome with mult-byte commands.
     65  f000				  -			; ** setup a pointer to the song data for indirect y addressing.
     66  f000				  -	      lda	songchannel1layer1lo,y
     67  f000				  -	      sta	songdatalo
     68  f000				  -	      lda	songchannel1layer1hi,y
     69  f000				  -	      sta	songdatahi
     70  f000				  -	      ora	songdatalo
     71  f000				  -	      bne	channelhasdata
     72  f000				  -			;channel data is pointing at $0000
     73  f000				  -	      lda	#$7F
     74  f000				  -	      sta	songchannel1busywait,x	; skip a bunch of notes
     75  f000				  -setchannelcountbits
     76  f000				  -	      lda	channel2bits,x
     77  f000				  -	      ora	inactivechannelcount
     78  f000				  -	      sta	inactivechannelcount
     79  f000				  -	      rts
     80  f000				  -channelhasdata
     81  f000				  -
     82  f000				  -	      sty	songstackindex
     83  f000				  -	      ldy	#0
     84  f000				  -	      lda	(songdatalo),y	; ** load in the next byte of song data, so we can decode it
     85  f000				  -	      cmp	#$ff
     86  f000				  -	      bne	carryoncheckingdatatype	; ** $ff=pattern end marker
     87  f000				  -	      jmp	handlechannelEOD
     88  f000				  -
     89  f000				  -carryoncheckingdatatype
     90  f000				  -	      and	#$F0
     91  f000				  -	      cmp	#$C0
     92  f000				  -	      beq	handlechannelrest	; 0000XXXX=rest
     93  f000				  -	      cmp	#$F0
     94  f000				  -	      beq	handlemultibytecommand
     95  f000				  -	      cmp	#$D0
     96  f000				  -	      beq	handlesemiup
     97  f000				  -	      cmp	#$E0
     98  f000				  -	      beq	handlesemidown
     99  f000				  -handlenotedata
    100  f000				  -			; ** TODO: note playing is a terrible choice for fall-through
    101  f000				  -
    102  f000				  -			; ** its simple note data, prepare arguments for schedulesfx
    103  f000				  -
    104  f000				  -			; ** set the note length
    105  f000				  -	      lda	(songdatalo),y
    106  f000				  -	      and	#$0F
    107  f000				  -	      sta	songchannel1busywait,x
    108  f000				  -
    109  f000				  -			; ** load the instrument
    110  f000				  -	      lda	songchannel1instrumentlo,x
    111  f000				  -	      sta	sfxinstrumentlo
    112  f000				  -	      lda	songchannel1instrumenthi,x
    113  f000				  -	      sta	sfxinstrumenthi
    114  f000				  -
    115  f000				  -			; ** get the note, and transpose
    116  f000				  -	      lda	(songdatalo),y
    117  f000				  -	      lsr
    118  f000				  -	      lsr
    119  f000				  -	      lsr
    120  f000				  -	      lsr
    121  f000				  -	      clc
    122  f000				  -	      adc	songchannel1transpose,x	; ** add it to the transpose index
    123  f000				  -			; ** its up the respective SFX scheduler to handle and save the note data
    124  f000				  -	      sta	sfxnoteindex
    125  f000				  -
    126  f000				  -	      lda	#0
    127  f000				  -	      sta	sfxpitchoffset
    128  f000				  -
    129  f000				  -	      jsr	schedulesfx
    130  f000				  -
    131  f000				  -	      jmp	advancethesongpointer1byte	; advance to the next data byte and exit
    132  f000				  -
    133  f000				  -handlechannelrest
    134  f000				  -			; ** set the note length
    135  f000				  -	      lda	(songdatalo),y
    136  f000				  -	      and	#$0F
    137  f000				  -	      sta	songchannel1busywait,x
    138  f000				  -	      jmp	advancethesongpointer1byte	; advance to the next data byte and exit
    139  f000				  -
    140  f000				  -handlesemiup
    141  f000				  -	      lda	(songdatalo),y	; ** reload the song data, so we can get at the lower nibble
    142  f000				  -	      and	#$0f	; ** since we need to mask the nibble of the subtracted value,
    143  f000				  -	      clc
    144  f000				  -handlesemidownentry
    145  f000				  -	      adc	songchannel1transpose,x	; ** add it to the transpose index
    146  f000				  -	      sta	songchannel1transpose,x
    147  f000				  -	      jsr	advancethesongpointer1byte
    148  f000				  -	      jmp	processsongdata	; semi doesn't have note length, so process the next data byte...
    149  f000				  -
    150  f000				  -handlesemidown
    151  f000				  -	      lda	(songdatalo),y	; ** reload the song data, so we can get at the lower nibble
    152  f000				  -	      and	#$0f	; ** since we need to mask the nibble of the subtracted value,
    153  f000				  -	      eor	#$ff	; ** its easier if we negate it, and then add it instead.
    154  f000				  -	      sec
    155  f000				  -	      jmp	handlesemidownentry
    156  f000				  -
    157  f000				  -handlemultibytecommand
    158  f000				  -	      lda	(songdatalo),y	; ** reload the song data, so we can get at the lower nibble
    159  f000				  -	      and	#$0f	; ** since we need to mask the nibble of the subtracted value,
    160  f000				  -	      cmp	#$08	; ** load new instrument?
    161  f000				  -	      bne	nothandleinstrumentchange
    162  f000				  -handleinstrumentchange
    163  f000				  -	      iny
    164  f000				  -	      lda	(songdatalo),y
    165  f000				  -	      sta	songchannel1instrumentlo,x
    166  f000				  -	      iny
    167  f000				  -	      lda	(songdatalo),y
    168  f000				  -	      sta	songchannel1instrumenthi,x
    169  f000				  -	      lda	#3
    170  f000				  -	      jsr	advancethesongpointerNbytes	; advance 3 bytes
    171  f000				  -	      jmp	processsongdata
    172  f000				  -
    173  f000				  -nothandleinstrumentchange
    174  f000				  -	      cmp	#$09	; ** absolute tempo change?
    175  f000				  -	      bne	nothandletempochange
    176  f000				  -	      lda	#0
    177  f000				  -	      sta	songtempo
    178  f000				  -handlerelativetempochange
    179  f000				  -	      iny
    180  f000				  -	      lda	(songdatalo),y
    181  f000				  -	      clc
    182  f000				  -	      adc	songtempo
    183  f000				  -	      sta	songtempo
    184  f000				  -	      lda	#2
    185  f000				  -	      jsr	advancethesongpointerNbytes	; advance 2 bytes
    186  f000				  -	      jmp	processsongdata
    187  f000				  -
    188  f000				  -nothandletempochange
    189  f000				  -	      cmp	#$0A	; ** relative tempo change?:
    190  f000				  -	      beq	handlerelativetempochange
    191  f000				  -	      cmp	#$0B	; ** octave/semi change?
    192  f000				  -	      beq	handleoctavesemichange
    193  f000				  -handlepatterndata
    194  f000				  -			; ** if we're here its a pattern/loop "subroutine"
    195  f000				  -			; ** move the channel's "stack" pointer and populate the new stack level
    196  f000				  -
    197  f000				  -	      lda	#4
    198  f000				  -	      clc
    199  f000				  -	      adc	songchannel1stackdepth,x
    200  f000				  -	      sta	songchannel1stackdepth,x	; stack depth value will be 0, 4, or 8
    201  f000				  -
    202  f000				  -	      stx	inttemp6	; about to invalidate x. save it.
    203  f000				  -	      lda	songstackindex
    204  f000				  -	      adc	#4
    205  f000				  -	      tax
    206  f000				  -
    207  f000				  -	      lda	(songdatalo),y
    208  f000				  -	      and	#$7
    209  f000				  -	      sta	songchannel1layer1loops,x
    210  f000				  -	      iny
    211  f000				  -	      lda	(songdatalo),y
    212  f000				  -	      sta	songchannel1layer1lo,x
    213  f000				  -	      iny
    214  f000				  -	      lda	(songdatalo),y
    215  f000				  -	      sta	songchannel1layer1hi,x
    216  f000				  -
    217  f000				  -	      ldx	inttemp6	; restore x with the channel #
    218  f000				  -
    219  f000				  -			; ** advance will operate on the old stack level, since we didn't store the updated songstackindex...
    220  f000				  -	      lda	#3
    221  f000				  -	      jsr	advancethesongpointerNbytes	; advance 3 bytes
    222  f000				  -
    223  f000				  -			; ** ...but the new stack level will be correctly picked up when we process the next byte.
    224  f000				  -	      jmp	processsongdata
    225  f000				  -
    226  f000				  -handlechannelEOD
    227  f000				  -			; ** check if there are loops remaining on the pattern
    228  f000				  -	      stx	inttemp6
    229  f000				  -	      ldx	songstackindex
    230  f000				  -	      dec	songchannel1layer1loops,x
    231  f000				  -	      bmi	handlechannelEODnoloop
    232  f000				  -			; ** loops are remaining. set the pattern pointer to the pattern start, which is contained after the EOD
    233  f000				  -	      iny
    234  f000				  -	      lda	(songdatalo),y
    235  f000				  -	      sta	songchannel1layer1lo,x
    236  f000				  -	      iny
    237  f000				  -	      lda	(songdatalo),y
    238  f000				  -	      sta	songchannel1layer1hi,x
    239  f000				  -	      ldx	inttemp6
    240  f000				  -	      jmp	processsongdata	; EOD handling doesn't have note length, so process the next data byte...
    241  f000				  -
    242  f000				  -handlechannelEODnoloop
    243  f000				  -			; this pattern/loop is done playing. "pop" the stack
    244  f000				  -	      ldx	inttemp6
    245  f000				  -	      lda	songchannel1stackdepth,x
    246  f000				  -	      beq	handlerootchannelEOD
    247  f000				  -	      sec
    248  f000				  -	      sbc	#4
    249  f000				  -	      sta	songchannel1stackdepth,x
    250  f000				  -	      jmp	processsongdata	; EOD handling doesn't have note length, so process the next data byte...
    251  f000				  -
    252  f000				  -handlerootchannelEOD
    253  f000				  -			; this channel is done. point it to $ff data so we no longer process this channel.
    254  f000				  -	      lda	#0
    255  f000				  -	      sta	songchannel1layer1lo,x
    256  f000				  -	      sta	songchannel1layer1hi,x
    257  f000				  -	      sta	songchannel1busywait,x
    258  f000				  -	      jmp	setchannelcountbits
    259  f000				  -	      rts
    260  f000				  -
    261  f000				  -nothandlepatternchange
    262  f000				  -handleoctavesemichange
    263  f000				  -	      iny
    264  f000				  -	      lda	(songdatalo),y
    265  f000				  -	      sta	songchannel1transpose,x
    266  f000				  -	      lda	#2
    267  f000				  -	      jsr	advancethesongpointerNbytes	; advance 2 bytes
    268  f000				  -	      jmp	processsongdata
    269  f000				  -
    270  f000				  -advancethesongpointer1byte
    271  f000				  -	      txa
    272  f000				  -	      ldx	songstackindex
    273  f000				  -	      inc	songchannel1layer1lo,x
    274  f000				  -	      bne	skiphiadvancethesongpointer1byte
    275  f000				  -	      inc	songchannel1layer1hi,x
    276  f000				  -skiphiadvancethesongpointer1byte
    277  f000				  -	      tax
    278  f000				  -	      rts
    279  f000				  -
    280  f000				  -advancethesongpointerNbytes
    281  f000				  -			; entered with A=# of byte to advance
    282  f000				  -	      stx	inttemp6
    283  f000				  -	      ldx	songstackindex
    284  f000				  -	      clc
    285  f000				  -	      adc	songchannel1layer1lo,x
    286  f000				  -	      sta	songchannel1layer1lo,x
    287  f000				  -	      lda	#0
    288  f000				  -	      adc	songchannel1layer1hi,x
    289  f000				  -	      sta	songchannel1layer1hi,x
    290  f000				  -	      ldx	inttemp6
    291  f000				  -	      rts
    292  f000				  -
    293  f000				  -clearsongmemory
    294  f000				  -	      lda	#0
    295  f000				  -	      ldx	#(songchannel4instrumenthi-songchannel1layer1lo)
    296  f000				  -clearsongmemoryloop1
    297  f000				  -	      sta	songchannel1layer1lo,x
    298  f000				  -	      dex
    299  f000				  -	      bpl	clearsongmemoryloop1
    300  f000				  -
    301  f000				  -	      ldx	#(songchannel4stackdepth-songchannel1layer1loops)
    302  f000				  -clearsongmemoryloop2
    303  f000				  -	      sta	songchannel1layer1loops,x
    304  f000				  -	      dex
    305  f000				  -	      bpl	clearsongmemoryloop2
    306  f000				  -
    307  f000				  -	      lda	#$ff
    308  f000				  -	      ldx	#3
    309  f000				  -clearsongmemoryloop3
    310  f000				  -	      sta	songchannel1busywait,x
    311  f000				  -	      dex
    312  f000				  -	      bpl	clearsongmemoryloop3
    313  f000				  -	      rts
    314  f000				  -
    315  f000				  -setsongchannels
    316  f000				  -	      jsr	clearsongmemory
    317  f000				  -	      ldy	#7
    318  f000				  -	      ldx	#3
    319  f000				  -setsongchannelsloop
    320  f000				  -	      lda	(songpointerlo),y
    321  f000				  -	      sta	songchannel1layer1hi,x
    322  f000				  -	      dey
    323  f000				  -	      lda	(songpointerlo),y
    324  f000				  -	      sta	songchannel1layer1lo,x
    325  f000				  -	      dex
    326  f000				  -	      dey
    327  f000				  -	      bpl	setsongchannelsloop
    328  f000				  -	      rts
    329  f000				  -
    330  f000				  -channel2bits
    331  f000				  -	      .byte	1,2,4,8
    332  f000				  -
    333  f000				  -tiatrackeroctavenotes
    334  f000				  -	      ifconst	BUZZBASS
    335  f000				  -LOWC       =	15
    336  f000				  -	      else
    337  f000				  -LOWC       =	14
    338  f000				  -	      endif
    339  f000				  -			; ****** ELECTRONIC (0 to 11)
    340  f000				  -	      .byte	LOWC,20	; c0	 16.1Hz
    341  f000				  -	      .byte	LOWC,18	; c#0
    342  f000				  -	      .byte	LOWC,17	; d0
    343  f000				  -	      .byte	LOWC,16	; d#0
    344  f000				  -	      .byte	LOWC,15	; e0
    345  f000				  -	      .byte	LOWC,14	; f0  (very off)
    346  f000				  -	      .byte	LOWC,14	; f#0
    347  f000				  -	      .byte	LOWC,13	; g0
    348  f000				  -	      .byte	LOWC,12	; g#0
    349  f000				  -	      .byte	LOWC,11	; a0
    350  f000				  -	      .byte	LOWC,11	; a#0 (very off)
    351  f000				  -	      .byte	LOWC,10	; b0	 30.7Hz
    352  f000				  -
    353  f000				  -			; ****** SLIGHTLY BUZZY (12 to 23)
    354  f000				  -	      .byte	6,30	; c1	 32.7Hz
    355  f000				  -	      .byte	6,28	; c#1
    356  f000				  -	      .byte	6,27	; d1
    357  f000				  -	      .byte	6,25	; d#1
    358  f000				  -	      .byte	6,24	; e1
    359  f000				  -	      .byte	6,22	; f1
    360  f000				  -	      .byte	6,21	; f#1
    361  f000				  -	      .byte	6,20	; g1
    362  f000				  -	      .byte	6,18	; g#1
    363  f000				  -	      .byte	6,17	; a1
    364  f000				  -	      .byte	6,16	; a#1
    365  f000				  -	      .byte	6,15	; b1	 63.4Hz
    366  f000				  -
    367  f000				  -			; ****** BUZZY (24 to 39)
    368  f000				  -	      .byte	1,31	; c2	 65.5
    369  f000				  -	      .byte	1,30	; c#2	 67.6
    370  f000				  -	      .byte	1,27	; d2	 72.3
    371  f000				  -	      .byte	1,26	; d#2	 77.6
    372  f000				  -	      .byte	1,24	; e2
    373  f000				  -	      .byte	1,23	; f2
    374  f000				  -	      .byte	1,22	; f#2
    375  f000				  -	      .byte	1,20	; g2
    376  f000				  -	      .byte	1,19	; g#2
    377  f000				  -	      .byte	1,18	; a2
    378  f000				  -	      .byte	1,17	; a#2
    379  f000				  -	      .byte	1,16	; b2
    380  f000				  -	      .byte	1,15	; c3	126.8Hz
    381  f000				  -	      .byte	1,14	; c#3
    382  f000				  -	      .byte	1,13	; d3	149.7Hz
    383  f000				  -	      .byte	1,12	; d#3	161.2Hz (very off)
    384  f000				  -			; ****** PURE (40 to 71) - best key is A3 Major
    385  f000				  -	      .byte	12,31	; e3	163.8Hz
    386  f000				  -	      .byte	12,29	; f3
    387  f000				  -	      .byte	12,28	; f#3
    388  f000				  -	      .byte	12,26	; g3
    389  f000				  -	      .byte	12,24	; g#3
    390  f000				  -	      .byte	12,23	; a3  songs in key of A benefit from Perceptual Tuning
    391  f000				  -	      .byte	12,22	; a#3
    392  f000				  -	      .byte	12,20	; b3
    393  f000				  -	      .byte	12,19	; c4  (middle C)
    394  f000				  -	      .byte	12,18	; c#4
    395  f000				  -	      .byte	12,17	; d4
    396  f000				  -	      .byte	12,16	; d#4
    397  f000				  -	      .byte	12,15	; e4
    398  f000				  -	      .byte	12,14	; f4
    399  f000				  -	      .byte	12,13	; f#4
    400  f000				  -	      .byte	12,12	; g4  (very off)
    401  f000				  -	      .byte	12,12	; g#4
    402  f000				  -	      .byte	12,11	; a4
    403  f000				  -	      .byte	12,10	; a#4
    404  f000				  -	      .byte	4,31	; b4
    405  f000				  -	      .byte	4,29	; c5
    406  f000				  -	      .byte	4,28	; c#5
    407  f000				  -	      .byte	4,26	; d5
    408  f000				  -	      .byte	4,24	; d#5
    409  f000				  -	      .byte	4,23	; e5
    410  f000				  -	      .byte	4,22	; f5
    411  f000				  -	      .byte	4,20	; f#5
    412  f000				  -	      .byte	4,19	; g5
    413  f000				  -	      .byte	4,18	; g#5
    414  f000				  -	      .byte	4,17	; a5
    415  f000				  -	      .byte	4,16	; a#5
    416  f000				  -	      .byte	4,15	; b5
    417  f000				  -
    418  f000				  -			; ****** TUNED WIND (72 to 83)
    419  f000				  -	      .byte	8,30	; c
    420  f000				  -	      .byte	8,28	; c#
    421  f000				  -	      .byte	8,27	; d
    422  f000				  -	      .byte	8,25	; d#
    423  f000				  -	      .byte	8,24	; e
    424  f000				  -	      .byte	8,22	; f
    425  f000				  -	      .byte	8,21	; f#
    426  f000				  -	      .byte	8,20	; g
    427  f000				  -	      .byte	8,18	; g#
    428  f000				  -	      .byte	8,17	; a
    429  f000				  -	      .byte	8,16	; a#
    430  f000				  -	      .byte	8,15	; b
    431  f000				  -
    432  f000				  -	      include	"tiadrumkit.asm"
    433  f000				  -
    434  f000					      endif		;MUSICTRACKER
------- FILE c:\Users\Steve\Desktop\2018dev\7800\7800basic\projects\lessons\lesson1_gfx_modes\lesson1_51.bas.asm
   2973  f000					      endif
   2974  f000					      ifnconst	included.hiscore.asm
------- FILE hiscore.asm LEVEL 2 PASS 3
      0  f000					      include	hiscore.asm
      1  f000							; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  f000
      3  f000				  -	      ifconst	HSSUPPORT
      4  f000				  -detectatarivoxeeprom
      5  f000				  -hiscoremodulestart
      6  f000				  -			; do a test to see if atarivox eeprom can be accessed, and save results
      7  f000				  -	      jsr	AVoxDetect
      8  f000				  -	      eor	#$ff	; invert for easy 7800basic if...then logic
      9  f000				  -	      sta	avoxdetected
     10  f000				  -	      lda	#$0
     11  f000				  -	      sta	SWACNT
     12  f000				  -	      lda	avoxdetected
     13  f000				  -	      rts
     14  f000				  -
     15  f000				  -detecthsc
     16  f000				  -			; check for the HSC ROM signature...
     17  f000				  -	      lda	XCTRL1s
     18  f000				  -	      ora	#%00001100
     19  f000				  -	      sta	XCTRL1s
     20  f000				  -	      sta	XCTRL1
     21  f000				  -	      lda	$3900
     22  f000				  -	      cmp	#$C6
     23  f000				  -	      bne	detecthscfail
     24  f000				  -	      lda	$3904
     25  f000				  -	      cmp	#$FE
     26  f000				  -	      bne	detecthscfail
     27  f000				  -			; check if it's initialized...
     28  f000				  -	      ldy	#0
     29  f000				  -	      lda	#$ff
     30  f000				  -checkhscinit
     31  f000				  -	      and	$1000,y
     32  f000				  -	      dey
     33  f000				  -	      bpl	checkhscinit
     34  f000				  -	      cmp	#$ff
     35  f000				  -	      bne	hscisalreadyinit
     36  f000				  -			; if we're here, we need to do a minimal HSC init...
     37  f000				  -	      ldy	#$28
     38  f000				  -hscinitloop1
     39  f000				  -	      lda	hscheader,y
     40  f000				  -	      sta	$1000,y
     41  f000				  -	      dey
     42  f000				  -	      bpl	hscinitloop1
     43  f000				  -	      ldy	#$89
     44  f000				  -	      lda	#$7F
     45  f000				  -hscinitloop2
     46  f000				  -	      sta	$10B3,y
     47  f000				  -	      dey
     48  f000				  -	      cpy	#$ff
     49  f000				  -	      bne	hscinitloop2
     50  f000				  -hscisalreadyinit
     51  f000				  -	      lda	#$ff
     52  f000				  -	      rts
     53  f000				  -hscheader
     54  f000				  -	      .byte	$00,$00,$68,$83,$AA,$55,$9C,$FF,$07,$12,$02,$1F,$00,$00,$00,$00
     55  f000				  -	      .byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     56  f000				  -	      .byte	$00,$00,$00,$00,$00,$00,$00,$00,$03
     57  f000				  -detecthscfail
     58  f000				  -	      lda	XCTRL1s
     59  f000				  -	      and	#%11110111
     60  f000				  -	      sta	XCTRL1s
     61  f000				  -	      lda	#0
     62  f000				  -	      rts
     63  f000					      endif		; HSSUPPORT
     64  f000
     65  f000				  -	      ifconst	HSSUPPORT
     66  f000				  -	      ifnconst	hiscorefont
     67  f000				  -	      echo	""
     68  f000				  -	      echo	"WARNING: High score support is enabled, but the hiscorefont.png was"
     69  f000				  -	      echo	" NOT imported with incgraphic. The high score display code"
     70  f000				  -	      echo	" has been omitted from this build."
     71  f000				  -	      echo	""
     72  f000				  -	      else
     73  f000				  -hscdrawscreen
     74  f000				  -
     75  f000				  -			; we use 20 lines on a 24 line display
     76  f000				  -			; HSSCOREY to dynamically centers based on
     77  f000				  -			;HSSCOREY = 0
     78  f000				  -HSSCOREY   =	((WZONECOUNT*WZONEHEIGHT/8)-22)/2
     79  f000				  -HSCURSORY  =	((HSSCOREY/(WZONEHEIGHT/8))*WZONEHEIGHT)
     80  f000				  -
     81  f000				  -	      ifconst	HSSCORESIZE
     82  f000				  -SCORESIZE  =	HSSCORESIZE
     83  f000				  -	      else
     84  f000				  -SCORESIZE  =	6
     85  f000				  -	      endif
     86  f000				  -
     87  f000				  -			;save shadow registers for later return...
     88  f000				  -	      lda	sCTRL
     89  f000				  -	      sta	ssCTRL
     90  f000				  -	      lda	sCHARBASE
     91  f000				  -	      sta	ssCHARBASE
     92  f000				  -	      lda	#$60
     93  f000				  -	      sta	charactermode
     94  f000				  -	      jsr	drawwait
     95  f000				  -	      jsr	blacken320colors
     96  f000				  -	      jsr	clearscreen
     97  f000				  -
     98  f000				  -			;set the character base to the HSC font
     99  f000				  -	      lda	#>hiscorefont
    100  f000				  -	      sta	CHARBASE
    101  f000				  -	      sta	sCHARBASE
    102  f000				  -	      lda	#%01000011	;Enable DMA, mode=320A
    103  f000				  -	      sta	CTRL
    104  f000				  -	      sta	sCTRL
    105  f000				  -
    106  f000				  -	      lda	#60
    107  f000				  -	      sta	hsjoydebounce
    108  f000				  -
    109  f000				  -	      lda	#0
    110  f000				  -	      sta	hscursorx
    111  f000				  -	      sta	framecounter
    112  f000				  -	      ifnconst	HSCOLORCHASESTART
    113  f000				  -	      lda	#$8D	; default is blue. why not?
    114  f000				  -	      else
    115  f000				  -	      lda	#HSCOLORCHASESTART
    116  f000				  -	      endif
    117  f000				  -	      sta	hscolorchaseindex
    118  f000				  -
    119  f000				  -	      lda	#$0F
    120  f000				  -	      sta	P0C2	; base text is white
    121  f000				  -
    122  f000				  -	      jsr	hschasecolors
    123  f000				  -			; ** plot all of the initials
    124  f000				  -	      lda	#<HSRAMInitials
    125  f000				  -	      sta	temp1	; charmaplo
    126  f000				  -	      lda	#>HSRAMInitials
    127  f000				  -	      sta	temp2	; charmaphi
    128  f000				  -	      lda	#32+29	; palette=0-29 | 32-(width=3)
    129  f000				  -	      sta	temp3	; palette/width
    130  f000				  -	      lda	#104
    131  f000				  -	      sta	temp4	; X
    132  f000				  -	      lda	#((HSSCOREY+6)/(WZONEHEIGHT/8))
    133  f000				  -	      sta	temp5	; Y
    134  f000				  -plothsinitialsloop
    135  f000				  -	      jsr	plotcharacters
    136  f000				  -	      clc
    137  f000				  -	      lda	temp3
    138  f000				  -	      adc	#32
    139  f000				  -	      sta	temp3
    140  f000				  -	      inc	temp5
    141  f000				  -	      if	WZONEHEIGHT = 8
    142  f000				  -	      inc	temp5
    143  f000				  -	      endif
    144  f000				  -	      clc
    145  f000				  -	      lda	#3
    146  f000				  -	      adc	temp1
    147  f000				  -	      sta	temp1
    148  f000				  -	      cmp	#(<(HSRAMInitials+15))
    149  f000				  -	      bcc	plothsinitialsloop
    150  f000				  -
    151  f000				  -	      ifconst	HSGAMENAMELEN
    152  f000				  -			;plot the game name...
    153  f000				  -	      lda	#<HSGAMENAMEtable
    154  f000				  -	      sta	temp1	; charmaplo
    155  f000				  -	      lda	#>HSGAMENAMEtable
    156  f000				  -	      sta	temp2	; charmaphi
    157  f000				  -	      lda	#(32-HSGAMENAMELEN)	; palette=0*29 | 32-(width=3)
    158  f000				  -	      sta	temp3	; palette/width
    159  f000				  -	      lda	#(80-(HSGAMENAMELEN*2))
    160  f000				  -	      sta	temp4	; X
    161  f000				  -	      lda	#((HSSCOREY+0)/(WZONEHEIGHT/8))
    162  f000				  -	      sta	temp5	; Y
    163  f000				  -	      jsr	plotcharacters
    164  f000				  -	      endif		; HSGAMENAMELEN
    165  f000				  -
    166  f000				  -			;plot "difficulty"...
    167  f000				  -	      ldy	gamedifficulty
    168  f000				  -	      ifnconst	HSNOLEVELNAMES
    169  f000				  -	      lda	highscoredifficultytextlo,y
    170  f000				  -	      sta	temp1
    171  f000				  -	      lda	highscoredifficultytexthi,y
    172  f000				  -	      sta	temp2
    173  f000				  -	      sec
    174  f000				  -	      lda	#32
    175  f000				  -	      sbc	highscoredifficultytextlen,y
    176  f000				  -	      sta	temp3	; palette/width
    177  f000				  -	      sec
    178  f000				  -	      lda	#40
    179  f000				  -	      sbc	highscoredifficultytextlen,y
    180  f000				  -	      asl
    181  f000				  -	      sta	temp4	; X
    182  f000				  -	      else
    183  f000				  -	      lda	#<HSHIGHSCOREStext
    184  f000				  -	      sta	temp1	; charmaplo
    185  f000				  -	      lda	#>HSHIGHSCOREStext
    186  f000				  -	      sta	temp2	; charmaphi
    187  f000				  -	      lda	#(32-11)	; palette=0*29 | 32-(width=3)
    188  f000				  -	      sta	temp3	; palette/width
    189  f000				  -	      lda	#(80-(11*2))
    190  f000				  -	      sta	temp4	; X
    191  f000				  -	      endif		; HSNOLEVELNAMES
    192  f000				  -
    193  f000				  -	      lda	#((HSSCOREY+2)/(WZONEHEIGHT/8))
    194  f000				  -	      sta	temp5	; Y
    195  f000				  -	      jsr	plotcharacters
    196  f000				  -	      ldy	hsdisplaymode	; 0=attact mode, 1=player eval, 2=player 1 eval, 3=player 2 player eval
    197  f000				  -	      bne	carronwithscoreevaluation
    198  f000				  -	      jmp	donoscoreevaluation
    199  f000				  -carronwithscoreevaluation
    200  f000				  -	      dey
    201  f000				  -	      lda	highscorelabeltextlo,y
    202  f000				  -	      sta	temp1
    203  f000				  -	      lda	highscorelabeltexthi,y
    204  f000				  -	      sta	temp2
    205  f000				  -	      sec
    206  f000				  -	      lda	#(32-15)	; palette=0*29 | 32-(width=3)
    207  f000				  -	      sta	temp3	; palette/width
    208  f000				  -	      lda	highscorelabeladjust1,y
    209  f000				  -	      sta	temp4	; X
    210  f000				  -	      lda	#((HSSCOREY+18)/(WZONEHEIGHT/8))
    211  f000				  -	      sta	temp5	; Y
    212  f000				  -	      jsr	plotcharacters
    213  f000				  -
    214  f000				  -	      ldy	hsdisplaymode	; 0=attact mode, 1=player eval, 2=player 1 eval, 3=player 2 player eval
    215  f000				  -	      dey
    216  f000				  -			;plot the current player score...
    217  f000				  -	      lda	#(32-SCORESIZE)	; palette=0*32
    218  f000				  -	      sta	temp3	; palette/width
    219  f000				  -	      lda	highscorelabeladjust2,y
    220  f000				  -	      sta	temp4	; X
    221  f000				  -	      lda	#((HSSCOREY+18)/(WZONEHEIGHT/8))
    222  f000				  -	      sta	temp5	; Y
    223  f000				  -
    224  f000				  -	      lda	scorevarlo,y
    225  f000				  -	      sta	temp7	; score variable lo
    226  f000				  -	      lda	scorevarhi,y
    227  f000				  -	      sta	temp8	; score variable hi
    228  f000				  -
    229  f000				  -	      lda	#(hiscorefont_mode | %01100000)	; charactermode
    230  f000				  -	      sta	temp9
    231  f000				  -
    232  f000				  -	      lda	#<(hiscorefont+33)	; +33 to get to '0' character
    233  f000				  -	      sta	temp1	; charmaplo
    234  f000				  -	      lda	#>(hiscorefont+33)
    235  f000				  -	      sta	temp2	; charmaphi
    236  f000				  -	      lda	#SCORESIZE
    237  f000				  -	      sta	temp6
    238  f000				  -	      ifnconst	DOUBLEWIDE
    239  f000				  -	      jsr	plotvalue
    240  f000				  -	      else
    241  f000				  -	      jsr	plotvaluedw
    242  f000				  -	      endif
    243  f000				  -
    244  f000				  -USED_PLOTVALUE =	1	; ensure that plotvalue gets compiled in
    245  f000				  -
    246  f000				  -	      ifconst	HSGAMERANKS
    247  f000				  -
    248  f000				  -	      ldx	#$ff	; start at 0 after the inx...
    249  f000				  -comparescore2rankloop
    250  f000				  -	      inx
    251  f000				  -	      ldy	#0
    252  f000				  -	      lda	rankvalue_0,x
    253  f000				  -	      cmp	(temp7),y
    254  f000				  -	      bcc	score2rankloopdone
    255  f000				  -	      bne	comparescore2rankloop
    256  f000				  -	      iny
    257  f000				  -	      lda	rankvalue_1,x
    258  f000				  -	      cmp	(temp7),y
    259  f000				  -	      bcc	score2rankloopdone
    260  f000				  -	      bne	comparescore2rankloop
    261  f000				  -	      iny
    262  f000				  -	      lda	(temp7),y
    263  f000				  -	      cmp	rankvalue_2,x
    264  f000				  -	      bcs	score2rankloopdone
    265  f000				  -	      jmp	comparescore2rankloop
    266  f000				  -score2rankloopdone
    267  f000				  -	      stx	hsnewscorerank
    268  f000				  -
    269  f000				  -	      lda	ranklabello,x
    270  f000				  -	      sta	temp1
    271  f000				  -	      lda	ranklabelhi,x
    272  f000				  -	      sta	temp2
    273  f000				  -	      sec
    274  f000				  -	      lda	#32	; palette=0*29 | 32-(width=3)
    275  f000				  -	      sbc	ranklabellengths,x
    276  f000				  -	      sta	temp3	; palette/width
    277  f000				  -	      sec
    278  f000				  -	      lda	#(40+6)
    279  f000				  -	      sbc	ranklabellengths,x
    280  f000				  -	      asl
    281  f000				  -	      sta	temp4	; X
    282  f000				  -	      lda	#((HSSCOREY+20)/(WZONEHEIGHT/8))
    283  f000				  -	      sta	temp5	; Y
    284  f000				  -	      jsr	plotcharacters
    285  f000				  -
    286  f000				  -	      ldx	hsnewscorerank
    287  f000				  -
    288  f000				  -	      lda	#<highscoreranklabel
    289  f000				  -	      sta	temp1
    290  f000				  -	      lda	#>highscoreranklabel
    291  f000				  -	      sta	temp2
    292  f000				  -
    293  f000				  -	      lda	#(32-5)	; palette=0*29 | 32-(width=3)
    294  f000				  -	      sta	temp3	; palette/width
    295  f000				  -	      lda	#(40-6)
    296  f000				  -	      sec
    297  f000				  -	      sbc	ranklabellengths,x
    298  f000				  -	      asl
    299  f000				  -	      sta	temp4	; X
    300  f000				  -	      lda	#((HSSCOREY+20)/(WZONEHEIGHT/8))
    301  f000				  -	      sta	temp5	; Y
    302  f000				  -	      jsr	plotcharacters
    303  f000				  -	      endif
    304  f000				  -
    305  f000				  -
    306  f000				  -			; ** which line did this player beat?
    307  f000				  -	      lda	#$ff
    308  f000				  -	      sta	hsnewscoreline
    309  f000				  -	      ldx	#$fd
    310  f000				  -comparescoreadd2x
    311  f000				  -	      inx
    312  f000				  -comparescoreadd1x
    313  f000				  -	      inx
    314  f000				  -comparescore2lineloop
    315  f000				  -	      inc	hsnewscoreline
    316  f000				  -	      inx		; initialrun, x=0
    317  f000				  -	      cpx	#15
    318  f000				  -	      beq	nohighscoreforyou
    319  f000				  -	      ldy	#0
    320  f000				  -	      lda	HSRAMScores,x
    321  f000				  -	      cmp	(temp7),y	; first score digit
    322  f000				  -	      bcc	score2lineloopdonedel1x
    323  f000				  -	      bne	comparescoreadd2x
    324  f000				  -	      iny
    325  f000				  -	      inx
    326  f000				  -	      lda	HSRAMScores,x
    327  f000				  -	      cmp	(temp7),y
    328  f000				  -	      bcc	score2lineloopdonedel2x
    329  f000				  -	      bne	comparescoreadd1x
    330  f000				  -	      iny
    331  f000				  -	      inx
    332  f000				  -	      lda	(temp7),y
    333  f000				  -	      cmp	HSRAMScores,x
    334  f000				  -	      bcs	score2lineloopdonedel3x
    335  f000				  -	      jmp	comparescore2lineloop
    336  f000				  -nohighscoreforyou
    337  f000				  -	      lda	#$ff
    338  f000				  -	      sta	hsnewscoreline
    339  f000				  -	      sta	countdownseconds
    340  f000				  -	      jmp	donoscoreevaluation
    341  f000				  -score2lineloopdonedel3x
    342  f000				  -	      dex
    343  f000				  -score2lineloopdonedel2x
    344  f000				  -	      dex
    345  f000				  -score2lineloopdonedel1x
    346  f000				  -	      dex
    347  f000				  -
    348  f000				  -			; 0 1 2
    349  f000				  -			; 3 4 5
    350  f000				  -			; 6 7 8
    351  f000				  -			; 9 0 1
    352  f000				  -			; 2 3 4
    353  f000				  -
    354  f000				  -	      stx	temp9
    355  f000				  -	      cpx	#11
    356  f000				  -	      beq	postsortscoresuploop
    357  f000				  -	      ldx	#11
    358  f000				  -sortscoresuploop
    359  f000				  -	      lda	HSRAMScores,x
    360  f000				  -	      sta	HSRAMScores+3,x
    361  f000				  -	      lda	HSRAMInitials,x
    362  f000				  -	      sta	HSRAMInitials+3,x
    363  f000				  -	      dex
    364  f000				  -	      cpx	temp9
    365  f000				  -	      bne	sortscoresuploop
    366  f000				  -postsortscoresuploop
    367  f000				  -
    368  f000				  -			;stick the score and cleared initials in the slot...
    369  f000				  -	      inx
    370  f000				  -	      ldy	#0
    371  f000				  -	      sty	hsinitialhold
    372  f000				  -	      lda	(temp7),y
    373  f000				  -	      sta	HSRAMScores,x
    374  f000				  -	      iny
    375  f000				  -	      lda	(temp7),y
    376  f000				  -	      sta	HSRAMScores+1,x
    377  f000				  -	      iny
    378  f000				  -	      lda	(temp7),y
    379  f000				  -	      sta	HSRAMScores+2,x
    380  f000				  -	      lda	#0
    381  f000				  -	      sta	HSRAMInitials,x
    382  f000				  -	      lda	#29
    383  f000				  -	      sta	HSRAMInitials+1,x
    384  f000				  -	      sta	HSRAMInitials+2,x
    385  f000				  -
    386  f000				  -	      stx	hsinitialpos
    387  f000				  -
    388  f000				  -	      ifconst	vox_highscore
    389  f000				  -	      lda	<#vox_highscore
    390  f000				  -	      sta	speech_addr
    391  f000				  -	      lda	>#vox_highscore
    392  f000				  -	      sta	speech_addr+1
    393  f000				  -	      endif
    394  f000				  -	      ifconst	sfx_highscore
    395  f000				  -	      lda	<#sfx_highscore
    396  f000				  -	      sta	temp1
    397  f000				  -	      lda	>#sfx_highscore
    398  f000				  -	      sta	temp2
    399  f000				  -	      lda	#0
    400  f000				  -	      sta	temp3
    401  f000				  -	      jsr	schedulesfx
    402  f000				  -	      endif
    403  f000				  -	      ifconst	songdatastart_song_highscore
    404  f000				  -	      lda	#<songchanneltable_song_highscore
    405  f000				  -	      sta	songpointerlo
    406  f000				  -	      lda	#>songchanneltable_song_highscore
    407  f000				  -	      sta	songpointerhi
    408  f000				  -	      lda	#73
    409  f000				  -	      sta	songtempo
    410  f000				  -	      jsr	setsongchannels
    411  f000				  -	      endif
    412  f000				  -
    413  f000				  -
    414  f000				  -donoscoreevaluation
    415  f000				  -
    416  f000				  -	      lda	#(32+(32-SCORESIZE))	; palette=0*32 | 32-(width=6)
    417  f000				  -	      sta	temp3	; palette/width
    418  f000				  -	      lda	#(72+(4*(6-SCORESIZE)))
    419  f000				  -	      sta	temp4	; X
    420  f000				  -	      lda	#((HSSCOREY+6)/(WZONEHEIGHT/8))
    421  f000				  -	      sta	temp5	; Y
    422  f000				  -	      lda	#<HSRAMScores
    423  f000				  -	      sta	temp7	; score variable lo
    424  f000				  -	      lda	#>HSRAMScores
    425  f000				  -	      sta	temp8	; score variable hi
    426  f000				  -	      lda	#(hiscorefont_mode | %01100000)	; charactermode
    427  f000				  -	      sta	temp9
    428  f000				  -plothsscoresloop
    429  f000				  -	      lda	#<(hiscorefont+33)	; +33 to get to '0' character
    430  f000				  -	      sta	temp1	; charmaplo
    431  f000				  -	      lda	#>(hiscorefont+33)
    432  f000				  -	      sta	temp2	; charmaphi
    433  f000				  -	      lda	#6
    434  f000				  -	      sta	temp6
    435  f000				  -	      ifnconst	DOUBLEWIDE
    436  f000				  -	      jsr	plotvalue
    437  f000				  -	      else
    438  f000				  -	      jsr	plotvaluedw
    439  f000				  -	      endif
    440  f000				  -	      clc
    441  f000				  -	      lda	temp3
    442  f000				  -	      adc	#32
    443  f000				  -	      sta	temp3
    444  f000				  -	      inc	temp5
    445  f000				  -	      if	WZONEHEIGHT = 8
    446  f000				  -	      inc	temp5
    447  f000				  -	      endif
    448  f000				  -	      clc
    449  f000				  -	      lda	#3
    450  f000				  -	      adc	temp7
    451  f000				  -	      sta	temp7
    452  f000				  -	      cmp	#(<(HSRAMScores+15))
    453  f000				  -	      bcc	plothsscoresloop
    454  f000				  -plothsindex
    455  f000				  -	      lda	#32+31	; palette=0*32 | 32-(width=1)
    456  f000				  -	      sta	temp3	; palette/width
    457  f000				  -	      lda	#44
    458  f000				  -	      sta	temp4	; X
    459  f000				  -	      lda	#((HSSCOREY+6)/(WZONEHEIGHT/8))
    460  f000				  -	      sta	temp5	; Y
    461  f000				  -	      lda	#<hsgameslotnumbers
    462  f000				  -	      sta	temp7	; score variable lo
    463  f000				  -	      lda	#>hsgameslotnumbers
    464  f000				  -	      sta	temp8	; score variable hi
    465  f000				  -	      lda	#(hiscorefont_mode | %01100000)	; charactermode
    466  f000				  -	      sta	temp9
    467  f000				  -plothsindexloop
    468  f000				  -	      lda	#<(hiscorefont+33)
    469  f000				  -	      sta	temp1	; charmaplo
    470  f000				  -	      lda	#>(hiscorefont+33)
    471  f000				  -	      sta	temp2	; charmaphi
    472  f000				  -	      lda	#1
    473  f000				  -	      sta	temp6	; number of characters
    474  f000				  -	      ifnconst	DOUBLEWIDE
    475  f000				  -	      jsr	plotvalue
    476  f000				  -	      else
    477  f000				  -	      jsr	plotvaluedw
    478  f000				  -	      endif
    479  f000				  -	      clc
    480  f000				  -	      lda	temp3
    481  f000				  -	      adc	#32
    482  f000				  -	      sta	temp3
    483  f000				  -	      inc	temp5
    484  f000				  -	      if	WZONEHEIGHT = 8
    485  f000				  -	      inc	temp5
    486  f000				  -	      endif
    487  f000				  -	      inc	temp7
    488  f000				  -	      lda	temp7
    489  f000				  -	      cmp	#(<(hsgameslotnumbers+5))
    490  f000				  -	      bcc	plothsindexloop
    491  f000				  -
    492  f000				  -	      jsr	savescreen
    493  f000				  -	      ifnconst	HSSECONDS
    494  f000				  -	      lda	#6
    495  f000				  -	      else
    496  f000				  -	      lda	#HSSECONDS
    497  f000				  -	      endif
    498  f000				  -
    499  f000				  -	      sta	countdownseconds
    500  f000				  -
    501  f000				  -keepdisplayinghs
    502  f000				  -	      jsr	restorescreen
    503  f000				  -
    504  f000				  -	      jsr	setuphsinpt1
    505  f000				  -
    506  f000				  -	      lda	hsnewscoreline
    507  f000				  -	      bpl	carryonkeepdisplayinghs
    508  f000				  -	      jmp	skipenterscorecontrol
    509  f000				  -carryonkeepdisplayinghs
    510  f000				  -
    511  f000				  -
    512  f000				  -	      ifnconst	HSSECONDS
    513  f000				  -	      lda	#6
    514  f000				  -	      else
    515  f000				  -	      lda	#HSSECONDS
    516  f000				  -	      endif
    517  f000				  -
    518  f000				  -	      sta	countdownseconds
    519  f000				  -
    520  f000				  -			;plot the "cursor" initial sprite...
    521  f000				  -	      lda	hsinitialhold
    522  f000				  -
    523  f000				  -	      sta	temp1
    524  f000				  -	      lda	#>(hiscorefont+32)
    525  f000				  -	      sta	temp2
    526  f000				  -	      lda	#31	; palette=0*32 | 32-(width=1)
    527  f000				  -	      sta	temp3	; palette/width
    528  f000				  -	      lda	hscursorx
    529  f000				  -	      asl
    530  f000				  -	      asl
    531  f000				  -	      clc
    532  f000				  -	      adc	#104
    533  f000				  -	      sta	temp4	; X
    534  f000				  -	      lda	hsnewscoreline
    535  f000				  -	      asl
    536  f000				  -	      asl
    537  f000				  -	      asl
    538  f000				  -	      asl
    539  f000				  -	      adc	#((3*16)+HSCURSORY)
    540  f000				  -	      sta	temp5	; Y
    541  f000				  -	      lda	#%01000000
    542  f000				  -	      sta	temp6
    543  f000				  -	      jsr	plotsprite
    544  f000				  -
    545  f000				  -	      ldx	hscursorx
    546  f000				  -	      ldy	hsdisplaymode
    547  f000				  -	      lda	SWCHA
    548  f000				  -	      cpy	#3
    549  f000				  -	      bne	hsskipadjustjoystick1
    550  f000				  -	      asl
    551  f000				  -	      asl
    552  f000				  -	      asl
    553  f000				  -	      asl
    554  f000				  -hsskipadjustjoystick1
    555  f000				  -	      sta	hsswcha
    556  f000				  -	      and	#%00110000
    557  f000				  -	      cmp	#%00110000
    558  f000				  -	      beq	hsjoystickskipped
    559  f000				  -	      lda	hsjoydebounce
    560  f000				  -	      beq	hsdontdebounce
    561  f000				  -	      jmp	hspostjoystick
    562  f000				  -hsdontdebounce
    563  f000				  -	      ldx	#1	; small tick sound
    564  f000				  -	      jsr	playhssfx
    565  f000				  -	      lda	hsswcha
    566  f000				  -	      and	#%00110000
    567  f000				  -	      ldx	hscursorx
    568  f000				  -	      cmp	#%00100000	; check down
    569  f000				  -	      bne	hsjoycheckup
    570  f000				  -	      ldy	hsinitialhold
    571  f000				  -	      cpx	#0
    572  f000				  -	      bne	skipavoid31_1
    573  f000				  -	      cpy	#0	; if we're about to change to the <- char (#31) then double-decrement to skip over it
    574  f000				  -	      bne	skipavoid31_1
    575  f000				  -	      dey
    576  f000				  -skipavoid31_1
    577  f000				  -	      dey
    578  f000				  -	      jmp	hssetdebounce
    579  f000				  -hsjoycheckup
    580  f000				  -	      cmp	#%00010000	; check up
    581  f000				  -	      bne	hsjoystickskipped
    582  f000				  -	      ldy	hsinitialhold
    583  f000				  -	      cpx	#0
    584  f000				  -	      bne	skipavoid31_2
    585  f000				  -	      cpy	#30	; if we're about to change to the <- char (#31) then double-increment to skip over it
    586  f000				  -	      bne	skipavoid31_2
    587  f000				  -	      iny
    588  f000				  -skipavoid31_2
    589  f000				  -	      iny
    590  f000				  -hssetdebounce
    591  f000				  -	      tya
    592  f000				  -	      and	#31
    593  f000				  -	      sta	hsinitialhold
    594  f000				  -	      lda	#15
    595  f000				  -	      sta	hsjoydebounce
    596  f000				  -	      bne	hspostjoystick
    597  f000				  -hsjoystickskipped
    598  f000				  -			; check the fire button only when the stick isn't engaged
    599  f000				  -	      lda	hsinpt1
    600  f000				  -	      bpl	hsbuttonskipped
    601  f000				  -	      lda	hsjoydebounce
    602  f000				  -	      beq	hsfiredontdebounce
    603  f000				  -	      bne	hspostjoystick
    604  f000				  -hsfiredontdebounce
    605  f000				  -	      lda	hsinitialhold
    606  f000				  -	      cmp	#31
    607  f000				  -	      beq	hsmovecursorback
    608  f000				  -	      inc	hscursorx
    609  f000				  -	      inc	hsinitialpos
    610  f000				  -	      lda	hscursorx
    611  f000				  -	      cmp	#3
    612  f000				  -	      bne	skiphsentryisdone
    613  f000				  -	      lda	#0
    614  f000				  -	      sta	framecounter
    615  f000				  -	      lda	#$ff
    616  f000				  -	      sta	hsnewscoreline
    617  f000				  -	      dec	hsinitialpos
    618  f000				  -	      bne	skiphsentryisdone
    619  f000				  -hsmovecursorback
    620  f000				  -	      lda	hscursorx
    621  f000				  -	      beq	skiphsmovecursorback
    622  f000				  -	      lda	#29
    623  f000				  -	      ldx	hsinitialpos
    624  f000				  -	      sta	HSRAMInitials,x
    625  f000				  -	      dec	hsinitialpos
    626  f000				  -	      dec	hscursorx
    627  f000				  -	      dex
    628  f000				  -	      lda	HSRAMInitials,x
    629  f000				  -	      sta	hsinitialhold
    630  f000				  -skiphsmovecursorback
    631  f000				  -skiphsentryisdone
    632  f000				  -	      ldx	#0
    633  f000				  -	      jsr	playhssfx
    634  f000				  -	      lda	#20
    635  f000				  -	      sta	hsjoydebounce
    636  f000				  -	      bne	hspostjoystick
    637  f000				  -
    638  f000				  -hsbuttonskipped
    639  f000				  -	      lda	#0
    640  f000				  -	      sta	hsjoydebounce
    641  f000				  -hspostjoystick
    642  f000				  -
    643  f000				  -	      ldx	hsinitialpos
    644  f000				  -	      lda	hsinitialhold
    645  f000				  -	      sta	HSRAMInitials,x
    646  f000				  -
    647  f000				  -	      jmp	skiphschasecolors
    648  f000				  -
    649  f000				  -skipenterscorecontrol
    650  f000				  -	      jsr	hschasecolors
    651  f000				  -	      jsr	setuphsinpt1
    652  f000				  -	      lda	hsjoydebounce
    653  f000				  -	      bne	skiphschasecolors
    654  f000				  -	      lda	hsinpt1
    655  f000				  -	      bmi	returnfromhs
    656  f000				  -skiphschasecolors
    657  f000				  -
    658  f000				  -	      jsr	drawscreen
    659  f000				  -
    660  f000				  -	      lda	countdownseconds
    661  f000				  -	      beq	returnfromhs
    662  f000				  -	      jmp	keepdisplayinghs
    663  f000				  -returnfromhs
    664  f000				  -
    665  f000				  -	      ifconst	songdatastart_song_highscore
    666  f000				  -	      lda	hsdisplaymode
    667  f000				  -	      beq	skipclearHSCsong
    668  f000				  -	      lda	#0
    669  f000				  -	      sta	songtempo
    670  f000				  -skipclearHSCsong
    671  f000				  -	      endif
    672  f000				  -	      jsr	drawwait
    673  f000				  -	      jsr	clearscreen
    674  f000				  -	      lda	#0
    675  f000				  -	      ldy	#7
    676  f000				  -	      jsr	blacken320colors
    677  f000				  -	      lda	ssCTRL
    678  f000				  -	      sta	sCTRL
    679  f000				  -	      lda	ssCHARBASE
    680  f000				  -	      sta	sCHARBASE
    681  f000				  -	      rts
    682  f000				  -
    683  f000				  -setuphsinpt1
    684  f000				  -	      lda	#$ff
    685  f000				  -	      sta	hsinpt1
    686  f000				  -	      lda	hsjoydebounce
    687  f000				  -	      beq	skipdebounceadjust
    688  f000				  -	      dec	hsjoydebounce
    689  f000				  -	      bne	skipstorefirebuttonstatus
    690  f000				  -skipdebounceadjust
    691  f000				  -	      ldx	hsdisplaymode
    692  f000				  -	      cpx	#3
    693  f000				  -	      bne	hsskipadjustjoyfire1
    694  f000				  -	      lda	sINPT3
    695  f000				  -	      jmp	hsskipadjustjoyfire1done
    696  f000				  -hsskipadjustjoyfire1
    697  f000				  -	      lda	sINPT1
    698  f000				  -hsskipadjustjoyfire1done
    699  f000				  -	      sta	hsinpt1
    700  f000				  -skipstorefirebuttonstatus
    701  f000				  -	      rts
    702  f000				  -
    703  f000				  -blacken320colors
    704  f000				  -	      ldy	#7
    705  f000				  -blacken320colorsloop
    706  f000				  -	      sta	P0C2,y
    707  f000				  -	      dey
    708  f000				  -	      bpl	blacken320colorsloop
    709  f000				  -	      rts
    710  f000				  -
    711  f000				  -hschasecolors
    712  f000				  -	      lda	framecounter
    713  f000				  -	      and	#3
    714  f000				  -	      bne	hschasecolorsreturn
    715  f000				  -	      inc	hscolorchaseindex
    716  f000				  -	      lda	hscolorchaseindex
    717  f000				  -
    718  f000				  -	      sta	P5C2
    719  f000				  -	      sbc	#$02
    720  f000				  -	      sta	P4C2
    721  f000				  -	      sbc	#$02
    722  f000				  -	      sta	P3C2
    723  f000				  -	      sbc	#$02
    724  f000				  -	      sta	P2C2
    725  f000				  -	      sbc	#$02
    726  f000				  -	      sta	P1C2
    727  f000				  -hschasecolorsreturn
    728  f000				  -	      rts
    729  f000				  -
    730  f000				  -playhssfx
    731  f000				  -	      lda	hssfx_lo,x
    732  f000				  -	      sta	temp1
    733  f000				  -	      lda	hssfx_hi,x
    734  f000				  -	      sta	temp2
    735  f000				  -	      lda	#0
    736  f000				  -	      sta	temp3
    737  f000				  -	      jmp	schedulesfx
    738  f000				  -
    739  f000				  -hssfx_lo
    740  f000				  -	      .byte	<sfx_hsletterpositionchange, <sfx_hslettertick
    741  f000				  -hssfx_hi
    742  f000				  -	      .byte	>sfx_hsletterpositionchange, >sfx_hslettertick
    743  f000				  -
    744  f000				  -sfx_hsletterpositionchange
    745  f000				  -	      .byte	$10,$18,$00
    746  f000				  -	      .byte	$02,$06,$08
    747  f000				  -	      .byte	$02,$06,$04
    748  f000				  -	      .byte	$00,$00,$00
    749  f000				  -sfx_hslettertick
    750  f000				  -	      .byte	$10,$18,$00
    751  f000				  -	      .byte	$00,$00,$0a
    752  f000				  -	      .byte	$00,$00,$00
    753  f000				  -
    754  f000				  -highscorelabeladjust1
    755  f000				  -	      .byte	(80-(14*2)-(SCORESIZE*2)),(80-(16*2)-(SCORESIZE*2)),(80-(16*2)-(SCORESIZE*2))
    756  f000				  -highscorelabeladjust2
    757  f000				  -	      .byte	(80+(14*2)-(SCORESIZE*2)),(80+(16*2)-(SCORESIZE*2)),(80+(16*2)-(SCORESIZE*2))
    758  f000				  -
    759  f000				  -scorevarlo
    760  f000				  -	      .byte	<(score0+((6-SCORESIZE)/2)),<(score0+((6-SCORESIZE)/2)),<(score1+((6-SCORESIZE)/2))
    761  f000				  -scorevarhi
    762  f000				  -	      .byte	>(score0+((6-SCORESIZE)/2)),>(score0+((6-SCORESIZE)/2)),>(score1+((6-SCORESIZE)/2))
    763  f000				  -
    764  f000				  -	      ifnconst	HSNOLEVELNAMES
    765  f000				  -highscoredifficultytextlo
    766  f000				  -	      .byte	<easylevelname, <mediumlevelname, <hardlevelname, <expertlevelname
    767  f000				  -highscoredifficultytexthi
    768  f000				  -	      .byte	>easylevelname, >mediumlevelname, >hardlevelname, >expertlevelname
    769  f000				  -	      ifnconst	HSCUSTOMLEVELNAMES
    770  f000				  -highscoredifficultytextlen
    771  f000				  -	      .byte	22, 30, 26, 24
    772  f000				  -
    773  f000				  -easylevelname
    774  f000				  -	      .byte	$04,$00,$12,$18,$1d,$0b,$04,$15,$04,$0b,$1d,$07,$08,$06,$07,$1d,$12,$02,$0e,$11,$04,$12
    775  f000				  -mediumlevelname
    776  f000				  -	      .byte	$08,$0d,$13,$04,$11,$0c,$04,$03,$08,$00,$13,$04,$1d,$0b,$04,$15,$04,$0b,$1d,$07,$08,$06,$07,$1d,$12,$02,$0e,$11,$04,$12
    777  f000				  -hardlevelname
    778  f000				  -	      .byte	$00,$03,$15,$00,$0d,$02,$04,$03,$1d,$0b,$04,$15,$04,$0b,$1d,$07,$08,$06,$07,$1d,$12,$02,$0e,$11,$04,$12
    779  f000				  -expertlevelname
    780  f000				  -	      .byte	$04,$17,$0f,$04,$11,$13,$1d,$0b,$04,$15,$04,$0b,$1d,$07,$08,$06,$07,$1d,$12,$02,$0e,$11,$04,$12
    781  f000				  -	      else
    782  f000				  -	      include	"7800hsgamediffnames.asm"
    783  f000				  -	      endif		; HSCUSTOMLEVELNAMES
    784  f000				  -	      else
    785  f000				  -HSHIGHSCOREStext
    786  f000				  -	      .byte	$07,$08,$06,$07,$1d,$12,$02,$0e,$11,$04,$12
    787  f000				  -	      endif		; HSNOLEVELNAMES
    788  f000				  -
    789  f000				  -highscorelabeltextlo
    790  f000				  -	      .byte	<player0label, <player1label, <player2label
    791  f000				  -highscorelabeltexthi
    792  f000				  -	      .byte	>player0label, >player1label, >player2label
    793  f000				  -
    794  f000				  -player0label
    795  f000				  -	      .byte	$0f,$0b,$00,$18,$04,$11,$1d,$12,$02,$0e,$11,$04,$1a,$1d,$1d
    796  f000				  -
    797  f000				  -player1label
    798  f000				  -	      .byte	$0f,$0b,$00,$18,$04,$11,$1d,$22,$1d,$12,$02,$0e,$11,$04,$1a
    799  f000				  -
    800  f000				  -player2label
    801  f000				  -	      .byte	$0f,$0b,$00,$18,$04,$11,$1d,$23,$1d,$12,$02,$0e,$11,$04,$1a
    802  f000				  -
    803  f000				  -
    804  f000				  -	      ifconst	HSGAMENAMELEN
    805  f000				  -HSGAMENAMEtable
    806  f000				  -	      include	"7800hsgamename.asm"
    807  f000				  -	      endif
    808  f000				  -	      ifconst	HSGAMERANKS
    809  f000				  -	      include	"7800hsgameranks.asm"
    810  f000				  -highscoreranklabel
    811  f000				  -	      .byte	$11,$00,$0d,$0a,$1a
    812  f000				  -	      endif
    813  f000				  -
    814  f000				  -			;ensure our table doesn't wrap a page...
    815  f000				  -	      if	((<*)>251)
    816  f000				  -	      align	256
    817  f000				  -	      endif
    818  f000				  -hsgameslotnumbers
    819  f000				  -	      .byte	33,34,35,36,37
    820  f000				  -	      endif
    821  f000				  -
    822  f000				  -loaddifficultytable
    823  f000				  -	      lda	gamedifficulty
    824  f000				  -	      and	#$03	; ensure the user hasn't selected an invalid difficulty
    825  f000				  -	      sta	gamedifficulty
    826  f000				  -	      cmp	hsdifficulty	; check game difficulty is the same as RAM table
    827  f000				  -	      bne	loaddifficultytablecontinue1
    828  f000				  -	      rts		; this high score difficulty table is already loaded
    829  f000				  -loaddifficultytablecontinue1
    830  f000				  -	      lda	gamedifficulty
    831  f000				  -	      sta	hsdifficulty
    832  f000				  -			;we need to check the device for the table
    833  f000				  -	      lda	hsdevice
    834  f000				  -	      bne	loaddifficultytablecontinue2
    835  f000				  -			; there's no save device. clear out this table.
    836  f000				  -	      jmp	cleardifficultytablemem
    837  f000				  -loaddifficultytablecontinue2
    838  f000				  -	      lda	hsdevice
    839  f000				  -	      and	#1
    840  f000				  -	      beq	memdeviceisntHSC
    841  f000				  -	      jmp	loaddifficultytableHSC
    842  f000				  -memdeviceisntHSC
    843  f000				  -	      jmp	loaddifficultytableAVOX
    844  f000				  -
    845  f000				  -savedifficultytable
    846  f000				  -			;*** we need to check wich device we should use...
    847  f000				  -	      lda	hsdevice
    848  f000				  -	      bne	savedifficultytablerealdevice
    849  f000				  -	      rts		; its a ram device
    850  f000				  -savedifficultytablerealdevice
    851  f000				  -	      and	#1
    852  f000				  -	      beq	savememdeviceisntHSC
    853  f000				  -	      jmp	savedifficultytableHSC
    854  f000				  -savememdeviceisntHSC
    855  f000				  -	      jmp	savedifficultytableAVOX
    856  f000				  -
    857  f000				  -savedifficultytableAVOX
    858  f000				  -			; the load call already setup the memory structure and atarivox memory location
    859  f000				  -	      jsr	savealoadedHSCtablecontinue
    860  f000				  -savedifficultytableAVOXskipconvert
    861  f000				  -	      lda	#HSIDHI
    862  f000				  -	      sta	eeprombuffer
    863  f000				  -	      lda	#HSIDLO
    864  f000				  -	      sta	eeprombuffer+1
    865  f000				  -	      lda	hsdifficulty
    866  f000				  -	      sta	eeprombuffer+2
    867  f000				  -	      lda	#32
    868  f000				  -	      jsr	AVoxWriteBytes
    869  f000				  -	      rts
    870  f000				  -
    871  f000				  -savedifficultytableHSC
    872  f000				  -			;we always load a table before reaching here, so the
    873  f000				  -			;memory structures from the load should be intact...
    874  f000				  -	      ldy	hsgameslot
    875  f000				  -	      bpl	savealoadedHSCtable
    876  f000				  -	      rts
    877  f000				  -savealoadedHSCtable
    878  f000				  -	      lda	HSCGameDifficulty,y
    879  f000				  -	      cmp	#$7F
    880  f000				  -	      bne	savealoadedHSCtablecontinue
    881  f000				  -	      jsr	initializeHSCtableentry
    882  f000				  -savealoadedHSCtablecontinue
    883  f000				  -			;convert our RAM table to HSC format and write it out...
    884  f000				  -	      ldy	#0
    885  f000				  -	      ldx	#0
    886  f000				  -savedifficultytableScores
    887  f000				  -
    888  f000				  -	      lda	HSRAMInitials,x
    889  f000				  -	      sta	temp3
    890  f000				  -	      lda	HSRAMInitials+1,x
    891  f000				  -	      sta	temp4
    892  f000				  -	      lda	HSRAMInitials+2,x
    893  f000				  -	      sta	temp5
    894  f000				  -	      jsr	encodeHSCInitials	; takes 3 byte initials from temp3,4,5 and stores 2 byte initials in temp1,2
    895  f000				  -
    896  f000				  -	      lda	temp1
    897  f000				  -	      sta	(HSGameTableLo),y
    898  f000				  -	      iny
    899  f000				  -	      lda	temp2
    900  f000				  -	      sta	(HSGameTableLo),y
    901  f000				  -	      iny
    902  f000				  -
    903  f000				  -	      lda	HSRAMScores,x
    904  f000				  -	      sta	(HSGameTableLo),y
    905  f000				  -	      iny
    906  f000				  -	      lda	HSRAMScores+1,x
    907  f000				  -	      sta	(HSGameTableLo),y
    908  f000				  -	      iny
    909  f000				  -	      lda	HSRAMScores+2,x
    910  f000				  -	      sta	(HSGameTableLo),y
    911  f000				  -	      iny
    912  f000				  -	      inx
    913  f000				  -	      inx
    914  f000				  -	      inx		; +3
    915  f000				  -	      cpx	#15
    916  f000				  -	      bne	savedifficultytableScores
    917  f000				  -	      rts
    918  f000				  -
    919  f000				  -loaddifficultytableHSC
    920  f000				  -			; routine responsible for loading the difficulty table from HSC
    921  f000				  -	      jsr	findindexHSC
    922  f000				  -	      ldy	hsgameslot
    923  f000				  -	      lda	HSCGameDifficulty,y
    924  f000				  -	      cmp	#$7F
    925  f000				  -	      bne	loaddifficultytableHSCcontinue
    926  f000				  -			;there was an error. use a new RAM table instead...
    927  f000				  -	      jmp	cleardifficultytablemem
    928  f000				  -loaddifficultytableHSCcontinue
    929  f000				  -			; parse the data into the HS memory...
    930  f000				  -	      ldy	#0
    931  f000				  -	      ldx	#0
    932  f000				  -loaddifficultytableScores
    933  f000				  -	      lda	(HSGameTableLo),y
    934  f000				  -	      sta	temp1
    935  f000				  -	      iny
    936  f000				  -	      lda	(HSGameTableLo),y
    937  f000				  -	      sta	temp2
    938  f000				  -	      jsr	decodeHSCInitials	; takes 2 byte initials from temp1,2 and stores 3 byte initials in temp3,4,5
    939  f000				  -	      iny
    940  f000				  -	      lda	(HSGameTableLo),y
    941  f000				  -	      sta	HSRAMScores,x
    942  f000				  -	      lda	temp3
    943  f000				  -	      sta	HSRAMInitials,x
    944  f000				  -	      inx
    945  f000				  -	      iny
    946  f000				  -	      lda	(HSGameTableLo),y
    947  f000				  -	      sta	HSRAMScores,x
    948  f000				  -	      lda	temp4
    949  f000				  -	      sta	HSRAMInitials,x
    950  f000				  -	      inx
    951  f000				  -	      iny
    952  f000				  -	      lda	(HSGameTableLo),y
    953  f000				  -	      sta	HSRAMScores,x
    954  f000				  -	      lda	temp5
    955  f000				  -	      sta	HSRAMInitials,x
    956  f000				  -	      inx
    957  f000				  -	      iny
    958  f000				  -	      cpx	#15
    959  f000				  -	      bne	loaddifficultytableScores
    960  f000				  -	      rts
    961  f000				  -
    962  f000				  -decodeHSCInitials
    963  f000				  -			; takes 2 byte initials from temp1,2 and stores 3 byte initials in temp3,4,5
    964  f000				  -			; 2 bytes are packed in the form: 22211111 22_33333
    965  f000				  -	      lda	#0
    966  f000				  -	      sta	temp4
    967  f000				  -	      lda	temp1
    968  f000				  -	      and	#%00011111
    969  f000				  -	      sta	temp3
    970  f000				  -
    971  f000				  -	      lda	temp2
    972  f000				  -	      and	#%00011111
    973  f000				  -	      sta	temp5
    974  f000				  -
    975  f000				  -	      lda	temp1
    976  f000				  -	      asl
    977  f000				  -	      rol	temp4
    978  f000				  -	      asl
    979  f000				  -	      rol	temp4
    980  f000				  -	      asl
    981  f000				  -	      rol	temp4
    982  f000				  -	      lda	temp2
    983  f000				  -	      asl
    984  f000				  -	      rol	temp4
    985  f000				  -	      asl
    986  f000				  -	      rol	temp4
    987  f000				  -	      rts
    988  f000				  -encodeHSCInitials
    989  f000				  -			; takes 3 byte initials from temp3,4,5 and stores 2 byte initials in temp1,2
    990  f000				  -			; 2 bytes are packed in the form: 22211111 22_33333
    991  f000				  -			; start with packing temp1...
    992  f000				  -	      lda	temp4
    993  f000				  -	      and	#%00011100
    994  f000				  -	      sta	temp1
    995  f000				  -	      asl	temp1
    996  f000				  -	      asl	temp1
    997  f000				  -	      asl	temp1
    998  f000				  -	      lda	temp3
    999  f000				  -	      and	#%00011111
   1000  f000				  -	      ora	temp1
   1001  f000				  -	      sta	temp1
   1002  f000				  -			; ...temp1 is now packed, on to temp2...
   1003  f000				  -	      lda	temp5
   1004  f000				  -	      asl
   1005  f000				  -	      asl
   1006  f000				  -	      ror	temp4
   1007  f000				  -	      ror
   1008  f000				  -	      ror	temp4
   1009  f000				  -	      ror
   1010  f000				  -	      sta	temp2
   1011  f000				  -	      rts
   1012  f000				  -
   1013  f000				  -findindexHSCerror
   1014  f000				  -			;the HSC is stuffed. return the bad slot flag
   1015  f000				  -	      ldy	#$ff
   1016  f000				  -	      sty	hsgameslot
   1017  f000				  -	      rts
   1018  f000				  -
   1019  f000				  -findindexHSC
   1020  f000				  -HSCGameID1 =	$1029
   1021  f000				  -HSCGameID2 =	$106E
   1022  f000				  -HSCGameDifficulty =	$10B3
   1023  f000				  -HSCGameIndex =	$10F8
   1024  f000				  -			; routine responsible for finding the game index from HSC
   1025  f000				  -			; call with x=0 to create a new table if none exist, call with x=$ff to avoid creating new tables
   1026  f000				  -			; the HS loading routine will use x=$ff, the HS saving routine will use x=0
   1027  f000				  -	      ldy	#69	; start +1 to account for the dey
   1028  f000				  -findindexHSCloop
   1029  f000				  -	      dey
   1030  f000				  -	      bmi	findindexHSCerror
   1031  f000				  -	      lda	HSCGameDifficulty,y
   1032  f000				  -	      cmp	#$7F
   1033  f000				  -	      beq	findourindexHSC
   1034  f000				  -	      cmp	gamedifficulty
   1035  f000				  -	      bne	findindexHSCloop
   1036  f000				  -	      lda	HSCGameID1,y
   1037  f000				  -	      cmp	#HSIDHI
   1038  f000				  -	      bne	findindexHSCloop
   1039  f000				  -	      lda	HSCGameID2,y
   1040  f000				  -	      cmp	#HSIDLO
   1041  f000				  -	      bne	findindexHSCloop
   1042  f000				  -findourindexHSC
   1043  f000				  -			; if we're here we found our index in the table
   1044  f000				  -			; or we found the first empty one
   1045  f000				  -	      sty	hsgameslot
   1046  f000				  -	      jsr	setupHSCGamepointer	; setup the pointer to the HS Table for this game...
   1047  f000				  -	      rts
   1048  f000				  -
   1049  f000				  -
   1050  f000				  -initializeHSCtableentry
   1051  f000				  -	      ldy	hsgameslot
   1052  f000				  -			; we need to make a new entry...
   1053  f000				  -	      lda	#HSIDHI
   1054  f000				  -	      sta	HSCGameID1,y
   1055  f000				  -	      lda	#HSIDLO
   1056  f000				  -	      sta	HSCGameID2,y
   1057  f000				  -	      lda	gamedifficulty
   1058  f000				  -	      sta	HSCGameDifficulty,y
   1059  f000				  -	      ldx	#0
   1060  f000				  -fixHSDGameDifficultylistLoop
   1061  f000				  -	      inx
   1062  f000				  -	      txa
   1063  f000				  -	      sta	HSCGameIndex,y
   1064  f000				  -	      iny
   1065  f000				  -	      cpy	#69
   1066  f000				  -	      bne	fixHSDGameDifficultylistLoop
   1067  f000				  -	      rts
   1068  f000				  -
   1069  f000				  -setupHSCGamepointer
   1070  f000				  -			; this routines sets (HSGameTableLo) pointing to the game's HS table
   1071  f000				  -	      lda	#$17
   1072  f000				  -	      sta	HSGameTableHi
   1073  f000				  -	      lda	#$FA
   1074  f000				  -	      sta	HSGameTableLo
   1075  f000				  -setupHSCGamepointerLoop
   1076  f000				  -	      lda	HSGameTableLo
   1077  f000				  -	      sec
   1078  f000				  -	      sbc	#25
   1079  f000				  -	      sta	HSGameTableLo
   1080  f000				  -	      lda	HSGameTableHi
   1081  f000				  -	      sbc	#0
   1082  f000				  -	      sta	HSGameTableHi
   1083  f000				  -	      iny
   1084  f000				  -	      cpy	#69
   1085  f000				  -	      bne	setupHSCGamepointerLoop
   1086  f000				  -	      rts
   1087  f000				  -
   1088  f000				  -loaddifficultytableAVOX
   1089  f000				  -			; routine responsible for loading the difficulty table from Avox
   1090  f000				  -			; we reuse HSC routines to format data to/from our Avox RAM buffer...
   1091  f000				  -	      lda	#>(eeprombuffer+3)
   1092  f000				  -	      sta	HSGameTableHi
   1093  f000				  -	      lda	#<(eeprombuffer+3)
   1094  f000				  -	      sta	HSGameTableLo
   1095  f000				  -
   1096  f000				  -			; the start location in EEPROM, subtract 32...
   1097  f000				  -	      lda	#$5F
   1098  f000				  -	      sta	HSVoxHi
   1099  f000				  -	      lda	#$E0
   1100  f000				  -	      sta	HSVoxLo
   1101  f000				  -	      lda	#0
   1102  f000				  -	      sta	temp1
   1103  f000				  -loaddifficultytableAVOXloop
   1104  f000				  -	      inc	temp1
   1105  f000				  -	      beq	loaddifficultytableAVOXfull
   1106  f000				  -	      clc
   1107  f000				  -	      lda	HSVoxLo
   1108  f000				  -	      adc	#32
   1109  f000				  -	      sta	HSVoxLo
   1110  f000				  -	      lda	HSVoxHi
   1111  f000				  -	      adc	#0
   1112  f000				  -	      sta	HSVoxHi
   1113  f000				  -	      lda	#3
   1114  f000				  -	      jsr	AVoxReadBytes	; read in 3 bytes, ID1,ID2,Difficulty
   1115  f000				  -	      lda	eeprombuffer
   1116  f000				  -	      cmp	#$FF
   1117  f000				  -	      beq	loaddifficultytableAVOXempty
   1118  f000				  -	      cmp	#HSIDHI
   1119  f000				  -	      bne	loaddifficultytableAVOXloop
   1120  f000				  -	      lda	eeprombuffer+1
   1121  f000				  -	      cmp	#HSIDLO
   1122  f000				  -	      bne	loaddifficultytableAVOXloop
   1123  f000				  -	      lda	eeprombuffer+2
   1124  f000				  -	      cmp	gamedifficulty
   1125  f000				  -	      bne	loaddifficultytableAVOXloop
   1126  f000				  -loaddifficultytableAVOXdone
   1127  f000				  -	      lda	#32
   1128  f000				  -	      jsr	AVoxReadBytes
   1129  f000				  -	      jsr	loaddifficultytableHSCcontinue
   1130  f000				  -	      rts
   1131  f000				  -loaddifficultytableAVOXfull
   1132  f000				  -	      lda	#0
   1133  f000				  -	      sta	hsdevice	; looks like all 255 entries are taken... disable it.
   1134  f000				  -loaddifficultytableAVOXempty
   1135  f000				  -	      jmp	cleardifficultytablemem
   1136  f000				  -	      rts
   1137  f000				  -
   1138  f000				  -cleardifficultytablemem
   1139  f000				  -	      ldy	#29
   1140  f000				  -	      lda	#0
   1141  f000				  -cleardifficultytablememloop
   1142  f000				  -	      sta	HSRAMTable,y
   1143  f000				  -	      dey
   1144  f000				  -	      bpl	cleardifficultytablememloop
   1145  f000				  -	      rts
   1146  f000				  -hiscoremoduleend
   1147  f000				  -
   1148  f000				  -	      echo	"  hiscore assembly: ",[(hiscoremoduleend-hiscoremodulestart)]d," bytes"
   1149  f000				  -
   1150  f000				  -	      ifconst	DOUBLEWIDE
   1151  f000				  -plotvaluedw
   1152  f000				  -plotdigitcount =	temp6
   1153  f000				  -	      lda	#0
   1154  f000				  -	      tay
   1155  f000				  -	      ldx	valbufend
   1156  f000				  -
   1157  f000				  -	      lda	plotdigitcount
   1158  f000				  -	      and	#1
   1159  f000				  -	      beq	pvnibble2chardw
   1160  f000				  -	      lda	#0
   1161  f000				  -	      sta	VALBUFFER,x	; just in case we skip this digit
   1162  f000				  -	      beq	pvnibble2char_skipnibbledw
   1163  f000				  -
   1164  f000				  -pvnibble2chardw
   1165  f000				  -			; high nibble...
   1166  f000				  -	      lda	(temp7),y
   1167  f000				  -	      and	#$f0
   1168  f000				  -	      lsr
   1169  f000				  -	      lsr
   1170  f000				  -	      lsr
   1171  f000				  -	      lsr
   1172  f000				  -
   1173  f000				  -	      clc
   1174  f000				  -	      adc	temp1	; add the offset to character graphics to our value
   1175  f000				  -	      sta	VALBUFFER,x
   1176  f000				  -	      inx
   1177  f000				  -	      dec	plotdigitcount
   1178  f000				  -pvnibble2char_skipnibbledw
   1179  f000				  -			; low nibble...
   1180  f000				  -	      lda	(temp7),y
   1181  f000				  -	      and	#$0f
   1182  f000				  -	      clc
   1183  f000				  -	      adc	temp1	; add the offset to character graphics to our value
   1184  f000				  -	      sta	VALBUFFER,x
   1185  f000				  -	      inx
   1186  f000				  -	      iny
   1187  f000				  -
   1188  f000				  -	      dec	plotdigitcount
   1189  f000				  -	      bne	pvnibble2chardw
   1190  f000				  -			;point to the start of our valuebuffer
   1191  f000				  -	      clc
   1192  f000				  -	      lda	#<VALBUFFER
   1193  f000				  -	      adc	valbufend
   1194  f000				  -	      sta	temp1
   1195  f000				  -	      lda	#>VALBUFFER
   1196  f000				  -	      adc	#0
   1197  f000				  -	      sta	temp2
   1198  f000				  -
   1199  f000				  -			;advance valbufend to the end of our value buffer
   1200  f000				  -	      stx	valbufend
   1201  f000				  -
   1202  f000				  -	      ifnconst	plotvalueonscreen
   1203  f000				  -	      jmp	plotcharacters
   1204  f000				  -	      else
   1205  f000				  -	      jmp	plotcharacterslive
   1206  f000				  -	      endif
   1207  f000				  -	      endif		; DOUBLEWIDE
   1208  f000				  -
   1209  f000					      endif		; HSSUPPORT
   1210  f000
------- FILE c:\Users\Steve\Desktop\2018dev\7800\7800basic\projects\lessons\lesson1_gfx_modes\lesson1_51.bas.asm
   2976  f000					      endif
   2977  f000							; Provided under the CC0 license. See the included LICENSE.txt for details.
   2978  f000
   2979  f000							;standard routimes needed for pretty much all games
   2980  f000
   2981  f000							; some definitions used with "set debug color"
   2982  f000		       00 91	   DEBUGCALC  =	$91
   2983  f000		       00 41	   DEBUGWASTE =	$41
   2984  f000		       00 c1	   DEBUGDRAW  =	$C1
   2985  f000
   2986  f000							;NMI and IRQ handlers
   2987  f000				   NMI
   2988  f000							;VISIBLEOVER is 255 while the screen is drawn, and 0 right after the visible screen is done.
   2989  f000		       48		      pha		; save A
   2990  f001		       a5 4d		      lda	visibleover
   2991  f003		       49 ff		      eor	#255
   2992  f005		       85 4d		      sta	visibleover
   2993  f007				  -	      ifconst	DEBUGINTERRUPT
   2994  f007				  -	      and	#$93
   2995  f007				  -	      sta	BACKGRND
   2996  f007					      endif
   2997  f007		       ce b2 01 	      dec	interruptindex
   2998  f00a		       d0 03		      bne	skipreallyoffvisible
   2999  f00c		       4c 5e f0 	      jmp	reallyoffvisible
   3000  f00f				   skipreallyoffvisible
   3001  f00f		       a5 4d		      lda	visibleover
   3002  f011		       f0 49		      beq	skiptopscreenroutine
   3003  f013		       8a		      txa		; save X+Y
   3004  f014		       48		      pha
   3005  f015		       98		      tya
   3006  f016		       48		      pha
   3007  f017		       d8		      cld
   3008  f018					      ifconst	.topscreenroutine
   3009  f018		       20 2f 46 	      jsr	.topscreenroutine
   3010  f01b					      endif
   3011  f01b		       ee 3e 21 	      inc	frameslost	; this is balanced with a "dec frameslost" when drawscreen is called.
   3012  f01e
   3013  f01e							; ** Other important routines that need to regularly run, and can run onscreen.
   3014  f01e							; ** Atarivox can't go here, because Maria might interrupt it while it's bit-banging.
   3015  f01e
   3016  f01e				   longcontrollerreads		; ** controllers that take a lot of time to read. We use much of the visible screen here.
   3017  f01e				  -	      ifconst	LONGCONTROLLERREAD
   3018  f01e				  -	      lda	#$38
   3019  f01e				  -	      ifconst	LONGDEBUG
   3020  f01e				  -	      sta	BACKGRND
   3021  f01e				  -	      endif
   3022  f01e				  -	      sta	inttemp6
   3023  f01e				  -
   3024  f01e				  -longreadlineloop
   3025  f01e				  -	      ldx	#1
   3026  f01e				  -longreadloop
   3027  f01e				  -	      ldy	port0control,x
   3028  f01e				  -	      lda	longreadroutinelo,y
   3029  f01e				  -	      sta	inttemp3
   3030  f01e				  -	      lda	longreadroutinehi,y
   3031  f01e				  -	      sta	inttemp4
   3032  f01e				  -	      ora	inttemp3
   3033  f01e				  -	      beq	longreadloopreturn
   3034  f01e				  -	      jmp	(inttemp3)
   3035  f01e				  -longreadloopreturn
   3036  f01e				  -	      dex
   3037  f01e				  -	      bpl	longreadloop
   3038  f01e				  -	      dec	inttemp6
   3039  f01e				  -	      sta	WSYNC
   3040  f01e				  -	      bne	longreadlineloop
   3041  f01e				  -
   3042  f01e				  -	      ifconst	LONGDEBUG
   3043  f01e				  -	      lda	#$00
   3044  f01e				  -	      sta	BACKGRND
   3045  f01e				  -	      endif
   3046  f01e					      endif		; LONGCONTROLLERREAD
   3047  f01e
   3048  f01e		       20 e2 f1 	      jsr	servicesfxchannels
   3049  f021				  -	      ifconst	MUSICTRACKER
   3050  f021				  -	      jsr	servicesong
   3051  f021					      endif		; MUSICTRACKER
   3052  f021
   3053  f021		       ee a4 01 	      inc	framecounter
   3054  f024		       ad a4 01 	      lda	framecounter
   3055  f027		       29 3f		      and	#63
   3056  f029		       d0 08		      bne	skipcountdownseconds
   3057  f02b		       ad a5 01 	      lda	countdownseconds
   3058  f02e		       f0 03		      beq	skipcountdownseconds
   3059  f030		       ce a5 01 	      dec	countdownseconds
   3060  f033				   skipcountdownseconds
   3061  f033
   3062  f033		       a2 01		      ldx	#1
   3063  f035				   buttonreadloop
   3064  f035		       8a		      txa
   3065  f036		       48		      pha
   3066  f037		       bc e2 01 	      ldy	port0control,x
   3067  f03a		       b9 c5 f1 	      lda	buttonhandlerlo,y
   3068  f03d		       85 da		      sta	inttemp3
   3069  f03f		       b9 ba f1 	      lda	buttonhandlerhi,y
   3070  f042		       85 db		      sta	inttemp4
   3071  f044		       05 da		      ora	inttemp3
   3072  f046		       f0 03		      beq	buttonreadloopreturn
   3073  f048		       6c da 00 	      jmp	(inttemp3)
   3074  f04b				   buttonreadloopreturn
   3075  f04b		       68		      pla
   3076  f04c		       aa		      tax
   3077  f04d		       ca		      dex
   3078  f04e		       10 e5		      bpl	buttonreadloop
   3079  f050
   3080  f050				  -	      ifconst	DRIVINGSUPPORT
   3081  f050				  -	      jsr	drivingupdate
   3082  f050					      endif		; DRIVINGSUPPORT
   3083  f050				  -	      ifconst	KEYPADSUPPORT
   3084  f050				  -	      jsr	keypadrowselect
   3085  f050					      endif		; KEYPADSUPPORT
   3086  f050
   3087  f050
   3088  f050		       ad b5 01 	      lda	doublebufferminimumframeindex
   3089  f053		       f0 03		      beq	skipdoublebufferminimumframeindexadjust
   3090  f055		       ce b5 01 	      dec	doublebufferminimumframeindex
   3091  f058				   skipdoublebufferminimumframeindexadjust
   3092  f058
   3093  f058		       68		      pla
   3094  f059		       a8		      tay
   3095  f05a		       68		      pla
   3096  f05b		       aa		      tax
   3097  f05c				   skiptopscreenroutine
   3098  f05c		       68		      pla
   3099  f05d				   IRQ
   3100  f05d		       40		      RTI
   3101  f05e
   3102  f05e				  -	      ifconst	LONGCONTROLLERREAD
   3103  f05e				  -longreadroutinelo
   3104  f05e				  -			;	  NONE		PROLINE        LIGHTGUN      PADDLE
   3105  f05e				  -	      .byte	0, 0, 0, 0
   3106  f05e				  -			;	  TRKBALL	VCS STICK      DRIVING	     KEYPAD
   3107  f05e				  -	      .byte	0, 0, 0, 0
   3108  f05e				  -			;	  STMOUSE	AMOUSE	       ATARIVOX
   3109  f05e				  -	      .byte	<mouseupdate, <mouseupdate, 0
   3110  f05e				  -
   3111  f05e				  -longreadroutinehi
   3112  f05e				  -			;	  NONE		PROLINE        LIGHTGUN      PADDLE
   3113  f05e				  -	      .byte	0, 0, 0, 0
   3114  f05e				  -			;	  TRKBALL	VCS STICK      DRIVING	     KEYPAD
   3115  f05e				  -	      .byte	0, 0, 0, 0
   3116  f05e				  -			;	  STMOUSE	AMOUSE	       ATARIVOX
   3117  f05e				  -	      .byte	>mouseupdate, >mouseupdate, 0
   3118  f05e				  -nullroutine
   3119  f05e				  -	      rts
   3120  f05e					      endif		; LONGCONTROLLERREAD
   3121  f05e
   3122  f05e				   reallyoffvisible
   3123  f05e		       85 24		      sta	WSYNC
   3124  f060
   3125  f060		       a9 00		      lda	#0
   3126  f062		       85 4d		      sta	visibleover
   3127  f064				  -	      ifconst	DEBUGINTERRUPT
   3128  f064				  -	      sta	BACKGRND
   3129  f064					      endif
   3130  f064
   3131  f064		       a9 03		      lda	#3
   3132  f066		       8d b2 01 	      sta	interruptindex
   3133  f069
   3134  f069		       8a		      txa
   3135  f06a		       48		      pha
   3136  f06b		       98		      tya
   3137  f06c		       48		      pha
   3138  f06d		       d8		      cld
   3139  f06e
   3140  f06e		       20 5c f1 	      jsr	uninterruptableroutines
   3141  f071
   3142  f071				  -	      ifconst	.userinterrupt
   3143  f071				  -	      jsr	.userinterrupt
   3144  f071					      endif
   3145  f071
   3146  f071				  -	      ifconst	KEYPADSUPPORT
   3147  f071				  -	      jsr	keypadcolumnread
   3148  f071					      endif
   3149  f071
   3150  f071		       68		      pla
   3151  f072		       a8		      tay
   3152  f073		       68		      pla
   3153  f074		       aa		      tax
   3154  f075		       68		      pla
   3155  f076		       40		      RTI
   3156  f077
   3157  f077				   clearscreen
   3158  f077		       a2 0b		      ldx	#(WZONECOUNT-1)
   3159  f079		       a9 00		      lda	#0
   3160  f07b				   clearscreenloop
   3161  f07b		       95 65		      sta	dlend,x
   3162  f07d		       ca		      dex
   3163  f07e		       10 fb		      bpl	clearscreenloop
   3164  f080		       a9 00		      lda	#0
   3165  f082		       8d ad 01 	      sta	valbufend	; clear the bcd value buffer
   3166  f085		       8d ae 01 	      sta	valbufendsave
   3167  f088		       60		      rts
   3168  f089
   3169  f089				   restorescreen
   3170  f089		       a2 0b		      ldx	#(WZONECOUNT-1)
   3171  f08b		       a9 00		      lda	#0
   3172  f08d				   restorescreenloop
   3173  f08d		       b5 82		      lda	dlendsave,x
   3174  f08f		       95 65		      sta	dlend,x
   3175  f091		       ca		      dex
   3176  f092		       10 f9		      bpl	restorescreenloop
   3177  f094		       ad ae 01 	      lda	valbufendsave
   3178  f097		       8d ad 01 	      sta	valbufend
   3179  f09a		       60		      rts
   3180  f09b
   3181  f09b				   savescreen
   3182  f09b		       a2 0b		      ldx	#(WZONECOUNT-1)
   3183  f09d				   savescreenloop
   3184  f09d		       b5 65		      lda	dlend,x
   3185  f09f		       95 82		      sta	dlendsave,x
   3186  f0a1		       ca		      dex
   3187  f0a2		       10 f9		      bpl	savescreenloop
   3188  f0a4		       ad ad 01 	      lda	valbufend
   3189  f0a7		       8d ae 01 	      sta	valbufendsave
   3190  f0aa					      ifconst	DOUBLEBUFFER
   3191  f0aa		       a5 d5		      lda	doublebufferstate
   3192  f0ac		       f0 04		      beq	savescreenrts
   3193  f0ae		       a9 01		      lda	#1
   3194  f0b0		       85 d7		      sta	doublebufferbufferdirty
   3195  f0b2				   savescreenrts
   3196  f0b2					      endif		; DOUBLEBUFFER
   3197  f0b2		       60		      rts
   3198  f0b3
   3199  f0b3				   drawscreen
   3200  f0b3
   3201  f0b3		       a9 00		      lda	#0
   3202  f0b5		       85 42		      sta	temp1	; not B&W if we're here...
   3203  f0b7
   3204  f0b7				   drawscreenwait
   3205  f0b7		       a5 4d		      lda	visibleover
   3206  f0b9		       d0 fc		      bne	drawscreenwait	; make sure the visible screen isn't being drawn
   3207  f0bb
   3208  f0bb							;restore some registers in case the game changed them mid-screen...
   3209  f0bb		       ad 07 21 	      lda	sCTRL
   3210  f0be		       05 42		      ora	temp1
   3211  f0c0		       85 3c		      sta	CTRL
   3212  f0c2		       ad 0b 21 	      lda	sCHARBASE
   3213  f0c5		       85 34		      sta	CHARBASE
   3214  f0c7
   3215  f0c7							;ensure all of the display list is terminated...
   3216  f0c7		       20 39 f1 	      jsr	terminatedisplaylist
   3217  f0ca
   3218  f0ca					      ifnconst	pauseroutineoff
   3219  f0ca		       20 d5 f0 	      jsr	pauseroutine
   3220  f0cd					      endif		; pauseroutineoff
   3221  f0cd
   3222  f0cd							; Make sure the visible screen has *started* before we exit. That way we can rely on drawscreen
   3223  f0cd							; delaying a full frame, but still allowing time for basic calculations.
   3224  f0cd				   visiblescreenstartedwait
   3225  f0cd		       a5 4d		      lda	visibleover
   3226  f0cf		       f0 fc		      beq	visiblescreenstartedwait
   3227  f0d1				   visiblescreenstartedwaitdone
   3228  f0d1		       ce 3e 21 	      dec	frameslost	; ; this gets balanced with an "inc frameslost" by an NMI at the top of the screen
   3229  f0d4		       60		      rts
   3230  f0d5
   3231  f0d5					      ifnconst	pauseroutineoff
   3232  f0d5							; check to see if pause was pressed and released
   3233  f0d5				   pauseroutine
   3234  f0d5		       ad b6 01 	      lda	pausedisable
   3235  f0d8		       d0 4e		      bne	leavepauseroutine
   3236  f0da		       a9 08		      lda	#8
   3237  f0dc		       2c 82 02 	      bit	SWCHB
   3238  f0df		       f0 29		      beq	pausepressed
   3239  f0e1
   3240  f0e1					      ifnconst	SOFTRESETASPAUSEOFF
   3241  f0e1					      ifnconst	MOUSESUPPORT
   3242  f0e1		       ad 80 02 	      lda	SWCHA	; then check the soft "RESET" joysick code...
   3243  f0e4		       29 70		      and	#%01110000	; _LDU
   3244  f0e6		       f0 22		      beq	pausepressed
   3245  f0e8					      endif
   3246  f0e8					      endif
   3247  f0e8
   3248  f0e8							;pause isn't pressed
   3249  f0e8		       a9 00		      lda	#0
   3250  f0ea		       8d ac 01 	      sta	pausebuttonflag	; clear pause hold state in case its set
   3251  f0ed
   3252  f0ed							;check if we're in an already paused state
   3253  f0ed		       ad 00 21 	      lda	pausestate
   3254  f0f0		       f0 36		      beq	leavepauseroutine	; nope, leave
   3255  f0f2
   3256  f0f2		       c9 01		      cmp	#1	; last frame was the start of pausing
   3257  f0f4		       f0 2b		      beq	enterpausestate2	; move from state 1 to 2
   3258  f0f6
   3259  f0f6		       c9 02		      cmp	#2
   3260  f0f8		       f0 34		      beq	carryonpausing
   3261  f0fa
   3262  f0fa							;pausestate must be >2, which means we're ending an unpause 
   3263  f0fa		       a9 00		      lda	#0
   3264  f0fc		       8d ac 01 	      sta	pausebuttonflag
   3265  f0ff		       8d 00 21 	      sta	pausestate
   3266  f102		       ad 07 21 	      lda	sCTRL
   3267  f105		       85 3c		      sta	CTRL
   3268  f107		       4c 28 f1 	      jmp	leavepauseroutine
   3269  f10a
   3270  f10a				   pausepressed
   3271  f10a							;pause is pressed
   3272  f10a		       ad ac 01 	      lda	pausebuttonflag
   3273  f10d		       c9 ff		      cmp	#$ff
   3274  f10f		       f0 1d		      beq	carryonpausing
   3275  f111
   3276  f111							;its a new press, increment the state
   3277  f111		       ee 00 21 	      inc	pausestate
   3278  f114
   3279  f114							;silence volume at the start and end of pausing
   3280  f114		       a9 00		      lda	#0
   3281  f116		       85 19		      sta	AUDV0
   3282  f118		       85 1a		      sta	AUDV1
   3283  f11a
   3284  f11a				  -	      ifconst	pokeysupport
   3285  f11a				  -	      ldy	#7
   3286  f11a				  -pausesilencepokeyaudioloop
   3287  f11a				  -	      sta	(pokeybase),y
   3288  f11a				  -	      dey
   3289  f11a				  -	      bpl	pausesilencepokeyaudioloop
   3290  f11a					      endif		; pokeysupport
   3291  f11a
   3292  f11a		       a9 ff		      lda	#$ff
   3293  f11c		       8d ac 01 	      sta	pausebuttonflag
   3294  f11f		       d0 0d		      bne	carryonpausing
   3295  f121
   3296  f121				   enterpausestate2
   3297  f121		       a9 02		      lda	#2
   3298  f123		       8d 00 21 	      sta	pausestate
   3299  f126		       d0 06		      bne	carryonpausing
   3300  f128				   leavepauseroutine
   3301  f128		       ad 07 21 	      lda	sCTRL
   3302  f12b		       85 3c		      sta	CTRL
   3303  f12d		       60		      rts
   3304  f12e				   carryonpausing
   3305  f12e				  -	      ifconst	.pause
   3306  f12e				  -	      jsr	.pause
   3307  f12e					      endif		; .pause
   3308  f12e		       ad 07 21 	      lda	sCTRL
   3309  f131		       09 80		      ora	#%10000000	; turn off colorburst during pause...
   3310  f133		       85 3c		      sta	CTRL
   3311  f135		       4c d5 f0 	      jmp	pauseroutine
   3312  f138					      endif		; pauseroutineoff
   3313  f138
   3314  f138
   3315  f138					      ifconst	DOUBLEBUFFER
   3316  f138				   skipterminatedisplaylistreturn
   3317  f138		       60		      rts
   3318  f139					      endif		; DOUBLEBUFFER
   3319  f139				   terminatedisplaylist
   3320  f139					      ifconst	DOUBLEBUFFER
   3321  f139		       a5 d5		      lda	doublebufferstate
   3322  f13b		       d0 fb		      bne	skipterminatedisplaylistreturn	; double-buffering runs it's own DL termination code
   3323  f13d					      endif		; DOUBLEBUFFER
   3324  f13d				   terminatedisplaybuffer
   3325  f13d							;add DL end entry on each DL
   3326  f13d		       a2 0b		      ldx	#(WZONECOUNT-1)
   3327  f13f				   dlendloop
   3328  f13f		       bd 24 f7 	      lda	DLPOINTL,x
   3329  f142					      ifconst	DOUBLEBUFFER
   3330  f142		       18		      clc
   3331  f143		       65 d6		      adc	doublebufferdloffset
   3332  f145					      endif		; DOUBLEBUFFER
   3333  f145		       85 63		      sta	dlpnt
   3334  f147		       bd 18 f7 	      lda	DLPOINTH,x
   3335  f14a					      ifconst	DOUBLEBUFFER
   3336  f14a		       69 00		      adc	#0
   3337  f14c					      endif		; DOUBLEBUFFER
   3338  f14c		       85 64		      sta	dlpnt+1
   3339  f14e		       b4 65		      ldy	dlend,x
   3340  f150		       a9 00		      lda	#$00
   3341  f152				   dlendmoreloops
   3342  f152		       c8		      iny
   3343  f153		       91 63		      sta	(dlpnt),y
   3344  f155				  -	      ifconst	FRAMESKIPGLITCHFIXWEAK
   3345  f155				  -	      cpy	#DLLASTOBJ+1
   3346  f155				  -	      beq	dlendthiszonedone
   3347  f155				  -	      iny
   3348  f155				  -	      iny
   3349  f155				  -	      iny
   3350  f155				  -	      iny
   3351  f155				  -	      iny
   3352  f155				  -	      sta	(dlpnt),y
   3353  f155				  -dlendthiszonedone
   3354  f155					      endif	FRAMESKIPGLITCHFIXWEAK
   3355  f155				  -	      ifconst	FRAMESKIPGLITCHFIX
   3356  f155				  -	      iny
   3357  f155				  -	      iny
   3358  f155				  -	      iny
   3359  f155				  -	      iny
   3360  f155				  -	      cpy	#DLLASTOBJ-1
   3361  f155				  -	      bcc	dlendmoreloops
   3362  f155					      endif		; FRAMESKIPGLITCHFIX
   3363  f155		       ca		      dex
   3364  f156		       10 e7		      bpl	dlendloop
   3365  f158
   3366  f158					      ifnconst	pauseroutineoff
   3367  f158		       20 d5 f0 	      jsr	pauseroutine
   3368  f15b					      endif		; pauseroutineoff
   3369  f15b		       60		      rts
   3370  f15c
   3371  f15c				   uninterruptableroutines
   3372  f15c							; this is for routines that must happen off the visible screen, each frame.
   3373  f15c
   3374  f15c				  -	      ifconst	AVOXVOICE
   3375  f15c				  -	      jsr	serviceatarivoxqueue
   3376  f15c					      endif
   3377  f15c
   3378  f15c		       a9 00		      lda	#0
   3379  f15e		       8d e1 01 	      sta	palfastframe
   3380  f161		       ad 09 21 	      lda	paldetected
   3381  f164		       f0 10		      beq	skippalframeadjusting
   3382  f166							; ** PAL console is detected. we increment palframes to accurately count 5 frames,
   3383  f166		       ae e0 01 	      ldx	palframes
   3384  f169		       e8		      inx
   3385  f16a		       e0 05		      cpx	#5
   3386  f16c		       d0 05		      bne	palframeskipdone
   3387  f16e		       ee e1 01 	      inc	palfastframe
   3388  f171		       a2 00		      ldx	#0
   3389  f173				   palframeskipdone
   3390  f173		       8e e0 01 	      stx	palframes
   3391  f176				   skippalframeadjusting
   3392  f176
   3393  f176				  -	      ifconst	MUSICTRACKER
   3394  f176				  -			; We normally run the servicesong routine from the top-screen interrupt, but if it
   3395  f176				  -			; happens to interrupt the scheduling of a sound effect in the game code, we skip it.
   3396  f176				  -			; If that happens, we try again here. Chances are very small we'll run into the same
   3397  f176				  -			; problem twice, and if we do, we just drop a musical note or two.
   3398  f176				  -	      lda	sfxschedulemissed
   3399  f176				  -	      beq	servicesongwasnotmissed
   3400  f176				  -	      jsr	servicesong
   3401  f176				  -servicesongwasnotmissed
   3402  f176					      endif		; MUSICTRACKER
   3403  f176
   3404  f176		       60		      rts
   3405  f177
   3406  f177				   serviceatarivoxqueue
   3407  f177				  -	      ifconst	AVOXVOICE
   3408  f177				  -	      lda	voxlock
   3409  f177				  -	      bne	skipvoxprocessing	; the vox is in the middle of speech address update
   3410  f177				  -skipvoxqueuesizedec
   3411  f177				  -	      jmp	processavoxvoice
   3412  f177				  -skipvoxprocessing
   3413  f177				  -	      rts
   3414  f177				  -
   3415  f177				  -processavoxvoice
   3416  f177				  -	      lda	avoxenable
   3417  f177				  -	      bne	avoxfixport
   3418  f177				  -	      SPKOUT	tempavox
   3419  f177				  -	      rts
   3420  f177				  -avoxfixport
   3421  f177				  -	      lda	#0	; restore the port to all bits as inputs...
   3422  f177				  -	      sta	CTLSWA
   3423  f177				  -	      rts
   3424  f177				  -silenceavoxvoice
   3425  f177				  -	      SPEAK	avoxsilentdata
   3426  f177				  -	      rts
   3427  f177				  -avoxsilentdata
   3428  f177				  -	      .byte	31,255
   3429  f177					      else
   3430  f177		       60		      rts
   3431  f178					      endif		; AVOXVOICE
   3432  f178
   3433  f178				   joybuttonhandler
   3434  f178		       8a		      txa
   3435  f179		       0a		      asl
   3436  f17a		       a8		      tay
   3437  f17b		       b9 08 00 	      lda	INPT0,y
   3438  f17e		       4a		      lsr
   3439  f17f		       9d 02 21 	      sta	sINPT1,x
   3440  f182		       b9 09 00 	      lda	INPT1,y
   3441  f185		       29 80		      and	#%10000000
   3442  f187		       1d 02 21 	      ora	sINPT1,x
   3443  f18a							;eor genesisdetected0,x ; invert INPT1 if genesis is detected
   3444  f18a		       9d 02 21 	      sta	sINPT1,x
   3445  f18d
   3446  f18d		       b5 0c		      lda	INPT4,x
   3447  f18f		       30 19		      bmi	.skip1bjoyfirecheck
   3448  f191							;one button joystick is down
   3449  f191		       49 80		      eor	#%10000000
   3450  f193		       9d 02 21 	      sta	sINPT1,x
   3451  f196
   3452  f196		       ad b1 01 	      lda	joybuttonmode
   3453  f199		       3d ad f1 	      and	twobuttonmask,x
   3454  f19c		       f0 0c		      beq	.skip1bjoyfirecheck
   3455  f19e		       ad b1 01 	      lda	joybuttonmode
   3456  f1a1		       1d ad f1 	      ora	twobuttonmask,x
   3457  f1a4		       8d b1 01 	      sta	joybuttonmode
   3458  f1a7		       8d 82 02 	      sta	SWCHB
   3459  f1aa				   .skip1bjoyfirecheck
   3460  f1aa		       4c 4b f0 	      jmp	buttonreadloopreturn
   3461  f1ad
   3462  f1ad				   twobuttonmask
   3463  f1ad		       04 10		      .byte.b	%00000100,%00010000
   3464  f1af
   3465  f1af				   gunbuttonhandler		; outside of the conditional, so our button handler LUT is valid
   3466  f1af				  -	      ifconst	LIGHTGUNSUPPORT
   3467  f1af				  -	      cpx	#0
   3468  f1af				  -	      bne	secondportgunhandler
   3469  f1af				  -firstportgunhandler
   3470  f1af				  -	      lda	SWCHA
   3471  f1af				  -	      asl
   3472  f1af				  -	      asl
   3473  f1af				  -	      asl		; shift D4 to D7
   3474  f1af				  -	      and	#%10000000
   3475  f1af				  -	      eor	#%10000000
   3476  f1af				  -	      sta	sINPT1
   3477  f1af				  -	      jmp	buttonreadloopreturn
   3478  f1af				  -secondportgunhandler
   3479  f1af				  -	      lda	SWCHA
   3480  f1af				  -	      lsr		; shift D0 into carry
   3481  f1af				  -	      lsr		; shift carry into D7
   3482  f1af				  -	      and	#%10000000
   3483  f1af				  -	      eor	#%10000000
   3484  f1af				  -	      sta	sINPT3
   3485  f1af				  -	      jmp	buttonreadloopreturn
   3486  f1af					      endif		; LIGHTGUNSUPPORT
   3487  f1af
   3488  f1af				   controlsusing2buttoncode
   3489  f1af		       00		      .byte.b	0	; 00=no controller plugged in
   3490  f1b0		       01		      .byte.b	1	; 01=proline joystick
   3491  f1b1		       00		      .byte.b	0	; 02=lightgun
   3492  f1b2		       00		      .byte.b	0	; 03=paddle
   3493  f1b3		       01		      .byte.b	1	; 04=trakball
   3494  f1b4		       01		      .byte.b	1	; 05=vcs joystick
   3495  f1b5		       01		      .byte.b	1	; 06=driving control
   3496  f1b6		       00		      .byte.b	0	; 07=keypad control
   3497  f1b7		       00		      .byte.b	0	; 08=st mouse/cx80
   3498  f1b8		       00		      .byte.b	0	; 09=amiga mouse
   3499  f1b9		       01		      .byte.b	1	; 10=atarivox
   3500  f1ba
   3501  f1ba				   buttonhandlerhi
   3502  f1ba		       00		      .byte.b	0	; 00=no controller plugged in
   3503  f1bb		       f1		      .byte.b	>joybuttonhandler	; 01=proline joystick
   3504  f1bc		       f1		      .byte.b	>gunbuttonhandler	; 02=lightgun
   3505  f1bd		       00		      .byte.b	0	; 03=paddle [not implemented yet]
   3506  f1be		       f1		      .byte.b	>joybuttonhandler	; 04=trakball
   3507  f1bf		       f1		      .byte.b	>joybuttonhandler	; 05=vcs joystick
   3508  f1c0		       f1		      .byte.b	>joybuttonhandler	; 06=driving control
   3509  f1c1		       00		      .byte.b	0	; 07=keypad
   3510  f1c2		       f6		      .byte.b	>mousebuttonhandler	; 08=st mouse
   3511  f1c3		       f6		      .byte.b	>mousebuttonhandler	; 09=amiga mouse
   3512  f1c4		       f1		      .byte.b	>joybuttonhandler	; 10=atarivox
   3513  f1c5				   buttonhandlerlo
   3514  f1c5		       00		      .byte.b	0	; 00=no controller plugged in
   3515  f1c6		       78		      .byte.b	<joybuttonhandler	; 01=proline joystick
   3516  f1c7		       af		      .byte.b	<gunbuttonhandler	; 02=lightgun 
   3517  f1c8		       00		      .byte.b	0	; 03=paddle [not implemented yet]
   3518  f1c9		       78		      .byte.b	<joybuttonhandler	; 04=trakball
   3519  f1ca		       78		      .byte.b	<joybuttonhandler	; 05=vcs joystick
   3520  f1cb		       78		      .byte.b	<joybuttonhandler	; 06=driving control
   3521  f1cc		       00		      .byte.b	0	; 07=keypad
   3522  f1cd		       29		      .byte.b	<mousebuttonhandler	; 08=st mouse
   3523  f1ce		       29		      .byte.b	<mousebuttonhandler	; 09=amiga mouse
   3524  f1cf		       78		      .byte.b	<joybuttonhandler	; 10=atarivox
   3525  f1d0
   3526  f1d0				   drawwait
   3527  f1d0		       a5 4d		      lda	visibleover
   3528  f1d2		       d0 fc		      bne	drawwait	; make sure the visible screen isn't being drawn
   3529  f1d4		       60		      rts
   3530  f1d5
   3531  f1d5				   mutetia
   3532  f1d5		       a9 00		      lda	#0
   3533  f1d7		       a2 03		      ldx	#3
   3534  f1d9				   mutetialoop
   3535  f1d9		       95 4e		      sta	sfx1pointlo,x
   3536  f1db		       95 17		      sta	AUDF0,x
   3537  f1dd		       ca		      dex
   3538  f1de		       10 f9		      bpl	mutetialoop
   3539  f1e0		       60		      rts
   3540  f1e1
   3541  f1e1				   servicesfxchannelsdone
   3542  f1e1					      ifnconst	pokeysupport
   3543  f1e1		       60		      rts
   3544  f1e2				  -	      else
   3545  f1e2				  -	      jmp	checkpokeyplaying
   3546  f1e2					      endif
   3547  f1e2				   servicesfxchannels
   3548  f1e2		       a2 ff		      ldx	#255
   3549  f1e4				   servicesfxchannelsloop
   3550  f1e4		       e8		      inx
   3551  f1e5					      ifnconst	TIASFXMONO
   3552  f1e5		       e0 02		      cpx	#2
   3553  f1e7				  -	      else
   3554  f1e7				  -	      cpx	#1
   3555  f1e7					      endif
   3556  f1e7		       f0 f8		      beq	servicesfxchannelsdone
   3557  f1e9
   3558  f1e9		       b5 4e		      lda	sfx1pointlo,x
   3559  f1eb		       85 dc		      sta	inttemp5
   3560  f1ed		       15 50		      ora	sfx1pointhi,x
   3561  f1ef		       f0 f3		      beq	servicesfxchannelsloop
   3562  f1f1		       b5 50		      lda	sfx1pointhi,x
   3563  f1f3		       85 dd		      sta	inttemp6
   3564  f1f5
   3565  f1f5		       b5 58		      lda	sfx1tick,x
   3566  f1f7		       f0 05		      beq	servicesfx_cont1	; this chunk is over, load the next!
   3567  f1f9		       d6 58		      dec	sfx1tick,x	; frame countdown is non-zero, subtract one
   3568  f1fb		       4c e4 f1 	      jmp	servicesfxchannelsloop
   3569  f1fe				   servicesfx_cont1
   3570  f1fe
   3571  f1fe		       b5 56		      lda	sfx1frames,x	; set the frame countdown for this sound chunk
   3572  f200		       95 58		      sta	sfx1tick,x
   3573  f202
   3574  f202		       b5 52		      lda	sfx1priority,x	; decrease the sound's priority if its non-zero
   3575  f204		       f0 02		      beq	servicesfx_cont2
   3576  f206		       d6 52		      dec	sfx1priority,x
   3577  f208				   servicesfx_cont2
   3578  f208
   3579  f208		       a0 00		      ldy	#0	; play the sound
   3580  f20a		       b1 dc		      lda	(inttemp5),y
   3581  f20c		       85 d8		      sta	inttemp1
   3582  f20e
   3583  f20e				  -	      ifconst	MUSICTRACKER
   3584  f20e				  -	      lda	sfx1notedata,x
   3585  f20e				  -	      beq	exitmusictracker	; exit if this isn't a pitched instrument
   3586  f20e				  -	      ldy	#0
   3587  f20e				  -	      sty	inttemp2
   3588  f20e				  -	      clc
   3589  f20e				  -	      adc	(inttemp5),y
   3590  f20e				  -	      asl		; x2
   3591  f20e				  -	      tay
   3592  f20e				  -	      lda	tiatrackeroctavenotes,y
   3593  f20e				  -	      sta	AUDC0,x
   3594  f20e				  -	      iny
   3595  f20e				  -	      lda	tiatrackeroctavenotes,y
   3596  f20e				  -	      sta	AUDF0,x
   3597  f20e				  -	      ldy	#1
   3598  f20e				  -	      jmp	sfxvolumeentrypt
   3599  f20e				  -exitmusictracker
   3600  f20e				  -	      lda	inttemp1
   3601  f20e					      endif		; MUSICTRACKER
   3602  f20e
   3603  f20e		       18		      clc
   3604  f20f		       75 54		      adc	sfx1poffset,x	; take into account any pitch modification
   3605  f211		       95 17		      sta	AUDF0,x
   3606  f213		       c8		      iny
   3607  f214		       b1 dc		      lda	(inttemp5),y
   3608  f216		       95 15		      sta	AUDC0,x
   3609  f218		       85 d9		      sta	inttemp2
   3610  f21a		       c8		      iny
   3611  f21b				   sfxvolumeentrypt
   3612  f21b		       b1 dc		      lda	(inttemp5),y
   3613  f21d		       95 19		      sta	AUDV0,x
   3614  f21f		       c9 10		      cmp	#$10
   3615  f221		       b0 19		      bcs	sfxsoundloop	; AUDV0>$0F means the sound is looped while priority is active
   3616  f223
   3617  f223		       05 d9		      ora	inttemp2
   3618  f225		       05 d8		      ora	inttemp1	; check if F|C|V=0
   3619  f227		       f0 23		      beq	zerosfx	; if so, we're at the end of the sound.
   3620  f229
   3621  f229				   advancesfxpointer
   3622  f229							; advance the pointer to the next sound chunk
   3623  f229		       c8		      iny
   3624  f22a		       84 da		      sty	inttemp3
   3625  f22c		       18		      clc
   3626  f22d		       b5 4e		      lda	sfx1pointlo,x
   3627  f22f		       65 da		      adc	inttemp3
   3628  f231		       95 4e		      sta	sfx1pointlo,x
   3629  f233		       b5 50		      lda	sfx1pointhi,x
   3630  f235		       69 00		      adc	#0
   3631  f237		       95 50		      sta	sfx1pointhi,x
   3632  f239		       4c e4 f1 	      jmp	servicesfxchannelsloop
   3633  f23c
   3634  f23c				   sfxsoundloop
   3635  f23c		       48		      pha
   3636  f23d		       b5 52		      lda	sfx1priority,x
   3637  f23f		       d0 04		      bne	sfxsoundloop_carryon
   3638  f241		       68		      pla		; fix the stack before we go
   3639  f242		       4c 29 f2 	      jmp	advancesfxpointer
   3640  f245				   sfxsoundloop_carryon
   3641  f245		       68		      pla
   3642  f246		       29 f0		      and	#$F0
   3643  f248		       4a		      lsr
   3644  f249		       4a		      lsr
   3645  f24a		       4a		      lsr
   3646  f24b		       4a		      lsr
   3647  f24c
   3648  f24c				   zerosfx
   3649  f24c		       95 4e		      sta	sfx1pointlo,x
   3650  f24e		       95 50		      sta	sfx1pointhi,x
   3651  f250		       95 52		      sta	sfx1priority,x
   3652  f252		       4c e4 f1 	      jmp	servicesfxchannelsloop
   3653  f255
   3654  f255
   3655  f255				   schedulesfx
   3656  f255							; called with sfxinstrumentlo=<data sfxinstrumenthi=>data sfxpitchoffset=pitch-offset sfxnoteindex=note index
   3657  f255		       a0 00		      ldy	#0
   3658  f257		       b1 e0		      lda	(sfxinstrumentlo),y
   3659  f259				  -	      ifconst	pokeysupport
   3660  f259				  -	      cmp	#$20	; POKEY?
   3661  f259				  -	      bne	scheduletiasfx
   3662  f259				  -	      jmp	schedulepokeysfx
   3663  f259					      endif
   3664  f259				   scheduletiasfx
   3665  f259							;cmp #$10 ; TIA?
   3666  f259							;beq continuescheduletiasfx
   3667  f259							; rts ; unhandled!!! 
   3668  f259				   continuescheduletiasfx
   3669  f259					      ifnconst	TIASFXMONO
   3670  f259		       a5 4e		      lda	sfx1pointlo
   3671  f25b		       05 50		      ora	sfx1pointhi
   3672  f25d		       f0 13		      beq	schedulesfx1	;if channel 1 is idle, use it
   3673  f25f		       a5 4f		      lda	sfx2pointlo
   3674  f261		       05 51		      ora	sfx2pointhi
   3675  f263		       f0 11		      beq	schedulesfx2	;if channel 2 is idle, use it
   3676  f265							; Both channels are scheduled. 
   3677  f265		       a0 01		      ldy	#1
   3678  f267		       b1 e0		      lda	(sfxinstrumentlo),y
   3679  f269		       d0 01		      bne	interruptsfx
   3680  f26b		       60		      rts		; the new sound has 0 priority and both channels are busy. Skip playing it.
   3681  f26c				   interruptsfx
   3682  f26c							;Compare which active sound has a lower priority. We'll interrupt the lower one.
   3683  f26c		       a5 52		      lda	sfx1priority
   3684  f26e		       c5 53		      cmp	sfx2priority
   3685  f270		       b0 04		      bcs	schedulesfx2
   3686  f272					      endif		; !TIASFXMONO
   3687  f272
   3688  f272				   schedulesfx1
   3689  f272		       a2 00		      ldx	#0	; channel 1
   3690  f274					      ifnconst	TIASFXMONO
   3691  f274		       f0 02		      beq	skipschedulesfx2
   3692  f276				   schedulesfx2
   3693  f276		       a2 01		      ldx	#1	; channel 2
   3694  f278				   skipschedulesfx2
   3695  f278					      endif		; !TIASFXMONO
   3696  f278
   3697  f278				  -	      ifconst	MUSICTRACKER
   3698  f278				  -	      lda	sfxnoteindex
   3699  f278				  -	      bpl	skipdrumkitoverride
   3700  f278				  -	      and	#$7F	; subtract 128
   3701  f278				  -	      sec
   3702  f278				  -	      sbc	#4	; drums start at 132, i.e. octave 10
   3703  f278				  -	      asl
   3704  f278				  -	      tay
   3705  f278				  -	      lda	tiadrumkitdefinition,y
   3706  f278				  -	      sta	sfxinstrumentlo
   3707  f278				  -	      iny
   3708  f278				  -	      lda	tiadrumkitdefinition,y
   3709  f278				  -	      sta	sfxinstrumenthi
   3710  f278				  -	      lda	#0
   3711  f278				  -	      sta	sfxnoteindex	; and tell the driver it's a non-pitched instrument
   3712  f278				  -skipdrumkitoverride
   3713  f278					      endif		; MUSICTRACKER
   3714  f278		       a0 01		      ldy	#1	; get priority and sound-resolution (in frames)
   3715  f27a		       b1 e0		      lda	(sfxinstrumentlo),y
   3716  f27c		       95 52		      sta	sfx1priority,x
   3717  f27e		       c8		      iny
   3718  f27f		       b1 e0		      lda	(sfxinstrumentlo),y
   3719  f281		       95 56		      sta	sfx1frames,x
   3720  f283		       a5 e0		      lda	sfxinstrumentlo
   3721  f285		       18		      clc
   3722  f286		       69 03		      adc	#3
   3723  f288		       95 4e		      sta	sfx1pointlo,x
   3724  f28a		       a5 e1		      lda	sfxinstrumenthi
   3725  f28c		       69 00		      adc	#0
   3726  f28e		       95 50		      sta	sfx1pointhi,x
   3727  f290		       a5 e2		      lda	sfxpitchoffset
   3728  f292		       95 54		      sta	sfx1poffset,x
   3729  f294		       a9 00		      lda	#0
   3730  f296		       95 58		      sta	sfx1tick,x
   3731  f298		       a5 e3		      lda	sfxnoteindex
   3732  f29a		       95 cd		      sta	sfx1notedata,x
   3733  f29c		       60		      rts
   3734  f29d
   3735  f29d				   plotsprite
   3736  f29d					      ifconst	DOUBLEBUFFER
   3737  f29d		       a5 d5		      lda	doublebufferstate
   3738  f29f		       d0 04		      bne	skipplotspritewait
   3739  f2a1					      endif		; DOUBLEBUFFER
   3740  f2a1				   plotspritewait
   3741  f2a1		       a5 4d		      lda	visibleover
   3742  f2a3		       d0 fc		      bne	plotspritewait
   3743  f2a5				   skipplotspritewait
   3744  f2a5
   3745  f2a5							;arguments: 
   3746  f2a5							; temp1=lo graphicdata 
   3747  f2a5							; temp2=hi graphicdata 
   3748  f2a5							; temp3=palette | width byte
   3749  f2a5							; temp4=x
   3750  f2a5							; temp5=y
   3751  f2a5							; temp6=mode
   3752  f2a5		       a5 46		      lda	temp5	;Y position
   3753  f2a7		       4a		      lsr		; 2 - Divide by 8 or 16
   3754  f2a8		       4a		      lsr		; 2
   3755  f2a9		       4a		      lsr		; 2
   3756  f2aa					      if	WZONEHEIGHT = 16
   3757  f2aa		       4a		      lsr		; 2
   3758  f2ab					      endif
   3759  f2ab
   3760  f2ab		       aa		      tax
   3761  f2ac
   3762  f2ac							; the next block allows for vertical masking, and ensures we don't overwrite non-DL memory
   3763  f2ac
   3764  f2ac		       c9 0c		      cmp	#WZONECOUNT
   3765  f2ae
   3766  f2ae		       90 0a		      bcc	continueplotsprite1	; the sprite is fully on-screen, so carry on...
   3767  f2b0							; otherwise, check to see if the bottom half is in zone 0...
   3768  f2b0
   3769  f2b0					      if	WZONEHEIGHT = 16
   3770  f2b0		       c9 0f		      cmp	#15
   3771  f2b2				  -	      else
   3772  f2b2				  -	      cmp	#31
   3773  f2b2					      endif
   3774  f2b2
   3775  f2b2		       d0 05		      bne	exitplotsprite1
   3776  f2b4		       a2 00		      ldx	#0
   3777  f2b6		       4c f6 f2 	      jmp	continueplotsprite2
   3778  f2b9				   exitplotsprite1
   3779  f2b9		       60		      rts
   3780  f2ba
   3781  f2ba				   continueplotsprite1
   3782  f2ba
   3783  f2ba		       bd 24 f7 	      lda	DLPOINTL,x	;Get pointer to DL that this sprite starts in
   3784  f2bd					      ifconst	DOUBLEBUFFER
   3785  f2bd		       18		      clc
   3786  f2be		       65 d6		      adc	doublebufferdloffset
   3787  f2c0					      endif		; DOUBLEBUFFER
   3788  f2c0		       85 63		      sta	dlpnt
   3789  f2c2		       bd 18 f7 	      lda	DLPOINTH,x
   3790  f2c5					      ifconst	DOUBLEBUFFER
   3791  f2c5		       69 00		      adc	#0
   3792  f2c7					      endif		; DOUBLEBUFFER
   3793  f2c7		       85 64		      sta	dlpnt+1
   3794  f2c9
   3795  f2c9							;Create DL entry for upper part of sprite
   3796  f2c9
   3797  f2c9		       b4 65		      ldy	dlend,x	;Get the index to the end of this DL
   3798  f2cb
   3799  f2cb				  -	      ifconst	CHECKOVERWRITE
   3800  f2cb				  -	      cpy	#DLLASTOBJ
   3801  f2cb				  -	      beq	checkcontinueplotsprite2
   3802  f2cb				  -continueplotsprite1a
   3803  f2cb					      endif
   3804  f2cb
   3805  f2cb		       a5 42		      lda	temp1	; graphic data, lo byte
   3806  f2cd		       91 63		      sta	(dlpnt),y	;Low byte of data address
   3807  f2cf
   3808  f2cf					      ifnconst	ATOMICSPRITEUPDATE
   3809  f2cf		       c8		      iny
   3810  f2d0		       a5 47		      lda	temp6
   3811  f2d2		       91 63		      sta	(dlpnt),y
   3812  f2d4				  -	      else
   3813  f2d4				  -	      iny
   3814  f2d4				  -	      sty	temp8
   3815  f2d4				  -			;lda #0
   3816  f2d4				  -			;sta (dlpnt),y
   3817  f2d4					      endif
   3818  f2d4
   3819  f2d4		       c8		      iny
   3820  f2d5		       a5 46		      lda	temp5	;Y position
   3821  f2d7
   3822  f2d7					      if	WZONEHEIGHT = 16
   3823  f2d7		       29 0f		      and	#$0F
   3824  f2d9				  -	      else		; WZONEHEIGHT = 8
   3825  f2d9				  -	      and	#$7
   3826  f2d9					      endif
   3827  f2d9
   3828  f2d9		       05 43		      ora	temp2	; graphic data, hi byte
   3829  f2db		       91 63		      sta	(dlpnt),y
   3830  f2dd
   3831  f2dd		       c8		      iny
   3832  f2de		       a5 44		      lda	temp3	;palette|width
   3833  f2e0		       91 63		      sta	(dlpnt),y
   3834  f2e2
   3835  f2e2		       c8		      iny
   3836  f2e3		       a5 45		      lda	temp4	;Horizontal position
   3837  f2e5		       91 63		      sta	(dlpnt),y
   3838  f2e7
   3839  f2e7		       c8		      iny
   3840  f2e8		       94 65		      sty	dlend,x
   3841  f2ea
   3842  f2ea				  -	      ifconst	ATOMICSPRITEUPDATE
   3843  f2ea				  -	      ldy	temp8
   3844  f2ea				  -	      lda	temp6
   3845  f2ea				  -	      sta	(dlpnt),y
   3846  f2ea					      endif
   3847  f2ea				   checkcontinueplotsprite2
   3848  f2ea
   3849  f2ea		       a5 46		      lda	temp5
   3850  f2ec		       29 0f		      and	#(WZONEHEIGHT-1)
   3851  f2ee
   3852  f2ee		       f0 3d		      beq	doneSPDL	;branch if it is
   3853  f2f0
   3854  f2f0							;Create DL entry for lower part of sprite
   3855  f2f0
   3856  f2f0		       e8		      inx		;Next region
   3857  f2f1
   3858  f2f1		       e0 0c		      cpx	#WZONECOUNT
   3859  f2f3
   3860  f2f3		       90 01		      bcc	continueplotsprite2	; the second half of the sprite is fully on-screen, so carry on...
   3861  f2f5		       60		      rts
   3862  f2f6				   continueplotsprite2
   3863  f2f6
   3864  f2f6		       bd 24 f7 	      lda	DLPOINTL,x	;Get pointer to next DL
   3865  f2f9					      ifconst	DOUBLEBUFFER
   3866  f2f9		       18		      clc
   3867  f2fa		       65 d6		      adc	doublebufferdloffset
   3868  f2fc					      endif		; DOUBLEBUFFER
   3869  f2fc		       85 63		      sta	dlpnt
   3870  f2fe		       bd 18 f7 	      lda	DLPOINTH,x
   3871  f301					      ifconst	DOUBLEBUFFER
   3872  f301		       69 00		      adc	#0
   3873  f303					      endif		; DOUBLEBUFFER
   3874  f303		       85 64		      sta	dlpnt+1
   3875  f305		       b4 65		      ldy	dlend,x	;Get the index to the end of this DL
   3876  f307
   3877  f307				  -	      ifconst	CHECKOVERWRITE
   3878  f307				  -	      cpy	#DLLASTOBJ
   3879  f307				  -	      bne	continueplotsprite2a
   3880  f307				  -	      rts
   3881  f307				  -continueplotsprite2a
   3882  f307					      endif
   3883  f307
   3884  f307		       a5 42		      lda	temp1	; graphic data, lo byte
   3885  f309		       91 63		      sta	(dlpnt),y
   3886  f30b
   3887  f30b					      ifnconst	ATOMICSPRITEUPDATE
   3888  f30b		       c8		      iny
   3889  f30c		       a5 47		      lda	temp6
   3890  f30e		       91 63		      sta	(dlpnt),y
   3891  f310				  -	      else
   3892  f310				  -	      iny
   3893  f310				  -	      sty	temp8
   3894  f310				  -			;lda #0
   3895  f310				  -			;sta (dlpnt),y
   3896  f310					      endif
   3897  f310
   3898  f310		       c8		      iny
   3899  f311		       a5 46		      lda	temp5	;Y position
   3900  f313
   3901  f313					      if	WZONEHEIGHT = 16
   3902  f313		       29 0f		      and	#$0F
   3903  f315		       49 0f		      eor	#$0F
   3904  f317					      endif
   3905  f317				  -	      if	WZONEHEIGHT = 8
   3906  f317				  -	      and	#$07
   3907  f317				  -	      eor	#$07
   3908  f317					      endif
   3909  f317
   3910  f317		       85 4a		      sta	temp9
   3911  f319		       a5 43		      lda	temp2	; graphic data, hi byte
   3912  f31b		       18		      clc
   3913  f31c		       e5 4a		      sbc	temp9
   3914  f31e		       91 63		      sta	(dlpnt),y
   3915  f320
   3916  f320		       c8		      iny
   3917  f321		       a5 44		      lda	temp3	;palette|width
   3918  f323		       91 63		      sta	(dlpnt),y
   3919  f325
   3920  f325		       c8		      iny
   3921  f326		       a5 45		      lda	temp4	;Horizontal position
   3922  f328		       91 63		      sta	(dlpnt),y
   3923  f32a
   3924  f32a		       c8		      iny
   3925  f32b		       94 65		      sty	dlend,x
   3926  f32d
   3927  f32d				  -	      ifconst	ATOMICSPRITEUPDATE
   3928  f32d				  -	      ldy	temp8
   3929  f32d				  -	      lda	temp6
   3930  f32d				  -	      sta	(dlpnt),y
   3931  f32d					      endif
   3932  f32d
   3933  f32d				   doneSPDL
   3934  f32d		       60		      rts
   3935  f32e
   3936  f32e				   lockzonex
   3937  f32e				  -	      ifconst	ZONELOCKS
   3938  f32e				  -	      ldy	dlend,x
   3939  f32e				  -	      cpy	#DLLASTOBJ
   3940  f32e				  -	      beq	lockzonexreturn	; the zone is either stuffed or locked. abort!
   3941  f32e				  -	      lda	DLPOINTL,x
   3942  f32e				  -	      ifconst	DOUBLEBUFFER
   3943  f32e				  -	      clc
   3944  f32e				  -	      adc	doublebufferdloffset
   3945  f32e				  -	      endif		; DOUBLEBUFFER
   3946  f32e				  -	      sta	dlpnt
   3947  f32e				  -	      lda	DLPOINTH,x
   3948  f32e				  -	      ifconst	DOUBLEBUFFER
   3949  f32e				  -	      adc	#0
   3950  f32e				  -	      endif		; DOUBLEBUFFER
   3951  f32e				  -	      sta	dlpnt+1
   3952  f32e				  -	      iny
   3953  f32e				  -	      lda	#0
   3954  f32e				  -	      sta	(dlpnt),y
   3955  f32e				  -	      dey
   3956  f32e				  -	      tya
   3957  f32e				  -	      ldy	#(DLLASTOBJ-1)
   3958  f32e				  -	      sta	(dlpnt),y
   3959  f32e				  -	      iny
   3960  f32e				  -	      sty	dlend,x
   3961  f32e				  -lockzonexreturn
   3962  f32e				  -	      rts
   3963  f32e					      endif		; ZONELOCKS
   3964  f32e				   unlockzonex
   3965  f32e				  -	      ifconst	ZONELOCKS
   3966  f32e				  -	      ldy	dlend,x
   3967  f32e				  -	      cpy	#DLLASTOBJ
   3968  f32e				  -	      bne	unlockzonexreturn	; if the zone isn't stuffed, it's not locked. abort!
   3969  f32e				  -	      lda	DLPOINTL,x
   3970  f32e				  -	      ifconst	DOUBLEBUFFER
   3971  f32e				  -	      clc
   3972  f32e				  -	      adc	doublebufferdloffset
   3973  f32e				  -	      endif		; DOUBLEBUFFER
   3974  f32e				  -	      sta	dlpnt
   3975  f32e				  -	      lda	DLPOINTH,x
   3976  f32e				  -	      ifconst	DOUBLEBUFFER
   3977  f32e				  -	      adc	#0
   3978  f32e				  -	      endif		; DOUBLEBUFFER
   3979  f32e				  -	      sta	dlpnt+1
   3980  f32e				  -	      dey
   3981  f32e				  -			;ldy #(DLLASTOBJ-1)
   3982  f32e				  -	      lda	(dlpnt),y
   3983  f32e				  -	      tay
   3984  f32e				  -	      sty	dlend,x
   3985  f32e				  -unlockzonexreturn
   3986  f32e					      endif		; ZONELOCKS
   3987  f32e		       60		      rts
   3988  f32f
   3989  f32f				   plotcharloop
   3990  f32f							; ** read from a data indirectly pointed to from temp8,temp9
   3991  f32f							; ** format is: lo_data, hi_data, palette|width, x, y
   3992  f32f							; ** format ends with lo_data | hi_data = 0
   3993  f32f
   3994  f32f					      ifconst	DOUBLEBUFFER
   3995  f32f		       a5 d5		      lda	doublebufferstate
   3996  f331		       d0 04		      bne	skipplotcharloopwait
   3997  f333					      endif		; DOUBLEBUFFER
   3998  f333				   plotcharloopwait
   3999  f333		       a5 4d		      lda	visibleover
   4000  f335		       d0 fc		      bne	plotcharloopwait
   4001  f337				   skipplotcharloopwait
   4002  f337				   plotcharlooploop
   4003  f337		       a0 00		      ldy	#0
   4004  f339		       b1 49		      lda	(temp8),y
   4005  f33b		       85 42		      sta	temp1
   4006  f33d		       c8		      iny
   4007  f33e		       b1 49		      lda	(temp8),y
   4008  f340		       85 43		      sta	temp2
   4009  f342		       05 42		      ora	temp1
   4010  f344		       d0 01		      bne	plotcharloopcontinue
   4011  f346							;the pointer=0, so return
   4012  f346		       60		      rts
   4013  f347				   plotcharloopcontinue
   4014  f347		       c8		      iny
   4015  f348		       b1 49		      lda	(temp8),y
   4016  f34a		       85 44		      sta	temp3
   4017  f34c		       c8		      iny
   4018  f34d		       b1 49		      lda	(temp8),y
   4019  f34f		       85 45		      sta	temp4
   4020  f351		       c8		      iny
   4021  f352		       b1 49		      lda	(temp8),y
   4022  f354							;sta temp5 ; not needed with our late entry.
   4023  f354		       20 71 f3 	      jsr	plotcharactersskipentry
   4024  f357		       a5 49		      lda	temp8
   4025  f359		       18		      clc
   4026  f35a		       69 05		      adc	#5
   4027  f35c		       85 49		      sta	temp8
   4028  f35e		       a5 4a		      lda	temp9
   4029  f360		       69 00		      adc	#0
   4030  f362		       85 4a		      sta	temp9
   4031  f364		       4c 37 f3 	      jmp	plotcharlooploop
   4032  f367
   4033  f367				   plotcharacters
   4034  f367					      ifconst	DOUBLEBUFFER
   4035  f367		       a5 d5		      lda	doublebufferstate
   4036  f369		       d0 04		      bne	skipplotcharacterswait
   4037  f36b					      endif		; DOUBLEBUFFER
   4038  f36b				   plotcharacterswait
   4039  f36b		       a5 4d		      lda	visibleover
   4040  f36d		       d0 fc		      bne	plotcharacterswait
   4041  f36f				   skipplotcharacterswait
   4042  f36f							;arguments: 
   4043  f36f							; temp1=lo charactermap
   4044  f36f							; temp2=hi charactermap
   4045  f36f							; temp3=palette | width byte
   4046  f36f							; temp4=x
   4047  f36f							; temp5=y
   4048  f36f
   4049  f36f		       a5 46		      lda	temp5	;Y position
   4050  f371
   4051  f371				   plotcharactersskipentry
   4052  f371
   4053  f371							;ifconst ZONEHEIGHT
   4054  f371							; if ZONEHEIGHT = 16
   4055  f371							; and #$0F
   4056  f371							; endif
   4057  f371							; if ZONEHEIGHT = 8
   4058  f371							; and #$1F
   4059  f371							; endif
   4060  f371							;else
   4061  f371							; and #$0F
   4062  f371							;endif
   4063  f371
   4064  f371		       aa		      tax
   4065  f372		       bd 24 f7 	      lda	DLPOINTL,x	;Get pointer to DL that the characters are in
   4066  f375					      ifconst	DOUBLEBUFFER
   4067  f375		       18		      clc
   4068  f376		       65 d6		      adc	doublebufferdloffset
   4069  f378					      endif		; DOUBLEBUFFER
   4070  f378		       85 63		      sta	dlpnt
   4071  f37a		       bd 18 f7 	      lda	DLPOINTH,x
   4072  f37d					      ifconst	DOUBLEBUFFER
   4073  f37d		       69 00		      adc	#0
   4074  f37f					      endif		; DOUBLEBUFFER
   4075  f37f		       85 64		      sta	dlpnt+1
   4076  f381
   4077  f381							;Create DL entry for the characters
   4078  f381
   4079  f381		       b4 65		      ldy	dlend,x	;Get the index to the end of this DL
   4080  f383
   4081  f383				  -	      ifconst	CHECKOVERWRITE
   4082  f383				  -	      cpy	#DLLASTOBJ
   4083  f383				  -	      bne	continueplotcharacters
   4084  f383				  -	      rts
   4085  f383				  -continueplotcharacters
   4086  f383					      endif
   4087  f383
   4088  f383		       a5 42		      lda	temp1	; character map data, lo byte
   4089  f385		       91 63		      sta	(dlpnt),y	;(1) store low address
   4090  f387
   4091  f387		       c8		      iny
   4092  f388		       ad 06 21 	      lda	charactermode
   4093  f38b		       91 63		      sta	(dlpnt),y	;(2) store mode
   4094  f38d
   4095  f38d		       c8		      iny
   4096  f38e		       a5 43		      lda	temp2	; character map, hi byte
   4097  f390		       91 63		      sta	(dlpnt),y	;(3) store high address
   4098  f392
   4099  f392		       c8		      iny
   4100  f393		       a5 44		      lda	temp3	;palette|width
   4101  f395		       91 63		      sta	(dlpnt),y	;(4) store palette|width
   4102  f397
   4103  f397		       c8		      iny
   4104  f398		       a5 45		      lda	temp4	;Horizontal position
   4105  f39a		       91 63		      sta	(dlpnt),y	;(5) store horizontal position
   4106  f39c
   4107  f39c		       c8		      iny
   4108  f39d		       94 65		      sty	dlend,x	; save display list end byte
   4109  f39f		       60		      rts
   4110  f3a0
   4111  f3a0
   4112  f3a0					      ifconst	plotvalueonscreen
   4113  f3a0				   plotcharacterslive
   4114  f3a0							; a version of plotcharacters that draws live and minimally disrupts the screen...
   4115  f3a0
   4116  f3a0							;arguments: 
   4117  f3a0							; temp1=lo charactermap
   4118  f3a0							; temp2=hi charactermap
   4119  f3a0							; temp3=palette | width byte
   4120  f3a0							; temp4=x
   4121  f3a0							; temp5=y
   4122  f3a0
   4123  f3a0		       a5 46		      lda	temp5	;Y position
   4124  f3a2
   4125  f3a2		       aa		      tax
   4126  f3a3		       bd 24 f7 	      lda	DLPOINTL,x	;Get pointer to DL that the characters are in
   4127  f3a6					      ifconst	DOUBLEBUFFER
   4128  f3a6		       18		      clc
   4129  f3a7		       65 d6		      adc	doublebufferdloffset
   4130  f3a9					      endif		; DOUBLEBUFFER
   4131  f3a9		       85 63		      sta	dlpnt
   4132  f3ab		       bd 18 f7 	      lda	DLPOINTH,x
   4133  f3ae					      ifconst	DOUBLEBUFFER
   4134  f3ae		       69 00		      adc	#0
   4135  f3b0					      endif		; DOUBLEBUFFER
   4136  f3b0		       85 64		      sta	dlpnt+1
   4137  f3b2
   4138  f3b2							;Create DL entry for the characters
   4139  f3b2
   4140  f3b2		       b4 65		      ldy	dlend,x	;Get the index to the end of this DL
   4141  f3b4
   4142  f3b4				  -	      ifconst	CHECKOVERWRITE
   4143  f3b4				  -	      cpy	#DLLASTOBJ
   4144  f3b4				  -	      bne	continueplotcharacterslive
   4145  f3b4				  -	      rts
   4146  f3b4				  -continueplotcharacterslive
   4147  f3b4					      endif
   4148  f3b4
   4149  f3b4		       a5 42		      lda	temp1	; character map data, lo byte
   4150  f3b6		       91 63		      sta	(dlpnt),y	;(1) store low address
   4151  f3b8
   4152  f3b8		       c8		      iny
   4153  f3b9							; we don't add the second byte yet, since the charmap could briefly
   4154  f3b9							; render without a proper character map address, width, or position.
   4155  f3b9		       ad 06 21 	      lda	charactermode
   4156  f3bc		       91 63		      sta	(dlpnt),y	;(2) store mode
   4157  f3be
   4158  f3be		       c8		      iny
   4159  f3bf		       a5 43		      lda	temp2	; character map, hi byte
   4160  f3c1		       91 63		      sta	(dlpnt),y	;(3) store high address
   4161  f3c3
   4162  f3c3		       c8		      iny
   4163  f3c4		       a5 44		      lda	temp3	;palette|width
   4164  f3c6		       91 63		      sta	(dlpnt),y	;(4) store palette|width
   4165  f3c8
   4166  f3c8		       c8		      iny
   4167  f3c9		       a5 45		      lda	temp4	;Horizontal position
   4168  f3cb		       91 63		      sta	(dlpnt),y	;(5) store horizontal position
   4169  f3cd
   4170  f3cd		       c8		      iny
   4171  f3ce		       94 65		      sty	dlend,x	; save display list end byte
   4172  f3d0
   4173  f3d0		       60		      rts
   4174  f3d1					      endif		;plotcharacterslive
   4175  f3d1
   4176  f3d1					      ifconst	USED_PLOTVALUE
   4177  f3d1				   plotvalue
   4178  f3d1							; calling 7800basic command:
   4179  f3d1							; plotvalue digit_gfx palette variable/data number_of_digits screen_x screen_y
   4180  f3d1							; ...displays the variable as BCD digits
   4181  f3d1							;
   4182  f3d1							; asm sub arguments: 
   4183  f3d1							; temp1=lo charactermap
   4184  f3d1							; temp2=hi charactermap
   4185  f3d1							; temp3=palette | width byte
   4186  f3d1							; temp4=x
   4187  f3d1							; temp5=y
   4188  f3d1							; temp6=number of digits
   4189  f3d1							; temp7=lo variable
   4190  f3d1							; temp8=hi variable
   4191  f3d1							; temp9=character mode
   4192  f3d1
   4193  f3d1		       00 47	   plotdigitcount =	temp6
   4194  f3d1
   4195  f3d1				  -	      ifconst	ZONELOCKS
   4196  f3d1				  -	      ldx	temp5
   4197  f3d1				  -	      ldy	dlend,x
   4198  f3d1				  -	      cpy	#DLLASTOBJ
   4199  f3d1				  -	      bne	carryonplotvalue
   4200  f3d1				  -	      rts
   4201  f3d1				  -carryonplotvalue
   4202  f3d1					      endif
   4203  f3d1
   4204  f3d1		       a9 00		      lda	#0
   4205  f3d3		       a8		      tay
   4206  f3d4		       ae ad 01 	      ldx	valbufend
   4207  f3d7
   4208  f3d7		       a5 47		      lda	plotdigitcount
   4209  f3d9		       29 01		      and	#1
   4210  f3db		       f0 07		      beq	pvnibble2char
   4211  f3dd		       a9 00		      lda	#0
   4212  f3df		       9d 00 20 	      sta	VALBUFFER,x	; just in case we skip this digit
   4213  f3e2		       f0 11		      beq	pvnibble2char_skipnibble
   4214  f3e4
   4215  f3e4				   pvnibble2char
   4216  f3e4							; high nibble...
   4217  f3e4		       b1 48		      lda	(temp7),y
   4218  f3e6		       29 f0		      and	#$f0
   4219  f3e8		       4a		      lsr
   4220  f3e9		       4a		      lsr
   4221  f3ea		       4a		      lsr
   4222  f3eb					      ifnconst	DOUBLEWIDE	; multiply value by 2 for double-width
   4223  f3eb		       4a		      lsr
   4224  f3ec					      endif
   4225  f3ec
   4226  f3ec		       18		      clc
   4227  f3ed		       65 42		      adc	temp1	; add the offset to character graphics to our value
   4228  f3ef		       9d 00 20 	      sta	VALBUFFER,x
   4229  f3f2		       e8		      inx
   4230  f3f3		       c6 47		      dec	plotdigitcount
   4231  f3f5
   4232  f3f5				   pvnibble2char_skipnibble
   4233  f3f5							; low nibble...
   4234  f3f5		       b1 48		      lda	(temp7),y
   4235  f3f7		       29 0f		      and	#$0f
   4236  f3f9				  -	      ifconst	DOUBLEWIDE	; multiply value by 2 for double-width
   4237  f3f9				  -	      asl
   4238  f3f9					      endif
   4239  f3f9		       18		      clc
   4240  f3fa		       65 42		      adc	temp1	; add the offset to character graphics to our value
   4241  f3fc		       9d 00 20 	      sta	VALBUFFER,x
   4242  f3ff		       e8		      inx
   4243  f400		       c8		      iny
   4244  f401
   4245  f401		       c6 47		      dec	plotdigitcount
   4246  f403		       d0 df		      bne	pvnibble2char
   4247  f405
   4248  f405							;point to the start of our valuebuffer
   4249  f405		       18		      clc
   4250  f406		       a9 00		      lda	#<VALBUFFER
   4251  f408		       6d ad 01 	      adc	valbufend
   4252  f40b		       85 42		      sta	temp1
   4253  f40d		       a9 20		      lda	#>VALBUFFER
   4254  f40f		       69 00		      adc	#0
   4255  f411		       85 43		      sta	temp2
   4256  f413
   4257  f413							;advance valbufend to the end of our value buffer
   4258  f413		       8e ad 01 	      stx	valbufend
   4259  f416
   4260  f416				  -	      ifnconst	plotvalueonscreen
   4261  f416				  -	      jmp	plotcharacters
   4262  f416					      else
   4263  f416		       4c a0 f3 	      jmp	plotcharacterslive
   4264  f419					      endif
   4265  f419
   4266  f419					      endif		; USED_PLOTVALUE
   4267  f419
   4268  f419
   4269  f419				  -	      ifconst	USED_PLOTVALUEEXTRA
   4270  f419				  -plotdigitcount =	temp6
   4271  f419				  -plotvalueextra
   4272  f419				  -			; calling 7800basic command:
   4273  f419				  -			; plotvalue digit_gfx palette variable/data number_of_digits screen_x screen_y
   4274  f419				  -			; ...displays the variable as BCD digits
   4275  f419				  -			;
   4276  f419				  -			; asm sub arguments: 
   4277  f419				  -			; temp1=lo charactermap
   4278  f419				  -			; temp2=hi charactermap
   4279  f419				  -			; temp3=palette | width byte
   4280  f419				  -			; temp4=x
   4281  f419				  -			; temp5=y
   4282  f419				  -			; temp6=number of digits
   4283  f419				  -			; temp7=lo variable
   4284  f419				  -			; temp8=hi variable
   4285  f419				  -
   4286  f419				  -	      lda	#0
   4287  f419				  -	      tay
   4288  f419				  -	      ldx	valbufend
   4289  f419				  -	      ifnconst	plotvalueonscreen
   4290  f419				  -	      sta	VALBUFFER,x
   4291  f419				  -	      endif
   4292  f419				  -
   4293  f419				  -	      lda	plotdigitcount
   4294  f419				  -	      and	#1
   4295  f419				  -
   4296  f419				  -	      bne	pvnibble2char_skipnibbleextra
   4297  f419				  -
   4298  f419				  -pvnibble2charextra
   4299  f419				  -			; high nibble...
   4300  f419				  -	      lda	(temp7),y
   4301  f419				  -	      and	#$f0
   4302  f419				  -	      lsr
   4303  f419				  -	      lsr
   4304  f419				  -	      ifnconst	DOUBLEWIDE	; multiply value by 2 for double-width
   4305  f419				  -	      lsr
   4306  f419				  -	      endif
   4307  f419				  -	      clc
   4308  f419				  -	      adc	temp1	; add the offset to character graphics to our value
   4309  f419				  -	      sta	VALBUFFER,x
   4310  f419				  -	      inx
   4311  f419				  -
   4312  f419				  -			; second half of the digit
   4313  f419				  -	      clc
   4314  f419				  -	      adc	#1
   4315  f419				  -	      sta	VALBUFFER,x
   4316  f419				  -	      inx
   4317  f419				  -
   4318  f419				  -pvnibble2char_skipnibbleextra
   4319  f419				  -			; low nibble...
   4320  f419				  -	      lda	(temp7),y
   4321  f419				  -	      and	#$0f
   4322  f419				  -	      ifconst	DOUBLEWIDE	; multiply value by 2 for double-width
   4323  f419				  -	      asl
   4324  f419				  -	      endif
   4325  f419				  -	      asl
   4326  f419				  -
   4327  f419				  -	      clc
   4328  f419				  -	      adc	temp1	; add the offset to character graphics to our value
   4329  f419				  -	      sta	VALBUFFER,x
   4330  f419				  -	      inx
   4331  f419				  -
   4332  f419				  -	      clc
   4333  f419				  -	      adc	#1
   4334  f419				  -	      sta	VALBUFFER,x
   4335  f419				  -	      inx
   4336  f419				  -	      iny
   4337  f419				  -
   4338  f419				  -	      dec	plotdigitcount
   4339  f419				  -	      bne	pvnibble2charextra
   4340  f419				  -
   4341  f419				  -			;point to the start of our valuebuffer
   4342  f419				  -	      clc
   4343  f419				  -	      lda	#<VALBUFFER
   4344  f419				  -	      adc	valbufend
   4345  f419				  -	      sta	temp1
   4346  f419				  -	      lda	#>VALBUFFER
   4347  f419				  -	      adc	#0
   4348  f419				  -	      sta	temp2
   4349  f419				  -
   4350  f419				  -			;advance valbufend to the end of our value buffer
   4351  f419				  -	      stx	valbufend
   4352  f419				  -
   4353  f419				  -	      ifnconst	plotvalueonscreen
   4354  f419				  -	      jmp	plotcharacters
   4355  f419				  -	      else
   4356  f419				  -	      jmp	plotcharacterslive
   4357  f419				  -	      endif
   4358  f419					      endif		; USED_PLOTVALUEEXTRA
   4359  f419
   4360  f419				   boxcollision
   4361  f419							; the worst case cycle-time for the code below is 43 cycles.
   4362  f419							; unfortunately, prior to getting here we've burned 44 cycles in argument setup. eep!
   4363  f419
   4364  f419							;__boxx1 = accumulator
   4365  f419							;__boxy1 = y
   4366  f419		       00 44	   __boxw1    =	temp3
   4367  f419		       00 45	   __boxh1    =	temp4
   4368  f419
   4369  f419		       00 46	   __boxx2    =	temp5
   4370  f419		       00 47	   __boxy2    =	temp6
   4371  f419		       00 48	   __boxw2    =	temp7
   4372  f419		       00 49	   __boxh2    =	temp8
   4373  f419
   4374  f419				   DoXCollisionCheck
   4375  f419							;lda __boxx1 ; skipped. already in the accumulator
   4376  f419		       c5 46		      cmp	__boxx2	;3
   4377  f41b		       b0 07		      bcs	X1isbiggerthanX2	;2/3
   4378  f41d				   X2isbiggerthanX1
   4379  f41d							; carry is clear
   4380  f41d		       65 44		      adc	__boxw1	;3
   4381  f41f		       c5 46		      cmp	__boxx2	;3
   4382  f421		       b0 08		      bcs	DoYCollisionCheck	;3/2
   4383  f423		       60		      rts		;6 - carry clear, no collision
   4384  f424				   X1isbiggerthanX2
   4385  f424		       18		      clc		;2
   4386  f425		       e5 48		      sbc	__boxw2	;3
   4387  f427		       c5 46		      cmp	__boxx2	;3
   4388  f429		       b0 13		      bcs	noboxcollision	;3/2
   4389  f42b				   DoYCollisionCheck
   4390  f42b		       98		      tya		; 2 ; use to be "lda __boxy1"
   4391  f42c		       c5 47		      cmp	__boxy2	;3
   4392  f42e		       b0 05		      bcs	Y1isbiggerthanY2	;3/2
   4393  f430				   Y2isbiggerthanY1
   4394  f430							; carry is clear
   4395  f430		       65 45		      adc	__boxh1	;3
   4396  f432		       c5 47		      cmp	__boxy2	;3
   4397  f434		       60		      rts		;6 
   4398  f435				   Y1isbiggerthanY2
   4399  f435		       18		      clc		;2
   4400  f436		       e5 49		      sbc	__boxh2	;3
   4401  f438		       c5 47		      cmp	__boxy2	;3
   4402  f43a		       b0 02		      bcs	noboxcollision	;3/2
   4403  f43c				   yesboxcollision
   4404  f43c		       38		      sec		;2
   4405  f43d		       60		      rts		;6
   4406  f43e				   noboxcollision
   4407  f43e		       18		      clc		;2
   4408  f43f		       60		      rts		;6
   4409  f440
   4410  f440				   randomize
   4411  f440		       a5 40		      lda	rand
   4412  f442		       4a		      lsr
   4413  f443		       26 41		      rol	rand16
   4414  f445		       90 02		      bcc	noeor
   4415  f447		       49 b4		      eor	#$B4
   4416  f449				   noeor
   4417  f449		       85 40		      sta	rand
   4418  f44b		       45 41		      eor	rand16
   4419  f44d		       60		      rts
   4420  f44e
   4421  f44e							; bcd conversion routine courtesy Omegamatrix
   4422  f44e							; http://atariage.com/forums/blog/563/entry-10832-hex-to-bcd-conversion-0-99/
   4423  f44e				   converttobcd
   4424  f44e							;value to convert is in the accumulator
   4425  f44e		       85 42		      sta	temp1
   4426  f450		       4a		      lsr
   4427  f451		       65 42		      adc	temp1
   4428  f453		       6a		      ror
   4429  f454		       4a		      lsr
   4430  f455		       4a		      lsr
   4431  f456		       65 42		      adc	temp1
   4432  f458		       6a		      ror
   4433  f459		       65 42		      adc	temp1
   4434  f45b		       6a		      ror
   4435  f45c		       4a		      lsr
   4436  f45d		       29 3c		      and	#$3C
   4437  f45f		       85 43		      sta	temp2
   4438  f461		       4a		      lsr
   4439  f462		       65 43		      adc	temp2
   4440  f464		       65 42		      adc	temp1
   4441  f466		       60		      rts		; return the result in the accumulator
   4442  f467
   4443  f467							; Y and A contain multiplicands, result in A
   4444  f467				   mul8
   4445  f467		       84 42		      sty	temp1
   4446  f469		       85 43		      sta	temp2
   4447  f46b		       a9 00		      lda	#0
   4448  f46d				   reptmul8
   4449  f46d		       46 43		      lsr	temp2
   4450  f46f		       90 03		      bcc	skipmul8
   4451  f471		       18		      clc
   4452  f472		       65 42		      adc	temp1
   4453  f474							;bcs donemul8 might save cycles?
   4454  f474				   skipmul8
   4455  f474							;beq donemul8 might save cycles?
   4456  f474		       06 42		      asl	temp1
   4457  f476		       d0 f5		      bne	reptmul8
   4458  f478				   donemul8
   4459  f478		       60		      rts
   4460  f479
   4461  f479				   div8
   4462  f479							; A=numerator Y=denominator, result in A
   4463  f479		       c0 02		      cpy	#2
   4464  f47b		       90 0a		      bcc	div8end+1	;div by 0 = bad, div by 1=no calc needed, so bail out
   4465  f47d		       84 42		      sty	temp1
   4466  f47f		       a0 ff		      ldy	#$ff
   4467  f481				   div8loop
   4468  f481		       e5 42		      sbc	temp1
   4469  f483		       c8		      iny
   4470  f484		       b0 fb		      bcs	div8loop
   4471  f486				   div8end
   4472  f486		       98		      tya
   4473  f487							; result in A
   4474  f487		       60		      rts
   4475  f488
   4476  f488							; Y and A contain multiplicands, result in temp2,A=low, temp1=high
   4477  f488				   mul16
   4478  f488		       84 42		      sty	temp1
   4479  f48a		       85 43		      sta	temp2
   4480  f48c
   4481  f48c		       a9 00		      lda	#0
   4482  f48e		       a2 08		      ldx	#8
   4483  f490		       46 42		      lsr	temp1
   4484  f492				   mul16_1
   4485  f492		       90 03		      bcc	mul16_2
   4486  f494		       18		      clc
   4487  f495		       65 43		      adc	temp2
   4488  f497				   mul16_2
   4489  f497		       6a		      ror
   4490  f498		       66 42		      ror	temp1
   4491  f49a		       ca		      dex
   4492  f49b		       d0 f5		      bne	mul16_1
   4493  f49d		       85 43		      sta	temp2
   4494  f49f		       60		      rts
   4495  f4a0
   4496  f4a0							; div int/int
   4497  f4a0							; numerator in A, denom in temp1
   4498  f4a0							; returns with quotient in A, remainder in temp1
   4499  f4a0				   div16
   4500  f4a0		       85 43		      sta	temp2
   4501  f4a2		       84 42		      sty	temp1
   4502  f4a4		       a9 00		      lda	#0
   4503  f4a6		       a2 08		      ldx	#8
   4504  f4a8		       06 43		      asl	temp2
   4505  f4aa				   div16_1
   4506  f4aa		       2a		      rol
   4507  f4ab		       c5 42		      cmp	temp1
   4508  f4ad		       90 02		      bcc	div16_2
   4509  f4af		       e5 42		      sbc	temp1
   4510  f4b1				   div16_2
   4511  f4b1		       26 43		      rol	temp2
   4512  f4b3		       ca		      dex
   4513  f4b4		       d0 f4		      bne	div16_1
   4514  f4b6		       85 42		      sta	temp1
   4515  f4b8		       a5 43		      lda	temp2
   4516  f4ba		       60		      rts
   4517  f4bb
   4518  f4bb				  -	      ifconst	bankswitchmode
   4519  f4bb				  -BS_jsr
   4520  f4bb				  -	      ifconst	MCPDEVCART
   4521  f4bb				  -	      ora	#$18
   4522  f4bb				  -	      sta	$3000
   4523  f4bb				  -	      else
   4524  f4bb				  -	      sta	$8000
   4525  f4bb				  -	      endif
   4526  f4bb				  -	      pla
   4527  f4bb				  -	      tax
   4528  f4bb				  -	      pla
   4529  f4bb				  -	      rts
   4530  f4bb				  -
   4531  f4bb				  -BS_return
   4532  f4bb				  -	      pla		; bankswitch bank
   4533  f4bb				  -	      ifconst	BANKRAM
   4534  f4bb				  -	      sta	currentbank
   4535  f4bb				  -	      ora	currentrambank
   4536  f4bb				  -	      endif
   4537  f4bb				  -	      ifconst	MCPDEVCART
   4538  f4bb				  -	      ora	#$18
   4539  f4bb				  -	      sta	$3000
   4540  f4bb				  -	      else
   4541  f4bb				  -	      sta	$8000
   4542  f4bb				  -	      endif
   4543  f4bb				  -	      pla		; bankswitch $0 flag
   4544  f4bb				  -	      rts
   4545  f4bb					      endif
   4546  f4bb
   4547  f4bb				   checkselectswitch
   4548  f4bb		       ad 82 02 	      lda	SWCHB	; first check the real select switch...
   4549  f4be		       29 02		      and	#%00000010
   4550  f4c0					      ifnconst	MOUSESUPPORT
   4551  f4c0		       f0 05		      beq	checkselectswitchreturn	; switch is pressed
   4552  f4c2		       ad 80 02 	      lda	SWCHA	; then check the soft "select" joysick code...
   4553  f4c5		       29 b0		      and	#%10110000	; R_DU
   4554  f4c7					      endif		; MOUSESUPPORT
   4555  f4c7				   checkselectswitchreturn
   4556  f4c7		       60		      rts
   4557  f4c8
   4558  f4c8				   checkresetswitch
   4559  f4c8		       ad 82 02 	      lda	SWCHB	; first check the real reset switch...
   4560  f4cb		       29 01		      and	#%00000001
   4561  f4cd					      ifnconst	MOUSESUPPORT
   4562  f4cd		       f0 05		      beq	checkresetswitchreturn	; switch is pressed
   4563  f4cf		       ad 80 02 	      lda	SWCHA	; then check the soft "reset" joysick code...
   4564  f4d2		       29 70		      and	#%01110000	; _LDU
   4565  f4d4					      endif		; MOUSESUPPORT
   4566  f4d4				   checkresetswitchreturn
   4567  f4d4		       60		      rts
   4568  f4d5
   4569  f4d5				  -	      ifconst	FINESCROLLENABLED
   4570  f4d5				  -finescrolldlls
   4571  f4d5				  -	      ldx	temp1	; first DLL index x3
   4572  f4d5				  -	      lda	DLLMEM,x
   4573  f4d5				  -	      and	#%11110000
   4574  f4d5				  -	      ora	finescrolly
   4575  f4d5				  -	      sta	DLLMEM,x
   4576  f4d5				  -
   4577  f4d5				  -	      ldx	temp2	; last DLL index x3
   4578  f4d5				  -	      lda	DLLMEM,x
   4579  f4d5				  -	      and	#%11110000
   4580  f4d5				  -	      ora	finescrolly
   4581  f4d5				  -	      eor	#(WZONEHEIGHT-1)
   4582  f4d5				  -	      sta	DLLMEM,x
   4583  f4d5				  -	      rts
   4584  f4d5					      endif		; FINESCROLLENABLED
   4585  f4d5
   4586  f4d5				  -	      ifconst	USED_ADJUSTVISIBLE
   4587  f4d5				  -adjustvisible
   4588  f4d5				  -			; called with temp1=first visible zone *3, temp2=last visible zone *3
   4589  f4d5				  -	      jsr	waitforvblankstart	; ensure vblank just started
   4590  f4d5				  -	      ldx	visibleDLLstart
   4591  f4d5				  -findfirstinterrupt
   4592  f4d5				  -	      lda	DLLMEM,x
   4593  f4d5				  -	      bmi	foundfirstinterrupt
   4594  f4d5				  -	      inx
   4595  f4d5				  -	      inx
   4596  f4d5				  -	      inx
   4597  f4d5				  -	      bne	findfirstinterrupt
   4598  f4d5				  -foundfirstinterrupt
   4599  f4d5				  -	      and	#%01111111	; clear the interrupt bit
   4600  f4d5				  -	      sta	DLLMEM,x
   4601  f4d5				  -	      ifconst	DOUBLEBUFFER
   4602  f4d5				  -	      sta	DLLMEM+DBOFFSET,x
   4603  f4d5				  -	      endif		; DOUBLEBUFFER
   4604  f4d5				  -	      ldx	overscanDLLstart
   4605  f4d5				  -findlastinterrupt
   4606  f4d5				  -	      lda	DLLMEM,x
   4607  f4d5				  -	      bmi	foundlastinterrupt
   4608  f4d5				  -	      dex
   4609  f4d5				  -	      dex
   4610  f4d5				  -	      dex
   4611  f4d5				  -	      bne	findlastinterrupt
   4612  f4d5				  -foundlastinterrupt
   4613  f4d5				  -	      and	#%01111111	; clear the interrupt bit
   4614  f4d5				  -	      sta	DLLMEM,x
   4615  f4d5				  -	      ifconst	DOUBLEBUFFER
   4616  f4d5				  -	      sta	DLLMEM+DBOFFSET,x
   4617  f4d5				  -	      endif		; DOUBLEBUFFER
   4618  f4d5				  -			;now we need to set the new interrupts
   4619  f4d5				  -	      clc
   4620  f4d5				  -	      lda	temp1
   4621  f4d5				  -	      adc	visibleDLLstart
   4622  f4d5				  -	      tax
   4623  f4d5				  -	      lda	DLLMEM,x
   4624  f4d5				  -	      ora	#%10000000
   4625  f4d5				  -	      sta	DLLMEM,x
   4626  f4d5				  -	      ifconst	DOUBLEBUFFER
   4627  f4d5				  -	      sta	DLLMEM+DBOFFSET,x
   4628  f4d5				  -	      endif		; DOUBLEBUFFER
   4629  f4d5				  -	      clc
   4630  f4d5				  -	      lda	temp2
   4631  f4d5				  -	      adc	visibleDLLstart
   4632  f4d5				  -	      tax
   4633  f4d5				  -	      lda	DLLMEM,x
   4634  f4d5				  -	      ora	#%10000000
   4635  f4d5				  -	      sta	DLLMEM,x
   4636  f4d5				  -	      ifconst	DOUBLEBUFFER
   4637  f4d5				  -	      sta	DLLMEM+DBOFFSET,x
   4638  f4d5				  -	      endif		; DOUBLEBUFFER
   4639  f4d5				  -	      jsr	vblankresync
   4640  f4d5				  -	      rts
   4641  f4d5					      endif		; USED_ADJUSTVISIBLE
   4642  f4d5
   4643  f4d5				   vblankresync
   4644  f4d5		       20 96 f5 	      jsr	waitforvblankstart	; ensure vblank just started
   4645  f4d8		       a9 00		      lda	#0
   4646  f4da		       85 4d		      sta	visibleover
   4647  f4dc		       a9 03		      lda	#3
   4648  f4de		       8d b2 01 	      sta	interruptindex
   4649  f4e1		       60		      rts
   4650  f4e2
   4651  f4e2				   createallgamedlls
   4652  f4e2		       a2 00		      ldx	#0
   4653  f4e4		       a9 19		      lda	#NVLINES
   4654  f4e6		       ac 09 21 	      ldy	paldetected
   4655  f4e9		       f0 03		      beq	skipcreatePALpadding
   4656  f4eb		       18		      clc
   4657  f4ec		       69 15		      adc	#21
   4658  f4ee				   skipcreatePALpadding
   4659  f4ee		       20 2c f5 	      jsr	createnonvisibledlls
   4660  f4f1		       8e 3c 21 	      stx	visibleDLLstart
   4661  f4f4		       20 66 f5 	      jsr	createvisiblezones
   4662  f4f7		       8e 3d 21 	      stx	overscanDLLstart
   4663  f4fa				   createallgamedllscontinue
   4664  f4fa		       a9 50		      lda	#(NVLINES+55)	; extras for PAL
   4665  f4fc		       20 2c f5 	      jsr	createnonvisibledlls
   4666  f4ff
   4667  f4ff		       ae 3c 21 	      ldx	visibleDLLstart
   4668  f502		       bd 00 18 	      lda	DLLMEM,x
   4669  f505		       09 80		      ora	#%10000000	; NMI 1 - start of visible screen
   4670  f507		       9d 00 18 	      sta	DLLMEM,x
   4671  f50a					      ifconst	DOUBLEBUFFER
   4672  f50a		       9d 70 18 	      sta	DLLMEM+DBOFFSET,x
   4673  f50d					      endif		; DOUBLEBUFFER
   4674  f50d
   4675  f50d		       ae 3d 21 	      ldx	overscanDLLstart
   4676  f510		       bd 00 18 	      lda	DLLMEM,x
   4677  f513		       09 83		      ora	#%10000011	; NMI 2 - end of visible screen
   4678  f515		       29 f3		      and	#%11110011	; change this to a 1-line DLL, so there's time enough for the "deeper overscan" DLL
   4679  f517		       9d 00 18 	      sta	DLLMEM,x
   4680  f51a					      ifconst	DOUBLEBUFFER
   4681  f51a		       9d 70 18 	      sta	DLLMEM+DBOFFSET,x
   4682  f51d					      endif		; DOUBLEBUFFER
   4683  f51d
   4684  f51d		       e8		      inx
   4685  f51e		       e8		      inx
   4686  f51f		       e8		      inx
   4687  f520
   4688  f520		       bd 00 18 	      lda	DLLMEM,x
   4689  f523		       09 80		      ora	#%10000000	; NMI 3 - deeper overscan
   4690  f525		       9d 00 18 	      sta	DLLMEM,x
   4691  f528					      ifconst	DOUBLEBUFFER
   4692  f528		       9d 70 18 	      sta	DLLMEM+DBOFFSET,x
   4693  f52b					      endif		; DOUBLEBUFFER
   4694  f52b
   4695  f52b		       60		      rts
   4696  f52c
   4697  f52c				   createnonvisibledlls
   4698  f52c		       85 42		      sta	temp1
   4699  f52e		       4a		      lsr
   4700  f52f		       4a		      lsr
   4701  f530		       4a		      lsr
   4702  f531		       4a		      lsr		; /16
   4703  f532		       f0 09		      beq	skipcreatenonvisibledlls1loop
   4704  f534		       a8		      tay
   4705  f535				   createnonvisibledlls1loop
   4706  f535		       a9 4f		      lda	#%01001111	;low nibble=16 lines, high nibble=Holey DMA
   4707  f537		       20 4c f5 	      jsr	createblankdllentry
   4708  f53a		       88		      dey
   4709  f53b		       d0 f8		      bne	createnonvisibledlls1loop
   4710  f53d				   skipcreatenonvisibledlls1loop
   4711  f53d		       a5 42		      lda	temp1
   4712  f53f		       29 0f		      and	#%00001111
   4713  f541		       f0 08		      beq	createnonvisibledllsreturn
   4714  f543		       38		      sec
   4715  f544		       e9 01		      sbc	#1
   4716  f546		       09 40		      ora	#%01000000
   4717  f548		       20 4c f5 	      jsr	createblankdllentry
   4718  f54b				   createnonvisibledllsreturn
   4719  f54b		       60		      rts
   4720  f54c
   4721  f54c				   createblankdllentry
   4722  f54c		       9d 00 18 	      sta	DLLMEM,x
   4723  f54f					      ifconst	DOUBLEBUFFER
   4724  f54f		       9d 70 18 	      sta	DLLMEM+DBOFFSET,x
   4725  f552					      endif		; DOUBLEBUFFER
   4726  f552		       e8		      inx
   4727  f553		       a9 21		      lda	#$21	; blank
   4728  f555		       9d 00 18 	      sta	DLLMEM,x
   4729  f558					      ifconst	DOUBLEBUFFER
   4730  f558		       9d 70 18 	      sta	DLLMEM+DBOFFSET,x
   4731  f55b					      endif		; DOUBLEBUFFER
   4732  f55b		       e8		      inx
   4733  f55c		       a9 00		      lda	#$00
   4734  f55e		       9d 00 18 	      sta	DLLMEM,x
   4735  f561					      ifconst	DOUBLEBUFFER
   4736  f561		       9d 70 18 	      sta	DLLMEM+DBOFFSET,x
   4737  f564					      endif		; DOUBLEBUFFER
   4738  f564		       e8		      inx
   4739  f565		       60		      rts
   4740  f566
   4741  f566				   createvisiblezones
   4742  f566		       a0 00		      ldy	#0
   4743  f568				   createvisiblezonesloop
   4744  f568		       b9 30 f7 	      lda.w	DLHEIGHT,y
   4745  f56b		       09 40		      ora	#(WZONEHEIGHT * 4)	; set Holey DMA for 8 or 16 tall zones
   4746  f56d		       9d 00 18 	      sta	DLLMEM,x
   4747  f570					      ifconst	DOUBLEBUFFER
   4748  f570		       9d 70 18 	      sta	DLLMEM+DBOFFSET,x
   4749  f573					      endif		; DOUBLEBUFFER
   4750  f573		       e8		      inx
   4751  f574		       b9 18 f7 	      lda	DLPOINTH,y
   4752  f577		       9d 00 18 	      sta	DLLMEM,x
   4753  f57a					      ifconst	DOUBLEBUFFER
   4754  f57a		       9d 70 18 	      sta	DLLMEM+DBOFFSET,x
   4755  f57d					      endif		; DOUBLEBUFFER
   4756  f57d		       e8		      inx
   4757  f57e		       b9 24 f7 	      lda	DLPOINTL,y
   4758  f581		       9d 00 18 	      sta	DLLMEM,x
   4759  f584					      ifconst	DOUBLEBUFFER
   4760  f584		       18		      clc
   4761  f585		       69 48		      adc	#DOUBLEBUFFEROFFSET
   4762  f587		       9d 70 18 	      sta	DLLMEM+DBOFFSET,x
   4763  f58a		       90 03		      bcc	skiphidoublebufferadjust	; dlls are big endian, so we need to fix the hi byte after-the-fact...
   4764  f58c		       fe 6f 18 	      inc	DLLMEM+DBOFFSET-1,x
   4765  f58f				   skiphidoublebufferadjust
   4766  f58f					      endif		; DOUBLEBUFFER
   4767  f58f		       e8		      inx
   4768  f590		       c8		      iny
   4769  f591		       c0 0c		      cpy	#WZONECOUNT
   4770  f593		       d0 d3		      bne	createvisiblezonesloop
   4771  f595		       60		      rts
   4772  f596
   4773  f596				   waitforvblankstart
   4774  f596				   visibleoverwait
   4775  f596		       24 28		      BIT	MSTAT
   4776  f598		       10 fc		      bpl	visibleoverwait
   4777  f59a				   vblankstartwait
   4778  f59a		       24 28		      BIT	MSTAT
   4779  f59c		       30 fc		      bmi	vblankstartwait
   4780  f59e		       60		      rts
   4781  f59f
   4782  f59f					      ifconst	DOUBLEBUFFER
   4783  f59f				   flipdisplaybufferreturn
   4784  f59f		       60		      rts
   4785  f5a0				   flipdisplaybuffer
   4786  f5a0		       a5 d5		      lda	doublebufferstate
   4787  f5a2		       f0 fb		      beq	flipdisplaybufferreturn	; exit if we're not in double-buffer
   4788  f5a4
   4789  f5a4		       20 3d f1 	      jsr	terminatedisplaybuffer	; terminate the working buffer before we flip
   4790  f5a7
   4791  f5a7		       a5 d5		      lda	doublebufferstate
   4792  f5a9		       4a		      lsr		; /2, so we'll see 0 or 1, rather than 1 or 3
   4793  f5aa		       aa		      tax
   4794  f5ab
   4795  f5ab							; ensure we don't flip mid-display. otherwise the displayed DL will be the one the game is working on.
   4796  f5ab
   4797  f5ab				   flipdisplaybufferwait1
   4798  f5ab		       a5 4d		      lda	visibleover
   4799  f5ad		       f0 fc		      beq	flipdisplaybufferwait1
   4800  f5af
   4801  f5af				   flipdisplaybufferwait
   4802  f5af		       a5 4d		      lda	visibleover
   4803  f5b1		       d0 fc		      bne	flipdisplaybufferwait
   4804  f5b3
   4805  f5b3		       ad b4 01 	      lda	doublebufferminimumframetarget
   4806  f5b6		       f0 0b		      beq	skipminimumframecode
   4807  f5b8		       ad b5 01 	      lda	doublebufferminimumframeindex
   4808  f5bb		       d0 ee		      bne	flipdisplaybufferwait1
   4809  f5bd		       ad b4 01 	      lda	doublebufferminimumframetarget
   4810  f5c0		       8d b5 01 	      sta	doublebufferminimumframeindex
   4811  f5c3				   skipminimumframecode
   4812  f5c3
   4813  f5c3		       bd 23 f6 	      lda	DLLMEMLutHi,x
   4814  f5c6		       85 2c		      sta	DPPH
   4815  f5c8		       bd 21 f6 	      lda	DLLMEMLutLo,x
   4816  f5cb		       85 30		      sta	DPPL
   4817  f5cd
   4818  f5cd		       bd 25 f6 	      lda	NewPageflipstate,x
   4819  f5d0		       85 d5		      sta	doublebufferstate
   4820  f5d2		       bd 27 f6 	      lda	NewPageflipoffset,x
   4821  f5d5		       85 d6		      sta	doublebufferdloffset
   4822  f5d7
   4823  f5d7		       a5 d7		      lda	doublebufferbufferdirty
   4824  f5d9		       f0 c4		      beq	flipdisplaybufferreturn
   4825  f5db
   4826  f5db							; The doublebuffer buffer is dirty, so the game code must have issued a savescreen recently.
   4827  f5db							; To make savescreen work with the new working buffer, we need to copy over the saved objects
   4828  f5db							; from the displayed buffer to the working buffer...
   4829  f5db
   4830  f5db		       a5 d6		      lda	doublebufferdloffset
   4831  f5dd		       49 48		      eor	#DOUBLEBUFFEROFFSET
   4832  f5df		       85 47		      sta	temp6	; make temp6 the anti-doublebufferdloffset variable
   4833  f5e1
   4834  f5e1		       a2 0b		      ldx	#(WZONECOUNT-1)
   4835  f5e3				   copybufferzoneloop
   4836  f5e3
   4837  f5e3		       bd 24 f7 	      lda	DLPOINTL,x
   4838  f5e6		       18		      clc
   4839  f5e7		       65 d6		      adc	doublebufferdloffset
   4840  f5e9		       85 42		      sta	temp1
   4841  f5eb		       bd 18 f7 	      lda	DLPOINTH,x
   4842  f5ee		       69 00		      adc	#0
   4843  f5f0		       85 43		      sta	temp2
   4844  f5f2
   4845  f5f2		       bd 24 f7 	      lda	DLPOINTL,x
   4846  f5f5		       18		      clc
   4847  f5f6		       65 47		      adc	temp6
   4848  f5f8		       85 44		      sta	temp3
   4849  f5fa		       bd 18 f7 	      lda	DLPOINTH,x
   4850  f5fd		       69 00		      adc	#0
   4851  f5ff		       85 45		      sta	temp4
   4852  f601
   4853  f601		       b5 82		      lda	dlendsave,x
   4854  f603		       a8		      tay
   4855  f604				   copybuffercharsloop
   4856  f604		       b1 44		      lda	(temp3),y
   4857  f606		       91 42		      sta	(temp1),y
   4858  f608		       88		      dey
   4859  f609		       10 f9		      bpl	copybuffercharsloop
   4860  f60b		       ca		      dex
   4861  f60c		       10 d5		      bpl	copybufferzoneloop
   4862  f60e		       a9 00		      lda	#0
   4863  f610		       85 d7		      sta	doublebufferbufferdirty
   4864  f612		       60		      rts
   4865  f613
   4866  f613				   doublebufferoff
   4867  f613		       a9 01		      lda	#1
   4868  f615		       85 d5		      sta	doublebufferstate
   4869  f617		       20 a0 f5 	      jsr	flipdisplaybuffer
   4870  f61a		       a9 00		      lda	#0
   4871  f61c		       85 d5		      sta	doublebufferstate
   4872  f61e		       85 d6		      sta	doublebufferdloffset
   4873  f620		       60		      rts
   4874  f621
   4875  f621				   DLLMEMLutLo
   4876  f621		       00 70		      .byte.b	<DLLMEM,<(DLLMEM+DBOFFSET)
   4877  f623				   DLLMEMLutHi
   4878  f623		       18 18		      .byte.b	>DLLMEM,>(DLLMEM+DBOFFSET)
   4879  f625				   NewPageflipstate
   4880  f625		       03 01		      .byte.b	3,1
   4881  f627				   NewPageflipoffset
   4882  f627		       48 00		      .byte.b	DOUBLEBUFFEROFFSET,0
   4883  f629
   4884  f629					      endif		; DOUBLEBUFFER
   4885  f629
   4886  f629				  -	      ifconst	MOUSESUPPORT
   4887  f629				  -	      ifnconst	DRIVINGSUPPORT
   4888  f629				  -rotationalcompare
   4889  f629				  -			; new=00, old=xx
   4890  f629				  -	      .byte	$00, $01, $ff, $00
   4891  f629				  -			; new=01, old=xx
   4892  f629				  -	      .byte	$ff, $00, $00, $01
   4893  f629				  -			; new=10, old=xx
   4894  f629				  -	      .byte	$01, $00, $00, $ff
   4895  f629				  -			; new=11, old=xx
   4896  f629				  -	      .byte	$00, $ff, $01, $00
   4897  f629				  -	      endif
   4898  f629				  -
   4899  f629				  -			;  0000YyXx st mouse
   4900  f629				  -			;  0000xyXY amiga mouse
   4901  f629				  -amigatoataribits		; swap bits 1 and 4...
   4902  f629				  -	      .byte	%00000000, %00001000, %00000010, %00001010
   4903  f629				  -	      .byte	%00000100, %00001100, %00000110, %00001110
   4904  f629				  -	      .byte	%00000001, %00001001, %00000011, %00001011
   4905  f629				  -	      .byte	%00000101, %00001101, %00000111, %00001111
   4906  f629				  -
   4907  f629				  -mouseupdate
   4908  f629				  -			;LONGDEBUG = 1
   4909  f629				  -	      lda	SWCHA
   4910  f629				  -	      and	#$0f
   4911  f629				  -	      sta	inttemp2
   4912  f629				  -	      lda	SWCHA
   4913  f629				  -	      lsr
   4914  f629				  -	      lsr
   4915  f629				  -	      lsr
   4916  f629				  -	      lsr
   4917  f629				  -	      sta	inttemp1
   4918  f629				  -
   4919  f629				  -	      lda	port0control,x
   4920  f629				  -	      cmp	#8	; st mouse
   4921  f629				  -	      beq	domousecontrol
   4922  f629				  -	      cmp	#9	; amiga mouse
   4923  f629				  -	      bne	skipmousecontrol
   4924  f629				  -			; st mice encode on different bits/joystick-lines than amiga mice...
   4925  f629				  -			;  0000YyXx st mouse
   4926  f629				  -			;  0000xyXY amiga mouse
   4927  f629				  -			; ...so can shuffle the amiga bits to reuse the st driver.
   4928  f629				  -	      lda	inttemp1,x
   4929  f629				  -	      tay
   4930  f629				  -	      lda	amigatoataribits,y
   4931  f629				  -	      sta	inttemp1,x
   4932  f629				  -domousecontrol
   4933  f629				  -			;port X has a mouse enabled
   4934  f629				  -	      lda	inttemp1,x
   4935  f629				  -	      and	#%00000011
   4936  f629				  -	      asl
   4937  f629				  -	      asl
   4938  f629				  -	      ora	mousecodex0,x
   4939  f629				  -	      and	#%00001111
   4940  f629				  -	      tay
   4941  f629				  -	      lda	rotationalcompare,y
   4942  f629				  -	      clc
   4943  f629				  -	      adc	mousex0,x
   4944  f629				  -	      sta	mousex0,x
   4945  f629				  -	      tya
   4946  f629				  -	      lsr
   4947  f629				  -	      lsr
   4948  f629				  -	      sta	mousecodex0,x
   4949  f629				  -
   4950  f629				  -	      lda	inttemp1,x
   4951  f629				  -	      and	#%00001100
   4952  f629				  -	      ora	mousecodey0,x
   4953  f629				  -	      and	#%00001111
   4954  f629				  -	      tay
   4955  f629				  -	      lda	rotationalcompare,y
   4956  f629				  -	      asl		; *2 for y axis, since it has ~double the resolution of x
   4957  f629				  -	      clc
   4958  f629				  -	      adc	mousey0,x
   4959  f629				  -	      sta	mousey0,x
   4960  f629				  -	      tya
   4961  f629				  -	      lsr
   4962  f629				  -	      lsr
   4963  f629				  -	      sta	mousecodey0,x
   4964  f629				  -skipmousecontrol
   4965  f629				  -	      jmp	longreadloopreturn
   4966  f629					      endif		; MOUSESUPPORT
   4967  f629
   4968  f629				   mousebuttonhandler		; outside of conditional, so button handler entry in LUT is valid
   4969  f629				  -	      ifconst	MOUSESUPPORT
   4970  f629				  -			; stick the mouse buttons in the correct shadow register...
   4971  f629				  -	      txa
   4972  f629				  -	      asl
   4973  f629				  -	      tay		; y=x*2
   4974  f629				  -	      lda	INPT1,y
   4975  f629				  -	      eor	#%10000000
   4976  f629				  -	      lsr
   4977  f629				  -	      sta	sINPT1,x
   4978  f629				  -
   4979  f629				  -	      lda	INPT4,x
   4980  f629				  -	      and	#%10000000
   4981  f629				  -	      eor	#%10000000
   4982  f629				  -	      ora	sINPT1,x
   4983  f629				  -	      sta	sINPT1,x
   4984  f629				  -	      jmp	buttonreadloopreturn
   4985  f629					      endif		; MOUSESUPPORT
   4986  f629
   4987  f629				  -	      ifconst	DRIVINGSUPPORT
   4988  f629				  -rotationalcompare
   4989  f629				  -			; new=00, old=xx
   4990  f629				  -	      .byte	$00, $01, $ff, $00
   4991  f629				  -			; new=01, old=xx
   4992  f629				  -	      .byte	$ff, $00, $00, $01
   4993  f629				  -			; new=10, old=xx
   4994  f629				  -	      .byte	$01, $00, $00, $ff
   4995  f629				  -			; new=11, old=xx
   4996  f629				  -	      .byte	$00, $ff, $01, $00
   4997  f629				  -drivingupdate
   4998  f629				  -	      ldx	#1
   4999  f629				  -	      lda	port1control
   5000  f629				  -	      cmp	#6	; check if port1=driving
   5001  f629				  -	      bne	skipfirstdrivingcontrol
   5002  f629				  -	      lda	SWCHA
   5003  f629				  -	      and	#%00000011
   5004  f629				  -	      asl
   5005  f629				  -	      asl
   5006  f629				  -drivingupdateloop
   5007  f629				  -	      ora	controller0statesave,x
   5008  f629				  -	      tay
   5009  f629				  -	      lda	rotationalcompare,y
   5010  f629				  -	      clc
   5011  f629				  -	      adc	drivingposition0,x
   5012  f629				  -	      sta	drivingposition0,x
   5013  f629				  -	      tya
   5014  f629				  -	      lsr
   5015  f629				  -	      lsr
   5016  f629				  -	      sta	controller0statesave,x
   5017  f629				  -skipfirstdrivingcontrol
   5018  f629				  -	      lda	port0control
   5019  f629				  -	      cmp	#6	; check if port0=driving
   5020  f629				  -	      bne	drivingcontrolsloopdone
   5021  f629				  -	      lda	SWCHA
   5022  f629				  -	      and	#%00110000
   5023  f629				  -	      lsr
   5024  f629				  -	      lsr
   5025  f629				  -	      dex
   5026  f629				  -	      bpl	drivingupdateloop
   5027  f629				  -drivingcontrolsloopdone
   5028  f629				  -	      rts
   5029  f629					      endif		; DRIVINGSUPPORT
   5030  f629
   5031  f629				  -	      ifconst	KEYPADSUPPORT
   5032  f629				  -			; ** select keypad rows 0 to 3 over 4 frames...
   5033  f629				  -keypadrowselect
   5034  f629				  -	      ldy	#0
   5035  f629				  -	      lda	port0control
   5036  f629				  -	      cmp	#7
   5037  f629				  -	      bne	skipport0val
   5038  f629				  -	      iny		; y=y+1
   5039  f629				  -skipport0val
   5040  f629				  -	      lda	port1control
   5041  f629				  -	      cmp	#7
   5042  f629				  -	      bne	skipport1val
   5043  f629				  -	      iny
   5044  f629				  -	      iny		; y=y+2
   5045  f629				  -skipport1val
   5046  f629				  -	      lda	keyrowdirectionmask,y
   5047  f629				  -	      sta	CTLSWA
   5048  f629				  -	      tya
   5049  f629				  -	      asl
   5050  f629				  -	      asl
   5051  f629				  -	      sta	inttemp1
   5052  f629				  -	      lda	framecounter
   5053  f629				  -	      and	#3
   5054  f629				  -	      ora	inttemp1
   5055  f629				  -	      tax
   5056  f629				  -	      lda	keyrowselectvalue,x
   5057  f629				  -	      sta	SWCHA
   5058  f629				  -	      rts
   5059  f629				  -
   5060  f629				  -keyrowdirectionmask
   5061  f629				  -	      .byte	#%00000000	; 0 : port0=input  port1=input
   5062  f629				  -	      .byte	#%11110000	; 1 : port0=output port1=input
   5063  f629				  -	      .byte	#%00001111	; 2 : port0=input  port1=output
   5064  f629				  -	      .byte	#%11111111	; 3 : port0=output port1=output
   5065  f629				  -
   5066  f629				  -keyrowselectvalue
   5067  f629				  -	      .byte	#%00000000, #%00000000, #%00000000, #%00000000	; no row selected, all pins high, always
   5068  f629				  -	      .byte	#%11100000, #%11010000, #%10110000, #%01110000	; p0 keypad in
   5069  f629				  -	      .byte	#%00001110, #%00001101, #%00001011, #%00000111	; p1 keypad in
   5070  f629				  -	      .byte	#%11101110, #%11011101, #%10111011, #%01110111	; p0+p1 keypads in
   5071  f629					      endif		;  KEYPADSUPPORT
   5072  f629
   5073  f629				  -	      ifconst	KEYPADSUPPORT
   5074  f629				  -keypadcolumnread
   5075  f629				  -	      lda	framecounter
   5076  f629				  -	      and	#3
   5077  f629				  -	      asl		; x2 because keypad variables are interleaved
   5078  f629				  -	      tax
   5079  f629				  -
   5080  f629				  -	      lda	#0
   5081  f629				  -	      sta	keypadmatrix0a,x
   5082  f629				  -	      sta	keypadmatrix1a,x
   5083  f629				  -
   5084  f629				  -	      lda	INPT0
   5085  f629				  -	      cmp	#$80
   5086  f629				  -	      rol	keypadmatrix0a,x
   5087  f629				  -	      lda	INPT1
   5088  f629				  -	      cmp	#$80
   5089  f629				  -	      rol	keypadmatrix0a,x
   5090  f629				  -	      lda	INPT4
   5091  f629				  -	      cmp	#$80
   5092  f629				  -	      rol	keypadmatrix0a,x
   5093  f629				  -	      lda	keypadmatrix0a,x
   5094  f629				  -	      eor	#%00000111
   5095  f629				  -	      sta	keypadmatrix0a,x
   5096  f629				  -
   5097  f629				  -	      rol	keypadmatrix1a,x
   5098  f629				  -	      lda	INPT2
   5099  f629				  -	      cmp	#$80
   5100  f629				  -	      rol	keypadmatrix1a,x
   5101  f629				  -	      lda	INPT3
   5102  f629				  -	      cmp	#$80
   5103  f629				  -	      rol	keypadmatrix1a,x
   5104  f629				  -	      lda	INPT5
   5105  f629				  -	      cmp	#$80
   5106  f629				  -	      rol	keypadmatrix1a,x
   5107  f629				  -	      lda	keypadmatrix1a,x
   5108  f629				  -	      eor	#%00000111
   5109  f629				  -	      sta	keypadmatrix1a,x
   5110  f629				  -
   5111  f629				  -	      rts
   5112  f629					      endif		; KEYPADSUPPORT
   5113  f629
   5114  f629				   setportforinput
   5115  f629		       a5 e4		      lda	CTLSWAs
   5116  f62b		       3d 34 f6 	      and	allpinsinputlut,x
   5117  f62e		       85 e4		      sta	CTLSWAs
   5118  f630		       8d 81 02 	      sta	CTLSWA
   5119  f633		       60		      rts
   5120  f634
   5121  f634				   allpinsinputlut
   5122  f634		       0f f0		      .byte.b	$0F, $F0
   5123  f636
   5124  f636				   setonebuttonmode
   5125  f636		       a9 14		      lda	#$14
   5126  f638		       8d 83 02 	      sta	CTLSWB	; set both 2-button disable bits to writable
   5127  f63b		       a5 e5		      lda	CTLSWBs
   5128  f63d		       1d 46 f6 	      ora	thisjoy2buttonbit,x
   5129  f640		       85 e5		      sta	CTLSWBs
   5130  f642		       8d 82 02 	      sta	SWCHB	; turn off the 2-button disable bits
   5131  f645		       60		      rts
   5132  f646
   5133  f646				   thisjoy2buttonbit
   5134  f646		       04 10		      .byte.b	$04, $10
   5135  f648
   5136  f648				   settwobuttonmode
   5137  f648		       a9 14		      lda	#$14
   5138  f64a		       8d 83 02 	      sta	CTLSWB	; set both 2-button disable bits to writable
   5139  f64d		       a5 e5		      lda	CTLSWBs
   5140  f64f		       3d 58 f6 	      and	thisjoy2buttonmask,x
   5141  f652		       85 e5		      sta	CTLSWBs
   5142  f654		       8d 82 02 	      sta	SWCHB
   5143  f657		       60		      rts
   5144  f658
   5145  f658				   thisjoy2buttonmask
   5146  f658		       fb ef		      .byte.b	$fb, $ef
   5147  f65a
   5148  f65a							; Provided under the CC0 license. See the included LICENSE.txt for details.
   5149  f65a
   5150  f65a				   START
   5151  f65a				   start
   5152  f65a
   5153  f65a							;******** more or less the Atari recommended startup procedure
   5154  f65a
   5155  f65a		       78		      sei
   5156  f65b		       d8		      cld
   5157  f65c
   5158  f65c					      ifnconst	NOTIALOCK
   5159  f65c		       a9 07		      lda	#$07
   5160  f65e				  -	      else
   5161  f65e				  -	      lda	#$06
   5162  f65e					      endif
   5163  f65e		       85 01		      sta	INPTCTRL	;lock 7800 into 7800 mode
   5164  f660		       a9 7f		      lda	#$7F
   5165  f662		       85 3c		      sta	CTRL	;disable DMA
   5166  f664		       a9 00		      lda	#$00
   5167  f666		       85 38		      sta	OFFSET
   5168  f668					      ifnconst	NOTIALOCK
   5169  f668		       85 01		      sta	INPTCTRL
   5170  f66a					      endif
   5171  f66a		       a2 ff		      ldx	#$FF
   5172  f66c		       9a		      txs
   5173  f66d
   5174  f66d							;************** Clear Memory
   5175  f66d
   5176  f66d		       a2 40		      ldx	#$40
   5177  f66f		       a9 00		      lda	#$00
   5178  f671				   crloop1
   5179  f671		       95 00		      sta	$00,x	;Clear zero page
   5180  f673		       9d 00 01 	      sta	$100,x	;Clear page 1
   5181  f676		       e8		      inx
   5182  f677		       d0 f8		      bne	crloop1
   5183  f679
   5184  f679
   5185  f679		       a0 00		      ldy	#$00	;Clear Ram
   5186  f67b		       a9 18		      lda	#$18	;Start at $1800
   5187  f67d		       85 81		      sta	$81
   5188  f67f		       a9 00		      lda	#$00
   5189  f681		       85 80		      sta	$80
   5190  f683				   crloop3
   5191  f683		       a9 00		      lda	#$00
   5192  f685		       91 80		      sta	($80),y	;Store data
   5193  f687		       c8		      iny		;Next byte
   5194  f688		       d0 f9		      bne	crloop3	;Branch if not done page
   5195  f68a		       e6 81		      inc	$81	;Next page
   5196  f68c		       a5 81		      lda	$81
   5197  f68e		       c9 20		      cmp	#$20	;End at $1FFF
   5198  f690		       d0 f1		      bne	crloop3	;Branch if not
   5199  f692
   5200  f692		       a0 00		      ldy	#$00	;Clear Ram
   5201  f694		       a9 22		      lda	#$22	;Start at $2200
   5202  f696		       85 81		      sta	$81
   5203  f698		       a9 00		      lda	#$00
   5204  f69a		       85 80		      sta	$80
   5205  f69c				   crloop4
   5206  f69c		       a9 00		      lda	#$00
   5207  f69e		       91 80		      sta	($80),y	;Store data
   5208  f6a0		       c8		      iny		;Next byte
   5209  f6a1		       d0 f9		      bne	crloop4	;Branch if not done page
   5210  f6a3		       e6 81		      inc	$81	;Next page
   5211  f6a5		       a5 81		      lda	$81
   5212  f6a7		       c9 27		      cmp	#$27	;End at $27FF
   5213  f6a9		       d0 f1		      bne	crloop4	;Branch if not
   5214  f6ab
   5215  f6ab		       a2 00		      ldx	#$00
   5216  f6ad		       a9 00		      lda	#$00
   5217  f6af				   crloop5		;Clear 2100-213F, 2000-203F
   5218  f6af		       9d 00 20 	      sta	$2000,x
   5219  f6b2		       9d 00 21 	      sta	$2100,x
   5220  f6b5		       e8		      inx
   5221  f6b6		       e0 40		      cpx	#$40
   5222  f6b8		       d0 f5		      bne	crloop5
   5223  f6ba
   5224  f6ba		       85 80		      sta	$80
   5225  f6bc		       85 81		      sta	$81
   5226  f6be		       85 82		      sta	$82
   5227  f6c0		       85 83		      sta	$83
   5228  f6c2
   5229  f6c2							;seed random number with hopefully-random timer value
   5230  f6c2		       a9 01		      lda	#1
   5231  f6c4		       0d 84 02 	      ora	INTIM
   5232  f6c7		       85 40		      sta	rand
   5233  f6c9
   5234  f6c9							; detect the console type...
   5235  f6c9				   pndetectvblankstart
   5236  f6c9		       a5 28		      lda	MSTAT
   5237  f6cb		       10 fc		      bpl	pndetectvblankstart	; if we're not in VBLANK, wait for it to start 
   5238  f6cd				   pndetectvblankover
   5239  f6cd		       a5 28		      lda	MSTAT
   5240  f6cf		       30 fc		      bmi	pndetectvblankover	;  then wait for it to be over
   5241  f6d1		       a0 00		      ldy	#$00
   5242  f6d3		       a2 00		      ldx	#$00
   5243  f6d5				   pndetectvblankhappening
   5244  f6d5		       a5 28		      lda	MSTAT
   5245  f6d7		       30 07		      bmi	pndetectinvblank	;  if VBLANK starts, exit our counting loop 
   5246  f6d9		       85 24		      sta	WSYNC
   5247  f6db		       85 24		      sta	WSYNC
   5248  f6dd		       e8		      inx
   5249  f6de		       d0 f5		      bne	pndetectvblankhappening
   5250  f6e0				   pndetectinvblank
   5251  f6e0		       e0 7d		      cpx	#125
   5252  f6e2		       90 02		      bcc	pndetecispal
   5253  f6e4		       a0 01		      ldy	#$01
   5254  f6e6				   pndetecispal
   5255  f6e6		       8c 09 21 	      sty	paldetected
   5256  f6e9
   5257  f6e9		       20 e2 f4 	      jsr	createallgamedlls
   5258  f6ec
   5259  f6ec		       a9 18		      lda	#>DLLMEM
   5260  f6ee		       85 2c		      sta	DPPH
   5261  f6f0		       a9 00		      lda	#<DLLMEM
   5262  f6f2		       85 30		      sta	DPPL
   5263  f6f4
   5264  f6f4							; CTRL 76543210
   5265  f6f4							; 7 colorburst kill
   5266  f6f4							; 6,5 dma ctrl 2=normal DMA, 3=no DMA
   5267  f6f4							; 4 character width 1=2 byte chars, 0=1 byte chars
   5268  f6f4							; 3 border control 0=background color border, 1=black border
   5269  f6f4							; 2 kangaroo mode 0=transparancy, 1=kangaroo
   5270  f6f4							; 1,0 read mode 0=160x2/160x4 1=N/A 2=320B/320D 3=320A/320C
   5271  f6f4
   5272  f6f4				  -	      ifconst	DOUBLEWIDE
   5273  f6f4				  -	      lda	#%01010000	;Enable DMA, mode=160x2/160x4, 2x character width
   5274  f6f4					      else
   5275  f6f4		       a9 40		      lda	#%01000000	;Enable DMA, mode=160x2/160x4
   5276  f6f6					      endif
   5277  f6f6		       85 3c		      sta	CTRL
   5278  f6f8		       8d 07 21 	      sta	sCTRL
   5279  f6fb
   5280  f6fb		       20 d5 f4 	      jsr	vblankresync
   5281  f6fe
   5282  f6fe		       a9 04		      lda	#%00000100	; leave cartridge plugged in for any testing
   5283  f700		       8d b7 01 	      sta	XCTRL1s
   5284  f703
   5285  f703				  -	      ifconst	pokeysupport
   5286  f703				  -			; pokey support is compiled in, so try to detect it...
   5287  f703				  -	      jsr	detectpokeylocation
   5288  f703					      endif
   5289  f703
   5290  f703		       a9 01		      lda	#1	; default for port 0 and 1 is a regular joystick
   5291  f705		       8d e2 01 	      sta	port0control
   5292  f708		       8d e3 01 	      sta	port1control
   5293  f70b
   5294  f70b							;Setup port A to read mode
   5295  f70b							;lda #$00
   5296  f70b							;sta SWCHA
   5297  f70b							;sta CTLSWA
   5298  f70b
   5299  f70b				  -	      ifconst	HSSUPPORT
   5300  f70b				  -			; try to detect HSC
   5301  f70b				  -	      jsr	detecthsc
   5302  f70b				  -	      and	#1
   5303  f70b				  -	      sta	hsdevice
   5304  f70b				  -skipHSCdetect
   5305  f70b				  -			; try to detect AtariVox eeprom
   5306  f70b				  -	      jsr	detectatarivoxeeprom
   5307  f70b				  -	      and	#2
   5308  f70b				  -	      ora	hsdevice
   5309  f70b				  -	      cmp	#3
   5310  f70b				  -	      bne	storeAinhsdevice
   5311  f70b				  -			; For now, we tie break by giving HSC priority over AtariVox.
   5312  f70b				  -			; Later we should check each device's priority byte if set, instead, 
   5313  f70b				  -	      lda	#2
   5314  f70b				  -storeAinhsdevice
   5315  f70b				  -	      sta	hsdevice
   5316  f70b				  -	      lda	#$ff
   5317  f70b				  -	      sta	hsdifficulty
   5318  f70b				  -	      sta	hsgameslot
   5319  f70b				  -	      sta	hsnewscoreline
   5320  f70b					      endif
   5321  f70b
   5322  f70b				  -	      ifconst	AVOXVOICE
   5323  f70b				  -	      jsr	silenceavoxvoice
   5324  f70b					      endif
   5325  f70b
   5326  f70b				  -	      ifconst	SGRAM
   5327  f70b				  -			; check if we actually have SGRAM. If not, probe XM for it...
   5328  f70b				  -	      ldy	#$EA
   5329  f70b				  -	      sty	$4000
   5330  f70b				  -	      ldy	$4000
   5331  f70b				  -	      cpy	#$EA
   5332  f70b				  -	      beq	skipSGRAMcheck
   5333  f70b				  -	      lda	XCTRL1s
   5334  f70b				  -	      ora	#%01100100
   5335  f70b				  -	      sta	XCTRL1
   5336  f70b				  -	      sty	$4000
   5337  f70b				  -	      ldy	$4000
   5338  f70b				  -	      cpy	#$EA
   5339  f70b				  -	      bne	skipSGRAMcheck
   5340  f70b				  -			;if we're here, XM memory satisfied our RAM requirement
   5341  f70b				  -	      sta	XCTRL1s	; save it
   5342  f70b				  -	      lda	#$10
   5343  f70b				  -	      sta	XCTRL2
   5344  f70b				  -	      sta	XCTRL3
   5345  f70b				  -skipSGRAMcheck
   5346  f70b					      endif
   5347  f70b
   5348  f70b				  -	      ifconst	TURNEDOFF
   5349  f70b				  -	      ldx	#1
   5350  f70b				  -	      ldy	#3
   5351  f70b				  -joystickdetectloop
   5352  f70b				  -	      jsr	setonebuttonmode
   5353  f70b				  -			; ensure we're in one-button mode and check for a genesis controller
   5354  f70b				  -	      lda	INPT0,y
   5355  f70b				  -	      and	#$80
   5356  f70b				  -	      sta	genesisdetected0,x
   5357  f70b				  -	      bne	skipsetgenesistwobutton
   5358  f70b				  -skipsetgenesis
   5359  f70b				  -	      jsr	settwobuttonmode
   5360  f70b				  -skipsetgenesistwobutton
   5361  f70b				  -	      dey
   5362  f70b				  -	      dey
   5363  f70b				  -	      dex
   5364  f70b				  -	      bpl	joystickdetectloop
   5365  f70b					      endif
   5366  f70b
   5367  f70b		       a2 01		      ldx	#1
   5368  f70d		       20 48 f6 	      jsr	settwobuttonmode
   5369  f710		       a2 00		      ldx	#0
   5370  f712		       20 48 f6 	      jsr	settwobuttonmode
   5371  f715
   5372  f715				  -	      ifconst	bankswitchmode
   5373  f715				  -			; we need to switch to the first bank before we jump there!
   5374  f715				  -	      ifconst	MCPDEVCART
   5375  f715				  -	      lda	#$18	; xxx11nnn - switch to bank 0
   5376  f715				  -	      sta	$3000
   5377  f715				  -	      else
   5378  f715				  -	      lda	#0
   5379  f715				  -	      sta	$8000
   5380  f715				  -	      endif
   5381  f715					      endif
   5382  f715
   5383  f715		       4c 13 40 	      jmp	game
   5384  f718
   5385  f718
   5386  f718							; Provided under the CC0 license. See the included LICENSE.txt for details.
   5387  f718
   5388  f718							;************** Setup DLL entries
   5389  f718
   5390  f718							; setup some working definitions, to avoid ifnconst mess elsewhere...
   5391  f718					      ifnconst	SCREENHEIGHT
   5392  f718		       00 c0	   WSCREENHEIGHT =	192
   5393  f718				  -	      else
   5394  f718				  -WSCREENHEIGHT =	SCREENHEIGHT
   5395  f718					      endif
   5396  f718
   5397  f718				  -	      ifnconst	ZONEHEIGHT
   5398  f718				  -WZONEHEIGHT =	16
   5399  f718					      else
   5400  f718		       00 10	   WZONEHEIGHT =	ZONEHEIGHT
   5401  f718					      endif
   5402  f718
   5403  f718					      ifnconst	ZONECOUNT
   5404  f718		       00 0c	   WZONECOUNT =	(WSCREENHEIGHT/WZONEHEIGHT)
   5405  f718				  -	      else
   5406  f718				  -WZONECOUNT =	ZONECOUNT
   5407  f718					      endif
   5408  f718
   5409  f718							; top of the frame, non-visible lines. this is based on NTSC,
   5410  f718							; but we add in extra NV lines at the end of the display to ensure
   5411  f718							; our PAL friends can play the game without it crashing.
   5412  f718		       00 19	   NVLINES    =	((243-WSCREENHEIGHT)/2)
   5413  f718
   5414  f718					      ifnconst	DLMEMSTART
   5415  f718				  -	      ifnconst	DOUBLEBUFFER
   5416  f718				  -WDLMEMSTART =	$1880
   5417  f718					      else
   5418  f718		       18 e0	   WDLMEMSTART =	$18E0
   5419  f718					      endif		; DOUBLEBUFFER
   5420  f718				  -	      else
   5421  f718				  -WDLMEMSTART =	DLMEMSTART
   5422  f718					      endif
   5423  f718
   5424  f718					      ifnconst	DLMEMEND
   5425  f718				  -	      ifconst	EXTRADLMEMORY
   5426  f718				  -WDLMEMEND  =	$23FF
   5427  f718					      else
   5428  f718		       1f ff	   WDLMEMEND  =	$1FFF
   5429  f718					      endif
   5430  f718				  -	      else
   5431  f718				  -WDLMEMEND  =	DLMEMEND
   5432  f718					      endif
   5433  f718
   5434  f718
   5435  f718		       07 20	   WMEMSIZE   =	(WDLMEMEND-WDLMEMSTART+1)
   5436  f718
   5437  f718				  -	      ifnconst	DOUBLEBUFFER
   5438  f718				  -DLLASTOBJ  =	((((WMEMSIZE/WZONECOUNT)-2)/5)*5)	; -2 to always ensure we have 1x double-byte terminator
   5439  f718					      else
   5440  f718		       00 46	   DLLASTOBJ  =	((((WMEMSIZE/WZONECOUNT)-4)/10)*5)	; -4 to always ensure we have 2x double-byte terminators
   5441  f718					      endif
   5442  f718
   5443  f718		       00 48	   TDOUBLEBUFFEROFFSET =	(DLLASTOBJ+2)	; offset between DL buffers. ie. half the real DL
   5444  f718				  -	      if	TDOUBLEBUFFEROFFSET > 255
   5445  f718				  -DOUBLEBUFFEROFFSET =	255
   5446  f718					      else
   5447  f718		       00 48	   DOUBLEBUFFEROFFSET =	(DLLASTOBJ+2)
   5448  f718					      endif
   5449  f718
   5450  f718				  -	      ifconst	EXTRADLMEMORY
   5451  f718				  -SECONDDLHALFSTART SET	$2300
   5452  f718					      endif
   5453  f718
   5454  f718				   DLPOINTH
   5455  f718				   DLINDEX    SET	0
   5456  f718					      REPEAT	WZONECOUNT
   5457  f718				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5458  f718				  -	      ifconst	EXTRADLMEMORY
   5459  f718				  -	      if	TMPMEMADDRESS > $1FFF
   5460  f718				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5461  f718				  -	      else
   5462  f718				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5463  f718				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5464  f718				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   5465  f718				  -	      endif
   5466  f718				  -	      endif		; TMPMEMADDRESS > $1FFF
   5467  f718					      endif		; EXTRADLMEMORY
   5468  f718							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   5469  f718		       18		      .byte.b	>TMPMEMADDRESS
   5470  f718				   DLINDEX    SET	DLINDEX + 1
   5456  f718					      REPEND
   5457  f718				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5458  f719				  -	      ifconst	EXTRADLMEMORY
   5459  f719				  -	      if	TMPMEMADDRESS > $1FFF
   5460  f719				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5461  f719				  -	      else
   5462  f719				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5463  f719				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5464  f719				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   5465  f719				  -	      endif
   5466  f719				  -	      endif		; TMPMEMADDRESS > $1FFF
   5467  f719					      endif		; EXTRADLMEMORY
   5468  f719							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   5469  f719		       19		      .byte.b	>TMPMEMADDRESS
   5470  f719				   DLINDEX    SET	DLINDEX + 1
   5456  f719					      REPEND
   5457  f719				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5458  f71a				  -	      ifconst	EXTRADLMEMORY
   5459  f71a				  -	      if	TMPMEMADDRESS > $1FFF
   5460  f71a				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5461  f71a				  -	      else
   5462  f71a				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5463  f71a				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5464  f71a				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   5465  f71a				  -	      endif
   5466  f71a				  -	      endif		; TMPMEMADDRESS > $1FFF
   5467  f71a					      endif		; EXTRADLMEMORY
   5468  f71a							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   5469  f71a		       1a		      .byte.b	>TMPMEMADDRESS
   5470  f71a				   DLINDEX    SET	DLINDEX + 1
   5456  f71a					      REPEND
   5457  f71a				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5458  f71b				  -	      ifconst	EXTRADLMEMORY
   5459  f71b				  -	      if	TMPMEMADDRESS > $1FFF
   5460  f71b				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5461  f71b				  -	      else
   5462  f71b				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5463  f71b				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5464  f71b				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   5465  f71b				  -	      endif
   5466  f71b				  -	      endif		; TMPMEMADDRESS > $1FFF
   5467  f71b					      endif		; EXTRADLMEMORY
   5468  f71b							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   5469  f71b		       1a		      .byte.b	>TMPMEMADDRESS
   5470  f71b				   DLINDEX    SET	DLINDEX + 1
   5456  f71b					      REPEND
   5457  f71b				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5458  f71c				  -	      ifconst	EXTRADLMEMORY
   5459  f71c				  -	      if	TMPMEMADDRESS > $1FFF
   5460  f71c				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5461  f71c				  -	      else
   5462  f71c				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5463  f71c				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5464  f71c				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   5465  f71c				  -	      endif
   5466  f71c				  -	      endif		; TMPMEMADDRESS > $1FFF
   5467  f71c					      endif		; EXTRADLMEMORY
   5468  f71c							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   5469  f71c		       1b		      .byte.b	>TMPMEMADDRESS
   5470  f71c				   DLINDEX    SET	DLINDEX + 1
   5456  f71c					      REPEND
   5457  f71c				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5458  f71d				  -	      ifconst	EXTRADLMEMORY
   5459  f71d				  -	      if	TMPMEMADDRESS > $1FFF
   5460  f71d				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5461  f71d				  -	      else
   5462  f71d				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5463  f71d				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5464  f71d				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   5465  f71d				  -	      endif
   5466  f71d				  -	      endif		; TMPMEMADDRESS > $1FFF
   5467  f71d					      endif		; EXTRADLMEMORY
   5468  f71d							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   5469  f71d		       1b		      .byte.b	>TMPMEMADDRESS
   5470  f71d				   DLINDEX    SET	DLINDEX + 1
   5456  f71d					      REPEND
   5457  f71d				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5458  f71e				  -	      ifconst	EXTRADLMEMORY
   5459  f71e				  -	      if	TMPMEMADDRESS > $1FFF
   5460  f71e				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5461  f71e				  -	      else
   5462  f71e				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5463  f71e				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5464  f71e				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   5465  f71e				  -	      endif
   5466  f71e				  -	      endif		; TMPMEMADDRESS > $1FFF
   5467  f71e					      endif		; EXTRADLMEMORY
   5468  f71e							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   5469  f71e		       1c		      .byte.b	>TMPMEMADDRESS
   5470  f71e				   DLINDEX    SET	DLINDEX + 1
   5456  f71e					      REPEND
   5457  f71e				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5458  f71f				  -	      ifconst	EXTRADLMEMORY
   5459  f71f				  -	      if	TMPMEMADDRESS > $1FFF
   5460  f71f				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5461  f71f				  -	      else
   5462  f71f				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5463  f71f				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5464  f71f				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   5465  f71f				  -	      endif
   5466  f71f				  -	      endif		; TMPMEMADDRESS > $1FFF
   5467  f71f					      endif		; EXTRADLMEMORY
   5468  f71f							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   5469  f71f		       1d		      .byte.b	>TMPMEMADDRESS
   5470  f71f				   DLINDEX    SET	DLINDEX + 1
   5456  f71f					      REPEND
   5457  f71f				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5458  f720				  -	      ifconst	EXTRADLMEMORY
   5459  f720				  -	      if	TMPMEMADDRESS > $1FFF
   5460  f720				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5461  f720				  -	      else
   5462  f720				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5463  f720				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5464  f720				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   5465  f720				  -	      endif
   5466  f720				  -	      endif		; TMPMEMADDRESS > $1FFF
   5467  f720					      endif		; EXTRADLMEMORY
   5468  f720							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   5469  f720		       1d		      .byte.b	>TMPMEMADDRESS
   5470  f720				   DLINDEX    SET	DLINDEX + 1
   5456  f720					      REPEND
   5457  f720				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5458  f721				  -	      ifconst	EXTRADLMEMORY
   5459  f721				  -	      if	TMPMEMADDRESS > $1FFF
   5460  f721				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5461  f721				  -	      else
   5462  f721				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5463  f721				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5464  f721				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   5465  f721				  -	      endif
   5466  f721				  -	      endif		; TMPMEMADDRESS > $1FFF
   5467  f721					      endif		; EXTRADLMEMORY
   5468  f721							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   5469  f721		       1e		      .byte.b	>TMPMEMADDRESS
   5470  f721				   DLINDEX    SET	DLINDEX + 1
   5456  f721					      REPEND
   5457  f721				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5458  f722				  -	      ifconst	EXTRADLMEMORY
   5459  f722				  -	      if	TMPMEMADDRESS > $1FFF
   5460  f722				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5461  f722				  -	      else
   5462  f722				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5463  f722				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5464  f722				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   5465  f722				  -	      endif
   5466  f722				  -	      endif		; TMPMEMADDRESS > $1FFF
   5467  f722					      endif		; EXTRADLMEMORY
   5468  f722							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   5469  f722		       1e		      .byte.b	>TMPMEMADDRESS
   5470  f722				   DLINDEX    SET	DLINDEX + 1
   5456  f722					      REPEND
   5457  f722				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5458  f723				  -	      ifconst	EXTRADLMEMORY
   5459  f723				  -	      if	TMPMEMADDRESS > $1FFF
   5460  f723				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5461  f723				  -	      else
   5462  f723				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5463  f723				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5464  f723				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   5465  f723				  -	      endif
   5466  f723				  -	      endif		; TMPMEMADDRESS > $1FFF
   5467  f723					      endif		; EXTRADLMEMORY
   5468  f723							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   5469  f723		       1f		      .byte.b	>TMPMEMADDRESS
   5470  f723				   DLINDEX    SET	DLINDEX + 1
   5471  f724					      REPEND
   5472  f724
   5473  f724				  -	      ifconst	EXTRADLMEMORY
   5474  f724				  -	      echo	"   ",[SECONDDLHALFSTART],"to",[$27FF],"was claimed as extra DL memory."
   5475  f724					      endif
   5476  f724
   5477  f724
   5478  f724				   DLPOINTL
   5479  f724				   DLINDEX    SET	0
   5480  f724					      REPEAT	WZONECOUNT
   5481  f724				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5482  f724				  -	      ifconst	EXTRADLMEMORY
   5483  f724				  -	      if	TMPMEMADDRESS > $1FFF
   5484  f724				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5485  f724				  -	      else
   5486  f724				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5487  f724				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5488  f724				  -	      endif
   5489  f724				  -	      endif		; TMPMEMADDRESS > $1FFF
   5490  f724					      endif		; EXTRADLMEMORY
   5491  f724		       e0		      .byte.b	<TMPMEMADDRESS
   5492  f724				   DLINDEX    SET	DLINDEX + 1
   5480  f724					      REPEND
   5481  f724				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5482  f725				  -	      ifconst	EXTRADLMEMORY
   5483  f725				  -	      if	TMPMEMADDRESS > $1FFF
   5484  f725				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5485  f725				  -	      else
   5486  f725				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5487  f725				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5488  f725				  -	      endif
   5489  f725				  -	      endif		; TMPMEMADDRESS > $1FFF
   5490  f725					      endif		; EXTRADLMEMORY
   5491  f725		       78		      .byte.b	<TMPMEMADDRESS
   5492  f725				   DLINDEX    SET	DLINDEX + 1
   5480  f725					      REPEND
   5481  f725				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5482  f726				  -	      ifconst	EXTRADLMEMORY
   5483  f726				  -	      if	TMPMEMADDRESS > $1FFF
   5484  f726				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5485  f726				  -	      else
   5486  f726				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5487  f726				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5488  f726				  -	      endif
   5489  f726				  -	      endif		; TMPMEMADDRESS > $1FFF
   5490  f726					      endif		; EXTRADLMEMORY
   5491  f726		       10		      .byte.b	<TMPMEMADDRESS
   5492  f726				   DLINDEX    SET	DLINDEX + 1
   5480  f726					      REPEND
   5481  f726				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5482  f727				  -	      ifconst	EXTRADLMEMORY
   5483  f727				  -	      if	TMPMEMADDRESS > $1FFF
   5484  f727				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5485  f727				  -	      else
   5486  f727				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5487  f727				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5488  f727				  -	      endif
   5489  f727				  -	      endif		; TMPMEMADDRESS > $1FFF
   5490  f727					      endif		; EXTRADLMEMORY
   5491  f727		       a8		      .byte.b	<TMPMEMADDRESS
   5492  f727				   DLINDEX    SET	DLINDEX + 1
   5480  f727					      REPEND
   5481  f727				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5482  f728				  -	      ifconst	EXTRADLMEMORY
   5483  f728				  -	      if	TMPMEMADDRESS > $1FFF
   5484  f728				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5485  f728				  -	      else
   5486  f728				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5487  f728				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5488  f728				  -	      endif
   5489  f728				  -	      endif		; TMPMEMADDRESS > $1FFF
   5490  f728					      endif		; EXTRADLMEMORY
   5491  f728		       40		      .byte.b	<TMPMEMADDRESS
   5492  f728				   DLINDEX    SET	DLINDEX + 1
   5480  f728					      REPEND
   5481  f728				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5482  f729				  -	      ifconst	EXTRADLMEMORY
   5483  f729				  -	      if	TMPMEMADDRESS > $1FFF
   5484  f729				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5485  f729				  -	      else
   5486  f729				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5487  f729				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5488  f729				  -	      endif
   5489  f729				  -	      endif		; TMPMEMADDRESS > $1FFF
   5490  f729					      endif		; EXTRADLMEMORY
   5491  f729		       d8		      .byte.b	<TMPMEMADDRESS
   5492  f729				   DLINDEX    SET	DLINDEX + 1
   5480  f729					      REPEND
   5481  f729				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5482  f72a				  -	      ifconst	EXTRADLMEMORY
   5483  f72a				  -	      if	TMPMEMADDRESS > $1FFF
   5484  f72a				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5485  f72a				  -	      else
   5486  f72a				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5487  f72a				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5488  f72a				  -	      endif
   5489  f72a				  -	      endif		; TMPMEMADDRESS > $1FFF
   5490  f72a					      endif		; EXTRADLMEMORY
   5491  f72a		       70		      .byte.b	<TMPMEMADDRESS
   5492  f72a				   DLINDEX    SET	DLINDEX + 1
   5480  f72a					      REPEND
   5481  f72a				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5482  f72b				  -	      ifconst	EXTRADLMEMORY
   5483  f72b				  -	      if	TMPMEMADDRESS > $1FFF
   5484  f72b				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5485  f72b				  -	      else
   5486  f72b				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5487  f72b				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5488  f72b				  -	      endif
   5489  f72b				  -	      endif		; TMPMEMADDRESS > $1FFF
   5490  f72b					      endif		; EXTRADLMEMORY
   5491  f72b		       08		      .byte.b	<TMPMEMADDRESS
   5492  f72b				   DLINDEX    SET	DLINDEX + 1
   5480  f72b					      REPEND
   5481  f72b				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5482  f72c				  -	      ifconst	EXTRADLMEMORY
   5483  f72c				  -	      if	TMPMEMADDRESS > $1FFF
   5484  f72c				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5485  f72c				  -	      else
   5486  f72c				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5487  f72c				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5488  f72c				  -	      endif
   5489  f72c				  -	      endif		; TMPMEMADDRESS > $1FFF
   5490  f72c					      endif		; EXTRADLMEMORY
   5491  f72c		       a0		      .byte.b	<TMPMEMADDRESS
   5492  f72c				   DLINDEX    SET	DLINDEX + 1
   5480  f72c					      REPEND
   5481  f72c				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5482  f72d				  -	      ifconst	EXTRADLMEMORY
   5483  f72d				  -	      if	TMPMEMADDRESS > $1FFF
   5484  f72d				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5485  f72d				  -	      else
   5486  f72d				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5487  f72d				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5488  f72d				  -	      endif
   5489  f72d				  -	      endif		; TMPMEMADDRESS > $1FFF
   5490  f72d					      endif		; EXTRADLMEMORY
   5491  f72d		       38		      .byte.b	<TMPMEMADDRESS
   5492  f72d				   DLINDEX    SET	DLINDEX + 1
   5480  f72d					      REPEND
   5481  f72d				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5482  f72e				  -	      ifconst	EXTRADLMEMORY
   5483  f72e				  -	      if	TMPMEMADDRESS > $1FFF
   5484  f72e				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5485  f72e				  -	      else
   5486  f72e				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5487  f72e				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5488  f72e				  -	      endif
   5489  f72e				  -	      endif		; TMPMEMADDRESS > $1FFF
   5490  f72e					      endif		; EXTRADLMEMORY
   5491  f72e		       d0		      .byte.b	<TMPMEMADDRESS
   5492  f72e				   DLINDEX    SET	DLINDEX + 1
   5480  f72e					      REPEND
   5481  f72e				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5482  f72f				  -	      ifconst	EXTRADLMEMORY
   5483  f72f				  -	      if	TMPMEMADDRESS > $1FFF
   5484  f72f				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5485  f72f				  -	      else
   5486  f72f				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5487  f72f				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5488  f72f				  -	      endif
   5489  f72f				  -	      endif		; TMPMEMADDRESS > $1FFF
   5490  f72f					      endif		; EXTRADLMEMORY
   5491  f72f		       68		      .byte.b	<TMPMEMADDRESS
   5492  f72f				   DLINDEX    SET	DLINDEX + 1
   5493  f730					      REPEND
   5494  f730
   5495  f730
   5496  f730				   DLINDEX    SET	0
   5497  f730					      REPEAT	WZONECOUNT
   5498  f730				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5499  f730				  -	      ifconst	EXTRADLMEMORY
   5500  f730				  -	      if	TMPMEMADDRESS > $1FFF
   5501  f730				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5502  f730				  -	      else
   5503  f730				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5504  f730				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5505  f730				  -	      endif
   5506  f730				  -	      endif		; TMPMEMADDRESS > $1FFF
   5507  f730					      endif		; EXTRADLMEMORY
   5508  f730					      if	DLINDEX = 0
   5509  f730		       18 e0	   ZONE0ADDRESS =	TMPMEMADDRESS
   5510  f730					      endif
   5511  f730				  -	      if	DLINDEX = 1
   5512  f730				  -ZONE1ADDRESS =	TMPMEMADDRESS
   5513  f730					      endif
   5514  f730				  -	      if	DLINDEX = 2
   5515  f730				  -ZONE2ADDRESS =	TMPMEMADDRESS
   5516  f730					      endif
   5517  f730				  -	      if	DLINDEX = 3
   5518  f730				  -ZONE3ADDRESS =	TMPMEMADDRESS
   5519  f730					      endif
   5520  f730				  -	      if	DLINDEX = 4
   5521  f730				  -ZONE4ADDRESS =	TMPMEMADDRESS
   5522  f730					      endif
   5523  f730				  -	      if	DLINDEX = 5
   5524  f730				  -ZONE5ADDRESS =	TMPMEMADDRESS
   5525  f730					      endif
   5526  f730				  -	      if	DLINDEX = 6
   5527  f730				  -ZONE6ADDRESS =	TMPMEMADDRESS
   5528  f730					      endif
   5529  f730				  -	      if	DLINDEX = 7
   5530  f730				  -ZONE7ADDRESS =	TMPMEMADDRESS
   5531  f730					      endif
   5532  f730				  -	      if	DLINDEX = 8
   5533  f730				  -ZONE8ADDRESS =	TMPMEMADDRESS
   5534  f730					      endif
   5535  f730				  -	      if	DLINDEX = 9
   5536  f730				  -ZONE9ADDRESS =	TMPMEMADDRESS
   5537  f730					      endif
   5538  f730				  -	      if	DLINDEX = 10
   5539  f730				  -ZONE10ADDRESS =	TMPMEMADDRESS
   5540  f730					      endif
   5541  f730				  -	      if	DLINDEX = 11
   5542  f730				  -ZONE11ADDRESS =	TMPMEMADDRESS
   5543  f730					      endif
   5544  f730				  -	      if	DLINDEX = 12
   5545  f730				  -ZONE12ADDRESS =	TMPMEMADDRESS
   5546  f730					      endif
   5547  f730				  -	      if	DLINDEX = 13
   5548  f730				  -ZONE13ADDRESS =	TMPMEMADDRESS
   5549  f730					      endif
   5550  f730				  -	      if	DLINDEX = 14
   5551  f730				  -ZONE14ADDRESS =	TMPMEMADDRESS
   5552  f730					      endif
   5553  f730				  -	      if	DLINDEX = 15
   5554  f730				  -ZONE15ADDRESS =	TMPMEMADDRESS
   5555  f730					      endif
   5556  f730				  -	      if	DLINDEX = 16
   5557  f730				  -ZONE16ADDRESS =	TMPMEMADDRESS
   5558  f730					      endif
   5559  f730				  -	      if	DLINDEX = 17
   5560  f730				  -ZONE17ADDRESS =	TMPMEMADDRESS
   5561  f730					      endif
   5562  f730				  -	      if	DLINDEX = 18
   5563  f730				  -ZONE18ADDRESS =	TMPMEMADDRESS
   5564  f730					      endif
   5565  f730				  -	      if	DLINDEX = 19
   5566  f730				  -ZONE19ADDRESS =	TMPMEMADDRESS
   5567  f730					      endif
   5568  f730				  -	      if	DLINDEX = 20
   5569  f730				  -ZONE20ADDRESS =	TMPMEMADDRESS
   5570  f730					      endif
   5571  f730				  -	      if	DLINDEX = 21
   5572  f730				  -ZONE21ADDRESS =	TMPMEMADDRESS
   5573  f730					      endif
   5574  f730				  -	      if	DLINDEX = 22
   5575  f730				  -ZONE22ADDRESS =	TMPMEMADDRESS
   5576  f730					      endif
   5577  f730				  -	      if	DLINDEX = 23
   5578  f730				  -ZONE23ADDRESS =	TMPMEMADDRESS
   5579  f730					      endif
   5580  f730				  -	      if	DLINDEX = 24
   5581  f730				  -ZONE24ADDRESS =	TMPMEMADDRESS
   5582  f730					      endif
   5583  f730				  -	      if	DLINDEX = 25
   5584  f730				  -ZONE25ADDRESS =	TMPMEMADDRESS
   5585  f730					      endif
   5586  f730				  -	      if	DLINDEX = 26
   5587  f730				  -ZONE26ADDRESS =	TMPMEMADDRESS
   5588  f730					      endif
   5589  f730				  -	      if	DLINDEX = 27
   5590  f730				  -ZONE27ADDRESS =	TMPMEMADDRESS
   5591  f730					      endif
   5592  f730				   DLINDEX    SET	DLINDEX + 1
   5497  f730					      REPEND
   5498  f730				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5499  f730				  -	      ifconst	EXTRADLMEMORY
   5500  f730				  -	      if	TMPMEMADDRESS > $1FFF
   5501  f730				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5502  f730				  -	      else
   5503  f730				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5504  f730				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5505  f730				  -	      endif
   5506  f730				  -	      endif		; TMPMEMADDRESS > $1FFF
   5507  f730					      endif		; EXTRADLMEMORY
   5508  f730				  -	      if	DLINDEX = 0
   5509  f730				  -ZONE0ADDRESS =	TMPMEMADDRESS
   5510  f730					      endif
   5511  f730					      if	DLINDEX = 1
   5512  f730		       19 78	   ZONE1ADDRESS =	TMPMEMADDRESS
   5513  f730					      endif
   5514  f730				  -	      if	DLINDEX = 2
   5515  f730				  -ZONE2ADDRESS =	TMPMEMADDRESS
   5516  f730					      endif
   5517  f730				  -	      if	DLINDEX = 3
   5518  f730				  -ZONE3ADDRESS =	TMPMEMADDRESS
   5519  f730					      endif
   5520  f730				  -	      if	DLINDEX = 4
   5521  f730				  -ZONE4ADDRESS =	TMPMEMADDRESS
   5522  f730					      endif
   5523  f730				  -	      if	DLINDEX = 5
   5524  f730				  -ZONE5ADDRESS =	TMPMEMADDRESS
   5525  f730					      endif
   5526  f730				  -	      if	DLINDEX = 6
   5527  f730				  -ZONE6ADDRESS =	TMPMEMADDRESS
   5528  f730					      endif
   5529  f730				  -	      if	DLINDEX = 7
   5530  f730				  -ZONE7ADDRESS =	TMPMEMADDRESS
   5531  f730					      endif
   5532  f730				  -	      if	DLINDEX = 8
   5533  f730				  -ZONE8ADDRESS =	TMPMEMADDRESS
   5534  f730					      endif
   5535  f730				  -	      if	DLINDEX = 9
   5536  f730				  -ZONE9ADDRESS =	TMPMEMADDRESS
   5537  f730					      endif
   5538  f730				  -	      if	DLINDEX = 10
   5539  f730				  -ZONE10ADDRESS =	TMPMEMADDRESS
   5540  f730					      endif
   5541  f730				  -	      if	DLINDEX = 11
   5542  f730				  -ZONE11ADDRESS =	TMPMEMADDRESS
   5543  f730					      endif
   5544  f730				  -	      if	DLINDEX = 12
   5545  f730				  -ZONE12ADDRESS =	TMPMEMADDRESS
   5546  f730					      endif
   5547  f730				  -	      if	DLINDEX = 13
   5548  f730				  -ZONE13ADDRESS =	TMPMEMADDRESS
   5549  f730					      endif
   5550  f730				  -	      if	DLINDEX = 14
   5551  f730				  -ZONE14ADDRESS =	TMPMEMADDRESS
   5552  f730					      endif
   5553  f730				  -	      if	DLINDEX = 15
   5554  f730				  -ZONE15ADDRESS =	TMPMEMADDRESS
   5555  f730					      endif
   5556  f730				  -	      if	DLINDEX = 16
   5557  f730				  -ZONE16ADDRESS =	TMPMEMADDRESS
   5558  f730					      endif
   5559  f730				  -	      if	DLINDEX = 17
   5560  f730				  -ZONE17ADDRESS =	TMPMEMADDRESS
   5561  f730					      endif
   5562  f730				  -	      if	DLINDEX = 18
   5563  f730				  -ZONE18ADDRESS =	TMPMEMADDRESS
   5564  f730					      endif
   5565  f730				  -	      if	DLINDEX = 19
   5566  f730				  -ZONE19ADDRESS =	TMPMEMADDRESS
   5567  f730					      endif
   5568  f730				  -	      if	DLINDEX = 20
   5569  f730				  -ZONE20ADDRESS =	TMPMEMADDRESS
   5570  f730					      endif
   5571  f730				  -	      if	DLINDEX = 21
   5572  f730				  -ZONE21ADDRESS =	TMPMEMADDRESS
   5573  f730					      endif
   5574  f730				  -	      if	DLINDEX = 22
   5575  f730				  -ZONE22ADDRESS =	TMPMEMADDRESS
   5576  f730					      endif
   5577  f730				  -	      if	DLINDEX = 23
   5578  f730				  -ZONE23ADDRESS =	TMPMEMADDRESS
   5579  f730					      endif
   5580  f730				  -	      if	DLINDEX = 24
   5581  f730				  -ZONE24ADDRESS =	TMPMEMADDRESS
   5582  f730					      endif
   5583  f730				  -	      if	DLINDEX = 25
   5584  f730				  -ZONE25ADDRESS =	TMPMEMADDRESS
   5585  f730					      endif
   5586  f730				  -	      if	DLINDEX = 26
   5587  f730				  -ZONE26ADDRESS =	TMPMEMADDRESS
   5588  f730					      endif
   5589  f730				  -	      if	DLINDEX = 27
   5590  f730				  -ZONE27ADDRESS =	TMPMEMADDRESS
   5591  f730					      endif
   5592  f730				   DLINDEX    SET	DLINDEX + 1
   5497  f730					      REPEND
   5498  f730				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5499  f730				  -	      ifconst	EXTRADLMEMORY
   5500  f730				  -	      if	TMPMEMADDRESS > $1FFF
   5501  f730				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5502  f730				  -	      else
   5503  f730				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5504  f730				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5505  f730				  -	      endif
   5506  f730				  -	      endif		; TMPMEMADDRESS > $1FFF
   5507  f730					      endif		; EXTRADLMEMORY
   5508  f730				  -	      if	DLINDEX = 0
   5509  f730				  -ZONE0ADDRESS =	TMPMEMADDRESS
   5510  f730					      endif
   5511  f730				  -	      if	DLINDEX = 1
   5512  f730				  -ZONE1ADDRESS =	TMPMEMADDRESS
   5513  f730					      endif
   5514  f730					      if	DLINDEX = 2
   5515  f730		       1a 10	   ZONE2ADDRESS =	TMPMEMADDRESS
   5516  f730					      endif
   5517  f730				  -	      if	DLINDEX = 3
   5518  f730				  -ZONE3ADDRESS =	TMPMEMADDRESS
   5519  f730					      endif
   5520  f730				  -	      if	DLINDEX = 4
   5521  f730				  -ZONE4ADDRESS =	TMPMEMADDRESS
   5522  f730					      endif
   5523  f730				  -	      if	DLINDEX = 5
   5524  f730				  -ZONE5ADDRESS =	TMPMEMADDRESS
   5525  f730					      endif
   5526  f730				  -	      if	DLINDEX = 6
   5527  f730				  -ZONE6ADDRESS =	TMPMEMADDRESS
   5528  f730					      endif
   5529  f730				  -	      if	DLINDEX = 7
   5530  f730				  -ZONE7ADDRESS =	TMPMEMADDRESS
   5531  f730					      endif
   5532  f730				  -	      if	DLINDEX = 8
   5533  f730				  -ZONE8ADDRESS =	TMPMEMADDRESS
   5534  f730					      endif
   5535  f730				  -	      if	DLINDEX = 9
   5536  f730				  -ZONE9ADDRESS =	TMPMEMADDRESS
   5537  f730					      endif
   5538  f730				  -	      if	DLINDEX = 10
   5539  f730				  -ZONE10ADDRESS =	TMPMEMADDRESS
   5540  f730					      endif
   5541  f730				  -	      if	DLINDEX = 11
   5542  f730				  -ZONE11ADDRESS =	TMPMEMADDRESS
   5543  f730					      endif
   5544  f730				  -	      if	DLINDEX = 12
   5545  f730				  -ZONE12ADDRESS =	TMPMEMADDRESS
   5546  f730					      endif
   5547  f730				  -	      if	DLINDEX = 13
   5548  f730				  -ZONE13ADDRESS =	TMPMEMADDRESS
   5549  f730					      endif
   5550  f730				  -	      if	DLINDEX = 14
   5551  f730				  -ZONE14ADDRESS =	TMPMEMADDRESS
   5552  f730					      endif
   5553  f730				  -	      if	DLINDEX = 15
   5554  f730				  -ZONE15ADDRESS =	TMPMEMADDRESS
   5555  f730					      endif
   5556  f730				  -	      if	DLINDEX = 16
   5557  f730				  -ZONE16ADDRESS =	TMPMEMADDRESS
   5558  f730					      endif
   5559  f730				  -	      if	DLINDEX = 17
   5560  f730				  -ZONE17ADDRESS =	TMPMEMADDRESS
   5561  f730					      endif
   5562  f730				  -	      if	DLINDEX = 18
   5563  f730				  -ZONE18ADDRESS =	TMPMEMADDRESS
   5564  f730					      endif
   5565  f730				  -	      if	DLINDEX = 19
   5566  f730				  -ZONE19ADDRESS =	TMPMEMADDRESS
   5567  f730					      endif
   5568  f730				  -	      if	DLINDEX = 20
   5569  f730				  -ZONE20ADDRESS =	TMPMEMADDRESS
   5570  f730					      endif
   5571  f730				  -	      if	DLINDEX = 21
   5572  f730				  -ZONE21ADDRESS =	TMPMEMADDRESS
   5573  f730					      endif
   5574  f730				  -	      if	DLINDEX = 22
   5575  f730				  -ZONE22ADDRESS =	TMPMEMADDRESS
   5576  f730					      endif
   5577  f730				  -	      if	DLINDEX = 23
   5578  f730				  -ZONE23ADDRESS =	TMPMEMADDRESS
   5579  f730					      endif
   5580  f730				  -	      if	DLINDEX = 24
   5581  f730				  -ZONE24ADDRESS =	TMPMEMADDRESS
   5582  f730					      endif
   5583  f730				  -	      if	DLINDEX = 25
   5584  f730				  -ZONE25ADDRESS =	TMPMEMADDRESS
   5585  f730					      endif
   5586  f730				  -	      if	DLINDEX = 26
   5587  f730				  -ZONE26ADDRESS =	TMPMEMADDRESS
   5588  f730					      endif
   5589  f730				  -	      if	DLINDEX = 27
   5590  f730				  -ZONE27ADDRESS =	TMPMEMADDRESS
   5591  f730					      endif
   5592  f730				   DLINDEX    SET	DLINDEX + 1
   5497  f730					      REPEND
   5498  f730				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5499  f730				  -	      ifconst	EXTRADLMEMORY
   5500  f730				  -	      if	TMPMEMADDRESS > $1FFF
   5501  f730				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5502  f730				  -	      else
   5503  f730				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5504  f730				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5505  f730				  -	      endif
   5506  f730				  -	      endif		; TMPMEMADDRESS > $1FFF
   5507  f730					      endif		; EXTRADLMEMORY
   5508  f730				  -	      if	DLINDEX = 0
   5509  f730				  -ZONE0ADDRESS =	TMPMEMADDRESS
   5510  f730					      endif
   5511  f730				  -	      if	DLINDEX = 1
   5512  f730				  -ZONE1ADDRESS =	TMPMEMADDRESS
   5513  f730					      endif
   5514  f730				  -	      if	DLINDEX = 2
   5515  f730				  -ZONE2ADDRESS =	TMPMEMADDRESS
   5516  f730					      endif
   5517  f730					      if	DLINDEX = 3
   5518  f730		       1a a8	   ZONE3ADDRESS =	TMPMEMADDRESS
   5519  f730					      endif
   5520  f730				  -	      if	DLINDEX = 4
   5521  f730				  -ZONE4ADDRESS =	TMPMEMADDRESS
   5522  f730					      endif
   5523  f730				  -	      if	DLINDEX = 5
   5524  f730				  -ZONE5ADDRESS =	TMPMEMADDRESS
   5525  f730					      endif
   5526  f730				  -	      if	DLINDEX = 6
   5527  f730				  -ZONE6ADDRESS =	TMPMEMADDRESS
   5528  f730					      endif
   5529  f730				  -	      if	DLINDEX = 7
   5530  f730				  -ZONE7ADDRESS =	TMPMEMADDRESS
   5531  f730					      endif
   5532  f730				  -	      if	DLINDEX = 8
   5533  f730				  -ZONE8ADDRESS =	TMPMEMADDRESS
   5534  f730					      endif
   5535  f730				  -	      if	DLINDEX = 9
   5536  f730				  -ZONE9ADDRESS =	TMPMEMADDRESS
   5537  f730					      endif
   5538  f730				  -	      if	DLINDEX = 10
   5539  f730				  -ZONE10ADDRESS =	TMPMEMADDRESS
   5540  f730					      endif
   5541  f730				  -	      if	DLINDEX = 11
   5542  f730				  -ZONE11ADDRESS =	TMPMEMADDRESS
   5543  f730					      endif
   5544  f730				  -	      if	DLINDEX = 12
   5545  f730				  -ZONE12ADDRESS =	TMPMEMADDRESS
   5546  f730					      endif
   5547  f730				  -	      if	DLINDEX = 13
   5548  f730				  -ZONE13ADDRESS =	TMPMEMADDRESS
   5549  f730					      endif
   5550  f730				  -	      if	DLINDEX = 14
   5551  f730				  -ZONE14ADDRESS =	TMPMEMADDRESS
   5552  f730					      endif
   5553  f730				  -	      if	DLINDEX = 15
   5554  f730				  -ZONE15ADDRESS =	TMPMEMADDRESS
   5555  f730					      endif
   5556  f730				  -	      if	DLINDEX = 16
   5557  f730				  -ZONE16ADDRESS =	TMPMEMADDRESS
   5558  f730					      endif
   5559  f730				  -	      if	DLINDEX = 17
   5560  f730				  -ZONE17ADDRESS =	TMPMEMADDRESS
   5561  f730					      endif
   5562  f730				  -	      if	DLINDEX = 18
   5563  f730				  -ZONE18ADDRESS =	TMPMEMADDRESS
   5564  f730					      endif
   5565  f730				  -	      if	DLINDEX = 19
   5566  f730				  -ZONE19ADDRESS =	TMPMEMADDRESS
   5567  f730					      endif
   5568  f730				  -	      if	DLINDEX = 20
   5569  f730				  -ZONE20ADDRESS =	TMPMEMADDRESS
   5570  f730					      endif
   5571  f730				  -	      if	DLINDEX = 21
   5572  f730				  -ZONE21ADDRESS =	TMPMEMADDRESS
   5573  f730					      endif
   5574  f730				  -	      if	DLINDEX = 22
   5575  f730				  -ZONE22ADDRESS =	TMPMEMADDRESS
   5576  f730					      endif
   5577  f730				  -	      if	DLINDEX = 23
   5578  f730				  -ZONE23ADDRESS =	TMPMEMADDRESS
   5579  f730					      endif
   5580  f730				  -	      if	DLINDEX = 24
   5581  f730				  -ZONE24ADDRESS =	TMPMEMADDRESS
   5582  f730					      endif
   5583  f730				  -	      if	DLINDEX = 25
   5584  f730				  -ZONE25ADDRESS =	TMPMEMADDRESS
   5585  f730					      endif
   5586  f730				  -	      if	DLINDEX = 26
   5587  f730				  -ZONE26ADDRESS =	TMPMEMADDRESS
   5588  f730					      endif
   5589  f730				  -	      if	DLINDEX = 27
   5590  f730				  -ZONE27ADDRESS =	TMPMEMADDRESS
   5591  f730					      endif
   5592  f730				   DLINDEX    SET	DLINDEX + 1
   5497  f730					      REPEND
   5498  f730				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5499  f730				  -	      ifconst	EXTRADLMEMORY
   5500  f730				  -	      if	TMPMEMADDRESS > $1FFF
   5501  f730				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5502  f730				  -	      else
   5503  f730				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5504  f730				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5505  f730				  -	      endif
   5506  f730				  -	      endif		; TMPMEMADDRESS > $1FFF
   5507  f730					      endif		; EXTRADLMEMORY
   5508  f730				  -	      if	DLINDEX = 0
   5509  f730				  -ZONE0ADDRESS =	TMPMEMADDRESS
   5510  f730					      endif
   5511  f730				  -	      if	DLINDEX = 1
   5512  f730				  -ZONE1ADDRESS =	TMPMEMADDRESS
   5513  f730					      endif
   5514  f730				  -	      if	DLINDEX = 2
   5515  f730				  -ZONE2ADDRESS =	TMPMEMADDRESS
   5516  f730					      endif
   5517  f730				  -	      if	DLINDEX = 3
   5518  f730				  -ZONE3ADDRESS =	TMPMEMADDRESS
   5519  f730					      endif
   5520  f730					      if	DLINDEX = 4
   5521  f730		       1b 40	   ZONE4ADDRESS =	TMPMEMADDRESS
   5522  f730					      endif
   5523  f730				  -	      if	DLINDEX = 5
   5524  f730				  -ZONE5ADDRESS =	TMPMEMADDRESS
   5525  f730					      endif
   5526  f730				  -	      if	DLINDEX = 6
   5527  f730				  -ZONE6ADDRESS =	TMPMEMADDRESS
   5528  f730					      endif
   5529  f730				  -	      if	DLINDEX = 7
   5530  f730				  -ZONE7ADDRESS =	TMPMEMADDRESS
   5531  f730					      endif
   5532  f730				  -	      if	DLINDEX = 8
   5533  f730				  -ZONE8ADDRESS =	TMPMEMADDRESS
   5534  f730					      endif
   5535  f730				  -	      if	DLINDEX = 9
   5536  f730				  -ZONE9ADDRESS =	TMPMEMADDRESS
   5537  f730					      endif
   5538  f730				  -	      if	DLINDEX = 10
   5539  f730				  -ZONE10ADDRESS =	TMPMEMADDRESS
   5540  f730					      endif
   5541  f730				  -	      if	DLINDEX = 11
   5542  f730				  -ZONE11ADDRESS =	TMPMEMADDRESS
   5543  f730					      endif
   5544  f730				  -	      if	DLINDEX = 12
   5545  f730				  -ZONE12ADDRESS =	TMPMEMADDRESS
   5546  f730					      endif
   5547  f730				  -	      if	DLINDEX = 13
   5548  f730				  -ZONE13ADDRESS =	TMPMEMADDRESS
   5549  f730					      endif
   5550  f730				  -	      if	DLINDEX = 14
   5551  f730				  -ZONE14ADDRESS =	TMPMEMADDRESS
   5552  f730					      endif
   5553  f730				  -	      if	DLINDEX = 15
   5554  f730				  -ZONE15ADDRESS =	TMPMEMADDRESS
   5555  f730					      endif
   5556  f730				  -	      if	DLINDEX = 16
   5557  f730				  -ZONE16ADDRESS =	TMPMEMADDRESS
   5558  f730					      endif
   5559  f730				  -	      if	DLINDEX = 17
   5560  f730				  -ZONE17ADDRESS =	TMPMEMADDRESS
   5561  f730					      endif
   5562  f730				  -	      if	DLINDEX = 18
   5563  f730				  -ZONE18ADDRESS =	TMPMEMADDRESS
   5564  f730					      endif
   5565  f730				  -	      if	DLINDEX = 19
   5566  f730				  -ZONE19ADDRESS =	TMPMEMADDRESS
   5567  f730					      endif
   5568  f730				  -	      if	DLINDEX = 20
   5569  f730				  -ZONE20ADDRESS =	TMPMEMADDRESS
   5570  f730					      endif
   5571  f730				  -	      if	DLINDEX = 21
   5572  f730				  -ZONE21ADDRESS =	TMPMEMADDRESS
   5573  f730					      endif
   5574  f730				  -	      if	DLINDEX = 22
   5575  f730				  -ZONE22ADDRESS =	TMPMEMADDRESS
   5576  f730					      endif
   5577  f730				  -	      if	DLINDEX = 23
   5578  f730				  -ZONE23ADDRESS =	TMPMEMADDRESS
   5579  f730					      endif
   5580  f730				  -	      if	DLINDEX = 24
   5581  f730				  -ZONE24ADDRESS =	TMPMEMADDRESS
   5582  f730					      endif
   5583  f730				  -	      if	DLINDEX = 25
   5584  f730				  -ZONE25ADDRESS =	TMPMEMADDRESS
   5585  f730					      endif
   5586  f730				  -	      if	DLINDEX = 26
   5587  f730				  -ZONE26ADDRESS =	TMPMEMADDRESS
   5588  f730					      endif
   5589  f730				  -	      if	DLINDEX = 27
   5590  f730				  -ZONE27ADDRESS =	TMPMEMADDRESS
   5591  f730					      endif
   5592  f730				   DLINDEX    SET	DLINDEX + 1
   5497  f730					      REPEND
   5498  f730				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5499  f730				  -	      ifconst	EXTRADLMEMORY
   5500  f730				  -	      if	TMPMEMADDRESS > $1FFF
   5501  f730				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5502  f730				  -	      else
   5503  f730				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5504  f730				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5505  f730				  -	      endif
   5506  f730				  -	      endif		; TMPMEMADDRESS > $1FFF
   5507  f730					      endif		; EXTRADLMEMORY
   5508  f730				  -	      if	DLINDEX = 0
   5509  f730				  -ZONE0ADDRESS =	TMPMEMADDRESS
   5510  f730					      endif
   5511  f730				  -	      if	DLINDEX = 1
   5512  f730				  -ZONE1ADDRESS =	TMPMEMADDRESS
   5513  f730					      endif
   5514  f730				  -	      if	DLINDEX = 2
   5515  f730				  -ZONE2ADDRESS =	TMPMEMADDRESS
   5516  f730					      endif
   5517  f730				  -	      if	DLINDEX = 3
   5518  f730				  -ZONE3ADDRESS =	TMPMEMADDRESS
   5519  f730					      endif
   5520  f730				  -	      if	DLINDEX = 4
   5521  f730				  -ZONE4ADDRESS =	TMPMEMADDRESS
   5522  f730					      endif
   5523  f730					      if	DLINDEX = 5
   5524  f730		       1b d8	   ZONE5ADDRESS =	TMPMEMADDRESS
   5525  f730					      endif
   5526  f730				  -	      if	DLINDEX = 6
   5527  f730				  -ZONE6ADDRESS =	TMPMEMADDRESS
   5528  f730					      endif
   5529  f730				  -	      if	DLINDEX = 7
   5530  f730				  -ZONE7ADDRESS =	TMPMEMADDRESS
   5531  f730					      endif
   5532  f730				  -	      if	DLINDEX = 8
   5533  f730				  -ZONE8ADDRESS =	TMPMEMADDRESS
   5534  f730					      endif
   5535  f730				  -	      if	DLINDEX = 9
   5536  f730				  -ZONE9ADDRESS =	TMPMEMADDRESS
   5537  f730					      endif
   5538  f730				  -	      if	DLINDEX = 10
   5539  f730				  -ZONE10ADDRESS =	TMPMEMADDRESS
   5540  f730					      endif
   5541  f730				  -	      if	DLINDEX = 11
   5542  f730				  -ZONE11ADDRESS =	TMPMEMADDRESS
   5543  f730					      endif
   5544  f730				  -	      if	DLINDEX = 12
   5545  f730				  -ZONE12ADDRESS =	TMPMEMADDRESS
   5546  f730					      endif
   5547  f730				  -	      if	DLINDEX = 13
   5548  f730				  -ZONE13ADDRESS =	TMPMEMADDRESS
   5549  f730					      endif
   5550  f730				  -	      if	DLINDEX = 14
   5551  f730				  -ZONE14ADDRESS =	TMPMEMADDRESS
   5552  f730					      endif
   5553  f730				  -	      if	DLINDEX = 15
   5554  f730				  -ZONE15ADDRESS =	TMPMEMADDRESS
   5555  f730					      endif
   5556  f730				  -	      if	DLINDEX = 16
   5557  f730				  -ZONE16ADDRESS =	TMPMEMADDRESS
   5558  f730					      endif
   5559  f730				  -	      if	DLINDEX = 17
   5560  f730				  -ZONE17ADDRESS =	TMPMEMADDRESS
   5561  f730					      endif
   5562  f730				  -	      if	DLINDEX = 18
   5563  f730				  -ZONE18ADDRESS =	TMPMEMADDRESS
   5564  f730					      endif
   5565  f730				  -	      if	DLINDEX = 19
   5566  f730				  -ZONE19ADDRESS =	TMPMEMADDRESS
   5567  f730					      endif
   5568  f730				  -	      if	DLINDEX = 20
   5569  f730				  -ZONE20ADDRESS =	TMPMEMADDRESS
   5570  f730					      endif
   5571  f730				  -	      if	DLINDEX = 21
   5572  f730				  -ZONE21ADDRESS =	TMPMEMADDRESS
   5573  f730					      endif
   5574  f730				  -	      if	DLINDEX = 22
   5575  f730				  -ZONE22ADDRESS =	TMPMEMADDRESS
   5576  f730					      endif
   5577  f730				  -	      if	DLINDEX = 23
   5578  f730				  -ZONE23ADDRESS =	TMPMEMADDRESS
   5579  f730					      endif
   5580  f730				  -	      if	DLINDEX = 24
   5581  f730				  -ZONE24ADDRESS =	TMPMEMADDRESS
   5582  f730					      endif
   5583  f730				  -	      if	DLINDEX = 25
   5584  f730				  -ZONE25ADDRESS =	TMPMEMADDRESS
   5585  f730					      endif
   5586  f730				  -	      if	DLINDEX = 26
   5587  f730				  -ZONE26ADDRESS =	TMPMEMADDRESS
   5588  f730					      endif
   5589  f730				  -	      if	DLINDEX = 27
   5590  f730				  -ZONE27ADDRESS =	TMPMEMADDRESS
   5591  f730					      endif
   5592  f730				   DLINDEX    SET	DLINDEX + 1
   5497  f730					      REPEND
   5498  f730				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5499  f730				  -	      ifconst	EXTRADLMEMORY
   5500  f730				  -	      if	TMPMEMADDRESS > $1FFF
   5501  f730				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5502  f730				  -	      else
   5503  f730				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5504  f730				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5505  f730				  -	      endif
   5506  f730				  -	      endif		; TMPMEMADDRESS > $1FFF
   5507  f730					      endif		; EXTRADLMEMORY
   5508  f730				  -	      if	DLINDEX = 0
   5509  f730				  -ZONE0ADDRESS =	TMPMEMADDRESS
   5510  f730					      endif
   5511  f730				  -	      if	DLINDEX = 1
   5512  f730				  -ZONE1ADDRESS =	TMPMEMADDRESS
   5513  f730					      endif
   5514  f730				  -	      if	DLINDEX = 2
   5515  f730				  -ZONE2ADDRESS =	TMPMEMADDRESS
   5516  f730					      endif
   5517  f730				  -	      if	DLINDEX = 3
   5518  f730				  -ZONE3ADDRESS =	TMPMEMADDRESS
   5519  f730					      endif
   5520  f730				  -	      if	DLINDEX = 4
   5521  f730				  -ZONE4ADDRESS =	TMPMEMADDRESS
   5522  f730					      endif
   5523  f730				  -	      if	DLINDEX = 5
   5524  f730				  -ZONE5ADDRESS =	TMPMEMADDRESS
   5525  f730					      endif
   5526  f730					      if	DLINDEX = 6
   5527  f730		       1c 70	   ZONE6ADDRESS =	TMPMEMADDRESS
   5528  f730					      endif
   5529  f730				  -	      if	DLINDEX = 7
   5530  f730				  -ZONE7ADDRESS =	TMPMEMADDRESS
   5531  f730					      endif
   5532  f730				  -	      if	DLINDEX = 8
   5533  f730				  -ZONE8ADDRESS =	TMPMEMADDRESS
   5534  f730					      endif
   5535  f730				  -	      if	DLINDEX = 9
   5536  f730				  -ZONE9ADDRESS =	TMPMEMADDRESS
   5537  f730					      endif
   5538  f730				  -	      if	DLINDEX = 10
   5539  f730				  -ZONE10ADDRESS =	TMPMEMADDRESS
   5540  f730					      endif
   5541  f730				  -	      if	DLINDEX = 11
   5542  f730				  -ZONE11ADDRESS =	TMPMEMADDRESS
   5543  f730					      endif
   5544  f730				  -	      if	DLINDEX = 12
   5545  f730				  -ZONE12ADDRESS =	TMPMEMADDRESS
   5546  f730					      endif
   5547  f730				  -	      if	DLINDEX = 13
   5548  f730				  -ZONE13ADDRESS =	TMPMEMADDRESS
   5549  f730					      endif
   5550  f730				  -	      if	DLINDEX = 14
   5551  f730				  -ZONE14ADDRESS =	TMPMEMADDRESS
   5552  f730					      endif
   5553  f730				  -	      if	DLINDEX = 15
   5554  f730				  -ZONE15ADDRESS =	TMPMEMADDRESS
   5555  f730					      endif
   5556  f730				  -	      if	DLINDEX = 16
   5557  f730				  -ZONE16ADDRESS =	TMPMEMADDRESS
   5558  f730					      endif
   5559  f730				  -	      if	DLINDEX = 17
   5560  f730				  -ZONE17ADDRESS =	TMPMEMADDRESS
   5561  f730					      endif
   5562  f730				  -	      if	DLINDEX = 18
   5563  f730				  -ZONE18ADDRESS =	TMPMEMADDRESS
   5564  f730					      endif
   5565  f730				  -	      if	DLINDEX = 19
   5566  f730				  -ZONE19ADDRESS =	TMPMEMADDRESS
   5567  f730					      endif
   5568  f730				  -	      if	DLINDEX = 20
   5569  f730				  -ZONE20ADDRESS =	TMPMEMADDRESS
   5570  f730					      endif
   5571  f730				  -	      if	DLINDEX = 21
   5572  f730				  -ZONE21ADDRESS =	TMPMEMADDRESS
   5573  f730					      endif
   5574  f730				  -	      if	DLINDEX = 22
   5575  f730				  -ZONE22ADDRESS =	TMPMEMADDRESS
   5576  f730					      endif
   5577  f730				  -	      if	DLINDEX = 23
   5578  f730				  -ZONE23ADDRESS =	TMPMEMADDRESS
   5579  f730					      endif
   5580  f730				  -	      if	DLINDEX = 24
   5581  f730				  -ZONE24ADDRESS =	TMPMEMADDRESS
   5582  f730					      endif
   5583  f730				  -	      if	DLINDEX = 25
   5584  f730				  -ZONE25ADDRESS =	TMPMEMADDRESS
   5585  f730					      endif
   5586  f730				  -	      if	DLINDEX = 26
   5587  f730				  -ZONE26ADDRESS =	TMPMEMADDRESS
   5588  f730					      endif
   5589  f730				  -	      if	DLINDEX = 27
   5590  f730				  -ZONE27ADDRESS =	TMPMEMADDRESS
   5591  f730					      endif
   5592  f730				   DLINDEX    SET	DLINDEX + 1
   5497  f730					      REPEND
   5498  f730				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5499  f730				  -	      ifconst	EXTRADLMEMORY
   5500  f730				  -	      if	TMPMEMADDRESS > $1FFF
   5501  f730				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5502  f730				  -	      else
   5503  f730				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5504  f730				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5505  f730				  -	      endif
   5506  f730				  -	      endif		; TMPMEMADDRESS > $1FFF
   5507  f730					      endif		; EXTRADLMEMORY
   5508  f730				  -	      if	DLINDEX = 0
   5509  f730				  -ZONE0ADDRESS =	TMPMEMADDRESS
   5510  f730					      endif
   5511  f730				  -	      if	DLINDEX = 1
   5512  f730				  -ZONE1ADDRESS =	TMPMEMADDRESS
   5513  f730					      endif
   5514  f730				  -	      if	DLINDEX = 2
   5515  f730				  -ZONE2ADDRESS =	TMPMEMADDRESS
   5516  f730					      endif
   5517  f730				  -	      if	DLINDEX = 3
   5518  f730				  -ZONE3ADDRESS =	TMPMEMADDRESS
   5519  f730					      endif
   5520  f730				  -	      if	DLINDEX = 4
   5521  f730				  -ZONE4ADDRESS =	TMPMEMADDRESS
   5522  f730					      endif
   5523  f730				  -	      if	DLINDEX = 5
   5524  f730				  -ZONE5ADDRESS =	TMPMEMADDRESS
   5525  f730					      endif
   5526  f730				  -	      if	DLINDEX = 6
   5527  f730				  -ZONE6ADDRESS =	TMPMEMADDRESS
   5528  f730					      endif
   5529  f730					      if	DLINDEX = 7
   5530  f730		       1d 08	   ZONE7ADDRESS =	TMPMEMADDRESS
   5531  f730					      endif
   5532  f730				  -	      if	DLINDEX = 8
   5533  f730				  -ZONE8ADDRESS =	TMPMEMADDRESS
   5534  f730					      endif
   5535  f730				  -	      if	DLINDEX = 9
   5536  f730				  -ZONE9ADDRESS =	TMPMEMADDRESS
   5537  f730					      endif
   5538  f730				  -	      if	DLINDEX = 10
   5539  f730				  -ZONE10ADDRESS =	TMPMEMADDRESS
   5540  f730					      endif
   5541  f730				  -	      if	DLINDEX = 11
   5542  f730				  -ZONE11ADDRESS =	TMPMEMADDRESS
   5543  f730					      endif
   5544  f730				  -	      if	DLINDEX = 12
   5545  f730				  -ZONE12ADDRESS =	TMPMEMADDRESS
   5546  f730					      endif
   5547  f730				  -	      if	DLINDEX = 13
   5548  f730				  -ZONE13ADDRESS =	TMPMEMADDRESS
   5549  f730					      endif
   5550  f730				  -	      if	DLINDEX = 14
   5551  f730				  -ZONE14ADDRESS =	TMPMEMADDRESS
   5552  f730					      endif
   5553  f730				  -	      if	DLINDEX = 15
   5554  f730				  -ZONE15ADDRESS =	TMPMEMADDRESS
   5555  f730					      endif
   5556  f730				  -	      if	DLINDEX = 16
   5557  f730				  -ZONE16ADDRESS =	TMPMEMADDRESS
   5558  f730					      endif
   5559  f730				  -	      if	DLINDEX = 17
   5560  f730				  -ZONE17ADDRESS =	TMPMEMADDRESS
   5561  f730					      endif
   5562  f730				  -	      if	DLINDEX = 18
   5563  f730				  -ZONE18ADDRESS =	TMPMEMADDRESS
   5564  f730					      endif
   5565  f730				  -	      if	DLINDEX = 19
   5566  f730				  -ZONE19ADDRESS =	TMPMEMADDRESS
   5567  f730					      endif
   5568  f730				  -	      if	DLINDEX = 20
   5569  f730				  -ZONE20ADDRESS =	TMPMEMADDRESS
   5570  f730					      endif
   5571  f730				  -	      if	DLINDEX = 21
   5572  f730				  -ZONE21ADDRESS =	TMPMEMADDRESS
   5573  f730					      endif
   5574  f730				  -	      if	DLINDEX = 22
   5575  f730				  -ZONE22ADDRESS =	TMPMEMADDRESS
   5576  f730					      endif
   5577  f730				  -	      if	DLINDEX = 23
   5578  f730				  -ZONE23ADDRESS =	TMPMEMADDRESS
   5579  f730					      endif
   5580  f730				  -	      if	DLINDEX = 24
   5581  f730				  -ZONE24ADDRESS =	TMPMEMADDRESS
   5582  f730					      endif
   5583  f730				  -	      if	DLINDEX = 25
   5584  f730				  -ZONE25ADDRESS =	TMPMEMADDRESS
   5585  f730					      endif
   5586  f730				  -	      if	DLINDEX = 26
   5587  f730				  -ZONE26ADDRESS =	TMPMEMADDRESS
   5588  f730					      endif
   5589  f730				  -	      if	DLINDEX = 27
   5590  f730				  -ZONE27ADDRESS =	TMPMEMADDRESS
   5591  f730					      endif
   5592  f730				   DLINDEX    SET	DLINDEX + 1
   5497  f730					      REPEND
   5498  f730				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5499  f730				  -	      ifconst	EXTRADLMEMORY
   5500  f730				  -	      if	TMPMEMADDRESS > $1FFF
   5501  f730				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5502  f730				  -	      else
   5503  f730				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5504  f730				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5505  f730				  -	      endif
   5506  f730				  -	      endif		; TMPMEMADDRESS > $1FFF
   5507  f730					      endif		; EXTRADLMEMORY
   5508  f730				  -	      if	DLINDEX = 0
   5509  f730				  -ZONE0ADDRESS =	TMPMEMADDRESS
   5510  f730					      endif
   5511  f730				  -	      if	DLINDEX = 1
   5512  f730				  -ZONE1ADDRESS =	TMPMEMADDRESS
   5513  f730					      endif
   5514  f730				  -	      if	DLINDEX = 2
   5515  f730				  -ZONE2ADDRESS =	TMPMEMADDRESS
   5516  f730					      endif
   5517  f730				  -	      if	DLINDEX = 3
   5518  f730				  -ZONE3ADDRESS =	TMPMEMADDRESS
   5519  f730					      endif
   5520  f730				  -	      if	DLINDEX = 4
   5521  f730				  -ZONE4ADDRESS =	TMPMEMADDRESS
   5522  f730					      endif
   5523  f730				  -	      if	DLINDEX = 5
   5524  f730				  -ZONE5ADDRESS =	TMPMEMADDRESS
   5525  f730					      endif
   5526  f730				  -	      if	DLINDEX = 6
   5527  f730				  -ZONE6ADDRESS =	TMPMEMADDRESS
   5528  f730					      endif
   5529  f730				  -	      if	DLINDEX = 7
   5530  f730				  -ZONE7ADDRESS =	TMPMEMADDRESS
   5531  f730					      endif
   5532  f730					      if	DLINDEX = 8
   5533  f730		       1d a0	   ZONE8ADDRESS =	TMPMEMADDRESS
   5534  f730					      endif
   5535  f730				  -	      if	DLINDEX = 9
   5536  f730				  -ZONE9ADDRESS =	TMPMEMADDRESS
   5537  f730					      endif
   5538  f730				  -	      if	DLINDEX = 10
   5539  f730				  -ZONE10ADDRESS =	TMPMEMADDRESS
   5540  f730					      endif
   5541  f730				  -	      if	DLINDEX = 11
   5542  f730				  -ZONE11ADDRESS =	TMPMEMADDRESS
   5543  f730					      endif
   5544  f730				  -	      if	DLINDEX = 12
   5545  f730				  -ZONE12ADDRESS =	TMPMEMADDRESS
   5546  f730					      endif
   5547  f730				  -	      if	DLINDEX = 13
   5548  f730				  -ZONE13ADDRESS =	TMPMEMADDRESS
   5549  f730					      endif
   5550  f730				  -	      if	DLINDEX = 14
   5551  f730				  -ZONE14ADDRESS =	TMPMEMADDRESS
   5552  f730					      endif
   5553  f730				  -	      if	DLINDEX = 15
   5554  f730				  -ZONE15ADDRESS =	TMPMEMADDRESS
   5555  f730					      endif
   5556  f730				  -	      if	DLINDEX = 16
   5557  f730				  -ZONE16ADDRESS =	TMPMEMADDRESS
   5558  f730					      endif
   5559  f730				  -	      if	DLINDEX = 17
   5560  f730				  -ZONE17ADDRESS =	TMPMEMADDRESS
   5561  f730					      endif
   5562  f730				  -	      if	DLINDEX = 18
   5563  f730				  -ZONE18ADDRESS =	TMPMEMADDRESS
   5564  f730					      endif
   5565  f730				  -	      if	DLINDEX = 19
   5566  f730				  -ZONE19ADDRESS =	TMPMEMADDRESS
   5567  f730					      endif
   5568  f730				  -	      if	DLINDEX = 20
   5569  f730				  -ZONE20ADDRESS =	TMPMEMADDRESS
   5570  f730					      endif
   5571  f730				  -	      if	DLINDEX = 21
   5572  f730				  -ZONE21ADDRESS =	TMPMEMADDRESS
   5573  f730					      endif
   5574  f730				  -	      if	DLINDEX = 22
   5575  f730				  -ZONE22ADDRESS =	TMPMEMADDRESS
   5576  f730					      endif
   5577  f730				  -	      if	DLINDEX = 23
   5578  f730				  -ZONE23ADDRESS =	TMPMEMADDRESS
   5579  f730					      endif
   5580  f730				  -	      if	DLINDEX = 24
   5581  f730				  -ZONE24ADDRESS =	TMPMEMADDRESS
   5582  f730					      endif
   5583  f730				  -	      if	DLINDEX = 25
   5584  f730				  -ZONE25ADDRESS =	TMPMEMADDRESS
   5585  f730					      endif
   5586  f730				  -	      if	DLINDEX = 26
   5587  f730				  -ZONE26ADDRESS =	TMPMEMADDRESS
   5588  f730					      endif
   5589  f730				  -	      if	DLINDEX = 27
   5590  f730				  -ZONE27ADDRESS =	TMPMEMADDRESS
   5591  f730					      endif
   5592  f730				   DLINDEX    SET	DLINDEX + 1
   5497  f730					      REPEND
   5498  f730				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5499  f730				  -	      ifconst	EXTRADLMEMORY
   5500  f730				  -	      if	TMPMEMADDRESS > $1FFF
   5501  f730				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5502  f730				  -	      else
   5503  f730				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5504  f730				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5505  f730				  -	      endif
   5506  f730				  -	      endif		; TMPMEMADDRESS > $1FFF
   5507  f730					      endif		; EXTRADLMEMORY
   5508  f730				  -	      if	DLINDEX = 0
   5509  f730				  -ZONE0ADDRESS =	TMPMEMADDRESS
   5510  f730					      endif
   5511  f730				  -	      if	DLINDEX = 1
   5512  f730				  -ZONE1ADDRESS =	TMPMEMADDRESS
   5513  f730					      endif
   5514  f730				  -	      if	DLINDEX = 2
   5515  f730				  -ZONE2ADDRESS =	TMPMEMADDRESS
   5516  f730					      endif
   5517  f730				  -	      if	DLINDEX = 3
   5518  f730				  -ZONE3ADDRESS =	TMPMEMADDRESS
   5519  f730					      endif
   5520  f730				  -	      if	DLINDEX = 4
   5521  f730				  -ZONE4ADDRESS =	TMPMEMADDRESS
   5522  f730					      endif
   5523  f730				  -	      if	DLINDEX = 5
   5524  f730				  -ZONE5ADDRESS =	TMPMEMADDRESS
   5525  f730					      endif
   5526  f730				  -	      if	DLINDEX = 6
   5527  f730				  -ZONE6ADDRESS =	TMPMEMADDRESS
   5528  f730					      endif
   5529  f730				  -	      if	DLINDEX = 7
   5530  f730				  -ZONE7ADDRESS =	TMPMEMADDRESS
   5531  f730					      endif
   5532  f730				  -	      if	DLINDEX = 8
   5533  f730				  -ZONE8ADDRESS =	TMPMEMADDRESS
   5534  f730					      endif
   5535  f730					      if	DLINDEX = 9
   5536  f730		       1e 38	   ZONE9ADDRESS =	TMPMEMADDRESS
   5537  f730					      endif
   5538  f730				  -	      if	DLINDEX = 10
   5539  f730				  -ZONE10ADDRESS =	TMPMEMADDRESS
   5540  f730					      endif
   5541  f730				  -	      if	DLINDEX = 11
   5542  f730				  -ZONE11ADDRESS =	TMPMEMADDRESS
   5543  f730					      endif
   5544  f730				  -	      if	DLINDEX = 12
   5545  f730				  -ZONE12ADDRESS =	TMPMEMADDRESS
   5546  f730					      endif
   5547  f730				  -	      if	DLINDEX = 13
   5548  f730				  -ZONE13ADDRESS =	TMPMEMADDRESS
   5549  f730					      endif
   5550  f730				  -	      if	DLINDEX = 14
   5551  f730				  -ZONE14ADDRESS =	TMPMEMADDRESS
   5552  f730					      endif
   5553  f730				  -	      if	DLINDEX = 15
   5554  f730				  -ZONE15ADDRESS =	TMPMEMADDRESS
   5555  f730					      endif
   5556  f730				  -	      if	DLINDEX = 16
   5557  f730				  -ZONE16ADDRESS =	TMPMEMADDRESS
   5558  f730					      endif
   5559  f730				  -	      if	DLINDEX = 17
   5560  f730				  -ZONE17ADDRESS =	TMPMEMADDRESS
   5561  f730					      endif
   5562  f730				  -	      if	DLINDEX = 18
   5563  f730				  -ZONE18ADDRESS =	TMPMEMADDRESS
   5564  f730					      endif
   5565  f730				  -	      if	DLINDEX = 19
   5566  f730				  -ZONE19ADDRESS =	TMPMEMADDRESS
   5567  f730					      endif
   5568  f730				  -	      if	DLINDEX = 20
   5569  f730				  -ZONE20ADDRESS =	TMPMEMADDRESS
   5570  f730					      endif
   5571  f730				  -	      if	DLINDEX = 21
   5572  f730				  -ZONE21ADDRESS =	TMPMEMADDRESS
   5573  f730					      endif
   5574  f730				  -	      if	DLINDEX = 22
   5575  f730				  -ZONE22ADDRESS =	TMPMEMADDRESS
   5576  f730					      endif
   5577  f730				  -	      if	DLINDEX = 23
   5578  f730				  -ZONE23ADDRESS =	TMPMEMADDRESS
   5579  f730					      endif
   5580  f730				  -	      if	DLINDEX = 24
   5581  f730				  -ZONE24ADDRESS =	TMPMEMADDRESS
   5582  f730					      endif
   5583  f730				  -	      if	DLINDEX = 25
   5584  f730				  -ZONE25ADDRESS =	TMPMEMADDRESS
   5585  f730					      endif
   5586  f730				  -	      if	DLINDEX = 26
   5587  f730				  -ZONE26ADDRESS =	TMPMEMADDRESS
   5588  f730					      endif
   5589  f730				  -	      if	DLINDEX = 27
   5590  f730				  -ZONE27ADDRESS =	TMPMEMADDRESS
   5591  f730					      endif
   5592  f730				   DLINDEX    SET	DLINDEX + 1
   5497  f730					      REPEND
   5498  f730				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5499  f730				  -	      ifconst	EXTRADLMEMORY
   5500  f730				  -	      if	TMPMEMADDRESS > $1FFF
   5501  f730				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5502  f730				  -	      else
   5503  f730				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5504  f730				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5505  f730				  -	      endif
   5506  f730				  -	      endif		; TMPMEMADDRESS > $1FFF
   5507  f730					      endif		; EXTRADLMEMORY
   5508  f730				  -	      if	DLINDEX = 0
   5509  f730				  -ZONE0ADDRESS =	TMPMEMADDRESS
   5510  f730					      endif
   5511  f730				  -	      if	DLINDEX = 1
   5512  f730				  -ZONE1ADDRESS =	TMPMEMADDRESS
   5513  f730					      endif
   5514  f730				  -	      if	DLINDEX = 2
   5515  f730				  -ZONE2ADDRESS =	TMPMEMADDRESS
   5516  f730					      endif
   5517  f730				  -	      if	DLINDEX = 3
   5518  f730				  -ZONE3ADDRESS =	TMPMEMADDRESS
   5519  f730					      endif
   5520  f730				  -	      if	DLINDEX = 4
   5521  f730				  -ZONE4ADDRESS =	TMPMEMADDRESS
   5522  f730					      endif
   5523  f730				  -	      if	DLINDEX = 5
   5524  f730				  -ZONE5ADDRESS =	TMPMEMADDRESS
   5525  f730					      endif
   5526  f730				  -	      if	DLINDEX = 6
   5527  f730				  -ZONE6ADDRESS =	TMPMEMADDRESS
   5528  f730					      endif
   5529  f730				  -	      if	DLINDEX = 7
   5530  f730				  -ZONE7ADDRESS =	TMPMEMADDRESS
   5531  f730					      endif
   5532  f730				  -	      if	DLINDEX = 8
   5533  f730				  -ZONE8ADDRESS =	TMPMEMADDRESS
   5534  f730					      endif
   5535  f730				  -	      if	DLINDEX = 9
   5536  f730				  -ZONE9ADDRESS =	TMPMEMADDRESS
   5537  f730					      endif
   5538  f730					      if	DLINDEX = 10
   5539  f730		       1e d0	   ZONE10ADDRESS =	TMPMEMADDRESS
   5540  f730					      endif
   5541  f730				  -	      if	DLINDEX = 11
   5542  f730				  -ZONE11ADDRESS =	TMPMEMADDRESS
   5543  f730					      endif
   5544  f730				  -	      if	DLINDEX = 12
   5545  f730				  -ZONE12ADDRESS =	TMPMEMADDRESS
   5546  f730					      endif
   5547  f730				  -	      if	DLINDEX = 13
   5548  f730				  -ZONE13ADDRESS =	TMPMEMADDRESS
   5549  f730					      endif
   5550  f730				  -	      if	DLINDEX = 14
   5551  f730				  -ZONE14ADDRESS =	TMPMEMADDRESS
   5552  f730					      endif
   5553  f730				  -	      if	DLINDEX = 15
   5554  f730				  -ZONE15ADDRESS =	TMPMEMADDRESS
   5555  f730					      endif
   5556  f730				  -	      if	DLINDEX = 16
   5557  f730				  -ZONE16ADDRESS =	TMPMEMADDRESS
   5558  f730					      endif
   5559  f730				  -	      if	DLINDEX = 17
   5560  f730				  -ZONE17ADDRESS =	TMPMEMADDRESS
   5561  f730					      endif
   5562  f730				  -	      if	DLINDEX = 18
   5563  f730				  -ZONE18ADDRESS =	TMPMEMADDRESS
   5564  f730					      endif
   5565  f730				  -	      if	DLINDEX = 19
   5566  f730				  -ZONE19ADDRESS =	TMPMEMADDRESS
   5567  f730					      endif
   5568  f730				  -	      if	DLINDEX = 20
   5569  f730				  -ZONE20ADDRESS =	TMPMEMADDRESS
   5570  f730					      endif
   5571  f730				  -	      if	DLINDEX = 21
   5572  f730				  -ZONE21ADDRESS =	TMPMEMADDRESS
   5573  f730					      endif
   5574  f730				  -	      if	DLINDEX = 22
   5575  f730				  -ZONE22ADDRESS =	TMPMEMADDRESS
   5576  f730					      endif
   5577  f730				  -	      if	DLINDEX = 23
   5578  f730				  -ZONE23ADDRESS =	TMPMEMADDRESS
   5579  f730					      endif
   5580  f730				  -	      if	DLINDEX = 24
   5581  f730				  -ZONE24ADDRESS =	TMPMEMADDRESS
   5582  f730					      endif
   5583  f730				  -	      if	DLINDEX = 25
   5584  f730				  -ZONE25ADDRESS =	TMPMEMADDRESS
   5585  f730					      endif
   5586  f730				  -	      if	DLINDEX = 26
   5587  f730				  -ZONE26ADDRESS =	TMPMEMADDRESS
   5588  f730					      endif
   5589  f730				  -	      if	DLINDEX = 27
   5590  f730				  -ZONE27ADDRESS =	TMPMEMADDRESS
   5591  f730					      endif
   5592  f730				   DLINDEX    SET	DLINDEX + 1
   5497  f730					      REPEND
   5498  f730				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5499  f730				  -	      ifconst	EXTRADLMEMORY
   5500  f730				  -	      if	TMPMEMADDRESS > $1FFF
   5501  f730				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5502  f730				  -	      else
   5503  f730				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5504  f730				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5505  f730				  -	      endif
   5506  f730				  -	      endif		; TMPMEMADDRESS > $1FFF
   5507  f730					      endif		; EXTRADLMEMORY
   5508  f730				  -	      if	DLINDEX = 0
   5509  f730				  -ZONE0ADDRESS =	TMPMEMADDRESS
   5510  f730					      endif
   5511  f730				  -	      if	DLINDEX = 1
   5512  f730				  -ZONE1ADDRESS =	TMPMEMADDRESS
   5513  f730					      endif
   5514  f730				  -	      if	DLINDEX = 2
   5515  f730				  -ZONE2ADDRESS =	TMPMEMADDRESS
   5516  f730					      endif
   5517  f730				  -	      if	DLINDEX = 3
   5518  f730				  -ZONE3ADDRESS =	TMPMEMADDRESS
   5519  f730					      endif
   5520  f730				  -	      if	DLINDEX = 4
   5521  f730				  -ZONE4ADDRESS =	TMPMEMADDRESS
   5522  f730					      endif
   5523  f730				  -	      if	DLINDEX = 5
   5524  f730				  -ZONE5ADDRESS =	TMPMEMADDRESS
   5525  f730					      endif
   5526  f730				  -	      if	DLINDEX = 6
   5527  f730				  -ZONE6ADDRESS =	TMPMEMADDRESS
   5528  f730					      endif
   5529  f730				  -	      if	DLINDEX = 7
   5530  f730				  -ZONE7ADDRESS =	TMPMEMADDRESS
   5531  f730					      endif
   5532  f730				  -	      if	DLINDEX = 8
   5533  f730				  -ZONE8ADDRESS =	TMPMEMADDRESS
   5534  f730					      endif
   5535  f730				  -	      if	DLINDEX = 9
   5536  f730				  -ZONE9ADDRESS =	TMPMEMADDRESS
   5537  f730					      endif
   5538  f730				  -	      if	DLINDEX = 10
   5539  f730				  -ZONE10ADDRESS =	TMPMEMADDRESS
   5540  f730					      endif
   5541  f730					      if	DLINDEX = 11
   5542  f730		       1f 68	   ZONE11ADDRESS =	TMPMEMADDRESS
   5543  f730					      endif
   5544  f730				  -	      if	DLINDEX = 12
   5545  f730				  -ZONE12ADDRESS =	TMPMEMADDRESS
   5546  f730					      endif
   5547  f730				  -	      if	DLINDEX = 13
   5548  f730				  -ZONE13ADDRESS =	TMPMEMADDRESS
   5549  f730					      endif
   5550  f730				  -	      if	DLINDEX = 14
   5551  f730				  -ZONE14ADDRESS =	TMPMEMADDRESS
   5552  f730					      endif
   5553  f730				  -	      if	DLINDEX = 15
   5554  f730				  -ZONE15ADDRESS =	TMPMEMADDRESS
   5555  f730					      endif
   5556  f730				  -	      if	DLINDEX = 16
   5557  f730				  -ZONE16ADDRESS =	TMPMEMADDRESS
   5558  f730					      endif
   5559  f730				  -	      if	DLINDEX = 17
   5560  f730				  -ZONE17ADDRESS =	TMPMEMADDRESS
   5561  f730					      endif
   5562  f730				  -	      if	DLINDEX = 18
   5563  f730				  -ZONE18ADDRESS =	TMPMEMADDRESS
   5564  f730					      endif
   5565  f730				  -	      if	DLINDEX = 19
   5566  f730				  -ZONE19ADDRESS =	TMPMEMADDRESS
   5567  f730					      endif
   5568  f730				  -	      if	DLINDEX = 20
   5569  f730				  -ZONE20ADDRESS =	TMPMEMADDRESS
   5570  f730					      endif
   5571  f730				  -	      if	DLINDEX = 21
   5572  f730				  -ZONE21ADDRESS =	TMPMEMADDRESS
   5573  f730					      endif
   5574  f730				  -	      if	DLINDEX = 22
   5575  f730				  -ZONE22ADDRESS =	TMPMEMADDRESS
   5576  f730					      endif
   5577  f730				  -	      if	DLINDEX = 23
   5578  f730				  -ZONE23ADDRESS =	TMPMEMADDRESS
   5579  f730					      endif
   5580  f730				  -	      if	DLINDEX = 24
   5581  f730				  -ZONE24ADDRESS =	TMPMEMADDRESS
   5582  f730					      endif
   5583  f730				  -	      if	DLINDEX = 25
   5584  f730				  -ZONE25ADDRESS =	TMPMEMADDRESS
   5585  f730					      endif
   5586  f730				  -	      if	DLINDEX = 26
   5587  f730				  -ZONE26ADDRESS =	TMPMEMADDRESS
   5588  f730					      endif
   5589  f730				  -	      if	DLINDEX = 27
   5590  f730				  -ZONE27ADDRESS =	TMPMEMADDRESS
   5591  f730					      endif
   5592  f730				   DLINDEX    SET	DLINDEX + 1
   5593  f730					      REPEND
   5594  f730
   5595  f730
     $18e0 to $1fff used as zone memory, allowing 14 display objects per zone.
   5596  f730					      echo	"   ",[WDLMEMSTART],"to",[WDLMEMEND],"used as zone memory, allowing",[(DLLASTOBJ/5)]d,"display objects per zone."
   5597  f730
   5598  f730				   DLHEIGHT
   5599  f730					      REPEAT	WZONECOUNT
   5600  f730		       0f		      .byte.b	(WZONEHEIGHT-1)
   5599  f730					      REPEND
   5600  f731		       0f		      .byte.b	(WZONEHEIGHT-1)
   5599  f731					      REPEND
   5600  f732		       0f		      .byte.b	(WZONEHEIGHT-1)
   5599  f732					      REPEND
   5600  f733		       0f		      .byte.b	(WZONEHEIGHT-1)
   5599  f733					      REPEND
   5600  f734		       0f		      .byte.b	(WZONEHEIGHT-1)
   5599  f734					      REPEND
   5600  f735		       0f		      .byte.b	(WZONEHEIGHT-1)
   5599  f735					      REPEND
   5600  f736		       0f		      .byte.b	(WZONEHEIGHT-1)
   5599  f736					      REPEND
   5600  f737		       0f		      .byte.b	(WZONEHEIGHT-1)
   5599  f737					      REPEND
   5600  f738		       0f		      .byte.b	(WZONEHEIGHT-1)
   5599  f738					      REPEND
   5600  f739		       0f		      .byte.b	(WZONEHEIGHT-1)
   5599  f739					      REPEND
   5600  f73a		       0f		      .byte.b	(WZONEHEIGHT-1)
   5599  f73a					      REPEND
   5600  f73b		       0f		      .byte.b	(WZONEHEIGHT-1)
   5601  f73c					      REPEND
   5602  f73c
   5603  f73c							; Provided under the CC0 license. See the included LICENSE.txt for details.
   5604  f73c
   5605  f73c							; a simple guard, than ensures the 7800basic code hasn't
   5606  f73c							; spilled into the encryption area...
     2114 bytes left in the 7800basic reserved area.
   5607  f73c					      echo	"   ",($FF7E-*)d,"bytes left in the 7800basic reserved area."
   5608  f73c				  -	      if	(*>$FF7D)
   5609  f73c				  -	      ERR		; abort the assembly
   5610  f73c					      endif
   5611  f73c							; Provided under the CC0 license. See the included LICENSE.txt for details.
   5612  f73c
   5613  f73c				  -	      ifconst	DEV
   5614  f73c				  -	      ifnconst	ZONEHEIGHT
   5615  f73c				  -	      echo	"* the 4k 7800basic area has",[($FF7E - *)]d,"bytes free."
   5616  f73c				  -	      else
   5617  f73c				  -	      if	ZONEHEIGHT = 8
   5618  f73c				  -	      echo	"* the 4k 7800basic area has",[($FF7E - *)]d,"bytes free."
   5619  f73c				  -	      else
   5620  f73c				  -	      echo	"* the 4k 7800basic area has",[($FF7E - *)]d,"bytes free."
   5621  f73c				  -	      endif
   5622  f73c				  -	      endif
   5623  f73c					      endif
   5624  f73c
   5625  f73c							; FF7E/FF7F contains the 7800basic crc checksum word
   5626  f73c
   5627  f73c							; FF80 - FFF7 contains the 7800 encryption key 
   5628  f73c
   5629  f73c					      ifnconst	bankswitchmode
   5630  fff8					      ORG	$FFF8
   5631  fff8				  -	      else
   5632  fff8				  -	      ifconst	ROM128K
   5633  fff8				  -	      ORG	$27FF8
   5634  fff8				  -	      RORG	$FFF8
   5635  fff8				  -	      endif
   5636  fff8				  -	      ifconst	ROM144K
   5637  fff8				  -	      ORG	$27FF8
   5638  fff8				  -	      RORG	$FFF8
   5639  fff8				  -	      endif
   5640  fff8				  -	      ifconst	ROM256K
   5641  fff8				  -	      ORG	$47FF8
   5642  fff8				  -	      RORG	$FFF8
   5643  fff8				  -	      endif
   5644  fff8				  -	      ifconst	ROM272K
   5645  fff8				  -	      ORG	$47FF8
   5646  fff8				  -	      RORG	$FFF8
   5647  fff8				  -	      endif
   5648  fff8				  -	      ifconst	ROM512K
   5649  fff8				  -	      ORG	$87FF8
   5650  fff8				  -	      RORG	$FFF8
   5651  fff8				  -	      endif
   5652  fff8				  -	      ifconst	ROM528K
   5653  fff8				  -	      ORG	$87FF8
   5654  fff8				  -	      RORG	$FFF8
   5655  fff8				  -	      endif
   5656  fff8					      endif
   5657  fff8
   5658  fff8
   5659  fff8		       ff		      .byte.b	$FF	; region verification. $FF=all regions
   5660  fff9		       f7		      .byte.b	$F7	; high nibble:  encryption check from $N000 to $FF7F. we only hash the last 4k for faster boot.
   5661  fffa							; low nibble :  N=7 atari rainbow start, N=3 no atari rainbow
   5662  fffa
   5663  fffa							;Vectors
   5664  fffa		       00 f0		      .word.w	NMI
   5665  fffc		       5a f6		      .word.w	START
   5666  fffe		       5d f0		      .word.w	IRQ
   5667  10000
