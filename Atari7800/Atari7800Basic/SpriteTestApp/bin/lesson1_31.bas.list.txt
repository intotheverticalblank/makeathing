------- FILE c:\Users\Steve\Desktop\2018dev\7800\7800basic\projects\lessons\lesson1_gfx_modes\lesson1_31.bas.asm LEVEL 1 PASS 3
      1  10000 ????						; MACRO.H
      2  10000 ????
      3  10000 ????						; Based on the 2600 macro.h file.
      4  10000 ????						; Macros irrelevant to the 7800 have been removed, and the sleep macro 
      5  10000 ????						; has been adapted to give accurate results on the 7800.
      6  10000 ????
      7  10000 ????						; Version 1.0 2019/12/11 (based on the 2600 Version 1.05, 13/NOVEMBER/2003)
      8  10000 ????
      9  10000 ????						; Available macros...
     10  10000 ????						;   SLEEP n		 - sleep for n cycles
     11  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     12  10000 ????
     13  10000 ????						;-------------------------------------------------------------------------------
     14  10000 ????						; SLEEP duration
     15  10000 ????						; Original author: Thomas Jentzsch
     16  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     17  10000 ????						; useful for code where precise timing is required.
     18  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     19  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     20  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     21  10000 ????
     22  10000 ????				       MAC	sleep
     23  10000 ????			    .CYCLES    SET	{1}
     24  10000 ????
     25  10000 ????				       IF	.CYCLES < 2
     26  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     27  10000 ????				       ERR
     28  10000 ????				       ENDIF
     29  10000 ????
     30  10000 ????				       IF	.CYCLES & 1
     31  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     32  10000 ????				       nop	$80
     33  10000 ????				       ELSE
     34  10000 ????				       bit	$80
     35  10000 ????				       ENDIF
     36  10000 ????			    .CYCLES    SET	.CYCLES - 3
     37  10000 ????				       ENDIF
     38  10000 ????
     39  10000 ????				       REPEAT	.CYCLES / 2
     40  10000 ????				       nop
     41  10000 ????				       REPEND
     42  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     43  10000 ????
     44  10000 ????						;-------------------------------------------------------
     45  10000 ????						; SET_POINTER
     46  10000 ????						; Original author: Manuel Rotschkar
     47  10000 ????						;
     48  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
     49  10000 ????						;
     50  10000 ????						; Usage: SET_POINTER pointer, address
     51  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
     52  10000 ????						;
     53  10000 ????						; Note: Alters the accumulator, NZ flags
     54  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
     55  10000 ????						; IN 2: absolute address
     56  10000 ????
     57  10000 ????				       MAC	set_pointer
     58  10000 ????			    .POINTER   SET	{1}
     59  10000 ????			    .ADDRESS   SET	{2}
     60  10000 ????
     61  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
     62  10000 ????				       STA	.POINTER	; Store in pointer
     63  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
     64  10000 ????				       STA	.POINTER+1	; Store in pointer+1
     65  10000 ????
     66  10000 ????				       ENDM
     67  10000 ????
     68  10000 ????						; EOF
     69  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
     70  10000 ????
     71  10000 ????						; 7800MACRO.H
     72  10000 ????
     73  10000 ????						;-------------------------------------------------------
     74  10000 ????						; BOXCOLLISIONCHECK
     75  10000 ????						; author: Mike Saarna
     76  10000 ????						;
     77  10000 ????						; A general bounding box collision check. compares 2 rectangles of differing size
     78  10000 ????						; and shape for overlap. Carry is set for collision detected, clear for none.
     79  10000 ????						; 
     80  10000 ????						; Usage: BOXCOLLISIONCHECK x1var,y1var,w1var,h1var,x2var,y2var,w2var,h2var
     81  10000 ????						;
     82  10000 ????
     83  10000 ????				       MAC	boxcollisioncheck
     84  10000 ????			    .boxx1     SET	{1}
     85  10000 ????			    .boxy1     SET	{2}
     86  10000 ????			    .boxw1     SET	{3}
     87  10000 ????			    .boxh1     SET	{4}
     88  10000 ????			    .boxx2     SET	{5}
     89  10000 ????			    .boxy2     SET	{6}
     90  10000 ????			    .boxw2     SET	{7}
     91  10000 ????			    .boxh2     SET	{8}
     92  10000 ????
     93  10000 ????			    .DoXCollisionCheck
     94  10000 ????				       lda	.boxx1	;3
     95  10000 ????				       cmp	.boxx2	;2
     96  10000 ????				       bcs	.X1isbiggerthanX2	;2/3
     97  10000 ????			    .X2isbiggerthanX1
     98  10000 ????				       adc	#.boxw1	;2
     99  10000 ????				       cmp	.boxx2	;3
    100  10000 ????				       bcs	.DoYCollisionCheck	;3/2
    101  10000 ????				       bcc	.noboxcollision	;3
    102  10000 ????			    .X1isbiggerthanX2
    103  10000 ????				       clc		;2
    104  10000 ????				       sbc	#.boxw2	;2
    105  10000 ????				       cmp	.boxx2	;3
    106  10000 ????				       bcs	.noboxcollision	;3/2
    107  10000 ????			    .DoYCollisionCheck
    108  10000 ????				       lda	.boxy1	;3
    109  10000 ????				       cmp	.boxy2	;3
    110  10000 ????				       bcs	.Y1isbiggerthanY2	;3/2
    111  10000 ????			    .Y2isbiggerthanY1
    112  10000 ????				       adc	#.boxh1	;2
    113  10000 ????				       cmp	.boxy2	;3
    114  10000 ????				       jmp	.checkdone	;6 
    115  10000 ????			    .Y1isbiggerthanY2
    116  10000 ????				       clc		;2
    117  10000 ????				       sbc	#.boxh2	;2
    118  10000 ????				       cmp	.boxy2	;3
    119  10000 ????				       bcs	.noboxcollision	;3/2
    120  10000 ????			    .boxcollision
    121  10000 ????				       sec		;2
    122  10000 ????				       .byte	$24	; hardcoded "BIT [clc opcode]", used to skip over the following clc
    123  10000 ????			    .noboxcollision
    124  10000 ????				       clc		;2
    125  10000 ????			    .checkdone
    126  10000 ????
    127  10000 ????				       ENDM
    128  10000 ????
    129  10000 ????				       MAC	median3
    130  10000 ????
    131  10000 ????						; A median filter (for smoothing paddle jitter)
    132  10000 ????						;   this macro takes the current paddle value, compares it to historic
    133  10000 ????						;   values, and replaces the current paddle value with the median.
    134  10000 ????						; 
    135  10000 ????						; called as:  MEDIAN3 STORAGE CURRENT
    136  10000 ????						;    where STORAGE points to 3 consecutive bytes of memory. The first 2
    137  10000 ????						;	  must be dedicated to this MEDIAN filter. The last 1 is a temp.
    138  10000 ????						;    where CURRENT is memory holding the new value you wish to compare to
    139  10000 ????						;	  the previous values, and update with the median value.
    140  10000 ????						;
    141  10000 ????						; returns: CURRENT (modified to contain median value)
    142  10000 ????						;
    143  10000 ????						; author: Mike Saarna (aka RevEng)
    144  10000 ????
    145  10000 ????			    .MedianBytes SET	{1}
    146  10000 ????			    .NewValue  SET	{2}
    147  10000 ????
    148  10000 ????				       lda	#0
    149  10000 ????				       ldy	.NewValue
    150  10000 ????				       sty	.MedianBytes+2	; put the new value in the most "recent" slot
    151  10000 ????
    152  10000 ????						; build an index from relative size comparisons between our 3 values.
    153  10000 ????				       cpy	.MedianBytes
    154  10000 ????				       rol
    155  10000 ????				       cpy	.MedianBytes+1
    156  10000 ????				       rol
    157  10000 ????				       ldy	.MedianBytes
    158  10000 ????				       cpy	.MedianBytes+1
    159  10000 ????				       rol
    160  10000 ????				       tay
    161  10000 ????
    162  10000 ????				       ldx	MedianOrderLUT,y	; convert the size-comparison index to an index to the median value
    163  10000 ????				       lda	.MedianBytes,x
    164  10000 ????				       sta	.NewValue	; we replace the new value memory with the median value
    165  10000 ????
    166  10000 ????						; then shift values from "newer" bytes to "older" bytes, leaving the 
    167  10000 ????						; newest byte (.MedianBytes+2) empty for next time.
    168  10000 ????				       lda	.MedianBytes+1
    169  10000 ????				       sta	.MedianBytes
    170  10000 ????				       lda	.MedianBytes+2
    171  10000 ????				       sta	.MedianBytes+1
    172  10000 ????				       ifnconst	MedianOrderLUT
    173  10000 ????				       jmp	MedianOrderLUTend
    174  10000 ????			    MedianOrderLUT		; converts our "comparison index" to an index to the median value
    175  10000 ????				       .byte	0	; 0  B2 < B0 < B1
    176  10000 ????				       .byte	1	; 1  B2 < B1 < B0
    177  10000 ????				       .byte	2	; 2   impossible 
    178  10000 ????				       .byte	2	; 3  B1 < B2 < B0
    179  10000 ????				       .byte	2	; 4  B0 < B2 < B1
    180  10000 ????				       .byte	2	; 5   impossible 
    181  10000 ????				       .byte	1	; 6  B0 < B1 < B2
    182  10000 ????				       .byte	0	; 7  B1 < B0 < B2
    183  10000 ????			    MedianOrderLUTend
    184  10000 ????				       endif
    185  10000 ????				       ENDM
    186  10000 ????
    187  10000 ????						; EOF
    188  10000 ????						;
    189  10000 ????						; speakjet.inc
    190  10000 ????						;
    191  10000 ????						;
    192  10000 ????						; AtariVox Speech Synth Driver
    193  10000 ????						;
    194  10000 ????						; By Alex Herbert, 2004
    195  10000 ????						;
    196  10000 ????
    197  10000 ????
    198  10000 ????
    199  10000 ????
    200  10000 ????						; Constants
    201  10000 ????
    202  10000 ????
    203  10000 ????		00 01	    SERIAL_OUTMASK equ	$01
    204  10000 ????		00 02	    SERIAL_RDYMASK equ	$02
    205  10000 ????
    206  10000 ????
    207  10000 ????
    208  10000 ????						; Macros
    209  10000 ????
    210  10000 ????				       mac	spkout
    211  10000 ????
    212  10000 ????						; check buffer-full status
    213  10000 ????				       lda	SWCHA
    214  10000 ????				       and	#SERIAL_RDYMASK
    215  10000 ????				       beq	.speech_done
    216  10000 ????
    217  10000 ????						; get next speech byte
    218  10000 ????				       ldy	#$00
    219  10000 ????				       lda	(speech_addr),y
    220  10000 ????
    221  10000 ????						; invert data and check for end of string
    222  10000 ????				       eor	#$ff
    223  10000 ????						;sta BACKGRND ; debug - uncomment to flash the background color with vox data
    224  10000 ????				       beq	.speech_done
    225  10000 ????				       sta	{1}
    226  10000 ????
    227  10000 ????						; increment speech pointer
    228  10000 ????				       inc	speech_addr
    229  10000 ????				       bne	.incaddr_skip
    230  10000 ????				       inc	speech_addr+1
    231  10000 ????			    .incaddr_skip
    232  10000 ????
    233  10000 ????						; output byte as serial data
    234  10000 ????
    235  10000 ????				       sec		; start bit
    236  10000 ????			    .byteout_loop
    237  10000 ????						; put carry flag into bit 0 of SWACNT, perserving other bits
    238  10000 ????				       lda	SWACNT	; 4
    239  10000 ????				       and	#$fe	; 2 6
    240  10000 ????				       adc	#$00	; 2 8
    241  10000 ????				       sta	SWACNT	; 4 12
    242  10000 ????
    243  10000 ????						; 10 bits sent? (1 start bit, 8 data bits, 1 stop bit)
    244  10000 ????				       cpy	#$09	; 2 14
    245  10000 ????				       beq	.speech_done	; 2 16
    246  10000 ????				       iny		; 2 18
    247  10000 ????
    248  10000 ????						; the 7800 is 1.5x faster than the 2600. Waste more cycles here
    249  10000 ????						; to match the original baud rate...
    250  10000 ????						;ldx	  #$07 ; 2600
    251  10000 ????				       ldx	#$0D
    252  10000 ????
    253  10000 ????			    .delay_loop
    254  10000 ????				       dex		; 
    255  10000 ????				       bne	.delay_loop	; 36 54
    256  10000 ????
    257  10000 ????						; shift next data bit into carry
    258  10000 ????				       lsr	{1}	; 5 59
    259  10000 ????
    260  10000 ????						; and loop (branch always taken)
    261  10000 ????				       bpl	.byteout_loop	; 3 62 cycles for loop
    262  10000 ????
    263  10000 ????			    .speech_done
    264  10000 ????
    265  10000 ????				       endm
    266  10000 ????
    267  10000 ????
    268  10000 ????				       mac	speak
    269  10000 ????
    270  10000 ????				       lda	#<{1}
    271  10000 ????				       sta	speech_addr
    272  10000 ????				       lda	#>{1}
    273  10000 ????				       sta	speech_addr+1
    274  10000 ????
    275  10000 ????				       endm
    276  10000 ????
    277  10000 ????
    278  10000 ????
    279  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
    280  10000 ????
    281  10000 ????				       processor	6502
    282  10000 ????
------- FILE 7800basic.h LEVEL 2 PASS 3
      0  10000 ????				       include	"7800basic.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE 7800.h LEVEL 3 PASS 3
      0  10000 ????				       include	"7800.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; 7800.h
      4  10000 ????						; Version 1.0, 2019/12/13
      5  10000 ????
      6  10000 ????						; This file defines hardware registers and memory mapping for the
      7  10000 ????						; Atari 7800. It is distributed as a companion machine-specific support package
      8  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
      9  10000 ????						; available at https://github.com/dasm-assembler/dasm
     10  10000 ????
     11  10000 ????
     12  10000 ????						; ******************** 7800 Hardware Adresses ***************************
     13  10000 ????						;
     14  10000 ????						;	 MEMORY MAP USAGE OF THE 7800
     15  10000 ????						;
     16  10000 ????						;	  00 -   1F	TIA REGISTERS
     17  10000 ????						;	  20 -   3F	MARIA REGISTERS
     18  10000 ????						;	  40 -   FF	RAM block 0 (zero page)
     19  10000 ????						;	 100 -  11F	TIA   (mirror of 0000-001f)
     20  10000 ????						;	 120 -  13F	MARIA (mirror of 0020-003f)
     21  10000 ????						;	 140 -  1FF	RAM block 1 (stack)
     22  10000 ????						;	 200 -  21F	TIA   (mirror of 0000-001f)
     23  10000 ????						;	 220 -  23F	MARIA (mirror of 0020-003f)
     24  10000 ????						;	 240 -  27F	???
     25  10000 ????						;	 280 -  2FF	RIOT I/O ports and timers
     26  10000 ????						;	 300 -  31F	TIA   (mirror of 0000-001f)
     27  10000 ????						;	 320 -  33F	MARIA (mirror of 0020-003f)
     28  10000 ????						;	 340 -  3FF	???
     29  10000 ????						;	 400 -  47F	unused address space
     30  10000 ????						;	 480 -  4FF	RIOT RAM
     31  10000 ????						;	 500 -  57F	unused address space
     32  10000 ????						;	 580 -  5FF	RIOT RAM (mirror of 0480-04ff)
     33  10000 ????						;	 600 - 17FF	unused address space
     34  10000 ????						;	1800 - 203F	RAM
     35  10000 ????						;	2040 - 20FF	RAM block 0 (mirror of 0000-001f)
     36  10000 ????						;	2100 - 213F	RAM
     37  10000 ????						;	2140 - 21FF	RAM block 1 (mirror of 0140-01ff)
     38  10000 ????						;	2200 - 27FF	RAM
     39  10000 ????						;	2800 - 2FFF	mirror of 1800-27ff
     40  10000 ????						;	3000 - 3FFF	unused address space
     41  10000 ????						;	4000 - FF7F	potential cartridge address space
     42  10000 ????						;	FF80 - FFF9	RESERVED FOR ENCRYPTION
     43  10000 ????						;	FFFA - FFFF	6502 VECTORS
     44  10000 ????
     45  10000 ????
     46  10000 ????						;****** 00-1F ********* TIA REGISTERS ******************
     47  10000 ????
     48  10000 ????		00 01	    INPTCTRL   =	$01	;Input control. In same address space as TIA. write-only
     49  10000 ????		00 01	    VBLANK     =	$01	;VBLANK. D7=1:dump paddle caps to ground.     write-only
     50  10000 ????		00 08	    INPT0      =	$08	;Paddle Control Input 0		       read-only
     51  10000 ????		00 09	    INPT1      =	$09	;Paddle Control Input 1		       read-only
     52  10000 ????		00 0a	    INPT2      =	$0A	;Paddle Control Input 2		       read-only
     53  10000 ????		00 0b	    INPT3      =	$0B	;Paddle Control Input 3		       read-only
     54  10000 ????
     55  10000 ????						; ** some common alternate names for INPT0/1/2/3
     56  10000 ????		00 08	    INPT4B     =	$08	;Joystick 0 Fire 1			       read-only
     57  10000 ????		00 09	    INPT4A     =	$09	;Joystick 0 Fire 1			       read-only
     58  10000 ????		00 0a	    INPT5B     =	$0A	;Joystick 1 Fire 0			       read-only
     59  10000 ????		00 0b	    INPT5A     =	$0B	;Joystick 1 Fire 1			       read-only
     60  10000 ????		00 08	    INPT4R     =	$08	;Joystick 0 Fire 1			       read-only
     61  10000 ????		00 09	    INPT4L     =	$09	;Joystick 0 Fire 1			       read-only
     62  10000 ????		00 0a	    INPT5R     =	$0A	;Joystick 1 Fire 0			       read-only
     63  10000 ????		00 0b	    INPT5L     =	$0B	;Joystick 1 Fire 1			       read-only
     64  10000 ????
     65  10000 ????		00 0c	    INPT4      =	$0C	;Player 0 Fire Button Input		       read-only
     66  10000 ????		00 0d	    INPT5      =	$0D	;Player 1 Fire Button Input		       read-only
     67  10000 ????
     68  10000 ????		00 15	    AUDC0      =	$15	;Audio Control Channel   0		       write-only
     69  10000 ????		00 16	    AUDC1      =	$16	;Audio Control Channel   1		       write-only
     70  10000 ????		00 17	    AUDF0      =	$17	;Audio Frequency Channel 0		       write-only
     71  10000 ????		00 18	    AUDF1      =	$18	;Audio Frequency Channel 1		       write-only
     72  10000 ????		00 19	    AUDV0      =	$19	;Audio Volume Channel	  0		       write-only
     73  10000 ????		00 1a	    AUDV1      =	$1A	;Audio Volume Channel	  1		       write-only
     74  10000 ????
     75  10000 ????						;****** 20-3F ********* MARIA REGISTERS ***************
     76  10000 ????
     77  10000 ????		00 20	    BACKGRND   =	$20	;Background Color			       write-only
     78  10000 ????		00 21	    P0C1       =	$21	;Palette 0 - Color 1			       write-only
     79  10000 ????		00 22	    P0C2       =	$22	;Palette 0 - Color 2			       write-only
     80  10000 ????		00 23	    P0C3       =	$23	;Palette 0 - Color 3			       write-only
     81  10000 ????		00 24	    WSYNC      =	$24	;Wait For Sync 			       write-only
     82  10000 ????		00 25	    P1C1       =	$25	;Palette 1 - Color 1			       write-only
     83  10000 ????		00 26	    P1C2       =	$26	;Palette 1 - Color 2			       write-only
     84  10000 ????		00 27	    P1C3       =	$27	;Palette 1 - Color 3			       write-only
     85  10000 ????		00 28	    MSTAT      =	$28	;Maria Status				       read-only
     86  10000 ????		00 29	    P2C1       =	$29	;Palette 2 - Color 1			       write-only
     87  10000 ????		00 2a	    P2C2       =	$2A	;Palette 2 - Color 2			       write-only
     88  10000 ????		00 2b	    P2C3       =	$2B	;Palette 2 - Color 3			       write-only
     89  10000 ????		00 2c	    DPPH       =	$2C	;Display List List Pointer High	       write-only
     90  10000 ????		00 2d	    P3C1       =	$2D	;Palette 3 - Color 1			       write-only
     91  10000 ????		00 2e	    P3C2       =	$2E	;Palette 3 - Color 2			       write-only
     92  10000 ????		00 2f	    P3C3       =	$2F	;Palette 3 - Color 3			       write-only
     93  10000 ????		00 30	    DPPL       =	$30	;Display List List Pointer Low 	       write-only
     94  10000 ????		00 31	    P4C1       =	$31	;Palette 4 - Color 1			       write-only
     95  10000 ????		00 32	    P4C2       =	$32	;Palette 4 - Color 2			       write-only
     96  10000 ????		00 33	    P4C3       =	$33	;Palette 4 - Color 3			       write-only
     97  10000 ????		00 34	    CHARBASE   =	$34	;Character Base Address		       write-only
     98  10000 ????		00 34	    CHBASE     =	$34	;Character Base Address		       write-only
     99  10000 ????		00 35	    P5C1       =	$35	;Palette 5 - Color 1			       write-only
    100  10000 ????		00 36	    P5C2       =	$36	;Palette 5 - Color 2			       write-only
    101  10000 ????		00 37	    P5C3       =	$37	;Palette 5 - Color 3			       write-only
    102  10000 ????		00 38	    OFFSET     =	$38	;Unused - Store zero here		       write-only
    103  10000 ????		00 39	    P6C1       =	$39	;Palette 6 - Color 1			       write-only
    104  10000 ????		00 3a	    P6C2       =	$3A	;Palette 6 - Color 2			       write-only
    105  10000 ????		00 3b	    P6C3       =	$3B	;Palette 6 - Color 3			       write-only
    106  10000 ????		00 3c	    CTRL       =	$3C	;Maria Control Register		       write-only
    107  10000 ????		00 3d	    P7C1       =	$3D	;Palette 7 - Color 1			       write-only
    108  10000 ????		00 3e	    P7C2       =	$3E	;Palette 7 - Color 2			       write-only
    109  10000 ????		00 3f	    P7C3       =	$3F	;Palette 7 - Color 3			       write-only
    110  10000 ????
    111  10000 ????
    112  10000 ????						;****** 280-2FF ******* PIA PORTS AND TIMERS ************
    113  10000 ????
    114  10000 ????		02 80	    SWCHA      =	$280	;P0+P1 Joystick Directional Input	       read-write
    115  10000 ????		02 81	    CTLSWA     =	$281	;I/O Control for SCHWA 		       read-write
    116  10000 ????		02 81	    SWACNT     =	$281	;VCS name for above			       read-write
    117  10000 ????		02 82	    SWCHB      =	$282	;Console Switches			       read-write
    118  10000 ????		02 83	    CTLSWB     =	$283	;I/O Control for SCHWB 		       read-write
    119  10000 ????		02 83	    SWBCNT     =	$283	;VCS name for above			       read-write
    120  10000 ????
    121  10000 ????		02 84	    INTIM      =	$284	;Iterval Timer Read			       read-only
    122  10000 ????		02 94	    TIM1T      =	$294	;Set 1    CLK Interval (838   nsec/interval)  write-only
    123  10000 ????		02 95	    TIM8T      =	$295	;Set 8    CLK Interval (6.7   usec/interval)  write-only
    124  10000 ????		02 96	    TIM64T     =	$296	;Set 64   CLK Interval (63.6  usec/interval)  write-only
    125  10000 ????		02 97	    T1024T     =	$297	;Set 1024 CLK Interval (858.2 usec/interval)  write-only
    126  10000 ????		02 9e	    TIM64TI    =	$29E	;Interrupt timer 64T			       write-only
    127  10000 ????
    128  10000 ????						;XM
    129  10000 ????		04 70	    XCTRL      =	$470	; 7=YM2151 6=RAM@6k 5=RAM@4k 4=pokey@450 3=hsc 2=cart 1=RoF_bank1 0=RoF_bank2
    130  10000 ????		04 70	    XCTRL1     =	$470
    131  10000 ????		04 78	    XCTRL2     =	$478
    132  10000 ????		04 7c	    XCTRL3     =	$47c
    133  10000 ????		04 71	    XCTRL4     =	$471
    134  10000 ????		04 72	    XCTRL5     =	$472
    135  10000 ????
    136  10000 ????						; Pokey register relative locations, since its base may be different
    137  10000 ????						; depending on the hardware.
    138  10000 ????		00 00	    PAUDF0     =	$0	; extra audio channels and frequencies
    139  10000 ????		00 01	    PAUDC0     =	$1
    140  10000 ????		00 02	    PAUDF1     =	$2
    141  10000 ????		00 03	    PAUDC1     =	$3
    142  10000 ????		00 04	    PAUDF2     =	$4
    143  10000 ????		00 05	    PAUDC2     =	$5
    144  10000 ????		00 06	    PAUDF3     =	$6
    145  10000 ????		00 07	    PAUDC3     =	$7
    146  10000 ????		00 08	    PAUDCTL    =	$8	; Audio Control
    147  10000 ????		00 0a	    PRANDOM    =	$A	; 17 bit polycounter pseudo random
    148  10000 ????		00 0f	    PSKCTL     =	$F	; Serial Port control
------- FILE 7800basic.h
------- FILE 7800basic_variable_redefs.h LEVEL 3 PASS 3
      0  10000 ????				       include	"7800basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 00	    font_mode  =	$00
      4  10000 ????		00 0b	    font_width_twoscompliment =	$0b
      5  10000 ????		00 35	    font_width =	$35
      6  10000 ????		00 00	    zonebg80x16_8_tallsprite_00_mode =	$00
      7  10000 ????		00 0c	    zonebg80x16_8_tallsprite_00_width_twoscompliment =	$0c
      8  10000 ????		00 14	    zonebg80x16_8_tallsprite_00_width =	$14
      9  10000 ????		00 00	    zonebg80x16_8_mode =	$00
     10  10000 ????		00 0c	    zonebg80x16_8_width_twoscompliment =	$0c
     11  10000 ????		00 14	    zonebg80x16_8_width =	$14
     12  10000 ????		00 00	    g8x8_4color8_mode =	$00
     13  10000 ????		00 1e	    g8x8_4color8_width_twoscompliment =	$1e
     14  10000 ????		00 02	    g8x8_4color8_width =	$02
     15  10000 ????		00 00	    g8x8_4color7_mode =	$00
     16  10000 ????		00 1e	    g8x8_4color7_width_twoscompliment =	$1e
     17  10000 ????		00 02	    g8x8_4color7_width =	$02
     18  10000 ????		00 00	    g8x8_4color6_mode =	$00
     19  10000 ????		00 1e	    g8x8_4color6_width_twoscompliment =	$1e
     20  10000 ????		00 02	    g8x8_4color6_width =	$02
     21  10000 ????		00 00	    g8x8_4color5_mode =	$00
     22  10000 ????		00 1e	    g8x8_4color5_width_twoscompliment =	$1e
     23  10000 ????		00 02	    g8x8_4color5_width =	$02
     24  10000 ????		00 00	    g8x8_4color4_mode =	$00
     25  10000 ????		00 1e	    g8x8_4color4_width_twoscompliment =	$1e
     26  10000 ????		00 02	    g8x8_4color4_width =	$02
     27  10000 ????		00 00	    g8x8_4color3_mode =	$00
     28  10000 ????		00 1e	    g8x8_4color3_width_twoscompliment =	$1e
     29  10000 ????		00 02	    g8x8_4color3_width =	$02
     30  10000 ????		00 00	    g8x8_4color2_mode =	$00
     31  10000 ????		00 1e	    g8x8_4color2_width_twoscompliment =	$1e
     32  10000 ????		00 02	    g8x8_4color2_width =	$02
     33  10000 ????		00 00	    g8x8_4color_mode =	$00
     34  10000 ????		00 1e	    g8x8_4color_width_twoscompliment =	$1e
     35  10000 ????		00 02	    g8x8_4color_width =	$02
     36  10000 ????		00 01	    DOUBLEBUFFER =	1
     37  10000 ????		01 43	    an	       =	var3
     38  10000 ????
     39  10000 ????		01 42	    db	       =	var2
     40  10000 ????
     41  10000 ????		01 41	    bg	       =	var1
     42  10000 ????
     43  10000 ????		00 0f	    font_color1 =	$0f
     44  10000 ????		00 00	    font_color0 =	$00
     45  10000 ????		00 08	    zonebg80x16_8_tallsprite_00_color1 =	$08
     46  10000 ????		00 00	    zonebg80x16_8_tallsprite_00_color0 =	$00
     47  10000 ????		00 08	    zonebg80x16_8_color1 =	$08
     48  10000 ????		00 00	    zonebg80x16_8_color0 =	$00
     49  10000 ????		00 91	    g8x8_4color8_color3 =	$91
     50  10000 ????		00 a8	    g8x8_4color8_color2 =	$a8
     51  10000 ????		00 91	    g8x8_4color8_color1 =	$91
     52  10000 ????		00 00	    g8x8_4color8_color0 =	$00
     53  10000 ????		00 91	    g8x8_4color7_color3 =	$91
     54  10000 ????		00 a8	    g8x8_4color7_color2 =	$a8
     55  10000 ????		00 91	    g8x8_4color7_color1 =	$91
     56  10000 ????		00 00	    g8x8_4color7_color0 =	$00
     57  10000 ????		00 91	    g8x8_4color6_color3 =	$91
     58  10000 ????		00 a8	    g8x8_4color6_color2 =	$a8
     59  10000 ????		00 91	    g8x8_4color6_color1 =	$91
     60  10000 ????		00 00	    g8x8_4color6_color0 =	$00
     61  10000 ????		00 91	    g8x8_4color5_color3 =	$91
     62  10000 ????		00 a8	    g8x8_4color5_color2 =	$a8
     63  10000 ????		00 91	    g8x8_4color5_color1 =	$91
     64  10000 ????		00 00	    g8x8_4color5_color0 =	$00
     65  10000 ????		00 91	    g8x8_4color4_color3 =	$91
     66  10000 ????		00 a8	    g8x8_4color4_color2 =	$a8
     67  10000 ????		00 91	    g8x8_4color4_color1 =	$91
     68  10000 ????		00 00	    g8x8_4color4_color0 =	$00
     69  10000 ????		00 91	    g8x8_4color3_color3 =	$91
     70  10000 ????		00 a8	    g8x8_4color3_color2 =	$a8
     71  10000 ????		00 91	    g8x8_4color3_color1 =	$91
     72  10000 ????		00 00	    g8x8_4color3_color0 =	$00
     73  10000 ????		00 91	    g8x8_4color2_color3 =	$91
     74  10000 ????		00 a8	    g8x8_4color2_color2 =	$a8
     75  10000 ????		00 91	    g8x8_4color2_color1 =	$91
     76  10000 ????		00 00	    g8x8_4color2_color0 =	$00
     77  10000 ????		00 91	    g8x8_4color_color3 =	$91
     78  10000 ????		00 a8	    g8x8_4color_color2 =	$a8
     79  10000 ????		00 91	    g8x8_4color_color1 =	$91
     80  10000 ????		00 00	    g8x8_4color_color0 =	$00
     81  10000 ????		00 01	    ROM48K     =	1
     82  10000 ????		00 01	    plotvalueonscreen =	1
     83  10000 ????		00 08	    ZONEHEIGHT =	8
------- FILE 7800basic.h
      6  10000 ????
      7  10000 ????						;************ 7800 overall RAM map **************
      8  10000 ????
      9  10000 ????						;	   40-FF	 zero page RAM
     10  10000 ????						;	  140-1FF	 RAM (stack)
     11  10000 ????						;	 1800-203F	 RAM
     12  10000 ????						;	 2100-213F	 RAM
     13  10000 ????						;	 2200-27FF	 RAM
     14  10000 ????
     15  10000 ????						;************ 7800basic RAM usage map **************
     16  10000 ????
     17  10000 ????						;	   40-FF	 numerous defines, listed below
     18  10000 ????						;	  140-1FF	 RAM (stack)
     19  10000 ????
     20  10000 ????						;	 1800-187F	 DLL  (1800-18DF with page flipping enabled)
     21  10000 ????						;	 1880-1FFF	 DLs  (18E0-1FFF with page flipping enabled)
     22  10000 ????
     23  10000 ????						;	 2000-203F	 Reserved
     24  10000 ????						;	 2100-213F	 Reserved
     25  10000 ????						;	 2200-27FF	 Free
     26  10000 ????
     27  10000 ????		1f e0	    eeprombuffer =	$1FE0
     28  10000 ????		18 00	    DLLMEM     =	$1800
     29  10000 ????		00 70	    DBOFFSET   =	$70	; $E0 length DL is /2 for double-buffering
     30  10000 ????
     31  10000 ????			   -	       ifconst	PLOTVALUEPAGE
     32  10000 ????			   -VALBUFFER  =	(PLOTVALUEPAGE*256)
     33  10000 ????				       else
     34  10000 ????		20 00	    VALBUFFER  =	$2000	; to $203F  ** never let VALBUFFER straddle pages
     35  10000 ????				       endif
     36  10000 ????
     37  10000 ????
     38  10000 ????		21 00	    pausestate =	$2100
     39  10000 ????		21 01	    dlzero     =	$2101	; zero to force end of $2100 DL, which we use in vblank and overscan
     40  10000 ????		21 02	    sINPT1     =	$2102	; save register for joy button joy0
     41  10000 ????		21 03	    sINPT3     =	$2103	; save register for joy button joy1
     42  10000 ????		21 04	    currentbank =	$2104
     43  10000 ????
     44  10000 ????		21 05	    currentrambank =	$2105
     45  10000 ????		21 06	    charactermode =	$2106
     46  10000 ????		21 07	    sCTRL      =	$2107
     47  10000 ????		21 08	    pokeydetected =	$2108
     48  10000 ????		21 09	    paldetected =	$2109
     49  10000 ????		21 0a	    avoxdetected =	$210A
     50  10000 ????		21 0b	    sCHARBASE  =	$210B	; save register for CHARBASE
     51  10000 ????
     52  10000 ????		21 0c	    hsdevice   =	$210C
     53  10000 ????		21 0d	    hsdifficulty =	$210D
     54  10000 ????		21 0e	    hserror    =	$210E
     55  10000 ????		21 0f	    hsgameslot =	$210F
     56  10000 ????		21 10	    hsnewscoreline =	$2110
     57  10000 ????		21 11	    hsnewscorerank =	$2111
     58  10000 ????		21 12	    HSRAMTable =	$2112	; to $212F (30 bytes) Format: III*5, SSS*5
     59  10000 ????		21 12	    HSRAMInitials =	$2112	; see above
     60  10000 ????		21 21	    HSRAMScores =	$2121	; see above
     61  10000 ????
     62  10000 ????		21 31	    ssCTRL     =	$2131
     63  10000 ????		21 32	    ssCHARBASE =	$2132
     64  10000 ????		21 33	    hsdisplaymode =	$2133
     65  10000 ????		21 34	    gamedifficulty =	$2134
     66  10000 ????		21 35	    hsinitialpos =	$2135
     67  10000 ????		21 36	    hsinitialhold =	$2136
     68  10000 ????		21 37	    hscursorx  =	$2137
     69  10000 ????		21 38	    hsjoydebounce =	$2138
     70  10000 ????		21 39	    hsswcha    =	$2139
     71  10000 ????		21 3a	    hsinpt1    =	$213A
     72  10000 ????		21 3b	    hscolorchaseindex =	$213B
     73  10000 ????		21 3c	    visibleDLLstart =	$213C
     74  10000 ????		21 3d	    overscanDLLstart =	$213D
     75  10000 ????		21 3e	    frameslost =	$213E
     76  10000 ????
     77  10000 ????
     78  10000 ????		00 40	    rand       =	$40
     79  10000 ????		00 41	    rand16     =	$41
     80  10000 ????		00 42	    temp1      =	$42
     81  10000 ????		00 43	    temp2      =	$43
     82  10000 ????		00 44	    temp3      =	$44
     83  10000 ????		00 45	    temp4      =	$45
     84  10000 ????		00 46	    temp5      =	$46
     85  10000 ????		00 47	    temp6      =	$47
     86  10000 ????		00 48	    temp7      =	$48
     87  10000 ????		00 49	    temp8      =	$49
     88  10000 ????		00 4a	    temp9      =	$4a
     89  10000 ????
     90  10000 ????		00 4b	    pokeybase  =	$4b
     91  10000 ????		00 4b	    pokeybaselo =	$4b
     92  10000 ????		00 4c	    pokeybasehi =	$4c
     93  10000 ????
     94  10000 ????		00 4d	    visibleover =	$4d
     95  10000 ????
     96  10000 ????		00 4e	    sfx1pointlo =	$4e
     97  10000 ????		00 4f	    sfx2pointlo =	$4f
     98  10000 ????		00 50	    sfx1pointhi =	$50
     99  10000 ????		00 51	    sfx2pointhi =	$51
    100  10000 ????
    101  10000 ????		00 52	    sfx1priority =	$52
    102  10000 ????		00 53	    sfx2priority =	$53
    103  10000 ????		00 54	    sfx1poffset =	$54
    104  10000 ????		00 55	    sfx2poffset =	$55
    105  10000 ????
    106  10000 ????		00 56	    sfx1frames =	$56
    107  10000 ????		00 57	    sfx2frames =	$57
    108  10000 ????		00 58	    sfx1tick   =	$58
    109  10000 ????		00 59	    sfx2tick   =	$59
    110  10000 ????
    111  10000 ????		00 5a	    tempmath   =	$5a
    112  10000 ????
    113  10000 ????		00 5b	    pokey1pointlo =	$5b
    114  10000 ????		00 5c	    pokey1pointhi =	$5c
    115  10000 ????		00 5d	    pokey2pointlo =	$5d
    116  10000 ????		00 5e	    pokey2pointhi =	$5e
    117  10000 ????		00 5f	    pokey3pointlo =	$5f
    118  10000 ????		00 60	    pokey3pointhi =	$60
    119  10000 ????		00 61	    pokey4pointlo =	$61
    120  10000 ????		00 62	    pokey4pointhi =	$62
    121  10000 ????
    122  10000 ????		00 63	    dlpnt      =	$63	; to $64
    123  10000 ????		00 65	    dlend      =	$65	; to $81 - for 28 possible visible dll entries
    124  10000 ????		00 82	    dlendsave  =	$82	; to $9e - for 28 possible visible dll entries
    125  10000 ????
    126  10000 ????		00 9f	    speech_addr =	$9f
    127  10000 ????		00 a0	    speech_addr_hi =	$a0
    128  10000 ????
    129  10000 ????		00 a1	    HSGameTableLo =	$a1
    130  10000 ????		00 a2	    HSGameTableHi =	$a2
    131  10000 ????		00 a3	    HSVoxHi    =	$a3
    132  10000 ????		00 a4	    HSVoxLo    =	$a4
    133  10000 ????
    134  10000 ????						;channel pointers
    135  10000 ????
    136  10000 ????		00 a5	    songchannel1layer1lo =	$a5
    137  10000 ????		00 a6	    songchannel2layer1lo =	$a6
    138  10000 ????		00 a7	    songchannel3layer1lo =	$a7
    139  10000 ????		00 a8	    songchannel4layer1lo =	$a8
    140  10000 ????
    141  10000 ????		00 a9	    songchannel1layer2lo =	$a9
    142  10000 ????		00 aa	    songchannel2layer2lo =	$aA
    143  10000 ????		00 ab	    songchannel3layer2lo =	$aB
    144  10000 ????		00 ac	    songchannel4layer2lo =	$aC
    145  10000 ????
    146  10000 ????		00 ad	    songchannel1layer3lo =	$aD
    147  10000 ????		00 ae	    songchannel2layer3lo =	$aE
    148  10000 ????		00 af	    songchannel3layer3lo =	$aF
    149  10000 ????		00 b0	    songchannel4layer3lo =	$b0
    150  10000 ????
    151  10000 ????		00 b1	    songchannel1layer1hi =	$b1
    152  10000 ????		00 b2	    songchannel2layer1hi =	$b2
    153  10000 ????		00 b3	    songchannel3layer1hi =	$b3
    154  10000 ????		00 b4	    songchannel4layer1hi =	$b4
    155  10000 ????
    156  10000 ????		00 b5	    songchannel1layer2hi =	$b5
    157  10000 ????		00 b6	    songchannel2layer2hi =	$b6
    158  10000 ????		00 b7	    songchannel3layer2hi =	$b7
    159  10000 ????		00 b8	    songchannel4layer2hi =	$b8
    160  10000 ????
    161  10000 ????		00 b9	    songchannel1layer3hi =	$b9
    162  10000 ????		00 ba	    songchannel2layer3hi =	$bA
    163  10000 ????		00 bb	    songchannel3layer3hi =	$bB
    164  10000 ????		00 bc	    songchannel4layer3hi =	$bC
    165  10000 ????
    166  10000 ????		00 bd	    songdatalo =	$bd
    167  10000 ????		00 be	    songdatahi =	$be
    168  10000 ????
    169  10000 ????		00 bf	    inactivechannelcount =	$bf
    170  10000 ????
    171  10000 ????
    172  10000 ????		00 c0	    songchannel1transpose =	$c0
    173  10000 ????		00 c1	    songchannel2transpose =	$c1
    174  10000 ????		00 c2	    songchannel3transpose =	$c2
    175  10000 ????		00 c3	    songchannel4transpose =	$c3
    176  10000 ????
    177  10000 ????		00 c4	    songstackindex =	$c4
    178  10000 ????
    179  10000 ????		00 c5	    songchannel1instrumentlo =	$c5
    180  10000 ????		00 c6	    songchannel2instrumentlo =	$c6
    181  10000 ????		00 c7	    songchannel3instrumentlo =	$c7
    182  10000 ????		00 c8	    songchannel4instrumentlo =	$c8
    183  10000 ????
    184  10000 ????		00 c9	    songchannel1instrumenthi =	$c9
    185  10000 ????		00 ca	    songchannel2instrumenthi =	$ca
    186  10000 ????		00 cb	    songchannel3instrumenthi =	$cb
    187  10000 ????		00 cc	    songchannel4instrumenthi =	$cc
    188  10000 ????
    189  10000 ????		00 cd	    sfx1notedata =	$cd
    190  10000 ????		00 ce	    sfx2notedata =	$ce
    191  10000 ????
    192  10000 ????		00 cf	    songloops  =	$cf
    193  10000 ????
    194  10000 ????		00 d0	    songpointerlo =	$D0
    195  10000 ????		00 d1	    songpointerhi =	$D1
    196  10000 ????
    197  10000 ????		00 d2	    voxlock    =	$D2
    198  10000 ????		00 d3	    voxqueuesize =	$D3
    199  10000 ????
    200  10000 ????		00 d4	    vblankroutines =	$D4
    201  10000 ????
    202  10000 ????		00 d5	    doublebufferstate =	$D5
    203  10000 ????		00 d6	    doublebufferdloffset =	$D6
    204  10000 ????		00 d7	    doublebufferbufferdirty =	$D7
    205  10000 ????
    206  10000 ????		00 d8	    inttemp1   =	$D8
    207  10000 ????		00 d9	    inttemp2   =	$D9
    208  10000 ????		00 da	    inttemp3   =	$DA
    209  10000 ????		00 db	    inttemp4   =	$DB
    210  10000 ????		00 dc	    inttemp5   =	$DC
    211  10000 ????		00 dd	    inttemp6   =	$DD
    212  10000 ????
    213  10000 ????		00 de	    sfxschedulelock =	$DE
    214  10000 ????		00 df	    sfxschedulemissed =	$DF
    215  10000 ????		00 e0	    sfxinstrumentlo =	$E0
    216  10000 ????		00 e1	    sfxinstrumenthi =	$E1
    217  10000 ????		00 e2	    sfxpitchoffset =	$E2
    218  10000 ????		00 e3	    sfxnoteindex =	$E3
    219  10000 ????
    220  10000 ????		00 e4	    CTLSWAs    =	$E4
    221  10000 ????		00 e5	    CTLSWBs    =	$E5
    222  10000 ????
    223  10000 ????		00 e6	    A	       =	$e6
    224  10000 ????		00 e6	    a	       =	$e6
    225  10000 ????		00 e7	    B	       =	$e7
    226  10000 ????		00 e7	    b	       =	$e7
    227  10000 ????		00 e8	    C	       =	$e8
    228  10000 ????		00 e8	    c	       =	$e8
    229  10000 ????		00 e9	    D	       =	$e9
    230  10000 ????		00 e9	    d	       =	$e9
    231  10000 ????		00 ea	    E	       =	$ea
    232  10000 ????		00 ea	    e	       =	$ea
    233  10000 ????		00 eb	    F	       =	$eb
    234  10000 ????		00 eb	    f	       =	$eb
    235  10000 ????		00 ec	    G	       =	$ec
    236  10000 ????		00 ec	    g	       =	$ec
    237  10000 ????		00 ed	    H	       =	$ed
    238  10000 ????		00 ed	    h	       =	$ed
    239  10000 ????		00 ee	    I	       =	$ee
    240  10000 ????		00 ee	    i	       =	$ee
    241  10000 ????		00 ef	    J	       =	$ef
    242  10000 ????		00 ef	    j	       =	$ef
    243  10000 ????		00 f0	    K	       =	$f0
    244  10000 ????		00 f0	    k	       =	$f0
    245  10000 ????		00 f1	    L	       =	$f1
    246  10000 ????		00 f1	    l	       =	$f1
    247  10000 ????		00 f2	    M	       =	$f2
    248  10000 ????		00 f2	    m	       =	$f2
    249  10000 ????		00 f3	    N	       =	$f3
    250  10000 ????		00 f3	    n	       =	$f3
    251  10000 ????		00 f4	    O	       =	$f4
    252  10000 ????		00 f4	    o	       =	$f4
    253  10000 ????		00 f5	    P	       =	$f5
    254  10000 ????		00 f5	    p	       =	$f5
    255  10000 ????		00 f6	    Q	       =	$f6
    256  10000 ????		00 f6	    q	       =	$f6
    257  10000 ????		00 f7	    R	       =	$f7
    258  10000 ????		00 f7	    r	       =	$f7
    259  10000 ????		00 f8	    S	       =	$f8
    260  10000 ????		00 f8	    s	       =	$f8
    261  10000 ????		00 f9	    T	       =	$f9
    262  10000 ????		00 f9	    t	       =	$f9
    263  10000 ????		00 fa	    U	       =	$fa
    264  10000 ????		00 fa	    u	       =	$fa
    265  10000 ????		00 fb	    V	       =	$fb
    266  10000 ????		00 fb	    v	       =	$fb
    267  10000 ????		00 fc	    W	       =	$fc
    268  10000 ????		00 fc	    w	       =	$fc
    269  10000 ????		00 fd	    X	       =	$fd
    270  10000 ????		00 fd	    x	       =	$fd
    271  10000 ????		00 fe	    Y	       =	$fe
    272  10000 ????		00 fe	    y	       =	$fe
    273  10000 ????		00 ff	    Z	       =	$ff
    274  10000 ????		00 ff	    z	       =	$ff
    275  10000 ????
    276  10000 ????						; var0-var99 variables use the top of the stack
    277  10000 ????		01 40	    var0       =	$140
    278  10000 ????		01 41	    var1       =	$141
    279  10000 ????		01 42	    var2       =	$142
    280  10000 ????		01 43	    var3       =	$143
    281  10000 ????		01 44	    var4       =	$144
    282  10000 ????		01 45	    var5       =	$145
    283  10000 ????		01 46	    var6       =	$146
    284  10000 ????		01 47	    var7       =	$147
    285  10000 ????		01 48	    var8       =	$148
    286  10000 ????		01 49	    var9       =	$149
    287  10000 ????		01 4a	    var10      =	$14a
    288  10000 ????		01 4b	    var11      =	$14b
    289  10000 ????		01 4c	    var12      =	$14c
    290  10000 ????		01 4d	    var13      =	$14d
    291  10000 ????		01 4e	    var14      =	$14e
    292  10000 ????		01 4f	    var15      =	$14f
    293  10000 ????		01 50	    var16      =	$150
    294  10000 ????		01 51	    var17      =	$151
    295  10000 ????		01 52	    var18      =	$152
    296  10000 ????		01 53	    var19      =	$153
    297  10000 ????		01 54	    var20      =	$154
    298  10000 ????		01 55	    var21      =	$155
    299  10000 ????		01 56	    var22      =	$156
    300  10000 ????		01 57	    var23      =	$157
    301  10000 ????		01 58	    var24      =	$158
    302  10000 ????		01 59	    var25      =	$159
    303  10000 ????		01 5a	    var26      =	$15a
    304  10000 ????		01 5b	    var27      =	$15b
    305  10000 ????		01 5c	    var28      =	$15c
    306  10000 ????		01 5d	    var29      =	$15d
    307  10000 ????		01 5e	    var30      =	$15e
    308  10000 ????		01 5f	    var31      =	$15f
    309  10000 ????		01 60	    var32      =	$160
    310  10000 ????		01 61	    var33      =	$161
    311  10000 ????		01 62	    var34      =	$162
    312  10000 ????		01 63	    var35      =	$163
    313  10000 ????		01 64	    var36      =	$164
    314  10000 ????		01 65	    var37      =	$165
    315  10000 ????		01 66	    var38      =	$166
    316  10000 ????		01 67	    var39      =	$167
    317  10000 ????		01 68	    var40      =	$168
    318  10000 ????		01 69	    var41      =	$169
    319  10000 ????		01 6a	    var42      =	$16a
    320  10000 ????		01 6b	    var43      =	$16b
    321  10000 ????		01 6c	    var44      =	$16c
    322  10000 ????		01 6d	    var45      =	$16d
    323  10000 ????		01 6e	    var46      =	$16e
    324  10000 ????		01 6f	    var47      =	$16f
    325  10000 ????		01 70	    var48      =	$170
    326  10000 ????		01 71	    var49      =	$171
    327  10000 ????		01 72	    var50      =	$172
    328  10000 ????		01 73	    var51      =	$173
    329  10000 ????		01 74	    var52      =	$174
    330  10000 ????		01 75	    var53      =	$175
    331  10000 ????		01 76	    var54      =	$176
    332  10000 ????		01 77	    var55      =	$177
    333  10000 ????		01 78	    var56      =	$178
    334  10000 ????		01 79	    var57      =	$179
    335  10000 ????		01 7a	    var58      =	$17a
    336  10000 ????		01 7b	    var59      =	$17b
    337  10000 ????		01 7c	    var60      =	$17c
    338  10000 ????		01 7d	    var61      =	$17d
    339  10000 ????		01 7e	    var62      =	$17e
    340  10000 ????		01 7f	    var63      =	$17f
    341  10000 ????		01 80	    var64      =	$180
    342  10000 ????		01 81	    var65      =	$181
    343  10000 ????		01 82	    var66      =	$182
    344  10000 ????		01 83	    var67      =	$183
    345  10000 ????		01 84	    var68      =	$184
    346  10000 ????		01 85	    var69      =	$185
    347  10000 ????		01 86	    var70      =	$186
    348  10000 ????		01 87	    var71      =	$187
    349  10000 ????		01 88	    var72      =	$188
    350  10000 ????		01 89	    var73      =	$189
    351  10000 ????		01 8a	    var74      =	$18a
    352  10000 ????		01 8b	    var75      =	$18b
    353  10000 ????		01 8c	    var76      =	$18c
    354  10000 ????		01 8d	    var77      =	$18d
    355  10000 ????		01 8e	    var78      =	$18e
    356  10000 ????		01 8f	    var79      =	$18f
    357  10000 ????		01 90	    var80      =	$190
    358  10000 ????		01 91	    var81      =	$191
    359  10000 ????		01 92	    var82      =	$192
    360  10000 ????		01 93	    var83      =	$193
    361  10000 ????		01 94	    var84      =	$194
    362  10000 ????		01 95	    var85      =	$195
    363  10000 ????		01 96	    var86      =	$196
    364  10000 ????		01 97	    var87      =	$197
    365  10000 ????		01 98	    var88      =	$198
    366  10000 ????		01 99	    var89      =	$199
    367  10000 ????		01 9a	    var90      =	$19a
    368  10000 ????		01 9b	    var91      =	$19b
    369  10000 ????		01 9c	    var92      =	$19c
    370  10000 ????		01 9d	    var93      =	$19d
    371  10000 ????		01 9e	    var94      =	$19e
    372  10000 ????		01 9f	    var95      =	$19f
    373  10000 ????		01 a0	    var96      =	$1a0
    374  10000 ????		01 a1	    var97      =	$1a1
    375  10000 ????		01 a2	    var98      =	$1a2
    376  10000 ????		01 a3	    var99      =	$1a3
    377  10000 ????
    378  10000 ????		01 a4	    framecounter =	$1A4
    379  10000 ????		01 a5	    countdownseconds =	$1A5
    380  10000 ????		01 a6	    score0     =	$1A6	; $1A7 $1A8
    381  10000 ????		01 a9	    score1     =	$1A9	; $1AA $1AB
    382  10000 ????		01 ac	    pausebuttonflag =	$1AC
    383  10000 ????		01 ad	    valbufend  =	$1AD
    384  10000 ????		01 ae	    valbufendsave =	$1AE
    385  10000 ????		01 af	    finescrollx =	$1AF
    386  10000 ????		01 b0	    finescrolly =	$1B0
    387  10000 ????		01 b1	    joybuttonmode =	$1B1	; used to track any joysticks that were changed to one-button mode
    388  10000 ????		01 b2	    interruptindex =	$1B2
    389  10000 ????		01 b3	    tempavox   =	$1B3
    390  10000 ????		01 b4	    doublebufferminimumframetarget =	$1B4
    391  10000 ????		01 b5	    doublebufferminimumframeindex =	$1B5
    392  10000 ????		01 b6	    pausedisable =	$1B6
    393  10000 ????		01 b7	    XCTRL1s    =	$1B7
    394  10000 ????		01 b8	    spritecount =	$1B8
    395  10000 ????		01 b9	    avoxenable =	$1B9
    396  10000 ????
    397  10000 ????		01 ba	    pokey1frames =	$1BA
    398  10000 ????		01 bb	    pokey1tick =	$1BB
    399  10000 ????		01 bc	    pokey2frames =	$1BC
    400  10000 ????		01 bd	    pokey2tick =	$1BD
    401  10000 ????		01 be	    pokey3frames =	$1BE
    402  10000 ????		01 bf	    pokey3tick =	$1BF
    403  10000 ????		01 c0	    pokey4frames =	$1C0
    404  10000 ????		01 c1	    pokey4tick =	$1C1
    405  10000 ????		01 c2	    pokey1priority =	$1C2
    406  10000 ????		01 c3	    pokey1offset =	$1C3
    407  10000 ????		01 c4	    pokey2priority =	$1C4
    408  10000 ????		01 c5	    pokey2offset =	$1C5
    409  10000 ????		01 c6	    pokey3priority =	$1C6
    410  10000 ????		01 c7	    pokey3offset =	$1C7
    411  10000 ????		01 c8	    pokey4priority =	$1C8
    412  10000 ????		01 c9	    pokey4offset =	$1C9
    413  10000 ????
    414  10000 ????		01 ca	    songtempo  =	$1CA
    415  10000 ????		01 cb	    songtick   =	$1CB
    416  10000 ????
    417  10000 ????		01 cc	    songchannel1layer1loops =	$1CC
    418  10000 ????		01 cd	    songchannel2layer1loops =	$1CD
    419  10000 ????		01 ce	    songchannel3layer1loops =	$1CE
    420  10000 ????		01 cf	    songchannel4layer1loops =	$1CF
    421  10000 ????
    422  10000 ????		01 d0	    songchannel1layer2loops =	$1D0
    423  10000 ????		01 d1	    songchannel2layer2loops =	$1D1
    424  10000 ????		01 d2	    songchannel3layer2loops =	$1D2
    425  10000 ????		01 d3	    songchannel4layer2loops =	$1D3
    426  10000 ????
    427  10000 ????		01 d4	    songchannel1layer3loops =	$1D4
    428  10000 ????		01 d5	    songchannel2layer3loops =	$1D5
    429  10000 ????		01 d6	    songchannel3layer3loops =	$1D6
    430  10000 ????		01 d7	    songchannel4layer3loops =	$1D7
    431  10000 ????
    432  10000 ????		01 d8	    songchannel1busywait =	$1D8
    433  10000 ????		01 d9	    songchannel2busywait =	$1D9
    434  10000 ????		01 da	    songchannel3busywait =	$1DA
    435  10000 ????		01 db	    songchannel4busywait =	$1DB
    436  10000 ????
    437  10000 ????		01 dc	    songchannel1stackdepth =	$1DC
    438  10000 ????		01 dd	    songchannel2stackdepth =	$1DD
    439  10000 ????		01 de	    songchannel3stackdepth =	$1DE
    440  10000 ????		01 df	    songchannel4stackdepth =	$1DF
    441  10000 ????
    442  10000 ????		01 e0	    palframes  =	$1E0
    443  10000 ????		01 e1	    palfastframe =	$1E1
    444  10000 ????
    445  10000 ????		01 e2	    port0control =	$1E2
    446  10000 ????		01 e3	    port1control =	$1E3
    447  10000 ????
    448  10000 ????						; port#control values...
    449  10000 ????						;	1 = proline
    450  10000 ????						;	2 = lightgun
    451  10000 ????						;	3 = paddle
    452  10000 ????						;	4 = trakball
    453  10000 ????						;	5 = vcs joystick
    454  10000 ????						;	6 = driving
    455  10000 ????						;	7 = keypad
    456  10000 ????						;	8 = st mouse/cx80
    457  10000 ????						;	9 = amiga mouse
    458  10000 ????						;     10 = atarivox
    459  10000 ????
    460  10000 ????						; controller 0 data...
    461  10000 ????		01 e4	    paddleposition0 =	$1E4
    462  10000 ????		01 e4	    keypadmatrix0a =	$1E4
    463  10000 ????		01 e4	    drivingposition0 =	$1E4
    464  10000 ????		01 e4	    trakballx0 =	$1E4
    465  10000 ????		01 e4	    mousex0    =	$1E4
    466  10000 ????		01 e4	    lighttgunx0 =	$1E4
    467  10000 ????
    468  10000 ????						; controller 1 data...
    469  10000 ????		01 e5	    paddleposition2 =	$1E5
    470  10000 ????		01 e5	    keypadmatrix1a =	$1E5
    471  10000 ????		01 e5	    drivingposition1 =	$1E5
    472  10000 ????		01 e5	    trakballx1 =	$1E5
    473  10000 ????		01 e5	    mousex1    =	$1E5
    474  10000 ????		01 e5	    lightgunx1 =	$1E5
    475  10000 ????
    476  10000 ????						; controller 0 altdata...
    477  10000 ????		01 e6	    paddleposition1 =	$1E6
    478  10000 ????		01 e6	    keypadmatrix0b =	$1E6
    479  10000 ????		01 e6	    trakbally0 =	$1E6
    480  10000 ????		01 e6	    mousey0    =	$1E6
    481  10000 ????		01 e6	    lightguny0 =	$1E6
    482  10000 ????
    483  10000 ????						; controller 1 altdata...
    484  10000 ????		01 e7	    paddleposition3 =	$1E7
    485  10000 ????		01 e7	    keypadmatrix1b =	$1E7
    486  10000 ????		01 e7	    trakbally1 =	$1E7
    487  10000 ????		01 e7	    mousey1    =	$1E7
    488  10000 ????		01 e7	    lightguny1 =	$1E7
    489  10000 ????
    490  10000 ????						; controller state save. for trakball state+dir codes, rotary position codes
    491  10000 ????		01 e8	    controller0statesave =	$1E8
    492  10000 ????		01 e8	    mousecodex0 =	$1E8
    493  10000 ????		01 e8	    trakballcodex0 =	$1E8
    494  10000 ????		01 e8	    keypadmatrix0c =	$1E8
    495  10000 ????
    496  10000 ????		01 e9	    controller1statesave =	$1E9
    497  10000 ????		01 e9	    mousecodex1 =	$1E9
    498  10000 ????		01 e9	    trakballcodex1 =	$1E9
    499  10000 ????		01 e9	    keypadmatrix1c =	$1E9
    500  10000 ????
    501  10000 ????		01 ea	    keypadmatrix0d =	$1EA
    502  10000 ????		01 ea	    mousecodey0 =	$1EA
    503  10000 ????		01 ea	    trakballcodey0 =	$1EA
    504  10000 ????
    505  10000 ????		01 eb	    keypadmatrix1d =	$1EB
    506  10000 ????		01 eb	    mousecodey1 =	$1EB
    507  10000 ????		01 eb	    trakballcodey1 =	$1EB
    508  10000 ????
    509  10000 ????		01 ec	    genesisdetected0 =	$1EC
    510  10000 ????		01 ed	    genesisdetected1 =	$1ED
    511  10000 ????
    512  10000 ????						; $1EE - $1FF reserved for stack
    513  10000 ????
------- FILE c:\Users\Steve\Desktop\2018dev\7800\7800basic\projects\lessons\lesson1_gfx_modes\lesson1_31.bas.asm
------- FILE 7800basic_variable_redefs.h LEVEL 2 PASS 3
      0  10000 ????				       include	"7800basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 00	    font_mode  =	$00
      4  10000 ????		00 0b	    font_width_twoscompliment =	$0b
      5  10000 ????		00 35	    font_width =	$35
      6  10000 ????		00 00	    zonebg80x16_8_tallsprite_00_mode =	$00
      7  10000 ????		00 0c	    zonebg80x16_8_tallsprite_00_width_twoscompliment =	$0c
      8  10000 ????		00 14	    zonebg80x16_8_tallsprite_00_width =	$14
      9  10000 ????		00 00	    zonebg80x16_8_mode =	$00
     10  10000 ????		00 0c	    zonebg80x16_8_width_twoscompliment =	$0c
     11  10000 ????		00 14	    zonebg80x16_8_width =	$14
     12  10000 ????		00 00	    g8x8_4color8_mode =	$00
     13  10000 ????		00 1e	    g8x8_4color8_width_twoscompliment =	$1e
     14  10000 ????		00 02	    g8x8_4color8_width =	$02
     15  10000 ????		00 00	    g8x8_4color7_mode =	$00
     16  10000 ????		00 1e	    g8x8_4color7_width_twoscompliment =	$1e
     17  10000 ????		00 02	    g8x8_4color7_width =	$02
     18  10000 ????		00 00	    g8x8_4color6_mode =	$00
     19  10000 ????		00 1e	    g8x8_4color6_width_twoscompliment =	$1e
     20  10000 ????		00 02	    g8x8_4color6_width =	$02
     21  10000 ????		00 00	    g8x8_4color5_mode =	$00
     22  10000 ????		00 1e	    g8x8_4color5_width_twoscompliment =	$1e
     23  10000 ????		00 02	    g8x8_4color5_width =	$02
     24  10000 ????		00 00	    g8x8_4color4_mode =	$00
     25  10000 ????		00 1e	    g8x8_4color4_width_twoscompliment =	$1e
     26  10000 ????		00 02	    g8x8_4color4_width =	$02
     27  10000 ????		00 00	    g8x8_4color3_mode =	$00
     28  10000 ????		00 1e	    g8x8_4color3_width_twoscompliment =	$1e
     29  10000 ????		00 02	    g8x8_4color3_width =	$02
     30  10000 ????		00 00	    g8x8_4color2_mode =	$00
     31  10000 ????		00 1e	    g8x8_4color2_width_twoscompliment =	$1e
     32  10000 ????		00 02	    g8x8_4color2_width =	$02
     33  10000 ????		00 00	    g8x8_4color_mode =	$00
     34  10000 ????		00 1e	    g8x8_4color_width_twoscompliment =	$1e
     35  10000 ????		00 02	    g8x8_4color_width =	$02
     36  10000 ????		00 01	    DOUBLEBUFFER =	1
     37  10000 ????		01 43	    an	       =	var3
     38  10000 ????
     39  10000 ????		01 42	    db	       =	var2
     40  10000 ????
     41  10000 ????		01 41	    bg	       =	var1
     42  10000 ????
     43  10000 ????		00 0f	    font_color1 =	$0f
     44  10000 ????		00 00	    font_color0 =	$00
     45  10000 ????		00 08	    zonebg80x16_8_tallsprite_00_color1 =	$08
     46  10000 ????		00 00	    zonebg80x16_8_tallsprite_00_color0 =	$00
     47  10000 ????		00 08	    zonebg80x16_8_color1 =	$08
     48  10000 ????		00 00	    zonebg80x16_8_color0 =	$00
     49  10000 ????		00 91	    g8x8_4color8_color3 =	$91
     50  10000 ????		00 a8	    g8x8_4color8_color2 =	$a8
     51  10000 ????		00 91	    g8x8_4color8_color1 =	$91
     52  10000 ????		00 00	    g8x8_4color8_color0 =	$00
     53  10000 ????		00 91	    g8x8_4color7_color3 =	$91
     54  10000 ????		00 a8	    g8x8_4color7_color2 =	$a8
     55  10000 ????		00 91	    g8x8_4color7_color1 =	$91
     56  10000 ????		00 00	    g8x8_4color7_color0 =	$00
     57  10000 ????		00 91	    g8x8_4color6_color3 =	$91
     58  10000 ????		00 a8	    g8x8_4color6_color2 =	$a8
     59  10000 ????		00 91	    g8x8_4color6_color1 =	$91
     60  10000 ????		00 00	    g8x8_4color6_color0 =	$00
     61  10000 ????		00 91	    g8x8_4color5_color3 =	$91
     62  10000 ????		00 a8	    g8x8_4color5_color2 =	$a8
     63  10000 ????		00 91	    g8x8_4color5_color1 =	$91
     64  10000 ????		00 00	    g8x8_4color5_color0 =	$00
     65  10000 ????		00 91	    g8x8_4color4_color3 =	$91
     66  10000 ????		00 a8	    g8x8_4color4_color2 =	$a8
     67  10000 ????		00 91	    g8x8_4color4_color1 =	$91
     68  10000 ????		00 00	    g8x8_4color4_color0 =	$00
     69  10000 ????		00 91	    g8x8_4color3_color3 =	$91
     70  10000 ????		00 a8	    g8x8_4color3_color2 =	$a8
     71  10000 ????		00 91	    g8x8_4color3_color1 =	$91
     72  10000 ????		00 00	    g8x8_4color3_color0 =	$00
     73  10000 ????		00 91	    g8x8_4color2_color3 =	$91
     74  10000 ????		00 a8	    g8x8_4color2_color2 =	$a8
     75  10000 ????		00 91	    g8x8_4color2_color1 =	$91
     76  10000 ????		00 00	    g8x8_4color2_color0 =	$00
     77  10000 ????		00 91	    g8x8_4color_color3 =	$91
     78  10000 ????		00 a8	    g8x8_4color_color2 =	$a8
     79  10000 ????		00 91	    g8x8_4color_color1 =	$91
     80  10000 ????		00 00	    g8x8_4color_color0 =	$00
     81  10000 ????		00 01	    ROM48K     =	1
     82  10000 ????		00 01	    plotvalueonscreen =	1
     83  10000 ????		00 08	    ZONEHEIGHT =	8
------- FILE c:\Users\Steve\Desktop\2018dev\7800\7800basic\projects\lessons\lesson1_gfx_modes\lesson1_31.bas.asm
    285  10000 ????
    286  10000 ????						; A BEAD header gets automatically incorportated into the ROM header. 
    287  10000 ????						; For more BEAD executable info, check out the spec...
    288  10000 ????						; http://7800.8bitdev.org/index.php/The_Atari_7800_BEAD_Execuable_Specification
    289  10000 ????
    290  10000 ????		00 01	    GAMEDESCRIPTIONSET =	1
    291  10000 ????		4e 61 6d 65 GAMEDESCRIPTION =	"Test Name"
    292  10000 ????
    293  10000 ????		00 40	    BDHSC      =	%01000000
    294  10000 ????		00 20	    BDYM       =	%00100000
    295  10000 ????		00 10	    BDPOKEY    =	%00010000
    296  10000 ????		00 08	    BDROF      =	%00001000
    297  10000 ????		00 00	    BD16K      =	%00000000
    298  10000 ????		00 01	    BD32K      =	%00000001
    299  10000 ????		00 02	    BD48K      =	%00000010
    300  10000 ????		00 05	    BD1800     =	%00000101
    301  10000 ????		00 06	    BD4000     =	%00000110
    302  10000 ????
    303  10000 ????			   -	       ifconst	ROM16K
    304  10000 ????			   -BEADHEADER =	1
    305  10000 ????				       endif
    306  10000 ????			   -	       ifconst	ROM32K
    307  10000 ????			   -BEADHEADER =	1
    308  10000 ????				       endif
    309  10000 ????				       ifconst	ROM48K
    310  10000 ????		00 01	    BEADHEADER =	1
    311  10000 ????				       endif
    312  10000 ????
    313  10000 ????				       ifconst	BEADHEADER
    314  10000 ????			    BEADHARDWARE SET	0
    315  10000 ????			   -	       ifconst	ROM16K
    316  10000 ????			   -BEADHARDWARE SET	(BEADHARDWARE|BD16K)
    317  10000 ????				       endif
    318  10000 ????			   -	       ifconst	ROM32K
    319  10000 ????			   -BEADHARDWARE SET	(BEADHARDWARE|BD32K)
    320  10000 ????				       endif
    321  10000 ????				       ifconst	ROM48K
    322  10000 ????			    BEADHARDWARE SET	(BEADHARDWARE|BD48K)
    323  10000 ????				       endif
    324  10000 ????			   -	       ifconst	pokeysupport
    325  10000 ????			   -BEADHARDWARE SET	(BEADHARDWARE|BDPOKEY)
    326  10000 ????				       endif
    327  10000 ????			   -	       ifconst	HSSUPPORT
    328  10000 ????			   -BEADHARDWARE SET	(BEADHARDWARE|BDHSC)
    329  10000 ????				       endif
    330  10000 ????				       endif
    331  10000 ????
    332  10000 ????						;start address of cart...
    333  10000 ????				       ifconst	ROM48K
    334  4000					      ORG	$4000,0
    335  4000					      ifconst	BEADHEADER
    336  4000		       be ad 02 	      .byte.b	$BE,$AD,BEADHARDWARE
    337  4003					      ifconst	GAMEDESCRIPTIONSET
    338  4003		       18		      CLC
    339  4004		       90 0a		      BCC	_SKIPDESCRIPTION
    340  4006		       54 65 73 74*	      .byte.b	GAMEDESCRIPTION,0
    341  4010				   _SKIPDESCRIPTION
    342  4010					      endif
    343  4010		       6c fc ff 	      jmp	($FFFC)
    344  4013					      endif
    345  4013				  -	      else
    346  4013				  -	      ifconst	bankswitchmode
    347  4013				  -	      ifconst	ROMAT4K
    348  4013				  -	      ORG	$4000,0
    349  4013				  -	      RORG	$4000
    350  4013				  -	      else
    351  4013				  -	      ORG	$8000,0
    352  4013				  -	      RORG	$8000
    353  4013				  -	      endif
    354  4013				  -	      else		; not bankswitchmode
    355  4013				  -	      ifconst	ROM16K
    356  4013				  -	      ORG	$C000,0
    357  4013				  -	      ifconst	BEADHEADER
    358  4013				  -	      .byte	$BE,$AD,BEADHARDWARE
    359  4013				  -	      ifconst	GAMEDESCRIPTION
    360  4013				  -	      CLC
    361  4013				  -	      BCC	_SKIPDESCRIPTION
    362  4013				  -	      .byte	GAMEDESCRIPTION,0
    363  4013				  -_SKIPDESCRIPTION
    364  4013				  -	      endif
    365  4013				  -	      jmp	($FFFC)
    366  4013				  -	      endif
    367  4013				  -	      else
    368  4013				  -	      ifconst	ROM8K
    369  4013				  -	      ORG	$E000,0
    370  4013				  -	      else
    371  4013				  -	      ORG	$8000,0
    372  4013				  -	      ifconst	BEADHEADER
    373  4013				  -	      .byte	$BE,$AD,BEADHARDWARE
    374  4013				  -	      ifconst	GAMEDESCRIPTION
    375  4013				  -	      CLC
    376  4013				  -	      BCC	_SKIPDESCRIPTION
    377  4013				  -	      .byte	GAMEDESCRIPTION,0
    378  4013				  -_SKIPDESCRIPTION
    379  4013				  -	      endif
    380  4013				  -	      jmp	($FFFC)
    381  4013				  -	      endif
    382  4013				  -	      endif
    383  4013				  -	      endif
    384  4013				  -	      endif
    385  4013					      endif
    386  4013
    387  4013				   game
    388  4013				   .L00 		;;  set zoneheight 8
    389  4013
    390  4013				   .L01 		;;  displaymode 320A
    391  4013
    392  4013		       a9 43		      lda	#%01000011	;Enable DMA, mode=160x2/160x4
    393  4015		       85 3c		      sta	CTRL
    394  4017
    395  4017		       8d 07 21 	      sta	sCTRL
    396  401a
    397  401a				   .L02 		;;  set plotvalueonscreen on
    398  401a
    399  401a				   .L03 		;;  set romsize 48k
    400  401a
    401  401a				   .
    402  401a							;; 
    403  401a
    404  401a				   .L04 		;;  incgraphic g8x8_4color.png 
    405  401a
    406  401a				   .L05 		;;  incgraphic g8x8_4color2.png 
    407  401a
    408  401a				   .L06 		;;  incgraphic g8x8_4color3.png 
    409  401a
    410  401a				   .L07 		;;  incgraphic g8x8_4color4.png 
    411  401a
    412  401a				   .L08 		;;  incgraphic g8x8_4color5.png 
    413  401a
    414  401a				   .L09 		;;  incgraphic g8x8_4color6.png 
    415  401a
    416  401a				   .L010		;;  incgraphic g8x8_4color7.png 
    417  401a
    418  401a				   .L011		;;  incgraphic g8x8_4color8.png 
    419  401a
    420  401a				   .L012		;;  incgraphic zonebg80x16_8.png 0 2 3 1
    421  401a
    422  401a				   .L013		;;  incgraphic font.png 160A
    423  401a
    424  401a				   .
    425  401a							;; 
    426  401a
    427  401a				   .L014		;;  rem font
    428  401a
    429  401a				   .L015		;;  alphachars '0123456789abcdefghijklmnopqrstuvwxyz>`?!/.,-_()[]&AB '
    430  401a
    431  401a				   .L016		;;  characterset font
    432  401a
    433  401a		       a9 e0		      lda	#>font
    434  401c		       85 34		      sta	CHARBASE
    435  401e		       8d 0b 21 	      sta	sCHARBASE
    436  4021
    437  4021		       a9 60		      lda	#(font_mode | %01100000)
    438  4023		       8d 06 21 	      sta	charactermode
    439  4026
    440  4026				   .
    441  4026							;; 
    442  4026
    443  4026				   .L017		;;  rem blue
    444  4026
    445  4026				   .L018		;;  P0C1 = $90
    446  4026
    447  4026		       a9 90		      LDA	#$90
    448  4028		       85 21		      STA	P0C1
    449  402a				   .L019		;;  P0C2 = $70
    450  402a
    451  402a		       a9 70		      LDA	#$70
    452  402c		       85 22		      STA	P0C2
    453  402e				   .L020		;;  P0C3 = $98
    454  402e
    455  402e		       a9 98		      LDA	#$98
    456  4030		       85 23		      STA	P0C3
    457  4032				   .L021		;;  rem red
    458  4032
    459  4032				   .L022		;;  P1C1 = $20
    460  4032
    461  4032		       a9 20		      LDA	#$20
    462  4034		       85 25		      STA	P1C1
    463  4036				   .L023		;;  P1C2 = $32
    464  4036
    465  4036		       a9 32		      LDA	#$32
    466  4038		       85 26		      STA	P1C2
    467  403a				   .L024		;;  P1C3 = $36
    468  403a
    469  403a		       a9 36		      LDA	#$36
    470  403c		       85 27		      STA	P1C3
    471  403e				   .L025		;;  rem green
    472  403e
    473  403e				   .L026		;;  P2C1 = $C1
    474  403e
    475  403e		       a9 c1		      LDA	#$C1
    476  4040		       85 29		      STA	P2C1
    477  4042				   .L027		;;  P2C2 = $C6
    478  4042
    479  4042		       a9 c6		      LDA	#$C6
    480  4044		       85 2a		      STA	P2C2
    481  4046				   .L028		;;  P2C3 = $CB
    482  4046
    483  4046		       a9 cb		      LDA	#$CB
    484  4048		       85 2b		      STA	P2C3
    485  404a				   .L029		;;  rem purple
    486  404a
    487  404a				   .L030		;;  P3C1 = $50
    488  404a
    489  404a		       a9 50		      LDA	#$50
    490  404c		       85 2d		      STA	P3C1
    491  404e				   .L031		;;  P3C2 = $53
    492  404e
    493  404e		       a9 53		      LDA	#$53
    494  4050		       85 2e		      STA	P3C2
    495  4052				   .L032		;;  P3C3 = $58
    496  4052
    497  4052		       a9 58		      LDA	#$58
    498  4054		       85 2f		      STA	P3C3
    499  4056				   .L033		;;  rem orange
    500  4056
    501  4056				   .L034		;;  P4C1 = $35
    502  4056
    503  4056		       a9 35		      LDA	#$35
    504  4058		       85 31		      STA	P4C1
    505  405a				   .L035		;;  P4C2 = $38
    506  405a
    507  405a		       a9 38		      LDA	#$38
    508  405c		       85 32		      STA	P4C2
    509  405e				   .L036		;;  P4C3 = $3C
    510  405e
    511  405e		       a9 3c		      LDA	#$3C
    512  4060		       85 33		      STA	P4C3
    513  4062				   .L037		;;  rem yellow
    514  4062
    515  4062				   .L038		;;  P5C1 = $15
    516  4062
    517  4062		       a9 15		      LDA	#$15
    518  4064		       85 35		      STA	P5C1
    519  4066				   .L039		;;  P5C2 = $1A
    520  4066
    521  4066		       a9 1a		      LDA	#$1A
    522  4068		       85 36		      STA	P5C2
    523  406a				   .L040		;;  P5C3 = $1E
    524  406a
    525  406a		       a9 1e		      LDA	#$1E
    526  406c		       85 37		      STA	P5C3
    527  406e				   .L041		;;  rem teal
    528  406e
    529  406e				   .L042		;;  P6C1 = $A1
    530  406e
    531  406e		       a9 a1		      LDA	#$A1
    532  4070		       85 39		      STA	P6C1
    533  4072				   .L043		;;  P6C2 = $A6
    534  4072
    535  4072		       a9 a6		      LDA	#$A6
    536  4074		       85 3a		      STA	P6C2
    537  4076				   .L044		;;  P6C3 = $Ac
    538  4076
    539  4076		       a9 ac		      LDA	#$Ac
    540  4078		       85 3b		      STA	P6C3
    541  407a				   .L045		;;  rem white
    542  407a
    543  407a				   .L046		;;  P7C1 = $0F
    544  407a
    545  407a		       a9 0f		      LDA	#$0F
    546  407c		       85 3d		      STA	P7C1
    547  407e				   .L047		;;  P7C2 = $05
    548  407e
    549  407e		       a9 05		      LDA	#$05
    550  4080		       85 3e		      STA	P7C2
    551  4082				   .L048		;;  P7C3 = $09
    552  4082
    553  4082		       a9 09		      LDA	#$09
    554  4084		       85 3f		      STA	P7C3
    555  4086				   .
    556  4086							;; 
    557  4086
    558  4086				   .L049		;;  dim bg  =	var1
    559  4086
    560  4086				   .L050		;;  dim db  =	var2
    561  4086
    562  4086				   .L051		;;  dim an  =	var3
    563  4086
    564  4086				   .
    565  4086							;; 
    566  4086
    567  4086				   .L052		;;  bg  =  0
    568  4086
    569  4086		       a9 00		      LDA	#0
    570  4088		       8d 41 01 	      STA	bg
    571  408b				   .L053		;;  db  =  0
    572  408b
    573  408b		       a9 00		      LDA	#0
    574  408d		       8d 42 01 	      STA	db
    575  4090				   .L054		;;  an  =  0
    576  4090
    577  4090		       a9 00		      LDA	#0
    578  4092		       8d 43 01 	      STA	an
    579  4095				   .
    580  4095							;; 
    581  4095
    582  4095				   .L055		;;  w	=  0
    583  4095
    584  4095		       a9 00		      LDA	#0
    585  4097		       85 fc		      STA	w
    586  4099				   .L056		;;  z	=  0
    587  4099
    588  4099		       a9 00		      LDA	#0
    589  409b		       85 ff		      STA	z
    590  409d				   .
    591  409d							;; 
    592  409d
    593  409d				   ._title
    594  409d							;; _title
    595  409d
    596  409d				   .L057		;;  clearscreen
    597  409d
    598  409d		       20 77 f0 	      jsr	clearscreen
    599  40a0				   .L058		;;  plotchars 'demo^1' 7 67 10 1
    600  40a0
    601  40a0		       4c a9 40 	      JMP	skipalphadata0
    602  40a3				   alphadata0
    603  40a3		       45		      .byte.b	(<font + $0d)
    604  40a4		       46		      .byte.b	(<font + $0e)
    605  40a5		       4e		      .byte.b	(<font + $16)
    606  40a6		       50		      .byte.b	(<font + $18)
    607  40a7		       6c		      .byte.b	(<font + $34)
    608  40a8		       39		      .byte.b	(<font + $01)
    609  40a9				   skipalphadata0
    610  40a9		       a9 a3		      lda	#<alphadata0
    611  40ab		       85 42		      sta	temp1
    612  40ad
    613  40ad		       a9 40		      lda	#>alphadata0
    614  40af		       85 43		      sta	temp2
    615  40b1
    616  40b1		       a9 1a		      lda	#26	; width in two's complement
    617  40b3		       09 e0		      ora	#224	; palette left shifted 5 bits
    618  40b5		       85 44		      sta	temp3
    619  40b7		       a9 43		      lda	#67
    620  40b9		       85 45		      sta	temp4
    621  40bb
    622  40bb		       a9 0a		      lda	#10
    623  40bd		       85 46		      sta	temp5
    624  40bf
    625  40bf		       20 66 f3 	      jsr	plotcharacters
    626  40c2				   .L059		;;  plotchars 'atari^7800^basic^exploration' 1 23 12 1
    627  40c2
    628  40c2		       4c e1 40 	      JMP	skipalphadata1
    629  40c5				   alphadata1
    630  40c5		       42		      .byte.b	(<font + $0a)
    631  40c6		       55		      .byte.b	(<font + $1d)
    632  40c7		       42		      .byte.b	(<font + $0a)
    633  40c8		       53		      .byte.b	(<font + $1b)
    634  40c9		       4a		      .byte.b	(<font + $12)
    635  40ca		       6c		      .byte.b	(<font + $34)
    636  40cb		       3f		      .byte.b	(<font + $07)
    637  40cc		       40		      .byte.b	(<font + $08)
    638  40cd		       38		      .byte.b	(<font + $00)
    639  40ce		       38		      .byte.b	(<font + $00)
    640  40cf		       6c		      .byte.b	(<font + $34)
    641  40d0		       43		      .byte.b	(<font + $0b)
    642  40d1		       42		      .byte.b	(<font + $0a)
    643  40d2		       54		      .byte.b	(<font + $1c)
    644  40d3		       4a		      .byte.b	(<font + $12)
    645  40d4		       44		      .byte.b	(<font + $0c)
    646  40d5		       6c		      .byte.b	(<font + $34)
    647  40d6		       46		      .byte.b	(<font + $0e)
    648  40d7		       59		      .byte.b	(<font + $21)
    649  40d8		       51		      .byte.b	(<font + $19)
    650  40d9		       4d		      .byte.b	(<font + $15)
    651  40da		       50		      .byte.b	(<font + $18)
    652  40db		       53		      .byte.b	(<font + $1b)
    653  40dc		       42		      .byte.b	(<font + $0a)
    654  40dd		       55		      .byte.b	(<font + $1d)
    655  40de		       4a		      .byte.b	(<font + $12)
    656  40df		       50		      .byte.b	(<font + $18)
    657  40e0		       4f		      .byte.b	(<font + $17)
    658  40e1				   skipalphadata1
    659  40e1		       a9 c5		      lda	#<alphadata1
    660  40e3		       85 42		      sta	temp1
    661  40e5
    662  40e5		       a9 40		      lda	#>alphadata1
    663  40e7		       85 43		      sta	temp2
    664  40e9
    665  40e9		       a9 04		      lda	#4	; width in two's complement
    666  40eb		       09 20		      ora	#32	; palette left shifted 5 bits
    667  40ed		       85 44		      sta	temp3
    668  40ef		       a9 17		      lda	#23
    669  40f1		       85 45		      sta	temp4
    670  40f3
    671  40f3		       a9 0c		      lda	#12
    672  40f5		       85 46		      sta	temp5
    673  40f7
    674  40f7		       20 66 f3 	      jsr	plotcharacters
    675  40fa				   .L060		;;  plotchars '320a^zoneheight^8' 7 47 14 1
    676  40fa
    677  40fa		       4c 0e 41 	      JMP	skipalphadata2
    678  40fd				   alphadata2
    679  40fd		       3b		      .byte.b	(<font + $03)
    680  40fe		       3a		      .byte.b	(<font + $02)
    681  40ff		       38		      .byte.b	(<font + $00)
    682  4100		       42		      .byte.b	(<font + $0a)
    683  4101		       6c		      .byte.b	(<font + $34)
    684  4102		       5b		      .byte.b	(<font + $23)
    685  4103		       50		      .byte.b	(<font + $18)
    686  4104		       4f		      .byte.b	(<font + $17)
    687  4105		       46		      .byte.b	(<font + $0e)
    688  4106		       49		      .byte.b	(<font + $11)
    689  4107		       46		      .byte.b	(<font + $0e)
    690  4108		       4a		      .byte.b	(<font + $12)
    691  4109		       48		      .byte.b	(<font + $10)
    692  410a		       49		      .byte.b	(<font + $11)
    693  410b		       55		      .byte.b	(<font + $1d)
    694  410c		       6c		      .byte.b	(<font + $34)
    695  410d		       40		      .byte.b	(<font + $08)
    696  410e				   skipalphadata2
    697  410e		       a9 fd		      lda	#<alphadata2
    698  4110		       85 42		      sta	temp1
    699  4112
    700  4112		       a9 40		      lda	#>alphadata2
    701  4114		       85 43		      sta	temp2
    702  4116
    703  4116		       a9 0f		      lda	#15	; width in two's complement
    704  4118		       09 e0		      ora	#224	; palette left shifted 5 bits
    705  411a		       85 44		      sta	temp3
    706  411c		       a9 2f		      lda	#47
    707  411e		       85 45		      sta	temp4
    708  4120
    709  4120		       a9 0e		      lda	#14
    710  4122		       85 46		      sta	temp5
    711  4124
    712  4124		       20 66 f3 	      jsr	plotcharacters
    713  4127				   .L061		;;  if w  >  8  &&  joy0fire then w  =  0  :  goto _screen2_init
    714  4127
    715  4127		       a9 08		      LDA	#8
    716  4129		       c5 fc		      CMP	w
    717  412b		       b0 0c		      BCS	.skipL061
    718  412d				   .condpart0
    719  412d		       2c 02 21 	      bit	sINPT1
    720  4130		       10 07		      BPL	.skip0then
    721  4132				   .condpart1
    722  4132		       a9 00		      LDA	#0
    723  4134		       85 fc		      STA	w
    724  4136		       4c 46 41 	      jmp	._screen2_init
    725  4139
    726  4139				   .skip0then
    727  4139				   .skipL061
    728  4139				   .L062		;;  w	=  w  +  1
    729  4139
    730  4139		       a5 fc		      LDA	w
    731  413b		       18		      CLC
    732  413c		       69 01		      ADC	#1
    733  413e		       85 fc		      STA	w
    734  4140				   .L063		;;  drawscreen
    735  4140
    736  4140		       20 b3 f0 	      jsr	drawscreen
    737  4143				   .L064		;;  goto _title
    738  4143
    739  4143		       4c 9d 40 	      jmp	._title
    740  4146
    741  4146				   .
    742  4146							;; 
    743  4146
    744  4146				   .L065		;;  rem background with no animation or doublebuffering
    745  4146
    746  4146				   ._screen2_init
    747  4146							;; _screen2_init
    748  4146
    749  4146				   .L066		;;  bg  =  1
    750  4146
    751  4146		       a9 01		      LDA	#1
    752  4148		       8d 41 01 	      STA	bg
    753  414b				   .L067		;;  db  =  0
    754  414b
    755  414b		       a9 00		      LDA	#0
    756  414d		       8d 42 01 	      STA	db
    757  4150				   .L068		;;  an  =  0
    758  4150
    759  4150		       a9 00		      LDA	#0
    760  4152		       8d 43 01 	      STA	an
    761  4155				   .L069		;;  w	=  0
    762  4155
    763  4155		       a9 00		      LDA	#0
    764  4157		       85 fc		      STA	w
    765  4159				   .L070		;;  gosub _screen_setup
    766  4159
    767  4159		       20 84 42 	      jsr	._screen_setup
    768  415c
    769  415c				   ._screen2_loop
    770  415c							;; _screen2_loop
    771  415c
    772  415c				   .L071		;;  gosub _screen
    773  415c
    774  415c		       20 b1 42 	      jsr	._screen
    775  415f
    776  415f				   .L072		;;  if w  >  8  &&  joy0fire then w  =  0  :  goto _screen3_init
    777  415f
    778  415f		       a9 08		      LDA	#8
    779  4161		       c5 fc		      CMP	w
    780  4163		       b0 0c		      BCS	.skipL072
    781  4165				   .condpart2
    782  4165		       2c 02 21 	      bit	sINPT1
    783  4168		       10 07		      BPL	.skip2then
    784  416a				   .condpart3
    785  416a		       a9 00		      LDA	#0
    786  416c		       85 fc		      STA	w
    787  416e		       4c 7b 41 	      jmp	._screen3_init
    788  4171
    789  4171				   .skip2then
    790  4171				   .skipL072
    791  4171				   .L073		;;  w	=  w  +  1
    792  4171
    793  4171		       a5 fc		      LDA	w
    794  4173		       18		      CLC
    795  4174		       69 01		      ADC	#1
    796  4176		       85 fc		      STA	w
    797  4178				   .L074		;;  goto _screen2_loop
    798  4178
    799  4178		       4c 5c 41 	      jmp	._screen2_loop
    800  417b
    801  417b				   .
    802  417b							;; 
    803  417b
    804  417b				   .L075		;;  rem no background with no animation or doublebuffering
    805  417b
    806  417b				   ._screen3_init
    807  417b							;; _screen3_init
    808  417b
    809  417b				   .L076		;;  bg  =  0
    810  417b
    811  417b		       a9 00		      LDA	#0
    812  417d		       8d 41 01 	      STA	bg
    813  4180				   .L077		;;  db  =  0
    814  4180
    815  4180		       a9 00		      LDA	#0
    816  4182		       8d 42 01 	      STA	db
    817  4185				   .L078		;;  an  =  0
    818  4185
    819  4185		       a9 00		      LDA	#0
    820  4187		       8d 43 01 	      STA	an
    821  418a				   .L079		;;  w	=  0
    822  418a
    823  418a		       a9 00		      LDA	#0
    824  418c		       85 fc		      STA	w
    825  418e				   .L080		;;  gosub _screen_setup
    826  418e
    827  418e		       20 84 42 	      jsr	._screen_setup
    828  4191
    829  4191				   ._screen3_loop
    830  4191							;; _screen3_loop
    831  4191
    832  4191				   .L081		;;  gosub _screen
    833  4191
    834  4191		       20 b1 42 	      jsr	._screen
    835  4194
    836  4194				   .L082		;;  if w  >  8  &&  joy0fire then w  =  0  :  goto _screen4_init
    837  4194
    838  4194		       a9 08		      LDA	#8
    839  4196		       c5 fc		      CMP	w
    840  4198		       b0 0c		      BCS	.skipL082
    841  419a				   .condpart4
    842  419a		       2c 02 21 	      bit	sINPT1
    843  419d		       10 07		      BPL	.skip4then
    844  419f				   .condpart5
    845  419f		       a9 00		      LDA	#0
    846  41a1		       85 fc		      STA	w
    847  41a3		       4c b0 41 	      jmp	._screen4_init
    848  41a6
    849  41a6				   .skip4then
    850  41a6				   .skipL082
    851  41a6				   .L083		;;  w	=  w  +  1
    852  41a6
    853  41a6		       a5 fc		      LDA	w
    854  41a8		       18		      CLC
    855  41a9		       69 01		      ADC	#1
    856  41ab		       85 fc		      STA	w
    857  41ad				   .L084		;;  goto _screen3_loop
    858  41ad
    859  41ad		       4c 91 41 	      jmp	._screen3_loop
    860  41b0
    861  41b0				   .
    862  41b0							;; 
    863  41b0
    864  41b0				   .L085		;;  rem no background with  animation and no doublebuffering
    865  41b0
    866  41b0				   ._screen4_init
    867  41b0							;; _screen4_init
    868  41b0
    869  41b0				   .L086		;;  bg  =  0
    870  41b0
    871  41b0		       a9 00		      LDA	#0
    872  41b2		       8d 41 01 	      STA	bg
    873  41b5				   .L087		;;  db  =  0
    874  41b5
    875  41b5		       a9 00		      LDA	#0
    876  41b7		       8d 42 01 	      STA	db
    877  41ba				   .L088		;;  an  =  1
    878  41ba
    879  41ba		       a9 01		      LDA	#1
    880  41bc		       8d 43 01 	      STA	an
    881  41bf				   .L089		;;  w	=  0
    882  41bf
    883  41bf		       a9 00		      LDA	#0
    884  41c1		       85 fc		      STA	w
    885  41c3				   .L090		;;  gosub _screen_setup
    886  41c3
    887  41c3		       20 84 42 	      jsr	._screen_setup
    888  41c6
    889  41c6				   ._screen4_loop
    890  41c6							;; _screen4_loop
    891  41c6
    892  41c6				   .L091		;;  gosub _screen
    893  41c6
    894  41c6		       20 b1 42 	      jsr	._screen
    895  41c9
    896  41c9				   .L092		;;  if w  >  8  &&  joy0fire then w  =  0  :  goto _screen5_init
    897  41c9
    898  41c9		       a9 08		      LDA	#8
    899  41cb		       c5 fc		      CMP	w
    900  41cd		       b0 0c		      BCS	.skipL092
    901  41cf				   .condpart6
    902  41cf		       2c 02 21 	      bit	sINPT1
    903  41d2		       10 07		      BPL	.skip6then
    904  41d4				   .condpart7
    905  41d4		       a9 00		      LDA	#0
    906  41d6		       85 fc		      STA	w
    907  41d8		       4c e5 41 	      jmp	._screen5_init
    908  41db
    909  41db				   .skip6then
    910  41db				   .skipL092
    911  41db				   .L093		;;  w	=  w  +  1
    912  41db
    913  41db		       a5 fc		      LDA	w
    914  41dd		       18		      CLC
    915  41de		       69 01		      ADC	#1
    916  41e0		       85 fc		      STA	w
    917  41e2				   .L094		;;  goto _screen4_loop
    918  41e2
    919  41e2		       4c c6 41 	      jmp	._screen4_loop
    920  41e5
    921  41e5				   .
    922  41e5							;; 
    923  41e5
    924  41e5				   .L095		;;  rem with background with animation and no doublebuffering
    925  41e5
    926  41e5				   ._screen5_init
    927  41e5							;; _screen5_init
    928  41e5
    929  41e5				   .L096		;;  bg  =  1
    930  41e5
    931  41e5		       a9 01		      LDA	#1
    932  41e7		       8d 41 01 	      STA	bg
    933  41ea				   .L097		;;  db  =  0
    934  41ea
    935  41ea		       a9 00		      LDA	#0
    936  41ec		       8d 42 01 	      STA	db
    937  41ef				   .L098		;;  an  =  1
    938  41ef
    939  41ef		       a9 01		      LDA	#1
    940  41f1		       8d 43 01 	      STA	an
    941  41f4				   .L099		;;  w	=  0
    942  41f4
    943  41f4		       a9 00		      LDA	#0
    944  41f6		       85 fc		      STA	w
    945  41f8				   .L0100		;;  gosub _screen_setup
    946  41f8
    947  41f8		       20 84 42 	      jsr	._screen_setup
    948  41fb
    949  41fb				   ._screen5_loop
    950  41fb							;; _screen5_loop
    951  41fb
    952  41fb				   .L0101		;;  gosub _screen
    953  41fb
    954  41fb		       20 b1 42 	      jsr	._screen
    955  41fe
    956  41fe				   .L0102		;;  if w  >  8  &&  joy0fire then w  =  0  :  goto _screen6_init
    957  41fe
    958  41fe		       a9 08		      LDA	#8
    959  4200		       c5 fc		      CMP	w
    960  4202		       b0 0c		      BCS	.skipL0102
    961  4204				   .condpart8
    962  4204		       2c 02 21 	      bit	sINPT1
    963  4207		       10 07		      BPL	.skip8then
    964  4209				   .condpart9
    965  4209		       a9 00		      LDA	#0
    966  420b		       85 fc		      STA	w
    967  420d		       4c 1a 42 	      jmp	._screen6_init
    968  4210
    969  4210				   .skip8then
    970  4210				   .skipL0102
    971  4210				   .L0103		;;  w	=  w  +  1
    972  4210
    973  4210		       a5 fc		      LDA	w
    974  4212		       18		      CLC
    975  4213		       69 01		      ADC	#1
    976  4215		       85 fc		      STA	w
    977  4217				   .L0104		;;  goto _screen5_loop
    978  4217
    979  4217		       4c fb 41 	      jmp	._screen5_loop
    980  421a
    981  421a				   .
    982  421a							;; 
    983  421a
    984  421a				   .L0105		;;  rem with no background with animation and with doublebuffering
    985  421a
    986  421a				   ._screen6_init
    987  421a							;; _screen6_init
    988  421a
    989  421a				   .L0106		;;  bg  =  0
    990  421a
    991  421a		       a9 00		      LDA	#0
    992  421c		       8d 41 01 	      STA	bg
    993  421f				   .L0107		;;  db  =  1
    994  421f
    995  421f		       a9 01		      LDA	#1
    996  4221		       8d 42 01 	      STA	db
    997  4224				   .L0108		;;  an  =  1
    998  4224
    999  4224		       a9 01		      LDA	#1
   1000  4226		       8d 43 01 	      STA	an
   1001  4229				   .L0109		;;  w	=  0
   1002  4229
   1003  4229		       a9 00		      LDA	#0
   1004  422b		       85 fc		      STA	w
   1005  422d				   .L0110		;;  gosub _screen_setup
   1006  422d
   1007  422d		       20 84 42 	      jsr	._screen_setup
   1008  4230
   1009  4230				   ._screen6_loop
   1010  4230							;; _screen6_loop
   1011  4230
   1012  4230				   .L0111		;;  gosub _screen
   1013  4230
   1014  4230		       20 b1 42 	      jsr	._screen
   1015  4233
   1016  4233				   .L0112		;;  if w  >  8  &&  joy0fire then w  =  0  :  goto _screen7_init
   1017  4233
   1018  4233		       a9 08		      LDA	#8
   1019  4235		       c5 fc		      CMP	w
   1020  4237		       b0 0c		      BCS	.skipL0112
   1021  4239				   .condpart10
   1022  4239		       2c 02 21 	      bit	sINPT1
   1023  423c		       10 07		      BPL	.skip10then
   1024  423e				   .condpart11
   1025  423e		       a9 00		      LDA	#0
   1026  4240		       85 fc		      STA	w
   1027  4242		       4c 4f 42 	      jmp	._screen7_init
   1028  4245
   1029  4245				   .skip10then
   1030  4245				   .skipL0112
   1031  4245				   .L0113		;;  w	=  w  +  1
   1032  4245
   1033  4245		       a5 fc		      LDA	w
   1034  4247		       18		      CLC
   1035  4248		       69 01		      ADC	#1
   1036  424a		       85 fc		      STA	w
   1037  424c				   .L0114		;;  goto _screen6_loop
   1038  424c
   1039  424c		       4c 30 42 	      jmp	._screen6_loop
   1040  424f
   1041  424f				   .
   1042  424f							;; 
   1043  424f
   1044  424f				   .L0115		;;  rem with background with animation and with doublebuffering
   1045  424f
   1046  424f				   ._screen7_init
   1047  424f							;; _screen7_init
   1048  424f
   1049  424f				   .L0116		;;  bg  =  1
   1050  424f
   1051  424f		       a9 01		      LDA	#1
   1052  4251		       8d 41 01 	      STA	bg
   1053  4254				   .L0117		;;  db  =  1
   1054  4254
   1055  4254		       a9 01		      LDA	#1
   1056  4256		       8d 42 01 	      STA	db
   1057  4259				   .L0118		;;  an  =  1
   1058  4259
   1059  4259		       a9 01		      LDA	#1
   1060  425b		       8d 43 01 	      STA	an
   1061  425e				   .L0119		;;  w	=  0
   1062  425e
   1063  425e		       a9 00		      LDA	#0
   1064  4260		       85 fc		      STA	w
   1065  4262				   .L0120		;;  gosub _screen_setup
   1066  4262
   1067  4262		       20 84 42 	      jsr	._screen_setup
   1068  4265
   1069  4265				   ._screen7_loop
   1070  4265							;; _screen7_loop
   1071  4265
   1072  4265				   .L0121		;;  gosub _screen
   1073  4265
   1074  4265		       20 b1 42 	      jsr	._screen
   1075  4268
   1076  4268				   .L0122		;;  if w  >  8  &&  joy0fire then w  =  0  :  goto _screen2_init
   1077  4268
   1078  4268		       a9 08		      LDA	#8
   1079  426a		       c5 fc		      CMP	w
   1080  426c		       b0 0c		      BCS	.skipL0122
   1081  426e				   .condpart12
   1082  426e		       2c 02 21 	      bit	sINPT1
   1083  4271		       10 07		      BPL	.skip12then
   1084  4273				   .condpart13
   1085  4273		       a9 00		      LDA	#0
   1086  4275		       85 fc		      STA	w
   1087  4277		       4c 46 41 	      jmp	._screen2_init
   1088  427a
   1089  427a				   .skip12then
   1090  427a				   .skipL0122
   1091  427a				   .L0123		;;  w	=  w  +  1
   1092  427a
   1093  427a		       a5 fc		      LDA	w
   1094  427c		       18		      CLC
   1095  427d		       69 01		      ADC	#1
   1096  427f		       85 fc		      STA	w
   1097  4281				   .L0124		;;  goto _screen7_loop
   1098  4281
   1099  4281		       4c 65 42 	      jmp	._screen7_loop
   1100  4284
   1101  4284				   .
   1102  4284							;; 
   1103  4284
   1104  4284				   .L0125		;;  rem set-up screen vars
   1105  4284
   1106  4284				   ._screen_setup
   1107  4284							;; _screen_setup
   1108  4284
   1109  4284				   .L0126		;;  clearscreen
   1110  4284
   1111  4284		       20 77 f0 	      jsr	clearscreen
   1112  4287				   .L0127		;;  if db then doublebuffer on
   1113  4287
   1114  4287		       ad 42 01 	      LDA	db
   1115  428a		       f0 04		      BEQ	.skipL0127
   1116  428c				   .condpart14
   1117  428c		       a9 01		      lda	#1
   1118  428e		       85 d5		      sta	doublebufferstate
   1119  4290				   .skipL0127
   1120  4290				   .L0128		;;  if !db then doublebuffer off
   1121  4290
   1122  4290		       ad 42 01 	      LDA	db
   1123  4293		       d0 03		      BNE	.skipL0128
   1124  4295				   .condpart15
   1125  4295		       20 12 f6 	      jsr	doublebufferoff
   1126  4298				   .skipL0128
   1127  4298				   .L0129		;;  if bg then gosub drawZoneBG
   1128  4298
   1129  4298		       ad 41 01 	      LDA	bg
   1130  429b		       f0 03		      BEQ	.skipL0129
   1131  429d				   .condpart16
   1132  429d		       20 1e 45 	      jsr	.drawZoneBG
   1133  42a0
   1134  42a0				   .skipL0129
   1135  42a0				   .L0130		;;  m	=  0
   1136  42a0
   1137  42a0		       a9 00		      LDA	#0
   1138  42a2		       85 f2		      STA	m
   1139  42a4				   .L0131		;;  n	=  0
   1140  42a4
   1141  42a4		       a9 00		      LDA	#0
   1142  42a6		       85 f3		      STA	n
   1143  42a8				   .L0132		;;  c	=  0
   1144  42a8
   1145  42a8		       a9 00		      LDA	#0
   1146  42aa		       85 e8		      STA	c
   1147  42ac				   .L0133		;;  f	=  0
   1148  42ac
   1149  42ac		       a9 00		      LDA	#0
   1150  42ae		       85 eb		      STA	f
   1151  42b0				   .L0134		;;  return
   1152  42b0
   1153  42b0		       60		      RTS
   1154  42b1				   .
   1155  42b1							;; 
   1156  42b1
   1157  42b1				   .L0135		;;  rem draw screen
   1158  42b1
   1159  42b1				   ._screen
   1160  42b1							;; _screen
   1161  42b1
   1162  42b1				   .L0136		;;  if bg then restorescreen
   1163  42b1
   1164  42b1		       ad 41 01 	      LDA	bg
   1165  42b4		       f0 03		      BEQ	.skipL0136
   1166  42b6				   .condpart17
   1167  42b6		       20 89 f0 	      jsr	restorescreen
   1168  42b9				   .skipL0136
   1169  42b9				   .L0137		;;  if !bg then clearscreen
   1170  42b9
   1171  42b9		       ad 41 01 	      LDA	bg
   1172  42bc		       d0 03		      BNE	.skipL0137
   1173  42be				   .condpart18
   1174  42be		       20 77 f0 	      jsr	clearscreen
   1175  42c1				   .skipL0137
   1176  42c1				   .L0138		;;  y	=  0
   1177  42c1
   1178  42c1		       a9 00		      LDA	#0
   1179  42c3		       85 fe		      STA	y
   1180  42c5				   .L0139		;;  x	=  0
   1181  42c5
   1182  42c5		       a9 00		      LDA	#0
   1183  42c7		       85 fd		      STA	x
   1184  42c9				   .L0140		;;  c	=  0
   1185  42c9
   1186  42c9		       a9 00		      LDA	#0
   1187  42cb		       85 e8		      STA	c
   1188  42cd				   .L0141		;;  for i  =  0 to n
   1189  42cd
   1190  42cd		       a9 00		      LDA	#0
   1191  42cf		       85 ee		      STA	i
   1192  42d1				   .L0141fori
   1193  42d1				   .L0142		;;  for j  =  0 to m
   1194  42d1
   1195  42d1		       a9 00		      LDA	#0
   1196  42d3		       85 ef		      STA	j
   1197  42d5				   .L0142forj
   1198  42d5				   .L0143		;;  plotsprite g8x8_4color c x y f
   1199  42d5
   1200  42d5		       a9 00		      lda	#<g8x8_4color
   1201  42d7		       a0 02		      ldy	#g8x8_4color_width
   1202  42d9		       18		      clc
   1203  42da		       f0 05		      beq	plotspritewidthskip3
   1204  42dc				   plotspritewidthloop3
   1205  42dc		       65 eb		      adc	f
   1206  42de		       88		      dey
   1207  42df		       d0 fb		      bne	plotspritewidthloop3
   1208  42e1				   plotspritewidthskip3
   1209  42e1		       85 42		      sta	temp1
   1210  42e3
   1211  42e3		       a9 e0		      lda	#>g8x8_4color
   1212  42e5		       85 43		      sta	temp2
   1213  42e7
   1214  42e7		       a5 e8		      lda	c
   1215  42e9		       0a		      asl
   1216  42ea		       0a		      asl
   1217  42eb		       0a		      asl
   1218  42ec		       0a		      asl
   1219  42ed		       0a		      asl
   1220  42ee		       09 1e		      ora	#g8x8_4color_width_twoscompliment
   1221  42f0		       85 44		      sta	temp3
   1222  42f2
   1223  42f2		       a5 fd		      lda	x
   1224  42f4		       85 45		      sta	temp4
   1225  42f6
   1226  42f6		       a5 fe		      lda	y
   1227  42f8		       85 46		      sta	temp5
   1228  42fa
   1229  42fa		       a9 40		      lda	#(g8x8_4color_mode|%01000000)
   1230  42fc		       85 47		      sta	temp6
   1231  42fe
   1232  42fe		       20 9d f2 	      jsr	plotsprite
   1233  4301				   .L0144		;;  x	=  x  +  8
   1234  4301
   1235  4301		       a5 fd		      LDA	x
   1236  4303		       18		      CLC
   1237  4304		       69 08		      ADC	#8
   1238  4306		       85 fd		      STA	x
   1239  4308				   .L0145		;;  next
   1240  4308
   1241  4308		       a5 ef		      LDA	j
   1242  430a		       c5 f2		      CMP	m
   1243  430c		       e6 ef		      INC	j
   1244  430e					      if	((* - .L0142forj) < 127) && ((* - .L0142forj) > -128)
   1245  430e		       90 c5		      bcc	.L0142forj
   1246  4310				  -	      else
   1247  4310				  -	      bcs	.0skipL0142forj
   1248  4310				  -	      jmp	.L0142forj
   1249  4310				  -.0skipL0142forj
   1250  4310					      endif
   1251  4310				   .L0146		;;  x	=  0
   1252  4310
   1253  4310		       a9 00		      LDA	#0
   1254  4312		       85 fd		      STA	x
   1255  4314				   .L0147		;;  y	=  y  +  8
   1256  4314
   1257  4314		       a5 fe		      LDA	y
   1258  4316		       18		      CLC
   1259  4317		       69 08		      ADC	#8
   1260  4319		       85 fe		      STA	y
   1261  431b				   .L0148		;;  c	=  c  +  1
   1262  431b
   1263  431b		       a5 e8		      LDA	c
   1264  431d		       18		      CLC
   1265  431e		       69 01		      ADC	#1
   1266  4320		       85 e8		      STA	c
   1267  4322				   .L0149		;;  if c  >  6 then c	=  0
   1268  4322
   1269  4322		       a9 06		      LDA	#6
   1270  4324		       c5 e8		      CMP	c
   1271  4326		       b0 04		      BCS	.skipL0149
   1272  4328				   .condpart19
   1273  4328		       a9 00		      LDA	#0
   1274  432a		       85 e8		      STA	c
   1275  432c				   .skipL0149
   1276  432c				   .L0150		;;  next
   1277  432c
   1278  432c		       a5 ee		      LDA	i
   1279  432e		       c5 f3		      CMP	n
   1280  4330		       e6 ee		      INC	i
   1281  4332					      if	((* - .L0141fori) < 127) && ((* - .L0141fori) > -128)
   1282  4332		       90 9d		      bcc	.L0141fori
   1283  4334				  -	      else
   1284  4334				  -	      bcs	.1skipL0141fori
   1285  4334				  -	      jmp	.L0141fori
   1286  4334				  -.1skipL0141fori
   1287  4334					      endif
   1288  4334				   .L0151		;;  if w  >  8  &&  joy0right then w  = 0  :  m  =  m	+  1
   1289  4334
   1290  4334		       a9 08		      LDA	#8
   1291  4336		       c5 fc		      CMP	w
   1292  4338		       b0 10		      BCS	.skipL0151
   1293  433a				   .condpart20
   1294  433a		       2c 80 02 	      bit	SWCHA
   1295  433d		       30 0b		      BMI	.skip20then
   1296  433f				   .condpart21
   1297  433f		       a9 00		      LDA	#0
   1298  4341		       85 fc		      STA	w
   1299  4343		       a5 f2		      LDA	m
   1300  4345		       18		      CLC
   1301  4346		       69 01		      ADC	#1
   1302  4348		       85 f2		      STA	m
   1303  434a				   .skip20then
   1304  434a				   .skipL0151
   1305  434a				   .L0152		;;  if w  >  8  &&  joy0down then w  =  0  :  n  =  n	+  1
   1306  434a
   1307  434a		       a9 08		      LDA	#8
   1308  434c		       c5 fc		      CMP	w
   1309  434e		       b0 12		      BCS	.skipL0152
   1310  4350				   .condpart22
   1311  4350		       a9 20		      lda	#$20
   1312  4352		       2c 80 02 	      bit	SWCHA
   1313  4355		       d0 0b		      BNE	.skip22then
   1314  4357				   .condpart23
   1315  4357		       a9 00		      LDA	#0
   1316  4359		       85 fc		      STA	w
   1317  435b		       a5 f3		      LDA	n
   1318  435d		       18		      CLC
   1319  435e		       69 01		      ADC	#1
   1320  4360		       85 f3		      STA	n
   1321  4362				   .skip22then
   1322  4362				   .skipL0152
   1323  4362				   .L0153		;;  if w  >  8  &&  joy0left then w  = 0  :  m  =  m  -  1
   1324  4362
   1325  4362		       a9 08		      LDA	#8
   1326  4364		       c5 fc		      CMP	w
   1327  4366		       b0 10		      BCS	.skipL0153
   1328  4368				   .condpart24
   1329  4368		       2c 80 02 	      bit	SWCHA
   1330  436b		       70 0b		      BVS	.skip24then
   1331  436d				   .condpart25
   1332  436d		       a9 00		      LDA	#0
   1333  436f		       85 fc		      STA	w
   1334  4371		       a5 f2		      LDA	m
   1335  4373		       38		      SEC
   1336  4374		       e9 01		      SBC	#1
   1337  4376		       85 f2		      STA	m
   1338  4378				   .skip24then
   1339  4378				   .skipL0153
   1340  4378				   .L0154		;;  if w  >  8  &&  joy0up then w  =  0  :  n	=  n  -  1
   1341  4378
   1342  4378		       a9 08		      LDA	#8
   1343  437a		       c5 fc		      CMP	w
   1344  437c		       b0 12		      BCS	.skipL0154
   1345  437e				   .condpart26
   1346  437e		       a9 10		      lda	#$10
   1347  4380		       2c 80 02 	      bit	SWCHA
   1348  4383		       d0 0b		      BNE	.skip26then
   1349  4385				   .condpart27
   1350  4385		       a9 00		      LDA	#0
   1351  4387		       85 fc		      STA	w
   1352  4389		       a5 f3		      LDA	n
   1353  438b		       38		      SEC
   1354  438c		       e9 01		      SBC	#1
   1355  438e		       85 f3		      STA	n
   1356  4390				   .skip26then
   1357  4390				   .skipL0154
   1358  4390				   .L0155		;;  if n  >  24 then n  =  0
   1359  4390
   1360  4390		       a9 18		      LDA	#24
   1361  4392		       c5 f3		      CMP	n
   1362  4394		       b0 04		      BCS	.skipL0155
   1363  4396				   .condpart28
   1364  4396		       a9 00		      LDA	#0
   1365  4398		       85 f3		      STA	n
   1366  439a				   .skipL0155
   1367  439a				   .L0156		;;  if m  >  20 then m  =  0
   1368  439a
   1369  439a		       a9 14		      LDA	#20
   1370  439c		       c5 f2		      CMP	m
   1371  439e		       b0 04		      BCS	.skipL0156
   1372  43a0				   .condpart29
   1373  43a0		       a9 00		      LDA	#0
   1374  43a2		       85 f2		      STA	m
   1375  43a4				   .skipL0156
   1376  43a4				   .L0157		;;  if an  =  1 then f  =  f  +  1
   1377  43a4
   1378  43a4		       ad 43 01 	      LDA	an
   1379  43a7		       c9 01		      CMP	#1
   1380  43a9		       d0 07		      BNE	.skipL0157
   1381  43ab				   .condpart30
   1382  43ab		       a5 eb		      LDA	f
   1383  43ad		       18		      CLC
   1384  43ae		       69 01		      ADC	#1
   1385  43b0		       85 eb		      STA	f
   1386  43b2				   .skipL0157
   1387  43b2				   .L0158		;;  if an  =  1  &&  f  >  7 then f  =  0
   1388  43b2
   1389  43b2		       ad 43 01 	      LDA	an
   1390  43b5		       c9 01		      CMP	#1
   1391  43b7		       d0 0a		      BNE	.skipL0158
   1392  43b9				   .condpart31
   1393  43b9		       a9 07		      LDA	#7
   1394  43bb		       c5 eb		      CMP	f
   1395  43bd		       b0 04		      BCS	.skip31then
   1396  43bf				   .condpart32
   1397  43bf		       a9 00		      LDA	#0
   1398  43c1		       85 eb		      STA	f
   1399  43c3				   .skip31then
   1400  43c3				   .skipL0158
   1401  43c3				   .
   1402  43c3							;; 
   1403  43c3
   1404  43c3				   .L0159		;;  rem plotchars 'joystick to draw fire to next' 7 10 23 1
   1405  43c3
   1406  43c3				   .L0160		;;  r	=  n  +  1
   1407  43c3
   1408  43c3		       a5 f3		      LDA	n
   1409  43c5		       18		      CLC
   1410  43c6		       69 01		      ADC	#1
   1411  43c8		       85 f7		      STA	r
   1412  43ca				   .L0161		;;  s	=  m  +  1
   1413  43ca
   1414  43ca		       a5 f2		      LDA	m
   1415  43cc		       18		      CLC
   1416  43cd		       69 01		      ADC	#1
   1417  43cf		       85 f8		      STA	s
   1418  43d1				   .
   1419  43d1							;; 
   1420  43d1
   1421  43d1				   .L0162		;;  plotvalue font 4 s 2 8 23
   1422  43d1
   1423  43d1		       a9 38		      lda	#<font
   1424  43d3		       85 42		      sta	temp1
   1425  43d5
   1426  43d5		       a9 e0		      lda	#>font
   1427  43d7		       85 43		      sta	temp2
   1428  43d9
   1429  43d9		       ad 06 21 	      lda	charactermode
   1430  43dc		       85 4a		      sta	temp9
   1431  43de		       a9 60		      lda	#(font_mode | %01100000)
   1432  43e0		       8d 06 21 	      sta	charactermode
   1433  43e3		       a9 1e		      lda	#30	; width in two's complement
   1434  43e5		       09 80		      ora	#128	; palette left shifted 5 bits
   1435  43e7		       85 44		      sta	temp3
   1436  43e9		       a9 08		      lda	#8
   1437  43eb		       85 45		      sta	temp4
   1438  43ed
   1439  43ed		       a9 17		      lda	#23
   1440  43ef		       85 46		      sta	temp5
   1441  43f1
   1442  43f1		       a9 02		      lda	#2
   1443  43f3		       85 47		      sta	temp6
   1444  43f5
   1445  43f5		       a9 f8		      lda	#<s
   1446  43f7		       85 48		      sta	temp7
   1447  43f9
   1448  43f9		       a9 00		      lda	#>s
   1449  43fb		       85 49		      sta	temp8
   1450  43fd
   1451  43fd		       20 d0 f3 	      jsr	plotvalue
   1452  43fd		       00 01	   USED_PLOTVALUE =	1
   1453  4400		       a5 4a		      lda	temp9
   1454  4402		       8d 06 21 	      sta	charactermode
   1455  4405				   .L0163		;;  plotvalue font 4 r 2 24 23
   1456  4405
   1457  4405		       a9 38		      lda	#<font
   1458  4407		       85 42		      sta	temp1
   1459  4409
   1460  4409		       a9 e0		      lda	#>font
   1461  440b		       85 43		      sta	temp2
   1462  440d
   1463  440d		       ad 06 21 	      lda	charactermode
   1464  4410		       85 4a		      sta	temp9
   1465  4412		       a9 60		      lda	#(font_mode | %01100000)
   1466  4414		       8d 06 21 	      sta	charactermode
   1467  4417		       a9 1e		      lda	#30	; width in two's complement
   1468  4419		       09 80		      ora	#128	; palette left shifted 5 bits
   1469  441b		       85 44		      sta	temp3
   1470  441d		       a9 18		      lda	#24
   1471  441f		       85 45		      sta	temp4
   1472  4421
   1473  4421		       a9 17		      lda	#23
   1474  4423		       85 46		      sta	temp5
   1475  4425
   1476  4425		       a9 02		      lda	#2
   1477  4427		       85 47		      sta	temp6
   1478  4429
   1479  4429		       a9 f7		      lda	#<r
   1480  442b		       85 48		      sta	temp7
   1481  442d
   1482  442d		       a9 00		      lda	#>r
   1483  442f		       85 49		      sta	temp8
   1484  4431
   1485  4431		       20 d0 f3 	      jsr	plotvalue
   1486  4431		       00 01	   USED_PLOTVALUE =	1
   1487  4434		       a5 4a		      lda	temp9
   1488  4436		       8d 06 21 	      sta	charactermode
   1489  4439				   .L0164		;;  plotvalue font 4 z 2 40 23
   1490  4439
   1491  4439		       a9 38		      lda	#<font
   1492  443b		       85 42		      sta	temp1
   1493  443d
   1494  443d		       a9 e0		      lda	#>font
   1495  443f		       85 43		      sta	temp2
   1496  4441
   1497  4441		       ad 06 21 	      lda	charactermode
   1498  4444		       85 4a		      sta	temp9
   1499  4446		       a9 60		      lda	#(font_mode | %01100000)
   1500  4448		       8d 06 21 	      sta	charactermode
   1501  444b		       a9 1e		      lda	#30	; width in two's complement
   1502  444d		       09 80		      ora	#128	; palette left shifted 5 bits
   1503  444f		       85 44		      sta	temp3
   1504  4451		       a9 28		      lda	#40
   1505  4453		       85 45		      sta	temp4
   1506  4455
   1507  4455		       a9 17		      lda	#23
   1508  4457		       85 46		      sta	temp5
   1509  4459
   1510  4459		       a9 02		      lda	#2
   1511  445b		       85 47		      sta	temp6
   1512  445d
   1513  445d		       a9 ff		      lda	#<z
   1514  445f		       85 48		      sta	temp7
   1515  4461
   1516  4461		       a9 00		      lda	#>z
   1517  4463		       85 49		      sta	temp8
   1518  4465
   1519  4465		       20 d0 f3 	      jsr	plotvalue
   1520  4465		       00 01	   USED_PLOTVALUE =	1
   1521  4468		       a5 4a		      lda	temp9
   1522  446a		       8d 06 21 	      sta	charactermode
   1523  446d				   .L0165		;;  plotvalue font 4 bg 2 56 23
   1524  446d
   1525  446d		       a9 38		      lda	#<font
   1526  446f		       85 42		      sta	temp1
   1527  4471
   1528  4471		       a9 e0		      lda	#>font
   1529  4473		       85 43		      sta	temp2
   1530  4475
   1531  4475		       ad 06 21 	      lda	charactermode
   1532  4478		       85 4a		      sta	temp9
   1533  447a		       a9 60		      lda	#(font_mode | %01100000)
   1534  447c		       8d 06 21 	      sta	charactermode
   1535  447f		       a9 1e		      lda	#30	; width in two's complement
   1536  4481		       09 80		      ora	#128	; palette left shifted 5 bits
   1537  4483		       85 44		      sta	temp3
   1538  4485		       a9 38		      lda	#56
   1539  4487		       85 45		      sta	temp4
   1540  4489
   1541  4489		       a9 17		      lda	#23
   1542  448b		       85 46		      sta	temp5
   1543  448d
   1544  448d		       a9 02		      lda	#2
   1545  448f		       85 47		      sta	temp6
   1546  4491
   1547  4491		       a9 41		      lda	#<bg
   1548  4493		       85 48		      sta	temp7
   1549  4495
   1550  4495		       a9 01		      lda	#>bg
   1551  4497		       85 49		      sta	temp8
   1552  4499
   1553  4499		       20 d0 f3 	      jsr	plotvalue
   1554  4499		       00 01	   USED_PLOTVALUE =	1
   1555  449c		       a5 4a		      lda	temp9
   1556  449e		       8d 06 21 	      sta	charactermode
   1557  44a1				   .L0166		;;  plotvalue font 4 an 2 72 23
   1558  44a1
   1559  44a1		       a9 38		      lda	#<font
   1560  44a3		       85 42		      sta	temp1
   1561  44a5
   1562  44a5		       a9 e0		      lda	#>font
   1563  44a7		       85 43		      sta	temp2
   1564  44a9
   1565  44a9		       ad 06 21 	      lda	charactermode
   1566  44ac		       85 4a		      sta	temp9
   1567  44ae		       a9 60		      lda	#(font_mode | %01100000)
   1568  44b0		       8d 06 21 	      sta	charactermode
   1569  44b3		       a9 1e		      lda	#30	; width in two's complement
   1570  44b5		       09 80		      ora	#128	; palette left shifted 5 bits
   1571  44b7		       85 44		      sta	temp3
   1572  44b9		       a9 48		      lda	#72
   1573  44bb		       85 45		      sta	temp4
   1574  44bd
   1575  44bd		       a9 17		      lda	#23
   1576  44bf		       85 46		      sta	temp5
   1577  44c1
   1578  44c1		       a9 02		      lda	#2
   1579  44c3		       85 47		      sta	temp6
   1580  44c5
   1581  44c5		       a9 43		      lda	#<an
   1582  44c7		       85 48		      sta	temp7
   1583  44c9
   1584  44c9		       a9 01		      lda	#>an
   1585  44cb		       85 49		      sta	temp8
   1586  44cd
   1587  44cd		       20 d0 f3 	      jsr	plotvalue
   1588  44cd		       00 01	   USED_PLOTVALUE =	1
   1589  44d0		       a5 4a		      lda	temp9
   1590  44d2		       8d 06 21 	      sta	charactermode
   1591  44d5				   .L0167		;;  plotvalue font 4 db 2 88 23
   1592  44d5
   1593  44d5		       a9 38		      lda	#<font
   1594  44d7		       85 42		      sta	temp1
   1595  44d9
   1596  44d9		       a9 e0		      lda	#>font
   1597  44db		       85 43		      sta	temp2
   1598  44dd
   1599  44dd		       ad 06 21 	      lda	charactermode
   1600  44e0		       85 4a		      sta	temp9
   1601  44e2		       a9 60		      lda	#(font_mode | %01100000)
   1602  44e4		       8d 06 21 	      sta	charactermode
   1603  44e7		       a9 1e		      lda	#30	; width in two's complement
   1604  44e9		       09 80		      ora	#128	; palette left shifted 5 bits
   1605  44eb		       85 44		      sta	temp3
   1606  44ed		       a9 58		      lda	#88
   1607  44ef		       85 45		      sta	temp4
   1608  44f1
   1609  44f1		       a9 17		      lda	#23
   1610  44f3		       85 46		      sta	temp5
   1611  44f5
   1612  44f5		       a9 02		      lda	#2
   1613  44f7		       85 47		      sta	temp6
   1614  44f9
   1615  44f9		       a9 42		      lda	#<db
   1616  44fb		       85 48		      sta	temp7
   1617  44fd
   1618  44fd		       a9 01		      lda	#>db
   1619  44ff		       85 49		      sta	temp8
   1620  4501
   1621  4501		       20 d0 f3 	      jsr	plotvalue
   1622  4501		       00 01	   USED_PLOTVALUE =	1
   1623  4504		       a5 4a		      lda	temp9
   1624  4506		       8d 06 21 	      sta	charactermode
   1625  4509				   .
   1626  4509							;; 
   1627  4509
   1628  4509				   .L0168		;;  if db then doublebuffer flip
   1629  4509
   1630  4509		       ad 42 01 	      LDA	db
   1631  450c		       f0 03		      BEQ	.skipL0168
   1632  450e				   .condpart33
   1633  450e		       20 9f f5 	      jsr	flipdisplaybuffer
   1634  4511				   .skipL0168
   1635  4511				   .L0169		;;  if !db then drawscreen
   1636  4511
   1637  4511		       ad 42 01 	      LDA	db
   1638  4514		       d0 03		      BNE	.skipL0169
   1639  4516				   .condpart34
   1640  4516		       20 b3 f0 	      jsr	drawscreen
   1641  4519				   .skipL0169
   1642  4519				   .L0170		;;  z	=  0
   1643  4519
   1644  4519		       a9 00		      LDA	#0
   1645  451b		       85 ff		      STA	z
   1646  451d				   .L0171		;;  return
   1647  451d
   1648  451d		       60		      RTS
   1649  451e				   .
   1650  451e							;; 
   1651  451e
   1652  451e				   .L0172		;;  rem draw sprites with arrow no bg
   1653  451e
   1654  451e				   .
   1655  451e							;; 
   1656  451e
   1657  451e				   .
   1658  451e							;; 
   1659  451e
   1660  451e				   .
   1661  451e							;; 
   1662  451e
   1663  451e				   .
   1664  451e							;; 
   1665  451e
   1666  451e				   .
   1667  451e							;; 
   1668  451e
   1669  451e				   .
   1670  451e							;; 
   1671  451e
   1672  451e				   .
   1673  451e							;; 
   1674  451e
   1675  451e				   .
   1676  451e							;; 
   1677  451e
   1678  451e				   .
   1679  451e							;; 
   1680  451e
   1681  451e				   .
   1682  451e							;; 
   1683  451e
   1684  451e				   .
   1685  451e							;; 
   1686  451e
   1687  451e				   .
   1688  451e							;; 
   1689  451e
   1690  451e				   .
   1691  451e							;; 
   1692  451e
   1693  451e				   .
   1694  451e							;; 
   1695  451e
   1696  451e				   .
   1697  451e							;; 
   1698  451e
   1699  451e				   .
   1700  451e							;; 
   1701  451e
   1702  451e				   .
   1703  451e							;; 
   1704  451e
   1705  451e				   .
   1706  451e							;; 
   1707  451e
   1708  451e				   .
   1709  451e							;; 
   1710  451e
   1711  451e				   .
   1712  451e							;; 
   1713  451e
   1714  451e				   .
   1715  451e							;; 
   1716  451e
   1717  451e				   .
   1718  451e							;; 
   1719  451e
   1720  451e				   .
   1721  451e							;; 
   1722  451e
   1723  451e				   .
   1724  451e							;; 
   1725  451e
   1726  451e				   .
   1727  451e							;; 
   1728  451e
   1729  451e				   .
   1730  451e							;; 
   1731  451e
   1732  451e				   .
   1733  451e							;; 
   1734  451e
   1735  451e				   .
   1736  451e							;; 
   1737  451e
   1738  451e				   .
   1739  451e							;; 
   1740  451e
   1741  451e				   .
   1742  451e							;; 
   1743  451e
   1744  451e				   .
   1745  451e							;; 
   1746  451e
   1747  451e				   .
   1748  451e							;; 
   1749  451e
   1750  451e				   .
   1751  451e							;; 
   1752  451e
   1753  451e				   .
   1754  451e							;; 
   1755  451e
   1756  451e				   .
   1757  451e							;; 
   1758  451e
   1759  451e				   .
   1760  451e							;; 
   1761  451e
   1762  451e				   .
   1763  451e							;; 
   1764  451e
   1765  451e				   .
   1766  451e							;; 
   1767  451e
   1768  451e				   .
   1769  451e							;; 
   1770  451e
   1771  451e				   .
   1772  451e							;; 
   1773  451e
   1774  451e				   .
   1775  451e							;; 
   1776  451e
   1777  451e				   .
   1778  451e							;; 
   1779  451e
   1780  451e				   .
   1781  451e							;; 
   1782  451e
   1783  451e				   .
   1784  451e							;; 
   1785  451e
   1786  451e				   .
   1787  451e							;; 
   1788  451e
   1789  451e				   .
   1790  451e							;; 
   1791  451e
   1792  451e				   .
   1793  451e							;; 
   1794  451e
   1795  451e				   .
   1796  451e							;; 
   1797  451e
   1798  451e				   .
   1799  451e							;; 
   1800  451e
   1801  451e				   .
   1802  451e							;; 
   1803  451e
   1804  451e				   .
   1805  451e							;; 
   1806  451e
   1807  451e				   .
   1808  451e							;; 
   1809  451e
   1810  451e				   .
   1811  451e							;; 
   1812  451e
   1813  451e				   .
   1814  451e							;; 
   1815  451e
   1816  451e				   .
   1817  451e							;; 
   1818  451e
   1819  451e				   .
   1820  451e							;; 
   1821  451e
   1822  451e				   .
   1823  451e							;; 
   1824  451e
   1825  451e				   .
   1826  451e							;; 
   1827  451e
   1828  451e				   .
   1829  451e							;; 
   1830  451e
   1831  451e				   .
   1832  451e							;; 
   1833  451e
   1834  451e				   .
   1835  451e							;; 
   1836  451e
   1837  451e				   .
   1838  451e							;; 
   1839  451e
   1840  451e				   .
   1841  451e							;; 
   1842  451e
   1843  451e				   .
   1844  451e							;; 
   1845  451e
   1846  451e				   .
   1847  451e							;; 
   1848  451e
   1849  451e				   .
   1850  451e							;; 
   1851  451e
   1852  451e				   .
   1853  451e							;; 
   1854  451e
   1855  451e				   .
   1856  451e							;; 
   1857  451e
   1858  451e				   .
   1859  451e							;; 
   1860  451e
   1861  451e				   .
   1862  451e							;; 
   1863  451e
   1864  451e				   .
   1865  451e							;; 
   1866  451e
   1867  451e				   .
   1868  451e							;; 
   1869  451e
   1870  451e				   .
   1871  451e							;; 
   1872  451e
   1873  451e				   .
   1874  451e							;; 
   1875  451e
   1876  451e				   .
   1877  451e							;; 
   1878  451e
   1879  451e				   .
   1880  451e							;; 
   1881  451e
   1882  451e				   .
   1883  451e							;; 
   1884  451e
   1885  451e				   .drawZoneBG
   1886  451e							;; drawZoneBG
   1887  451e
   1888  451e				   .L0173		;;  x	=  0
   1889  451e
   1890  451e		       a9 00		      LDA	#0
   1891  4520		       85 fd		      STA	x
   1892  4522				   .L0174		;;  y	=  0
   1893  4522
   1894  4522		       a9 00		      LDA	#0
   1895  4524		       85 fe		      STA	y
   1896  4526				   .L0175		;;  for j  =  0 to 10
   1897  4526
   1898  4526		       a9 00		      LDA	#0
   1899  4528		       85 ef		      STA	j
   1900  452a				   .L0175forj
   1901  452a				   .L0176		;;  for i  =  0 to 1
   1902  452a
   1903  452a		       a9 00		      LDA	#0
   1904  452c		       85 ee		      STA	i
   1905  452e				   .L0176fori
   1906  452e				   .L0177		;;  plotsprite zonebg80x16_8 7 x y 0
   1907  452e
   1908  452e		       a9 10		      lda	#<zonebg80x16_8
   1909  4530		       85 42		      sta	temp1
   1910  4532
   1911  4532		       a9 e0		      lda	#>zonebg80x16_8
   1912  4534		       85 43		      sta	temp2
   1913  4536
   1914  4536		       a9 ec		      lda	#(224|zonebg80x16_8_width_twoscompliment)
   1915  4538		       85 44		      sta	temp3
   1916  453a
   1917  453a		       a5 fd		      lda	x
   1918  453c		       85 45		      sta	temp4
   1919  453e
   1920  453e		       a5 fe		      lda	y
   1921  4540		       85 46		      sta	temp5
   1922  4542
   1923  4542		       a9 40		      lda	#(zonebg80x16_8_mode|%01000000)
   1924  4544		       85 47		      sta	temp6
   1925  4546
   1926  4546		       20 9d f2 	      jsr	plotsprite
   1927  4549							; +tall sprite replot
   1928  4549		       18		      clc
   1929  454a		       a5 42		      lda	temp1
   1930  454c		       69 14		      adc	#zonebg80x16_8_width
   1931  454e		       85 42		      sta	temp1
   1932  4550		       a5 46		      lda	temp5
   1933  4552		       69 08		      adc	#WZONEHEIGHT
   1934  4554		       85 46		      sta	temp5
   1935  4556		       20 9d f2 	      jsr	plotsprite
   1936  4559				   .L0178		;;  x	=  x  +  80
   1937  4559
   1938  4559		       a5 fd		      LDA	x
   1939  455b		       18		      CLC
   1940  455c		       69 50		      ADC	#80
   1941  455e		       85 fd		      STA	x
   1942  4560				   .L0179		;;  next
   1943  4560
   1944  4560		       a5 ee		      LDA	i
   1945  4562		       c9 01		      CMP	#1
   1946  4564		       e6 ee		      INC	i
   1947  4566					      if	((* - .L0176fori) < 127) && ((* - .L0176fori) > -128)
   1948  4566		       90 c6		      bcc	.L0176fori
   1949  4568				  -	      else
   1950  4568				  -	      bcs	.2skipL0176fori
   1951  4568				  -	      jmp	.L0176fori
   1952  4568				  -.2skipL0176fori
   1953  4568					      endif
   1954  4568				   .L0180		;;  x	=  0
   1955  4568
   1956  4568		       a9 00		      LDA	#0
   1957  456a		       85 fd		      STA	x
   1958  456c				   .L0181		;;  y	=  y  +  16
   1959  456c
   1960  456c		       a5 fe		      LDA	y
   1961  456e		       18		      CLC
   1962  456f		       69 10		      ADC	#16
   1963  4571		       85 fe		      STA	y
   1964  4573				   .L0182		;;  next
   1965  4573
   1966  4573		       a5 ef		      LDA	j
   1967  4575		       c9 0a		      CMP	#10
   1968  4577		       e6 ef		      INC	j
   1969  4579					      if	((* - .L0175forj) < 127) && ((* - .L0175forj) > -128)
   1970  4579		       90 af		      bcc	.L0175forj
   1971  457b				  -	      else
   1972  457b				  -	      bcs	.3skipL0175forj
   1973  457b				  -	      jmp	.L0175forj
   1974  457b				  -.3skipL0175forj
   1975  457b					      endif
   1976  457b				   .L0183		;;  savescreen
   1977  457b
   1978  457b		       20 9b f0 	      jsr	savescreen
   1979  457e				   .L0184		;;  return
   1980  457e
   1981  457e		       60		      RTS
   1982  457f				   .
   1983  457f							;; 
   1984  457f
   1985  457f				   .topscreenroutine
   1986  457f							;; topscreenroutine
   1987  457f
   1988  457f				   .L0185		;;  z	=  z  +  1
   1989  457f
   1990  457f		       a5 ff		      LDA	z
   1991  4581		       18		      CLC
   1992  4582		       69 01		      ADC	#1
   1993  4584		       85 ff		      STA	z
   1994  4586				   .L0186		;;  return
   1995  4586		       60		      RTS
   1996  4586				   DMAHOLEEND0 SET	.
   1997  4587				   gameend
   1998  4587				   DMAHOLEEND0 SET	.
   39545 bytes of ROM space left in the main area.
   1999  4587					      echo	" ",[($E000 - gameend)]d , "bytes of ROM space left in the main area."
   2000  4587
   2001  e000					      ORG	$E000,0	; *************
   2002  e000
   2003  e000				   g8x8_4color
   2004  e000		       aa aa		      HEX	aaaa
   2005  e002				   g8x8_4color2
   2006  e002		       aa aa		      HEX	aaaa
   2007  e004				   g8x8_4color3
   2008  e004		       ff ff		      HEX	ffff
   2009  e006				   g8x8_4color4
   2010  e006		       ff ff		      HEX	ffff
   2011  e008				   g8x8_4color5
   2012  e008		       55 55		      HEX	5555
   2013  e00a				   g8x8_4color6
   2014  e00a		       55 55		      HEX	5555
   2015  e00c				   g8x8_4color7
   2016  e00c		       00 00		      HEX	0000
   2017  e00e				   g8x8_4color8
   2018  e00e		       00 00		      HEX	0000
   2019  e010				   zonebg80x16_8
   2020  e010		       aa aa aa aa*	      HEX	aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
   2021  e024				   zonebg80x16_8_tallsprite_00
   2022  e024		       aa aa aa aa*	      HEX	aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
   2023  e038				   font
   2024  e038		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000000000000000000000000000
   2025  e058		       00 00 00 00*	      HEX	000000000000000000004000540000000000000000
   2026  e06d
   2027  e100					      ORG	$E100,0	; *************
   2028  e100
   2029  e100							;g8x8_4color
   2030  e100		       aa aa		      HEX	aaaa
   2031  e102							;g8x8_4color2
   2032  e102		       ff ff		      HEX	ffff
   2033  e104							;g8x8_4color3
   2034  e104		       ff ff		      HEX	ffff
   2035  e106							;g8x8_4color4
   2036  e106		       55 55		      HEX	5555
   2037  e108							;g8x8_4color5
   2038  e108		       55 55		      HEX	5555
   2039  e10a							;g8x8_4color6
   2040  e10a		       00 00		      HEX	0000
   2041  e10c							;g8x8_4color7
   2042  e10c		       00 00		      HEX	0000
   2043  e10e							;g8x8_4color8
   2044  e10e		       aa aa		      HEX	aaaa
   2045  e110							;zonebg80x16_8
   2046  e110		       aa aa aa aa*	      HEX	aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
   2047  e124							;zonebg80x16_8_tallsprite_00
   2048  e124		       aa aa aa aa*	      HEX	aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
   2049  e138							;font
   2050  e138		       54 54 54 54*	      HEX	5454545404545410545444505450544054445454445444445440044454105410
   2051  e158		       44 44 10 54*	      HEX	444410544000101040101000000440545414154000
   2052  e16d
   2053  e200					      ORG	$E200,0	; *************
   2054  e200
   2055  e200							;g8x8_4color
   2056  e200		       ff ff		      HEX	ffff
   2057  e202							;g8x8_4color2
   2058  e202		       ff ff		      HEX	ffff
   2059  e204							;g8x8_4color3
   2060  e204		       55 55		      HEX	5555
   2061  e206							;g8x8_4color4
   2062  e206		       55 55		      HEX	5555
   2063  e208							;g8x8_4color5
   2064  e208		       00 00		      HEX	0000
   2065  e20a							;g8x8_4color6
   2066  e20a		       00 00		      HEX	0000
   2067  e20c							;g8x8_4color7
   2068  e20c		       aa aa		      HEX	aaaa
   2069  e20e							;g8x8_4color8
   2070  e20e		       aa aa		      HEX	aaaa
   2071  e210							;zonebg80x16_8
   2072  e210		       aa aa aa aa*	      HEX	aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
   2073  e224							;zonebg80x16_8_tallsprite_00
   2074  e224		       aa aa aa aa*	      HEX	aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
   2075  e238							;font
   2076  e238		       44 10 40 04*	      HEX	4410400404444410440444444044404044441044444044444440504404104454
   2077  e258		       54 44 10 40*	      HEX	544410405000000040000000001010400441401000
   2078  e26d
   2079  e300					      ORG	$E300,0	; *************
   2080  e300
   2081  e300							;g8x8_4color
   2082  e300		       ff ff		      HEX	ffff
   2083  e302							;g8x8_4color2
   2084  e302		       55 55		      HEX	5555
   2085  e304							;g8x8_4color3
   2086  e304		       55 55		      HEX	5555
   2087  e306							;g8x8_4color4
   2088  e306		       00 00		      HEX	0000
   2089  e308							;g8x8_4color5
   2090  e308		       00 00		      HEX	0000
   2091  e30a							;g8x8_4color6
   2092  e30a		       aa aa		      HEX	aaaa
   2093  e30c							;g8x8_4color7
   2094  e30c		       aa aa		      HEX	aaaa
   2095  e30e							;g8x8_4color8
   2096  e30e		       ff ff		      HEX	ffff
   2097  e310							;zonebg80x16_8
   2098  e310		       aa aa aa aa*	      HEX	aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
   2099  e324							;zonebg80x16_8_tallsprite_00
   2100  e324		       aa aa aa aa*	      HEX	aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
   2101  e338							;font
   2102  e338		       44 10 40 04*	      HEX	4410400404044410440454444044404044441004504044444454445004104444
   2103  e358		       54 54 10 40*	      HEX	545410405400101010000000004004400441451000
   2104  e36d
   2105  e400					      ORG	$E400,0	; *************
   2106  e400
   2107  e400							;g8x8_4color
   2108  e400		       55 55		      HEX	5555
   2109  e402							;g8x8_4color2
   2110  e402		       55 55		      HEX	5555
   2111  e404							;g8x8_4color3
   2112  e404		       00 00		      HEX	0000
   2113  e406							;g8x8_4color4
   2114  e406		       00 00		      HEX	0000
   2115  e408							;g8x8_4color5
   2116  e408		       aa aa		      HEX	aaaa
   2117  e40a							;g8x8_4color6
   2118  e40a		       aa aa		      HEX	aaaa
   2119  e40c							;g8x8_4color7
   2120  e40c		       ff ff		      HEX	ffff
   2121  e40e							;g8x8_4color8
   2122  e40e		       ff ff		      HEX	ffff
   2123  e410							;zonebg80x16_8
   2124  e410		       aa aa aa aa*	      HEX	aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
   2125  e424							;zonebg80x16_8_tallsprite_00
   2126  e424		       aa aa aa aa*	      HEX	aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
   2127  e438							;font
   2128  e438		       44 10 54 14*	      HEX	4410541454045410545444504044505044541004504054444444444454104444
   2129  e458		       44 10 10 50*	      HEX	441010505500101010000054004004400414441000
   2130  e46d
   2131  e500					      ORG	$E500,0	; *************
   2132  e500
   2133  e500							;g8x8_4color
   2134  e500		       55 55		      HEX	5555
   2135  e502							;g8x8_4color2
   2136  e502		       00 00		      HEX	0000
   2137  e504							;g8x8_4color3
   2138  e504		       00 00		      HEX	0000
   2139  e506							;g8x8_4color4
   2140  e506		       aa aa		      HEX	aaaa
   2141  e508							;g8x8_4color5
   2142  e508		       aa aa		      HEX	aaaa
   2143  e50a							;g8x8_4color6
   2144  e50a		       ff ff		      HEX	ffff
   2145  e50c							;g8x8_4color7
   2146  e50c		       ff ff		      HEX	ffff
   2147  e50e							;g8x8_4color8
   2148  e50e		       55 55		      HEX	5555
   2149  e510							;zonebg80x16_8
   2150  e510		       aa aa aa aa*	      HEX	aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
   2151  e524							;zonebg80x16_8_tallsprite_00
   2152  e524		       aa aa aa aa*	      HEX	aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
   2153  e538							;font
   2154  e538		       44 10 04 04*	      HEX	4410040444544004444444444044404040441004444054444444444440104444
   2155  e558		       44 54 44 14*	      HEX	445444145400041010000000004004400444451000
   2156  e56d
   2157  e600					      ORG	$E600,0	; *************
   2158  e600
   2159  e600							;g8x8_4color
   2160  e600		       00 00		      HEX	0000
   2161  e602							;g8x8_4color2
   2162  e602		       00 00		      HEX	0000
   2163  e604							;g8x8_4color3
   2164  e604		       aa aa		      HEX	aaaa
   2165  e606							;g8x8_4color4
   2166  e606		       aa aa		      HEX	aaaa
   2167  e608							;g8x8_4color5
   2168  e608		       ff ff		      HEX	ffff
   2169  e60a							;g8x8_4color6
   2170  e60a		       ff ff		      HEX	ffff
   2171  e60c							;g8x8_4color7
   2172  e60c		       55 55		      HEX	5555
   2173  e60e							;g8x8_4color8
   2174  e60e		       55 55		      HEX	5555
   2175  e610							;zonebg80x16_8
   2176  e610		       aa aa aa aa*	      HEX	aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
   2177  e624							;zonebg80x16_8_tallsprite_00
   2178  e624		       aa aa aa aa*	      HEX	aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
   2179  e638							;font
   2180  e638		       44 50 04 04*	      HEX	4450040444404044444444444044404040441004444054444444444440104444
   2181  e658		       44 44 44 04*	      HEX	444444045044441004000000001010400444401000
   2182  e66d
   2183  e700					      ORG	$E700,0	; *************
   2184  e700
   2185  e700							;g8x8_4color
   2186  e700		       00 00		      HEX	0000
   2187  e702							;g8x8_4color2
   2188  e702		       aa aa		      HEX	aaaa
   2189  e704							;g8x8_4color3
   2190  e704		       aa aa		      HEX	aaaa
   2191  e706							;g8x8_4color4
   2192  e706		       ff ff		      HEX	ffff
   2193  e708							;g8x8_4color5
   2194  e708		       ff ff		      HEX	ffff
   2195  e70a							;g8x8_4color6
   2196  e70a		       55 55		      HEX	5555
   2197  e70c							;g8x8_4color7
   2198  e70c		       55 55		      HEX	5555
   2199  e70e							;g8x8_4color8
   2200  e70e		       00 00		      HEX	0000
   2201  e710							;zonebg80x16_8
   2202  e710		       ff ff ff ff*	      HEX	ffffffffffffffffffffffffffffffffffffffff
   2203  e724							;zonebg80x16_8_tallsprite_00
   2204  e724		       ff ff ff ff*	      HEX	ffffffffffffffffffffffffffffffffffffffff
   2205  e738							;font
   2206  e738		       54 10 54 54*	      HEX	5410545444545454545454505450545454445404444044545454545454544444
   2207  e758		       44 44 44 54*	      HEX	444444544044541004000000000440545410154000
   2208  e76d
   2209  e76d
   2210  e76d							; Provided under the CC0 license. See the included LICENSE.txt for details.
   2211  e76d
   2212  e76d					      ifnconst	bankswitchmode
   2213  e76d					      if	( * < $f000 )
   2214  f000					      ORG	$F000
   2215  f000					      endif
   2216  f000				  -	      else
   2217  f000				  -	      ifconst	ROM128K
   2218  f000				  -	      if	( * < $f000 )
   2219  f000				  -	      ORG	$27000
   2220  f000				  -	      RORG	$F000
   2221  f000				  -	      endif
   2222  f000				  -	      endif
   2223  f000				  -	      ifconst	ROM144K
   2224  f000				  -	      if	( * < $f000 )
   2225  f000				  -	      ORG	$27000
   2226  f000				  -	      RORG	$F000
   2227  f000				  -	      endif
   2228  f000				  -	      endif
   2229  f000				  -	      ifconst	ROM256K
   2230  f000				  -	      if	( * < $f000 )
   2231  f000				  -	      ORG	$47000
   2232  f000				  -	      RORG	$F000
   2233  f000				  -	      endif
   2234  f000				  -	      endif
   2235  f000				  -	      ifconst	ROM272K
   2236  f000				  -	      if	( * < $f000 )
   2237  f000				  -	      ORG	$47000
   2238  f000				  -	      RORG	$F000
   2239  f000				  -	      endif
   2240  f000				  -	      endif
   2241  f000				  -	      ifconst	ROM512K
   2242  f000				  -	      if	( * < $f000 )
   2243  f000				  -	      ORG	$87000
   2244  f000				  -	      RORG	$F000
   2245  f000				  -	      endif
   2246  f000				  -	      endif
   2247  f000				  -	      ifconst	ROM528K
   2248  f000				  -	      if	( * < $f000 )
   2249  f000				  -	      ORG	$87000
   2250  f000				  -	      RORG	$F000
   2251  f000				  -	      endif
   2252  f000				  -	      endif
   2253  f000					      endif
   2254  f000
   2255  f000							; all of these "modules" have conditional clauses in them, so even though
   2256  f000							; they're always included here, they don't take up rom unless the user
   2257  f000							; explicitly enables support for the feature.
   2258  f000
   2259  f000					      ifnconst	included.7800vox.asm
------- FILE 7800vox.asm LEVEL 2 PASS 3
      0  f000					      include	7800vox.asm
      1  f000							; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  f000
      3  f000							; AtariVox 7800basic wrapper
      4  f000
      5  f000							; to be called with
      6  f000							; A=# of bytes
      7  f000							;
      8  f000
      9  f000				  -	      ifconst	HSSUPPORT
     10  f000				  -
     11  f000				  -AVoxReadBytes
     12  f000				  -	      sta	temp8
     13  f000				  -	      jsr	i2c_startwrite
     14  f000				  -	      bcs	eeprom_error
     15  f000				  -
     16  f000				  -	      lda	HSVoxHi
     17  f000				  -	      jsr	i2c_txbyte
     18  f000				  -	      lda	HSVoxLo
     19  f000				  -	      jsr	i2c_txbyte
     20  f000				  -	      jsr	i2c_stopwrite
     21  f000				  -
     22  f000				  -	      jsr	i2c_startread
     23  f000				  -
     24  f000				  -	      ldx	#0
     25  f000				  -AVoxReadBytesLoop
     26  f000				  -	      jsr	i2c_rxbyte
     27  f000				  -	      sta	eeprombuffer,x
     28  f000				  -	      inx
     29  f000				  -	      cpx	temp8
     30  f000				  -	      bne	AVoxReadBytesLoop
     31  f000				  -	      jsr	i2c_stopread
     32  f000				  -	      lda	#0
     33  f000				  -	      rts
     34  f000				  -
     35  f000				  -			; to be called with
     36  f000				  -			; A=# of bytes
     37  f000				  -			;
     38  f000				  -
     39  f000				  -AVoxWriteBytes
     40  f000				  -	      sta	temp8
     41  f000				  -	      jsr	i2c_startwrite
     42  f000				  -	      bcs	eeprom_error
     43  f000				  -
     44  f000				  -	      lda	HSVoxHi
     45  f000				  -	      jsr	i2c_txbyte
     46  f000				  -	      lda	HSVoxLo
     47  f000				  -	      jsr	i2c_txbyte
     48  f000				  -
     49  f000				  -	      ldx	#$00
     50  f000				  -AVoxWriteBytesLoop
     51  f000				  -	      lda	eeprombuffer,x
     52  f000				  -	      jsr	i2c_txbyte
     53  f000				  -	      inx
     54  f000				  -	      cpx	temp8
     55  f000				  -	      bne	AVoxWriteBytesLoop
     56  f000				  -	      jsr	i2c_stopwrite
     57  f000				  -
     58  f000				  -	      lda	#0
     59  f000				  -	      rts
     60  f000				  -
     61  f000				  -eeprom_error
     62  f000				  -	      lda	#$ff
     63  f000				  -	      rts
     64  f000				  -
     65  f000				  -AVoxDetect
     66  f000				  -
     67  f000				  -	      jsr	i2c_startwrite
     68  f000				  -	      bcs	eeprom_error
     69  f000				  -	      lda	#$30
     70  f000				  -	      jsr	i2c_txbyte
     71  f000				  -	      lda	#$00
     72  f000				  -	      jsr	i2c_txbyte
     73  f000				  -	      jsr	i2c_stopwrite
     74  f000				  -	      rts
     75  f000				  -
     76  f000				  -	      include	"i2c7800.inc"
     77  f000				  -	      I2C_SUBS	temp9
     78  f000				  -
     79  f000					      endif
     80  f000
------- FILE c:\Users\Steve\Desktop\2018dev\7800\7800basic\projects\lessons\lesson1_gfx_modes\lesson1_31.bas.asm
   2261  f000					      endif
   2262  f000					      ifnconst	included.pokeysound.asm
------- FILE pokeysound.asm LEVEL 2 PASS 3
      0  f000					      include	pokeysound.asm
      1  f000							; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  f000
      3  f000
      4  f000				  -	      ifconst	pokeysupport
      5  f000				  -
      6  f000				  -pokeysoundmodulestart
      7  f000				  -
      8  f000				  -mutepokey
      9  f000				  -	      lda	#0
     10  f000				  -	      ldy	#7
     11  f000				  -mutepokeyloop
     12  f000				  -	      sta	pokey1pointlo,y
     13  f000				  -	      sta	(pokeybaselo),y
     14  f000				  -	      dey
     15  f000				  -	      bpl	mutepokeyloop
     16  f000				  -	      rts
     17  f000				  -
     18  f000				  -checkpokeyplaying
     19  f000				  -	      ldx	#6
     20  f000				  -checkpokeyplayingloop
     21  f000				  -	      lda	pokey1pointlo,x
     22  f000				  -	      ora	pokey1pointhi,x
     23  f000				  -	      beq	pokeychannelinactive
     24  f000				  -	      jsr	playpokeysfxA	; x=channel*2
     25  f000				  -pokeychannelinactive
     26  f000				  -	      dex
     27  f000				  -	      dex
     28  f000				  -	      bpl	checkpokeyplayingloop
     29  f000				  -	      rts
     30  f000				  -
     31  f000				  -playpokeysfxA
     32  f000				  -	      txa
     33  f000				  -	      tay
     34  f000				  -	      lda	pokey1tick,x
     35  f000				  -	      beq	playpokeysfxAcont
     36  f000				  -	      sec
     37  f000				  -	      sbc	#1
     38  f000				  -	      sta	pokey1tick,x	; sound resolution is >1 frame, and we're mid-tock...
     39  f000				  -	      rts
     40  f000				  -
     41  f000				  -playpokeysfxAcont
     42  f000				  -	      lda	pokey1frames,x	; set the frame countdown for this sound chunk
     43  f000				  -	      sta	pokey1tick,x
     44  f000				  -
     45  f000				  -	      lda	pokey1priority,x	; decrease the sound's priority if its non-zero
     46  f000				  -	      beq	playpokeysfxAcont2
     47  f000				  -	      sec
     48  f000				  -	      sbc	#1
     49  f000				  -	      sta	pokey1priority,x
     50  f000				  -playpokeysfxAcont2
     51  f000				  -
     52  f000				  -			; *** FREQUENCY
     53  f000				  -	      lda	(pokey1pointlo,x)
     54  f000				  -	      sta	temp1
     55  f000				  -	      clc
     56  f000				  -	      adc	pokey1offset,x	; take into account any pitch modification
     57  f000				  -	      sta	(pokeybaselo),y	; PAUDF0,0
     58  f000				  -
     59  f000				  -			;advance the data pointer +1
     60  f000				  -	      inc	pokey1pointlo,x
     61  f000				  -	      bne	skippokeyhiinc1
     62  f000				  -	      inc	pokey1pointhi,x
     63  f000				  -skippokeyhiinc1
     64  f000				  -
     65  f000				  -			; *** WAVE
     66  f000				  -	      lda	(pokey1pointlo,x)
     67  f000				  -	      asl
     68  f000				  -	      asl
     69  f000				  -	      asl
     70  f000				  -	      asl		; x16
     71  f000				  -
     72  f000				  -			;advance the data pointer +1
     73  f000				  -	      inc	pokey1pointlo,x
     74  f000				  -	      bne	skippokeyhiinc2
     75  f000				  -	      inc	pokey1pointhi,x
     76  f000				  -skippokeyhiinc2
     77  f000				  -
     78  f000				  -	      ora	(pokey1pointlo,x)
     79  f000				  -	      iny
     80  f000				  -	      sta	(pokeybaselo),y
     81  f000				  -
     82  f000				  -	      ora	temp1	; check if F|C|V=0
     83  f000				  -	      beq	zeropokeypoint	; if so, we're at the end of the sound.
     84  f000				  -
     85  f000				  -			; advance the pointer +1, on to the next sound chunk
     86  f000				  -	      inc	pokey1pointlo,x
     87  f000				  -	      bne	skippokeyhiinc3
     88  f000				  -	      inc	pokey1pointhi,x
     89  f000				  -skippokeyhiinc3
     90  f000				  -	      rts
     91  f000				  -
     92  f000				  -zeropokeypoint
     93  f000				  -	      sta	pokey1pointlo,x
     94  f000				  -	      sta	pokey1pointhi,x
     95  f000				  -	      sta	pokey1priority,x
     96  f000				  -	      rts
     97  f000				  -
     98  f000				  -schedulepokeysfx
     99  f000				  -	      ldx	#6
    100  f000				  -schedulepokeysfxloop
    101  f000				  -	      lda	pokey1pointlo,x
    102  f000				  -	      ora	pokey1pointhi,x
    103  f000				  -	      bne	schedulespokeysearch
    104  f000				  -	      jmp	schedulepokeyX	; we found an unused channel, so use it...
    105  f000				  -schedulespokeysearch
    106  f000				  -	      dex
    107  f000				  -	      dex
    108  f000				  -	      bpl	schedulepokeysfxloop
    109  f000				  -
    110  f000				  -			; if we're here, all 4 channels are presently playing a sound...
    111  f000				  -	      ldy	#1
    112  f000				  -	      lda	(temp1),y	; peek at the priority of this sfx...
    113  f000				  -	      bne	schedulepokeysfxcont1
    114  f000				  -	      rts		; ...and skip it if it's 0 priority
    115  f000				  -schedulepokeysfxcont1
    116  f000				  -
    117  f000				  -			; figure out which current sound has the lowest priority...
    118  f000				  -	      lda	#0
    119  f000				  -	      sta	temp8
    120  f000				  -	      lda	pokey1priority
    121  f000				  -	      sta	temp9
    122  f000				  -	      ldx	#6
    123  f000				  -findlowprioritypokeyloop
    124  f000				  -	      lda	pokey1priority,x
    125  f000				  -	      cmp	temp9
    126  f000				  -	      bcs	findlowprioritypokeyloopcontinue
    127  f000				  -	      sta	temp9
    128  f000				  -	      stx	temp8
    129  f000				  -findlowprioritypokeyloopcontinue
    130  f000				  -	      dex
    131  f000				  -	      dex
    132  f000				  -	      bne	findlowprioritypokeyloop
    133  f000				  -	      ldx	temp8	; the low priority channel we'll interrupt
    134  f000				  -
    135  f000				  -schedulepokeyX
    136  f000				  -			;called with X=2*pokey channel to play on...
    137  f000				  -	      ldy	#1	; get priority and sound-resolution (in frames)
    138  f000				  -	      lda	(temp1),y
    139  f000				  -	      sta	pokey1priority,x
    140  f000				  -	      iny
    141  f000				  -	      lda	(temp1),y
    142  f000				  -	      sta	pokey1frames,x
    143  f000				  -
    144  f000				  -	      lda	temp1
    145  f000				  -	      clc
    146  f000				  -	      adc	#3
    147  f000				  -	      sta	pokey1pointlo,x
    148  f000				  -	      lda	temp2
    149  f000				  -	      adc	#0
    150  f000				  -	      sta	pokey1pointhi,x
    151  f000				  -	      lda	temp3
    152  f000				  -	      sta	pokey1offset,x
    153  f000				  -	      lda	#0
    154  f000				  -	      sta	pokey1tick,x
    155  f000				  -	      rts
    156  f000				  -
    157  f000				  -			; pokey detection routine. we check for pokey in the XBOARD/XM location,
    158  f000				  -			; and the standard $4000 location.
    159  f000				  -			; if pokey the pokey is present, this routine will reset it.
    160  f000				  -
    161  f000				  -detectpokeylocation
    162  f000				  -			;XBoard/XM...
    163  f000				  -	      ldx	#2
    164  f000				  -detectpokeyloop
    165  f000				  -	      lda	XCTRL1s
    166  f000				  -	      ora	#%00010100
    167  f000				  -	      and	POKEYXMMASK,x
    168  f000				  -	      sta	XCTRL1s
    169  f000				  -	      sta	XCTRL1
    170  f000				  -
    171  f000				  -	      lda	POKEYCHECKLO,x
    172  f000				  -	      sta	pokeybaselo
    173  f000				  -	      lda	POKEYCHECKHI,x
    174  f000				  -	      sta	pokeybasehi
    175  f000				  -	      jsr	checkforpokey
    176  f000				  -	      lda	pokeydetected
    177  f000				  -	      beq	foundpokeychip
    178  f000				  -	      dex
    179  f000				  -	      bpl	detectpokeyloop
    180  f000				  -foundpokeychip
    181  f000				  -	      eor	#$ff	; invert state for 7800basic if...then test
    182  f000				  -	      sta	pokeydetected
    183  f000				  -	      rts
    184  f000				  -
    185  f000				  -POKEYXMMASK
    186  f000				  -			;     XM POKEY on    XM POKEY off   XM POKEY off
    187  f000				  -	      .byte	%11111111, %11101111, %11101111
    188  f000				  -
    189  f000				  -POKEYCHECKLO
    190  f000				  -	      .byte	<$0450, <$0450, <$4000
    191  f000				  -POKEYCHECKHI
    192  f000				  -	      .byte	>$0450, >$0450, >$4000
    193  f000				  -
    194  f000				  -checkforpokey
    195  f000				  -	      ldy	#$0f
    196  f000				  -	      lda	#$00
    197  f000				  -	      sta	pokeydetected	; start off by assuming pokey will be detected
    198  f000				  -resetpokeyregistersloop
    199  f000				  -	      sta	(pokeybase),y
    200  f000				  -	      dey
    201  f000				  -	      bpl	resetpokeyregistersloop
    202  f000				  -
    203  f000				  -	      ldy	#PAUDCTL
    204  f000				  -	      sta	(pokeybase),y
    205  f000				  -	      ldy	#PSKCTL
    206  f000				  -	      sta	(pokeybase),y
    207  f000				  -
    208  f000				  -			; let the dust settle...
    209  f000				  -	      nop
    210  f000				  -	      nop
    211  f000				  -	      nop
    212  f000				  -
    213  f000				  -	      lda	#4
    214  f000				  -	      sta	temp9
    215  f000				  -pokeycheckloop1
    216  f000				  -			; we're in reset, so the RANDOM register should read $ff...
    217  f000				  -	      ldy	#PRANDOM
    218  f000				  -	      lda	(pokeybase),y
    219  f000				  -	      cmp	#$ff
    220  f000				  -	      bne	nopokeydetected
    221  f000				  -	      dec	temp9
    222  f000				  -	      bne	pokeycheckloop1
    223  f000				  -
    224  f000				  -			; take pokey out of reset...
    225  f000				  -	      ldy	#PSKCTL
    226  f000				  -	      lda	#3
    227  f000				  -	      sta	(pokeybase),y
    228  f000				  -	      ldy	#PAUDCTL
    229  f000				  -	      lda	#0
    230  f000				  -	      sta	(pokeybase),y
    231  f000				  -
    232  f000				  -			; let the dust settle again...
    233  f000				  -	      nop
    234  f000				  -	      nop
    235  f000				  -	      nop
    236  f000				  -
    237  f000				  -	      lda	#4
    238  f000				  -	      sta	temp9
    239  f000				  -pokeycheckloop2
    240  f000				  -			; we're out of reset, so RANDOM should read non-$ff...
    241  f000				  -	      ldy	#PRANDOM
    242  f000				  -	      lda	(pokeybase),y
    243  f000				  -	      cmp	#$ff
    244  f000				  -	      beq	skippokeycheckreturn
    245  f000				  -	      rts
    246  f000				  -skippokeycheckreturn
    247  f000				  -	      dec	temp9
    248  f000				  -	      bne	pokeycheckloop2
    249  f000				  -nopokeydetected
    250  f000				  -	      dec	pokeydetected	; pokeydetected=#$ff
    251  f000				  -	      rts
    252  f000				  -
    253  f000				  -pokeysoundmoduleend
    254  f000				  -
    255  f000				  -	      echo	"  pokeysound assembly: ",[(pokeysoundmoduleend-pokeysoundmodulestart)]d," bytes"
    256  f000				  -
    257  f000					      endif
------- FILE c:\Users\Steve\Desktop\2018dev\7800\7800basic\projects\lessons\lesson1_gfx_modes\lesson1_31.bas.asm
   2264  f000					      endif
   2265  f000					      ifnconst	included.tracker.asm
------- FILE tracker.asm LEVEL 2 PASS 3
      0  f000					      include	tracker.asm
      1  f000							; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  f000
      3  f000
      4  f000				  -	      ifconst	MUSICTRACKER
      5  f000				  -			; ** songtempo lists how many 256ths of a frame a 16th note lasts
      6  f000				  -			; ** the player operates on a 16th note grid.
      7  f000				  -
      8  f000				  -servicesongover
      9  f000				  -	      rts
     10  f000				  -servicesong
     11  f000				  -	      lda	songtempo
     12  f000				  -	      beq	servicesongover	; ** if song is off/paused then return
     13  f000				  -servicesongcontinue
     14  f000				  -	      lda	sfxschedulelock
     15  f000				  -	      sta	sfxschedulemissed
     16  f000				  -	      bne	servicesongover
     17  f000				  -	      lda	songtempo
     18  f000				  -	      clc
     19  f000				  -	      adc	songtick	; add songtempo to songtick until it rolls over
     20  f000				  -	      sta	songtick	; this is how we break away from 50/60Hz timing.
     21  f000				  -	      bcc	servicesongover
     22  f000				  -			; ** if we're here a new 16th note has passed
     23  f000				  -			; ** check if a new note is due on any of the 4 channels
     24  f000				  -servicesongredo
     25  f000				  -	      ldx	#3
     26  f000				  -checkchannelloop
     27  f000				  -	      dec	songchannel1busywait,x
     28  f000				  -	      bpl	carryoncheckingchannel
     29  f000				  -	      txa
     30  f000				  -	      pha		; save X for the loop
     31  f000				  -	      jsr	processsongdata
     32  f000				  -	      pla		; restore X for the loop
     33  f000				  -	      tax
     34  f000				  -carryoncheckingchannel
     35  f000				  -	      dex
     36  f000				  -	      bpl	checkchannelloop
     37  f000				  -	      lda	inactivechannelcount
     38  f000				  -	      cmp	#15
     39  f000				  -	      bne	skipstopsong
     40  f000				  -	      lda	songloops
     41  f000				  -	      bne	doasongloop
     42  f000				  -			;lda #0
     43  f000				  -	      sta	songtempo	; all channels are done. stop the song
     44  f000				  -	      rts
     45  f000				  -doasongloop
     46  f000				  -	      bmi	skipsongloopadjust
     47  f000				  -	      dec	songloops
     48  f000				  -skipsongloopadjust
     49  f000				  -	      jsr	setsongchannels
     50  f000				  -	      jmp	servicesongredo
     51  f000				  -skipstopsong
     52  f000				  -	      rts
     53  f000				  -
     54  f000				  -processsongdata
     55  f000				  -			; channel needs processing
     56  f000				  -			; X=channel #
     57  f000				  -
     58  f000				  -	      txa
     59  f000				  -	      clc
     60  f000				  -	      adc	songchannel1stackdepth,x	; stack depth value will be 0, 4, or 8
     61  f000				  -	      tay
     62  f000				  -
     63  f000				  -
     64  f000				  -			; ** indirect x is cumbersome with mult-byte commands.
     65  f000				  -			; ** setup a pointer to the song data for indirect y addressing.
     66  f000				  -	      lda	songchannel1layer1lo,y
     67  f000				  -	      sta	songdatalo
     68  f000				  -	      lda	songchannel1layer1hi,y
     69  f000				  -	      sta	songdatahi
     70  f000				  -	      ora	songdatalo
     71  f000				  -	      bne	channelhasdata
     72  f000				  -			;channel data is pointing at $0000
     73  f000				  -	      lda	#$7F
     74  f000				  -	      sta	songchannel1busywait,x	; skip a bunch of notes
     75  f000				  -setchannelcountbits
     76  f000				  -	      lda	channel2bits,x
     77  f000				  -	      ora	inactivechannelcount
     78  f000				  -	      sta	inactivechannelcount
     79  f000				  -	      rts
     80  f000				  -channelhasdata
     81  f000				  -
     82  f000				  -	      sty	songstackindex
     83  f000				  -	      ldy	#0
     84  f000				  -	      lda	(songdatalo),y	; ** load in the next byte of song data, so we can decode it
     85  f000				  -	      cmp	#$ff
     86  f000				  -	      bne	carryoncheckingdatatype	; ** $ff=pattern end marker
     87  f000				  -	      jmp	handlechannelEOD
     88  f000				  -
     89  f000				  -carryoncheckingdatatype
     90  f000				  -	      and	#$F0
     91  f000				  -	      cmp	#$C0
     92  f000				  -	      beq	handlechannelrest	; 0000XXXX=rest
     93  f000				  -	      cmp	#$F0
     94  f000				  -	      beq	handlemultibytecommand
     95  f000				  -	      cmp	#$D0
     96  f000				  -	      beq	handlesemiup
     97  f000				  -	      cmp	#$E0
     98  f000				  -	      beq	handlesemidown
     99  f000				  -handlenotedata
    100  f000				  -			; ** TODO: note playing is a terrible choice for fall-through
    101  f000				  -
    102  f000				  -			; ** its simple note data, prepare arguments for schedulesfx
    103  f000				  -
    104  f000				  -			; ** set the note length
    105  f000				  -	      lda	(songdatalo),y
    106  f000				  -	      and	#$0F
    107  f000				  -	      sta	songchannel1busywait,x
    108  f000				  -
    109  f000				  -			; ** load the instrument
    110  f000				  -	      lda	songchannel1instrumentlo,x
    111  f000				  -	      sta	sfxinstrumentlo
    112  f000				  -	      lda	songchannel1instrumenthi,x
    113  f000				  -	      sta	sfxinstrumenthi
    114  f000				  -
    115  f000				  -			; ** get the note, and transpose
    116  f000				  -	      lda	(songdatalo),y
    117  f000				  -	      lsr
    118  f000				  -	      lsr
    119  f000				  -	      lsr
    120  f000				  -	      lsr
    121  f000				  -	      clc
    122  f000				  -	      adc	songchannel1transpose,x	; ** add it to the transpose index
    123  f000				  -			; ** its up the respective SFX scheduler to handle and save the note data
    124  f000				  -	      sta	sfxnoteindex
    125  f000				  -
    126  f000				  -	      lda	#0
    127  f000				  -	      sta	sfxpitchoffset
    128  f000				  -
    129  f000				  -	      jsr	schedulesfx
    130  f000				  -
    131  f000				  -	      jmp	advancethesongpointer1byte	; advance to the next data byte and exit
    132  f000				  -
    133  f000				  -handlechannelrest
    134  f000				  -			; ** set the note length
    135  f000				  -	      lda	(songdatalo),y
    136  f000				  -	      and	#$0F
    137  f000				  -	      sta	songchannel1busywait,x
    138  f000				  -	      jmp	advancethesongpointer1byte	; advance to the next data byte and exit
    139  f000				  -
    140  f000				  -handlesemiup
    141  f000				  -	      lda	(songdatalo),y	; ** reload the song data, so we can get at the lower nibble
    142  f000				  -	      and	#$0f	; ** since we need to mask the nibble of the subtracted value,
    143  f000				  -	      clc
    144  f000				  -handlesemidownentry
    145  f000				  -	      adc	songchannel1transpose,x	; ** add it to the transpose index
    146  f000				  -	      sta	songchannel1transpose,x
    147  f000				  -	      jsr	advancethesongpointer1byte
    148  f000				  -	      jmp	processsongdata	; semi doesn't have note length, so process the next data byte...
    149  f000				  -
    150  f000				  -handlesemidown
    151  f000				  -	      lda	(songdatalo),y	; ** reload the song data, so we can get at the lower nibble
    152  f000				  -	      and	#$0f	; ** since we need to mask the nibble of the subtracted value,
    153  f000				  -	      eor	#$ff	; ** its easier if we negate it, and then add it instead.
    154  f000				  -	      sec
    155  f000				  -	      jmp	handlesemidownentry
    156  f000				  -
    157  f000				  -handlemultibytecommand
    158  f000				  -	      lda	(songdatalo),y	; ** reload the song data, so we can get at the lower nibble
    159  f000				  -	      and	#$0f	; ** since we need to mask the nibble of the subtracted value,
    160  f000				  -	      cmp	#$08	; ** load new instrument?
    161  f000				  -	      bne	nothandleinstrumentchange
    162  f000				  -handleinstrumentchange
    163  f000				  -	      iny
    164  f000				  -	      lda	(songdatalo),y
    165  f000				  -	      sta	songchannel1instrumentlo,x
    166  f000				  -	      iny
    167  f000				  -	      lda	(songdatalo),y
    168  f000				  -	      sta	songchannel1instrumenthi,x
    169  f000				  -	      lda	#3
    170  f000				  -	      jsr	advancethesongpointerNbytes	; advance 3 bytes
    171  f000				  -	      jmp	processsongdata
    172  f000				  -
    173  f000				  -nothandleinstrumentchange
    174  f000				  -	      cmp	#$09	; ** absolute tempo change?
    175  f000				  -	      bne	nothandletempochange
    176  f000				  -	      lda	#0
    177  f000				  -	      sta	songtempo
    178  f000				  -handlerelativetempochange
    179  f000				  -	      iny
    180  f000				  -	      lda	(songdatalo),y
    181  f000				  -	      clc
    182  f000				  -	      adc	songtempo
    183  f000				  -	      sta	songtempo
    184  f000				  -	      lda	#2
    185  f000				  -	      jsr	advancethesongpointerNbytes	; advance 2 bytes
    186  f000				  -	      jmp	processsongdata
    187  f000				  -
    188  f000				  -nothandletempochange
    189  f000				  -	      cmp	#$0A	; ** relative tempo change?:
    190  f000				  -	      beq	handlerelativetempochange
    191  f000				  -	      cmp	#$0B	; ** octave/semi change?
    192  f000				  -	      beq	handleoctavesemichange
    193  f000				  -handlepatterndata
    194  f000				  -			; ** if we're here its a pattern/loop "subroutine"
    195  f000				  -			; ** move the channel's "stack" pointer and populate the new stack level
    196  f000				  -
    197  f000				  -	      lda	#4
    198  f000				  -	      clc
    199  f000				  -	      adc	songchannel1stackdepth,x
    200  f000				  -	      sta	songchannel1stackdepth,x	; stack depth value will be 0, 4, or 8
    201  f000				  -
    202  f000				  -	      stx	inttemp6	; about to invalidate x. save it.
    203  f000				  -	      lda	songstackindex
    204  f000				  -	      adc	#4
    205  f000				  -	      tax
    206  f000				  -
    207  f000				  -	      lda	(songdatalo),y
    208  f000				  -	      and	#$7
    209  f000				  -	      sta	songchannel1layer1loops,x
    210  f000				  -	      iny
    211  f000				  -	      lda	(songdatalo),y
    212  f000				  -	      sta	songchannel1layer1lo,x
    213  f000				  -	      iny
    214  f000				  -	      lda	(songdatalo),y
    215  f000				  -	      sta	songchannel1layer1hi,x
    216  f000				  -
    217  f000				  -	      ldx	inttemp6	; restore x with the channel #
    218  f000				  -
    219  f000				  -			; ** advance will operate on the old stack level, since we didn't store the updated songstackindex...
    220  f000				  -	      lda	#3
    221  f000				  -	      jsr	advancethesongpointerNbytes	; advance 3 bytes
    222  f000				  -
    223  f000				  -			; ** ...but the new stack level will be correctly picked up when we process the next byte.
    224  f000				  -	      jmp	processsongdata
    225  f000				  -
    226  f000				  -handlechannelEOD
    227  f000				  -			; ** check if there are loops remaining on the pattern
    228  f000				  -	      stx	inttemp6
    229  f000				  -	      ldx	songstackindex
    230  f000				  -	      dec	songchannel1layer1loops,x
    231  f000				  -	      bmi	handlechannelEODnoloop
    232  f000				  -			; ** loops are remaining. set the pattern pointer to the pattern start, which is contained after the EOD
    233  f000				  -	      iny
    234  f000				  -	      lda	(songdatalo),y
    235  f000				  -	      sta	songchannel1layer1lo,x
    236  f000				  -	      iny
    237  f000				  -	      lda	(songdatalo),y
    238  f000				  -	      sta	songchannel1layer1hi,x
    239  f000				  -	      ldx	inttemp6
    240  f000				  -	      jmp	processsongdata	; EOD handling doesn't have note length, so process the next data byte...
    241  f000				  -
    242  f000				  -handlechannelEODnoloop
    243  f000				  -			; this pattern/loop is done playing. "pop" the stack
    244  f000				  -	      ldx	inttemp6
    245  f000				  -	      lda	songchannel1stackdepth,x
    246  f000				  -	      beq	handlerootchannelEOD
    247  f000				  -	      sec
    248  f000				  -	      sbc	#4
    249  f000				  -	      sta	songchannel1stackdepth,x
    250  f000				  -	      jmp	processsongdata	; EOD handling doesn't have note length, so process the next data byte...
    251  f000				  -
    252  f000				  -handlerootchannelEOD
    253  f000				  -			; this channel is done. point it to $ff data so we no longer process this channel.
    254  f000				  -	      lda	#0
    255  f000				  -	      sta	songchannel1layer1lo,x
    256  f000				  -	      sta	songchannel1layer1hi,x
    257  f000				  -	      sta	songchannel1busywait,x
    258  f000				  -	      jmp	setchannelcountbits
    259  f000				  -	      rts
    260  f000				  -
    261  f000				  -nothandlepatternchange
    262  f000				  -handleoctavesemichange
    263  f000				  -	      iny
    264  f000				  -	      lda	(songdatalo),y
    265  f000				  -	      sta	songchannel1transpose,x
    266  f000				  -	      lda	#2
    267  f000				  -	      jsr	advancethesongpointerNbytes	; advance 2 bytes
    268  f000				  -	      jmp	processsongdata
    269  f000				  -
    270  f000				  -advancethesongpointer1byte
    271  f000				  -	      txa
    272  f000				  -	      ldx	songstackindex
    273  f000				  -	      inc	songchannel1layer1lo,x
    274  f000				  -	      bne	skiphiadvancethesongpointer1byte
    275  f000				  -	      inc	songchannel1layer1hi,x
    276  f000				  -skiphiadvancethesongpointer1byte
    277  f000				  -	      tax
    278  f000				  -	      rts
    279  f000				  -
    280  f000				  -advancethesongpointerNbytes
    281  f000				  -			; entered with A=# of byte to advance
    282  f000				  -	      stx	inttemp6
    283  f000				  -	      ldx	songstackindex
    284  f000				  -	      clc
    285  f000				  -	      adc	songchannel1layer1lo,x
    286  f000				  -	      sta	songchannel1layer1lo,x
    287  f000				  -	      lda	#0
    288  f000				  -	      adc	songchannel1layer1hi,x
    289  f000				  -	      sta	songchannel1layer1hi,x
    290  f000				  -	      ldx	inttemp6
    291  f000				  -	      rts
    292  f000				  -
    293  f000				  -clearsongmemory
    294  f000				  -	      lda	#0
    295  f000				  -	      ldx	#(songchannel4instrumenthi-songchannel1layer1lo)
    296  f000				  -clearsongmemoryloop1
    297  f000				  -	      sta	songchannel1layer1lo,x
    298  f000				  -	      dex
    299  f000				  -	      bpl	clearsongmemoryloop1
    300  f000				  -
    301  f000				  -	      ldx	#(songchannel4stackdepth-songchannel1layer1loops)
    302  f000				  -clearsongmemoryloop2
    303  f000				  -	      sta	songchannel1layer1loops,x
    304  f000				  -	      dex
    305  f000				  -	      bpl	clearsongmemoryloop2
    306  f000				  -
    307  f000				  -	      lda	#$ff
    308  f000				  -	      ldx	#3
    309  f000				  -clearsongmemoryloop3
    310  f000				  -	      sta	songchannel1busywait,x
    311  f000				  -	      dex
    312  f000				  -	      bpl	clearsongmemoryloop3
    313  f000				  -	      rts
    314  f000				  -
    315  f000				  -setsongchannels
    316  f000				  -	      jsr	clearsongmemory
    317  f000				  -	      ldy	#7
    318  f000				  -	      ldx	#3
    319  f000				  -setsongchannelsloop
    320  f000				  -	      lda	(songpointerlo),y
    321  f000				  -	      sta	songchannel1layer1hi,x
    322  f000				  -	      dey
    323  f000				  -	      lda	(songpointerlo),y
    324  f000				  -	      sta	songchannel1layer1lo,x
    325  f000				  -	      dex
    326  f000				  -	      dey
    327  f000				  -	      bpl	setsongchannelsloop
    328  f000				  -	      rts
    329  f000				  -
    330  f000				  -channel2bits
    331  f000				  -	      .byte	1,2,4,8
    332  f000				  -
    333  f000				  -tiatrackeroctavenotes
    334  f000				  -	      ifconst	BUZZBASS
    335  f000				  -LOWC       =	15
    336  f000				  -	      else
    337  f000				  -LOWC       =	14
    338  f000				  -	      endif
    339  f000				  -			; ****** ELECTRONIC (0 to 11)
    340  f000				  -	      .byte	LOWC,20	; c0	 16.1Hz
    341  f000				  -	      .byte	LOWC,18	; c#0
    342  f000				  -	      .byte	LOWC,17	; d0
    343  f000				  -	      .byte	LOWC,16	; d#0
    344  f000				  -	      .byte	LOWC,15	; e0
    345  f000				  -	      .byte	LOWC,14	; f0  (very off)
    346  f000				  -	      .byte	LOWC,14	; f#0
    347  f000				  -	      .byte	LOWC,13	; g0
    348  f000				  -	      .byte	LOWC,12	; g#0
    349  f000				  -	      .byte	LOWC,11	; a0
    350  f000				  -	      .byte	LOWC,11	; a#0 (very off)
    351  f000				  -	      .byte	LOWC,10	; b0	 30.7Hz
    352  f000				  -
    353  f000				  -			; ****** SLIGHTLY BUZZY (12 to 23)
    354  f000				  -	      .byte	6,30	; c1	 32.7Hz
    355  f000				  -	      .byte	6,28	; c#1
    356  f000				  -	      .byte	6,27	; d1
    357  f000				  -	      .byte	6,25	; d#1
    358  f000				  -	      .byte	6,24	; e1
    359  f000				  -	      .byte	6,22	; f1
    360  f000				  -	      .byte	6,21	; f#1
    361  f000				  -	      .byte	6,20	; g1
    362  f000				  -	      .byte	6,18	; g#1
    363  f000				  -	      .byte	6,17	; a1
    364  f000				  -	      .byte	6,16	; a#1
    365  f000				  -	      .byte	6,15	; b1	 63.4Hz
    366  f000				  -
    367  f000				  -			; ****** BUZZY (24 to 39)
    368  f000				  -	      .byte	1,31	; c2	 65.5
    369  f000				  -	      .byte	1,30	; c#2	 67.6
    370  f000				  -	      .byte	1,27	; d2	 72.3
    371  f000				  -	      .byte	1,26	; d#2	 77.6
    372  f000				  -	      .byte	1,24	; e2
    373  f000				  -	      .byte	1,23	; f2
    374  f000				  -	      .byte	1,22	; f#2
    375  f000				  -	      .byte	1,20	; g2
    376  f000				  -	      .byte	1,19	; g#2
    377  f000				  -	      .byte	1,18	; a2
    378  f000				  -	      .byte	1,17	; a#2
    379  f000				  -	      .byte	1,16	; b2
    380  f000				  -	      .byte	1,15	; c3	126.8Hz
    381  f000				  -	      .byte	1,14	; c#3
    382  f000				  -	      .byte	1,13	; d3	149.7Hz
    383  f000				  -	      .byte	1,12	; d#3	161.2Hz (very off)
    384  f000				  -			; ****** PURE (40 to 71) - best key is A3 Major
    385  f000				  -	      .byte	12,31	; e3	163.8Hz
    386  f000				  -	      .byte	12,29	; f3
    387  f000				  -	      .byte	12,28	; f#3
    388  f000				  -	      .byte	12,26	; g3
    389  f000				  -	      .byte	12,24	; g#3
    390  f000				  -	      .byte	12,23	; a3  songs in key of A benefit from Perceptual Tuning
    391  f000				  -	      .byte	12,22	; a#3
    392  f000				  -	      .byte	12,20	; b3
    393  f000				  -	      .byte	12,19	; c4  (middle C)
    394  f000				  -	      .byte	12,18	; c#4
    395  f000				  -	      .byte	12,17	; d4
    396  f000				  -	      .byte	12,16	; d#4
    397  f000				  -	      .byte	12,15	; e4
    398  f000				  -	      .byte	12,14	; f4
    399  f000				  -	      .byte	12,13	; f#4
    400  f000				  -	      .byte	12,12	; g4  (very off)
    401  f000				  -	      .byte	12,12	; g#4
    402  f000				  -	      .byte	12,11	; a4
    403  f000				  -	      .byte	12,10	; a#4
    404  f000				  -	      .byte	4,31	; b4
    405  f000				  -	      .byte	4,29	; c5
    406  f000				  -	      .byte	4,28	; c#5
    407  f000				  -	      .byte	4,26	; d5
    408  f000				  -	      .byte	4,24	; d#5
    409  f000				  -	      .byte	4,23	; e5
    410  f000				  -	      .byte	4,22	; f5
    411  f000				  -	      .byte	4,20	; f#5
    412  f000				  -	      .byte	4,19	; g5
    413  f000				  -	      .byte	4,18	; g#5
    414  f000				  -	      .byte	4,17	; a5
    415  f000				  -	      .byte	4,16	; a#5
    416  f000				  -	      .byte	4,15	; b5
    417  f000				  -
    418  f000				  -			; ****** TUNED WIND (72 to 83)
    419  f000				  -	      .byte	8,30	; c
    420  f000				  -	      .byte	8,28	; c#
    421  f000				  -	      .byte	8,27	; d
    422  f000				  -	      .byte	8,25	; d#
    423  f000				  -	      .byte	8,24	; e
    424  f000				  -	      .byte	8,22	; f
    425  f000				  -	      .byte	8,21	; f#
    426  f000				  -	      .byte	8,20	; g
    427  f000				  -	      .byte	8,18	; g#
    428  f000				  -	      .byte	8,17	; a
    429  f000				  -	      .byte	8,16	; a#
    430  f000				  -	      .byte	8,15	; b
    431  f000				  -
    432  f000				  -	      include	"tiadrumkit.asm"
    433  f000				  -
    434  f000					      endif		;MUSICTRACKER
------- FILE c:\Users\Steve\Desktop\2018dev\7800\7800basic\projects\lessons\lesson1_gfx_modes\lesson1_31.bas.asm
   2267  f000					      endif
   2268  f000					      ifnconst	included.hiscore.asm
------- FILE hiscore.asm LEVEL 2 PASS 3
      0  f000					      include	hiscore.asm
      1  f000							; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  f000
      3  f000				  -	      ifconst	HSSUPPORT
      4  f000				  -detectatarivoxeeprom
      5  f000				  -hiscoremodulestart
      6  f000				  -			; do a test to see if atarivox eeprom can be accessed, and save results
      7  f000				  -	      jsr	AVoxDetect
      8  f000				  -	      eor	#$ff	; invert for easy 7800basic if...then logic
      9  f000				  -	      sta	avoxdetected
     10  f000				  -	      lda	#$0
     11  f000				  -	      sta	SWACNT
     12  f000				  -	      lda	avoxdetected
     13  f000				  -	      rts
     14  f000				  -
     15  f000				  -detecthsc
     16  f000				  -			; check for the HSC ROM signature...
     17  f000				  -	      lda	XCTRL1s
     18  f000				  -	      ora	#%00001100
     19  f000				  -	      sta	XCTRL1s
     20  f000				  -	      sta	XCTRL1
     21  f000				  -	      lda	$3900
     22  f000				  -	      cmp	#$C6
     23  f000				  -	      bne	detecthscfail
     24  f000				  -	      lda	$3904
     25  f000				  -	      cmp	#$FE
     26  f000				  -	      bne	detecthscfail
     27  f000				  -			; check if it's initialized...
     28  f000				  -	      ldy	#0
     29  f000				  -	      lda	#$ff
     30  f000				  -checkhscinit
     31  f000				  -	      and	$1000,y
     32  f000				  -	      dey
     33  f000				  -	      bpl	checkhscinit
     34  f000				  -	      cmp	#$ff
     35  f000				  -	      bne	hscisalreadyinit
     36  f000				  -			; if we're here, we need to do a minimal HSC init...
     37  f000				  -	      ldy	#$28
     38  f000				  -hscinitloop1
     39  f000				  -	      lda	hscheader,y
     40  f000				  -	      sta	$1000,y
     41  f000				  -	      dey
     42  f000				  -	      bpl	hscinitloop1
     43  f000				  -	      ldy	#$89
     44  f000				  -	      lda	#$7F
     45  f000				  -hscinitloop2
     46  f000				  -	      sta	$10B3,y
     47  f000				  -	      dey
     48  f000				  -	      cpy	#$ff
     49  f000				  -	      bne	hscinitloop2
     50  f000				  -hscisalreadyinit
     51  f000				  -	      lda	#$ff
     52  f000				  -	      rts
     53  f000				  -hscheader
     54  f000				  -	      .byte	$00,$00,$68,$83,$AA,$55,$9C,$FF,$07,$12,$02,$1F,$00,$00,$00,$00
     55  f000				  -	      .byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     56  f000				  -	      .byte	$00,$00,$00,$00,$00,$00,$00,$00,$03
     57  f000				  -detecthscfail
     58  f000				  -	      lda	XCTRL1s
     59  f000				  -	      and	#%11110111
     60  f000				  -	      sta	XCTRL1s
     61  f000				  -	      lda	#0
     62  f000				  -	      rts
     63  f000					      endif		; HSSUPPORT
     64  f000
     65  f000				  -	      ifconst	HSSUPPORT
     66  f000				  -	      ifnconst	hiscorefont
     67  f000				  -	      echo	""
     68  f000				  -	      echo	"WARNING: High score support is enabled, but the hiscorefont.png was"
     69  f000				  -	      echo	" NOT imported with incgraphic. The high score display code"
     70  f000				  -	      echo	" has been omitted from this build."
     71  f000				  -	      echo	""
     72  f000				  -	      else
     73  f000				  -hscdrawscreen
     74  f000				  -
     75  f000				  -			; we use 20 lines on a 24 line display
     76  f000				  -			; HSSCOREY to dynamically centers based on
     77  f000				  -			;HSSCOREY = 0
     78  f000				  -HSSCOREY   =	((WZONECOUNT*WZONEHEIGHT/8)-22)/2
     79  f000				  -HSCURSORY  =	((HSSCOREY/(WZONEHEIGHT/8))*WZONEHEIGHT)
     80  f000				  -
     81  f000				  -	      ifconst	HSSCORESIZE
     82  f000				  -SCORESIZE  =	HSSCORESIZE
     83  f000				  -	      else
     84  f000				  -SCORESIZE  =	6
     85  f000				  -	      endif
     86  f000				  -
     87  f000				  -			;save shadow registers for later return...
     88  f000				  -	      lda	sCTRL
     89  f000				  -	      sta	ssCTRL
     90  f000				  -	      lda	sCHARBASE
     91  f000				  -	      sta	ssCHARBASE
     92  f000				  -	      lda	#$60
     93  f000				  -	      sta	charactermode
     94  f000				  -	      jsr	drawwait
     95  f000				  -	      jsr	blacken320colors
     96  f000				  -	      jsr	clearscreen
     97  f000				  -
     98  f000				  -			;set the character base to the HSC font
     99  f000				  -	      lda	#>hiscorefont
    100  f000				  -	      sta	CHARBASE
    101  f000				  -	      sta	sCHARBASE
    102  f000				  -	      lda	#%01000011	;Enable DMA, mode=320A
    103  f000				  -	      sta	CTRL
    104  f000				  -	      sta	sCTRL
    105  f000				  -
    106  f000				  -	      lda	#60
    107  f000				  -	      sta	hsjoydebounce
    108  f000				  -
    109  f000				  -	      lda	#0
    110  f000				  -	      sta	hscursorx
    111  f000				  -	      sta	framecounter
    112  f000				  -	      ifnconst	HSCOLORCHASESTART
    113  f000				  -	      lda	#$8D	; default is blue. why not?
    114  f000				  -	      else
    115  f000				  -	      lda	#HSCOLORCHASESTART
    116  f000				  -	      endif
    117  f000				  -	      sta	hscolorchaseindex
    118  f000				  -
    119  f000				  -	      lda	#$0F
    120  f000				  -	      sta	P0C2	; base text is white
    121  f000				  -
    122  f000				  -	      jsr	hschasecolors
    123  f000				  -			; ** plot all of the initials
    124  f000				  -	      lda	#<HSRAMInitials
    125  f000				  -	      sta	temp1	; charmaplo
    126  f000				  -	      lda	#>HSRAMInitials
    127  f000				  -	      sta	temp2	; charmaphi
    128  f000				  -	      lda	#32+29	; palette=0-29 | 32-(width=3)
    129  f000				  -	      sta	temp3	; palette/width
    130  f000				  -	      lda	#104
    131  f000				  -	      sta	temp4	; X
    132  f000				  -	      lda	#((HSSCOREY+6)/(WZONEHEIGHT/8))
    133  f000				  -	      sta	temp5	; Y
    134  f000				  -plothsinitialsloop
    135  f000				  -	      jsr	plotcharacters
    136  f000				  -	      clc
    137  f000				  -	      lda	temp3
    138  f000				  -	      adc	#32
    139  f000				  -	      sta	temp3
    140  f000				  -	      inc	temp5
    141  f000				  -	      if	WZONEHEIGHT = 8
    142  f000				  -	      inc	temp5
    143  f000				  -	      endif
    144  f000				  -	      clc
    145  f000				  -	      lda	#3
    146  f000				  -	      adc	temp1
    147  f000				  -	      sta	temp1
    148  f000				  -	      cmp	#(<(HSRAMInitials+15))
    149  f000				  -	      bcc	plothsinitialsloop
    150  f000				  -
    151  f000				  -	      ifconst	HSGAMENAMELEN
    152  f000				  -			;plot the game name...
    153  f000				  -	      lda	#<HSGAMENAMEtable
    154  f000				  -	      sta	temp1	; charmaplo
    155  f000				  -	      lda	#>HSGAMENAMEtable
    156  f000				  -	      sta	temp2	; charmaphi
    157  f000				  -	      lda	#(32-HSGAMENAMELEN)	; palette=0*29 | 32-(width=3)
    158  f000				  -	      sta	temp3	; palette/width
    159  f000				  -	      lda	#(80-(HSGAMENAMELEN*2))
    160  f000				  -	      sta	temp4	; X
    161  f000				  -	      lda	#((HSSCOREY+0)/(WZONEHEIGHT/8))
    162  f000				  -	      sta	temp5	; Y
    163  f000				  -	      jsr	plotcharacters
    164  f000				  -	      endif		; HSGAMENAMELEN
    165  f000				  -
    166  f000				  -			;plot "difficulty"...
    167  f000				  -	      ldy	gamedifficulty
    168  f000				  -	      ifnconst	HSNOLEVELNAMES
    169  f000				  -	      lda	highscoredifficultytextlo,y
    170  f000				  -	      sta	temp1
    171  f000				  -	      lda	highscoredifficultytexthi,y
    172  f000				  -	      sta	temp2
    173  f000				  -	      sec
    174  f000				  -	      lda	#32
    175  f000				  -	      sbc	highscoredifficultytextlen,y
    176  f000				  -	      sta	temp3	; palette/width
    177  f000				  -	      sec
    178  f000				  -	      lda	#40
    179  f000				  -	      sbc	highscoredifficultytextlen,y
    180  f000				  -	      asl
    181  f000				  -	      sta	temp4	; X
    182  f000				  -	      else
    183  f000				  -	      lda	#<HSHIGHSCOREStext
    184  f000				  -	      sta	temp1	; charmaplo
    185  f000				  -	      lda	#>HSHIGHSCOREStext
    186  f000				  -	      sta	temp2	; charmaphi
    187  f000				  -	      lda	#(32-11)	; palette=0*29 | 32-(width=3)
    188  f000				  -	      sta	temp3	; palette/width
    189  f000				  -	      lda	#(80-(11*2))
    190  f000				  -	      sta	temp4	; X
    191  f000				  -	      endif		; HSNOLEVELNAMES
    192  f000				  -
    193  f000				  -	      lda	#((HSSCOREY+2)/(WZONEHEIGHT/8))
    194  f000				  -	      sta	temp5	; Y
    195  f000				  -	      jsr	plotcharacters
    196  f000				  -	      ldy	hsdisplaymode	; 0=attact mode, 1=player eval, 2=player 1 eval, 3=player 2 player eval
    197  f000				  -	      bne	carronwithscoreevaluation
    198  f000				  -	      jmp	donoscoreevaluation
    199  f000				  -carronwithscoreevaluation
    200  f000				  -	      dey
    201  f000				  -	      lda	highscorelabeltextlo,y
    202  f000				  -	      sta	temp1
    203  f000				  -	      lda	highscorelabeltexthi,y
    204  f000				  -	      sta	temp2
    205  f000				  -	      sec
    206  f000				  -	      lda	#(32-15)	; palette=0*29 | 32-(width=3)
    207  f000				  -	      sta	temp3	; palette/width
    208  f000				  -	      lda	highscorelabeladjust1,y
    209  f000				  -	      sta	temp4	; X
    210  f000				  -	      lda	#((HSSCOREY+18)/(WZONEHEIGHT/8))
    211  f000				  -	      sta	temp5	; Y
    212  f000				  -	      jsr	plotcharacters
    213  f000				  -
    214  f000				  -	      ldy	hsdisplaymode	; 0=attact mode, 1=player eval, 2=player 1 eval, 3=player 2 player eval
    215  f000				  -	      dey
    216  f000				  -			;plot the current player score...
    217  f000				  -	      lda	#(32-SCORESIZE)	; palette=0*32
    218  f000				  -	      sta	temp3	; palette/width
    219  f000				  -	      lda	highscorelabeladjust2,y
    220  f000				  -	      sta	temp4	; X
    221  f000				  -	      lda	#((HSSCOREY+18)/(WZONEHEIGHT/8))
    222  f000				  -	      sta	temp5	; Y
    223  f000				  -
    224  f000				  -	      lda	scorevarlo,y
    225  f000				  -	      sta	temp7	; score variable lo
    226  f000				  -	      lda	scorevarhi,y
    227  f000				  -	      sta	temp8	; score variable hi
    228  f000				  -
    229  f000				  -	      lda	#(hiscorefont_mode | %01100000)	; charactermode
    230  f000				  -	      sta	temp9
    231  f000				  -
    232  f000				  -	      lda	#<(hiscorefont+33)	; +33 to get to '0' character
    233  f000				  -	      sta	temp1	; charmaplo
    234  f000				  -	      lda	#>(hiscorefont+33)
    235  f000				  -	      sta	temp2	; charmaphi
    236  f000				  -	      lda	#SCORESIZE
    237  f000				  -	      sta	temp6
    238  f000				  -	      ifnconst	DOUBLEWIDE
    239  f000				  -	      jsr	plotvalue
    240  f000				  -	      else
    241  f000				  -	      jsr	plotvaluedw
    242  f000				  -	      endif
    243  f000				  -
    244  f000				  -USED_PLOTVALUE =	1	; ensure that plotvalue gets compiled in
    245  f000				  -
    246  f000				  -	      ifconst	HSGAMERANKS
    247  f000				  -
    248  f000				  -	      ldx	#$ff	; start at 0 after the inx...
    249  f000				  -comparescore2rankloop
    250  f000				  -	      inx
    251  f000				  -	      ldy	#0
    252  f000				  -	      lda	rankvalue_0,x
    253  f000				  -	      cmp	(temp7),y
    254  f000				  -	      bcc	score2rankloopdone
    255  f000				  -	      bne	comparescore2rankloop
    256  f000				  -	      iny
    257  f000				  -	      lda	rankvalue_1,x
    258  f000				  -	      cmp	(temp7),y
    259  f000				  -	      bcc	score2rankloopdone
    260  f000				  -	      bne	comparescore2rankloop
    261  f000				  -	      iny
    262  f000				  -	      lda	(temp7),y
    263  f000				  -	      cmp	rankvalue_2,x
    264  f000				  -	      bcs	score2rankloopdone
    265  f000				  -	      jmp	comparescore2rankloop
    266  f000				  -score2rankloopdone
    267  f000				  -	      stx	hsnewscorerank
    268  f000				  -
    269  f000				  -	      lda	ranklabello,x
    270  f000				  -	      sta	temp1
    271  f000				  -	      lda	ranklabelhi,x
    272  f000				  -	      sta	temp2
    273  f000				  -	      sec
    274  f000				  -	      lda	#32	; palette=0*29 | 32-(width=3)
    275  f000				  -	      sbc	ranklabellengths,x
    276  f000				  -	      sta	temp3	; palette/width
    277  f000				  -	      sec
    278  f000				  -	      lda	#(40+6)
    279  f000				  -	      sbc	ranklabellengths,x
    280  f000				  -	      asl
    281  f000				  -	      sta	temp4	; X
    282  f000				  -	      lda	#((HSSCOREY+20)/(WZONEHEIGHT/8))
    283  f000				  -	      sta	temp5	; Y
    284  f000				  -	      jsr	plotcharacters
    285  f000				  -
    286  f000				  -	      ldx	hsnewscorerank
    287  f000				  -
    288  f000				  -	      lda	#<highscoreranklabel
    289  f000				  -	      sta	temp1
    290  f000				  -	      lda	#>highscoreranklabel
    291  f000				  -	      sta	temp2
    292  f000				  -
    293  f000				  -	      lda	#(32-5)	; palette=0*29 | 32-(width=3)
    294  f000				  -	      sta	temp3	; palette/width
    295  f000				  -	      lda	#(40-6)
    296  f000				  -	      sec
    297  f000				  -	      sbc	ranklabellengths,x
    298  f000				  -	      asl
    299  f000				  -	      sta	temp4	; X
    300  f000				  -	      lda	#((HSSCOREY+20)/(WZONEHEIGHT/8))
    301  f000				  -	      sta	temp5	; Y
    302  f000				  -	      jsr	plotcharacters
    303  f000				  -	      endif
    304  f000				  -
    305  f000				  -
    306  f000				  -			; ** which line did this player beat?
    307  f000				  -	      lda	#$ff
    308  f000				  -	      sta	hsnewscoreline
    309  f000				  -	      ldx	#$fd
    310  f000				  -comparescoreadd2x
    311  f000				  -	      inx
    312  f000				  -comparescoreadd1x
    313  f000				  -	      inx
    314  f000				  -comparescore2lineloop
    315  f000				  -	      inc	hsnewscoreline
    316  f000				  -	      inx		; initialrun, x=0
    317  f000				  -	      cpx	#15
    318  f000				  -	      beq	nohighscoreforyou
    319  f000				  -	      ldy	#0
    320  f000				  -	      lda	HSRAMScores,x
    321  f000				  -	      cmp	(temp7),y	; first score digit
    322  f000				  -	      bcc	score2lineloopdonedel1x
    323  f000				  -	      bne	comparescoreadd2x
    324  f000				  -	      iny
    325  f000				  -	      inx
    326  f000				  -	      lda	HSRAMScores,x
    327  f000				  -	      cmp	(temp7),y
    328  f000				  -	      bcc	score2lineloopdonedel2x
    329  f000				  -	      bne	comparescoreadd1x
    330  f000				  -	      iny
    331  f000				  -	      inx
    332  f000				  -	      lda	(temp7),y
    333  f000				  -	      cmp	HSRAMScores,x
    334  f000				  -	      bcs	score2lineloopdonedel3x
    335  f000				  -	      jmp	comparescore2lineloop
    336  f000				  -nohighscoreforyou
    337  f000				  -	      lda	#$ff
    338  f000				  -	      sta	hsnewscoreline
    339  f000				  -	      sta	countdownseconds
    340  f000				  -	      jmp	donoscoreevaluation
    341  f000				  -score2lineloopdonedel3x
    342  f000				  -	      dex
    343  f000				  -score2lineloopdonedel2x
    344  f000				  -	      dex
    345  f000				  -score2lineloopdonedel1x
    346  f000				  -	      dex
    347  f000				  -
    348  f000				  -			; 0 1 2
    349  f000				  -			; 3 4 5
    350  f000				  -			; 6 7 8
    351  f000				  -			; 9 0 1
    352  f000				  -			; 2 3 4
    353  f000				  -
    354  f000				  -	      stx	temp9
    355  f000				  -	      cpx	#11
    356  f000				  -	      beq	postsortscoresuploop
    357  f000				  -	      ldx	#11
    358  f000				  -sortscoresuploop
    359  f000				  -	      lda	HSRAMScores,x
    360  f000				  -	      sta	HSRAMScores+3,x
    361  f000				  -	      lda	HSRAMInitials,x
    362  f000				  -	      sta	HSRAMInitials+3,x
    363  f000				  -	      dex
    364  f000				  -	      cpx	temp9
    365  f000				  -	      bne	sortscoresuploop
    366  f000				  -postsortscoresuploop
    367  f000				  -
    368  f000				  -			;stick the score and cleared initials in the slot...
    369  f000				  -	      inx
    370  f000				  -	      ldy	#0
    371  f000				  -	      sty	hsinitialhold
    372  f000				  -	      lda	(temp7),y
    373  f000				  -	      sta	HSRAMScores,x
    374  f000				  -	      iny
    375  f000				  -	      lda	(temp7),y
    376  f000				  -	      sta	HSRAMScores+1,x
    377  f000				  -	      iny
    378  f000				  -	      lda	(temp7),y
    379  f000				  -	      sta	HSRAMScores+2,x
    380  f000				  -	      lda	#0
    381  f000				  -	      sta	HSRAMInitials,x
    382  f000				  -	      lda	#29
    383  f000				  -	      sta	HSRAMInitials+1,x
    384  f000				  -	      sta	HSRAMInitials+2,x
    385  f000				  -
    386  f000				  -	      stx	hsinitialpos
    387  f000				  -
    388  f000				  -	      ifconst	vox_highscore
    389  f000				  -	      lda	<#vox_highscore
    390  f000				  -	      sta	speech_addr
    391  f000				  -	      lda	>#vox_highscore
    392  f000				  -	      sta	speech_addr+1
    393  f000				  -	      endif
    394  f000				  -	      ifconst	sfx_highscore
    395  f000				  -	      lda	<#sfx_highscore
    396  f000				  -	      sta	temp1
    397  f000				  -	      lda	>#sfx_highscore
    398  f000				  -	      sta	temp2
    399  f000				  -	      lda	#0
    400  f000				  -	      sta	temp3
    401  f000				  -	      jsr	schedulesfx
    402  f000				  -	      endif
    403  f000				  -	      ifconst	songdatastart_song_highscore
    404  f000				  -	      lda	#<songchanneltable_song_highscore
    405  f000				  -	      sta	songpointerlo
    406  f000				  -	      lda	#>songchanneltable_song_highscore
    407  f000				  -	      sta	songpointerhi
    408  f000				  -	      lda	#73
    409  f000				  -	      sta	songtempo
    410  f000				  -	      jsr	setsongchannels
    411  f000				  -	      endif
    412  f000				  -
    413  f000				  -
    414  f000				  -donoscoreevaluation
    415  f000				  -
    416  f000				  -	      lda	#(32+(32-SCORESIZE))	; palette=0*32 | 32-(width=6)
    417  f000				  -	      sta	temp3	; palette/width
    418  f000				  -	      lda	#(72+(4*(6-SCORESIZE)))
    419  f000				  -	      sta	temp4	; X
    420  f000				  -	      lda	#((HSSCOREY+6)/(WZONEHEIGHT/8))
    421  f000				  -	      sta	temp5	; Y
    422  f000				  -	      lda	#<HSRAMScores
    423  f000				  -	      sta	temp7	; score variable lo
    424  f000				  -	      lda	#>HSRAMScores
    425  f000				  -	      sta	temp8	; score variable hi
    426  f000				  -	      lda	#(hiscorefont_mode | %01100000)	; charactermode
    427  f000				  -	      sta	temp9
    428  f000				  -plothsscoresloop
    429  f000				  -	      lda	#<(hiscorefont+33)	; +33 to get to '0' character
    430  f000				  -	      sta	temp1	; charmaplo
    431  f000				  -	      lda	#>(hiscorefont+33)
    432  f000				  -	      sta	temp2	; charmaphi
    433  f000				  -	      lda	#6
    434  f000				  -	      sta	temp6
    435  f000				  -	      ifnconst	DOUBLEWIDE
    436  f000				  -	      jsr	plotvalue
    437  f000				  -	      else
    438  f000				  -	      jsr	plotvaluedw
    439  f000				  -	      endif
    440  f000				  -	      clc
    441  f000				  -	      lda	temp3
    442  f000				  -	      adc	#32
    443  f000				  -	      sta	temp3
    444  f000				  -	      inc	temp5
    445  f000				  -	      if	WZONEHEIGHT = 8
    446  f000				  -	      inc	temp5
    447  f000				  -	      endif
    448  f000				  -	      clc
    449  f000				  -	      lda	#3
    450  f000				  -	      adc	temp7
    451  f000				  -	      sta	temp7
    452  f000				  -	      cmp	#(<(HSRAMScores+15))
    453  f000				  -	      bcc	plothsscoresloop
    454  f000				  -plothsindex
    455  f000				  -	      lda	#32+31	; palette=0*32 | 32-(width=1)
    456  f000				  -	      sta	temp3	; palette/width
    457  f000				  -	      lda	#44
    458  f000				  -	      sta	temp4	; X
    459  f000				  -	      lda	#((HSSCOREY+6)/(WZONEHEIGHT/8))
    460  f000				  -	      sta	temp5	; Y
    461  f000				  -	      lda	#<hsgameslotnumbers
    462  f000				  -	      sta	temp7	; score variable lo
    463  f000				  -	      lda	#>hsgameslotnumbers
    464  f000				  -	      sta	temp8	; score variable hi
    465  f000				  -	      lda	#(hiscorefont_mode | %01100000)	; charactermode
    466  f000				  -	      sta	temp9
    467  f000				  -plothsindexloop
    468  f000				  -	      lda	#<(hiscorefont+33)
    469  f000				  -	      sta	temp1	; charmaplo
    470  f000				  -	      lda	#>(hiscorefont+33)
    471  f000				  -	      sta	temp2	; charmaphi
    472  f000				  -	      lda	#1
    473  f000				  -	      sta	temp6	; number of characters
    474  f000				  -	      ifnconst	DOUBLEWIDE
    475  f000				  -	      jsr	plotvalue
    476  f000				  -	      else
    477  f000				  -	      jsr	plotvaluedw
    478  f000				  -	      endif
    479  f000				  -	      clc
    480  f000				  -	      lda	temp3
    481  f000				  -	      adc	#32
    482  f000				  -	      sta	temp3
    483  f000				  -	      inc	temp5
    484  f000				  -	      if	WZONEHEIGHT = 8
    485  f000				  -	      inc	temp5
    486  f000				  -	      endif
    487  f000				  -	      inc	temp7
    488  f000				  -	      lda	temp7
    489  f000				  -	      cmp	#(<(hsgameslotnumbers+5))
    490  f000				  -	      bcc	plothsindexloop
    491  f000				  -
    492  f000				  -	      jsr	savescreen
    493  f000				  -	      ifnconst	HSSECONDS
    494  f000				  -	      lda	#6
    495  f000				  -	      else
    496  f000				  -	      lda	#HSSECONDS
    497  f000				  -	      endif
    498  f000				  -
    499  f000				  -	      sta	countdownseconds
    500  f000				  -
    501  f000				  -keepdisplayinghs
    502  f000				  -	      jsr	restorescreen
    503  f000				  -
    504  f000				  -	      jsr	setuphsinpt1
    505  f000				  -
    506  f000				  -	      lda	hsnewscoreline
    507  f000				  -	      bpl	carryonkeepdisplayinghs
    508  f000				  -	      jmp	skipenterscorecontrol
    509  f000				  -carryonkeepdisplayinghs
    510  f000				  -
    511  f000				  -
    512  f000				  -	      ifnconst	HSSECONDS
    513  f000				  -	      lda	#6
    514  f000				  -	      else
    515  f000				  -	      lda	#HSSECONDS
    516  f000				  -	      endif
    517  f000				  -
    518  f000				  -	      sta	countdownseconds
    519  f000				  -
    520  f000				  -			;plot the "cursor" initial sprite...
    521  f000				  -	      lda	hsinitialhold
    522  f000				  -
    523  f000				  -	      sta	temp1
    524  f000				  -	      lda	#>(hiscorefont+32)
    525  f000				  -	      sta	temp2
    526  f000				  -	      lda	#31	; palette=0*32 | 32-(width=1)
    527  f000				  -	      sta	temp3	; palette/width
    528  f000				  -	      lda	hscursorx
    529  f000				  -	      asl
    530  f000				  -	      asl
    531  f000				  -	      clc
    532  f000				  -	      adc	#104
    533  f000				  -	      sta	temp4	; X
    534  f000				  -	      lda	hsnewscoreline
    535  f000				  -	      asl
    536  f000				  -	      asl
    537  f000				  -	      asl
    538  f000				  -	      asl
    539  f000				  -	      adc	#((3*16)+HSCURSORY)
    540  f000				  -	      sta	temp5	; Y
    541  f000				  -	      lda	#%01000000
    542  f000				  -	      sta	temp6
    543  f000				  -	      jsr	plotsprite
    544  f000				  -
    545  f000				  -	      ldx	hscursorx
    546  f000				  -	      ldy	hsdisplaymode
    547  f000				  -	      lda	SWCHA
    548  f000				  -	      cpy	#3
    549  f000				  -	      bne	hsskipadjustjoystick1
    550  f000				  -	      asl
    551  f000				  -	      asl
    552  f000				  -	      asl
    553  f000				  -	      asl
    554  f000				  -hsskipadjustjoystick1
    555  f000				  -	      sta	hsswcha
    556  f000				  -	      and	#%00110000
    557  f000				  -	      cmp	#%00110000
    558  f000				  -	      beq	hsjoystickskipped
    559  f000				  -	      lda	hsjoydebounce
    560  f000				  -	      beq	hsdontdebounce
    561  f000				  -	      jmp	hspostjoystick
    562  f000				  -hsdontdebounce
    563  f000				  -	      ldx	#1	; small tick sound
    564  f000				  -	      jsr	playhssfx
    565  f000				  -	      lda	hsswcha
    566  f000				  -	      and	#%00110000
    567  f000				  -	      ldx	hscursorx
    568  f000				  -	      cmp	#%00100000	; check down
    569  f000				  -	      bne	hsjoycheckup
    570  f000				  -	      ldy	hsinitialhold
    571  f000				  -	      cpx	#0
    572  f000				  -	      bne	skipavoid31_1
    573  f000				  -	      cpy	#0	; if we're about to change to the <- char (#31) then double-decrement to skip over it
    574  f000				  -	      bne	skipavoid31_1
    575  f000				  -	      dey
    576  f000				  -skipavoid31_1
    577  f000				  -	      dey
    578  f000				  -	      jmp	hssetdebounce
    579  f000				  -hsjoycheckup
    580  f000				  -	      cmp	#%00010000	; check up
    581  f000				  -	      bne	hsjoystickskipped
    582  f000				  -	      ldy	hsinitialhold
    583  f000				  -	      cpx	#0
    584  f000				  -	      bne	skipavoid31_2
    585  f000				  -	      cpy	#30	; if we're about to change to the <- char (#31) then double-increment to skip over it
    586  f000				  -	      bne	skipavoid31_2
    587  f000				  -	      iny
    588  f000				  -skipavoid31_2
    589  f000				  -	      iny
    590  f000				  -hssetdebounce
    591  f000				  -	      tya
    592  f000				  -	      and	#31
    593  f000				  -	      sta	hsinitialhold
    594  f000				  -	      lda	#15
    595  f000				  -	      sta	hsjoydebounce
    596  f000				  -	      bne	hspostjoystick
    597  f000				  -hsjoystickskipped
    598  f000				  -			; check the fire button only when the stick isn't engaged
    599  f000				  -	      lda	hsinpt1
    600  f000				  -	      bpl	hsbuttonskipped
    601  f000				  -	      lda	hsjoydebounce
    602  f000				  -	      beq	hsfiredontdebounce
    603  f000				  -	      bne	hspostjoystick
    604  f000				  -hsfiredontdebounce
    605  f000				  -	      lda	hsinitialhold
    606  f000				  -	      cmp	#31
    607  f000				  -	      beq	hsmovecursorback
    608  f000				  -	      inc	hscursorx
    609  f000				  -	      inc	hsinitialpos
    610  f000				  -	      lda	hscursorx
    611  f000				  -	      cmp	#3
    612  f000				  -	      bne	skiphsentryisdone
    613  f000				  -	      lda	#0
    614  f000				  -	      sta	framecounter
    615  f000				  -	      lda	#$ff
    616  f000				  -	      sta	hsnewscoreline
    617  f000				  -	      dec	hsinitialpos
    618  f000				  -	      bne	skiphsentryisdone
    619  f000				  -hsmovecursorback
    620  f000				  -	      lda	hscursorx
    621  f000				  -	      beq	skiphsmovecursorback
    622  f000				  -	      lda	#29
    623  f000				  -	      ldx	hsinitialpos
    624  f000				  -	      sta	HSRAMInitials,x
    625  f000				  -	      dec	hsinitialpos
    626  f000				  -	      dec	hscursorx
    627  f000				  -	      dex
    628  f000				  -	      lda	HSRAMInitials,x
    629  f000				  -	      sta	hsinitialhold
    630  f000				  -skiphsmovecursorback
    631  f000				  -skiphsentryisdone
    632  f000				  -	      ldx	#0
    633  f000				  -	      jsr	playhssfx
    634  f000				  -	      lda	#20
    635  f000				  -	      sta	hsjoydebounce
    636  f000				  -	      bne	hspostjoystick
    637  f000				  -
    638  f000				  -hsbuttonskipped
    639  f000				  -	      lda	#0
    640  f000				  -	      sta	hsjoydebounce
    641  f000				  -hspostjoystick
    642  f000				  -
    643  f000				  -	      ldx	hsinitialpos
    644  f000				  -	      lda	hsinitialhold
    645  f000				  -	      sta	HSRAMInitials,x
    646  f000				  -
    647  f000				  -	      jmp	skiphschasecolors
    648  f000				  -
    649  f000				  -skipenterscorecontrol
    650  f000				  -	      jsr	hschasecolors
    651  f000				  -	      jsr	setuphsinpt1
    652  f000				  -	      lda	hsjoydebounce
    653  f000				  -	      bne	skiphschasecolors
    654  f000				  -	      lda	hsinpt1
    655  f000				  -	      bmi	returnfromhs
    656  f000				  -skiphschasecolors
    657  f000				  -
    658  f000				  -	      jsr	drawscreen
    659  f000				  -
    660  f000				  -	      lda	countdownseconds
    661  f000				  -	      beq	returnfromhs
    662  f000				  -	      jmp	keepdisplayinghs
    663  f000				  -returnfromhs
    664  f000				  -
    665  f000				  -	      ifconst	songdatastart_song_highscore
    666  f000				  -	      lda	hsdisplaymode
    667  f000				  -	      beq	skipclearHSCsong
    668  f000				  -	      lda	#0
    669  f000				  -	      sta	songtempo
    670  f000				  -skipclearHSCsong
    671  f000				  -	      endif
    672  f000				  -	      jsr	drawwait
    673  f000				  -	      jsr	clearscreen
    674  f000				  -	      lda	#0
    675  f000				  -	      ldy	#7
    676  f000				  -	      jsr	blacken320colors
    677  f000				  -	      lda	ssCTRL
    678  f000				  -	      sta	sCTRL
    679  f000				  -	      lda	ssCHARBASE
    680  f000				  -	      sta	sCHARBASE
    681  f000				  -	      rts
    682  f000				  -
    683  f000				  -setuphsinpt1
    684  f000				  -	      lda	#$ff
    685  f000				  -	      sta	hsinpt1
    686  f000				  -	      lda	hsjoydebounce
    687  f000				  -	      beq	skipdebounceadjust
    688  f000				  -	      dec	hsjoydebounce
    689  f000				  -	      bne	skipstorefirebuttonstatus
    690  f000				  -skipdebounceadjust
    691  f000				  -	      ldx	hsdisplaymode
    692  f000				  -	      cpx	#3
    693  f000				  -	      bne	hsskipadjustjoyfire1
    694  f000				  -	      lda	sINPT3
    695  f000				  -	      jmp	hsskipadjustjoyfire1done
    696  f000				  -hsskipadjustjoyfire1
    697  f000				  -	      lda	sINPT1
    698  f000				  -hsskipadjustjoyfire1done
    699  f000				  -	      sta	hsinpt1
    700  f000				  -skipstorefirebuttonstatus
    701  f000				  -	      rts
    702  f000				  -
    703  f000				  -blacken320colors
    704  f000				  -	      ldy	#7
    705  f000				  -blacken320colorsloop
    706  f000				  -	      sta	P0C2,y
    707  f000				  -	      dey
    708  f000				  -	      bpl	blacken320colorsloop
    709  f000				  -	      rts
    710  f000				  -
    711  f000				  -hschasecolors
    712  f000				  -	      lda	framecounter
    713  f000				  -	      and	#3
    714  f000				  -	      bne	hschasecolorsreturn
    715  f000				  -	      inc	hscolorchaseindex
    716  f000				  -	      lda	hscolorchaseindex
    717  f000				  -
    718  f000				  -	      sta	P5C2
    719  f000				  -	      sbc	#$02
    720  f000				  -	      sta	P4C2
    721  f000				  -	      sbc	#$02
    722  f000				  -	      sta	P3C2
    723  f000				  -	      sbc	#$02
    724  f000				  -	      sta	P2C2
    725  f000				  -	      sbc	#$02
    726  f000				  -	      sta	P1C2
    727  f000				  -hschasecolorsreturn
    728  f000				  -	      rts
    729  f000				  -
    730  f000				  -playhssfx
    731  f000				  -	      lda	hssfx_lo,x
    732  f000				  -	      sta	temp1
    733  f000				  -	      lda	hssfx_hi,x
    734  f000				  -	      sta	temp2
    735  f000				  -	      lda	#0
    736  f000				  -	      sta	temp3
    737  f000				  -	      jmp	schedulesfx
    738  f000				  -
    739  f000				  -hssfx_lo
    740  f000				  -	      .byte	<sfx_hsletterpositionchange, <sfx_hslettertick
    741  f000				  -hssfx_hi
    742  f000				  -	      .byte	>sfx_hsletterpositionchange, >sfx_hslettertick
    743  f000				  -
    744  f000				  -sfx_hsletterpositionchange
    745  f000				  -	      .byte	$10,$18,$00
    746  f000				  -	      .byte	$02,$06,$08
    747  f000				  -	      .byte	$02,$06,$04
    748  f000				  -	      .byte	$00,$00,$00
    749  f000				  -sfx_hslettertick
    750  f000				  -	      .byte	$10,$18,$00
    751  f000				  -	      .byte	$00,$00,$0a
    752  f000				  -	      .byte	$00,$00,$00
    753  f000				  -
    754  f000				  -highscorelabeladjust1
    755  f000				  -	      .byte	(80-(14*2)-(SCORESIZE*2)),(80-(16*2)-(SCORESIZE*2)),(80-(16*2)-(SCORESIZE*2))
    756  f000				  -highscorelabeladjust2
    757  f000				  -	      .byte	(80+(14*2)-(SCORESIZE*2)),(80+(16*2)-(SCORESIZE*2)),(80+(16*2)-(SCORESIZE*2))
    758  f000				  -
    759  f000				  -scorevarlo
    760  f000				  -	      .byte	<(score0+((6-SCORESIZE)/2)),<(score0+((6-SCORESIZE)/2)),<(score1+((6-SCORESIZE)/2))
    761  f000				  -scorevarhi
    762  f000				  -	      .byte	>(score0+((6-SCORESIZE)/2)),>(score0+((6-SCORESIZE)/2)),>(score1+((6-SCORESIZE)/2))
    763  f000				  -
    764  f000				  -	      ifnconst	HSNOLEVELNAMES
    765  f000				  -highscoredifficultytextlo
    766  f000				  -	      .byte	<easylevelname, <mediumlevelname, <hardlevelname, <expertlevelname
    767  f000				  -highscoredifficultytexthi
    768  f000				  -	      .byte	>easylevelname, >mediumlevelname, >hardlevelname, >expertlevelname
    769  f000				  -	      ifnconst	HSCUSTOMLEVELNAMES
    770  f000				  -highscoredifficultytextlen
    771  f000				  -	      .byte	22, 30, 26, 24
    772  f000				  -
    773  f000				  -easylevelname
    774  f000				  -	      .byte	$04,$00,$12,$18,$1d,$0b,$04,$15,$04,$0b,$1d,$07,$08,$06,$07,$1d,$12,$02,$0e,$11,$04,$12
    775  f000				  -mediumlevelname
    776  f000				  -	      .byte	$08,$0d,$13,$04,$11,$0c,$04,$03,$08,$00,$13,$04,$1d,$0b,$04,$15,$04,$0b,$1d,$07,$08,$06,$07,$1d,$12,$02,$0e,$11,$04,$12
    777  f000				  -hardlevelname
    778  f000				  -	      .byte	$00,$03,$15,$00,$0d,$02,$04,$03,$1d,$0b,$04,$15,$04,$0b,$1d,$07,$08,$06,$07,$1d,$12,$02,$0e,$11,$04,$12
    779  f000				  -expertlevelname
    780  f000				  -	      .byte	$04,$17,$0f,$04,$11,$13,$1d,$0b,$04,$15,$04,$0b,$1d,$07,$08,$06,$07,$1d,$12,$02,$0e,$11,$04,$12
    781  f000				  -	      else
    782  f000				  -	      include	"7800hsgamediffnames.asm"
    783  f000				  -	      endif		; HSCUSTOMLEVELNAMES
    784  f000				  -	      else
    785  f000				  -HSHIGHSCOREStext
    786  f000				  -	      .byte	$07,$08,$06,$07,$1d,$12,$02,$0e,$11,$04,$12
    787  f000				  -	      endif		; HSNOLEVELNAMES
    788  f000				  -
    789  f000				  -highscorelabeltextlo
    790  f000				  -	      .byte	<player0label, <player1label, <player2label
    791  f000				  -highscorelabeltexthi
    792  f000				  -	      .byte	>player0label, >player1label, >player2label
    793  f000				  -
    794  f000				  -player0label
    795  f000				  -	      .byte	$0f,$0b,$00,$18,$04,$11,$1d,$12,$02,$0e,$11,$04,$1a,$1d,$1d
    796  f000				  -
    797  f000				  -player1label
    798  f000				  -	      .byte	$0f,$0b,$00,$18,$04,$11,$1d,$22,$1d,$12,$02,$0e,$11,$04,$1a
    799  f000				  -
    800  f000				  -player2label
    801  f000				  -	      .byte	$0f,$0b,$00,$18,$04,$11,$1d,$23,$1d,$12,$02,$0e,$11,$04,$1a
    802  f000				  -
    803  f000				  -
    804  f000				  -	      ifconst	HSGAMENAMELEN
    805  f000				  -HSGAMENAMEtable
    806  f000				  -	      include	"7800hsgamename.asm"
    807  f000				  -	      endif
    808  f000				  -	      ifconst	HSGAMERANKS
    809  f000				  -	      include	"7800hsgameranks.asm"
    810  f000				  -highscoreranklabel
    811  f000				  -	      .byte	$11,$00,$0d,$0a,$1a
    812  f000				  -	      endif
    813  f000				  -
    814  f000				  -			;ensure our table doesn't wrap a page...
    815  f000				  -	      if	((<*)>251)
    816  f000				  -	      align	256
    817  f000				  -	      endif
    818  f000				  -hsgameslotnumbers
    819  f000				  -	      .byte	33,34,35,36,37
    820  f000				  -	      endif
    821  f000				  -
    822  f000				  -loaddifficultytable
    823  f000				  -	      lda	gamedifficulty
    824  f000				  -	      and	#$03	; ensure the user hasn't selected an invalid difficulty
    825  f000				  -	      sta	gamedifficulty
    826  f000				  -	      cmp	hsdifficulty	; check game difficulty is the same as RAM table
    827  f000				  -	      bne	loaddifficultytablecontinue1
    828  f000				  -	      rts		; this high score difficulty table is already loaded
    829  f000				  -loaddifficultytablecontinue1
    830  f000				  -	      lda	gamedifficulty
    831  f000				  -	      sta	hsdifficulty
    832  f000				  -			;we need to check the device for the table
    833  f000				  -	      lda	hsdevice
    834  f000				  -	      bne	loaddifficultytablecontinue2
    835  f000				  -			; there's no save device. clear out this table.
    836  f000				  -	      jmp	cleardifficultytablemem
    837  f000				  -loaddifficultytablecontinue2
    838  f000				  -	      lda	hsdevice
    839  f000				  -	      and	#1
    840  f000				  -	      beq	memdeviceisntHSC
    841  f000				  -	      jmp	loaddifficultytableHSC
    842  f000				  -memdeviceisntHSC
    843  f000				  -	      jmp	loaddifficultytableAVOX
    844  f000				  -
    845  f000				  -savedifficultytable
    846  f000				  -			;*** we need to check wich device we should use...
    847  f000				  -	      lda	hsdevice
    848  f000				  -	      bne	savedifficultytablerealdevice
    849  f000				  -	      rts		; its a ram device
    850  f000				  -savedifficultytablerealdevice
    851  f000				  -	      and	#1
    852  f000				  -	      beq	savememdeviceisntHSC
    853  f000				  -	      jmp	savedifficultytableHSC
    854  f000				  -savememdeviceisntHSC
    855  f000				  -	      jmp	savedifficultytableAVOX
    856  f000				  -
    857  f000				  -savedifficultytableAVOX
    858  f000				  -			; the load call already setup the memory structure and atarivox memory location
    859  f000				  -	      jsr	savealoadedHSCtablecontinue
    860  f000				  -savedifficultytableAVOXskipconvert
    861  f000				  -	      lda	#HSIDHI
    862  f000				  -	      sta	eeprombuffer
    863  f000				  -	      lda	#HSIDLO
    864  f000				  -	      sta	eeprombuffer+1
    865  f000				  -	      lda	hsdifficulty
    866  f000				  -	      sta	eeprombuffer+2
    867  f000				  -	      lda	#32
    868  f000				  -	      jsr	AVoxWriteBytes
    869  f000				  -	      rts
    870  f000				  -
    871  f000				  -savedifficultytableHSC
    872  f000				  -			;we always load a table before reaching here, so the
    873  f000				  -			;memory structures from the load should be intact...
    874  f000				  -	      ldy	hsgameslot
    875  f000				  -	      bpl	savealoadedHSCtable
    876  f000				  -	      rts
    877  f000				  -savealoadedHSCtable
    878  f000				  -	      lda	HSCGameDifficulty,y
    879  f000				  -	      cmp	#$7F
    880  f000				  -	      bne	savealoadedHSCtablecontinue
    881  f000				  -	      jsr	initializeHSCtableentry
    882  f000				  -savealoadedHSCtablecontinue
    883  f000				  -			;convert our RAM table to HSC format and write it out...
    884  f000				  -	      ldy	#0
    885  f000				  -	      ldx	#0
    886  f000				  -savedifficultytableScores
    887  f000				  -
    888  f000				  -	      lda	HSRAMInitials,x
    889  f000				  -	      sta	temp3
    890  f000				  -	      lda	HSRAMInitials+1,x
    891  f000				  -	      sta	temp4
    892  f000				  -	      lda	HSRAMInitials+2,x
    893  f000				  -	      sta	temp5
    894  f000				  -	      jsr	encodeHSCInitials	; takes 3 byte initials from temp3,4,5 and stores 2 byte initials in temp1,2
    895  f000				  -
    896  f000				  -	      lda	temp1
    897  f000				  -	      sta	(HSGameTableLo),y
    898  f000				  -	      iny
    899  f000				  -	      lda	temp2
    900  f000				  -	      sta	(HSGameTableLo),y
    901  f000				  -	      iny
    902  f000				  -
    903  f000				  -	      lda	HSRAMScores,x
    904  f000				  -	      sta	(HSGameTableLo),y
    905  f000				  -	      iny
    906  f000				  -	      lda	HSRAMScores+1,x
    907  f000				  -	      sta	(HSGameTableLo),y
    908  f000				  -	      iny
    909  f000				  -	      lda	HSRAMScores+2,x
    910  f000				  -	      sta	(HSGameTableLo),y
    911  f000				  -	      iny
    912  f000				  -	      inx
    913  f000				  -	      inx
    914  f000				  -	      inx		; +3
    915  f000				  -	      cpx	#15
    916  f000				  -	      bne	savedifficultytableScores
    917  f000				  -	      rts
    918  f000				  -
    919  f000				  -loaddifficultytableHSC
    920  f000				  -			; routine responsible for loading the difficulty table from HSC
    921  f000				  -	      jsr	findindexHSC
    922  f000				  -	      ldy	hsgameslot
    923  f000				  -	      lda	HSCGameDifficulty,y
    924  f000				  -	      cmp	#$7F
    925  f000				  -	      bne	loaddifficultytableHSCcontinue
    926  f000				  -			;there was an error. use a new RAM table instead...
    927  f000				  -	      jmp	cleardifficultytablemem
    928  f000				  -loaddifficultytableHSCcontinue
    929  f000				  -			; parse the data into the HS memory...
    930  f000				  -	      ldy	#0
    931  f000				  -	      ldx	#0
    932  f000				  -loaddifficultytableScores
    933  f000				  -	      lda	(HSGameTableLo),y
    934  f000				  -	      sta	temp1
    935  f000				  -	      iny
    936  f000				  -	      lda	(HSGameTableLo),y
    937  f000				  -	      sta	temp2
    938  f000				  -	      jsr	decodeHSCInitials	; takes 2 byte initials from temp1,2 and stores 3 byte initials in temp3,4,5
    939  f000				  -	      iny
    940  f000				  -	      lda	(HSGameTableLo),y
    941  f000				  -	      sta	HSRAMScores,x
    942  f000				  -	      lda	temp3
    943  f000				  -	      sta	HSRAMInitials,x
    944  f000				  -	      inx
    945  f000				  -	      iny
    946  f000				  -	      lda	(HSGameTableLo),y
    947  f000				  -	      sta	HSRAMScores,x
    948  f000				  -	      lda	temp4
    949  f000				  -	      sta	HSRAMInitials,x
    950  f000				  -	      inx
    951  f000				  -	      iny
    952  f000				  -	      lda	(HSGameTableLo),y
    953  f000				  -	      sta	HSRAMScores,x
    954  f000				  -	      lda	temp5
    955  f000				  -	      sta	HSRAMInitials,x
    956  f000				  -	      inx
    957  f000				  -	      iny
    958  f000				  -	      cpx	#15
    959  f000				  -	      bne	loaddifficultytableScores
    960  f000				  -	      rts
    961  f000				  -
    962  f000				  -decodeHSCInitials
    963  f000				  -			; takes 2 byte initials from temp1,2 and stores 3 byte initials in temp3,4,5
    964  f000				  -			; 2 bytes are packed in the form: 22211111 22_33333
    965  f000				  -	      lda	#0
    966  f000				  -	      sta	temp4
    967  f000				  -	      lda	temp1
    968  f000				  -	      and	#%00011111
    969  f000				  -	      sta	temp3
    970  f000				  -
    971  f000				  -	      lda	temp2
    972  f000				  -	      and	#%00011111
    973  f000				  -	      sta	temp5
    974  f000				  -
    975  f000				  -	      lda	temp1
    976  f000				  -	      asl
    977  f000				  -	      rol	temp4
    978  f000				  -	      asl
    979  f000				  -	      rol	temp4
    980  f000				  -	      asl
    981  f000				  -	      rol	temp4
    982  f000				  -	      lda	temp2
    983  f000				  -	      asl
    984  f000				  -	      rol	temp4
    985  f000				  -	      asl
    986  f000				  -	      rol	temp4
    987  f000				  -	      rts
    988  f000				  -encodeHSCInitials
    989  f000				  -			; takes 3 byte initials from temp3,4,5 and stores 2 byte initials in temp1,2
    990  f000				  -			; 2 bytes are packed in the form: 22211111 22_33333
    991  f000				  -			; start with packing temp1...
    992  f000				  -	      lda	temp4
    993  f000				  -	      and	#%00011100
    994  f000				  -	      sta	temp1
    995  f000				  -	      asl	temp1
    996  f000				  -	      asl	temp1
    997  f000				  -	      asl	temp1
    998  f000				  -	      lda	temp3
    999  f000				  -	      and	#%00011111
   1000  f000				  -	      ora	temp1
   1001  f000				  -	      sta	temp1
   1002  f000				  -			; ...temp1 is now packed, on to temp2...
   1003  f000				  -	      lda	temp5
   1004  f000				  -	      asl
   1005  f000				  -	      asl
   1006  f000				  -	      ror	temp4
   1007  f000				  -	      ror
   1008  f000				  -	      ror	temp4
   1009  f000				  -	      ror
   1010  f000				  -	      sta	temp2
   1011  f000				  -	      rts
   1012  f000				  -
   1013  f000				  -findindexHSCerror
   1014  f000				  -			;the HSC is stuffed. return the bad slot flag
   1015  f000				  -	      ldy	#$ff
   1016  f000				  -	      sty	hsgameslot
   1017  f000				  -	      rts
   1018  f000				  -
   1019  f000				  -findindexHSC
   1020  f000				  -HSCGameID1 =	$1029
   1021  f000				  -HSCGameID2 =	$106E
   1022  f000				  -HSCGameDifficulty =	$10B3
   1023  f000				  -HSCGameIndex =	$10F8
   1024  f000				  -			; routine responsible for finding the game index from HSC
   1025  f000				  -			; call with x=0 to create a new table if none exist, call with x=$ff to avoid creating new tables
   1026  f000				  -			; the HS loading routine will use x=$ff, the HS saving routine will use x=0
   1027  f000				  -	      ldy	#69	; start +1 to account for the dey
   1028  f000				  -findindexHSCloop
   1029  f000				  -	      dey
   1030  f000				  -	      bmi	findindexHSCerror
   1031  f000				  -	      lda	HSCGameDifficulty,y
   1032  f000				  -	      cmp	#$7F
   1033  f000				  -	      beq	findourindexHSC
   1034  f000				  -	      cmp	gamedifficulty
   1035  f000				  -	      bne	findindexHSCloop
   1036  f000				  -	      lda	HSCGameID1,y
   1037  f000				  -	      cmp	#HSIDHI
   1038  f000				  -	      bne	findindexHSCloop
   1039  f000				  -	      lda	HSCGameID2,y
   1040  f000				  -	      cmp	#HSIDLO
   1041  f000				  -	      bne	findindexHSCloop
   1042  f000				  -findourindexHSC
   1043  f000				  -			; if we're here we found our index in the table
   1044  f000				  -			; or we found the first empty one
   1045  f000				  -	      sty	hsgameslot
   1046  f000				  -	      jsr	setupHSCGamepointer	; setup the pointer to the HS Table for this game...
   1047  f000				  -	      rts
   1048  f000				  -
   1049  f000				  -
   1050  f000				  -initializeHSCtableentry
   1051  f000				  -	      ldy	hsgameslot
   1052  f000				  -			; we need to make a new entry...
   1053  f000				  -	      lda	#HSIDHI
   1054  f000				  -	      sta	HSCGameID1,y
   1055  f000				  -	      lda	#HSIDLO
   1056  f000				  -	      sta	HSCGameID2,y
   1057  f000				  -	      lda	gamedifficulty
   1058  f000				  -	      sta	HSCGameDifficulty,y
   1059  f000				  -	      ldx	#0
   1060  f000				  -fixHSDGameDifficultylistLoop
   1061  f000				  -	      inx
   1062  f000				  -	      txa
   1063  f000				  -	      sta	HSCGameIndex,y
   1064  f000				  -	      iny
   1065  f000				  -	      cpy	#69
   1066  f000				  -	      bne	fixHSDGameDifficultylistLoop
   1067  f000				  -	      rts
   1068  f000				  -
   1069  f000				  -setupHSCGamepointer
   1070  f000				  -			; this routines sets (HSGameTableLo) pointing to the game's HS table
   1071  f000				  -	      lda	#$17
   1072  f000				  -	      sta	HSGameTableHi
   1073  f000				  -	      lda	#$FA
   1074  f000				  -	      sta	HSGameTableLo
   1075  f000				  -setupHSCGamepointerLoop
   1076  f000				  -	      lda	HSGameTableLo
   1077  f000				  -	      sec
   1078  f000				  -	      sbc	#25
   1079  f000				  -	      sta	HSGameTableLo
   1080  f000				  -	      lda	HSGameTableHi
   1081  f000				  -	      sbc	#0
   1082  f000				  -	      sta	HSGameTableHi
   1083  f000				  -	      iny
   1084  f000				  -	      cpy	#69
   1085  f000				  -	      bne	setupHSCGamepointerLoop
   1086  f000				  -	      rts
   1087  f000				  -
   1088  f000				  -loaddifficultytableAVOX
   1089  f000				  -			; routine responsible for loading the difficulty table from Avox
   1090  f000				  -			; we reuse HSC routines to format data to/from our Avox RAM buffer...
   1091  f000				  -	      lda	#>(eeprombuffer+3)
   1092  f000				  -	      sta	HSGameTableHi
   1093  f000				  -	      lda	#<(eeprombuffer+3)
   1094  f000				  -	      sta	HSGameTableLo
   1095  f000				  -
   1096  f000				  -			; the start location in EEPROM, subtract 32...
   1097  f000				  -	      lda	#$5F
   1098  f000				  -	      sta	HSVoxHi
   1099  f000				  -	      lda	#$E0
   1100  f000				  -	      sta	HSVoxLo
   1101  f000				  -	      lda	#0
   1102  f000				  -	      sta	temp1
   1103  f000				  -loaddifficultytableAVOXloop
   1104  f000				  -	      inc	temp1
   1105  f000				  -	      beq	loaddifficultytableAVOXfull
   1106  f000				  -	      clc
   1107  f000				  -	      lda	HSVoxLo
   1108  f000				  -	      adc	#32
   1109  f000				  -	      sta	HSVoxLo
   1110  f000				  -	      lda	HSVoxHi
   1111  f000				  -	      adc	#0
   1112  f000				  -	      sta	HSVoxHi
   1113  f000				  -	      lda	#3
   1114  f000				  -	      jsr	AVoxReadBytes	; read in 3 bytes, ID1,ID2,Difficulty
   1115  f000				  -	      lda	eeprombuffer
   1116  f000				  -	      cmp	#$FF
   1117  f000				  -	      beq	loaddifficultytableAVOXempty
   1118  f000				  -	      cmp	#HSIDHI
   1119  f000				  -	      bne	loaddifficultytableAVOXloop
   1120  f000				  -	      lda	eeprombuffer+1
   1121  f000				  -	      cmp	#HSIDLO
   1122  f000				  -	      bne	loaddifficultytableAVOXloop
   1123  f000				  -	      lda	eeprombuffer+2
   1124  f000				  -	      cmp	gamedifficulty
   1125  f000				  -	      bne	loaddifficultytableAVOXloop
   1126  f000				  -loaddifficultytableAVOXdone
   1127  f000				  -	      lda	#32
   1128  f000				  -	      jsr	AVoxReadBytes
   1129  f000				  -	      jsr	loaddifficultytableHSCcontinue
   1130  f000				  -	      rts
   1131  f000				  -loaddifficultytableAVOXfull
   1132  f000				  -	      lda	#0
   1133  f000				  -	      sta	hsdevice	; looks like all 255 entries are taken... disable it.
   1134  f000				  -loaddifficultytableAVOXempty
   1135  f000				  -	      jmp	cleardifficultytablemem
   1136  f000				  -	      rts
   1137  f000				  -
   1138  f000				  -cleardifficultytablemem
   1139  f000				  -	      ldy	#29
   1140  f000				  -	      lda	#0
   1141  f000				  -cleardifficultytablememloop
   1142  f000				  -	      sta	HSRAMTable,y
   1143  f000				  -	      dey
   1144  f000				  -	      bpl	cleardifficultytablememloop
   1145  f000				  -	      rts
   1146  f000				  -hiscoremoduleend
   1147  f000				  -
   1148  f000				  -	      echo	"  hiscore assembly: ",[(hiscoremoduleend-hiscoremodulestart)]d," bytes"
   1149  f000				  -
   1150  f000				  -	      ifconst	DOUBLEWIDE
   1151  f000				  -plotvaluedw
   1152  f000				  -plotdigitcount =	temp6
   1153  f000				  -	      lda	#0
   1154  f000				  -	      tay
   1155  f000				  -	      ldx	valbufend
   1156  f000				  -
   1157  f000				  -	      lda	plotdigitcount
   1158  f000				  -	      and	#1
   1159  f000				  -	      beq	pvnibble2chardw
   1160  f000				  -	      lda	#0
   1161  f000				  -	      sta	VALBUFFER,x	; just in case we skip this digit
   1162  f000				  -	      beq	pvnibble2char_skipnibbledw
   1163  f000				  -
   1164  f000				  -pvnibble2chardw
   1165  f000				  -			; high nibble...
   1166  f000				  -	      lda	(temp7),y
   1167  f000				  -	      and	#$f0
   1168  f000				  -	      lsr
   1169  f000				  -	      lsr
   1170  f000				  -	      lsr
   1171  f000				  -	      lsr
   1172  f000				  -
   1173  f000				  -	      clc
   1174  f000				  -	      adc	temp1	; add the offset to character graphics to our value
   1175  f000				  -	      sta	VALBUFFER,x
   1176  f000				  -	      inx
   1177  f000				  -	      dec	plotdigitcount
   1178  f000				  -pvnibble2char_skipnibbledw
   1179  f000				  -			; low nibble...
   1180  f000				  -	      lda	(temp7),y
   1181  f000				  -	      and	#$0f
   1182  f000				  -	      clc
   1183  f000				  -	      adc	temp1	; add the offset to character graphics to our value
   1184  f000				  -	      sta	VALBUFFER,x
   1185  f000				  -	      inx
   1186  f000				  -	      iny
   1187  f000				  -
   1188  f000				  -	      dec	plotdigitcount
   1189  f000				  -	      bne	pvnibble2chardw
   1190  f000				  -			;point to the start of our valuebuffer
   1191  f000				  -	      clc
   1192  f000				  -	      lda	#<VALBUFFER
   1193  f000				  -	      adc	valbufend
   1194  f000				  -	      sta	temp1
   1195  f000				  -	      lda	#>VALBUFFER
   1196  f000				  -	      adc	#0
   1197  f000				  -	      sta	temp2
   1198  f000				  -
   1199  f000				  -			;advance valbufend to the end of our value buffer
   1200  f000				  -	      stx	valbufend
   1201  f000				  -
   1202  f000				  -	      ifnconst	plotvalueonscreen
   1203  f000				  -	      jmp	plotcharacters
   1204  f000				  -	      else
   1205  f000				  -	      jmp	plotcharacterslive
   1206  f000				  -	      endif
   1207  f000				  -	      endif		; DOUBLEWIDE
   1208  f000				  -
   1209  f000					      endif		; HSSUPPORT
   1210  f000
------- FILE c:\Users\Steve\Desktop\2018dev\7800\7800basic\projects\lessons\lesson1_gfx_modes\lesson1_31.bas.asm
   2270  f000					      endif
   2271  f000							; Provided under the CC0 license. See the included LICENSE.txt for details.
   2272  f000
   2273  f000							;standard routimes needed for pretty much all games
   2274  f000
   2275  f000							; some definitions used with "set debug color"
   2276  f000		       00 91	   DEBUGCALC  =	$91
   2277  f000		       00 41	   DEBUGWASTE =	$41
   2278  f000		       00 c1	   DEBUGDRAW  =	$C1
   2279  f000
   2280  f000							;NMI and IRQ handlers
   2281  f000				   NMI
   2282  f000							;VISIBLEOVER is 255 while the screen is drawn, and 0 right after the visible screen is done.
   2283  f000		       48		      pha		; save A
   2284  f001		       a5 4d		      lda	visibleover
   2285  f003		       49 ff		      eor	#255
   2286  f005		       85 4d		      sta	visibleover
   2287  f007				  -	      ifconst	DEBUGINTERRUPT
   2288  f007				  -	      and	#$93
   2289  f007				  -	      sta	BACKGRND
   2290  f007					      endif
   2291  f007		       ce b2 01 	      dec	interruptindex
   2292  f00a		       d0 03		      bne	skipreallyoffvisible
   2293  f00c		       4c 5e f0 	      jmp	reallyoffvisible
   2294  f00f				   skipreallyoffvisible
   2295  f00f		       a5 4d		      lda	visibleover
   2296  f011		       f0 49		      beq	skiptopscreenroutine
   2297  f013		       8a		      txa		; save X+Y
   2298  f014		       48		      pha
   2299  f015		       98		      tya
   2300  f016		       48		      pha
   2301  f017		       d8		      cld
   2302  f018					      ifconst	.topscreenroutine
   2303  f018		       20 7f 45 	      jsr	.topscreenroutine
   2304  f01b					      endif
   2305  f01b		       ee 3e 21 	      inc	frameslost	; this is balanced with a "dec frameslost" when drawscreen is called.
   2306  f01e
   2307  f01e							; ** Other important routines that need to regularly run, and can run onscreen.
   2308  f01e							; ** Atarivox can't go here, because Maria might interrupt it while it's bit-banging.
   2309  f01e
   2310  f01e				   longcontrollerreads		; ** controllers that take a lot of time to read. We use much of the visible screen here.
   2311  f01e				  -	      ifconst	LONGCONTROLLERREAD
   2312  f01e				  -	      lda	#$38
   2313  f01e				  -	      ifconst	LONGDEBUG
   2314  f01e				  -	      sta	BACKGRND
   2315  f01e				  -	      endif
   2316  f01e				  -	      sta	inttemp6
   2317  f01e				  -
   2318  f01e				  -longreadlineloop
   2319  f01e				  -	      ldx	#1
   2320  f01e				  -longreadloop
   2321  f01e				  -	      ldy	port0control,x
   2322  f01e				  -	      lda	longreadroutinelo,y
   2323  f01e				  -	      sta	inttemp3
   2324  f01e				  -	      lda	longreadroutinehi,y
   2325  f01e				  -	      sta	inttemp4
   2326  f01e				  -	      ora	inttemp3
   2327  f01e				  -	      beq	longreadloopreturn
   2328  f01e				  -	      jmp	(inttemp3)
   2329  f01e				  -longreadloopreturn
   2330  f01e				  -	      dex
   2331  f01e				  -	      bpl	longreadloop
   2332  f01e				  -	      dec	inttemp6
   2333  f01e				  -	      sta	WSYNC
   2334  f01e				  -	      bne	longreadlineloop
   2335  f01e				  -
   2336  f01e				  -	      ifconst	LONGDEBUG
   2337  f01e				  -	      lda	#$00
   2338  f01e				  -	      sta	BACKGRND
   2339  f01e				  -	      endif
   2340  f01e					      endif		; LONGCONTROLLERREAD
   2341  f01e
   2342  f01e		       20 e2 f1 	      jsr	servicesfxchannels
   2343  f021				  -	      ifconst	MUSICTRACKER
   2344  f021				  -	      jsr	servicesong
   2345  f021					      endif		; MUSICTRACKER
   2346  f021
   2347  f021		       ee a4 01 	      inc	framecounter
   2348  f024		       ad a4 01 	      lda	framecounter
   2349  f027		       29 3f		      and	#63
   2350  f029		       d0 08		      bne	skipcountdownseconds
   2351  f02b		       ad a5 01 	      lda	countdownseconds
   2352  f02e		       f0 03		      beq	skipcountdownseconds
   2353  f030		       ce a5 01 	      dec	countdownseconds
   2354  f033				   skipcountdownseconds
   2355  f033
   2356  f033		       a2 01		      ldx	#1
   2357  f035				   buttonreadloop
   2358  f035		       8a		      txa
   2359  f036		       48		      pha
   2360  f037		       bc e2 01 	      ldy	port0control,x
   2361  f03a		       b9 c5 f1 	      lda	buttonhandlerlo,y
   2362  f03d		       85 da		      sta	inttemp3
   2363  f03f		       b9 ba f1 	      lda	buttonhandlerhi,y
   2364  f042		       85 db		      sta	inttemp4
   2365  f044		       05 da		      ora	inttemp3
   2366  f046		       f0 03		      beq	buttonreadloopreturn
   2367  f048		       6c da 00 	      jmp	(inttemp3)
   2368  f04b				   buttonreadloopreturn
   2369  f04b		       68		      pla
   2370  f04c		       aa		      tax
   2371  f04d		       ca		      dex
   2372  f04e		       10 e5		      bpl	buttonreadloop
   2373  f050
   2374  f050				  -	      ifconst	DRIVINGSUPPORT
   2375  f050				  -	      jsr	drivingupdate
   2376  f050					      endif		; DRIVINGSUPPORT
   2377  f050				  -	      ifconst	KEYPADSUPPORT
   2378  f050				  -	      jsr	keypadrowselect
   2379  f050					      endif		; KEYPADSUPPORT
   2380  f050
   2381  f050
   2382  f050		       ad b5 01 	      lda	doublebufferminimumframeindex
   2383  f053		       f0 03		      beq	skipdoublebufferminimumframeindexadjust
   2384  f055		       ce b5 01 	      dec	doublebufferminimumframeindex
   2385  f058				   skipdoublebufferminimumframeindexadjust
   2386  f058
   2387  f058		       68		      pla
   2388  f059		       a8		      tay
   2389  f05a		       68		      pla
   2390  f05b		       aa		      tax
   2391  f05c				   skiptopscreenroutine
   2392  f05c		       68		      pla
   2393  f05d				   IRQ
   2394  f05d		       40		      RTI
   2395  f05e
   2396  f05e				  -	      ifconst	LONGCONTROLLERREAD
   2397  f05e				  -longreadroutinelo
   2398  f05e				  -			;	  NONE		PROLINE        LIGHTGUN      PADDLE
   2399  f05e				  -	      .byte	0, 0, 0, 0
   2400  f05e				  -			;	  TRKBALL	VCS STICK      DRIVING	     KEYPAD
   2401  f05e				  -	      .byte	0, 0, 0, 0
   2402  f05e				  -			;	  STMOUSE	AMOUSE	       ATARIVOX
   2403  f05e				  -	      .byte	<mouseupdate, <mouseupdate, 0
   2404  f05e				  -
   2405  f05e				  -longreadroutinehi
   2406  f05e				  -			;	  NONE		PROLINE        LIGHTGUN      PADDLE
   2407  f05e				  -	      .byte	0, 0, 0, 0
   2408  f05e				  -			;	  TRKBALL	VCS STICK      DRIVING	     KEYPAD
   2409  f05e				  -	      .byte	0, 0, 0, 0
   2410  f05e				  -			;	  STMOUSE	AMOUSE	       ATARIVOX
   2411  f05e				  -	      .byte	>mouseupdate, >mouseupdate, 0
   2412  f05e				  -nullroutine
   2413  f05e				  -	      rts
   2414  f05e					      endif		; LONGCONTROLLERREAD
   2415  f05e
   2416  f05e				   reallyoffvisible
   2417  f05e		       85 24		      sta	WSYNC
   2418  f060
   2419  f060		       a9 00		      lda	#0
   2420  f062		       85 4d		      sta	visibleover
   2421  f064				  -	      ifconst	DEBUGINTERRUPT
   2422  f064				  -	      sta	BACKGRND
   2423  f064					      endif
   2424  f064
   2425  f064		       a9 03		      lda	#3
   2426  f066		       8d b2 01 	      sta	interruptindex
   2427  f069
   2428  f069		       8a		      txa
   2429  f06a		       48		      pha
   2430  f06b		       98		      tya
   2431  f06c		       48		      pha
   2432  f06d		       d8		      cld
   2433  f06e
   2434  f06e		       20 5c f1 	      jsr	uninterruptableroutines
   2435  f071
   2436  f071				  -	      ifconst	.userinterrupt
   2437  f071				  -	      jsr	.userinterrupt
   2438  f071					      endif
   2439  f071
   2440  f071				  -	      ifconst	KEYPADSUPPORT
   2441  f071				  -	      jsr	keypadcolumnread
   2442  f071					      endif
   2443  f071
   2444  f071		       68		      pla
   2445  f072		       a8		      tay
   2446  f073		       68		      pla
   2447  f074		       aa		      tax
   2448  f075		       68		      pla
   2449  f076		       40		      RTI
   2450  f077
   2451  f077				   clearscreen
   2452  f077		       a2 17		      ldx	#(WZONECOUNT-1)
   2453  f079		       a9 00		      lda	#0
   2454  f07b				   clearscreenloop
   2455  f07b		       95 65		      sta	dlend,x
   2456  f07d		       ca		      dex
   2457  f07e		       10 fb		      bpl	clearscreenloop
   2458  f080		       a9 00		      lda	#0
   2459  f082		       8d ad 01 	      sta	valbufend	; clear the bcd value buffer
   2460  f085		       8d ae 01 	      sta	valbufendsave
   2461  f088		       60		      rts
   2462  f089
   2463  f089				   restorescreen
   2464  f089		       a2 17		      ldx	#(WZONECOUNT-1)
   2465  f08b		       a9 00		      lda	#0
   2466  f08d				   restorescreenloop
   2467  f08d		       b5 82		      lda	dlendsave,x
   2468  f08f		       95 65		      sta	dlend,x
   2469  f091		       ca		      dex
   2470  f092		       10 f9		      bpl	restorescreenloop
   2471  f094		       ad ae 01 	      lda	valbufendsave
   2472  f097		       8d ad 01 	      sta	valbufend
   2473  f09a		       60		      rts
   2474  f09b
   2475  f09b				   savescreen
   2476  f09b		       a2 17		      ldx	#(WZONECOUNT-1)
   2477  f09d				   savescreenloop
   2478  f09d		       b5 65		      lda	dlend,x
   2479  f09f		       95 82		      sta	dlendsave,x
   2480  f0a1		       ca		      dex
   2481  f0a2		       10 f9		      bpl	savescreenloop
   2482  f0a4		       ad ad 01 	      lda	valbufend
   2483  f0a7		       8d ae 01 	      sta	valbufendsave
   2484  f0aa					      ifconst	DOUBLEBUFFER
   2485  f0aa		       a5 d5		      lda	doublebufferstate
   2486  f0ac		       f0 04		      beq	savescreenrts
   2487  f0ae		       a9 01		      lda	#1
   2488  f0b0		       85 d7		      sta	doublebufferbufferdirty
   2489  f0b2				   savescreenrts
   2490  f0b2					      endif		; DOUBLEBUFFER
   2491  f0b2		       60		      rts
   2492  f0b3
   2493  f0b3				   drawscreen
   2494  f0b3
   2495  f0b3		       a9 00		      lda	#0
   2496  f0b5		       85 42		      sta	temp1	; not B&W if we're here...
   2497  f0b7
   2498  f0b7				   drawscreenwait
   2499  f0b7		       a5 4d		      lda	visibleover
   2500  f0b9		       d0 fc		      bne	drawscreenwait	; make sure the visible screen isn't being drawn
   2501  f0bb
   2502  f0bb							;restore some registers in case the game changed them mid-screen...
   2503  f0bb		       ad 07 21 	      lda	sCTRL
   2504  f0be		       05 42		      ora	temp1
   2505  f0c0		       85 3c		      sta	CTRL
   2506  f0c2		       ad 0b 21 	      lda	sCHARBASE
   2507  f0c5		       85 34		      sta	CHARBASE
   2508  f0c7
   2509  f0c7							;ensure all of the display list is terminated...
   2510  f0c7		       20 39 f1 	      jsr	terminatedisplaylist
   2511  f0ca
   2512  f0ca					      ifnconst	pauseroutineoff
   2513  f0ca		       20 d5 f0 	      jsr	pauseroutine
   2514  f0cd					      endif		; pauseroutineoff
   2515  f0cd
   2516  f0cd							; Make sure the visible screen has *started* before we exit. That way we can rely on drawscreen
   2517  f0cd							; delaying a full frame, but still allowing time for basic calculations.
   2518  f0cd				   visiblescreenstartedwait
   2519  f0cd		       a5 4d		      lda	visibleover
   2520  f0cf		       f0 fc		      beq	visiblescreenstartedwait
   2521  f0d1				   visiblescreenstartedwaitdone
   2522  f0d1		       ce 3e 21 	      dec	frameslost	; ; this gets balanced with an "inc frameslost" by an NMI at the top of the screen
   2523  f0d4		       60		      rts
   2524  f0d5
   2525  f0d5					      ifnconst	pauseroutineoff
   2526  f0d5							; check to see if pause was pressed and released
   2527  f0d5				   pauseroutine
   2528  f0d5		       ad b6 01 	      lda	pausedisable
   2529  f0d8		       d0 4e		      bne	leavepauseroutine
   2530  f0da		       a9 08		      lda	#8
   2531  f0dc		       2c 82 02 	      bit	SWCHB
   2532  f0df		       f0 29		      beq	pausepressed
   2533  f0e1
   2534  f0e1					      ifnconst	SOFTRESETASPAUSEOFF
   2535  f0e1					      ifnconst	MOUSESUPPORT
   2536  f0e1		       ad 80 02 	      lda	SWCHA	; then check the soft "RESET" joysick code...
   2537  f0e4		       29 70		      and	#%01110000	; _LDU
   2538  f0e6		       f0 22		      beq	pausepressed
   2539  f0e8					      endif
   2540  f0e8					      endif
   2541  f0e8
   2542  f0e8							;pause isn't pressed
   2543  f0e8		       a9 00		      lda	#0
   2544  f0ea		       8d ac 01 	      sta	pausebuttonflag	; clear pause hold state in case its set
   2545  f0ed
   2546  f0ed							;check if we're in an already paused state
   2547  f0ed		       ad 00 21 	      lda	pausestate
   2548  f0f0		       f0 36		      beq	leavepauseroutine	; nope, leave
   2549  f0f2
   2550  f0f2		       c9 01		      cmp	#1	; last frame was the start of pausing
   2551  f0f4		       f0 2b		      beq	enterpausestate2	; move from state 1 to 2
   2552  f0f6
   2553  f0f6		       c9 02		      cmp	#2
   2554  f0f8		       f0 34		      beq	carryonpausing
   2555  f0fa
   2556  f0fa							;pausestate must be >2, which means we're ending an unpause 
   2557  f0fa		       a9 00		      lda	#0
   2558  f0fc		       8d ac 01 	      sta	pausebuttonflag
   2559  f0ff		       8d 00 21 	      sta	pausestate
   2560  f102		       ad 07 21 	      lda	sCTRL
   2561  f105		       85 3c		      sta	CTRL
   2562  f107		       4c 28 f1 	      jmp	leavepauseroutine
   2563  f10a
   2564  f10a				   pausepressed
   2565  f10a							;pause is pressed
   2566  f10a		       ad ac 01 	      lda	pausebuttonflag
   2567  f10d		       c9 ff		      cmp	#$ff
   2568  f10f		       f0 1d		      beq	carryonpausing
   2569  f111
   2570  f111							;its a new press, increment the state
   2571  f111		       ee 00 21 	      inc	pausestate
   2572  f114
   2573  f114							;silence volume at the start and end of pausing
   2574  f114		       a9 00		      lda	#0
   2575  f116		       85 19		      sta	AUDV0
   2576  f118		       85 1a		      sta	AUDV1
   2577  f11a
   2578  f11a				  -	      ifconst	pokeysupport
   2579  f11a				  -	      ldy	#7
   2580  f11a				  -pausesilencepokeyaudioloop
   2581  f11a				  -	      sta	(pokeybase),y
   2582  f11a				  -	      dey
   2583  f11a				  -	      bpl	pausesilencepokeyaudioloop
   2584  f11a					      endif		; pokeysupport
   2585  f11a
   2586  f11a		       a9 ff		      lda	#$ff
   2587  f11c		       8d ac 01 	      sta	pausebuttonflag
   2588  f11f		       d0 0d		      bne	carryonpausing
   2589  f121
   2590  f121				   enterpausestate2
   2591  f121		       a9 02		      lda	#2
   2592  f123		       8d 00 21 	      sta	pausestate
   2593  f126		       d0 06		      bne	carryonpausing
   2594  f128				   leavepauseroutine
   2595  f128		       ad 07 21 	      lda	sCTRL
   2596  f12b		       85 3c		      sta	CTRL
   2597  f12d		       60		      rts
   2598  f12e				   carryonpausing
   2599  f12e				  -	      ifconst	.pause
   2600  f12e				  -	      jsr	.pause
   2601  f12e					      endif		; .pause
   2602  f12e		       ad 07 21 	      lda	sCTRL
   2603  f131		       09 80		      ora	#%10000000	; turn off colorburst during pause...
   2604  f133		       85 3c		      sta	CTRL
   2605  f135		       4c d5 f0 	      jmp	pauseroutine
   2606  f138					      endif		; pauseroutineoff
   2607  f138
   2608  f138
   2609  f138					      ifconst	DOUBLEBUFFER
   2610  f138				   skipterminatedisplaylistreturn
   2611  f138		       60		      rts
   2612  f139					      endif		; DOUBLEBUFFER
   2613  f139				   terminatedisplaylist
   2614  f139					      ifconst	DOUBLEBUFFER
   2615  f139		       a5 d5		      lda	doublebufferstate
   2616  f13b		       d0 fb		      bne	skipterminatedisplaylistreturn	; double-buffering runs it's own DL termination code
   2617  f13d					      endif		; DOUBLEBUFFER
   2618  f13d				   terminatedisplaybuffer
   2619  f13d							;add DL end entry on each DL
   2620  f13d		       a2 17		      ldx	#(WZONECOUNT-1)
   2621  f13f				   dlendloop
   2622  f13f		       bd 2f f7 	      lda	DLPOINTL,x
   2623  f142					      ifconst	DOUBLEBUFFER
   2624  f142		       18		      clc
   2625  f143		       65 d6		      adc	doublebufferdloffset
   2626  f145					      endif		; DOUBLEBUFFER
   2627  f145		       85 63		      sta	dlpnt
   2628  f147		       bd 17 f7 	      lda	DLPOINTH,x
   2629  f14a					      ifconst	DOUBLEBUFFER
   2630  f14a		       69 00		      adc	#0
   2631  f14c					      endif		; DOUBLEBUFFER
   2632  f14c		       85 64		      sta	dlpnt+1
   2633  f14e		       b4 65		      ldy	dlend,x
   2634  f150		       a9 00		      lda	#$00
   2635  f152				   dlendmoreloops
   2636  f152		       c8		      iny
   2637  f153		       91 63		      sta	(dlpnt),y
   2638  f155				  -	      ifconst	FRAMESKIPGLITCHFIXWEAK
   2639  f155				  -	      cpy	#DLLASTOBJ+1
   2640  f155				  -	      beq	dlendthiszonedone
   2641  f155				  -	      iny
   2642  f155				  -	      iny
   2643  f155				  -	      iny
   2644  f155				  -	      iny
   2645  f155				  -	      iny
   2646  f155				  -	      sta	(dlpnt),y
   2647  f155				  -dlendthiszonedone
   2648  f155					      endif	FRAMESKIPGLITCHFIXWEAK
   2649  f155				  -	      ifconst	FRAMESKIPGLITCHFIX
   2650  f155				  -	      iny
   2651  f155				  -	      iny
   2652  f155				  -	      iny
   2653  f155				  -	      iny
   2654  f155				  -	      cpy	#DLLASTOBJ-1
   2655  f155				  -	      bcc	dlendmoreloops
   2656  f155					      endif		; FRAMESKIPGLITCHFIX
   2657  f155		       ca		      dex
   2658  f156		       10 e7		      bpl	dlendloop
   2659  f158
   2660  f158					      ifnconst	pauseroutineoff
   2661  f158		       20 d5 f0 	      jsr	pauseroutine
   2662  f15b					      endif		; pauseroutineoff
   2663  f15b		       60		      rts
   2664  f15c
   2665  f15c				   uninterruptableroutines
   2666  f15c							; this is for routines that must happen off the visible screen, each frame.
   2667  f15c
   2668  f15c				  -	      ifconst	AVOXVOICE
   2669  f15c				  -	      jsr	serviceatarivoxqueue
   2670  f15c					      endif
   2671  f15c
   2672  f15c		       a9 00		      lda	#0
   2673  f15e		       8d e1 01 	      sta	palfastframe
   2674  f161		       ad 09 21 	      lda	paldetected
   2675  f164		       f0 10		      beq	skippalframeadjusting
   2676  f166							; ** PAL console is detected. we increment palframes to accurately count 5 frames,
   2677  f166		       ae e0 01 	      ldx	palframes
   2678  f169		       e8		      inx
   2679  f16a		       e0 05		      cpx	#5
   2680  f16c		       d0 05		      bne	palframeskipdone
   2681  f16e		       ee e1 01 	      inc	palfastframe
   2682  f171		       a2 00		      ldx	#0
   2683  f173				   palframeskipdone
   2684  f173		       8e e0 01 	      stx	palframes
   2685  f176				   skippalframeadjusting
   2686  f176
   2687  f176				  -	      ifconst	MUSICTRACKER
   2688  f176				  -			; We normally run the servicesong routine from the top-screen interrupt, but if it
   2689  f176				  -			; happens to interrupt the scheduling of a sound effect in the game code, we skip it.
   2690  f176				  -			; If that happens, we try again here. Chances are very small we'll run into the same
   2691  f176				  -			; problem twice, and if we do, we just drop a musical note or two.
   2692  f176				  -	      lda	sfxschedulemissed
   2693  f176				  -	      beq	servicesongwasnotmissed
   2694  f176				  -	      jsr	servicesong
   2695  f176				  -servicesongwasnotmissed
   2696  f176					      endif		; MUSICTRACKER
   2697  f176
   2698  f176		       60		      rts
   2699  f177
   2700  f177				   serviceatarivoxqueue
   2701  f177				  -	      ifconst	AVOXVOICE
   2702  f177				  -	      lda	voxlock
   2703  f177				  -	      bne	skipvoxprocessing	; the vox is in the middle of speech address update
   2704  f177				  -skipvoxqueuesizedec
   2705  f177				  -	      jmp	processavoxvoice
   2706  f177				  -skipvoxprocessing
   2707  f177				  -	      rts
   2708  f177				  -
   2709  f177				  -processavoxvoice
   2710  f177				  -	      lda	avoxenable
   2711  f177				  -	      bne	avoxfixport
   2712  f177				  -	      SPKOUT	tempavox
   2713  f177				  -	      rts
   2714  f177				  -avoxfixport
   2715  f177				  -	      lda	#0	; restore the port to all bits as inputs...
   2716  f177				  -	      sta	CTLSWA
   2717  f177				  -	      rts
   2718  f177				  -silenceavoxvoice
   2719  f177				  -	      SPEAK	avoxsilentdata
   2720  f177				  -	      rts
   2721  f177				  -avoxsilentdata
   2722  f177				  -	      .byte	31,255
   2723  f177					      else
   2724  f177		       60		      rts
   2725  f178					      endif		; AVOXVOICE
   2726  f178
   2727  f178				   joybuttonhandler
   2728  f178		       8a		      txa
   2729  f179		       0a		      asl
   2730  f17a		       a8		      tay
   2731  f17b		       b9 08 00 	      lda	INPT0,y
   2732  f17e		       4a		      lsr
   2733  f17f		       9d 02 21 	      sta	sINPT1,x
   2734  f182		       b9 09 00 	      lda	INPT1,y
   2735  f185		       29 80		      and	#%10000000
   2736  f187		       1d 02 21 	      ora	sINPT1,x
   2737  f18a							;eor genesisdetected0,x ; invert INPT1 if genesis is detected
   2738  f18a		       9d 02 21 	      sta	sINPT1,x
   2739  f18d
   2740  f18d		       b5 0c		      lda	INPT4,x
   2741  f18f		       30 19		      bmi	.skip1bjoyfirecheck
   2742  f191							;one button joystick is down
   2743  f191		       49 80		      eor	#%10000000
   2744  f193		       9d 02 21 	      sta	sINPT1,x
   2745  f196
   2746  f196		       ad b1 01 	      lda	joybuttonmode
   2747  f199		       3d ad f1 	      and	twobuttonmask,x
   2748  f19c		       f0 0c		      beq	.skip1bjoyfirecheck
   2749  f19e		       ad b1 01 	      lda	joybuttonmode
   2750  f1a1		       1d ad f1 	      ora	twobuttonmask,x
   2751  f1a4		       8d b1 01 	      sta	joybuttonmode
   2752  f1a7		       8d 82 02 	      sta	SWCHB
   2753  f1aa				   .skip1bjoyfirecheck
   2754  f1aa		       4c 4b f0 	      jmp	buttonreadloopreturn
   2755  f1ad
   2756  f1ad				   twobuttonmask
   2757  f1ad		       04 10		      .byte.b	%00000100,%00010000
   2758  f1af
   2759  f1af				   gunbuttonhandler		; outside of the conditional, so our button handler LUT is valid
   2760  f1af				  -	      ifconst	LIGHTGUNSUPPORT
   2761  f1af				  -	      cpx	#0
   2762  f1af				  -	      bne	secondportgunhandler
   2763  f1af				  -firstportgunhandler
   2764  f1af				  -	      lda	SWCHA
   2765  f1af				  -	      asl
   2766  f1af				  -	      asl
   2767  f1af				  -	      asl		; shift D4 to D7
   2768  f1af				  -	      and	#%10000000
   2769  f1af				  -	      eor	#%10000000
   2770  f1af				  -	      sta	sINPT1
   2771  f1af				  -	      jmp	buttonreadloopreturn
   2772  f1af				  -secondportgunhandler
   2773  f1af				  -	      lda	SWCHA
   2774  f1af				  -	      lsr		; shift D0 into carry
   2775  f1af				  -	      lsr		; shift carry into D7
   2776  f1af				  -	      and	#%10000000
   2777  f1af				  -	      eor	#%10000000
   2778  f1af				  -	      sta	sINPT3
   2779  f1af				  -	      jmp	buttonreadloopreturn
   2780  f1af					      endif		; LIGHTGUNSUPPORT
   2781  f1af
   2782  f1af				   controlsusing2buttoncode
   2783  f1af		       00		      .byte.b	0	; 00=no controller plugged in
   2784  f1b0		       01		      .byte.b	1	; 01=proline joystick
   2785  f1b1		       00		      .byte.b	0	; 02=lightgun
   2786  f1b2		       00		      .byte.b	0	; 03=paddle
   2787  f1b3		       01		      .byte.b	1	; 04=trakball
   2788  f1b4		       01		      .byte.b	1	; 05=vcs joystick
   2789  f1b5		       01		      .byte.b	1	; 06=driving control
   2790  f1b6		       00		      .byte.b	0	; 07=keypad control
   2791  f1b7		       00		      .byte.b	0	; 08=st mouse/cx80
   2792  f1b8		       00		      .byte.b	0	; 09=amiga mouse
   2793  f1b9		       01		      .byte.b	1	; 10=atarivox
   2794  f1ba
   2795  f1ba				   buttonhandlerhi
   2796  f1ba		       00		      .byte.b	0	; 00=no controller plugged in
   2797  f1bb		       f1		      .byte.b	>joybuttonhandler	; 01=proline joystick
   2798  f1bc		       f1		      .byte.b	>gunbuttonhandler	; 02=lightgun
   2799  f1bd		       00		      .byte.b	0	; 03=paddle [not implemented yet]
   2800  f1be		       f1		      .byte.b	>joybuttonhandler	; 04=trakball
   2801  f1bf		       f1		      .byte.b	>joybuttonhandler	; 05=vcs joystick
   2802  f1c0		       f1		      .byte.b	>joybuttonhandler	; 06=driving control
   2803  f1c1		       00		      .byte.b	0	; 07=keypad
   2804  f1c2		       f6		      .byte.b	>mousebuttonhandler	; 08=st mouse
   2805  f1c3		       f6		      .byte.b	>mousebuttonhandler	; 09=amiga mouse
   2806  f1c4		       f1		      .byte.b	>joybuttonhandler	; 10=atarivox
   2807  f1c5				   buttonhandlerlo
   2808  f1c5		       00		      .byte.b	0	; 00=no controller plugged in
   2809  f1c6		       78		      .byte.b	<joybuttonhandler	; 01=proline joystick
   2810  f1c7		       af		      .byte.b	<gunbuttonhandler	; 02=lightgun 
   2811  f1c8		       00		      .byte.b	0	; 03=paddle [not implemented yet]
   2812  f1c9		       78		      .byte.b	<joybuttonhandler	; 04=trakball
   2813  f1ca		       78		      .byte.b	<joybuttonhandler	; 05=vcs joystick
   2814  f1cb		       78		      .byte.b	<joybuttonhandler	; 06=driving control
   2815  f1cc		       00		      .byte.b	0	; 07=keypad
   2816  f1cd		       28		      .byte.b	<mousebuttonhandler	; 08=st mouse
   2817  f1ce		       28		      .byte.b	<mousebuttonhandler	; 09=amiga mouse
   2818  f1cf		       78		      .byte.b	<joybuttonhandler	; 10=atarivox
   2819  f1d0
   2820  f1d0				   drawwait
   2821  f1d0		       a5 4d		      lda	visibleover
   2822  f1d2		       d0 fc		      bne	drawwait	; make sure the visible screen isn't being drawn
   2823  f1d4		       60		      rts
   2824  f1d5
   2825  f1d5				   mutetia
   2826  f1d5		       a9 00		      lda	#0
   2827  f1d7		       a2 03		      ldx	#3
   2828  f1d9				   mutetialoop
   2829  f1d9		       95 4e		      sta	sfx1pointlo,x
   2830  f1db		       95 17		      sta	AUDF0,x
   2831  f1dd		       ca		      dex
   2832  f1de		       10 f9		      bpl	mutetialoop
   2833  f1e0		       60		      rts
   2834  f1e1
   2835  f1e1				   servicesfxchannelsdone
   2836  f1e1					      ifnconst	pokeysupport
   2837  f1e1		       60		      rts
   2838  f1e2				  -	      else
   2839  f1e2				  -	      jmp	checkpokeyplaying
   2840  f1e2					      endif
   2841  f1e2				   servicesfxchannels
   2842  f1e2		       a2 ff		      ldx	#255
   2843  f1e4				   servicesfxchannelsloop
   2844  f1e4		       e8		      inx
   2845  f1e5					      ifnconst	TIASFXMONO
   2846  f1e5		       e0 02		      cpx	#2
   2847  f1e7				  -	      else
   2848  f1e7				  -	      cpx	#1
   2849  f1e7					      endif
   2850  f1e7		       f0 f8		      beq	servicesfxchannelsdone
   2851  f1e9
   2852  f1e9		       b5 4e		      lda	sfx1pointlo,x
   2853  f1eb		       85 dc		      sta	inttemp5
   2854  f1ed		       15 50		      ora	sfx1pointhi,x
   2855  f1ef		       f0 f3		      beq	servicesfxchannelsloop
   2856  f1f1		       b5 50		      lda	sfx1pointhi,x
   2857  f1f3		       85 dd		      sta	inttemp6
   2858  f1f5
   2859  f1f5		       b5 58		      lda	sfx1tick,x
   2860  f1f7		       f0 05		      beq	servicesfx_cont1	; this chunk is over, load the next!
   2861  f1f9		       d6 58		      dec	sfx1tick,x	; frame countdown is non-zero, subtract one
   2862  f1fb		       4c e4 f1 	      jmp	servicesfxchannelsloop
   2863  f1fe				   servicesfx_cont1
   2864  f1fe
   2865  f1fe		       b5 56		      lda	sfx1frames,x	; set the frame countdown for this sound chunk
   2866  f200		       95 58		      sta	sfx1tick,x
   2867  f202
   2868  f202		       b5 52		      lda	sfx1priority,x	; decrease the sound's priority if its non-zero
   2869  f204		       f0 02		      beq	servicesfx_cont2
   2870  f206		       d6 52		      dec	sfx1priority,x
   2871  f208				   servicesfx_cont2
   2872  f208
   2873  f208		       a0 00		      ldy	#0	; play the sound
   2874  f20a		       b1 dc		      lda	(inttemp5),y
   2875  f20c		       85 d8		      sta	inttemp1
   2876  f20e
   2877  f20e				  -	      ifconst	MUSICTRACKER
   2878  f20e				  -	      lda	sfx1notedata,x
   2879  f20e				  -	      beq	exitmusictracker	; exit if this isn't a pitched instrument
   2880  f20e				  -	      ldy	#0
   2881  f20e				  -	      sty	inttemp2
   2882  f20e				  -	      clc
   2883  f20e				  -	      adc	(inttemp5),y
   2884  f20e				  -	      asl		; x2
   2885  f20e				  -	      tay
   2886  f20e				  -	      lda	tiatrackeroctavenotes,y
   2887  f20e				  -	      sta	AUDC0,x
   2888  f20e				  -	      iny
   2889  f20e				  -	      lda	tiatrackeroctavenotes,y
   2890  f20e				  -	      sta	AUDF0,x
   2891  f20e				  -	      ldy	#1
   2892  f20e				  -	      jmp	sfxvolumeentrypt
   2893  f20e				  -exitmusictracker
   2894  f20e				  -	      lda	inttemp1
   2895  f20e					      endif		; MUSICTRACKER
   2896  f20e
   2897  f20e		       18		      clc
   2898  f20f		       75 54		      adc	sfx1poffset,x	; take into account any pitch modification
   2899  f211		       95 17		      sta	AUDF0,x
   2900  f213		       c8		      iny
   2901  f214		       b1 dc		      lda	(inttemp5),y
   2902  f216		       95 15		      sta	AUDC0,x
   2903  f218		       85 d9		      sta	inttemp2
   2904  f21a		       c8		      iny
   2905  f21b				   sfxvolumeentrypt
   2906  f21b		       b1 dc		      lda	(inttemp5),y
   2907  f21d		       95 19		      sta	AUDV0,x
   2908  f21f		       c9 10		      cmp	#$10
   2909  f221		       b0 19		      bcs	sfxsoundloop	; AUDV0>$0F means the sound is looped while priority is active
   2910  f223
   2911  f223		       05 d9		      ora	inttemp2
   2912  f225		       05 d8		      ora	inttemp1	; check if F|C|V=0
   2913  f227		       f0 23		      beq	zerosfx	; if so, we're at the end of the sound.
   2914  f229
   2915  f229				   advancesfxpointer
   2916  f229							; advance the pointer to the next sound chunk
   2917  f229		       c8		      iny
   2918  f22a		       84 da		      sty	inttemp3
   2919  f22c		       18		      clc
   2920  f22d		       b5 4e		      lda	sfx1pointlo,x
   2921  f22f		       65 da		      adc	inttemp3
   2922  f231		       95 4e		      sta	sfx1pointlo,x
   2923  f233		       b5 50		      lda	sfx1pointhi,x
   2924  f235		       69 00		      adc	#0
   2925  f237		       95 50		      sta	sfx1pointhi,x
   2926  f239		       4c e4 f1 	      jmp	servicesfxchannelsloop
   2927  f23c
   2928  f23c				   sfxsoundloop
   2929  f23c		       48		      pha
   2930  f23d		       b5 52		      lda	sfx1priority,x
   2931  f23f		       d0 04		      bne	sfxsoundloop_carryon
   2932  f241		       68		      pla		; fix the stack before we go
   2933  f242		       4c 29 f2 	      jmp	advancesfxpointer
   2934  f245				   sfxsoundloop_carryon
   2935  f245		       68		      pla
   2936  f246		       29 f0		      and	#$F0
   2937  f248		       4a		      lsr
   2938  f249		       4a		      lsr
   2939  f24a		       4a		      lsr
   2940  f24b		       4a		      lsr
   2941  f24c
   2942  f24c				   zerosfx
   2943  f24c		       95 4e		      sta	sfx1pointlo,x
   2944  f24e		       95 50		      sta	sfx1pointhi,x
   2945  f250		       95 52		      sta	sfx1priority,x
   2946  f252		       4c e4 f1 	      jmp	servicesfxchannelsloop
   2947  f255
   2948  f255
   2949  f255				   schedulesfx
   2950  f255							; called with sfxinstrumentlo=<data sfxinstrumenthi=>data sfxpitchoffset=pitch-offset sfxnoteindex=note index
   2951  f255		       a0 00		      ldy	#0
   2952  f257		       b1 e0		      lda	(sfxinstrumentlo),y
   2953  f259				  -	      ifconst	pokeysupport
   2954  f259				  -	      cmp	#$20	; POKEY?
   2955  f259				  -	      bne	scheduletiasfx
   2956  f259				  -	      jmp	schedulepokeysfx
   2957  f259					      endif
   2958  f259				   scheduletiasfx
   2959  f259							;cmp #$10 ; TIA?
   2960  f259							;beq continuescheduletiasfx
   2961  f259							; rts ; unhandled!!! 
   2962  f259				   continuescheduletiasfx
   2963  f259					      ifnconst	TIASFXMONO
   2964  f259		       a5 4e		      lda	sfx1pointlo
   2965  f25b		       05 50		      ora	sfx1pointhi
   2966  f25d		       f0 13		      beq	schedulesfx1	;if channel 1 is idle, use it
   2967  f25f		       a5 4f		      lda	sfx2pointlo
   2968  f261		       05 51		      ora	sfx2pointhi
   2969  f263		       f0 11		      beq	schedulesfx2	;if channel 2 is idle, use it
   2970  f265							; Both channels are scheduled. 
   2971  f265		       a0 01		      ldy	#1
   2972  f267		       b1 e0		      lda	(sfxinstrumentlo),y
   2973  f269		       d0 01		      bne	interruptsfx
   2974  f26b		       60		      rts		; the new sound has 0 priority and both channels are busy. Skip playing it.
   2975  f26c				   interruptsfx
   2976  f26c							;Compare which active sound has a lower priority. We'll interrupt the lower one.
   2977  f26c		       a5 52		      lda	sfx1priority
   2978  f26e		       c5 53		      cmp	sfx2priority
   2979  f270		       b0 04		      bcs	schedulesfx2
   2980  f272					      endif		; !TIASFXMONO
   2981  f272
   2982  f272				   schedulesfx1
   2983  f272		       a2 00		      ldx	#0	; channel 1
   2984  f274					      ifnconst	TIASFXMONO
   2985  f274		       f0 02		      beq	skipschedulesfx2
   2986  f276				   schedulesfx2
   2987  f276		       a2 01		      ldx	#1	; channel 2
   2988  f278				   skipschedulesfx2
   2989  f278					      endif		; !TIASFXMONO
   2990  f278
   2991  f278				  -	      ifconst	MUSICTRACKER
   2992  f278				  -	      lda	sfxnoteindex
   2993  f278				  -	      bpl	skipdrumkitoverride
   2994  f278				  -	      and	#$7F	; subtract 128
   2995  f278				  -	      sec
   2996  f278				  -	      sbc	#4	; drums start at 132, i.e. octave 10
   2997  f278				  -	      asl
   2998  f278				  -	      tay
   2999  f278				  -	      lda	tiadrumkitdefinition,y
   3000  f278				  -	      sta	sfxinstrumentlo
   3001  f278				  -	      iny
   3002  f278				  -	      lda	tiadrumkitdefinition,y
   3003  f278				  -	      sta	sfxinstrumenthi
   3004  f278				  -	      lda	#0
   3005  f278				  -	      sta	sfxnoteindex	; and tell the driver it's a non-pitched instrument
   3006  f278				  -skipdrumkitoverride
   3007  f278					      endif		; MUSICTRACKER
   3008  f278		       a0 01		      ldy	#1	; get priority and sound-resolution (in frames)
   3009  f27a		       b1 e0		      lda	(sfxinstrumentlo),y
   3010  f27c		       95 52		      sta	sfx1priority,x
   3011  f27e		       c8		      iny
   3012  f27f		       b1 e0		      lda	(sfxinstrumentlo),y
   3013  f281		       95 56		      sta	sfx1frames,x
   3014  f283		       a5 e0		      lda	sfxinstrumentlo
   3015  f285		       18		      clc
   3016  f286		       69 03		      adc	#3
   3017  f288		       95 4e		      sta	sfx1pointlo,x
   3018  f28a		       a5 e1		      lda	sfxinstrumenthi
   3019  f28c		       69 00		      adc	#0
   3020  f28e		       95 50		      sta	sfx1pointhi,x
   3021  f290		       a5 e2		      lda	sfxpitchoffset
   3022  f292		       95 54		      sta	sfx1poffset,x
   3023  f294		       a9 00		      lda	#0
   3024  f296		       95 58		      sta	sfx1tick,x
   3025  f298		       a5 e3		      lda	sfxnoteindex
   3026  f29a		       95 cd		      sta	sfx1notedata,x
   3027  f29c		       60		      rts
   3028  f29d
   3029  f29d				   plotsprite
   3030  f29d					      ifconst	DOUBLEBUFFER
   3031  f29d		       a5 d5		      lda	doublebufferstate
   3032  f29f		       d0 04		      bne	skipplotspritewait
   3033  f2a1					      endif		; DOUBLEBUFFER
   3034  f2a1				   plotspritewait
   3035  f2a1		       a5 4d		      lda	visibleover
   3036  f2a3		       d0 fc		      bne	plotspritewait
   3037  f2a5				   skipplotspritewait
   3038  f2a5
   3039  f2a5							;arguments: 
   3040  f2a5							; temp1=lo graphicdata 
   3041  f2a5							; temp2=hi graphicdata 
   3042  f2a5							; temp3=palette | width byte
   3043  f2a5							; temp4=x
   3044  f2a5							; temp5=y
   3045  f2a5							; temp6=mode
   3046  f2a5		       a5 46		      lda	temp5	;Y position
   3047  f2a7		       4a		      lsr		; 2 - Divide by 8 or 16
   3048  f2a8		       4a		      lsr		; 2
   3049  f2a9		       4a		      lsr		; 2
   3050  f2aa				  -	      if	WZONEHEIGHT = 16
   3051  f2aa				  -	      lsr		; 2
   3052  f2aa					      endif
   3053  f2aa
   3054  f2aa		       aa		      tax
   3055  f2ab
   3056  f2ab							; the next block allows for vertical masking, and ensures we don't overwrite non-DL memory
   3057  f2ab
   3058  f2ab		       c9 18		      cmp	#WZONECOUNT
   3059  f2ad
   3060  f2ad		       90 0a		      bcc	continueplotsprite1	; the sprite is fully on-screen, so carry on...
   3061  f2af							; otherwise, check to see if the bottom half is in zone 0...
   3062  f2af
   3063  f2af				  -	      if	WZONEHEIGHT = 16
   3064  f2af				  -	      cmp	#15
   3065  f2af					      else
   3066  f2af		       c9 1f		      cmp	#31
   3067  f2b1					      endif
   3068  f2b1
   3069  f2b1		       d0 05		      bne	exitplotsprite1
   3070  f2b3		       a2 00		      ldx	#0
   3071  f2b5		       4c f5 f2 	      jmp	continueplotsprite2
   3072  f2b8				   exitplotsprite1
   3073  f2b8		       60		      rts
   3074  f2b9
   3075  f2b9				   continueplotsprite1
   3076  f2b9
   3077  f2b9		       bd 2f f7 	      lda	DLPOINTL,x	;Get pointer to DL that this sprite starts in
   3078  f2bc					      ifconst	DOUBLEBUFFER
   3079  f2bc		       18		      clc
   3080  f2bd		       65 d6		      adc	doublebufferdloffset
   3081  f2bf					      endif		; DOUBLEBUFFER
   3082  f2bf		       85 63		      sta	dlpnt
   3083  f2c1		       bd 17 f7 	      lda	DLPOINTH,x
   3084  f2c4					      ifconst	DOUBLEBUFFER
   3085  f2c4		       69 00		      adc	#0
   3086  f2c6					      endif		; DOUBLEBUFFER
   3087  f2c6		       85 64		      sta	dlpnt+1
   3088  f2c8
   3089  f2c8							;Create DL entry for upper part of sprite
   3090  f2c8
   3091  f2c8		       b4 65		      ldy	dlend,x	;Get the index to the end of this DL
   3092  f2ca
   3093  f2ca				  -	      ifconst	CHECKOVERWRITE
   3094  f2ca				  -	      cpy	#DLLASTOBJ
   3095  f2ca				  -	      beq	checkcontinueplotsprite2
   3096  f2ca				  -continueplotsprite1a
   3097  f2ca					      endif
   3098  f2ca
   3099  f2ca		       a5 42		      lda	temp1	; graphic data, lo byte
   3100  f2cc		       91 63		      sta	(dlpnt),y	;Low byte of data address
   3101  f2ce
   3102  f2ce					      ifnconst	ATOMICSPRITEUPDATE
   3103  f2ce		       c8		      iny
   3104  f2cf		       a5 47		      lda	temp6
   3105  f2d1		       91 63		      sta	(dlpnt),y
   3106  f2d3				  -	      else
   3107  f2d3				  -	      iny
   3108  f2d3				  -	      sty	temp8
   3109  f2d3				  -			;lda #0
   3110  f2d3				  -			;sta (dlpnt),y
   3111  f2d3					      endif
   3112  f2d3
   3113  f2d3		       c8		      iny
   3114  f2d4		       a5 46		      lda	temp5	;Y position
   3115  f2d6
   3116  f2d6				  -	      if	WZONEHEIGHT = 16
   3117  f2d6				  -	      and	#$0F
   3118  f2d6					      else		; WZONEHEIGHT = 8
   3119  f2d6		       29 07		      and	#$7
   3120  f2d8					      endif
   3121  f2d8
   3122  f2d8		       05 43		      ora	temp2	; graphic data, hi byte
   3123  f2da		       91 63		      sta	(dlpnt),y
   3124  f2dc
   3125  f2dc		       c8		      iny
   3126  f2dd		       a5 44		      lda	temp3	;palette|width
   3127  f2df		       91 63		      sta	(dlpnt),y
   3128  f2e1
   3129  f2e1		       c8		      iny
   3130  f2e2		       a5 45		      lda	temp4	;Horizontal position
   3131  f2e4		       91 63		      sta	(dlpnt),y
   3132  f2e6
   3133  f2e6		       c8		      iny
   3134  f2e7		       94 65		      sty	dlend,x
   3135  f2e9
   3136  f2e9				  -	      ifconst	ATOMICSPRITEUPDATE
   3137  f2e9				  -	      ldy	temp8
   3138  f2e9				  -	      lda	temp6
   3139  f2e9				  -	      sta	(dlpnt),y
   3140  f2e9					      endif
   3141  f2e9				   checkcontinueplotsprite2
   3142  f2e9
   3143  f2e9		       a5 46		      lda	temp5
   3144  f2eb		       29 07		      and	#(WZONEHEIGHT-1)
   3145  f2ed
   3146  f2ed		       f0 3d		      beq	doneSPDL	;branch if it is
   3147  f2ef
   3148  f2ef							;Create DL entry for lower part of sprite
   3149  f2ef
   3150  f2ef		       e8		      inx		;Next region
   3151  f2f0
   3152  f2f0		       e0 18		      cpx	#WZONECOUNT
   3153  f2f2
   3154  f2f2		       90 01		      bcc	continueplotsprite2	; the second half of the sprite is fully on-screen, so carry on...
   3155  f2f4		       60		      rts
   3156  f2f5				   continueplotsprite2
   3157  f2f5
   3158  f2f5		       bd 2f f7 	      lda	DLPOINTL,x	;Get pointer to next DL
   3159  f2f8					      ifconst	DOUBLEBUFFER
   3160  f2f8		       18		      clc
   3161  f2f9		       65 d6		      adc	doublebufferdloffset
   3162  f2fb					      endif		; DOUBLEBUFFER
   3163  f2fb		       85 63		      sta	dlpnt
   3164  f2fd		       bd 17 f7 	      lda	DLPOINTH,x
   3165  f300					      ifconst	DOUBLEBUFFER
   3166  f300		       69 00		      adc	#0
   3167  f302					      endif		; DOUBLEBUFFER
   3168  f302		       85 64		      sta	dlpnt+1
   3169  f304		       b4 65		      ldy	dlend,x	;Get the index to the end of this DL
   3170  f306
   3171  f306				  -	      ifconst	CHECKOVERWRITE
   3172  f306				  -	      cpy	#DLLASTOBJ
   3173  f306				  -	      bne	continueplotsprite2a
   3174  f306				  -	      rts
   3175  f306				  -continueplotsprite2a
   3176  f306					      endif
   3177  f306
   3178  f306		       a5 42		      lda	temp1	; graphic data, lo byte
   3179  f308		       91 63		      sta	(dlpnt),y
   3180  f30a
   3181  f30a					      ifnconst	ATOMICSPRITEUPDATE
   3182  f30a		       c8		      iny
   3183  f30b		       a5 47		      lda	temp6
   3184  f30d		       91 63		      sta	(dlpnt),y
   3185  f30f				  -	      else
   3186  f30f				  -	      iny
   3187  f30f				  -	      sty	temp8
   3188  f30f				  -			;lda #0
   3189  f30f				  -			;sta (dlpnt),y
   3190  f30f					      endif
   3191  f30f
   3192  f30f		       c8		      iny
   3193  f310		       a5 46		      lda	temp5	;Y position
   3194  f312
   3195  f312				  -	      if	WZONEHEIGHT = 16
   3196  f312				  -	      and	#$0F
   3197  f312				  -	      eor	#$0F
   3198  f312					      endif
   3199  f312					      if	WZONEHEIGHT = 8
   3200  f312		       29 07		      and	#$07
   3201  f314		       49 07		      eor	#$07
   3202  f316					      endif
   3203  f316
   3204  f316		       85 4a		      sta	temp9
   3205  f318		       a5 43		      lda	temp2	; graphic data, hi byte
   3206  f31a		       18		      clc
   3207  f31b		       e5 4a		      sbc	temp9
   3208  f31d		       91 63		      sta	(dlpnt),y
   3209  f31f
   3210  f31f		       c8		      iny
   3211  f320		       a5 44		      lda	temp3	;palette|width
   3212  f322		       91 63		      sta	(dlpnt),y
   3213  f324
   3214  f324		       c8		      iny
   3215  f325		       a5 45		      lda	temp4	;Horizontal position
   3216  f327		       91 63		      sta	(dlpnt),y
   3217  f329
   3218  f329		       c8		      iny
   3219  f32a		       94 65		      sty	dlend,x
   3220  f32c
   3221  f32c				  -	      ifconst	ATOMICSPRITEUPDATE
   3222  f32c				  -	      ldy	temp8
   3223  f32c				  -	      lda	temp6
   3224  f32c				  -	      sta	(dlpnt),y
   3225  f32c					      endif
   3226  f32c
   3227  f32c				   doneSPDL
   3228  f32c		       60		      rts
   3229  f32d
   3230  f32d				   lockzonex
   3231  f32d				  -	      ifconst	ZONELOCKS
   3232  f32d				  -	      ldy	dlend,x
   3233  f32d				  -	      cpy	#DLLASTOBJ
   3234  f32d				  -	      beq	lockzonexreturn	; the zone is either stuffed or locked. abort!
   3235  f32d				  -	      lda	DLPOINTL,x
   3236  f32d				  -	      ifconst	DOUBLEBUFFER
   3237  f32d				  -	      clc
   3238  f32d				  -	      adc	doublebufferdloffset
   3239  f32d				  -	      endif		; DOUBLEBUFFER
   3240  f32d				  -	      sta	dlpnt
   3241  f32d				  -	      lda	DLPOINTH,x
   3242  f32d				  -	      ifconst	DOUBLEBUFFER
   3243  f32d				  -	      adc	#0
   3244  f32d				  -	      endif		; DOUBLEBUFFER
   3245  f32d				  -	      sta	dlpnt+1
   3246  f32d				  -	      iny
   3247  f32d				  -	      lda	#0
   3248  f32d				  -	      sta	(dlpnt),y
   3249  f32d				  -	      dey
   3250  f32d				  -	      tya
   3251  f32d				  -	      ldy	#(DLLASTOBJ-1)
   3252  f32d				  -	      sta	(dlpnt),y
   3253  f32d				  -	      iny
   3254  f32d				  -	      sty	dlend,x
   3255  f32d				  -lockzonexreturn
   3256  f32d				  -	      rts
   3257  f32d					      endif		; ZONELOCKS
   3258  f32d				   unlockzonex
   3259  f32d				  -	      ifconst	ZONELOCKS
   3260  f32d				  -	      ldy	dlend,x
   3261  f32d				  -	      cpy	#DLLASTOBJ
   3262  f32d				  -	      bne	unlockzonexreturn	; if the zone isn't stuffed, it's not locked. abort!
   3263  f32d				  -	      lda	DLPOINTL,x
   3264  f32d				  -	      ifconst	DOUBLEBUFFER
   3265  f32d				  -	      clc
   3266  f32d				  -	      adc	doublebufferdloffset
   3267  f32d				  -	      endif		; DOUBLEBUFFER
   3268  f32d				  -	      sta	dlpnt
   3269  f32d				  -	      lda	DLPOINTH,x
   3270  f32d				  -	      ifconst	DOUBLEBUFFER
   3271  f32d				  -	      adc	#0
   3272  f32d				  -	      endif		; DOUBLEBUFFER
   3273  f32d				  -	      sta	dlpnt+1
   3274  f32d				  -	      dey
   3275  f32d				  -			;ldy #(DLLASTOBJ-1)
   3276  f32d				  -	      lda	(dlpnt),y
   3277  f32d				  -	      tay
   3278  f32d				  -	      sty	dlend,x
   3279  f32d				  -unlockzonexreturn
   3280  f32d					      endif		; ZONELOCKS
   3281  f32d		       60		      rts
   3282  f32e
   3283  f32e				   plotcharloop
   3284  f32e							; ** read from a data indirectly pointed to from temp8,temp9
   3285  f32e							; ** format is: lo_data, hi_data, palette|width, x, y
   3286  f32e							; ** format ends with lo_data | hi_data = 0
   3287  f32e
   3288  f32e					      ifconst	DOUBLEBUFFER
   3289  f32e		       a5 d5		      lda	doublebufferstate
   3290  f330		       d0 04		      bne	skipplotcharloopwait
   3291  f332					      endif		; DOUBLEBUFFER
   3292  f332				   plotcharloopwait
   3293  f332		       a5 4d		      lda	visibleover
   3294  f334		       d0 fc		      bne	plotcharloopwait
   3295  f336				   skipplotcharloopwait
   3296  f336				   plotcharlooploop
   3297  f336		       a0 00		      ldy	#0
   3298  f338		       b1 49		      lda	(temp8),y
   3299  f33a		       85 42		      sta	temp1
   3300  f33c		       c8		      iny
   3301  f33d		       b1 49		      lda	(temp8),y
   3302  f33f		       85 43		      sta	temp2
   3303  f341		       05 42		      ora	temp1
   3304  f343		       d0 01		      bne	plotcharloopcontinue
   3305  f345							;the pointer=0, so return
   3306  f345		       60		      rts
   3307  f346				   plotcharloopcontinue
   3308  f346		       c8		      iny
   3309  f347		       b1 49		      lda	(temp8),y
   3310  f349		       85 44		      sta	temp3
   3311  f34b		       c8		      iny
   3312  f34c		       b1 49		      lda	(temp8),y
   3313  f34e		       85 45		      sta	temp4
   3314  f350		       c8		      iny
   3315  f351		       b1 49		      lda	(temp8),y
   3316  f353							;sta temp5 ; not needed with our late entry.
   3317  f353		       20 70 f3 	      jsr	plotcharactersskipentry
   3318  f356		       a5 49		      lda	temp8
   3319  f358		       18		      clc
   3320  f359		       69 05		      adc	#5
   3321  f35b		       85 49		      sta	temp8
   3322  f35d		       a5 4a		      lda	temp9
   3323  f35f		       69 00		      adc	#0
   3324  f361		       85 4a		      sta	temp9
   3325  f363		       4c 36 f3 	      jmp	plotcharlooploop
   3326  f366
   3327  f366				   plotcharacters
   3328  f366					      ifconst	DOUBLEBUFFER
   3329  f366		       a5 d5		      lda	doublebufferstate
   3330  f368		       d0 04		      bne	skipplotcharacterswait
   3331  f36a					      endif		; DOUBLEBUFFER
   3332  f36a				   plotcharacterswait
   3333  f36a		       a5 4d		      lda	visibleover
   3334  f36c		       d0 fc		      bne	plotcharacterswait
   3335  f36e				   skipplotcharacterswait
   3336  f36e							;arguments: 
   3337  f36e							; temp1=lo charactermap
   3338  f36e							; temp2=hi charactermap
   3339  f36e							; temp3=palette | width byte
   3340  f36e							; temp4=x
   3341  f36e							; temp5=y
   3342  f36e
   3343  f36e		       a5 46		      lda	temp5	;Y position
   3344  f370
   3345  f370				   plotcharactersskipentry
   3346  f370
   3347  f370							;ifconst ZONEHEIGHT
   3348  f370							; if ZONEHEIGHT = 16
   3349  f370							; and #$0F
   3350  f370							; endif
   3351  f370							; if ZONEHEIGHT = 8
   3352  f370							; and #$1F
   3353  f370							; endif
   3354  f370							;else
   3355  f370							; and #$0F
   3356  f370							;endif
   3357  f370
   3358  f370		       aa		      tax
   3359  f371		       bd 2f f7 	      lda	DLPOINTL,x	;Get pointer to DL that the characters are in
   3360  f374					      ifconst	DOUBLEBUFFER
   3361  f374		       18		      clc
   3362  f375		       65 d6		      adc	doublebufferdloffset
   3363  f377					      endif		; DOUBLEBUFFER
   3364  f377		       85 63		      sta	dlpnt
   3365  f379		       bd 17 f7 	      lda	DLPOINTH,x
   3366  f37c					      ifconst	DOUBLEBUFFER
   3367  f37c		       69 00		      adc	#0
   3368  f37e					      endif		; DOUBLEBUFFER
   3369  f37e		       85 64		      sta	dlpnt+1
   3370  f380
   3371  f380							;Create DL entry for the characters
   3372  f380
   3373  f380		       b4 65		      ldy	dlend,x	;Get the index to the end of this DL
   3374  f382
   3375  f382				  -	      ifconst	CHECKOVERWRITE
   3376  f382				  -	      cpy	#DLLASTOBJ
   3377  f382				  -	      bne	continueplotcharacters
   3378  f382				  -	      rts
   3379  f382				  -continueplotcharacters
   3380  f382					      endif
   3381  f382
   3382  f382		       a5 42		      lda	temp1	; character map data, lo byte
   3383  f384		       91 63		      sta	(dlpnt),y	;(1) store low address
   3384  f386
   3385  f386		       c8		      iny
   3386  f387		       ad 06 21 	      lda	charactermode
   3387  f38a		       91 63		      sta	(dlpnt),y	;(2) store mode
   3388  f38c
   3389  f38c		       c8		      iny
   3390  f38d		       a5 43		      lda	temp2	; character map, hi byte
   3391  f38f		       91 63		      sta	(dlpnt),y	;(3) store high address
   3392  f391
   3393  f391		       c8		      iny
   3394  f392		       a5 44		      lda	temp3	;palette|width
   3395  f394		       91 63		      sta	(dlpnt),y	;(4) store palette|width
   3396  f396
   3397  f396		       c8		      iny
   3398  f397		       a5 45		      lda	temp4	;Horizontal position
   3399  f399		       91 63		      sta	(dlpnt),y	;(5) store horizontal position
   3400  f39b
   3401  f39b		       c8		      iny
   3402  f39c		       94 65		      sty	dlend,x	; save display list end byte
   3403  f39e		       60		      rts
   3404  f39f
   3405  f39f
   3406  f39f					      ifconst	plotvalueonscreen
   3407  f39f				   plotcharacterslive
   3408  f39f							; a version of plotcharacters that draws live and minimally disrupts the screen...
   3409  f39f
   3410  f39f							;arguments: 
   3411  f39f							; temp1=lo charactermap
   3412  f39f							; temp2=hi charactermap
   3413  f39f							; temp3=palette | width byte
   3414  f39f							; temp4=x
   3415  f39f							; temp5=y
   3416  f39f
   3417  f39f		       a5 46		      lda	temp5	;Y position
   3418  f3a1
   3419  f3a1		       aa		      tax
   3420  f3a2		       bd 2f f7 	      lda	DLPOINTL,x	;Get pointer to DL that the characters are in
   3421  f3a5					      ifconst	DOUBLEBUFFER
   3422  f3a5		       18		      clc
   3423  f3a6		       65 d6		      adc	doublebufferdloffset
   3424  f3a8					      endif		; DOUBLEBUFFER
   3425  f3a8		       85 63		      sta	dlpnt
   3426  f3aa		       bd 17 f7 	      lda	DLPOINTH,x
   3427  f3ad					      ifconst	DOUBLEBUFFER
   3428  f3ad		       69 00		      adc	#0
   3429  f3af					      endif		; DOUBLEBUFFER
   3430  f3af		       85 64		      sta	dlpnt+1
   3431  f3b1
   3432  f3b1							;Create DL entry for the characters
   3433  f3b1
   3434  f3b1		       b4 65		      ldy	dlend,x	;Get the index to the end of this DL
   3435  f3b3
   3436  f3b3				  -	      ifconst	CHECKOVERWRITE
   3437  f3b3				  -	      cpy	#DLLASTOBJ
   3438  f3b3				  -	      bne	continueplotcharacterslive
   3439  f3b3				  -	      rts
   3440  f3b3				  -continueplotcharacterslive
   3441  f3b3					      endif
   3442  f3b3
   3443  f3b3		       a5 42		      lda	temp1	; character map data, lo byte
   3444  f3b5		       91 63		      sta	(dlpnt),y	;(1) store low address
   3445  f3b7
   3446  f3b7		       c8		      iny
   3447  f3b8							; we don't add the second byte yet, since the charmap could briefly
   3448  f3b8							; render without a proper character map address, width, or position.
   3449  f3b8		       ad 06 21 	      lda	charactermode
   3450  f3bb		       91 63		      sta	(dlpnt),y	;(2) store mode
   3451  f3bd
   3452  f3bd		       c8		      iny
   3453  f3be		       a5 43		      lda	temp2	; character map, hi byte
   3454  f3c0		       91 63		      sta	(dlpnt),y	;(3) store high address
   3455  f3c2
   3456  f3c2		       c8		      iny
   3457  f3c3		       a5 44		      lda	temp3	;palette|width
   3458  f3c5		       91 63		      sta	(dlpnt),y	;(4) store palette|width
   3459  f3c7
   3460  f3c7		       c8		      iny
   3461  f3c8		       a5 45		      lda	temp4	;Horizontal position
   3462  f3ca		       91 63		      sta	(dlpnt),y	;(5) store horizontal position
   3463  f3cc
   3464  f3cc		       c8		      iny
   3465  f3cd		       94 65		      sty	dlend,x	; save display list end byte
   3466  f3cf
   3467  f3cf		       60		      rts
   3468  f3d0					      endif		;plotcharacterslive
   3469  f3d0
   3470  f3d0					      ifconst	USED_PLOTVALUE
   3471  f3d0				   plotvalue
   3472  f3d0							; calling 7800basic command:
   3473  f3d0							; plotvalue digit_gfx palette variable/data number_of_digits screen_x screen_y
   3474  f3d0							; ...displays the variable as BCD digits
   3475  f3d0							;
   3476  f3d0							; asm sub arguments: 
   3477  f3d0							; temp1=lo charactermap
   3478  f3d0							; temp2=hi charactermap
   3479  f3d0							; temp3=palette | width byte
   3480  f3d0							; temp4=x
   3481  f3d0							; temp5=y
   3482  f3d0							; temp6=number of digits
   3483  f3d0							; temp7=lo variable
   3484  f3d0							; temp8=hi variable
   3485  f3d0							; temp9=character mode
   3486  f3d0
   3487  f3d0		       00 47	   plotdigitcount =	temp6
   3488  f3d0
   3489  f3d0				  -	      ifconst	ZONELOCKS
   3490  f3d0				  -	      ldx	temp5
   3491  f3d0				  -	      ldy	dlend,x
   3492  f3d0				  -	      cpy	#DLLASTOBJ
   3493  f3d0				  -	      bne	carryonplotvalue
   3494  f3d0				  -	      rts
   3495  f3d0				  -carryonplotvalue
   3496  f3d0					      endif
   3497  f3d0
   3498  f3d0		       a9 00		      lda	#0
   3499  f3d2		       a8		      tay
   3500  f3d3		       ae ad 01 	      ldx	valbufend
   3501  f3d6
   3502  f3d6		       a5 47		      lda	plotdigitcount
   3503  f3d8		       29 01		      and	#1
   3504  f3da		       f0 07		      beq	pvnibble2char
   3505  f3dc		       a9 00		      lda	#0
   3506  f3de		       9d 00 20 	      sta	VALBUFFER,x	; just in case we skip this digit
   3507  f3e1		       f0 11		      beq	pvnibble2char_skipnibble
   3508  f3e3
   3509  f3e3				   pvnibble2char
   3510  f3e3							; high nibble...
   3511  f3e3		       b1 48		      lda	(temp7),y
   3512  f3e5		       29 f0		      and	#$f0
   3513  f3e7		       4a		      lsr
   3514  f3e8		       4a		      lsr
   3515  f3e9		       4a		      lsr
   3516  f3ea					      ifnconst	DOUBLEWIDE	; multiply value by 2 for double-width
   3517  f3ea		       4a		      lsr
   3518  f3eb					      endif
   3519  f3eb
   3520  f3eb		       18		      clc
   3521  f3ec		       65 42		      adc	temp1	; add the offset to character graphics to our value
   3522  f3ee		       9d 00 20 	      sta	VALBUFFER,x
   3523  f3f1		       e8		      inx
   3524  f3f2		       c6 47		      dec	plotdigitcount
   3525  f3f4
   3526  f3f4				   pvnibble2char_skipnibble
   3527  f3f4							; low nibble...
   3528  f3f4		       b1 48		      lda	(temp7),y
   3529  f3f6		       29 0f		      and	#$0f
   3530  f3f8				  -	      ifconst	DOUBLEWIDE	; multiply value by 2 for double-width
   3531  f3f8				  -	      asl
   3532  f3f8					      endif
   3533  f3f8		       18		      clc
   3534  f3f9		       65 42		      adc	temp1	; add the offset to character graphics to our value
   3535  f3fb		       9d 00 20 	      sta	VALBUFFER,x
   3536  f3fe		       e8		      inx
   3537  f3ff		       c8		      iny
   3538  f400
   3539  f400		       c6 47		      dec	plotdigitcount
   3540  f402		       d0 df		      bne	pvnibble2char
   3541  f404
   3542  f404							;point to the start of our valuebuffer
   3543  f404		       18		      clc
   3544  f405		       a9 00		      lda	#<VALBUFFER
   3545  f407		       6d ad 01 	      adc	valbufend
   3546  f40a		       85 42		      sta	temp1
   3547  f40c		       a9 20		      lda	#>VALBUFFER
   3548  f40e		       69 00		      adc	#0
   3549  f410		       85 43		      sta	temp2
   3550  f412
   3551  f412							;advance valbufend to the end of our value buffer
   3552  f412		       8e ad 01 	      stx	valbufend
   3553  f415
   3554  f415				  -	      ifnconst	plotvalueonscreen
   3555  f415				  -	      jmp	plotcharacters
   3556  f415					      else
   3557  f415		       4c 9f f3 	      jmp	plotcharacterslive
   3558  f418					      endif
   3559  f418
   3560  f418					      endif		; USED_PLOTVALUE
   3561  f418
   3562  f418
   3563  f418				  -	      ifconst	USED_PLOTVALUEEXTRA
   3564  f418				  -plotdigitcount =	temp6
   3565  f418				  -plotvalueextra
   3566  f418				  -			; calling 7800basic command:
   3567  f418				  -			; plotvalue digit_gfx palette variable/data number_of_digits screen_x screen_y
   3568  f418				  -			; ...displays the variable as BCD digits
   3569  f418				  -			;
   3570  f418				  -			; asm sub arguments: 
   3571  f418				  -			; temp1=lo charactermap
   3572  f418				  -			; temp2=hi charactermap
   3573  f418				  -			; temp3=palette | width byte
   3574  f418				  -			; temp4=x
   3575  f418				  -			; temp5=y
   3576  f418				  -			; temp6=number of digits
   3577  f418				  -			; temp7=lo variable
   3578  f418				  -			; temp8=hi variable
   3579  f418				  -
   3580  f418				  -	      lda	#0
   3581  f418				  -	      tay
   3582  f418				  -	      ldx	valbufend
   3583  f418				  -	      ifnconst	plotvalueonscreen
   3584  f418				  -	      sta	VALBUFFER,x
   3585  f418				  -	      endif
   3586  f418				  -
   3587  f418				  -	      lda	plotdigitcount
   3588  f418				  -	      and	#1
   3589  f418				  -
   3590  f418				  -	      bne	pvnibble2char_skipnibbleextra
   3591  f418				  -
   3592  f418				  -pvnibble2charextra
   3593  f418				  -			; high nibble...
   3594  f418				  -	      lda	(temp7),y
   3595  f418				  -	      and	#$f0
   3596  f418				  -	      lsr
   3597  f418				  -	      lsr
   3598  f418				  -	      ifnconst	DOUBLEWIDE	; multiply value by 2 for double-width
   3599  f418				  -	      lsr
   3600  f418				  -	      endif
   3601  f418				  -	      clc
   3602  f418				  -	      adc	temp1	; add the offset to character graphics to our value
   3603  f418				  -	      sta	VALBUFFER,x
   3604  f418				  -	      inx
   3605  f418				  -
   3606  f418				  -			; second half of the digit
   3607  f418				  -	      clc
   3608  f418				  -	      adc	#1
   3609  f418				  -	      sta	VALBUFFER,x
   3610  f418				  -	      inx
   3611  f418				  -
   3612  f418				  -pvnibble2char_skipnibbleextra
   3613  f418				  -			; low nibble...
   3614  f418				  -	      lda	(temp7),y
   3615  f418				  -	      and	#$0f
   3616  f418				  -	      ifconst	DOUBLEWIDE	; multiply value by 2 for double-width
   3617  f418				  -	      asl
   3618  f418				  -	      endif
   3619  f418				  -	      asl
   3620  f418				  -
   3621  f418				  -	      clc
   3622  f418				  -	      adc	temp1	; add the offset to character graphics to our value
   3623  f418				  -	      sta	VALBUFFER,x
   3624  f418				  -	      inx
   3625  f418				  -
   3626  f418				  -	      clc
   3627  f418				  -	      adc	#1
   3628  f418				  -	      sta	VALBUFFER,x
   3629  f418				  -	      inx
   3630  f418				  -	      iny
   3631  f418				  -
   3632  f418				  -	      dec	plotdigitcount
   3633  f418				  -	      bne	pvnibble2charextra
   3634  f418				  -
   3635  f418				  -			;point to the start of our valuebuffer
   3636  f418				  -	      clc
   3637  f418				  -	      lda	#<VALBUFFER
   3638  f418				  -	      adc	valbufend
   3639  f418				  -	      sta	temp1
   3640  f418				  -	      lda	#>VALBUFFER
   3641  f418				  -	      adc	#0
   3642  f418				  -	      sta	temp2
   3643  f418				  -
   3644  f418				  -			;advance valbufend to the end of our value buffer
   3645  f418				  -	      stx	valbufend
   3646  f418				  -
   3647  f418				  -	      ifnconst	plotvalueonscreen
   3648  f418				  -	      jmp	plotcharacters
   3649  f418				  -	      else
   3650  f418				  -	      jmp	plotcharacterslive
   3651  f418				  -	      endif
   3652  f418					      endif		; USED_PLOTVALUEEXTRA
   3653  f418
   3654  f418				   boxcollision
   3655  f418							; the worst case cycle-time for the code below is 43 cycles.
   3656  f418							; unfortunately, prior to getting here we've burned 44 cycles in argument setup. eep!
   3657  f418
   3658  f418							;__boxx1 = accumulator
   3659  f418							;__boxy1 = y
   3660  f418		       00 44	   __boxw1    =	temp3
   3661  f418		       00 45	   __boxh1    =	temp4
   3662  f418
   3663  f418		       00 46	   __boxx2    =	temp5
   3664  f418		       00 47	   __boxy2    =	temp6
   3665  f418		       00 48	   __boxw2    =	temp7
   3666  f418		       00 49	   __boxh2    =	temp8
   3667  f418
   3668  f418				   DoXCollisionCheck
   3669  f418							;lda __boxx1 ; skipped. already in the accumulator
   3670  f418		       c5 46		      cmp	__boxx2	;3
   3671  f41a		       b0 07		      bcs	X1isbiggerthanX2	;2/3
   3672  f41c				   X2isbiggerthanX1
   3673  f41c							; carry is clear
   3674  f41c		       65 44		      adc	__boxw1	;3
   3675  f41e		       c5 46		      cmp	__boxx2	;3
   3676  f420		       b0 08		      bcs	DoYCollisionCheck	;3/2
   3677  f422		       60		      rts		;6 - carry clear, no collision
   3678  f423				   X1isbiggerthanX2
   3679  f423		       18		      clc		;2
   3680  f424		       e5 48		      sbc	__boxw2	;3
   3681  f426		       c5 46		      cmp	__boxx2	;3
   3682  f428		       b0 13		      bcs	noboxcollision	;3/2
   3683  f42a				   DoYCollisionCheck
   3684  f42a		       98		      tya		; 2 ; use to be "lda __boxy1"
   3685  f42b		       c5 47		      cmp	__boxy2	;3
   3686  f42d		       b0 05		      bcs	Y1isbiggerthanY2	;3/2
   3687  f42f				   Y2isbiggerthanY1
   3688  f42f							; carry is clear
   3689  f42f		       65 45		      adc	__boxh1	;3
   3690  f431		       c5 47		      cmp	__boxy2	;3
   3691  f433		       60		      rts		;6 
   3692  f434				   Y1isbiggerthanY2
   3693  f434		       18		      clc		;2
   3694  f435		       e5 49		      sbc	__boxh2	;3
   3695  f437		       c5 47		      cmp	__boxy2	;3
   3696  f439		       b0 02		      bcs	noboxcollision	;3/2
   3697  f43b				   yesboxcollision
   3698  f43b		       38		      sec		;2
   3699  f43c		       60		      rts		;6
   3700  f43d				   noboxcollision
   3701  f43d		       18		      clc		;2
   3702  f43e		       60		      rts		;6
   3703  f43f
   3704  f43f				   randomize
   3705  f43f		       a5 40		      lda	rand
   3706  f441		       4a		      lsr
   3707  f442		       26 41		      rol	rand16
   3708  f444		       90 02		      bcc	noeor
   3709  f446		       49 b4		      eor	#$B4
   3710  f448				   noeor
   3711  f448		       85 40		      sta	rand
   3712  f44a		       45 41		      eor	rand16
   3713  f44c		       60		      rts
   3714  f44d
   3715  f44d							; bcd conversion routine courtesy Omegamatrix
   3716  f44d							; http://atariage.com/forums/blog/563/entry-10832-hex-to-bcd-conversion-0-99/
   3717  f44d				   converttobcd
   3718  f44d							;value to convert is in the accumulator
   3719  f44d		       85 42		      sta	temp1
   3720  f44f		       4a		      lsr
   3721  f450		       65 42		      adc	temp1
   3722  f452		       6a		      ror
   3723  f453		       4a		      lsr
   3724  f454		       4a		      lsr
   3725  f455		       65 42		      adc	temp1
   3726  f457		       6a		      ror
   3727  f458		       65 42		      adc	temp1
   3728  f45a		       6a		      ror
   3729  f45b		       4a		      lsr
   3730  f45c		       29 3c		      and	#$3C
   3731  f45e		       85 43		      sta	temp2
   3732  f460		       4a		      lsr
   3733  f461		       65 43		      adc	temp2
   3734  f463		       65 42		      adc	temp1
   3735  f465		       60		      rts		; return the result in the accumulator
   3736  f466
   3737  f466							; Y and A contain multiplicands, result in A
   3738  f466				   mul8
   3739  f466		       84 42		      sty	temp1
   3740  f468		       85 43		      sta	temp2
   3741  f46a		       a9 00		      lda	#0
   3742  f46c				   reptmul8
   3743  f46c		       46 43		      lsr	temp2
   3744  f46e		       90 03		      bcc	skipmul8
   3745  f470		       18		      clc
   3746  f471		       65 42		      adc	temp1
   3747  f473							;bcs donemul8 might save cycles?
   3748  f473				   skipmul8
   3749  f473							;beq donemul8 might save cycles?
   3750  f473		       06 42		      asl	temp1
   3751  f475		       d0 f5		      bne	reptmul8
   3752  f477				   donemul8
   3753  f477		       60		      rts
   3754  f478
   3755  f478				   div8
   3756  f478							; A=numerator Y=denominator, result in A
   3757  f478		       c0 02		      cpy	#2
   3758  f47a		       90 0a		      bcc	div8end+1	;div by 0 = bad, div by 1=no calc needed, so bail out
   3759  f47c		       84 42		      sty	temp1
   3760  f47e		       a0 ff		      ldy	#$ff
   3761  f480				   div8loop
   3762  f480		       e5 42		      sbc	temp1
   3763  f482		       c8		      iny
   3764  f483		       b0 fb		      bcs	div8loop
   3765  f485				   div8end
   3766  f485		       98		      tya
   3767  f486							; result in A
   3768  f486		       60		      rts
   3769  f487
   3770  f487							; Y and A contain multiplicands, result in temp2,A=low, temp1=high
   3771  f487				   mul16
   3772  f487		       84 42		      sty	temp1
   3773  f489		       85 43		      sta	temp2
   3774  f48b
   3775  f48b		       a9 00		      lda	#0
   3776  f48d		       a2 08		      ldx	#8
   3777  f48f		       46 42		      lsr	temp1
   3778  f491				   mul16_1
   3779  f491		       90 03		      bcc	mul16_2
   3780  f493		       18		      clc
   3781  f494		       65 43		      adc	temp2
   3782  f496				   mul16_2
   3783  f496		       6a		      ror
   3784  f497		       66 42		      ror	temp1
   3785  f499		       ca		      dex
   3786  f49a		       d0 f5		      bne	mul16_1
   3787  f49c		       85 43		      sta	temp2
   3788  f49e		       60		      rts
   3789  f49f
   3790  f49f							; div int/int
   3791  f49f							; numerator in A, denom in temp1
   3792  f49f							; returns with quotient in A, remainder in temp1
   3793  f49f				   div16
   3794  f49f		       85 43		      sta	temp2
   3795  f4a1		       84 42		      sty	temp1
   3796  f4a3		       a9 00		      lda	#0
   3797  f4a5		       a2 08		      ldx	#8
   3798  f4a7		       06 43		      asl	temp2
   3799  f4a9				   div16_1
   3800  f4a9		       2a		      rol
   3801  f4aa		       c5 42		      cmp	temp1
   3802  f4ac		       90 02		      bcc	div16_2
   3803  f4ae		       e5 42		      sbc	temp1
   3804  f4b0				   div16_2
   3805  f4b0		       26 43		      rol	temp2
   3806  f4b2		       ca		      dex
   3807  f4b3		       d0 f4		      bne	div16_1
   3808  f4b5		       85 42		      sta	temp1
   3809  f4b7		       a5 43		      lda	temp2
   3810  f4b9		       60		      rts
   3811  f4ba
   3812  f4ba				  -	      ifconst	bankswitchmode
   3813  f4ba				  -BS_jsr
   3814  f4ba				  -	      ifconst	MCPDEVCART
   3815  f4ba				  -	      ora	#$18
   3816  f4ba				  -	      sta	$3000
   3817  f4ba				  -	      else
   3818  f4ba				  -	      sta	$8000
   3819  f4ba				  -	      endif
   3820  f4ba				  -	      pla
   3821  f4ba				  -	      tax
   3822  f4ba				  -	      pla
   3823  f4ba				  -	      rts
   3824  f4ba				  -
   3825  f4ba				  -BS_return
   3826  f4ba				  -	      pla		; bankswitch bank
   3827  f4ba				  -	      ifconst	BANKRAM
   3828  f4ba				  -	      sta	currentbank
   3829  f4ba				  -	      ora	currentrambank
   3830  f4ba				  -	      endif
   3831  f4ba				  -	      ifconst	MCPDEVCART
   3832  f4ba				  -	      ora	#$18
   3833  f4ba				  -	      sta	$3000
   3834  f4ba				  -	      else
   3835  f4ba				  -	      sta	$8000
   3836  f4ba				  -	      endif
   3837  f4ba				  -	      pla		; bankswitch $0 flag
   3838  f4ba				  -	      rts
   3839  f4ba					      endif
   3840  f4ba
   3841  f4ba				   checkselectswitch
   3842  f4ba		       ad 82 02 	      lda	SWCHB	; first check the real select switch...
   3843  f4bd		       29 02		      and	#%00000010
   3844  f4bf					      ifnconst	MOUSESUPPORT
   3845  f4bf		       f0 05		      beq	checkselectswitchreturn	; switch is pressed
   3846  f4c1		       ad 80 02 	      lda	SWCHA	; then check the soft "select" joysick code...
   3847  f4c4		       29 b0		      and	#%10110000	; R_DU
   3848  f4c6					      endif		; MOUSESUPPORT
   3849  f4c6				   checkselectswitchreturn
   3850  f4c6		       60		      rts
   3851  f4c7
   3852  f4c7				   checkresetswitch
   3853  f4c7		       ad 82 02 	      lda	SWCHB	; first check the real reset switch...
   3854  f4ca		       29 01		      and	#%00000001
   3855  f4cc					      ifnconst	MOUSESUPPORT
   3856  f4cc		       f0 05		      beq	checkresetswitchreturn	; switch is pressed
   3857  f4ce		       ad 80 02 	      lda	SWCHA	; then check the soft "reset" joysick code...
   3858  f4d1		       29 70		      and	#%01110000	; _LDU
   3859  f4d3					      endif		; MOUSESUPPORT
   3860  f4d3				   checkresetswitchreturn
   3861  f4d3		       60		      rts
   3862  f4d4
   3863  f4d4				  -	      ifconst	FINESCROLLENABLED
   3864  f4d4				  -finescrolldlls
   3865  f4d4				  -	      ldx	temp1	; first DLL index x3
   3866  f4d4				  -	      lda	DLLMEM,x
   3867  f4d4				  -	      and	#%11110000
   3868  f4d4				  -	      ora	finescrolly
   3869  f4d4				  -	      sta	DLLMEM,x
   3870  f4d4				  -
   3871  f4d4				  -	      ldx	temp2	; last DLL index x3
   3872  f4d4				  -	      lda	DLLMEM,x
   3873  f4d4				  -	      and	#%11110000
   3874  f4d4				  -	      ora	finescrolly
   3875  f4d4				  -	      eor	#(WZONEHEIGHT-1)
   3876  f4d4				  -	      sta	DLLMEM,x
   3877  f4d4				  -	      rts
   3878  f4d4					      endif		; FINESCROLLENABLED
   3879  f4d4
   3880  f4d4				  -	      ifconst	USED_ADJUSTVISIBLE
   3881  f4d4				  -adjustvisible
   3882  f4d4				  -			; called with temp1=first visible zone *3, temp2=last visible zone *3
   3883  f4d4				  -	      jsr	waitforvblankstart	; ensure vblank just started
   3884  f4d4				  -	      ldx	visibleDLLstart
   3885  f4d4				  -findfirstinterrupt
   3886  f4d4				  -	      lda	DLLMEM,x
   3887  f4d4				  -	      bmi	foundfirstinterrupt
   3888  f4d4				  -	      inx
   3889  f4d4				  -	      inx
   3890  f4d4				  -	      inx
   3891  f4d4				  -	      bne	findfirstinterrupt
   3892  f4d4				  -foundfirstinterrupt
   3893  f4d4				  -	      and	#%01111111	; clear the interrupt bit
   3894  f4d4				  -	      sta	DLLMEM,x
   3895  f4d4				  -	      ifconst	DOUBLEBUFFER
   3896  f4d4				  -	      sta	DLLMEM+DBOFFSET,x
   3897  f4d4				  -	      endif		; DOUBLEBUFFER
   3898  f4d4				  -	      ldx	overscanDLLstart
   3899  f4d4				  -findlastinterrupt
   3900  f4d4				  -	      lda	DLLMEM,x
   3901  f4d4				  -	      bmi	foundlastinterrupt
   3902  f4d4				  -	      dex
   3903  f4d4				  -	      dex
   3904  f4d4				  -	      dex
   3905  f4d4				  -	      bne	findlastinterrupt
   3906  f4d4				  -foundlastinterrupt
   3907  f4d4				  -	      and	#%01111111	; clear the interrupt bit
   3908  f4d4				  -	      sta	DLLMEM,x
   3909  f4d4				  -	      ifconst	DOUBLEBUFFER
   3910  f4d4				  -	      sta	DLLMEM+DBOFFSET,x
   3911  f4d4				  -	      endif		; DOUBLEBUFFER
   3912  f4d4				  -			;now we need to set the new interrupts
   3913  f4d4				  -	      clc
   3914  f4d4				  -	      lda	temp1
   3915  f4d4				  -	      adc	visibleDLLstart
   3916  f4d4				  -	      tax
   3917  f4d4				  -	      lda	DLLMEM,x
   3918  f4d4				  -	      ora	#%10000000
   3919  f4d4				  -	      sta	DLLMEM,x
   3920  f4d4				  -	      ifconst	DOUBLEBUFFER
   3921  f4d4				  -	      sta	DLLMEM+DBOFFSET,x
   3922  f4d4				  -	      endif		; DOUBLEBUFFER
   3923  f4d4				  -	      clc
   3924  f4d4				  -	      lda	temp2
   3925  f4d4				  -	      adc	visibleDLLstart
   3926  f4d4				  -	      tax
   3927  f4d4				  -	      lda	DLLMEM,x
   3928  f4d4				  -	      ora	#%10000000
   3929  f4d4				  -	      sta	DLLMEM,x
   3930  f4d4				  -	      ifconst	DOUBLEBUFFER
   3931  f4d4				  -	      sta	DLLMEM+DBOFFSET,x
   3932  f4d4				  -	      endif		; DOUBLEBUFFER
   3933  f4d4				  -	      jsr	vblankresync
   3934  f4d4				  -	      rts
   3935  f4d4					      endif		; USED_ADJUSTVISIBLE
   3936  f4d4
   3937  f4d4				   vblankresync
   3938  f4d4		       20 95 f5 	      jsr	waitforvblankstart	; ensure vblank just started
   3939  f4d7		       a9 00		      lda	#0
   3940  f4d9		       85 4d		      sta	visibleover
   3941  f4db		       a9 03		      lda	#3
   3942  f4dd		       8d b2 01 	      sta	interruptindex
   3943  f4e0		       60		      rts
   3944  f4e1
   3945  f4e1				   createallgamedlls
   3946  f4e1		       a2 00		      ldx	#0
   3947  f4e3		       a9 19		      lda	#NVLINES
   3948  f4e5		       ac 09 21 	      ldy	paldetected
   3949  f4e8		       f0 03		      beq	skipcreatePALpadding
   3950  f4ea		       18		      clc
   3951  f4eb		       69 15		      adc	#21
   3952  f4ed				   skipcreatePALpadding
   3953  f4ed		       20 2b f5 	      jsr	createnonvisibledlls
   3954  f4f0		       8e 3c 21 	      stx	visibleDLLstart
   3955  f4f3		       20 65 f5 	      jsr	createvisiblezones
   3956  f4f6		       8e 3d 21 	      stx	overscanDLLstart
   3957  f4f9				   createallgamedllscontinue
   3958  f4f9		       a9 50		      lda	#(NVLINES+55)	; extras for PAL
   3959  f4fb		       20 2b f5 	      jsr	createnonvisibledlls
   3960  f4fe
   3961  f4fe		       ae 3c 21 	      ldx	visibleDLLstart
   3962  f501		       bd 00 18 	      lda	DLLMEM,x
   3963  f504		       09 80		      ora	#%10000000	; NMI 1 - start of visible screen
   3964  f506		       9d 00 18 	      sta	DLLMEM,x
   3965  f509					      ifconst	DOUBLEBUFFER
   3966  f509		       9d 70 18 	      sta	DLLMEM+DBOFFSET,x
   3967  f50c					      endif		; DOUBLEBUFFER
   3968  f50c
   3969  f50c		       ae 3d 21 	      ldx	overscanDLLstart
   3970  f50f		       bd 00 18 	      lda	DLLMEM,x
   3971  f512		       09 83		      ora	#%10000011	; NMI 2 - end of visible screen
   3972  f514		       29 f3		      and	#%11110011	; change this to a 1-line DLL, so there's time enough for the "deeper overscan" DLL
   3973  f516		       9d 00 18 	      sta	DLLMEM,x
   3974  f519					      ifconst	DOUBLEBUFFER
   3975  f519		       9d 70 18 	      sta	DLLMEM+DBOFFSET,x
   3976  f51c					      endif		; DOUBLEBUFFER
   3977  f51c
   3978  f51c		       e8		      inx
   3979  f51d		       e8		      inx
   3980  f51e		       e8		      inx
   3981  f51f
   3982  f51f		       bd 00 18 	      lda	DLLMEM,x
   3983  f522		       09 80		      ora	#%10000000	; NMI 3 - deeper overscan
   3984  f524		       9d 00 18 	      sta	DLLMEM,x
   3985  f527					      ifconst	DOUBLEBUFFER
   3986  f527		       9d 70 18 	      sta	DLLMEM+DBOFFSET,x
   3987  f52a					      endif		; DOUBLEBUFFER
   3988  f52a
   3989  f52a		       60		      rts
   3990  f52b
   3991  f52b				   createnonvisibledlls
   3992  f52b		       85 42		      sta	temp1
   3993  f52d		       4a		      lsr
   3994  f52e		       4a		      lsr
   3995  f52f		       4a		      lsr
   3996  f530		       4a		      lsr		; /16
   3997  f531		       f0 09		      beq	skipcreatenonvisibledlls1loop
   3998  f533		       a8		      tay
   3999  f534				   createnonvisibledlls1loop
   4000  f534		       a9 4f		      lda	#%01001111	;low nibble=16 lines, high nibble=Holey DMA
   4001  f536		       20 4b f5 	      jsr	createblankdllentry
   4002  f539		       88		      dey
   4003  f53a		       d0 f8		      bne	createnonvisibledlls1loop
   4004  f53c				   skipcreatenonvisibledlls1loop
   4005  f53c		       a5 42		      lda	temp1
   4006  f53e		       29 0f		      and	#%00001111
   4007  f540		       f0 08		      beq	createnonvisibledllsreturn
   4008  f542		       38		      sec
   4009  f543		       e9 01		      sbc	#1
   4010  f545		       09 40		      ora	#%01000000
   4011  f547		       20 4b f5 	      jsr	createblankdllentry
   4012  f54a				   createnonvisibledllsreturn
   4013  f54a		       60		      rts
   4014  f54b
   4015  f54b				   createblankdllentry
   4016  f54b		       9d 00 18 	      sta	DLLMEM,x
   4017  f54e					      ifconst	DOUBLEBUFFER
   4018  f54e		       9d 70 18 	      sta	DLLMEM+DBOFFSET,x
   4019  f551					      endif		; DOUBLEBUFFER
   4020  f551		       e8		      inx
   4021  f552		       a9 21		      lda	#$21	; blank
   4022  f554		       9d 00 18 	      sta	DLLMEM,x
   4023  f557					      ifconst	DOUBLEBUFFER
   4024  f557		       9d 70 18 	      sta	DLLMEM+DBOFFSET,x
   4025  f55a					      endif		; DOUBLEBUFFER
   4026  f55a		       e8		      inx
   4027  f55b		       a9 00		      lda	#$00
   4028  f55d		       9d 00 18 	      sta	DLLMEM,x
   4029  f560					      ifconst	DOUBLEBUFFER
   4030  f560		       9d 70 18 	      sta	DLLMEM+DBOFFSET,x
   4031  f563					      endif		; DOUBLEBUFFER
   4032  f563		       e8		      inx
   4033  f564		       60		      rts
   4034  f565
   4035  f565				   createvisiblezones
   4036  f565		       a0 00		      ldy	#0
   4037  f567				   createvisiblezonesloop
   4038  f567		       b9 47 f7 	      lda.w	DLHEIGHT,y
   4039  f56a		       09 20		      ora	#(WZONEHEIGHT * 4)	; set Holey DMA for 8 or 16 tall zones
   4040  f56c		       9d 00 18 	      sta	DLLMEM,x
   4041  f56f					      ifconst	DOUBLEBUFFER
   4042  f56f		       9d 70 18 	      sta	DLLMEM+DBOFFSET,x
   4043  f572					      endif		; DOUBLEBUFFER
   4044  f572		       e8		      inx
   4045  f573		       b9 17 f7 	      lda	DLPOINTH,y
   4046  f576		       9d 00 18 	      sta	DLLMEM,x
   4047  f579					      ifconst	DOUBLEBUFFER
   4048  f579		       9d 70 18 	      sta	DLLMEM+DBOFFSET,x
   4049  f57c					      endif		; DOUBLEBUFFER
   4050  f57c		       e8		      inx
   4051  f57d		       b9 2f f7 	      lda	DLPOINTL,y
   4052  f580		       9d 00 18 	      sta	DLLMEM,x
   4053  f583					      ifconst	DOUBLEBUFFER
   4054  f583		       18		      clc
   4055  f584		       69 25		      adc	#DOUBLEBUFFEROFFSET
   4056  f586		       9d 70 18 	      sta	DLLMEM+DBOFFSET,x
   4057  f589		       90 03		      bcc	skiphidoublebufferadjust	; dlls are big endian, so we need to fix the hi byte after-the-fact...
   4058  f58b		       fe 6f 18 	      inc	DLLMEM+DBOFFSET-1,x
   4059  f58e				   skiphidoublebufferadjust
   4060  f58e					      endif		; DOUBLEBUFFER
   4061  f58e		       e8		      inx
   4062  f58f		       c8		      iny
   4063  f590		       c0 18		      cpy	#WZONECOUNT
   4064  f592		       d0 d3		      bne	createvisiblezonesloop
   4065  f594		       60		      rts
   4066  f595
   4067  f595				   waitforvblankstart
   4068  f595				   visibleoverwait
   4069  f595		       24 28		      BIT	MSTAT
   4070  f597		       10 fc		      bpl	visibleoverwait
   4071  f599				   vblankstartwait
   4072  f599		       24 28		      BIT	MSTAT
   4073  f59b		       30 fc		      bmi	vblankstartwait
   4074  f59d		       60		      rts
   4075  f59e
   4076  f59e					      ifconst	DOUBLEBUFFER
   4077  f59e				   flipdisplaybufferreturn
   4078  f59e		       60		      rts
   4079  f59f				   flipdisplaybuffer
   4080  f59f		       a5 d5		      lda	doublebufferstate
   4081  f5a1		       f0 fb		      beq	flipdisplaybufferreturn	; exit if we're not in double-buffer
   4082  f5a3
   4083  f5a3		       20 3d f1 	      jsr	terminatedisplaybuffer	; terminate the working buffer before we flip
   4084  f5a6
   4085  f5a6		       a5 d5		      lda	doublebufferstate
   4086  f5a8		       4a		      lsr		; /2, so we'll see 0 or 1, rather than 1 or 3
   4087  f5a9		       aa		      tax
   4088  f5aa
   4089  f5aa							; ensure we don't flip mid-display. otherwise the displayed DL will be the one the game is working on.
   4090  f5aa
   4091  f5aa				   flipdisplaybufferwait1
   4092  f5aa		       a5 4d		      lda	visibleover
   4093  f5ac		       f0 fc		      beq	flipdisplaybufferwait1
   4094  f5ae
   4095  f5ae				   flipdisplaybufferwait
   4096  f5ae		       a5 4d		      lda	visibleover
   4097  f5b0		       d0 fc		      bne	flipdisplaybufferwait
   4098  f5b2
   4099  f5b2		       ad b4 01 	      lda	doublebufferminimumframetarget
   4100  f5b5		       f0 0b		      beq	skipminimumframecode
   4101  f5b7		       ad b5 01 	      lda	doublebufferminimumframeindex
   4102  f5ba		       d0 ee		      bne	flipdisplaybufferwait1
   4103  f5bc		       ad b4 01 	      lda	doublebufferminimumframetarget
   4104  f5bf		       8d b5 01 	      sta	doublebufferminimumframeindex
   4105  f5c2				   skipminimumframecode
   4106  f5c2
   4107  f5c2		       bd 22 f6 	      lda	DLLMEMLutHi,x
   4108  f5c5		       85 2c		      sta	DPPH
   4109  f5c7		       bd 20 f6 	      lda	DLLMEMLutLo,x
   4110  f5ca		       85 30		      sta	DPPL
   4111  f5cc
   4112  f5cc		       bd 24 f6 	      lda	NewPageflipstate,x
   4113  f5cf		       85 d5		      sta	doublebufferstate
   4114  f5d1		       bd 26 f6 	      lda	NewPageflipoffset,x
   4115  f5d4		       85 d6		      sta	doublebufferdloffset
   4116  f5d6
   4117  f5d6		       a5 d7		      lda	doublebufferbufferdirty
   4118  f5d8		       f0 c4		      beq	flipdisplaybufferreturn
   4119  f5da
   4120  f5da							; The doublebuffer buffer is dirty, so the game code must have issued a savescreen recently.
   4121  f5da							; To make savescreen work with the new working buffer, we need to copy over the saved objects
   4122  f5da							; from the displayed buffer to the working buffer...
   4123  f5da
   4124  f5da		       a5 d6		      lda	doublebufferdloffset
   4125  f5dc		       49 25		      eor	#DOUBLEBUFFEROFFSET
   4126  f5de		       85 47		      sta	temp6	; make temp6 the anti-doublebufferdloffset variable
   4127  f5e0
   4128  f5e0		       a2 17		      ldx	#(WZONECOUNT-1)
   4129  f5e2				   copybufferzoneloop
   4130  f5e2
   4131  f5e2		       bd 2f f7 	      lda	DLPOINTL,x
   4132  f5e5		       18		      clc
   4133  f5e6		       65 d6		      adc	doublebufferdloffset
   4134  f5e8		       85 42		      sta	temp1
   4135  f5ea		       bd 17 f7 	      lda	DLPOINTH,x
   4136  f5ed		       69 00		      adc	#0
   4137  f5ef		       85 43		      sta	temp2
   4138  f5f1
   4139  f5f1		       bd 2f f7 	      lda	DLPOINTL,x
   4140  f5f4		       18		      clc
   4141  f5f5		       65 47		      adc	temp6
   4142  f5f7		       85 44		      sta	temp3
   4143  f5f9		       bd 17 f7 	      lda	DLPOINTH,x
   4144  f5fc		       69 00		      adc	#0
   4145  f5fe		       85 45		      sta	temp4
   4146  f600
   4147  f600		       b5 82		      lda	dlendsave,x
   4148  f602		       a8		      tay
   4149  f603				   copybuffercharsloop
   4150  f603		       b1 44		      lda	(temp3),y
   4151  f605		       91 42		      sta	(temp1),y
   4152  f607		       88		      dey
   4153  f608		       10 f9		      bpl	copybuffercharsloop
   4154  f60a		       ca		      dex
   4155  f60b		       10 d5		      bpl	copybufferzoneloop
   4156  f60d		       a9 00		      lda	#0
   4157  f60f		       85 d7		      sta	doublebufferbufferdirty
   4158  f611		       60		      rts
   4159  f612
   4160  f612				   doublebufferoff
   4161  f612		       a9 01		      lda	#1
   4162  f614		       85 d5		      sta	doublebufferstate
   4163  f616		       20 9f f5 	      jsr	flipdisplaybuffer
   4164  f619		       a9 00		      lda	#0
   4165  f61b		       85 d5		      sta	doublebufferstate
   4166  f61d		       85 d6		      sta	doublebufferdloffset
   4167  f61f		       60		      rts
   4168  f620
   4169  f620				   DLLMEMLutLo
   4170  f620		       00 70		      .byte.b	<DLLMEM,<(DLLMEM+DBOFFSET)
   4171  f622				   DLLMEMLutHi
   4172  f622		       18 18		      .byte.b	>DLLMEM,>(DLLMEM+DBOFFSET)
   4173  f624				   NewPageflipstate
   4174  f624		       03 01		      .byte.b	3,1
   4175  f626				   NewPageflipoffset
   4176  f626		       25 00		      .byte.b	DOUBLEBUFFEROFFSET,0
   4177  f628
   4178  f628					      endif		; DOUBLEBUFFER
   4179  f628
   4180  f628				  -	      ifconst	MOUSESUPPORT
   4181  f628				  -	      ifnconst	DRIVINGSUPPORT
   4182  f628				  -rotationalcompare
   4183  f628				  -			; new=00, old=xx
   4184  f628				  -	      .byte	$00, $01, $ff, $00
   4185  f628				  -			; new=01, old=xx
   4186  f628				  -	      .byte	$ff, $00, $00, $01
   4187  f628				  -			; new=10, old=xx
   4188  f628				  -	      .byte	$01, $00, $00, $ff
   4189  f628				  -			; new=11, old=xx
   4190  f628				  -	      .byte	$00, $ff, $01, $00
   4191  f628				  -	      endif
   4192  f628				  -
   4193  f628				  -			;  0000YyXx st mouse
   4194  f628				  -			;  0000xyXY amiga mouse
   4195  f628				  -amigatoataribits		; swap bits 1 and 4...
   4196  f628				  -	      .byte	%00000000, %00001000, %00000010, %00001010
   4197  f628				  -	      .byte	%00000100, %00001100, %00000110, %00001110
   4198  f628				  -	      .byte	%00000001, %00001001, %00000011, %00001011
   4199  f628				  -	      .byte	%00000101, %00001101, %00000111, %00001111
   4200  f628				  -
   4201  f628				  -mouseupdate
   4202  f628				  -			;LONGDEBUG = 1
   4203  f628				  -	      lda	SWCHA
   4204  f628				  -	      and	#$0f
   4205  f628				  -	      sta	inttemp2
   4206  f628				  -	      lda	SWCHA
   4207  f628				  -	      lsr
   4208  f628				  -	      lsr
   4209  f628				  -	      lsr
   4210  f628				  -	      lsr
   4211  f628				  -	      sta	inttemp1
   4212  f628				  -
   4213  f628				  -	      lda	port0control,x
   4214  f628				  -	      cmp	#8	; st mouse
   4215  f628				  -	      beq	domousecontrol
   4216  f628				  -	      cmp	#9	; amiga mouse
   4217  f628				  -	      bne	skipmousecontrol
   4218  f628				  -			; st mice encode on different bits/joystick-lines than amiga mice...
   4219  f628				  -			;  0000YyXx st mouse
   4220  f628				  -			;  0000xyXY amiga mouse
   4221  f628				  -			; ...so can shuffle the amiga bits to reuse the st driver.
   4222  f628				  -	      lda	inttemp1,x
   4223  f628				  -	      tay
   4224  f628				  -	      lda	amigatoataribits,y
   4225  f628				  -	      sta	inttemp1,x
   4226  f628				  -domousecontrol
   4227  f628				  -			;port X has a mouse enabled
   4228  f628				  -	      lda	inttemp1,x
   4229  f628				  -	      and	#%00000011
   4230  f628				  -	      asl
   4231  f628				  -	      asl
   4232  f628				  -	      ora	mousecodex0,x
   4233  f628				  -	      and	#%00001111
   4234  f628				  -	      tay
   4235  f628				  -	      lda	rotationalcompare,y
   4236  f628				  -	      clc
   4237  f628				  -	      adc	mousex0,x
   4238  f628				  -	      sta	mousex0,x
   4239  f628				  -	      tya
   4240  f628				  -	      lsr
   4241  f628				  -	      lsr
   4242  f628				  -	      sta	mousecodex0,x
   4243  f628				  -
   4244  f628				  -	      lda	inttemp1,x
   4245  f628				  -	      and	#%00001100
   4246  f628				  -	      ora	mousecodey0,x
   4247  f628				  -	      and	#%00001111
   4248  f628				  -	      tay
   4249  f628				  -	      lda	rotationalcompare,y
   4250  f628				  -	      asl		; *2 for y axis, since it has ~double the resolution of x
   4251  f628				  -	      clc
   4252  f628				  -	      adc	mousey0,x
   4253  f628				  -	      sta	mousey0,x
   4254  f628				  -	      tya
   4255  f628				  -	      lsr
   4256  f628				  -	      lsr
   4257  f628				  -	      sta	mousecodey0,x
   4258  f628				  -skipmousecontrol
   4259  f628				  -	      jmp	longreadloopreturn
   4260  f628					      endif		; MOUSESUPPORT
   4261  f628
   4262  f628				   mousebuttonhandler		; outside of conditional, so button handler entry in LUT is valid
   4263  f628				  -	      ifconst	MOUSESUPPORT
   4264  f628				  -			; stick the mouse buttons in the correct shadow register...
   4265  f628				  -	      txa
   4266  f628				  -	      asl
   4267  f628				  -	      tay		; y=x*2
   4268  f628				  -	      lda	INPT1,y
   4269  f628				  -	      eor	#%10000000
   4270  f628				  -	      lsr
   4271  f628				  -	      sta	sINPT1,x
   4272  f628				  -
   4273  f628				  -	      lda	INPT4,x
   4274  f628				  -	      and	#%10000000
   4275  f628				  -	      eor	#%10000000
   4276  f628				  -	      ora	sINPT1,x
   4277  f628				  -	      sta	sINPT1,x
   4278  f628				  -	      jmp	buttonreadloopreturn
   4279  f628					      endif		; MOUSESUPPORT
   4280  f628
   4281  f628				  -	      ifconst	DRIVINGSUPPORT
   4282  f628				  -rotationalcompare
   4283  f628				  -			; new=00, old=xx
   4284  f628				  -	      .byte	$00, $01, $ff, $00
   4285  f628				  -			; new=01, old=xx
   4286  f628				  -	      .byte	$ff, $00, $00, $01
   4287  f628				  -			; new=10, old=xx
   4288  f628				  -	      .byte	$01, $00, $00, $ff
   4289  f628				  -			; new=11, old=xx
   4290  f628				  -	      .byte	$00, $ff, $01, $00
   4291  f628				  -drivingupdate
   4292  f628				  -	      ldx	#1
   4293  f628				  -	      lda	port1control
   4294  f628				  -	      cmp	#6	; check if port1=driving
   4295  f628				  -	      bne	skipfirstdrivingcontrol
   4296  f628				  -	      lda	SWCHA
   4297  f628				  -	      and	#%00000011
   4298  f628				  -	      asl
   4299  f628				  -	      asl
   4300  f628				  -drivingupdateloop
   4301  f628				  -	      ora	controller0statesave,x
   4302  f628				  -	      tay
   4303  f628				  -	      lda	rotationalcompare,y
   4304  f628				  -	      clc
   4305  f628				  -	      adc	drivingposition0,x
   4306  f628				  -	      sta	drivingposition0,x
   4307  f628				  -	      tya
   4308  f628				  -	      lsr
   4309  f628				  -	      lsr
   4310  f628				  -	      sta	controller0statesave,x
   4311  f628				  -skipfirstdrivingcontrol
   4312  f628				  -	      lda	port0control
   4313  f628				  -	      cmp	#6	; check if port0=driving
   4314  f628				  -	      bne	drivingcontrolsloopdone
   4315  f628				  -	      lda	SWCHA
   4316  f628				  -	      and	#%00110000
   4317  f628				  -	      lsr
   4318  f628				  -	      lsr
   4319  f628				  -	      dex
   4320  f628				  -	      bpl	drivingupdateloop
   4321  f628				  -drivingcontrolsloopdone
   4322  f628				  -	      rts
   4323  f628					      endif		; DRIVINGSUPPORT
   4324  f628
   4325  f628				  -	      ifconst	KEYPADSUPPORT
   4326  f628				  -			; ** select keypad rows 0 to 3 over 4 frames...
   4327  f628				  -keypadrowselect
   4328  f628				  -	      ldy	#0
   4329  f628				  -	      lda	port0control
   4330  f628				  -	      cmp	#7
   4331  f628				  -	      bne	skipport0val
   4332  f628				  -	      iny		; y=y+1
   4333  f628				  -skipport0val
   4334  f628				  -	      lda	port1control
   4335  f628				  -	      cmp	#7
   4336  f628				  -	      bne	skipport1val
   4337  f628				  -	      iny
   4338  f628				  -	      iny		; y=y+2
   4339  f628				  -skipport1val
   4340  f628				  -	      lda	keyrowdirectionmask,y
   4341  f628				  -	      sta	CTLSWA
   4342  f628				  -	      tya
   4343  f628				  -	      asl
   4344  f628				  -	      asl
   4345  f628				  -	      sta	inttemp1
   4346  f628				  -	      lda	framecounter
   4347  f628				  -	      and	#3
   4348  f628				  -	      ora	inttemp1
   4349  f628				  -	      tax
   4350  f628				  -	      lda	keyrowselectvalue,x
   4351  f628				  -	      sta	SWCHA
   4352  f628				  -	      rts
   4353  f628				  -
   4354  f628				  -keyrowdirectionmask
   4355  f628				  -	      .byte	#%00000000	; 0 : port0=input  port1=input
   4356  f628				  -	      .byte	#%11110000	; 1 : port0=output port1=input
   4357  f628				  -	      .byte	#%00001111	; 2 : port0=input  port1=output
   4358  f628				  -	      .byte	#%11111111	; 3 : port0=output port1=output
   4359  f628				  -
   4360  f628				  -keyrowselectvalue
   4361  f628				  -	      .byte	#%00000000, #%00000000, #%00000000, #%00000000	; no row selected, all pins high, always
   4362  f628				  -	      .byte	#%11100000, #%11010000, #%10110000, #%01110000	; p0 keypad in
   4363  f628				  -	      .byte	#%00001110, #%00001101, #%00001011, #%00000111	; p1 keypad in
   4364  f628				  -	      .byte	#%11101110, #%11011101, #%10111011, #%01110111	; p0+p1 keypads in
   4365  f628					      endif		;  KEYPADSUPPORT
   4366  f628
   4367  f628				  -	      ifconst	KEYPADSUPPORT
   4368  f628				  -keypadcolumnread
   4369  f628				  -	      lda	framecounter
   4370  f628				  -	      and	#3
   4371  f628				  -	      asl		; x2 because keypad variables are interleaved
   4372  f628				  -	      tax
   4373  f628				  -
   4374  f628				  -	      lda	#0
   4375  f628				  -	      sta	keypadmatrix0a,x
   4376  f628				  -	      sta	keypadmatrix1a,x
   4377  f628				  -
   4378  f628				  -	      lda	INPT0
   4379  f628				  -	      cmp	#$80
   4380  f628				  -	      rol	keypadmatrix0a,x
   4381  f628				  -	      lda	INPT1
   4382  f628				  -	      cmp	#$80
   4383  f628				  -	      rol	keypadmatrix0a,x
   4384  f628				  -	      lda	INPT4
   4385  f628				  -	      cmp	#$80
   4386  f628				  -	      rol	keypadmatrix0a,x
   4387  f628				  -	      lda	keypadmatrix0a,x
   4388  f628				  -	      eor	#%00000111
   4389  f628				  -	      sta	keypadmatrix0a,x
   4390  f628				  -
   4391  f628				  -	      rol	keypadmatrix1a,x
   4392  f628				  -	      lda	INPT2
   4393  f628				  -	      cmp	#$80
   4394  f628				  -	      rol	keypadmatrix1a,x
   4395  f628				  -	      lda	INPT3
   4396  f628				  -	      cmp	#$80
   4397  f628				  -	      rol	keypadmatrix1a,x
   4398  f628				  -	      lda	INPT5
   4399  f628				  -	      cmp	#$80
   4400  f628				  -	      rol	keypadmatrix1a,x
   4401  f628				  -	      lda	keypadmatrix1a,x
   4402  f628				  -	      eor	#%00000111
   4403  f628				  -	      sta	keypadmatrix1a,x
   4404  f628				  -
   4405  f628				  -	      rts
   4406  f628					      endif		; KEYPADSUPPORT
   4407  f628
   4408  f628				   setportforinput
   4409  f628		       a5 e4		      lda	CTLSWAs
   4410  f62a		       3d 33 f6 	      and	allpinsinputlut,x
   4411  f62d		       85 e4		      sta	CTLSWAs
   4412  f62f		       8d 81 02 	      sta	CTLSWA
   4413  f632		       60		      rts
   4414  f633
   4415  f633				   allpinsinputlut
   4416  f633		       0f f0		      .byte.b	$0F, $F0
   4417  f635
   4418  f635				   setonebuttonmode
   4419  f635		       a9 14		      lda	#$14
   4420  f637		       8d 83 02 	      sta	CTLSWB	; set both 2-button disable bits to writable
   4421  f63a		       a5 e5		      lda	CTLSWBs
   4422  f63c		       1d 45 f6 	      ora	thisjoy2buttonbit,x
   4423  f63f		       85 e5		      sta	CTLSWBs
   4424  f641		       8d 82 02 	      sta	SWCHB	; turn off the 2-button disable bits
   4425  f644		       60		      rts
   4426  f645
   4427  f645				   thisjoy2buttonbit
   4428  f645		       04 10		      .byte.b	$04, $10
   4429  f647
   4430  f647				   settwobuttonmode
   4431  f647		       a9 14		      lda	#$14
   4432  f649		       8d 83 02 	      sta	CTLSWB	; set both 2-button disable bits to writable
   4433  f64c		       a5 e5		      lda	CTLSWBs
   4434  f64e		       3d 57 f6 	      and	thisjoy2buttonmask,x
   4435  f651		       85 e5		      sta	CTLSWBs
   4436  f653		       8d 82 02 	      sta	SWCHB
   4437  f656		       60		      rts
   4438  f657
   4439  f657				   thisjoy2buttonmask
   4440  f657		       fb ef		      .byte.b	$fb, $ef
   4441  f659
   4442  f659							; Provided under the CC0 license. See the included LICENSE.txt for details.
   4443  f659
   4444  f659				   START
   4445  f659				   start
   4446  f659
   4447  f659							;******** more or less the Atari recommended startup procedure
   4448  f659
   4449  f659		       78		      sei
   4450  f65a		       d8		      cld
   4451  f65b
   4452  f65b					      ifnconst	NOTIALOCK
   4453  f65b		       a9 07		      lda	#$07
   4454  f65d				  -	      else
   4455  f65d				  -	      lda	#$06
   4456  f65d					      endif
   4457  f65d		       85 01		      sta	INPTCTRL	;lock 7800 into 7800 mode
   4458  f65f		       a9 7f		      lda	#$7F
   4459  f661		       85 3c		      sta	CTRL	;disable DMA
   4460  f663		       a9 00		      lda	#$00
   4461  f665		       85 38		      sta	OFFSET
   4462  f667					      ifnconst	NOTIALOCK
   4463  f667		       85 01		      sta	INPTCTRL
   4464  f669					      endif
   4465  f669		       a2 ff		      ldx	#$FF
   4466  f66b		       9a		      txs
   4467  f66c
   4468  f66c							;************** Clear Memory
   4469  f66c
   4470  f66c		       a2 40		      ldx	#$40
   4471  f66e		       a9 00		      lda	#$00
   4472  f670				   crloop1
   4473  f670		       95 00		      sta	$00,x	;Clear zero page
   4474  f672		       9d 00 01 	      sta	$100,x	;Clear page 1
   4475  f675		       e8		      inx
   4476  f676		       d0 f8		      bne	crloop1
   4477  f678
   4478  f678
   4479  f678		       a0 00		      ldy	#$00	;Clear Ram
   4480  f67a		       a9 18		      lda	#$18	;Start at $1800
   4481  f67c		       85 81		      sta	$81
   4482  f67e		       a9 00		      lda	#$00
   4483  f680		       85 80		      sta	$80
   4484  f682				   crloop3
   4485  f682		       a9 00		      lda	#$00
   4486  f684		       91 80		      sta	($80),y	;Store data
   4487  f686		       c8		      iny		;Next byte
   4488  f687		       d0 f9		      bne	crloop3	;Branch if not done page
   4489  f689		       e6 81		      inc	$81	;Next page
   4490  f68b		       a5 81		      lda	$81
   4491  f68d		       c9 20		      cmp	#$20	;End at $1FFF
   4492  f68f		       d0 f1		      bne	crloop3	;Branch if not
   4493  f691
   4494  f691		       a0 00		      ldy	#$00	;Clear Ram
   4495  f693		       a9 22		      lda	#$22	;Start at $2200
   4496  f695		       85 81		      sta	$81
   4497  f697		       a9 00		      lda	#$00
   4498  f699		       85 80		      sta	$80
   4499  f69b				   crloop4
   4500  f69b		       a9 00		      lda	#$00
   4501  f69d		       91 80		      sta	($80),y	;Store data
   4502  f69f		       c8		      iny		;Next byte
   4503  f6a0		       d0 f9		      bne	crloop4	;Branch if not done page
   4504  f6a2		       e6 81		      inc	$81	;Next page
   4505  f6a4		       a5 81		      lda	$81
   4506  f6a6		       c9 27		      cmp	#$27	;End at $27FF
   4507  f6a8		       d0 f1		      bne	crloop4	;Branch if not
   4508  f6aa
   4509  f6aa		       a2 00		      ldx	#$00
   4510  f6ac		       a9 00		      lda	#$00
   4511  f6ae				   crloop5		;Clear 2100-213F, 2000-203F
   4512  f6ae		       9d 00 20 	      sta	$2000,x
   4513  f6b1		       9d 00 21 	      sta	$2100,x
   4514  f6b4		       e8		      inx
   4515  f6b5		       e0 40		      cpx	#$40
   4516  f6b7		       d0 f5		      bne	crloop5
   4517  f6b9
   4518  f6b9		       85 80		      sta	$80
   4519  f6bb		       85 81		      sta	$81
   4520  f6bd		       85 82		      sta	$82
   4521  f6bf		       85 83		      sta	$83
   4522  f6c1
   4523  f6c1							;seed random number with hopefully-random timer value
   4524  f6c1		       a9 01		      lda	#1
   4525  f6c3		       0d 84 02 	      ora	INTIM
   4526  f6c6		       85 40		      sta	rand
   4527  f6c8
   4528  f6c8							; detect the console type...
   4529  f6c8				   pndetectvblankstart
   4530  f6c8		       a5 28		      lda	MSTAT
   4531  f6ca		       10 fc		      bpl	pndetectvblankstart	; if we're not in VBLANK, wait for it to start 
   4532  f6cc				   pndetectvblankover
   4533  f6cc		       a5 28		      lda	MSTAT
   4534  f6ce		       30 fc		      bmi	pndetectvblankover	;  then wait for it to be over
   4535  f6d0		       a0 00		      ldy	#$00
   4536  f6d2		       a2 00		      ldx	#$00
   4537  f6d4				   pndetectvblankhappening
   4538  f6d4		       a5 28		      lda	MSTAT
   4539  f6d6		       30 07		      bmi	pndetectinvblank	;  if VBLANK starts, exit our counting loop 
   4540  f6d8		       85 24		      sta	WSYNC
   4541  f6da		       85 24		      sta	WSYNC
   4542  f6dc		       e8		      inx
   4543  f6dd		       d0 f5		      bne	pndetectvblankhappening
   4544  f6df				   pndetectinvblank
   4545  f6df		       e0 7d		      cpx	#125
   4546  f6e1		       90 02		      bcc	pndetecispal
   4547  f6e3		       a0 01		      ldy	#$01
   4548  f6e5				   pndetecispal
   4549  f6e5		       8c 09 21 	      sty	paldetected
   4550  f6e8
   4551  f6e8		       20 e1 f4 	      jsr	createallgamedlls
   4552  f6eb
   4553  f6eb		       a9 18		      lda	#>DLLMEM
   4554  f6ed		       85 2c		      sta	DPPH
   4555  f6ef		       a9 00		      lda	#<DLLMEM
   4556  f6f1		       85 30		      sta	DPPL
   4557  f6f3
   4558  f6f3							; CTRL 76543210
   4559  f6f3							; 7 colorburst kill
   4560  f6f3							; 6,5 dma ctrl 2=normal DMA, 3=no DMA
   4561  f6f3							; 4 character width 1=2 byte chars, 0=1 byte chars
   4562  f6f3							; 3 border control 0=background color border, 1=black border
   4563  f6f3							; 2 kangaroo mode 0=transparancy, 1=kangaroo
   4564  f6f3							; 1,0 read mode 0=160x2/160x4 1=N/A 2=320B/320D 3=320A/320C
   4565  f6f3
   4566  f6f3				  -	      ifconst	DOUBLEWIDE
   4567  f6f3				  -	      lda	#%01010000	;Enable DMA, mode=160x2/160x4, 2x character width
   4568  f6f3					      else
   4569  f6f3		       a9 40		      lda	#%01000000	;Enable DMA, mode=160x2/160x4
   4570  f6f5					      endif
   4571  f6f5		       85 3c		      sta	CTRL
   4572  f6f7		       8d 07 21 	      sta	sCTRL
   4573  f6fa
   4574  f6fa		       20 d4 f4 	      jsr	vblankresync
   4575  f6fd
   4576  f6fd		       a9 04		      lda	#%00000100	; leave cartridge plugged in for any testing
   4577  f6ff		       8d b7 01 	      sta	XCTRL1s
   4578  f702
   4579  f702				  -	      ifconst	pokeysupport
   4580  f702				  -			; pokey support is compiled in, so try to detect it...
   4581  f702				  -	      jsr	detectpokeylocation
   4582  f702					      endif
   4583  f702
   4584  f702		       a9 01		      lda	#1	; default for port 0 and 1 is a regular joystick
   4585  f704		       8d e2 01 	      sta	port0control
   4586  f707		       8d e3 01 	      sta	port1control
   4587  f70a
   4588  f70a							;Setup port A to read mode
   4589  f70a							;lda #$00
   4590  f70a							;sta SWCHA
   4591  f70a							;sta CTLSWA
   4592  f70a
   4593  f70a				  -	      ifconst	HSSUPPORT
   4594  f70a				  -			; try to detect HSC
   4595  f70a				  -	      jsr	detecthsc
   4596  f70a				  -	      and	#1
   4597  f70a				  -	      sta	hsdevice
   4598  f70a				  -skipHSCdetect
   4599  f70a				  -			; try to detect AtariVox eeprom
   4600  f70a				  -	      jsr	detectatarivoxeeprom
   4601  f70a				  -	      and	#2
   4602  f70a				  -	      ora	hsdevice
   4603  f70a				  -	      cmp	#3
   4604  f70a				  -	      bne	storeAinhsdevice
   4605  f70a				  -			; For now, we tie break by giving HSC priority over AtariVox.
   4606  f70a				  -			; Later we should check each device's priority byte if set, instead, 
   4607  f70a				  -	      lda	#2
   4608  f70a				  -storeAinhsdevice
   4609  f70a				  -	      sta	hsdevice
   4610  f70a				  -	      lda	#$ff
   4611  f70a				  -	      sta	hsdifficulty
   4612  f70a				  -	      sta	hsgameslot
   4613  f70a				  -	      sta	hsnewscoreline
   4614  f70a					      endif
   4615  f70a
   4616  f70a				  -	      ifconst	AVOXVOICE
   4617  f70a				  -	      jsr	silenceavoxvoice
   4618  f70a					      endif
   4619  f70a
   4620  f70a				  -	      ifconst	SGRAM
   4621  f70a				  -			; check if we actually have SGRAM. If not, probe XM for it...
   4622  f70a				  -	      ldy	#$EA
   4623  f70a				  -	      sty	$4000
   4624  f70a				  -	      ldy	$4000
   4625  f70a				  -	      cpy	#$EA
   4626  f70a				  -	      beq	skipSGRAMcheck
   4627  f70a				  -	      lda	XCTRL1s
   4628  f70a				  -	      ora	#%01100100
   4629  f70a				  -	      sta	XCTRL1
   4630  f70a				  -	      sty	$4000
   4631  f70a				  -	      ldy	$4000
   4632  f70a				  -	      cpy	#$EA
   4633  f70a				  -	      bne	skipSGRAMcheck
   4634  f70a				  -			;if we're here, XM memory satisfied our RAM requirement
   4635  f70a				  -	      sta	XCTRL1s	; save it
   4636  f70a				  -	      lda	#$10
   4637  f70a				  -	      sta	XCTRL2
   4638  f70a				  -	      sta	XCTRL3
   4639  f70a				  -skipSGRAMcheck
   4640  f70a					      endif
   4641  f70a
   4642  f70a				  -	      ifconst	TURNEDOFF
   4643  f70a				  -	      ldx	#1
   4644  f70a				  -	      ldy	#3
   4645  f70a				  -joystickdetectloop
   4646  f70a				  -	      jsr	setonebuttonmode
   4647  f70a				  -			; ensure we're in one-button mode and check for a genesis controller
   4648  f70a				  -	      lda	INPT0,y
   4649  f70a				  -	      and	#$80
   4650  f70a				  -	      sta	genesisdetected0,x
   4651  f70a				  -	      bne	skipsetgenesistwobutton
   4652  f70a				  -skipsetgenesis
   4653  f70a				  -	      jsr	settwobuttonmode
   4654  f70a				  -skipsetgenesistwobutton
   4655  f70a				  -	      dey
   4656  f70a				  -	      dey
   4657  f70a				  -	      dex
   4658  f70a				  -	      bpl	joystickdetectloop
   4659  f70a					      endif
   4660  f70a
   4661  f70a		       a2 01		      ldx	#1
   4662  f70c		       20 47 f6 	      jsr	settwobuttonmode
   4663  f70f		       a2 00		      ldx	#0
   4664  f711		       20 47 f6 	      jsr	settwobuttonmode
   4665  f714
   4666  f714				  -	      ifconst	bankswitchmode
   4667  f714				  -			; we need to switch to the first bank before we jump there!
   4668  f714				  -	      ifconst	MCPDEVCART
   4669  f714				  -	      lda	#$18	; xxx11nnn - switch to bank 0
   4670  f714				  -	      sta	$3000
   4671  f714				  -	      else
   4672  f714				  -	      lda	#0
   4673  f714				  -	      sta	$8000
   4674  f714				  -	      endif
   4675  f714					      endif
   4676  f714
   4677  f714		       4c 13 40 	      jmp	game
   4678  f717
   4679  f717
   4680  f717							; Provided under the CC0 license. See the included LICENSE.txt for details.
   4681  f717
   4682  f717							;************** Setup DLL entries
   4683  f717
   4684  f717							; setup some working definitions, to avoid ifnconst mess elsewhere...
   4685  f717					      ifnconst	SCREENHEIGHT
   4686  f717		       00 c0	   WSCREENHEIGHT =	192
   4687  f717				  -	      else
   4688  f717				  -WSCREENHEIGHT =	SCREENHEIGHT
   4689  f717					      endif
   4690  f717
   4691  f717				  -	      ifnconst	ZONEHEIGHT
   4692  f717				  -WZONEHEIGHT =	16
   4693  f717					      else
   4694  f717		       00 08	   WZONEHEIGHT =	ZONEHEIGHT
   4695  f717					      endif
   4696  f717
   4697  f717					      ifnconst	ZONECOUNT
   4698  f717		       00 18	   WZONECOUNT =	(WSCREENHEIGHT/WZONEHEIGHT)
   4699  f717				  -	      else
   4700  f717				  -WZONECOUNT =	ZONECOUNT
   4701  f717					      endif
   4702  f717
   4703  f717							; top of the frame, non-visible lines. this is based on NTSC,
   4704  f717							; but we add in extra NV lines at the end of the display to ensure
   4705  f717							; our PAL friends can play the game without it crashing.
   4706  f717		       00 19	   NVLINES    =	((243-WSCREENHEIGHT)/2)
   4707  f717
   4708  f717					      ifnconst	DLMEMSTART
   4709  f717				  -	      ifnconst	DOUBLEBUFFER
   4710  f717				  -WDLMEMSTART =	$1880
   4711  f717					      else
   4712  f717		       18 e0	   WDLMEMSTART =	$18E0
   4713  f717					      endif		; DOUBLEBUFFER
   4714  f717				  -	      else
   4715  f717				  -WDLMEMSTART =	DLMEMSTART
   4716  f717					      endif
   4717  f717
   4718  f717					      ifnconst	DLMEMEND
   4719  f717				  -	      ifconst	EXTRADLMEMORY
   4720  f717				  -WDLMEMEND  =	$23FF
   4721  f717					      else
   4722  f717		       1f ff	   WDLMEMEND  =	$1FFF
   4723  f717					      endif
   4724  f717				  -	      else
   4725  f717				  -WDLMEMEND  =	DLMEMEND
   4726  f717					      endif
   4727  f717
   4728  f717
   4729  f717		       07 20	   WMEMSIZE   =	(WDLMEMEND-WDLMEMSTART+1)
   4730  f717
   4731  f717				  -	      ifnconst	DOUBLEBUFFER
   4732  f717				  -DLLASTOBJ  =	((((WMEMSIZE/WZONECOUNT)-2)/5)*5)	; -2 to always ensure we have 1x double-byte terminator
   4733  f717					      else
   4734  f717		       00 23	   DLLASTOBJ  =	((((WMEMSIZE/WZONECOUNT)-4)/10)*5)	; -4 to always ensure we have 2x double-byte terminators
   4735  f717					      endif
   4736  f717
   4737  f717		       00 25	   TDOUBLEBUFFEROFFSET =	(DLLASTOBJ+2)	; offset between DL buffers. ie. half the real DL
   4738  f717				  -	      if	TDOUBLEBUFFEROFFSET > 255
   4739  f717				  -DOUBLEBUFFEROFFSET =	255
   4740  f717					      else
   4741  f717		       00 25	   DOUBLEBUFFEROFFSET =	(DLLASTOBJ+2)
   4742  f717					      endif
   4743  f717
   4744  f717				  -	      ifconst	EXTRADLMEMORY
   4745  f717				  -SECONDDLHALFSTART SET	$2300
   4746  f717					      endif
   4747  f717
   4748  f717				   DLPOINTH
   4749  f717				   DLINDEX    SET	0
   4750  f717					      REPEAT	WZONECOUNT
   4751  f717				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4752  f717				  -	      ifconst	EXTRADLMEMORY
   4753  f717				  -	      if	TMPMEMADDRESS > $1FFF
   4754  f717				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4755  f717				  -	      else
   4756  f717				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4757  f717				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4758  f717				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   4759  f717				  -	      endif
   4760  f717				  -	      endif		; TMPMEMADDRESS > $1FFF
   4761  f717					      endif		; EXTRADLMEMORY
   4762  f717							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   4763  f717		       18		      .byte.b	>TMPMEMADDRESS
   4764  f717				   DLINDEX    SET	DLINDEX + 1
   4750  f717					      REPEND
   4751  f717				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4752  f718				  -	      ifconst	EXTRADLMEMORY
   4753  f718				  -	      if	TMPMEMADDRESS > $1FFF
   4754  f718				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4755  f718				  -	      else
   4756  f718				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4757  f718				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4758  f718				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   4759  f718				  -	      endif
   4760  f718				  -	      endif		; TMPMEMADDRESS > $1FFF
   4761  f718					      endif		; EXTRADLMEMORY
   4762  f718							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   4763  f718		       19		      .byte.b	>TMPMEMADDRESS
   4764  f718				   DLINDEX    SET	DLINDEX + 1
   4750  f718					      REPEND
   4751  f718				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4752  f719				  -	      ifconst	EXTRADLMEMORY
   4753  f719				  -	      if	TMPMEMADDRESS > $1FFF
   4754  f719				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4755  f719				  -	      else
   4756  f719				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4757  f719				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4758  f719				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   4759  f719				  -	      endif
   4760  f719				  -	      endif		; TMPMEMADDRESS > $1FFF
   4761  f719					      endif		; EXTRADLMEMORY
   4762  f719							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   4763  f719		       19		      .byte.b	>TMPMEMADDRESS
   4764  f719				   DLINDEX    SET	DLINDEX + 1
   4750  f719					      REPEND
   4751  f719				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4752  f71a				  -	      ifconst	EXTRADLMEMORY
   4753  f71a				  -	      if	TMPMEMADDRESS > $1FFF
   4754  f71a				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4755  f71a				  -	      else
   4756  f71a				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4757  f71a				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4758  f71a				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   4759  f71a				  -	      endif
   4760  f71a				  -	      endif		; TMPMEMADDRESS > $1FFF
   4761  f71a					      endif		; EXTRADLMEMORY
   4762  f71a							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   4763  f71a		       19		      .byte.b	>TMPMEMADDRESS
   4764  f71a				   DLINDEX    SET	DLINDEX + 1
   4750  f71a					      REPEND
   4751  f71a				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4752  f71b				  -	      ifconst	EXTRADLMEMORY
   4753  f71b				  -	      if	TMPMEMADDRESS > $1FFF
   4754  f71b				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4755  f71b				  -	      else
   4756  f71b				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4757  f71b				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4758  f71b				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   4759  f71b				  -	      endif
   4760  f71b				  -	      endif		; TMPMEMADDRESS > $1FFF
   4761  f71b					      endif		; EXTRADLMEMORY
   4762  f71b							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   4763  f71b		       1a		      .byte.b	>TMPMEMADDRESS
   4764  f71b				   DLINDEX    SET	DLINDEX + 1
   4750  f71b					      REPEND
   4751  f71b				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4752  f71c				  -	      ifconst	EXTRADLMEMORY
   4753  f71c				  -	      if	TMPMEMADDRESS > $1FFF
   4754  f71c				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4755  f71c				  -	      else
   4756  f71c				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4757  f71c				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4758  f71c				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   4759  f71c				  -	      endif
   4760  f71c				  -	      endif		; TMPMEMADDRESS > $1FFF
   4761  f71c					      endif		; EXTRADLMEMORY
   4762  f71c							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   4763  f71c		       1a		      .byte.b	>TMPMEMADDRESS
   4764  f71c				   DLINDEX    SET	DLINDEX + 1
   4750  f71c					      REPEND
   4751  f71c				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4752  f71d				  -	      ifconst	EXTRADLMEMORY
   4753  f71d				  -	      if	TMPMEMADDRESS > $1FFF
   4754  f71d				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4755  f71d				  -	      else
   4756  f71d				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4757  f71d				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4758  f71d				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   4759  f71d				  -	      endif
   4760  f71d				  -	      endif		; TMPMEMADDRESS > $1FFF
   4761  f71d					      endif		; EXTRADLMEMORY
   4762  f71d							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   4763  f71d		       1a		      .byte.b	>TMPMEMADDRESS
   4764  f71d				   DLINDEX    SET	DLINDEX + 1
   4750  f71d					      REPEND
   4751  f71d				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4752  f71e				  -	      ifconst	EXTRADLMEMORY
   4753  f71e				  -	      if	TMPMEMADDRESS > $1FFF
   4754  f71e				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4755  f71e				  -	      else
   4756  f71e				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4757  f71e				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4758  f71e				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   4759  f71e				  -	      endif
   4760  f71e				  -	      endif		; TMPMEMADDRESS > $1FFF
   4761  f71e					      endif		; EXTRADLMEMORY
   4762  f71e							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   4763  f71e		       1a		      .byte.b	>TMPMEMADDRESS
   4764  f71e				   DLINDEX    SET	DLINDEX + 1
   4750  f71e					      REPEND
   4751  f71e				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4752  f71f				  -	      ifconst	EXTRADLMEMORY
   4753  f71f				  -	      if	TMPMEMADDRESS > $1FFF
   4754  f71f				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4755  f71f				  -	      else
   4756  f71f				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4757  f71f				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4758  f71f				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   4759  f71f				  -	      endif
   4760  f71f				  -	      endif		; TMPMEMADDRESS > $1FFF
   4761  f71f					      endif		; EXTRADLMEMORY
   4762  f71f							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   4763  f71f		       1b		      .byte.b	>TMPMEMADDRESS
   4764  f71f				   DLINDEX    SET	DLINDEX + 1
   4750  f71f					      REPEND
   4751  f71f				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4752  f720				  -	      ifconst	EXTRADLMEMORY
   4753  f720				  -	      if	TMPMEMADDRESS > $1FFF
   4754  f720				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4755  f720				  -	      else
   4756  f720				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4757  f720				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4758  f720				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   4759  f720				  -	      endif
   4760  f720				  -	      endif		; TMPMEMADDRESS > $1FFF
   4761  f720					      endif		; EXTRADLMEMORY
   4762  f720							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   4763  f720		       1b		      .byte.b	>TMPMEMADDRESS
   4764  f720				   DLINDEX    SET	DLINDEX + 1
   4750  f720					      REPEND
   4751  f720				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4752  f721				  -	      ifconst	EXTRADLMEMORY
   4753  f721				  -	      if	TMPMEMADDRESS > $1FFF
   4754  f721				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4755  f721				  -	      else
   4756  f721				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4757  f721				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4758  f721				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   4759  f721				  -	      endif
   4760  f721				  -	      endif		; TMPMEMADDRESS > $1FFF
   4761  f721					      endif		; EXTRADLMEMORY
   4762  f721							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   4763  f721		       1b		      .byte.b	>TMPMEMADDRESS
   4764  f721				   DLINDEX    SET	DLINDEX + 1
   4750  f721					      REPEND
   4751  f721				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4752  f722				  -	      ifconst	EXTRADLMEMORY
   4753  f722				  -	      if	TMPMEMADDRESS > $1FFF
   4754  f722				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4755  f722				  -	      else
   4756  f722				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4757  f722				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4758  f722				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   4759  f722				  -	      endif
   4760  f722				  -	      endif		; TMPMEMADDRESS > $1FFF
   4761  f722					      endif		; EXTRADLMEMORY
   4762  f722							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   4763  f722		       1c		      .byte.b	>TMPMEMADDRESS
   4764  f722				   DLINDEX    SET	DLINDEX + 1
   4750  f722					      REPEND
   4751  f722				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4752  f723				  -	      ifconst	EXTRADLMEMORY
   4753  f723				  -	      if	TMPMEMADDRESS > $1FFF
   4754  f723				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4755  f723				  -	      else
   4756  f723				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4757  f723				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4758  f723				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   4759  f723				  -	      endif
   4760  f723				  -	      endif		; TMPMEMADDRESS > $1FFF
   4761  f723					      endif		; EXTRADLMEMORY
   4762  f723							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   4763  f723		       1c		      .byte.b	>TMPMEMADDRESS
   4764  f723				   DLINDEX    SET	DLINDEX + 1
   4750  f723					      REPEND
   4751  f723				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4752  f724				  -	      ifconst	EXTRADLMEMORY
   4753  f724				  -	      if	TMPMEMADDRESS > $1FFF
   4754  f724				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4755  f724				  -	      else
   4756  f724				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4757  f724				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4758  f724				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   4759  f724				  -	      endif
   4760  f724				  -	      endif		; TMPMEMADDRESS > $1FFF
   4761  f724					      endif		; EXTRADLMEMORY
   4762  f724							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   4763  f724		       1c		      .byte.b	>TMPMEMADDRESS
   4764  f724				   DLINDEX    SET	DLINDEX + 1
   4750  f724					      REPEND
   4751  f724				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4752  f725				  -	      ifconst	EXTRADLMEMORY
   4753  f725				  -	      if	TMPMEMADDRESS > $1FFF
   4754  f725				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4755  f725				  -	      else
   4756  f725				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4757  f725				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4758  f725				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   4759  f725				  -	      endif
   4760  f725				  -	      endif		; TMPMEMADDRESS > $1FFF
   4761  f725					      endif		; EXTRADLMEMORY
   4762  f725							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   4763  f725		       1d		      .byte.b	>TMPMEMADDRESS
   4764  f725				   DLINDEX    SET	DLINDEX + 1
   4750  f725					      REPEND
   4751  f725				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4752  f726				  -	      ifconst	EXTRADLMEMORY
   4753  f726				  -	      if	TMPMEMADDRESS > $1FFF
   4754  f726				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4755  f726				  -	      else
   4756  f726				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4757  f726				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4758  f726				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   4759  f726				  -	      endif
   4760  f726				  -	      endif		; TMPMEMADDRESS > $1FFF
   4761  f726					      endif		; EXTRADLMEMORY
   4762  f726							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   4763  f726		       1d		      .byte.b	>TMPMEMADDRESS
   4764  f726				   DLINDEX    SET	DLINDEX + 1
   4750  f726					      REPEND
   4751  f726				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4752  f727				  -	      ifconst	EXTRADLMEMORY
   4753  f727				  -	      if	TMPMEMADDRESS > $1FFF
   4754  f727				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4755  f727				  -	      else
   4756  f727				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4757  f727				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4758  f727				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   4759  f727				  -	      endif
   4760  f727				  -	      endif		; TMPMEMADDRESS > $1FFF
   4761  f727					      endif		; EXTRADLMEMORY
   4762  f727							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   4763  f727		       1d		      .byte.b	>TMPMEMADDRESS
   4764  f727				   DLINDEX    SET	DLINDEX + 1
   4750  f727					      REPEND
   4751  f727				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4752  f728				  -	      ifconst	EXTRADLMEMORY
   4753  f728				  -	      if	TMPMEMADDRESS > $1FFF
   4754  f728				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4755  f728				  -	      else
   4756  f728				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4757  f728				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4758  f728				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   4759  f728				  -	      endif
   4760  f728				  -	      endif		; TMPMEMADDRESS > $1FFF
   4761  f728					      endif		; EXTRADLMEMORY
   4762  f728							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   4763  f728		       1d		      .byte.b	>TMPMEMADDRESS
   4764  f728				   DLINDEX    SET	DLINDEX + 1
   4750  f728					      REPEND
   4751  f728				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4752  f729				  -	      ifconst	EXTRADLMEMORY
   4753  f729				  -	      if	TMPMEMADDRESS > $1FFF
   4754  f729				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4755  f729				  -	      else
   4756  f729				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4757  f729				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4758  f729				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   4759  f729				  -	      endif
   4760  f729				  -	      endif		; TMPMEMADDRESS > $1FFF
   4761  f729					      endif		; EXTRADLMEMORY
   4762  f729							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   4763  f729		       1e		      .byte.b	>TMPMEMADDRESS
   4764  f729				   DLINDEX    SET	DLINDEX + 1
   4750  f729					      REPEND
   4751  f729				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4752  f72a				  -	      ifconst	EXTRADLMEMORY
   4753  f72a				  -	      if	TMPMEMADDRESS > $1FFF
   4754  f72a				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4755  f72a				  -	      else
   4756  f72a				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4757  f72a				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4758  f72a				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   4759  f72a				  -	      endif
   4760  f72a				  -	      endif		; TMPMEMADDRESS > $1FFF
   4761  f72a					      endif		; EXTRADLMEMORY
   4762  f72a							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   4763  f72a		       1e		      .byte.b	>TMPMEMADDRESS
   4764  f72a				   DLINDEX    SET	DLINDEX + 1
   4750  f72a					      REPEND
   4751  f72a				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4752  f72b				  -	      ifconst	EXTRADLMEMORY
   4753  f72b				  -	      if	TMPMEMADDRESS > $1FFF
   4754  f72b				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4755  f72b				  -	      else
   4756  f72b				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4757  f72b				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4758  f72b				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   4759  f72b				  -	      endif
   4760  f72b				  -	      endif		; TMPMEMADDRESS > $1FFF
   4761  f72b					      endif		; EXTRADLMEMORY
   4762  f72b							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   4763  f72b		       1e		      .byte.b	>TMPMEMADDRESS
   4764  f72b				   DLINDEX    SET	DLINDEX + 1
   4750  f72b					      REPEND
   4751  f72b				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4752  f72c				  -	      ifconst	EXTRADLMEMORY
   4753  f72c				  -	      if	TMPMEMADDRESS > $1FFF
   4754  f72c				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4755  f72c				  -	      else
   4756  f72c				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4757  f72c				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4758  f72c				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   4759  f72c				  -	      endif
   4760  f72c				  -	      endif		; TMPMEMADDRESS > $1FFF
   4761  f72c					      endif		; EXTRADLMEMORY
   4762  f72c							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   4763  f72c		       1f		      .byte.b	>TMPMEMADDRESS
   4764  f72c				   DLINDEX    SET	DLINDEX + 1
   4750  f72c					      REPEND
   4751  f72c				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4752  f72d				  -	      ifconst	EXTRADLMEMORY
   4753  f72d				  -	      if	TMPMEMADDRESS > $1FFF
   4754  f72d				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4755  f72d				  -	      else
   4756  f72d				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4757  f72d				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4758  f72d				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   4759  f72d				  -	      endif
   4760  f72d				  -	      endif		; TMPMEMADDRESS > $1FFF
   4761  f72d					      endif		; EXTRADLMEMORY
   4762  f72d							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   4763  f72d		       1f		      .byte.b	>TMPMEMADDRESS
   4764  f72d				   DLINDEX    SET	DLINDEX + 1
   4750  f72d					      REPEND
   4751  f72d				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4752  f72e				  -	      ifconst	EXTRADLMEMORY
   4753  f72e				  -	      if	TMPMEMADDRESS > $1FFF
   4754  f72e				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4755  f72e				  -	      else
   4756  f72e				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4757  f72e				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4758  f72e				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   4759  f72e				  -	      endif
   4760  f72e				  -	      endif		; TMPMEMADDRESS > $1FFF
   4761  f72e					      endif		; EXTRADLMEMORY
   4762  f72e							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   4763  f72e		       1f		      .byte.b	>TMPMEMADDRESS
   4764  f72e				   DLINDEX    SET	DLINDEX + 1
   4765  f72f					      REPEND
   4766  f72f
   4767  f72f				  -	      ifconst	EXTRADLMEMORY
   4768  f72f				  -	      echo	"   ",[SECONDDLHALFSTART],"to",[$27FF],"was claimed as extra DL memory."
   4769  f72f					      endif
   4770  f72f
   4771  f72f
   4772  f72f				   DLPOINTL
   4773  f72f				   DLINDEX    SET	0
   4774  f72f					      REPEAT	WZONECOUNT
   4775  f72f				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4776  f72f				  -	      ifconst	EXTRADLMEMORY
   4777  f72f				  -	      if	TMPMEMADDRESS > $1FFF
   4778  f72f				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4779  f72f				  -	      else
   4780  f72f				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4781  f72f				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4782  f72f				  -	      endif
   4783  f72f				  -	      endif		; TMPMEMADDRESS > $1FFF
   4784  f72f					      endif		; EXTRADLMEMORY
   4785  f72f		       e0		      .byte.b	<TMPMEMADDRESS
   4786  f72f				   DLINDEX    SET	DLINDEX + 1
   4774  f72f					      REPEND
   4775  f72f				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4776  f730				  -	      ifconst	EXTRADLMEMORY
   4777  f730				  -	      if	TMPMEMADDRESS > $1FFF
   4778  f730				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4779  f730				  -	      else
   4780  f730				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4781  f730				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4782  f730				  -	      endif
   4783  f730				  -	      endif		; TMPMEMADDRESS > $1FFF
   4784  f730					      endif		; EXTRADLMEMORY
   4785  f730		       2c		      .byte.b	<TMPMEMADDRESS
   4786  f730				   DLINDEX    SET	DLINDEX + 1
   4774  f730					      REPEND
   4775  f730				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4776  f731				  -	      ifconst	EXTRADLMEMORY
   4777  f731				  -	      if	TMPMEMADDRESS > $1FFF
   4778  f731				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4779  f731				  -	      else
   4780  f731				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4781  f731				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4782  f731				  -	      endif
   4783  f731				  -	      endif		; TMPMEMADDRESS > $1FFF
   4784  f731					      endif		; EXTRADLMEMORY
   4785  f731		       78		      .byte.b	<TMPMEMADDRESS
   4786  f731				   DLINDEX    SET	DLINDEX + 1
   4774  f731					      REPEND
   4775  f731				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4776  f732				  -	      ifconst	EXTRADLMEMORY
   4777  f732				  -	      if	TMPMEMADDRESS > $1FFF
   4778  f732				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4779  f732				  -	      else
   4780  f732				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4781  f732				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4782  f732				  -	      endif
   4783  f732				  -	      endif		; TMPMEMADDRESS > $1FFF
   4784  f732					      endif		; EXTRADLMEMORY
   4785  f732		       c4		      .byte.b	<TMPMEMADDRESS
   4786  f732				   DLINDEX    SET	DLINDEX + 1
   4774  f732					      REPEND
   4775  f732				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4776  f733				  -	      ifconst	EXTRADLMEMORY
   4777  f733				  -	      if	TMPMEMADDRESS > $1FFF
   4778  f733				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4779  f733				  -	      else
   4780  f733				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4781  f733				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4782  f733				  -	      endif
   4783  f733				  -	      endif		; TMPMEMADDRESS > $1FFF
   4784  f733					      endif		; EXTRADLMEMORY
   4785  f733		       10		      .byte.b	<TMPMEMADDRESS
   4786  f733				   DLINDEX    SET	DLINDEX + 1
   4774  f733					      REPEND
   4775  f733				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4776  f734				  -	      ifconst	EXTRADLMEMORY
   4777  f734				  -	      if	TMPMEMADDRESS > $1FFF
   4778  f734				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4779  f734				  -	      else
   4780  f734				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4781  f734				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4782  f734				  -	      endif
   4783  f734				  -	      endif		; TMPMEMADDRESS > $1FFF
   4784  f734					      endif		; EXTRADLMEMORY
   4785  f734		       5c		      .byte.b	<TMPMEMADDRESS
   4786  f734				   DLINDEX    SET	DLINDEX + 1
   4774  f734					      REPEND
   4775  f734				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4776  f735				  -	      ifconst	EXTRADLMEMORY
   4777  f735				  -	      if	TMPMEMADDRESS > $1FFF
   4778  f735				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4779  f735				  -	      else
   4780  f735				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4781  f735				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4782  f735				  -	      endif
   4783  f735				  -	      endif		; TMPMEMADDRESS > $1FFF
   4784  f735					      endif		; EXTRADLMEMORY
   4785  f735		       a8		      .byte.b	<TMPMEMADDRESS
   4786  f735				   DLINDEX    SET	DLINDEX + 1
   4774  f735					      REPEND
   4775  f735				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4776  f736				  -	      ifconst	EXTRADLMEMORY
   4777  f736				  -	      if	TMPMEMADDRESS > $1FFF
   4778  f736				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4779  f736				  -	      else
   4780  f736				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4781  f736				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4782  f736				  -	      endif
   4783  f736				  -	      endif		; TMPMEMADDRESS > $1FFF
   4784  f736					      endif		; EXTRADLMEMORY
   4785  f736		       f4		      .byte.b	<TMPMEMADDRESS
   4786  f736				   DLINDEX    SET	DLINDEX + 1
   4774  f736					      REPEND
   4775  f736				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4776  f737				  -	      ifconst	EXTRADLMEMORY
   4777  f737				  -	      if	TMPMEMADDRESS > $1FFF
   4778  f737				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4779  f737				  -	      else
   4780  f737				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4781  f737				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4782  f737				  -	      endif
   4783  f737				  -	      endif		; TMPMEMADDRESS > $1FFF
   4784  f737					      endif		; EXTRADLMEMORY
   4785  f737		       40		      .byte.b	<TMPMEMADDRESS
   4786  f737				   DLINDEX    SET	DLINDEX + 1
   4774  f737					      REPEND
   4775  f737				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4776  f738				  -	      ifconst	EXTRADLMEMORY
   4777  f738				  -	      if	TMPMEMADDRESS > $1FFF
   4778  f738				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4779  f738				  -	      else
   4780  f738				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4781  f738				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4782  f738				  -	      endif
   4783  f738				  -	      endif		; TMPMEMADDRESS > $1FFF
   4784  f738					      endif		; EXTRADLMEMORY
   4785  f738		       8c		      .byte.b	<TMPMEMADDRESS
   4786  f738				   DLINDEX    SET	DLINDEX + 1
   4774  f738					      REPEND
   4775  f738				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4776  f739				  -	      ifconst	EXTRADLMEMORY
   4777  f739				  -	      if	TMPMEMADDRESS > $1FFF
   4778  f739				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4779  f739				  -	      else
   4780  f739				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4781  f739				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4782  f739				  -	      endif
   4783  f739				  -	      endif		; TMPMEMADDRESS > $1FFF
   4784  f739					      endif		; EXTRADLMEMORY
   4785  f739		       d8		      .byte.b	<TMPMEMADDRESS
   4786  f739				   DLINDEX    SET	DLINDEX + 1
   4774  f739					      REPEND
   4775  f739				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4776  f73a				  -	      ifconst	EXTRADLMEMORY
   4777  f73a				  -	      if	TMPMEMADDRESS > $1FFF
   4778  f73a				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4779  f73a				  -	      else
   4780  f73a				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4781  f73a				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4782  f73a				  -	      endif
   4783  f73a				  -	      endif		; TMPMEMADDRESS > $1FFF
   4784  f73a					      endif		; EXTRADLMEMORY
   4785  f73a		       24		      .byte.b	<TMPMEMADDRESS
   4786  f73a				   DLINDEX    SET	DLINDEX + 1
   4774  f73a					      REPEND
   4775  f73a				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4776  f73b				  -	      ifconst	EXTRADLMEMORY
   4777  f73b				  -	      if	TMPMEMADDRESS > $1FFF
   4778  f73b				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4779  f73b				  -	      else
   4780  f73b				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4781  f73b				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4782  f73b				  -	      endif
   4783  f73b				  -	      endif		; TMPMEMADDRESS > $1FFF
   4784  f73b					      endif		; EXTRADLMEMORY
   4785  f73b		       70		      .byte.b	<TMPMEMADDRESS
   4786  f73b				   DLINDEX    SET	DLINDEX + 1
   4774  f73b					      REPEND
   4775  f73b				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4776  f73c				  -	      ifconst	EXTRADLMEMORY
   4777  f73c				  -	      if	TMPMEMADDRESS > $1FFF
   4778  f73c				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4779  f73c				  -	      else
   4780  f73c				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4781  f73c				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4782  f73c				  -	      endif
   4783  f73c				  -	      endif		; TMPMEMADDRESS > $1FFF
   4784  f73c					      endif		; EXTRADLMEMORY
   4785  f73c		       bc		      .byte.b	<TMPMEMADDRESS
   4786  f73c				   DLINDEX    SET	DLINDEX + 1
   4774  f73c					      REPEND
   4775  f73c				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4776  f73d				  -	      ifconst	EXTRADLMEMORY
   4777  f73d				  -	      if	TMPMEMADDRESS > $1FFF
   4778  f73d				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4779  f73d				  -	      else
   4780  f73d				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4781  f73d				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4782  f73d				  -	      endif
   4783  f73d				  -	      endif		; TMPMEMADDRESS > $1FFF
   4784  f73d					      endif		; EXTRADLMEMORY
   4785  f73d		       08		      .byte.b	<TMPMEMADDRESS
   4786  f73d				   DLINDEX    SET	DLINDEX + 1
   4774  f73d					      REPEND
   4775  f73d				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4776  f73e				  -	      ifconst	EXTRADLMEMORY
   4777  f73e				  -	      if	TMPMEMADDRESS > $1FFF
   4778  f73e				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4779  f73e				  -	      else
   4780  f73e				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4781  f73e				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4782  f73e				  -	      endif
   4783  f73e				  -	      endif		; TMPMEMADDRESS > $1FFF
   4784  f73e					      endif		; EXTRADLMEMORY
   4785  f73e		       54		      .byte.b	<TMPMEMADDRESS
   4786  f73e				   DLINDEX    SET	DLINDEX + 1
   4774  f73e					      REPEND
   4775  f73e				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4776  f73f				  -	      ifconst	EXTRADLMEMORY
   4777  f73f				  -	      if	TMPMEMADDRESS > $1FFF
   4778  f73f				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4779  f73f				  -	      else
   4780  f73f				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4781  f73f				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4782  f73f				  -	      endif
   4783  f73f				  -	      endif		; TMPMEMADDRESS > $1FFF
   4784  f73f					      endif		; EXTRADLMEMORY
   4785  f73f		       a0		      .byte.b	<TMPMEMADDRESS
   4786  f73f				   DLINDEX    SET	DLINDEX + 1
   4774  f73f					      REPEND
   4775  f73f				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4776  f740				  -	      ifconst	EXTRADLMEMORY
   4777  f740				  -	      if	TMPMEMADDRESS > $1FFF
   4778  f740				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4779  f740				  -	      else
   4780  f740				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4781  f740				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4782  f740				  -	      endif
   4783  f740				  -	      endif		; TMPMEMADDRESS > $1FFF
   4784  f740					      endif		; EXTRADLMEMORY
   4785  f740		       ec		      .byte.b	<TMPMEMADDRESS
   4786  f740				   DLINDEX    SET	DLINDEX + 1
   4774  f740					      REPEND
   4775  f740				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4776  f741				  -	      ifconst	EXTRADLMEMORY
   4777  f741				  -	      if	TMPMEMADDRESS > $1FFF
   4778  f741				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4779  f741				  -	      else
   4780  f741				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4781  f741				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4782  f741				  -	      endif
   4783  f741				  -	      endif		; TMPMEMADDRESS > $1FFF
   4784  f741					      endif		; EXTRADLMEMORY
   4785  f741		       38		      .byte.b	<TMPMEMADDRESS
   4786  f741				   DLINDEX    SET	DLINDEX + 1
   4774  f741					      REPEND
   4775  f741				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4776  f742				  -	      ifconst	EXTRADLMEMORY
   4777  f742				  -	      if	TMPMEMADDRESS > $1FFF
   4778  f742				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4779  f742				  -	      else
   4780  f742				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4781  f742				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4782  f742				  -	      endif
   4783  f742				  -	      endif		; TMPMEMADDRESS > $1FFF
   4784  f742					      endif		; EXTRADLMEMORY
   4785  f742		       84		      .byte.b	<TMPMEMADDRESS
   4786  f742				   DLINDEX    SET	DLINDEX + 1
   4774  f742					      REPEND
   4775  f742				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4776  f743				  -	      ifconst	EXTRADLMEMORY
   4777  f743				  -	      if	TMPMEMADDRESS > $1FFF
   4778  f743				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4779  f743				  -	      else
   4780  f743				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4781  f743				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4782  f743				  -	      endif
   4783  f743				  -	      endif		; TMPMEMADDRESS > $1FFF
   4784  f743					      endif		; EXTRADLMEMORY
   4785  f743		       d0		      .byte.b	<TMPMEMADDRESS
   4786  f743				   DLINDEX    SET	DLINDEX + 1
   4774  f743					      REPEND
   4775  f743				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4776  f744				  -	      ifconst	EXTRADLMEMORY
   4777  f744				  -	      if	TMPMEMADDRESS > $1FFF
   4778  f744				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4779  f744				  -	      else
   4780  f744				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4781  f744				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4782  f744				  -	      endif
   4783  f744				  -	      endif		; TMPMEMADDRESS > $1FFF
   4784  f744					      endif		; EXTRADLMEMORY
   4785  f744		       1c		      .byte.b	<TMPMEMADDRESS
   4786  f744				   DLINDEX    SET	DLINDEX + 1
   4774  f744					      REPEND
   4775  f744				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4776  f745				  -	      ifconst	EXTRADLMEMORY
   4777  f745				  -	      if	TMPMEMADDRESS > $1FFF
   4778  f745				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4779  f745				  -	      else
   4780  f745				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4781  f745				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4782  f745				  -	      endif
   4783  f745				  -	      endif		; TMPMEMADDRESS > $1FFF
   4784  f745					      endif		; EXTRADLMEMORY
   4785  f745		       68		      .byte.b	<TMPMEMADDRESS
   4786  f745				   DLINDEX    SET	DLINDEX + 1
   4774  f745					      REPEND
   4775  f745				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4776  f746				  -	      ifconst	EXTRADLMEMORY
   4777  f746				  -	      if	TMPMEMADDRESS > $1FFF
   4778  f746				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4779  f746				  -	      else
   4780  f746				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4781  f746				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4782  f746				  -	      endif
   4783  f746				  -	      endif		; TMPMEMADDRESS > $1FFF
   4784  f746					      endif		; EXTRADLMEMORY
   4785  f746		       b4		      .byte.b	<TMPMEMADDRESS
   4786  f746				   DLINDEX    SET	DLINDEX + 1
   4787  f747					      REPEND
   4788  f747
   4789  f747
   4790  f747				   DLINDEX    SET	0
   4791  f747					      REPEAT	WZONECOUNT
   4792  f747				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4793  f747				  -	      ifconst	EXTRADLMEMORY
   4794  f747				  -	      if	TMPMEMADDRESS > $1FFF
   4795  f747				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4796  f747				  -	      else
   4797  f747				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4798  f747				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4799  f747				  -	      endif
   4800  f747				  -	      endif		; TMPMEMADDRESS > $1FFF
   4801  f747					      endif		; EXTRADLMEMORY
   4802  f747					      if	DLINDEX = 0
   4803  f747		       18 e0	   ZONE0ADDRESS =	TMPMEMADDRESS
   4804  f747					      endif
   4805  f747				  -	      if	DLINDEX = 1
   4806  f747				  -ZONE1ADDRESS =	TMPMEMADDRESS
   4807  f747					      endif
   4808  f747				  -	      if	DLINDEX = 2
   4809  f747				  -ZONE2ADDRESS =	TMPMEMADDRESS
   4810  f747					      endif
   4811  f747				  -	      if	DLINDEX = 3
   4812  f747				  -ZONE3ADDRESS =	TMPMEMADDRESS
   4813  f747					      endif
   4814  f747				  -	      if	DLINDEX = 4
   4815  f747				  -ZONE4ADDRESS =	TMPMEMADDRESS
   4816  f747					      endif
   4817  f747				  -	      if	DLINDEX = 5
   4818  f747				  -ZONE5ADDRESS =	TMPMEMADDRESS
   4819  f747					      endif
   4820  f747				  -	      if	DLINDEX = 6
   4821  f747				  -ZONE6ADDRESS =	TMPMEMADDRESS
   4822  f747					      endif
   4823  f747				  -	      if	DLINDEX = 7
   4824  f747				  -ZONE7ADDRESS =	TMPMEMADDRESS
   4825  f747					      endif
   4826  f747				  -	      if	DLINDEX = 8
   4827  f747				  -ZONE8ADDRESS =	TMPMEMADDRESS
   4828  f747					      endif
   4829  f747				  -	      if	DLINDEX = 9
   4830  f747				  -ZONE9ADDRESS =	TMPMEMADDRESS
   4831  f747					      endif
   4832  f747				  -	      if	DLINDEX = 10
   4833  f747				  -ZONE10ADDRESS =	TMPMEMADDRESS
   4834  f747					      endif
   4835  f747				  -	      if	DLINDEX = 11
   4836  f747				  -ZONE11ADDRESS =	TMPMEMADDRESS
   4837  f747					      endif
   4838  f747				  -	      if	DLINDEX = 12
   4839  f747				  -ZONE12ADDRESS =	TMPMEMADDRESS
   4840  f747					      endif
   4841  f747				  -	      if	DLINDEX = 13
   4842  f747				  -ZONE13ADDRESS =	TMPMEMADDRESS
   4843  f747					      endif
   4844  f747				  -	      if	DLINDEX = 14
   4845  f747				  -ZONE14ADDRESS =	TMPMEMADDRESS
   4846  f747					      endif
   4847  f747				  -	      if	DLINDEX = 15
   4848  f747				  -ZONE15ADDRESS =	TMPMEMADDRESS
   4849  f747					      endif
   4850  f747				  -	      if	DLINDEX = 16
   4851  f747				  -ZONE16ADDRESS =	TMPMEMADDRESS
   4852  f747					      endif
   4853  f747				  -	      if	DLINDEX = 17
   4854  f747				  -ZONE17ADDRESS =	TMPMEMADDRESS
   4855  f747					      endif
   4856  f747				  -	      if	DLINDEX = 18
   4857  f747				  -ZONE18ADDRESS =	TMPMEMADDRESS
   4858  f747					      endif
   4859  f747				  -	      if	DLINDEX = 19
   4860  f747				  -ZONE19ADDRESS =	TMPMEMADDRESS
   4861  f747					      endif
   4862  f747				  -	      if	DLINDEX = 20
   4863  f747				  -ZONE20ADDRESS =	TMPMEMADDRESS
   4864  f747					      endif
   4865  f747				  -	      if	DLINDEX = 21
   4866  f747				  -ZONE21ADDRESS =	TMPMEMADDRESS
   4867  f747					      endif
   4868  f747				  -	      if	DLINDEX = 22
   4869  f747				  -ZONE22ADDRESS =	TMPMEMADDRESS
   4870  f747					      endif
   4871  f747				  -	      if	DLINDEX = 23
   4872  f747				  -ZONE23ADDRESS =	TMPMEMADDRESS
   4873  f747					      endif
   4874  f747				  -	      if	DLINDEX = 24
   4875  f747				  -ZONE24ADDRESS =	TMPMEMADDRESS
   4876  f747					      endif
   4877  f747				  -	      if	DLINDEX = 25
   4878  f747				  -ZONE25ADDRESS =	TMPMEMADDRESS
   4879  f747					      endif
   4880  f747				  -	      if	DLINDEX = 26
   4881  f747				  -ZONE26ADDRESS =	TMPMEMADDRESS
   4882  f747					      endif
   4883  f747				  -	      if	DLINDEX = 27
   4884  f747				  -ZONE27ADDRESS =	TMPMEMADDRESS
   4885  f747					      endif
   4886  f747				   DLINDEX    SET	DLINDEX + 1
   4791  f747					      REPEND
   4792  f747				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4793  f747				  -	      ifconst	EXTRADLMEMORY
   4794  f747				  -	      if	TMPMEMADDRESS > $1FFF
   4795  f747				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4796  f747				  -	      else
   4797  f747				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4798  f747				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4799  f747				  -	      endif
   4800  f747				  -	      endif		; TMPMEMADDRESS > $1FFF
   4801  f747					      endif		; EXTRADLMEMORY
   4802  f747				  -	      if	DLINDEX = 0
   4803  f747				  -ZONE0ADDRESS =	TMPMEMADDRESS
   4804  f747					      endif
   4805  f747					      if	DLINDEX = 1
   4806  f747		       19 2c	   ZONE1ADDRESS =	TMPMEMADDRESS
   4807  f747					      endif
   4808  f747				  -	      if	DLINDEX = 2
   4809  f747				  -ZONE2ADDRESS =	TMPMEMADDRESS
   4810  f747					      endif
   4811  f747				  -	      if	DLINDEX = 3
   4812  f747				  -ZONE3ADDRESS =	TMPMEMADDRESS
   4813  f747					      endif
   4814  f747				  -	      if	DLINDEX = 4
   4815  f747				  -ZONE4ADDRESS =	TMPMEMADDRESS
   4816  f747					      endif
   4817  f747				  -	      if	DLINDEX = 5
   4818  f747				  -ZONE5ADDRESS =	TMPMEMADDRESS
   4819  f747					      endif
   4820  f747				  -	      if	DLINDEX = 6
   4821  f747				  -ZONE6ADDRESS =	TMPMEMADDRESS
   4822  f747					      endif
   4823  f747				  -	      if	DLINDEX = 7
   4824  f747				  -ZONE7ADDRESS =	TMPMEMADDRESS
   4825  f747					      endif
   4826  f747				  -	      if	DLINDEX = 8
   4827  f747				  -ZONE8ADDRESS =	TMPMEMADDRESS
   4828  f747					      endif
   4829  f747				  -	      if	DLINDEX = 9
   4830  f747				  -ZONE9ADDRESS =	TMPMEMADDRESS
   4831  f747					      endif
   4832  f747				  -	      if	DLINDEX = 10
   4833  f747				  -ZONE10ADDRESS =	TMPMEMADDRESS
   4834  f747					      endif
   4835  f747				  -	      if	DLINDEX = 11
   4836  f747				  -ZONE11ADDRESS =	TMPMEMADDRESS
   4837  f747					      endif
   4838  f747				  -	      if	DLINDEX = 12
   4839  f747				  -ZONE12ADDRESS =	TMPMEMADDRESS
   4840  f747					      endif
   4841  f747				  -	      if	DLINDEX = 13
   4842  f747				  -ZONE13ADDRESS =	TMPMEMADDRESS
   4843  f747					      endif
   4844  f747				  -	      if	DLINDEX = 14
   4845  f747				  -ZONE14ADDRESS =	TMPMEMADDRESS
   4846  f747					      endif
   4847  f747				  -	      if	DLINDEX = 15
   4848  f747				  -ZONE15ADDRESS =	TMPMEMADDRESS
   4849  f747					      endif
   4850  f747				  -	      if	DLINDEX = 16
   4851  f747				  -ZONE16ADDRESS =	TMPMEMADDRESS
   4852  f747					      endif
   4853  f747				  -	      if	DLINDEX = 17
   4854  f747				  -ZONE17ADDRESS =	TMPMEMADDRESS
   4855  f747					      endif
   4856  f747				  -	      if	DLINDEX = 18
   4857  f747				  -ZONE18ADDRESS =	TMPMEMADDRESS
   4858  f747					      endif
   4859  f747				  -	      if	DLINDEX = 19
   4860  f747				  -ZONE19ADDRESS =	TMPMEMADDRESS
   4861  f747					      endif
   4862  f747				  -	      if	DLINDEX = 20
   4863  f747				  -ZONE20ADDRESS =	TMPMEMADDRESS
   4864  f747					      endif
   4865  f747				  -	      if	DLINDEX = 21
   4866  f747				  -ZONE21ADDRESS =	TMPMEMADDRESS
   4867  f747					      endif
   4868  f747				  -	      if	DLINDEX = 22
   4869  f747				  -ZONE22ADDRESS =	TMPMEMADDRESS
   4870  f747					      endif
   4871  f747				  -	      if	DLINDEX = 23
   4872  f747				  -ZONE23ADDRESS =	TMPMEMADDRESS
   4873  f747					      endif
   4874  f747				  -	      if	DLINDEX = 24
   4875  f747				  -ZONE24ADDRESS =	TMPMEMADDRESS
   4876  f747					      endif
   4877  f747				  -	      if	DLINDEX = 25
   4878  f747				  -ZONE25ADDRESS =	TMPMEMADDRESS
   4879  f747					      endif
   4880  f747				  -	      if	DLINDEX = 26
   4881  f747				  -ZONE26ADDRESS =	TMPMEMADDRESS
   4882  f747					      endif
   4883  f747				  -	      if	DLINDEX = 27
   4884  f747				  -ZONE27ADDRESS =	TMPMEMADDRESS
   4885  f747					      endif
   4886  f747				   DLINDEX    SET	DLINDEX + 1
   4791  f747					      REPEND
   4792  f747				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4793  f747				  -	      ifconst	EXTRADLMEMORY
   4794  f747				  -	      if	TMPMEMADDRESS > $1FFF
   4795  f747				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4796  f747				  -	      else
   4797  f747				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4798  f747				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4799  f747				  -	      endif
   4800  f747				  -	      endif		; TMPMEMADDRESS > $1FFF
   4801  f747					      endif		; EXTRADLMEMORY
   4802  f747				  -	      if	DLINDEX = 0
   4803  f747				  -ZONE0ADDRESS =	TMPMEMADDRESS
   4804  f747					      endif
   4805  f747				  -	      if	DLINDEX = 1
   4806  f747				  -ZONE1ADDRESS =	TMPMEMADDRESS
   4807  f747					      endif
   4808  f747					      if	DLINDEX = 2
   4809  f747		       19 78	   ZONE2ADDRESS =	TMPMEMADDRESS
   4810  f747					      endif
   4811  f747				  -	      if	DLINDEX = 3
   4812  f747				  -ZONE3ADDRESS =	TMPMEMADDRESS
   4813  f747					      endif
   4814  f747				  -	      if	DLINDEX = 4
   4815  f747				  -ZONE4ADDRESS =	TMPMEMADDRESS
   4816  f747					      endif
   4817  f747				  -	      if	DLINDEX = 5
   4818  f747				  -ZONE5ADDRESS =	TMPMEMADDRESS
   4819  f747					      endif
   4820  f747				  -	      if	DLINDEX = 6
   4821  f747				  -ZONE6ADDRESS =	TMPMEMADDRESS
   4822  f747					      endif
   4823  f747				  -	      if	DLINDEX = 7
   4824  f747				  -ZONE7ADDRESS =	TMPMEMADDRESS
   4825  f747					      endif
   4826  f747				  -	      if	DLINDEX = 8
   4827  f747				  -ZONE8ADDRESS =	TMPMEMADDRESS
   4828  f747					      endif
   4829  f747				  -	      if	DLINDEX = 9
   4830  f747				  -ZONE9ADDRESS =	TMPMEMADDRESS
   4831  f747					      endif
   4832  f747				  -	      if	DLINDEX = 10
   4833  f747				  -ZONE10ADDRESS =	TMPMEMADDRESS
   4834  f747					      endif
   4835  f747				  -	      if	DLINDEX = 11
   4836  f747				  -ZONE11ADDRESS =	TMPMEMADDRESS
   4837  f747					      endif
   4838  f747				  -	      if	DLINDEX = 12
   4839  f747				  -ZONE12ADDRESS =	TMPMEMADDRESS
   4840  f747					      endif
   4841  f747				  -	      if	DLINDEX = 13
   4842  f747				  -ZONE13ADDRESS =	TMPMEMADDRESS
   4843  f747					      endif
   4844  f747				  -	      if	DLINDEX = 14
   4845  f747				  -ZONE14ADDRESS =	TMPMEMADDRESS
   4846  f747					      endif
   4847  f747				  -	      if	DLINDEX = 15
   4848  f747				  -ZONE15ADDRESS =	TMPMEMADDRESS
   4849  f747					      endif
   4850  f747				  -	      if	DLINDEX = 16
   4851  f747				  -ZONE16ADDRESS =	TMPMEMADDRESS
   4852  f747					      endif
   4853  f747				  -	      if	DLINDEX = 17
   4854  f747				  -ZONE17ADDRESS =	TMPMEMADDRESS
   4855  f747					      endif
   4856  f747				  -	      if	DLINDEX = 18
   4857  f747				  -ZONE18ADDRESS =	TMPMEMADDRESS
   4858  f747					      endif
   4859  f747				  -	      if	DLINDEX = 19
   4860  f747				  -ZONE19ADDRESS =	TMPMEMADDRESS
   4861  f747					      endif
   4862  f747				  -	      if	DLINDEX = 20
   4863  f747				  -ZONE20ADDRESS =	TMPMEMADDRESS
   4864  f747					      endif
   4865  f747				  -	      if	DLINDEX = 21
   4866  f747				  -ZONE21ADDRESS =	TMPMEMADDRESS
   4867  f747					      endif
   4868  f747				  -	      if	DLINDEX = 22
   4869  f747				  -ZONE22ADDRESS =	TMPMEMADDRESS
   4870  f747					      endif
   4871  f747				  -	      if	DLINDEX = 23
   4872  f747				  -ZONE23ADDRESS =	TMPMEMADDRESS
   4873  f747					      endif
   4874  f747				  -	      if	DLINDEX = 24
   4875  f747				  -ZONE24ADDRESS =	TMPMEMADDRESS
   4876  f747					      endif
   4877  f747				  -	      if	DLINDEX = 25
   4878  f747				  -ZONE25ADDRESS =	TMPMEMADDRESS
   4879  f747					      endif
   4880  f747				  -	      if	DLINDEX = 26
   4881  f747				  -ZONE26ADDRESS =	TMPMEMADDRESS
   4882  f747					      endif
   4883  f747				  -	      if	DLINDEX = 27
   4884  f747				  -ZONE27ADDRESS =	TMPMEMADDRESS
   4885  f747					      endif
   4886  f747				   DLINDEX    SET	DLINDEX + 1
   4791  f747					      REPEND
   4792  f747				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4793  f747				  -	      ifconst	EXTRADLMEMORY
   4794  f747				  -	      if	TMPMEMADDRESS > $1FFF
   4795  f747				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4796  f747				  -	      else
   4797  f747				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4798  f747				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4799  f747				  -	      endif
   4800  f747				  -	      endif		; TMPMEMADDRESS > $1FFF
   4801  f747					      endif		; EXTRADLMEMORY
   4802  f747				  -	      if	DLINDEX = 0
   4803  f747				  -ZONE0ADDRESS =	TMPMEMADDRESS
   4804  f747					      endif
   4805  f747				  -	      if	DLINDEX = 1
   4806  f747				  -ZONE1ADDRESS =	TMPMEMADDRESS
   4807  f747					      endif
   4808  f747				  -	      if	DLINDEX = 2
   4809  f747				  -ZONE2ADDRESS =	TMPMEMADDRESS
   4810  f747					      endif
   4811  f747					      if	DLINDEX = 3
   4812  f747		       19 c4	   ZONE3ADDRESS =	TMPMEMADDRESS
   4813  f747					      endif
   4814  f747				  -	      if	DLINDEX = 4
   4815  f747				  -ZONE4ADDRESS =	TMPMEMADDRESS
   4816  f747					      endif
   4817  f747				  -	      if	DLINDEX = 5
   4818  f747				  -ZONE5ADDRESS =	TMPMEMADDRESS
   4819  f747					      endif
   4820  f747				  -	      if	DLINDEX = 6
   4821  f747				  -ZONE6ADDRESS =	TMPMEMADDRESS
   4822  f747					      endif
   4823  f747				  -	      if	DLINDEX = 7
   4824  f747				  -ZONE7ADDRESS =	TMPMEMADDRESS
   4825  f747					      endif
   4826  f747				  -	      if	DLINDEX = 8
   4827  f747				  -ZONE8ADDRESS =	TMPMEMADDRESS
   4828  f747					      endif
   4829  f747				  -	      if	DLINDEX = 9
   4830  f747				  -ZONE9ADDRESS =	TMPMEMADDRESS
   4831  f747					      endif
   4832  f747				  -	      if	DLINDEX = 10
   4833  f747				  -ZONE10ADDRESS =	TMPMEMADDRESS
   4834  f747					      endif
   4835  f747				  -	      if	DLINDEX = 11
   4836  f747				  -ZONE11ADDRESS =	TMPMEMADDRESS
   4837  f747					      endif
   4838  f747				  -	      if	DLINDEX = 12
   4839  f747				  -ZONE12ADDRESS =	TMPMEMADDRESS
   4840  f747					      endif
   4841  f747				  -	      if	DLINDEX = 13
   4842  f747				  -ZONE13ADDRESS =	TMPMEMADDRESS
   4843  f747					      endif
   4844  f747				  -	      if	DLINDEX = 14
   4845  f747				  -ZONE14ADDRESS =	TMPMEMADDRESS
   4846  f747					      endif
   4847  f747				  -	      if	DLINDEX = 15
   4848  f747				  -ZONE15ADDRESS =	TMPMEMADDRESS
   4849  f747					      endif
   4850  f747				  -	      if	DLINDEX = 16
   4851  f747				  -ZONE16ADDRESS =	TMPMEMADDRESS
   4852  f747					      endif
   4853  f747				  -	      if	DLINDEX = 17
   4854  f747				  -ZONE17ADDRESS =	TMPMEMADDRESS
   4855  f747					      endif
   4856  f747				  -	      if	DLINDEX = 18
   4857  f747				  -ZONE18ADDRESS =	TMPMEMADDRESS
   4858  f747					      endif
   4859  f747				  -	      if	DLINDEX = 19
   4860  f747				  -ZONE19ADDRESS =	TMPMEMADDRESS
   4861  f747					      endif
   4862  f747				  -	      if	DLINDEX = 20
   4863  f747				  -ZONE20ADDRESS =	TMPMEMADDRESS
   4864  f747					      endif
   4865  f747				  -	      if	DLINDEX = 21
   4866  f747				  -ZONE21ADDRESS =	TMPMEMADDRESS
   4867  f747					      endif
   4868  f747				  -	      if	DLINDEX = 22
   4869  f747				  -ZONE22ADDRESS =	TMPMEMADDRESS
   4870  f747					      endif
   4871  f747				  -	      if	DLINDEX = 23
   4872  f747				  -ZONE23ADDRESS =	TMPMEMADDRESS
   4873  f747					      endif
   4874  f747				  -	      if	DLINDEX = 24
   4875  f747				  -ZONE24ADDRESS =	TMPMEMADDRESS
   4876  f747					      endif
   4877  f747				  -	      if	DLINDEX = 25
   4878  f747				  -ZONE25ADDRESS =	TMPMEMADDRESS
   4879  f747					      endif
   4880  f747				  -	      if	DLINDEX = 26
   4881  f747				  -ZONE26ADDRESS =	TMPMEMADDRESS
   4882  f747					      endif
   4883  f747				  -	      if	DLINDEX = 27
   4884  f747				  -ZONE27ADDRESS =	TMPMEMADDRESS
   4885  f747					      endif
   4886  f747				   DLINDEX    SET	DLINDEX + 1
   4791  f747					      REPEND
   4792  f747				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4793  f747				  -	      ifconst	EXTRADLMEMORY
   4794  f747				  -	      if	TMPMEMADDRESS > $1FFF
   4795  f747				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4796  f747				  -	      else
   4797  f747				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4798  f747				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4799  f747				  -	      endif
   4800  f747				  -	      endif		; TMPMEMADDRESS > $1FFF
   4801  f747					      endif		; EXTRADLMEMORY
   4802  f747				  -	      if	DLINDEX = 0
   4803  f747				  -ZONE0ADDRESS =	TMPMEMADDRESS
   4804  f747					      endif
   4805  f747				  -	      if	DLINDEX = 1
   4806  f747				  -ZONE1ADDRESS =	TMPMEMADDRESS
   4807  f747					      endif
   4808  f747				  -	      if	DLINDEX = 2
   4809  f747				  -ZONE2ADDRESS =	TMPMEMADDRESS
   4810  f747					      endif
   4811  f747				  -	      if	DLINDEX = 3
   4812  f747				  -ZONE3ADDRESS =	TMPMEMADDRESS
   4813  f747					      endif
   4814  f747					      if	DLINDEX = 4
   4815  f747		       1a 10	   ZONE4ADDRESS =	TMPMEMADDRESS
   4816  f747					      endif
   4817  f747				  -	      if	DLINDEX = 5
   4818  f747				  -ZONE5ADDRESS =	TMPMEMADDRESS
   4819  f747					      endif
   4820  f747				  -	      if	DLINDEX = 6
   4821  f747				  -ZONE6ADDRESS =	TMPMEMADDRESS
   4822  f747					      endif
   4823  f747				  -	      if	DLINDEX = 7
   4824  f747				  -ZONE7ADDRESS =	TMPMEMADDRESS
   4825  f747					      endif
   4826  f747				  -	      if	DLINDEX = 8
   4827  f747				  -ZONE8ADDRESS =	TMPMEMADDRESS
   4828  f747					      endif
   4829  f747				  -	      if	DLINDEX = 9
   4830  f747				  -ZONE9ADDRESS =	TMPMEMADDRESS
   4831  f747					      endif
   4832  f747				  -	      if	DLINDEX = 10
   4833  f747				  -ZONE10ADDRESS =	TMPMEMADDRESS
   4834  f747					      endif
   4835  f747				  -	      if	DLINDEX = 11
   4836  f747				  -ZONE11ADDRESS =	TMPMEMADDRESS
   4837  f747					      endif
   4838  f747				  -	      if	DLINDEX = 12
   4839  f747				  -ZONE12ADDRESS =	TMPMEMADDRESS
   4840  f747					      endif
   4841  f747				  -	      if	DLINDEX = 13
   4842  f747				  -ZONE13ADDRESS =	TMPMEMADDRESS
   4843  f747					      endif
   4844  f747				  -	      if	DLINDEX = 14
   4845  f747				  -ZONE14ADDRESS =	TMPMEMADDRESS
   4846  f747					      endif
   4847  f747				  -	      if	DLINDEX = 15
   4848  f747				  -ZONE15ADDRESS =	TMPMEMADDRESS
   4849  f747					      endif
   4850  f747				  -	      if	DLINDEX = 16
   4851  f747				  -ZONE16ADDRESS =	TMPMEMADDRESS
   4852  f747					      endif
   4853  f747				  -	      if	DLINDEX = 17
   4854  f747				  -ZONE17ADDRESS =	TMPMEMADDRESS
   4855  f747					      endif
   4856  f747				  -	      if	DLINDEX = 18
   4857  f747				  -ZONE18ADDRESS =	TMPMEMADDRESS
   4858  f747					      endif
   4859  f747				  -	      if	DLINDEX = 19
   4860  f747				  -ZONE19ADDRESS =	TMPMEMADDRESS
   4861  f747					      endif
   4862  f747				  -	      if	DLINDEX = 20
   4863  f747				  -ZONE20ADDRESS =	TMPMEMADDRESS
   4864  f747					      endif
   4865  f747				  -	      if	DLINDEX = 21
   4866  f747				  -ZONE21ADDRESS =	TMPMEMADDRESS
   4867  f747					      endif
   4868  f747				  -	      if	DLINDEX = 22
   4869  f747				  -ZONE22ADDRESS =	TMPMEMADDRESS
   4870  f747					      endif
   4871  f747				  -	      if	DLINDEX = 23
   4872  f747				  -ZONE23ADDRESS =	TMPMEMADDRESS
   4873  f747					      endif
   4874  f747				  -	      if	DLINDEX = 24
   4875  f747				  -ZONE24ADDRESS =	TMPMEMADDRESS
   4876  f747					      endif
   4877  f747				  -	      if	DLINDEX = 25
   4878  f747				  -ZONE25ADDRESS =	TMPMEMADDRESS
   4879  f747					      endif
   4880  f747				  -	      if	DLINDEX = 26
   4881  f747				  -ZONE26ADDRESS =	TMPMEMADDRESS
   4882  f747					      endif
   4883  f747				  -	      if	DLINDEX = 27
   4884  f747				  -ZONE27ADDRESS =	TMPMEMADDRESS
   4885  f747					      endif
   4886  f747				   DLINDEX    SET	DLINDEX + 1
   4791  f747					      REPEND
   4792  f747				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4793  f747				  -	      ifconst	EXTRADLMEMORY
   4794  f747				  -	      if	TMPMEMADDRESS > $1FFF
   4795  f747				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4796  f747				  -	      else
   4797  f747				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4798  f747				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4799  f747				  -	      endif
   4800  f747				  -	      endif		; TMPMEMADDRESS > $1FFF
   4801  f747					      endif		; EXTRADLMEMORY
   4802  f747				  -	      if	DLINDEX = 0
   4803  f747				  -ZONE0ADDRESS =	TMPMEMADDRESS
   4804  f747					      endif
   4805  f747				  -	      if	DLINDEX = 1
   4806  f747				  -ZONE1ADDRESS =	TMPMEMADDRESS
   4807  f747					      endif
   4808  f747				  -	      if	DLINDEX = 2
   4809  f747				  -ZONE2ADDRESS =	TMPMEMADDRESS
   4810  f747					      endif
   4811  f747				  -	      if	DLINDEX = 3
   4812  f747				  -ZONE3ADDRESS =	TMPMEMADDRESS
   4813  f747					      endif
   4814  f747				  -	      if	DLINDEX = 4
   4815  f747				  -ZONE4ADDRESS =	TMPMEMADDRESS
   4816  f747					      endif
   4817  f747					      if	DLINDEX = 5
   4818  f747		       1a 5c	   ZONE5ADDRESS =	TMPMEMADDRESS
   4819  f747					      endif
   4820  f747				  -	      if	DLINDEX = 6
   4821  f747				  -ZONE6ADDRESS =	TMPMEMADDRESS
   4822  f747					      endif
   4823  f747				  -	      if	DLINDEX = 7
   4824  f747				  -ZONE7ADDRESS =	TMPMEMADDRESS
   4825  f747					      endif
   4826  f747				  -	      if	DLINDEX = 8
   4827  f747				  -ZONE8ADDRESS =	TMPMEMADDRESS
   4828  f747					      endif
   4829  f747				  -	      if	DLINDEX = 9
   4830  f747				  -ZONE9ADDRESS =	TMPMEMADDRESS
   4831  f747					      endif
   4832  f747				  -	      if	DLINDEX = 10
   4833  f747				  -ZONE10ADDRESS =	TMPMEMADDRESS
   4834  f747					      endif
   4835  f747				  -	      if	DLINDEX = 11
   4836  f747				  -ZONE11ADDRESS =	TMPMEMADDRESS
   4837  f747					      endif
   4838  f747				  -	      if	DLINDEX = 12
   4839  f747				  -ZONE12ADDRESS =	TMPMEMADDRESS
   4840  f747					      endif
   4841  f747				  -	      if	DLINDEX = 13
   4842  f747				  -ZONE13ADDRESS =	TMPMEMADDRESS
   4843  f747					      endif
   4844  f747				  -	      if	DLINDEX = 14
   4845  f747				  -ZONE14ADDRESS =	TMPMEMADDRESS
   4846  f747					      endif
   4847  f747				  -	      if	DLINDEX = 15
   4848  f747				  -ZONE15ADDRESS =	TMPMEMADDRESS
   4849  f747					      endif
   4850  f747				  -	      if	DLINDEX = 16
   4851  f747				  -ZONE16ADDRESS =	TMPMEMADDRESS
   4852  f747					      endif
   4853  f747				  -	      if	DLINDEX = 17
   4854  f747				  -ZONE17ADDRESS =	TMPMEMADDRESS
   4855  f747					      endif
   4856  f747				  -	      if	DLINDEX = 18
   4857  f747				  -ZONE18ADDRESS =	TMPMEMADDRESS
   4858  f747					      endif
   4859  f747				  -	      if	DLINDEX = 19
   4860  f747				  -ZONE19ADDRESS =	TMPMEMADDRESS
   4861  f747					      endif
   4862  f747				  -	      if	DLINDEX = 20
   4863  f747				  -ZONE20ADDRESS =	TMPMEMADDRESS
   4864  f747					      endif
   4865  f747				  -	      if	DLINDEX = 21
   4866  f747				  -ZONE21ADDRESS =	TMPMEMADDRESS
   4867  f747					      endif
   4868  f747				  -	      if	DLINDEX = 22
   4869  f747				  -ZONE22ADDRESS =	TMPMEMADDRESS
   4870  f747					      endif
   4871  f747				  -	      if	DLINDEX = 23
   4872  f747				  -ZONE23ADDRESS =	TMPMEMADDRESS
   4873  f747					      endif
   4874  f747				  -	      if	DLINDEX = 24
   4875  f747				  -ZONE24ADDRESS =	TMPMEMADDRESS
   4876  f747					      endif
   4877  f747				  -	      if	DLINDEX = 25
   4878  f747				  -ZONE25ADDRESS =	TMPMEMADDRESS
   4879  f747					      endif
   4880  f747				  -	      if	DLINDEX = 26
   4881  f747				  -ZONE26ADDRESS =	TMPMEMADDRESS
   4882  f747					      endif
   4883  f747				  -	      if	DLINDEX = 27
   4884  f747				  -ZONE27ADDRESS =	TMPMEMADDRESS
   4885  f747					      endif
   4886  f747				   DLINDEX    SET	DLINDEX + 1
   4791  f747					      REPEND
   4792  f747				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4793  f747				  -	      ifconst	EXTRADLMEMORY
   4794  f747				  -	      if	TMPMEMADDRESS > $1FFF
   4795  f747				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4796  f747				  -	      else
   4797  f747				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4798  f747				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4799  f747				  -	      endif
   4800  f747				  -	      endif		; TMPMEMADDRESS > $1FFF
   4801  f747					      endif		; EXTRADLMEMORY
   4802  f747				  -	      if	DLINDEX = 0
   4803  f747				  -ZONE0ADDRESS =	TMPMEMADDRESS
   4804  f747					      endif
   4805  f747				  -	      if	DLINDEX = 1
   4806  f747				  -ZONE1ADDRESS =	TMPMEMADDRESS
   4807  f747					      endif
   4808  f747				  -	      if	DLINDEX = 2
   4809  f747				  -ZONE2ADDRESS =	TMPMEMADDRESS
   4810  f747					      endif
   4811  f747				  -	      if	DLINDEX = 3
   4812  f747				  -ZONE3ADDRESS =	TMPMEMADDRESS
   4813  f747					      endif
   4814  f747				  -	      if	DLINDEX = 4
   4815  f747				  -ZONE4ADDRESS =	TMPMEMADDRESS
   4816  f747					      endif
   4817  f747				  -	      if	DLINDEX = 5
   4818  f747				  -ZONE5ADDRESS =	TMPMEMADDRESS
   4819  f747					      endif
   4820  f747					      if	DLINDEX = 6
   4821  f747		       1a a8	   ZONE6ADDRESS =	TMPMEMADDRESS
   4822  f747					      endif
   4823  f747				  -	      if	DLINDEX = 7
   4824  f747				  -ZONE7ADDRESS =	TMPMEMADDRESS
   4825  f747					      endif
   4826  f747				  -	      if	DLINDEX = 8
   4827  f747				  -ZONE8ADDRESS =	TMPMEMADDRESS
   4828  f747					      endif
   4829  f747				  -	      if	DLINDEX = 9
   4830  f747				  -ZONE9ADDRESS =	TMPMEMADDRESS
   4831  f747					      endif
   4832  f747				  -	      if	DLINDEX = 10
   4833  f747				  -ZONE10ADDRESS =	TMPMEMADDRESS
   4834  f747					      endif
   4835  f747				  -	      if	DLINDEX = 11
   4836  f747				  -ZONE11ADDRESS =	TMPMEMADDRESS
   4837  f747					      endif
   4838  f747				  -	      if	DLINDEX = 12
   4839  f747				  -ZONE12ADDRESS =	TMPMEMADDRESS
   4840  f747					      endif
   4841  f747				  -	      if	DLINDEX = 13
   4842  f747				  -ZONE13ADDRESS =	TMPMEMADDRESS
   4843  f747					      endif
   4844  f747				  -	      if	DLINDEX = 14
   4845  f747				  -ZONE14ADDRESS =	TMPMEMADDRESS
   4846  f747					      endif
   4847  f747				  -	      if	DLINDEX = 15
   4848  f747				  -ZONE15ADDRESS =	TMPMEMADDRESS
   4849  f747					      endif
   4850  f747				  -	      if	DLINDEX = 16
   4851  f747				  -ZONE16ADDRESS =	TMPMEMADDRESS
   4852  f747					      endif
   4853  f747				  -	      if	DLINDEX = 17
   4854  f747				  -ZONE17ADDRESS =	TMPMEMADDRESS
   4855  f747					      endif
   4856  f747				  -	      if	DLINDEX = 18
   4857  f747				  -ZONE18ADDRESS =	TMPMEMADDRESS
   4858  f747					      endif
   4859  f747				  -	      if	DLINDEX = 19
   4860  f747				  -ZONE19ADDRESS =	TMPMEMADDRESS
   4861  f747					      endif
   4862  f747				  -	      if	DLINDEX = 20
   4863  f747				  -ZONE20ADDRESS =	TMPMEMADDRESS
   4864  f747					      endif
   4865  f747				  -	      if	DLINDEX = 21
   4866  f747				  -ZONE21ADDRESS =	TMPMEMADDRESS
   4867  f747					      endif
   4868  f747				  -	      if	DLINDEX = 22
   4869  f747				  -ZONE22ADDRESS =	TMPMEMADDRESS
   4870  f747					      endif
   4871  f747				  -	      if	DLINDEX = 23
   4872  f747				  -ZONE23ADDRESS =	TMPMEMADDRESS
   4873  f747					      endif
   4874  f747				  -	      if	DLINDEX = 24
   4875  f747				  -ZONE24ADDRESS =	TMPMEMADDRESS
   4876  f747					      endif
   4877  f747				  -	      if	DLINDEX = 25
   4878  f747				  -ZONE25ADDRESS =	TMPMEMADDRESS
   4879  f747					      endif
   4880  f747				  -	      if	DLINDEX = 26
   4881  f747				  -ZONE26ADDRESS =	TMPMEMADDRESS
   4882  f747					      endif
   4883  f747				  -	      if	DLINDEX = 27
   4884  f747				  -ZONE27ADDRESS =	TMPMEMADDRESS
   4885  f747					      endif
   4886  f747				   DLINDEX    SET	DLINDEX + 1
   4791  f747					      REPEND
   4792  f747				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4793  f747				  -	      ifconst	EXTRADLMEMORY
   4794  f747				  -	      if	TMPMEMADDRESS > $1FFF
   4795  f747				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4796  f747				  -	      else
   4797  f747				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4798  f747				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4799  f747				  -	      endif
   4800  f747				  -	      endif		; TMPMEMADDRESS > $1FFF
   4801  f747					      endif		; EXTRADLMEMORY
   4802  f747				  -	      if	DLINDEX = 0
   4803  f747				  -ZONE0ADDRESS =	TMPMEMADDRESS
   4804  f747					      endif
   4805  f747				  -	      if	DLINDEX = 1
   4806  f747				  -ZONE1ADDRESS =	TMPMEMADDRESS
   4807  f747					      endif
   4808  f747				  -	      if	DLINDEX = 2
   4809  f747				  -ZONE2ADDRESS =	TMPMEMADDRESS
   4810  f747					      endif
   4811  f747				  -	      if	DLINDEX = 3
   4812  f747				  -ZONE3ADDRESS =	TMPMEMADDRESS
   4813  f747					      endif
   4814  f747				  -	      if	DLINDEX = 4
   4815  f747				  -ZONE4ADDRESS =	TMPMEMADDRESS
   4816  f747					      endif
   4817  f747				  -	      if	DLINDEX = 5
   4818  f747				  -ZONE5ADDRESS =	TMPMEMADDRESS
   4819  f747					      endif
   4820  f747				  -	      if	DLINDEX = 6
   4821  f747				  -ZONE6ADDRESS =	TMPMEMADDRESS
   4822  f747					      endif
   4823  f747					      if	DLINDEX = 7
   4824  f747		       1a f4	   ZONE7ADDRESS =	TMPMEMADDRESS
   4825  f747					      endif
   4826  f747				  -	      if	DLINDEX = 8
   4827  f747				  -ZONE8ADDRESS =	TMPMEMADDRESS
   4828  f747					      endif
   4829  f747				  -	      if	DLINDEX = 9
   4830  f747				  -ZONE9ADDRESS =	TMPMEMADDRESS
   4831  f747					      endif
   4832  f747				  -	      if	DLINDEX = 10
   4833  f747				  -ZONE10ADDRESS =	TMPMEMADDRESS
   4834  f747					      endif
   4835  f747				  -	      if	DLINDEX = 11
   4836  f747				  -ZONE11ADDRESS =	TMPMEMADDRESS
   4837  f747					      endif
   4838  f747				  -	      if	DLINDEX = 12
   4839  f747				  -ZONE12ADDRESS =	TMPMEMADDRESS
   4840  f747					      endif
   4841  f747				  -	      if	DLINDEX = 13
   4842  f747				  -ZONE13ADDRESS =	TMPMEMADDRESS
   4843  f747					      endif
   4844  f747				  -	      if	DLINDEX = 14
   4845  f747				  -ZONE14ADDRESS =	TMPMEMADDRESS
   4846  f747					      endif
   4847  f747				  -	      if	DLINDEX = 15
   4848  f747				  -ZONE15ADDRESS =	TMPMEMADDRESS
   4849  f747					      endif
   4850  f747				  -	      if	DLINDEX = 16
   4851  f747				  -ZONE16ADDRESS =	TMPMEMADDRESS
   4852  f747					      endif
   4853  f747				  -	      if	DLINDEX = 17
   4854  f747				  -ZONE17ADDRESS =	TMPMEMADDRESS
   4855  f747					      endif
   4856  f747				  -	      if	DLINDEX = 18
   4857  f747				  -ZONE18ADDRESS =	TMPMEMADDRESS
   4858  f747					      endif
   4859  f747				  -	      if	DLINDEX = 19
   4860  f747				  -ZONE19ADDRESS =	TMPMEMADDRESS
   4861  f747					      endif
   4862  f747				  -	      if	DLINDEX = 20
   4863  f747				  -ZONE20ADDRESS =	TMPMEMADDRESS
   4864  f747					      endif
   4865  f747				  -	      if	DLINDEX = 21
   4866  f747				  -ZONE21ADDRESS =	TMPMEMADDRESS
   4867  f747					      endif
   4868  f747				  -	      if	DLINDEX = 22
   4869  f747				  -ZONE22ADDRESS =	TMPMEMADDRESS
   4870  f747					      endif
   4871  f747				  -	      if	DLINDEX = 23
   4872  f747				  -ZONE23ADDRESS =	TMPMEMADDRESS
   4873  f747					      endif
   4874  f747				  -	      if	DLINDEX = 24
   4875  f747				  -ZONE24ADDRESS =	TMPMEMADDRESS
   4876  f747					      endif
   4877  f747				  -	      if	DLINDEX = 25
   4878  f747				  -ZONE25ADDRESS =	TMPMEMADDRESS
   4879  f747					      endif
   4880  f747				  -	      if	DLINDEX = 26
   4881  f747				  -ZONE26ADDRESS =	TMPMEMADDRESS
   4882  f747					      endif
   4883  f747				  -	      if	DLINDEX = 27
   4884  f747				  -ZONE27ADDRESS =	TMPMEMADDRESS
   4885  f747					      endif
   4886  f747				   DLINDEX    SET	DLINDEX + 1
   4791  f747					      REPEND
   4792  f747				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4793  f747				  -	      ifconst	EXTRADLMEMORY
   4794  f747				  -	      if	TMPMEMADDRESS > $1FFF
   4795  f747				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4796  f747				  -	      else
   4797  f747				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4798  f747				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4799  f747				  -	      endif
   4800  f747				  -	      endif		; TMPMEMADDRESS > $1FFF
   4801  f747					      endif		; EXTRADLMEMORY
   4802  f747				  -	      if	DLINDEX = 0
   4803  f747				  -ZONE0ADDRESS =	TMPMEMADDRESS
   4804  f747					      endif
   4805  f747				  -	      if	DLINDEX = 1
   4806  f747				  -ZONE1ADDRESS =	TMPMEMADDRESS
   4807  f747					      endif
   4808  f747				  -	      if	DLINDEX = 2
   4809  f747				  -ZONE2ADDRESS =	TMPMEMADDRESS
   4810  f747					      endif
   4811  f747				  -	      if	DLINDEX = 3
   4812  f747				  -ZONE3ADDRESS =	TMPMEMADDRESS
   4813  f747					      endif
   4814  f747				  -	      if	DLINDEX = 4
   4815  f747				  -ZONE4ADDRESS =	TMPMEMADDRESS
   4816  f747					      endif
   4817  f747				  -	      if	DLINDEX = 5
   4818  f747				  -ZONE5ADDRESS =	TMPMEMADDRESS
   4819  f747					      endif
   4820  f747				  -	      if	DLINDEX = 6
   4821  f747				  -ZONE6ADDRESS =	TMPMEMADDRESS
   4822  f747					      endif
   4823  f747				  -	      if	DLINDEX = 7
   4824  f747				  -ZONE7ADDRESS =	TMPMEMADDRESS
   4825  f747					      endif
   4826  f747					      if	DLINDEX = 8
   4827  f747		       1b 40	   ZONE8ADDRESS =	TMPMEMADDRESS
   4828  f747					      endif
   4829  f747				  -	      if	DLINDEX = 9
   4830  f747				  -ZONE9ADDRESS =	TMPMEMADDRESS
   4831  f747					      endif
   4832  f747				  -	      if	DLINDEX = 10
   4833  f747				  -ZONE10ADDRESS =	TMPMEMADDRESS
   4834  f747					      endif
   4835  f747				  -	      if	DLINDEX = 11
   4836  f747				  -ZONE11ADDRESS =	TMPMEMADDRESS
   4837  f747					      endif
   4838  f747				  -	      if	DLINDEX = 12
   4839  f747				  -ZONE12ADDRESS =	TMPMEMADDRESS
   4840  f747					      endif
   4841  f747				  -	      if	DLINDEX = 13
   4842  f747				  -ZONE13ADDRESS =	TMPMEMADDRESS
   4843  f747					      endif
   4844  f747				  -	      if	DLINDEX = 14
   4845  f747				  -ZONE14ADDRESS =	TMPMEMADDRESS
   4846  f747					      endif
   4847  f747				  -	      if	DLINDEX = 15
   4848  f747				  -ZONE15ADDRESS =	TMPMEMADDRESS
   4849  f747					      endif
   4850  f747				  -	      if	DLINDEX = 16
   4851  f747				  -ZONE16ADDRESS =	TMPMEMADDRESS
   4852  f747					      endif
   4853  f747				  -	      if	DLINDEX = 17
   4854  f747				  -ZONE17ADDRESS =	TMPMEMADDRESS
   4855  f747					      endif
   4856  f747				  -	      if	DLINDEX = 18
   4857  f747				  -ZONE18ADDRESS =	TMPMEMADDRESS
   4858  f747					      endif
   4859  f747				  -	      if	DLINDEX = 19
   4860  f747				  -ZONE19ADDRESS =	TMPMEMADDRESS
   4861  f747					      endif
   4862  f747				  -	      if	DLINDEX = 20
   4863  f747				  -ZONE20ADDRESS =	TMPMEMADDRESS
   4864  f747					      endif
   4865  f747				  -	      if	DLINDEX = 21
   4866  f747				  -ZONE21ADDRESS =	TMPMEMADDRESS
   4867  f747					      endif
   4868  f747				  -	      if	DLINDEX = 22
   4869  f747				  -ZONE22ADDRESS =	TMPMEMADDRESS
   4870  f747					      endif
   4871  f747				  -	      if	DLINDEX = 23
   4872  f747				  -ZONE23ADDRESS =	TMPMEMADDRESS
   4873  f747					      endif
   4874  f747				  -	      if	DLINDEX = 24
   4875  f747				  -ZONE24ADDRESS =	TMPMEMADDRESS
   4876  f747					      endif
   4877  f747				  -	      if	DLINDEX = 25
   4878  f747				  -ZONE25ADDRESS =	TMPMEMADDRESS
   4879  f747					      endif
   4880  f747				  -	      if	DLINDEX = 26
   4881  f747				  -ZONE26ADDRESS =	TMPMEMADDRESS
   4882  f747					      endif
   4883  f747				  -	      if	DLINDEX = 27
   4884  f747				  -ZONE27ADDRESS =	TMPMEMADDRESS
   4885  f747					      endif
   4886  f747				   DLINDEX    SET	DLINDEX + 1
   4791  f747					      REPEND
   4792  f747				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4793  f747				  -	      ifconst	EXTRADLMEMORY
   4794  f747				  -	      if	TMPMEMADDRESS > $1FFF
   4795  f747				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4796  f747				  -	      else
   4797  f747				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4798  f747				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4799  f747				  -	      endif
   4800  f747				  -	      endif		; TMPMEMADDRESS > $1FFF
   4801  f747					      endif		; EXTRADLMEMORY
   4802  f747				  -	      if	DLINDEX = 0
   4803  f747				  -ZONE0ADDRESS =	TMPMEMADDRESS
   4804  f747					      endif
   4805  f747				  -	      if	DLINDEX = 1
   4806  f747				  -ZONE1ADDRESS =	TMPMEMADDRESS
   4807  f747					      endif
   4808  f747				  -	      if	DLINDEX = 2
   4809  f747				  -ZONE2ADDRESS =	TMPMEMADDRESS
   4810  f747					      endif
   4811  f747				  -	      if	DLINDEX = 3
   4812  f747				  -ZONE3ADDRESS =	TMPMEMADDRESS
   4813  f747					      endif
   4814  f747				  -	      if	DLINDEX = 4
   4815  f747				  -ZONE4ADDRESS =	TMPMEMADDRESS
   4816  f747					      endif
   4817  f747				  -	      if	DLINDEX = 5
   4818  f747				  -ZONE5ADDRESS =	TMPMEMADDRESS
   4819  f747					      endif
   4820  f747				  -	      if	DLINDEX = 6
   4821  f747				  -ZONE6ADDRESS =	TMPMEMADDRESS
   4822  f747					      endif
   4823  f747				  -	      if	DLINDEX = 7
   4824  f747				  -ZONE7ADDRESS =	TMPMEMADDRESS
   4825  f747					      endif
   4826  f747				  -	      if	DLINDEX = 8
   4827  f747				  -ZONE8ADDRESS =	TMPMEMADDRESS
   4828  f747					      endif
   4829  f747					      if	DLINDEX = 9
   4830  f747		       1b 8c	   ZONE9ADDRESS =	TMPMEMADDRESS
   4831  f747					      endif
   4832  f747				  -	      if	DLINDEX = 10
   4833  f747				  -ZONE10ADDRESS =	TMPMEMADDRESS
   4834  f747					      endif
   4835  f747				  -	      if	DLINDEX = 11
   4836  f747				  -ZONE11ADDRESS =	TMPMEMADDRESS
   4837  f747					      endif
   4838  f747				  -	      if	DLINDEX = 12
   4839  f747				  -ZONE12ADDRESS =	TMPMEMADDRESS
   4840  f747					      endif
   4841  f747				  -	      if	DLINDEX = 13
   4842  f747				  -ZONE13ADDRESS =	TMPMEMADDRESS
   4843  f747					      endif
   4844  f747				  -	      if	DLINDEX = 14
   4845  f747				  -ZONE14ADDRESS =	TMPMEMADDRESS
   4846  f747					      endif
   4847  f747				  -	      if	DLINDEX = 15
   4848  f747				  -ZONE15ADDRESS =	TMPMEMADDRESS
   4849  f747					      endif
   4850  f747				  -	      if	DLINDEX = 16
   4851  f747				  -ZONE16ADDRESS =	TMPMEMADDRESS
   4852  f747					      endif
   4853  f747				  -	      if	DLINDEX = 17
   4854  f747				  -ZONE17ADDRESS =	TMPMEMADDRESS
   4855  f747					      endif
   4856  f747				  -	      if	DLINDEX = 18
   4857  f747				  -ZONE18ADDRESS =	TMPMEMADDRESS
   4858  f747					      endif
   4859  f747				  -	      if	DLINDEX = 19
   4860  f747				  -ZONE19ADDRESS =	TMPMEMADDRESS
   4861  f747					      endif
   4862  f747				  -	      if	DLINDEX = 20
   4863  f747				  -ZONE20ADDRESS =	TMPMEMADDRESS
   4864  f747					      endif
   4865  f747				  -	      if	DLINDEX = 21
   4866  f747				  -ZONE21ADDRESS =	TMPMEMADDRESS
   4867  f747					      endif
   4868  f747				  -	      if	DLINDEX = 22
   4869  f747				  -ZONE22ADDRESS =	TMPMEMADDRESS
   4870  f747					      endif
   4871  f747				  -	      if	DLINDEX = 23
   4872  f747				  -ZONE23ADDRESS =	TMPMEMADDRESS
   4873  f747					      endif
   4874  f747				  -	      if	DLINDEX = 24
   4875  f747				  -ZONE24ADDRESS =	TMPMEMADDRESS
   4876  f747					      endif
   4877  f747				  -	      if	DLINDEX = 25
   4878  f747				  -ZONE25ADDRESS =	TMPMEMADDRESS
   4879  f747					      endif
   4880  f747				  -	      if	DLINDEX = 26
   4881  f747				  -ZONE26ADDRESS =	TMPMEMADDRESS
   4882  f747					      endif
   4883  f747				  -	      if	DLINDEX = 27
   4884  f747				  -ZONE27ADDRESS =	TMPMEMADDRESS
   4885  f747					      endif
   4886  f747				   DLINDEX    SET	DLINDEX + 1
   4791  f747					      REPEND
   4792  f747				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4793  f747				  -	      ifconst	EXTRADLMEMORY
   4794  f747				  -	      if	TMPMEMADDRESS > $1FFF
   4795  f747				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4796  f747				  -	      else
   4797  f747				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4798  f747				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4799  f747				  -	      endif
   4800  f747				  -	      endif		; TMPMEMADDRESS > $1FFF
   4801  f747					      endif		; EXTRADLMEMORY
   4802  f747				  -	      if	DLINDEX = 0
   4803  f747				  -ZONE0ADDRESS =	TMPMEMADDRESS
   4804  f747					      endif
   4805  f747				  -	      if	DLINDEX = 1
   4806  f747				  -ZONE1ADDRESS =	TMPMEMADDRESS
   4807  f747					      endif
   4808  f747				  -	      if	DLINDEX = 2
   4809  f747				  -ZONE2ADDRESS =	TMPMEMADDRESS
   4810  f747					      endif
   4811  f747				  -	      if	DLINDEX = 3
   4812  f747				  -ZONE3ADDRESS =	TMPMEMADDRESS
   4813  f747					      endif
   4814  f747				  -	      if	DLINDEX = 4
   4815  f747				  -ZONE4ADDRESS =	TMPMEMADDRESS
   4816  f747					      endif
   4817  f747				  -	      if	DLINDEX = 5
   4818  f747				  -ZONE5ADDRESS =	TMPMEMADDRESS
   4819  f747					      endif
   4820  f747				  -	      if	DLINDEX = 6
   4821  f747				  -ZONE6ADDRESS =	TMPMEMADDRESS
   4822  f747					      endif
   4823  f747				  -	      if	DLINDEX = 7
   4824  f747				  -ZONE7ADDRESS =	TMPMEMADDRESS
   4825  f747					      endif
   4826  f747				  -	      if	DLINDEX = 8
   4827  f747				  -ZONE8ADDRESS =	TMPMEMADDRESS
   4828  f747					      endif
   4829  f747				  -	      if	DLINDEX = 9
   4830  f747				  -ZONE9ADDRESS =	TMPMEMADDRESS
   4831  f747					      endif
   4832  f747					      if	DLINDEX = 10
   4833  f747		       1b d8	   ZONE10ADDRESS =	TMPMEMADDRESS
   4834  f747					      endif
   4835  f747				  -	      if	DLINDEX = 11
   4836  f747				  -ZONE11ADDRESS =	TMPMEMADDRESS
   4837  f747					      endif
   4838  f747				  -	      if	DLINDEX = 12
   4839  f747				  -ZONE12ADDRESS =	TMPMEMADDRESS
   4840  f747					      endif
   4841  f747				  -	      if	DLINDEX = 13
   4842  f747				  -ZONE13ADDRESS =	TMPMEMADDRESS
   4843  f747					      endif
   4844  f747				  -	      if	DLINDEX = 14
   4845  f747				  -ZONE14ADDRESS =	TMPMEMADDRESS
   4846  f747					      endif
   4847  f747				  -	      if	DLINDEX = 15
   4848  f747				  -ZONE15ADDRESS =	TMPMEMADDRESS
   4849  f747					      endif
   4850  f747				  -	      if	DLINDEX = 16
   4851  f747				  -ZONE16ADDRESS =	TMPMEMADDRESS
   4852  f747					      endif
   4853  f747				  -	      if	DLINDEX = 17
   4854  f747				  -ZONE17ADDRESS =	TMPMEMADDRESS
   4855  f747					      endif
   4856  f747				  -	      if	DLINDEX = 18
   4857  f747				  -ZONE18ADDRESS =	TMPMEMADDRESS
   4858  f747					      endif
   4859  f747				  -	      if	DLINDEX = 19
   4860  f747				  -ZONE19ADDRESS =	TMPMEMADDRESS
   4861  f747					      endif
   4862  f747				  -	      if	DLINDEX = 20
   4863  f747				  -ZONE20ADDRESS =	TMPMEMADDRESS
   4864  f747					      endif
   4865  f747				  -	      if	DLINDEX = 21
   4866  f747				  -ZONE21ADDRESS =	TMPMEMADDRESS
   4867  f747					      endif
   4868  f747				  -	      if	DLINDEX = 22
   4869  f747				  -ZONE22ADDRESS =	TMPMEMADDRESS
   4870  f747					      endif
   4871  f747				  -	      if	DLINDEX = 23
   4872  f747				  -ZONE23ADDRESS =	TMPMEMADDRESS
   4873  f747					      endif
   4874  f747				  -	      if	DLINDEX = 24
   4875  f747				  -ZONE24ADDRESS =	TMPMEMADDRESS
   4876  f747					      endif
   4877  f747				  -	      if	DLINDEX = 25
   4878  f747				  -ZONE25ADDRESS =	TMPMEMADDRESS
   4879  f747					      endif
   4880  f747				  -	      if	DLINDEX = 26
   4881  f747				  -ZONE26ADDRESS =	TMPMEMADDRESS
   4882  f747					      endif
   4883  f747				  -	      if	DLINDEX = 27
   4884  f747				  -ZONE27ADDRESS =	TMPMEMADDRESS
   4885  f747					      endif
   4886  f747				   DLINDEX    SET	DLINDEX + 1
   4791  f747					      REPEND
   4792  f747				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4793  f747				  -	      ifconst	EXTRADLMEMORY
   4794  f747				  -	      if	TMPMEMADDRESS > $1FFF
   4795  f747				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4796  f747				  -	      else
   4797  f747				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4798  f747				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4799  f747				  -	      endif
   4800  f747				  -	      endif		; TMPMEMADDRESS > $1FFF
   4801  f747					      endif		; EXTRADLMEMORY
   4802  f747				  -	      if	DLINDEX = 0
   4803  f747				  -ZONE0ADDRESS =	TMPMEMADDRESS
   4804  f747					      endif
   4805  f747				  -	      if	DLINDEX = 1
   4806  f747				  -ZONE1ADDRESS =	TMPMEMADDRESS
   4807  f747					      endif
   4808  f747				  -	      if	DLINDEX = 2
   4809  f747				  -ZONE2ADDRESS =	TMPMEMADDRESS
   4810  f747					      endif
   4811  f747				  -	      if	DLINDEX = 3
   4812  f747				  -ZONE3ADDRESS =	TMPMEMADDRESS
   4813  f747					      endif
   4814  f747				  -	      if	DLINDEX = 4
   4815  f747				  -ZONE4ADDRESS =	TMPMEMADDRESS
   4816  f747					      endif
   4817  f747				  -	      if	DLINDEX = 5
   4818  f747				  -ZONE5ADDRESS =	TMPMEMADDRESS
   4819  f747					      endif
   4820  f747				  -	      if	DLINDEX = 6
   4821  f747				  -ZONE6ADDRESS =	TMPMEMADDRESS
   4822  f747					      endif
   4823  f747				  -	      if	DLINDEX = 7
   4824  f747				  -ZONE7ADDRESS =	TMPMEMADDRESS
   4825  f747					      endif
   4826  f747				  -	      if	DLINDEX = 8
   4827  f747				  -ZONE8ADDRESS =	TMPMEMADDRESS
   4828  f747					      endif
   4829  f747				  -	      if	DLINDEX = 9
   4830  f747				  -ZONE9ADDRESS =	TMPMEMADDRESS
   4831  f747					      endif
   4832  f747				  -	      if	DLINDEX = 10
   4833  f747				  -ZONE10ADDRESS =	TMPMEMADDRESS
   4834  f747					      endif
   4835  f747					      if	DLINDEX = 11
   4836  f747		       1c 24	   ZONE11ADDRESS =	TMPMEMADDRESS
   4837  f747					      endif
   4838  f747				  -	      if	DLINDEX = 12
   4839  f747				  -ZONE12ADDRESS =	TMPMEMADDRESS
   4840  f747					      endif
   4841  f747				  -	      if	DLINDEX = 13
   4842  f747				  -ZONE13ADDRESS =	TMPMEMADDRESS
   4843  f747					      endif
   4844  f747				  -	      if	DLINDEX = 14
   4845  f747				  -ZONE14ADDRESS =	TMPMEMADDRESS
   4846  f747					      endif
   4847  f747				  -	      if	DLINDEX = 15
   4848  f747				  -ZONE15ADDRESS =	TMPMEMADDRESS
   4849  f747					      endif
   4850  f747				  -	      if	DLINDEX = 16
   4851  f747				  -ZONE16ADDRESS =	TMPMEMADDRESS
   4852  f747					      endif
   4853  f747				  -	      if	DLINDEX = 17
   4854  f747				  -ZONE17ADDRESS =	TMPMEMADDRESS
   4855  f747					      endif
   4856  f747				  -	      if	DLINDEX = 18
   4857  f747				  -ZONE18ADDRESS =	TMPMEMADDRESS
   4858  f747					      endif
   4859  f747				  -	      if	DLINDEX = 19
   4860  f747				  -ZONE19ADDRESS =	TMPMEMADDRESS
   4861  f747					      endif
   4862  f747				  -	      if	DLINDEX = 20
   4863  f747				  -ZONE20ADDRESS =	TMPMEMADDRESS
   4864  f747					      endif
   4865  f747				  -	      if	DLINDEX = 21
   4866  f747				  -ZONE21ADDRESS =	TMPMEMADDRESS
   4867  f747					      endif
   4868  f747				  -	      if	DLINDEX = 22
   4869  f747				  -ZONE22ADDRESS =	TMPMEMADDRESS
   4870  f747					      endif
   4871  f747				  -	      if	DLINDEX = 23
   4872  f747				  -ZONE23ADDRESS =	TMPMEMADDRESS
   4873  f747					      endif
   4874  f747				  -	      if	DLINDEX = 24
   4875  f747				  -ZONE24ADDRESS =	TMPMEMADDRESS
   4876  f747					      endif
   4877  f747				  -	      if	DLINDEX = 25
   4878  f747				  -ZONE25ADDRESS =	TMPMEMADDRESS
   4879  f747					      endif
   4880  f747				  -	      if	DLINDEX = 26
   4881  f747				  -ZONE26ADDRESS =	TMPMEMADDRESS
   4882  f747					      endif
   4883  f747				  -	      if	DLINDEX = 27
   4884  f747				  -ZONE27ADDRESS =	TMPMEMADDRESS
   4885  f747					      endif
   4886  f747				   DLINDEX    SET	DLINDEX + 1
   4791  f747					      REPEND
   4792  f747				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4793  f747				  -	      ifconst	EXTRADLMEMORY
   4794  f747				  -	      if	TMPMEMADDRESS > $1FFF
   4795  f747				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4796  f747				  -	      else
   4797  f747				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4798  f747				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4799  f747				  -	      endif
   4800  f747				  -	      endif		; TMPMEMADDRESS > $1FFF
   4801  f747					      endif		; EXTRADLMEMORY
   4802  f747				  -	      if	DLINDEX = 0
   4803  f747				  -ZONE0ADDRESS =	TMPMEMADDRESS
   4804  f747					      endif
   4805  f747				  -	      if	DLINDEX = 1
   4806  f747				  -ZONE1ADDRESS =	TMPMEMADDRESS
   4807  f747					      endif
   4808  f747				  -	      if	DLINDEX = 2
   4809  f747				  -ZONE2ADDRESS =	TMPMEMADDRESS
   4810  f747					      endif
   4811  f747				  -	      if	DLINDEX = 3
   4812  f747				  -ZONE3ADDRESS =	TMPMEMADDRESS
   4813  f747					      endif
   4814  f747				  -	      if	DLINDEX = 4
   4815  f747				  -ZONE4ADDRESS =	TMPMEMADDRESS
   4816  f747					      endif
   4817  f747				  -	      if	DLINDEX = 5
   4818  f747				  -ZONE5ADDRESS =	TMPMEMADDRESS
   4819  f747					      endif
   4820  f747				  -	      if	DLINDEX = 6
   4821  f747				  -ZONE6ADDRESS =	TMPMEMADDRESS
   4822  f747					      endif
   4823  f747				  -	      if	DLINDEX = 7
   4824  f747				  -ZONE7ADDRESS =	TMPMEMADDRESS
   4825  f747					      endif
   4826  f747				  -	      if	DLINDEX = 8
   4827  f747				  -ZONE8ADDRESS =	TMPMEMADDRESS
   4828  f747					      endif
   4829  f747				  -	      if	DLINDEX = 9
   4830  f747				  -ZONE9ADDRESS =	TMPMEMADDRESS
   4831  f747					      endif
   4832  f747				  -	      if	DLINDEX = 10
   4833  f747				  -ZONE10ADDRESS =	TMPMEMADDRESS
   4834  f747					      endif
   4835  f747				  -	      if	DLINDEX = 11
   4836  f747				  -ZONE11ADDRESS =	TMPMEMADDRESS
   4837  f747					      endif
   4838  f747					      if	DLINDEX = 12
   4839  f747		       1c 70	   ZONE12ADDRESS =	TMPMEMADDRESS
   4840  f747					      endif
   4841  f747				  -	      if	DLINDEX = 13
   4842  f747				  -ZONE13ADDRESS =	TMPMEMADDRESS
   4843  f747					      endif
   4844  f747				  -	      if	DLINDEX = 14
   4845  f747				  -ZONE14ADDRESS =	TMPMEMADDRESS
   4846  f747					      endif
   4847  f747				  -	      if	DLINDEX = 15
   4848  f747				  -ZONE15ADDRESS =	TMPMEMADDRESS
   4849  f747					      endif
   4850  f747				  -	      if	DLINDEX = 16
   4851  f747				  -ZONE16ADDRESS =	TMPMEMADDRESS
   4852  f747					      endif
   4853  f747				  -	      if	DLINDEX = 17
   4854  f747				  -ZONE17ADDRESS =	TMPMEMADDRESS
   4855  f747					      endif
   4856  f747				  -	      if	DLINDEX = 18
   4857  f747				  -ZONE18ADDRESS =	TMPMEMADDRESS
   4858  f747					      endif
   4859  f747				  -	      if	DLINDEX = 19
   4860  f747				  -ZONE19ADDRESS =	TMPMEMADDRESS
   4861  f747					      endif
   4862  f747				  -	      if	DLINDEX = 20
   4863  f747				  -ZONE20ADDRESS =	TMPMEMADDRESS
   4864  f747					      endif
   4865  f747				  -	      if	DLINDEX = 21
   4866  f747				  -ZONE21ADDRESS =	TMPMEMADDRESS
   4867  f747					      endif
   4868  f747				  -	      if	DLINDEX = 22
   4869  f747				  -ZONE22ADDRESS =	TMPMEMADDRESS
   4870  f747					      endif
   4871  f747				  -	      if	DLINDEX = 23
   4872  f747				  -ZONE23ADDRESS =	TMPMEMADDRESS
   4873  f747					      endif
   4874  f747				  -	      if	DLINDEX = 24
   4875  f747				  -ZONE24ADDRESS =	TMPMEMADDRESS
   4876  f747					      endif
   4877  f747				  -	      if	DLINDEX = 25
   4878  f747				  -ZONE25ADDRESS =	TMPMEMADDRESS
   4879  f747					      endif
   4880  f747				  -	      if	DLINDEX = 26
   4881  f747				  -ZONE26ADDRESS =	TMPMEMADDRESS
   4882  f747					      endif
   4883  f747				  -	      if	DLINDEX = 27
   4884  f747				  -ZONE27ADDRESS =	TMPMEMADDRESS
   4885  f747					      endif
   4886  f747				   DLINDEX    SET	DLINDEX + 1
   4791  f747					      REPEND
   4792  f747				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4793  f747				  -	      ifconst	EXTRADLMEMORY
   4794  f747				  -	      if	TMPMEMADDRESS > $1FFF
   4795  f747				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4796  f747				  -	      else
   4797  f747				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4798  f747				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4799  f747				  -	      endif
   4800  f747				  -	      endif		; TMPMEMADDRESS > $1FFF
   4801  f747					      endif		; EXTRADLMEMORY
   4802  f747				  -	      if	DLINDEX = 0
   4803  f747				  -ZONE0ADDRESS =	TMPMEMADDRESS
   4804  f747					      endif
   4805  f747				  -	      if	DLINDEX = 1
   4806  f747				  -ZONE1ADDRESS =	TMPMEMADDRESS
   4807  f747					      endif
   4808  f747				  -	      if	DLINDEX = 2
   4809  f747				  -ZONE2ADDRESS =	TMPMEMADDRESS
   4810  f747					      endif
   4811  f747				  -	      if	DLINDEX = 3
   4812  f747				  -ZONE3ADDRESS =	TMPMEMADDRESS
   4813  f747					      endif
   4814  f747				  -	      if	DLINDEX = 4
   4815  f747				  -ZONE4ADDRESS =	TMPMEMADDRESS
   4816  f747					      endif
   4817  f747				  -	      if	DLINDEX = 5
   4818  f747				  -ZONE5ADDRESS =	TMPMEMADDRESS
   4819  f747					      endif
   4820  f747				  -	      if	DLINDEX = 6
   4821  f747				  -ZONE6ADDRESS =	TMPMEMADDRESS
   4822  f747					      endif
   4823  f747				  -	      if	DLINDEX = 7
   4824  f747				  -ZONE7ADDRESS =	TMPMEMADDRESS
   4825  f747					      endif
   4826  f747				  -	      if	DLINDEX = 8
   4827  f747				  -ZONE8ADDRESS =	TMPMEMADDRESS
   4828  f747					      endif
   4829  f747				  -	      if	DLINDEX = 9
   4830  f747				  -ZONE9ADDRESS =	TMPMEMADDRESS
   4831  f747					      endif
   4832  f747				  -	      if	DLINDEX = 10
   4833  f747				  -ZONE10ADDRESS =	TMPMEMADDRESS
   4834  f747					      endif
   4835  f747				  -	      if	DLINDEX = 11
   4836  f747				  -ZONE11ADDRESS =	TMPMEMADDRESS
   4837  f747					      endif
   4838  f747				  -	      if	DLINDEX = 12
   4839  f747				  -ZONE12ADDRESS =	TMPMEMADDRESS
   4840  f747					      endif
   4841  f747					      if	DLINDEX = 13
   4842  f747		       1c bc	   ZONE13ADDRESS =	TMPMEMADDRESS
   4843  f747					      endif
   4844  f747				  -	      if	DLINDEX = 14
   4845  f747				  -ZONE14ADDRESS =	TMPMEMADDRESS
   4846  f747					      endif
   4847  f747				  -	      if	DLINDEX = 15
   4848  f747				  -ZONE15ADDRESS =	TMPMEMADDRESS
   4849  f747					      endif
   4850  f747				  -	      if	DLINDEX = 16
   4851  f747				  -ZONE16ADDRESS =	TMPMEMADDRESS
   4852  f747					      endif
   4853  f747				  -	      if	DLINDEX = 17
   4854  f747				  -ZONE17ADDRESS =	TMPMEMADDRESS
   4855  f747					      endif
   4856  f747				  -	      if	DLINDEX = 18
   4857  f747				  -ZONE18ADDRESS =	TMPMEMADDRESS
   4858  f747					      endif
   4859  f747				  -	      if	DLINDEX = 19
   4860  f747				  -ZONE19ADDRESS =	TMPMEMADDRESS
   4861  f747					      endif
   4862  f747				  -	      if	DLINDEX = 20
   4863  f747				  -ZONE20ADDRESS =	TMPMEMADDRESS
   4864  f747					      endif
   4865  f747				  -	      if	DLINDEX = 21
   4866  f747				  -ZONE21ADDRESS =	TMPMEMADDRESS
   4867  f747					      endif
   4868  f747				  -	      if	DLINDEX = 22
   4869  f747				  -ZONE22ADDRESS =	TMPMEMADDRESS
   4870  f747					      endif
   4871  f747				  -	      if	DLINDEX = 23
   4872  f747				  -ZONE23ADDRESS =	TMPMEMADDRESS
   4873  f747					      endif
   4874  f747				  -	      if	DLINDEX = 24
   4875  f747				  -ZONE24ADDRESS =	TMPMEMADDRESS
   4876  f747					      endif
   4877  f747				  -	      if	DLINDEX = 25
   4878  f747				  -ZONE25ADDRESS =	TMPMEMADDRESS
   4879  f747					      endif
   4880  f747				  -	      if	DLINDEX = 26
   4881  f747				  -ZONE26ADDRESS =	TMPMEMADDRESS
   4882  f747					      endif
   4883  f747				  -	      if	DLINDEX = 27
   4884  f747				  -ZONE27ADDRESS =	TMPMEMADDRESS
   4885  f747					      endif
   4886  f747				   DLINDEX    SET	DLINDEX + 1
   4791  f747					      REPEND
   4792  f747				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4793  f747				  -	      ifconst	EXTRADLMEMORY
   4794  f747				  -	      if	TMPMEMADDRESS > $1FFF
   4795  f747				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4796  f747				  -	      else
   4797  f747				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4798  f747				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4799  f747				  -	      endif
   4800  f747				  -	      endif		; TMPMEMADDRESS > $1FFF
   4801  f747					      endif		; EXTRADLMEMORY
   4802  f747				  -	      if	DLINDEX = 0
   4803  f747				  -ZONE0ADDRESS =	TMPMEMADDRESS
   4804  f747					      endif
   4805  f747				  -	      if	DLINDEX = 1
   4806  f747				  -ZONE1ADDRESS =	TMPMEMADDRESS
   4807  f747					      endif
   4808  f747				  -	      if	DLINDEX = 2
   4809  f747				  -ZONE2ADDRESS =	TMPMEMADDRESS
   4810  f747					      endif
   4811  f747				  -	      if	DLINDEX = 3
   4812  f747				  -ZONE3ADDRESS =	TMPMEMADDRESS
   4813  f747					      endif
   4814  f747				  -	      if	DLINDEX = 4
   4815  f747				  -ZONE4ADDRESS =	TMPMEMADDRESS
   4816  f747					      endif
   4817  f747				  -	      if	DLINDEX = 5
   4818  f747				  -ZONE5ADDRESS =	TMPMEMADDRESS
   4819  f747					      endif
   4820  f747				  -	      if	DLINDEX = 6
   4821  f747				  -ZONE6ADDRESS =	TMPMEMADDRESS
   4822  f747					      endif
   4823  f747				  -	      if	DLINDEX = 7
   4824  f747				  -ZONE7ADDRESS =	TMPMEMADDRESS
   4825  f747					      endif
   4826  f747				  -	      if	DLINDEX = 8
   4827  f747				  -ZONE8ADDRESS =	TMPMEMADDRESS
   4828  f747					      endif
   4829  f747				  -	      if	DLINDEX = 9
   4830  f747				  -ZONE9ADDRESS =	TMPMEMADDRESS
   4831  f747					      endif
   4832  f747				  -	      if	DLINDEX = 10
   4833  f747				  -ZONE10ADDRESS =	TMPMEMADDRESS
   4834  f747					      endif
   4835  f747				  -	      if	DLINDEX = 11
   4836  f747				  -ZONE11ADDRESS =	TMPMEMADDRESS
   4837  f747					      endif
   4838  f747				  -	      if	DLINDEX = 12
   4839  f747				  -ZONE12ADDRESS =	TMPMEMADDRESS
   4840  f747					      endif
   4841  f747				  -	      if	DLINDEX = 13
   4842  f747				  -ZONE13ADDRESS =	TMPMEMADDRESS
   4843  f747					      endif
   4844  f747					      if	DLINDEX = 14
   4845  f747		       1d 08	   ZONE14ADDRESS =	TMPMEMADDRESS
   4846  f747					      endif
   4847  f747				  -	      if	DLINDEX = 15
   4848  f747				  -ZONE15ADDRESS =	TMPMEMADDRESS
   4849  f747					      endif
   4850  f747				  -	      if	DLINDEX = 16
   4851  f747				  -ZONE16ADDRESS =	TMPMEMADDRESS
   4852  f747					      endif
   4853  f747				  -	      if	DLINDEX = 17
   4854  f747				  -ZONE17ADDRESS =	TMPMEMADDRESS
   4855  f747					      endif
   4856  f747				  -	      if	DLINDEX = 18
   4857  f747				  -ZONE18ADDRESS =	TMPMEMADDRESS
   4858  f747					      endif
   4859  f747				  -	      if	DLINDEX = 19
   4860  f747				  -ZONE19ADDRESS =	TMPMEMADDRESS
   4861  f747					      endif
   4862  f747				  -	      if	DLINDEX = 20
   4863  f747				  -ZONE20ADDRESS =	TMPMEMADDRESS
   4864  f747					      endif
   4865  f747				  -	      if	DLINDEX = 21
   4866  f747				  -ZONE21ADDRESS =	TMPMEMADDRESS
   4867  f747					      endif
   4868  f747				  -	      if	DLINDEX = 22
   4869  f747				  -ZONE22ADDRESS =	TMPMEMADDRESS
   4870  f747					      endif
   4871  f747				  -	      if	DLINDEX = 23
   4872  f747				  -ZONE23ADDRESS =	TMPMEMADDRESS
   4873  f747					      endif
   4874  f747				  -	      if	DLINDEX = 24
   4875  f747				  -ZONE24ADDRESS =	TMPMEMADDRESS
   4876  f747					      endif
   4877  f747				  -	      if	DLINDEX = 25
   4878  f747				  -ZONE25ADDRESS =	TMPMEMADDRESS
   4879  f747					      endif
   4880  f747				  -	      if	DLINDEX = 26
   4881  f747				  -ZONE26ADDRESS =	TMPMEMADDRESS
   4882  f747					      endif
   4883  f747				  -	      if	DLINDEX = 27
   4884  f747				  -ZONE27ADDRESS =	TMPMEMADDRESS
   4885  f747					      endif
   4886  f747				   DLINDEX    SET	DLINDEX + 1
   4791  f747					      REPEND
   4792  f747				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4793  f747				  -	      ifconst	EXTRADLMEMORY
   4794  f747				  -	      if	TMPMEMADDRESS > $1FFF
   4795  f747				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4796  f747				  -	      else
   4797  f747				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4798  f747				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4799  f747				  -	      endif
   4800  f747				  -	      endif		; TMPMEMADDRESS > $1FFF
   4801  f747					      endif		; EXTRADLMEMORY
   4802  f747				  -	      if	DLINDEX = 0
   4803  f747				  -ZONE0ADDRESS =	TMPMEMADDRESS
   4804  f747					      endif
   4805  f747				  -	      if	DLINDEX = 1
   4806  f747				  -ZONE1ADDRESS =	TMPMEMADDRESS
   4807  f747					      endif
   4808  f747				  -	      if	DLINDEX = 2
   4809  f747				  -ZONE2ADDRESS =	TMPMEMADDRESS
   4810  f747					      endif
   4811  f747				  -	      if	DLINDEX = 3
   4812  f747				  -ZONE3ADDRESS =	TMPMEMADDRESS
   4813  f747					      endif
   4814  f747				  -	      if	DLINDEX = 4
   4815  f747				  -ZONE4ADDRESS =	TMPMEMADDRESS
   4816  f747					      endif
   4817  f747				  -	      if	DLINDEX = 5
   4818  f747				  -ZONE5ADDRESS =	TMPMEMADDRESS
   4819  f747					      endif
   4820  f747				  -	      if	DLINDEX = 6
   4821  f747				  -ZONE6ADDRESS =	TMPMEMADDRESS
   4822  f747					      endif
   4823  f747				  -	      if	DLINDEX = 7
   4824  f747				  -ZONE7ADDRESS =	TMPMEMADDRESS
   4825  f747					      endif
   4826  f747				  -	      if	DLINDEX = 8
   4827  f747				  -ZONE8ADDRESS =	TMPMEMADDRESS
   4828  f747					      endif
   4829  f747				  -	      if	DLINDEX = 9
   4830  f747				  -ZONE9ADDRESS =	TMPMEMADDRESS
   4831  f747					      endif
   4832  f747				  -	      if	DLINDEX = 10
   4833  f747				  -ZONE10ADDRESS =	TMPMEMADDRESS
   4834  f747					      endif
   4835  f747				  -	      if	DLINDEX = 11
   4836  f747				  -ZONE11ADDRESS =	TMPMEMADDRESS
   4837  f747					      endif
   4838  f747				  -	      if	DLINDEX = 12
   4839  f747				  -ZONE12ADDRESS =	TMPMEMADDRESS
   4840  f747					      endif
   4841  f747				  -	      if	DLINDEX = 13
   4842  f747				  -ZONE13ADDRESS =	TMPMEMADDRESS
   4843  f747					      endif
   4844  f747				  -	      if	DLINDEX = 14
   4845  f747				  -ZONE14ADDRESS =	TMPMEMADDRESS
   4846  f747					      endif
   4847  f747					      if	DLINDEX = 15
   4848  f747		       1d 54	   ZONE15ADDRESS =	TMPMEMADDRESS
   4849  f747					      endif
   4850  f747				  -	      if	DLINDEX = 16
   4851  f747				  -ZONE16ADDRESS =	TMPMEMADDRESS
   4852  f747					      endif
   4853  f747				  -	      if	DLINDEX = 17
   4854  f747				  -ZONE17ADDRESS =	TMPMEMADDRESS
   4855  f747					      endif
   4856  f747				  -	      if	DLINDEX = 18
   4857  f747				  -ZONE18ADDRESS =	TMPMEMADDRESS
   4858  f747					      endif
   4859  f747				  -	      if	DLINDEX = 19
   4860  f747				  -ZONE19ADDRESS =	TMPMEMADDRESS
   4861  f747					      endif
   4862  f747				  -	      if	DLINDEX = 20
   4863  f747				  -ZONE20ADDRESS =	TMPMEMADDRESS
   4864  f747					      endif
   4865  f747				  -	      if	DLINDEX = 21
   4866  f747				  -ZONE21ADDRESS =	TMPMEMADDRESS
   4867  f747					      endif
   4868  f747				  -	      if	DLINDEX = 22
   4869  f747				  -ZONE22ADDRESS =	TMPMEMADDRESS
   4870  f747					      endif
   4871  f747				  -	      if	DLINDEX = 23
   4872  f747				  -ZONE23ADDRESS =	TMPMEMADDRESS
   4873  f747					      endif
   4874  f747				  -	      if	DLINDEX = 24
   4875  f747				  -ZONE24ADDRESS =	TMPMEMADDRESS
   4876  f747					      endif
   4877  f747				  -	      if	DLINDEX = 25
   4878  f747				  -ZONE25ADDRESS =	TMPMEMADDRESS
   4879  f747					      endif
   4880  f747				  -	      if	DLINDEX = 26
   4881  f747				  -ZONE26ADDRESS =	TMPMEMADDRESS
   4882  f747					      endif
   4883  f747				  -	      if	DLINDEX = 27
   4884  f747				  -ZONE27ADDRESS =	TMPMEMADDRESS
   4885  f747					      endif
   4886  f747				   DLINDEX    SET	DLINDEX + 1
   4791  f747					      REPEND
   4792  f747				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4793  f747				  -	      ifconst	EXTRADLMEMORY
   4794  f747				  -	      if	TMPMEMADDRESS > $1FFF
   4795  f747				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4796  f747				  -	      else
   4797  f747				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4798  f747				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4799  f747				  -	      endif
   4800  f747				  -	      endif		; TMPMEMADDRESS > $1FFF
   4801  f747					      endif		; EXTRADLMEMORY
   4802  f747				  -	      if	DLINDEX = 0
   4803  f747				  -ZONE0ADDRESS =	TMPMEMADDRESS
   4804  f747					      endif
   4805  f747				  -	      if	DLINDEX = 1
   4806  f747				  -ZONE1ADDRESS =	TMPMEMADDRESS
   4807  f747					      endif
   4808  f747				  -	      if	DLINDEX = 2
   4809  f747				  -ZONE2ADDRESS =	TMPMEMADDRESS
   4810  f747					      endif
   4811  f747				  -	      if	DLINDEX = 3
   4812  f747				  -ZONE3ADDRESS =	TMPMEMADDRESS
   4813  f747					      endif
   4814  f747				  -	      if	DLINDEX = 4
   4815  f747				  -ZONE4ADDRESS =	TMPMEMADDRESS
   4816  f747					      endif
   4817  f747				  -	      if	DLINDEX = 5
   4818  f747				  -ZONE5ADDRESS =	TMPMEMADDRESS
   4819  f747					      endif
   4820  f747				  -	      if	DLINDEX = 6
   4821  f747				  -ZONE6ADDRESS =	TMPMEMADDRESS
   4822  f747					      endif
   4823  f747				  -	      if	DLINDEX = 7
   4824  f747				  -ZONE7ADDRESS =	TMPMEMADDRESS
   4825  f747					      endif
   4826  f747				  -	      if	DLINDEX = 8
   4827  f747				  -ZONE8ADDRESS =	TMPMEMADDRESS
   4828  f747					      endif
   4829  f747				  -	      if	DLINDEX = 9
   4830  f747				  -ZONE9ADDRESS =	TMPMEMADDRESS
   4831  f747					      endif
   4832  f747				  -	      if	DLINDEX = 10
   4833  f747				  -ZONE10ADDRESS =	TMPMEMADDRESS
   4834  f747					      endif
   4835  f747				  -	      if	DLINDEX = 11
   4836  f747				  -ZONE11ADDRESS =	TMPMEMADDRESS
   4837  f747					      endif
   4838  f747				  -	      if	DLINDEX = 12
   4839  f747				  -ZONE12ADDRESS =	TMPMEMADDRESS
   4840  f747					      endif
   4841  f747				  -	      if	DLINDEX = 13
   4842  f747				  -ZONE13ADDRESS =	TMPMEMADDRESS
   4843  f747					      endif
   4844  f747				  -	      if	DLINDEX = 14
   4845  f747				  -ZONE14ADDRESS =	TMPMEMADDRESS
   4846  f747					      endif
   4847  f747				  -	      if	DLINDEX = 15
   4848  f747				  -ZONE15ADDRESS =	TMPMEMADDRESS
   4849  f747					      endif
   4850  f747					      if	DLINDEX = 16
   4851  f747		       1d a0	   ZONE16ADDRESS =	TMPMEMADDRESS
   4852  f747					      endif
   4853  f747				  -	      if	DLINDEX = 17
   4854  f747				  -ZONE17ADDRESS =	TMPMEMADDRESS
   4855  f747					      endif
   4856  f747				  -	      if	DLINDEX = 18
   4857  f747				  -ZONE18ADDRESS =	TMPMEMADDRESS
   4858  f747					      endif
   4859  f747				  -	      if	DLINDEX = 19
   4860  f747				  -ZONE19ADDRESS =	TMPMEMADDRESS
   4861  f747					      endif
   4862  f747				  -	      if	DLINDEX = 20
   4863  f747				  -ZONE20ADDRESS =	TMPMEMADDRESS
   4864  f747					      endif
   4865  f747				  -	      if	DLINDEX = 21
   4866  f747				  -ZONE21ADDRESS =	TMPMEMADDRESS
   4867  f747					      endif
   4868  f747				  -	      if	DLINDEX = 22
   4869  f747				  -ZONE22ADDRESS =	TMPMEMADDRESS
   4870  f747					      endif
   4871  f747				  -	      if	DLINDEX = 23
   4872  f747				  -ZONE23ADDRESS =	TMPMEMADDRESS
   4873  f747					      endif
   4874  f747				  -	      if	DLINDEX = 24
   4875  f747				  -ZONE24ADDRESS =	TMPMEMADDRESS
   4876  f747					      endif
   4877  f747				  -	      if	DLINDEX = 25
   4878  f747				  -ZONE25ADDRESS =	TMPMEMADDRESS
   4879  f747					      endif
   4880  f747				  -	      if	DLINDEX = 26
   4881  f747				  -ZONE26ADDRESS =	TMPMEMADDRESS
   4882  f747					      endif
   4883  f747				  -	      if	DLINDEX = 27
   4884  f747				  -ZONE27ADDRESS =	TMPMEMADDRESS
   4885  f747					      endif
   4886  f747				   DLINDEX    SET	DLINDEX + 1
   4791  f747					      REPEND
   4792  f747				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4793  f747				  -	      ifconst	EXTRADLMEMORY
   4794  f747				  -	      if	TMPMEMADDRESS > $1FFF
   4795  f747				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4796  f747				  -	      else
   4797  f747				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4798  f747				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4799  f747				  -	      endif
   4800  f747				  -	      endif		; TMPMEMADDRESS > $1FFF
   4801  f747					      endif		; EXTRADLMEMORY
   4802  f747				  -	      if	DLINDEX = 0
   4803  f747				  -ZONE0ADDRESS =	TMPMEMADDRESS
   4804  f747					      endif
   4805  f747				  -	      if	DLINDEX = 1
   4806  f747				  -ZONE1ADDRESS =	TMPMEMADDRESS
   4807  f747					      endif
   4808  f747				  -	      if	DLINDEX = 2
   4809  f747				  -ZONE2ADDRESS =	TMPMEMADDRESS
   4810  f747					      endif
   4811  f747				  -	      if	DLINDEX = 3
   4812  f747				  -ZONE3ADDRESS =	TMPMEMADDRESS
   4813  f747					      endif
   4814  f747				  -	      if	DLINDEX = 4
   4815  f747				  -ZONE4ADDRESS =	TMPMEMADDRESS
   4816  f747					      endif
   4817  f747				  -	      if	DLINDEX = 5
   4818  f747				  -ZONE5ADDRESS =	TMPMEMADDRESS
   4819  f747					      endif
   4820  f747				  -	      if	DLINDEX = 6
   4821  f747				  -ZONE6ADDRESS =	TMPMEMADDRESS
   4822  f747					      endif
   4823  f747				  -	      if	DLINDEX = 7
   4824  f747				  -ZONE7ADDRESS =	TMPMEMADDRESS
   4825  f747					      endif
   4826  f747				  -	      if	DLINDEX = 8
   4827  f747				  -ZONE8ADDRESS =	TMPMEMADDRESS
   4828  f747					      endif
   4829  f747				  -	      if	DLINDEX = 9
   4830  f747				  -ZONE9ADDRESS =	TMPMEMADDRESS
   4831  f747					      endif
   4832  f747				  -	      if	DLINDEX = 10
   4833  f747				  -ZONE10ADDRESS =	TMPMEMADDRESS
   4834  f747					      endif
   4835  f747				  -	      if	DLINDEX = 11
   4836  f747				  -ZONE11ADDRESS =	TMPMEMADDRESS
   4837  f747					      endif
   4838  f747				  -	      if	DLINDEX = 12
   4839  f747				  -ZONE12ADDRESS =	TMPMEMADDRESS
   4840  f747					      endif
   4841  f747				  -	      if	DLINDEX = 13
   4842  f747				  -ZONE13ADDRESS =	TMPMEMADDRESS
   4843  f747					      endif
   4844  f747				  -	      if	DLINDEX = 14
   4845  f747				  -ZONE14ADDRESS =	TMPMEMADDRESS
   4846  f747					      endif
   4847  f747				  -	      if	DLINDEX = 15
   4848  f747				  -ZONE15ADDRESS =	TMPMEMADDRESS
   4849  f747					      endif
   4850  f747				  -	      if	DLINDEX = 16
   4851  f747				  -ZONE16ADDRESS =	TMPMEMADDRESS
   4852  f747					      endif
   4853  f747					      if	DLINDEX = 17
   4854  f747		       1d ec	   ZONE17ADDRESS =	TMPMEMADDRESS
   4855  f747					      endif
   4856  f747				  -	      if	DLINDEX = 18
   4857  f747				  -ZONE18ADDRESS =	TMPMEMADDRESS
   4858  f747					      endif
   4859  f747				  -	      if	DLINDEX = 19
   4860  f747				  -ZONE19ADDRESS =	TMPMEMADDRESS
   4861  f747					      endif
   4862  f747				  -	      if	DLINDEX = 20
   4863  f747				  -ZONE20ADDRESS =	TMPMEMADDRESS
   4864  f747					      endif
   4865  f747				  -	      if	DLINDEX = 21
   4866  f747				  -ZONE21ADDRESS =	TMPMEMADDRESS
   4867  f747					      endif
   4868  f747				  -	      if	DLINDEX = 22
   4869  f747				  -ZONE22ADDRESS =	TMPMEMADDRESS
   4870  f747					      endif
   4871  f747				  -	      if	DLINDEX = 23
   4872  f747				  -ZONE23ADDRESS =	TMPMEMADDRESS
   4873  f747					      endif
   4874  f747				  -	      if	DLINDEX = 24
   4875  f747				  -ZONE24ADDRESS =	TMPMEMADDRESS
   4876  f747					      endif
   4877  f747				  -	      if	DLINDEX = 25
   4878  f747				  -ZONE25ADDRESS =	TMPMEMADDRESS
   4879  f747					      endif
   4880  f747				  -	      if	DLINDEX = 26
   4881  f747				  -ZONE26ADDRESS =	TMPMEMADDRESS
   4882  f747					      endif
   4883  f747				  -	      if	DLINDEX = 27
   4884  f747				  -ZONE27ADDRESS =	TMPMEMADDRESS
   4885  f747					      endif
   4886  f747				   DLINDEX    SET	DLINDEX + 1
   4791  f747					      REPEND
   4792  f747				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4793  f747				  -	      ifconst	EXTRADLMEMORY
   4794  f747				  -	      if	TMPMEMADDRESS > $1FFF
   4795  f747				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4796  f747				  -	      else
   4797  f747				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4798  f747				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4799  f747				  -	      endif
   4800  f747				  -	      endif		; TMPMEMADDRESS > $1FFF
   4801  f747					      endif		; EXTRADLMEMORY
   4802  f747				  -	      if	DLINDEX = 0
   4803  f747				  -ZONE0ADDRESS =	TMPMEMADDRESS
   4804  f747					      endif
   4805  f747				  -	      if	DLINDEX = 1
   4806  f747				  -ZONE1ADDRESS =	TMPMEMADDRESS
   4807  f747					      endif
   4808  f747				  -	      if	DLINDEX = 2
   4809  f747				  -ZONE2ADDRESS =	TMPMEMADDRESS
   4810  f747					      endif
   4811  f747				  -	      if	DLINDEX = 3
   4812  f747				  -ZONE3ADDRESS =	TMPMEMADDRESS
   4813  f747					      endif
   4814  f747				  -	      if	DLINDEX = 4
   4815  f747				  -ZONE4ADDRESS =	TMPMEMADDRESS
   4816  f747					      endif
   4817  f747				  -	      if	DLINDEX = 5
   4818  f747				  -ZONE5ADDRESS =	TMPMEMADDRESS
   4819  f747					      endif
   4820  f747				  -	      if	DLINDEX = 6
   4821  f747				  -ZONE6ADDRESS =	TMPMEMADDRESS
   4822  f747					      endif
   4823  f747				  -	      if	DLINDEX = 7
   4824  f747				  -ZONE7ADDRESS =	TMPMEMADDRESS
   4825  f747					      endif
   4826  f747				  -	      if	DLINDEX = 8
   4827  f747				  -ZONE8ADDRESS =	TMPMEMADDRESS
   4828  f747					      endif
   4829  f747				  -	      if	DLINDEX = 9
   4830  f747				  -ZONE9ADDRESS =	TMPMEMADDRESS
   4831  f747					      endif
   4832  f747				  -	      if	DLINDEX = 10
   4833  f747				  -ZONE10ADDRESS =	TMPMEMADDRESS
   4834  f747					      endif
   4835  f747				  -	      if	DLINDEX = 11
   4836  f747				  -ZONE11ADDRESS =	TMPMEMADDRESS
   4837  f747					      endif
   4838  f747				  -	      if	DLINDEX = 12
   4839  f747				  -ZONE12ADDRESS =	TMPMEMADDRESS
   4840  f747					      endif
   4841  f747				  -	      if	DLINDEX = 13
   4842  f747				  -ZONE13ADDRESS =	TMPMEMADDRESS
   4843  f747					      endif
   4844  f747				  -	      if	DLINDEX = 14
   4845  f747				  -ZONE14ADDRESS =	TMPMEMADDRESS
   4846  f747					      endif
   4847  f747				  -	      if	DLINDEX = 15
   4848  f747				  -ZONE15ADDRESS =	TMPMEMADDRESS
   4849  f747					      endif
   4850  f747				  -	      if	DLINDEX = 16
   4851  f747				  -ZONE16ADDRESS =	TMPMEMADDRESS
   4852  f747					      endif
   4853  f747				  -	      if	DLINDEX = 17
   4854  f747				  -ZONE17ADDRESS =	TMPMEMADDRESS
   4855  f747					      endif
   4856  f747					      if	DLINDEX = 18
   4857  f747		       1e 38	   ZONE18ADDRESS =	TMPMEMADDRESS
   4858  f747					      endif
   4859  f747				  -	      if	DLINDEX = 19
   4860  f747				  -ZONE19ADDRESS =	TMPMEMADDRESS
   4861  f747					      endif
   4862  f747				  -	      if	DLINDEX = 20
   4863  f747				  -ZONE20ADDRESS =	TMPMEMADDRESS
   4864  f747					      endif
   4865  f747				  -	      if	DLINDEX = 21
   4866  f747				  -ZONE21ADDRESS =	TMPMEMADDRESS
   4867  f747					      endif
   4868  f747				  -	      if	DLINDEX = 22
   4869  f747				  -ZONE22ADDRESS =	TMPMEMADDRESS
   4870  f747					      endif
   4871  f747				  -	      if	DLINDEX = 23
   4872  f747				  -ZONE23ADDRESS =	TMPMEMADDRESS
   4873  f747					      endif
   4874  f747				  -	      if	DLINDEX = 24
   4875  f747				  -ZONE24ADDRESS =	TMPMEMADDRESS
   4876  f747					      endif
   4877  f747				  -	      if	DLINDEX = 25
   4878  f747				  -ZONE25ADDRESS =	TMPMEMADDRESS
   4879  f747					      endif
   4880  f747				  -	      if	DLINDEX = 26
   4881  f747				  -ZONE26ADDRESS =	TMPMEMADDRESS
   4882  f747					      endif
   4883  f747				  -	      if	DLINDEX = 27
   4884  f747				  -ZONE27ADDRESS =	TMPMEMADDRESS
   4885  f747					      endif
   4886  f747				   DLINDEX    SET	DLINDEX + 1
   4791  f747					      REPEND
   4792  f747				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4793  f747				  -	      ifconst	EXTRADLMEMORY
   4794  f747				  -	      if	TMPMEMADDRESS > $1FFF
   4795  f747				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4796  f747				  -	      else
   4797  f747				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4798  f747				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4799  f747				  -	      endif
   4800  f747				  -	      endif		; TMPMEMADDRESS > $1FFF
   4801  f747					      endif		; EXTRADLMEMORY
   4802  f747				  -	      if	DLINDEX = 0
   4803  f747				  -ZONE0ADDRESS =	TMPMEMADDRESS
   4804  f747					      endif
   4805  f747				  -	      if	DLINDEX = 1
   4806  f747				  -ZONE1ADDRESS =	TMPMEMADDRESS
   4807  f747					      endif
   4808  f747				  -	      if	DLINDEX = 2
   4809  f747				  -ZONE2ADDRESS =	TMPMEMADDRESS
   4810  f747					      endif
   4811  f747				  -	      if	DLINDEX = 3
   4812  f747				  -ZONE3ADDRESS =	TMPMEMADDRESS
   4813  f747					      endif
   4814  f747				  -	      if	DLINDEX = 4
   4815  f747				  -ZONE4ADDRESS =	TMPMEMADDRESS
   4816  f747					      endif
   4817  f747				  -	      if	DLINDEX = 5
   4818  f747				  -ZONE5ADDRESS =	TMPMEMADDRESS
   4819  f747					      endif
   4820  f747				  -	      if	DLINDEX = 6
   4821  f747				  -ZONE6ADDRESS =	TMPMEMADDRESS
   4822  f747					      endif
   4823  f747				  -	      if	DLINDEX = 7
   4824  f747				  -ZONE7ADDRESS =	TMPMEMADDRESS
   4825  f747					      endif
   4826  f747				  -	      if	DLINDEX = 8
   4827  f747				  -ZONE8ADDRESS =	TMPMEMADDRESS
   4828  f747					      endif
   4829  f747				  -	      if	DLINDEX = 9
   4830  f747				  -ZONE9ADDRESS =	TMPMEMADDRESS
   4831  f747					      endif
   4832  f747				  -	      if	DLINDEX = 10
   4833  f747				  -ZONE10ADDRESS =	TMPMEMADDRESS
   4834  f747					      endif
   4835  f747				  -	      if	DLINDEX = 11
   4836  f747				  -ZONE11ADDRESS =	TMPMEMADDRESS
   4837  f747					      endif
   4838  f747				  -	      if	DLINDEX = 12
   4839  f747				  -ZONE12ADDRESS =	TMPMEMADDRESS
   4840  f747					      endif
   4841  f747				  -	      if	DLINDEX = 13
   4842  f747				  -ZONE13ADDRESS =	TMPMEMADDRESS
   4843  f747					      endif
   4844  f747				  -	      if	DLINDEX = 14
   4845  f747				  -ZONE14ADDRESS =	TMPMEMADDRESS
   4846  f747					      endif
   4847  f747				  -	      if	DLINDEX = 15
   4848  f747				  -ZONE15ADDRESS =	TMPMEMADDRESS
   4849  f747					      endif
   4850  f747				  -	      if	DLINDEX = 16
   4851  f747				  -ZONE16ADDRESS =	TMPMEMADDRESS
   4852  f747					      endif
   4853  f747				  -	      if	DLINDEX = 17
   4854  f747				  -ZONE17ADDRESS =	TMPMEMADDRESS
   4855  f747					      endif
   4856  f747				  -	      if	DLINDEX = 18
   4857  f747				  -ZONE18ADDRESS =	TMPMEMADDRESS
   4858  f747					      endif
   4859  f747					      if	DLINDEX = 19
   4860  f747		       1e 84	   ZONE19ADDRESS =	TMPMEMADDRESS
   4861  f747					      endif
   4862  f747				  -	      if	DLINDEX = 20
   4863  f747				  -ZONE20ADDRESS =	TMPMEMADDRESS
   4864  f747					      endif
   4865  f747				  -	      if	DLINDEX = 21
   4866  f747				  -ZONE21ADDRESS =	TMPMEMADDRESS
   4867  f747					      endif
   4868  f747				  -	      if	DLINDEX = 22
   4869  f747				  -ZONE22ADDRESS =	TMPMEMADDRESS
   4870  f747					      endif
   4871  f747				  -	      if	DLINDEX = 23
   4872  f747				  -ZONE23ADDRESS =	TMPMEMADDRESS
   4873  f747					      endif
   4874  f747				  -	      if	DLINDEX = 24
   4875  f747				  -ZONE24ADDRESS =	TMPMEMADDRESS
   4876  f747					      endif
   4877  f747				  -	      if	DLINDEX = 25
   4878  f747				  -ZONE25ADDRESS =	TMPMEMADDRESS
   4879  f747					      endif
   4880  f747				  -	      if	DLINDEX = 26
   4881  f747				  -ZONE26ADDRESS =	TMPMEMADDRESS
   4882  f747					      endif
   4883  f747				  -	      if	DLINDEX = 27
   4884  f747				  -ZONE27ADDRESS =	TMPMEMADDRESS
   4885  f747					      endif
   4886  f747				   DLINDEX    SET	DLINDEX + 1
   4791  f747					      REPEND
   4792  f747				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4793  f747				  -	      ifconst	EXTRADLMEMORY
   4794  f747				  -	      if	TMPMEMADDRESS > $1FFF
   4795  f747				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4796  f747				  -	      else
   4797  f747				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4798  f747				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4799  f747				  -	      endif
   4800  f747				  -	      endif		; TMPMEMADDRESS > $1FFF
   4801  f747					      endif		; EXTRADLMEMORY
   4802  f747				  -	      if	DLINDEX = 0
   4803  f747				  -ZONE0ADDRESS =	TMPMEMADDRESS
   4804  f747					      endif
   4805  f747				  -	      if	DLINDEX = 1
   4806  f747				  -ZONE1ADDRESS =	TMPMEMADDRESS
   4807  f747					      endif
   4808  f747				  -	      if	DLINDEX = 2
   4809  f747				  -ZONE2ADDRESS =	TMPMEMADDRESS
   4810  f747					      endif
   4811  f747				  -	      if	DLINDEX = 3
   4812  f747				  -ZONE3ADDRESS =	TMPMEMADDRESS
   4813  f747					      endif
   4814  f747				  -	      if	DLINDEX = 4
   4815  f747				  -ZONE4ADDRESS =	TMPMEMADDRESS
   4816  f747					      endif
   4817  f747				  -	      if	DLINDEX = 5
   4818  f747				  -ZONE5ADDRESS =	TMPMEMADDRESS
   4819  f747					      endif
   4820  f747				  -	      if	DLINDEX = 6
   4821  f747				  -ZONE6ADDRESS =	TMPMEMADDRESS
   4822  f747					      endif
   4823  f747				  -	      if	DLINDEX = 7
   4824  f747				  -ZONE7ADDRESS =	TMPMEMADDRESS
   4825  f747					      endif
   4826  f747				  -	      if	DLINDEX = 8
   4827  f747				  -ZONE8ADDRESS =	TMPMEMADDRESS
   4828  f747					      endif
   4829  f747				  -	      if	DLINDEX = 9
   4830  f747				  -ZONE9ADDRESS =	TMPMEMADDRESS
   4831  f747					      endif
   4832  f747				  -	      if	DLINDEX = 10
   4833  f747				  -ZONE10ADDRESS =	TMPMEMADDRESS
   4834  f747					      endif
   4835  f747				  -	      if	DLINDEX = 11
   4836  f747				  -ZONE11ADDRESS =	TMPMEMADDRESS
   4837  f747					      endif
   4838  f747				  -	      if	DLINDEX = 12
   4839  f747				  -ZONE12ADDRESS =	TMPMEMADDRESS
   4840  f747					      endif
   4841  f747				  -	      if	DLINDEX = 13
   4842  f747				  -ZONE13ADDRESS =	TMPMEMADDRESS
   4843  f747					      endif
   4844  f747				  -	      if	DLINDEX = 14
   4845  f747				  -ZONE14ADDRESS =	TMPMEMADDRESS
   4846  f747					      endif
   4847  f747				  -	      if	DLINDEX = 15
   4848  f747				  -ZONE15ADDRESS =	TMPMEMADDRESS
   4849  f747					      endif
   4850  f747				  -	      if	DLINDEX = 16
   4851  f747				  -ZONE16ADDRESS =	TMPMEMADDRESS
   4852  f747					      endif
   4853  f747				  -	      if	DLINDEX = 17
   4854  f747				  -ZONE17ADDRESS =	TMPMEMADDRESS
   4855  f747					      endif
   4856  f747				  -	      if	DLINDEX = 18
   4857  f747				  -ZONE18ADDRESS =	TMPMEMADDRESS
   4858  f747					      endif
   4859  f747				  -	      if	DLINDEX = 19
   4860  f747				  -ZONE19ADDRESS =	TMPMEMADDRESS
   4861  f747					      endif
   4862  f747					      if	DLINDEX = 20
   4863  f747		       1e d0	   ZONE20ADDRESS =	TMPMEMADDRESS
   4864  f747					      endif
   4865  f747				  -	      if	DLINDEX = 21
   4866  f747				  -ZONE21ADDRESS =	TMPMEMADDRESS
   4867  f747					      endif
   4868  f747				  -	      if	DLINDEX = 22
   4869  f747				  -ZONE22ADDRESS =	TMPMEMADDRESS
   4870  f747					      endif
   4871  f747				  -	      if	DLINDEX = 23
   4872  f747				  -ZONE23ADDRESS =	TMPMEMADDRESS
   4873  f747					      endif
   4874  f747				  -	      if	DLINDEX = 24
   4875  f747				  -ZONE24ADDRESS =	TMPMEMADDRESS
   4876  f747					      endif
   4877  f747				  -	      if	DLINDEX = 25
   4878  f747				  -ZONE25ADDRESS =	TMPMEMADDRESS
   4879  f747					      endif
   4880  f747				  -	      if	DLINDEX = 26
   4881  f747				  -ZONE26ADDRESS =	TMPMEMADDRESS
   4882  f747					      endif
   4883  f747				  -	      if	DLINDEX = 27
   4884  f747				  -ZONE27ADDRESS =	TMPMEMADDRESS
   4885  f747					      endif
   4886  f747				   DLINDEX    SET	DLINDEX + 1
   4791  f747					      REPEND
   4792  f747				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4793  f747				  -	      ifconst	EXTRADLMEMORY
   4794  f747				  -	      if	TMPMEMADDRESS > $1FFF
   4795  f747				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4796  f747				  -	      else
   4797  f747				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4798  f747				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4799  f747				  -	      endif
   4800  f747				  -	      endif		; TMPMEMADDRESS > $1FFF
   4801  f747					      endif		; EXTRADLMEMORY
   4802  f747				  -	      if	DLINDEX = 0
   4803  f747				  -ZONE0ADDRESS =	TMPMEMADDRESS
   4804  f747					      endif
   4805  f747				  -	      if	DLINDEX = 1
   4806  f747				  -ZONE1ADDRESS =	TMPMEMADDRESS
   4807  f747					      endif
   4808  f747				  -	      if	DLINDEX = 2
   4809  f747				  -ZONE2ADDRESS =	TMPMEMADDRESS
   4810  f747					      endif
   4811  f747				  -	      if	DLINDEX = 3
   4812  f747				  -ZONE3ADDRESS =	TMPMEMADDRESS
   4813  f747					      endif
   4814  f747				  -	      if	DLINDEX = 4
   4815  f747				  -ZONE4ADDRESS =	TMPMEMADDRESS
   4816  f747					      endif
   4817  f747				  -	      if	DLINDEX = 5
   4818  f747				  -ZONE5ADDRESS =	TMPMEMADDRESS
   4819  f747					      endif
   4820  f747				  -	      if	DLINDEX = 6
   4821  f747				  -ZONE6ADDRESS =	TMPMEMADDRESS
   4822  f747					      endif
   4823  f747				  -	      if	DLINDEX = 7
   4824  f747				  -ZONE7ADDRESS =	TMPMEMADDRESS
   4825  f747					      endif
   4826  f747				  -	      if	DLINDEX = 8
   4827  f747				  -ZONE8ADDRESS =	TMPMEMADDRESS
   4828  f747					      endif
   4829  f747				  -	      if	DLINDEX = 9
   4830  f747				  -ZONE9ADDRESS =	TMPMEMADDRESS
   4831  f747					      endif
   4832  f747				  -	      if	DLINDEX = 10
   4833  f747				  -ZONE10ADDRESS =	TMPMEMADDRESS
   4834  f747					      endif
   4835  f747				  -	      if	DLINDEX = 11
   4836  f747				  -ZONE11ADDRESS =	TMPMEMADDRESS
   4837  f747					      endif
   4838  f747				  -	      if	DLINDEX = 12
   4839  f747				  -ZONE12ADDRESS =	TMPMEMADDRESS
   4840  f747					      endif
   4841  f747				  -	      if	DLINDEX = 13
   4842  f747				  -ZONE13ADDRESS =	TMPMEMADDRESS
   4843  f747					      endif
   4844  f747				  -	      if	DLINDEX = 14
   4845  f747				  -ZONE14ADDRESS =	TMPMEMADDRESS
   4846  f747					      endif
   4847  f747				  -	      if	DLINDEX = 15
   4848  f747				  -ZONE15ADDRESS =	TMPMEMADDRESS
   4849  f747					      endif
   4850  f747				  -	      if	DLINDEX = 16
   4851  f747				  -ZONE16ADDRESS =	TMPMEMADDRESS
   4852  f747					      endif
   4853  f747				  -	      if	DLINDEX = 17
   4854  f747				  -ZONE17ADDRESS =	TMPMEMADDRESS
   4855  f747					      endif
   4856  f747				  -	      if	DLINDEX = 18
   4857  f747				  -ZONE18ADDRESS =	TMPMEMADDRESS
   4858  f747					      endif
   4859  f747				  -	      if	DLINDEX = 19
   4860  f747				  -ZONE19ADDRESS =	TMPMEMADDRESS
   4861  f747					      endif
   4862  f747				  -	      if	DLINDEX = 20
   4863  f747				  -ZONE20ADDRESS =	TMPMEMADDRESS
   4864  f747					      endif
   4865  f747					      if	DLINDEX = 21
   4866  f747		       1f 1c	   ZONE21ADDRESS =	TMPMEMADDRESS
   4867  f747					      endif
   4868  f747				  -	      if	DLINDEX = 22
   4869  f747				  -ZONE22ADDRESS =	TMPMEMADDRESS
   4870  f747					      endif
   4871  f747				  -	      if	DLINDEX = 23
   4872  f747				  -ZONE23ADDRESS =	TMPMEMADDRESS
   4873  f747					      endif
   4874  f747				  -	      if	DLINDEX = 24
   4875  f747				  -ZONE24ADDRESS =	TMPMEMADDRESS
   4876  f747					      endif
   4877  f747				  -	      if	DLINDEX = 25
   4878  f747				  -ZONE25ADDRESS =	TMPMEMADDRESS
   4879  f747					      endif
   4880  f747				  -	      if	DLINDEX = 26
   4881  f747				  -ZONE26ADDRESS =	TMPMEMADDRESS
   4882  f747					      endif
   4883  f747				  -	      if	DLINDEX = 27
   4884  f747				  -ZONE27ADDRESS =	TMPMEMADDRESS
   4885  f747					      endif
   4886  f747				   DLINDEX    SET	DLINDEX + 1
   4791  f747					      REPEND
   4792  f747				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4793  f747				  -	      ifconst	EXTRADLMEMORY
   4794  f747				  -	      if	TMPMEMADDRESS > $1FFF
   4795  f747				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4796  f747				  -	      else
   4797  f747				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4798  f747				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4799  f747				  -	      endif
   4800  f747				  -	      endif		; TMPMEMADDRESS > $1FFF
   4801  f747					      endif		; EXTRADLMEMORY
   4802  f747				  -	      if	DLINDEX = 0
   4803  f747				  -ZONE0ADDRESS =	TMPMEMADDRESS
   4804  f747					      endif
   4805  f747				  -	      if	DLINDEX = 1
   4806  f747				  -ZONE1ADDRESS =	TMPMEMADDRESS
   4807  f747					      endif
   4808  f747				  -	      if	DLINDEX = 2
   4809  f747				  -ZONE2ADDRESS =	TMPMEMADDRESS
   4810  f747					      endif
   4811  f747				  -	      if	DLINDEX = 3
   4812  f747				  -ZONE3ADDRESS =	TMPMEMADDRESS
   4813  f747					      endif
   4814  f747				  -	      if	DLINDEX = 4
   4815  f747				  -ZONE4ADDRESS =	TMPMEMADDRESS
   4816  f747					      endif
   4817  f747				  -	      if	DLINDEX = 5
   4818  f747				  -ZONE5ADDRESS =	TMPMEMADDRESS
   4819  f747					      endif
   4820  f747				  -	      if	DLINDEX = 6
   4821  f747				  -ZONE6ADDRESS =	TMPMEMADDRESS
   4822  f747					      endif
   4823  f747				  -	      if	DLINDEX = 7
   4824  f747				  -ZONE7ADDRESS =	TMPMEMADDRESS
   4825  f747					      endif
   4826  f747				  -	      if	DLINDEX = 8
   4827  f747				  -ZONE8ADDRESS =	TMPMEMADDRESS
   4828  f747					      endif
   4829  f747				  -	      if	DLINDEX = 9
   4830  f747				  -ZONE9ADDRESS =	TMPMEMADDRESS
   4831  f747					      endif
   4832  f747				  -	      if	DLINDEX = 10
   4833  f747				  -ZONE10ADDRESS =	TMPMEMADDRESS
   4834  f747					      endif
   4835  f747				  -	      if	DLINDEX = 11
   4836  f747				  -ZONE11ADDRESS =	TMPMEMADDRESS
   4837  f747					      endif
   4838  f747				  -	      if	DLINDEX = 12
   4839  f747				  -ZONE12ADDRESS =	TMPMEMADDRESS
   4840  f747					      endif
   4841  f747				  -	      if	DLINDEX = 13
   4842  f747				  -ZONE13ADDRESS =	TMPMEMADDRESS
   4843  f747					      endif
   4844  f747				  -	      if	DLINDEX = 14
   4845  f747				  -ZONE14ADDRESS =	TMPMEMADDRESS
   4846  f747					      endif
   4847  f747				  -	      if	DLINDEX = 15
   4848  f747				  -ZONE15ADDRESS =	TMPMEMADDRESS
   4849  f747					      endif
   4850  f747				  -	      if	DLINDEX = 16
   4851  f747				  -ZONE16ADDRESS =	TMPMEMADDRESS
   4852  f747					      endif
   4853  f747				  -	      if	DLINDEX = 17
   4854  f747				  -ZONE17ADDRESS =	TMPMEMADDRESS
   4855  f747					      endif
   4856  f747				  -	      if	DLINDEX = 18
   4857  f747				  -ZONE18ADDRESS =	TMPMEMADDRESS
   4858  f747					      endif
   4859  f747				  -	      if	DLINDEX = 19
   4860  f747				  -ZONE19ADDRESS =	TMPMEMADDRESS
   4861  f747					      endif
   4862  f747				  -	      if	DLINDEX = 20
   4863  f747				  -ZONE20ADDRESS =	TMPMEMADDRESS
   4864  f747					      endif
   4865  f747				  -	      if	DLINDEX = 21
   4866  f747				  -ZONE21ADDRESS =	TMPMEMADDRESS
   4867  f747					      endif
   4868  f747					      if	DLINDEX = 22
   4869  f747		       1f 68	   ZONE22ADDRESS =	TMPMEMADDRESS
   4870  f747					      endif
   4871  f747				  -	      if	DLINDEX = 23
   4872  f747				  -ZONE23ADDRESS =	TMPMEMADDRESS
   4873  f747					      endif
   4874  f747				  -	      if	DLINDEX = 24
   4875  f747				  -ZONE24ADDRESS =	TMPMEMADDRESS
   4876  f747					      endif
   4877  f747				  -	      if	DLINDEX = 25
   4878  f747				  -ZONE25ADDRESS =	TMPMEMADDRESS
   4879  f747					      endif
   4880  f747				  -	      if	DLINDEX = 26
   4881  f747				  -ZONE26ADDRESS =	TMPMEMADDRESS
   4882  f747					      endif
   4883  f747				  -	      if	DLINDEX = 27
   4884  f747				  -ZONE27ADDRESS =	TMPMEMADDRESS
   4885  f747					      endif
   4886  f747				   DLINDEX    SET	DLINDEX + 1
   4791  f747					      REPEND
   4792  f747				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   4793  f747				  -	      ifconst	EXTRADLMEMORY
   4794  f747				  -	      if	TMPMEMADDRESS > $1FFF
   4795  f747				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4796  f747				  -	      else
   4797  f747				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   4798  f747				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   4799  f747				  -	      endif
   4800  f747				  -	      endif		; TMPMEMADDRESS > $1FFF
   4801  f747					      endif		; EXTRADLMEMORY
   4802  f747				  -	      if	DLINDEX = 0
   4803  f747				  -ZONE0ADDRESS =	TMPMEMADDRESS
   4804  f747					      endif
   4805  f747				  -	      if	DLINDEX = 1
   4806  f747				  -ZONE1ADDRESS =	TMPMEMADDRESS
   4807  f747					      endif
   4808  f747				  -	      if	DLINDEX = 2
   4809  f747				  -ZONE2ADDRESS =	TMPMEMADDRESS
   4810  f747					      endif
   4811  f747				  -	      if	DLINDEX = 3
   4812  f747				  -ZONE3ADDRESS =	TMPMEMADDRESS
   4813  f747					      endif
   4814  f747				  -	      if	DLINDEX = 4
   4815  f747				  -ZONE4ADDRESS =	TMPMEMADDRESS
   4816  f747					      endif
   4817  f747				  -	      if	DLINDEX = 5
   4818  f747				  -ZONE5ADDRESS =	TMPMEMADDRESS
   4819  f747					      endif
   4820  f747				  -	      if	DLINDEX = 6
   4821  f747				  -ZONE6ADDRESS =	TMPMEMADDRESS
   4822  f747					      endif
   4823  f747				  -	      if	DLINDEX = 7
   4824  f747				  -ZONE7ADDRESS =	TMPMEMADDRESS
   4825  f747					      endif
   4826  f747				  -	      if	DLINDEX = 8
   4827  f747				  -ZONE8ADDRESS =	TMPMEMADDRESS
   4828  f747					      endif
   4829  f747				  -	      if	DLINDEX = 9
   4830  f747				  -ZONE9ADDRESS =	TMPMEMADDRESS
   4831  f747					      endif
   4832  f747				  -	      if	DLINDEX = 10
   4833  f747				  -ZONE10ADDRESS =	TMPMEMADDRESS
   4834  f747					      endif
   4835  f747				  -	      if	DLINDEX = 11
   4836  f747				  -ZONE11ADDRESS =	TMPMEMADDRESS
   4837  f747					      endif
   4838  f747				  -	      if	DLINDEX = 12
   4839  f747				  -ZONE12ADDRESS =	TMPMEMADDRESS
   4840  f747					      endif
   4841  f747				  -	      if	DLINDEX = 13
   4842  f747				  -ZONE13ADDRESS =	TMPMEMADDRESS
   4843  f747					      endif
   4844  f747				  -	      if	DLINDEX = 14
   4845  f747				  -ZONE14ADDRESS =	TMPMEMADDRESS
   4846  f747					      endif
   4847  f747				  -	      if	DLINDEX = 15
   4848  f747				  -ZONE15ADDRESS =	TMPMEMADDRESS
   4849  f747					      endif
   4850  f747				  -	      if	DLINDEX = 16
   4851  f747				  -ZONE16ADDRESS =	TMPMEMADDRESS
   4852  f747					      endif
   4853  f747				  -	      if	DLINDEX = 17
   4854  f747				  -ZONE17ADDRESS =	TMPMEMADDRESS
   4855  f747					      endif
   4856  f747				  -	      if	DLINDEX = 18
   4857  f747				  -ZONE18ADDRESS =	TMPMEMADDRESS
   4858  f747					      endif
   4859  f747				  -	      if	DLINDEX = 19
   4860  f747				  -ZONE19ADDRESS =	TMPMEMADDRESS
   4861  f747					      endif
   4862  f747				  -	      if	DLINDEX = 20
   4863  f747				  -ZONE20ADDRESS =	TMPMEMADDRESS
   4864  f747					      endif
   4865  f747				  -	      if	DLINDEX = 21
   4866  f747				  -ZONE21ADDRESS =	TMPMEMADDRESS
   4867  f747					      endif
   4868  f747				  -	      if	DLINDEX = 22
   4869  f747				  -ZONE22ADDRESS =	TMPMEMADDRESS
   4870  f747					      endif
   4871  f747					      if	DLINDEX = 23
   4872  f747		       1f b4	   ZONE23ADDRESS =	TMPMEMADDRESS
   4873  f747					      endif
   4874  f747				  -	      if	DLINDEX = 24
   4875  f747				  -ZONE24ADDRESS =	TMPMEMADDRESS
   4876  f747					      endif
   4877  f747				  -	      if	DLINDEX = 25
   4878  f747				  -ZONE25ADDRESS =	TMPMEMADDRESS
   4879  f747					      endif
   4880  f747				  -	      if	DLINDEX = 26
   4881  f747				  -ZONE26ADDRESS =	TMPMEMADDRESS
   4882  f747					      endif
   4883  f747				  -	      if	DLINDEX = 27
   4884  f747				  -ZONE27ADDRESS =	TMPMEMADDRESS
   4885  f747					      endif
   4886  f747				   DLINDEX    SET	DLINDEX + 1
   4887  f747					      REPEND
   4888  f747
   4889  f747
     $18e0 to $1fff used as zone memory, allowing 7 display objects per zone.
   4890  f747					      echo	"   ",[WDLMEMSTART],"to",[WDLMEMEND],"used as zone memory, allowing",[(DLLASTOBJ/5)]d,"display objects per zone."
   4891  f747
   4892  f747				   DLHEIGHT
   4893  f747					      REPEAT	WZONECOUNT
   4894  f747		       07		      .byte.b	(WZONEHEIGHT-1)
   4893  f747					      REPEND
   4894  f748		       07		      .byte.b	(WZONEHEIGHT-1)
   4893  f748					      REPEND
   4894  f749		       07		      .byte.b	(WZONEHEIGHT-1)
   4893  f749					      REPEND
   4894  f74a		       07		      .byte.b	(WZONEHEIGHT-1)
   4893  f74a					      REPEND
   4894  f74b		       07		      .byte.b	(WZONEHEIGHT-1)
   4893  f74b					      REPEND
   4894  f74c		       07		      .byte.b	(WZONEHEIGHT-1)
   4893  f74c					      REPEND
   4894  f74d		       07		      .byte.b	(WZONEHEIGHT-1)
   4893  f74d					      REPEND
   4894  f74e		       07		      .byte.b	(WZONEHEIGHT-1)
   4893  f74e					      REPEND
   4894  f74f		       07		      .byte.b	(WZONEHEIGHT-1)
   4893  f74f					      REPEND
   4894  f750		       07		      .byte.b	(WZONEHEIGHT-1)
   4893  f750					      REPEND
   4894  f751		       07		      .byte.b	(WZONEHEIGHT-1)
   4893  f751					      REPEND
   4894  f752		       07		      .byte.b	(WZONEHEIGHT-1)
   4893  f752					      REPEND
   4894  f753		       07		      .byte.b	(WZONEHEIGHT-1)
   4893  f753					      REPEND
   4894  f754		       07		      .byte.b	(WZONEHEIGHT-1)
   4893  f754					      REPEND
   4894  f755		       07		      .byte.b	(WZONEHEIGHT-1)
   4893  f755					      REPEND
   4894  f756		       07		      .byte.b	(WZONEHEIGHT-1)
   4893  f756					      REPEND
   4894  f757		       07		      .byte.b	(WZONEHEIGHT-1)
   4893  f757					      REPEND
   4894  f758		       07		      .byte.b	(WZONEHEIGHT-1)
   4893  f758					      REPEND
   4894  f759		       07		      .byte.b	(WZONEHEIGHT-1)
   4893  f759					      REPEND
   4894  f75a		       07		      .byte.b	(WZONEHEIGHT-1)
   4893  f75a					      REPEND
   4894  f75b		       07		      .byte.b	(WZONEHEIGHT-1)
   4893  f75b					      REPEND
   4894  f75c		       07		      .byte.b	(WZONEHEIGHT-1)
   4893  f75c					      REPEND
   4894  f75d		       07		      .byte.b	(WZONEHEIGHT-1)
   4893  f75d					      REPEND
   4894  f75e		       07		      .byte.b	(WZONEHEIGHT-1)
   4895  f75f					      REPEND
   4896  f75f
   4897  f75f							; Provided under the CC0 license. See the included LICENSE.txt for details.
   4898  f75f
   4899  f75f							; a simple guard, than ensures the 7800basic code hasn't
   4900  f75f							; spilled into the encryption area...
     2079 bytes left in the 7800basic reserved area.
   4901  f75f					      echo	"   ",($FF7E-*)d,"bytes left in the 7800basic reserved area."
   4902  f75f				  -	      if	(*>$FF7D)
   4903  f75f				  -	      ERR		; abort the assembly
   4904  f75f					      endif
   4905  f75f							; Provided under the CC0 license. See the included LICENSE.txt for details.
   4906  f75f
   4907  f75f				  -	      ifconst	DEV
   4908  f75f				  -	      ifnconst	ZONEHEIGHT
   4909  f75f				  -	      echo	"* the 4k 7800basic area has",[($FF7E - *)]d,"bytes free."
   4910  f75f				  -	      else
   4911  f75f				  -	      if	ZONEHEIGHT = 8
   4912  f75f				  -	      echo	"* the 4k 7800basic area has",[($FF7E - *)]d,"bytes free."
   4913  f75f				  -	      else
   4914  f75f				  -	      echo	"* the 4k 7800basic area has",[($FF7E - *)]d,"bytes free."
   4915  f75f				  -	      endif
   4916  f75f				  -	      endif
   4917  f75f					      endif
   4918  f75f
   4919  f75f							; FF7E/FF7F contains the 7800basic crc checksum word
   4920  f75f
   4921  f75f							; FF80 - FFF7 contains the 7800 encryption key 
   4922  f75f
   4923  f75f					      ifnconst	bankswitchmode
   4924  fff8					      ORG	$FFF8
   4925  fff8				  -	      else
   4926  fff8				  -	      ifconst	ROM128K
   4927  fff8				  -	      ORG	$27FF8
   4928  fff8				  -	      RORG	$FFF8
   4929  fff8				  -	      endif
   4930  fff8				  -	      ifconst	ROM144K
   4931  fff8				  -	      ORG	$27FF8
   4932  fff8				  -	      RORG	$FFF8
   4933  fff8				  -	      endif
   4934  fff8				  -	      ifconst	ROM256K
   4935  fff8				  -	      ORG	$47FF8
   4936  fff8				  -	      RORG	$FFF8
   4937  fff8				  -	      endif
   4938  fff8				  -	      ifconst	ROM272K
   4939  fff8				  -	      ORG	$47FF8
   4940  fff8				  -	      RORG	$FFF8
   4941  fff8				  -	      endif
   4942  fff8				  -	      ifconst	ROM512K
   4943  fff8				  -	      ORG	$87FF8
   4944  fff8				  -	      RORG	$FFF8
   4945  fff8				  -	      endif
   4946  fff8				  -	      ifconst	ROM528K
   4947  fff8				  -	      ORG	$87FF8
   4948  fff8				  -	      RORG	$FFF8
   4949  fff8				  -	      endif
   4950  fff8					      endif
   4951  fff8
   4952  fff8
   4953  fff8		       ff		      .byte.b	$FF	; region verification. $FF=all regions
   4954  fff9		       f7		      .byte.b	$F7	; high nibble:  encryption check from $N000 to $FF7F. we only hash the last 4k for faster boot.
   4955  fffa							; low nibble :  N=7 atari rainbow start, N=3 no atari rainbow
   4956  fffa
   4957  fffa							;Vectors
   4958  fffa		       00 f0		      .word.w	NMI
   4959  fffc		       59 f6		      .word.w	START
   4960  fffe		       5d f0		      .word.w	IRQ
   4961  10000
