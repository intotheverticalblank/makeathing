------- FILE c:\Users\Steve\Desktop\2018dev\7800\7800basic\projects\lessons\lesson1_gfx_modes\160A_16pixelzone_128_16.bas.asm LEVEL 1 PASS 3
      1  28000 ????						; MACRO.H
      2  28000 ????
      3  28000 ????						; Based on the 2600 macro.h file.
      4  28000 ????						; Macros irrelevant to the 7800 have been removed, and the sleep macro 
      5  28000 ????						; has been adapted to give accurate results on the 7800.
      6  28000 ????
      7  28000 ????						; Version 1.0 2019/12/11 (based on the 2600 Version 1.05, 13/NOVEMBER/2003)
      8  28000 ????
      9  28000 ????						; Available macros...
     10  28000 ????						;   SLEEP n		 - sleep for n cycles
     11  28000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     12  28000 ????
     13  28000 ????						;-------------------------------------------------------------------------------
     14  28000 ????						; SLEEP duration
     15  28000 ????						; Original author: Thomas Jentzsch
     16  28000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     17  28000 ????						; useful for code where precise timing is required.
     18  28000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     19  28000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     20  28000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     21  28000 ????
     22  28000 ????				       MAC	sleep
     23  28000 ????			    .CYCLES    SET	{1}
     24  28000 ????
     25  28000 ????				       IF	.CYCLES < 2
     26  28000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     27  28000 ????				       ERR
     28  28000 ????				       ENDIF
     29  28000 ????
     30  28000 ????				       IF	.CYCLES & 1
     31  28000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     32  28000 ????				       nop	$80
     33  28000 ????				       ELSE
     34  28000 ????				       bit	$80
     35  28000 ????				       ENDIF
     36  28000 ????			    .CYCLES    SET	.CYCLES - 3
     37  28000 ????				       ENDIF
     38  28000 ????
     39  28000 ????				       REPEAT	.CYCLES / 2
     40  28000 ????				       nop
     41  28000 ????				       REPEND
     42  28000 ????				       ENDM		;usage: SLEEP n (n>1)
     43  28000 ????
     44  28000 ????						;-------------------------------------------------------
     45  28000 ????						; SET_POINTER
     46  28000 ????						; Original author: Manuel Rotschkar
     47  28000 ????						;
     48  28000 ????						; Sets a 2 byte RAM pointer to an absolute address.
     49  28000 ????						;
     50  28000 ????						; Usage: SET_POINTER pointer, address
     51  28000 ????						; Example: SET_POINTER SpritePTR, SpriteData
     52  28000 ????						;
     53  28000 ????						; Note: Alters the accumulator, NZ flags
     54  28000 ????						; IN 1: 2 byte RAM location reserved for pointer
     55  28000 ????						; IN 2: absolute address
     56  28000 ????
     57  28000 ????				       MAC	set_pointer
     58  28000 ????			    .POINTER   SET	{1}
     59  28000 ????			    .ADDRESS   SET	{2}
     60  28000 ????
     61  28000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
     62  28000 ????				       STA	.POINTER	; Store in pointer
     63  28000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
     64  28000 ????				       STA	.POINTER+1	; Store in pointer+1
     65  28000 ????
     66  28000 ????				       ENDM
     67  28000 ????
     68  28000 ????						; EOF
     69  28000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
     70  28000 ????
     71  28000 ????						; 7800MACRO.H
     72  28000 ????
     73  28000 ????						;-------------------------------------------------------
     74  28000 ????						; BOXCOLLISIONCHECK
     75  28000 ????						; author: Mike Saarna
     76  28000 ????						;
     77  28000 ????						; A general bounding box collision check. compares 2 rectangles of differing size
     78  28000 ????						; and shape for overlap. Carry is set for collision detected, clear for none.
     79  28000 ????						; 
     80  28000 ????						; Usage: BOXCOLLISIONCHECK x1var,y1var,w1var,h1var,x2var,y2var,w2var,h2var
     81  28000 ????						;
     82  28000 ????
     83  28000 ????				       MAC	boxcollisioncheck
     84  28000 ????			    .boxx1     SET	{1}
     85  28000 ????			    .boxy1     SET	{2}
     86  28000 ????			    .boxw1     SET	{3}
     87  28000 ????			    .boxh1     SET	{4}
     88  28000 ????			    .boxx2     SET	{5}
     89  28000 ????			    .boxy2     SET	{6}
     90  28000 ????			    .boxw2     SET	{7}
     91  28000 ????			    .boxh2     SET	{8}
     92  28000 ????
     93  28000 ????			    .DoXCollisionCheck
     94  28000 ????				       lda	.boxx1	;3
     95  28000 ????				       cmp	.boxx2	;2
     96  28000 ????				       bcs	.X1isbiggerthanX2	;2/3
     97  28000 ????			    .X2isbiggerthanX1
     98  28000 ????				       adc	#.boxw1	;2
     99  28000 ????				       cmp	.boxx2	;3
    100  28000 ????				       bcs	.DoYCollisionCheck	;3/2
    101  28000 ????				       bcc	.noboxcollision	;3
    102  28000 ????			    .X1isbiggerthanX2
    103  28000 ????				       clc		;2
    104  28000 ????				       sbc	#.boxw2	;2
    105  28000 ????				       cmp	.boxx2	;3
    106  28000 ????				       bcs	.noboxcollision	;3/2
    107  28000 ????			    .DoYCollisionCheck
    108  28000 ????				       lda	.boxy1	;3
    109  28000 ????				       cmp	.boxy2	;3
    110  28000 ????				       bcs	.Y1isbiggerthanY2	;3/2
    111  28000 ????			    .Y2isbiggerthanY1
    112  28000 ????				       adc	#.boxh1	;2
    113  28000 ????				       cmp	.boxy2	;3
    114  28000 ????				       jmp	.checkdone	;6 
    115  28000 ????			    .Y1isbiggerthanY2
    116  28000 ????				       clc		;2
    117  28000 ????				       sbc	#.boxh2	;2
    118  28000 ????				       cmp	.boxy2	;3
    119  28000 ????				       bcs	.noboxcollision	;3/2
    120  28000 ????			    .boxcollision
    121  28000 ????				       sec		;2
    122  28000 ????				       .byte	$24	; hardcoded "BIT [clc opcode]", used to skip over the following clc
    123  28000 ????			    .noboxcollision
    124  28000 ????				       clc		;2
    125  28000 ????			    .checkdone
    126  28000 ????
    127  28000 ????				       ENDM
    128  28000 ????
    129  28000 ????				       MAC	median3
    130  28000 ????
    131  28000 ????						; A median filter (for smoothing paddle jitter)
    132  28000 ????						;   this macro takes the current paddle value, compares it to historic
    133  28000 ????						;   values, and replaces the current paddle value with the median.
    134  28000 ????						; 
    135  28000 ????						; called as:  MEDIAN3 STORAGE CURRENT
    136  28000 ????						;    where STORAGE points to 3 consecutive bytes of memory. The first 2
    137  28000 ????						;	  must be dedicated to this MEDIAN filter. The last 1 is a temp.
    138  28000 ????						;    where CURRENT is memory holding the new value you wish to compare to
    139  28000 ????						;	  the previous values, and update with the median value.
    140  28000 ????						;
    141  28000 ????						; returns: CURRENT (modified to contain median value)
    142  28000 ????						;
    143  28000 ????						; author: Mike Saarna (aka RevEng)
    144  28000 ????
    145  28000 ????			    .MedianBytes SET	{1}
    146  28000 ????			    .NewValue  SET	{2}
    147  28000 ????
    148  28000 ????				       lda	#0
    149  28000 ????				       ldy	.NewValue
    150  28000 ????				       sty	.MedianBytes+2	; put the new value in the most "recent" slot
    151  28000 ????
    152  28000 ????						; build an index from relative size comparisons between our 3 values.
    153  28000 ????				       cpy	.MedianBytes
    154  28000 ????				       rol
    155  28000 ????				       cpy	.MedianBytes+1
    156  28000 ????				       rol
    157  28000 ????				       ldy	.MedianBytes
    158  28000 ????				       cpy	.MedianBytes+1
    159  28000 ????				       rol
    160  28000 ????				       tay
    161  28000 ????
    162  28000 ????				       ldx	MedianOrderLUT,y	; convert the size-comparison index to an index to the median value
    163  28000 ????				       lda	.MedianBytes,x
    164  28000 ????				       sta	.NewValue	; we replace the new value memory with the median value
    165  28000 ????
    166  28000 ????						; then shift values from "newer" bytes to "older" bytes, leaving the 
    167  28000 ????						; newest byte (.MedianBytes+2) empty for next time.
    168  28000 ????				       lda	.MedianBytes+1
    169  28000 ????				       sta	.MedianBytes
    170  28000 ????				       lda	.MedianBytes+2
    171  28000 ????				       sta	.MedianBytes+1
    172  28000 ????				       ifnconst	MedianOrderLUT
    173  28000 ????				       jmp	MedianOrderLUTend
    174  28000 ????			    MedianOrderLUT		; converts our "comparison index" to an index to the median value
    175  28000 ????				       .byte	0	; 0  B2 < B0 < B1
    176  28000 ????				       .byte	1	; 1  B2 < B1 < B0
    177  28000 ????				       .byte	2	; 2   impossible 
    178  28000 ????				       .byte	2	; 3  B1 < B2 < B0
    179  28000 ????				       .byte	2	; 4  B0 < B2 < B1
    180  28000 ????				       .byte	2	; 5   impossible 
    181  28000 ????				       .byte	1	; 6  B0 < B1 < B2
    182  28000 ????				       .byte	0	; 7  B1 < B0 < B2
    183  28000 ????			    MedianOrderLUTend
    184  28000 ????				       endif
    185  28000 ????				       ENDM
    186  28000 ????
    187  28000 ????						; EOF
    188  28000 ????						;
    189  28000 ????						; speakjet.inc
    190  28000 ????						;
    191  28000 ????						;
    192  28000 ????						; AtariVox Speech Synth Driver
    193  28000 ????						;
    194  28000 ????						; By Alex Herbert, 2004
    195  28000 ????						;
    196  28000 ????
    197  28000 ????
    198  28000 ????
    199  28000 ????
    200  28000 ????						; Constants
    201  28000 ????
    202  28000 ????
    203  28000 ????		00 01	    SERIAL_OUTMASK equ	$01
    204  28000 ????		00 02	    SERIAL_RDYMASK equ	$02
    205  28000 ????
    206  28000 ????
    207  28000 ????
    208  28000 ????						; Macros
    209  28000 ????
    210  28000 ????				       mac	spkout
    211  28000 ????
    212  28000 ????						; check buffer-full status
    213  28000 ????				       lda	SWCHA
    214  28000 ????				       and	#SERIAL_RDYMASK
    215  28000 ????				       beq	.speech_done
    216  28000 ????
    217  28000 ????						; get next speech byte
    218  28000 ????				       ldy	#$00
    219  28000 ????				       lda	(speech_addr),y
    220  28000 ????
    221  28000 ????						; invert data and check for end of string
    222  28000 ????				       eor	#$ff
    223  28000 ????						;sta BACKGRND ; debug - uncomment to flash the background color with vox data
    224  28000 ????				       beq	.speech_done
    225  28000 ????				       sta	{1}
    226  28000 ????
    227  28000 ????						; increment speech pointer
    228  28000 ????				       inc	speech_addr
    229  28000 ????				       bne	.incaddr_skip
    230  28000 ????				       inc	speech_addr+1
    231  28000 ????			    .incaddr_skip
    232  28000 ????
    233  28000 ????						; output byte as serial data
    234  28000 ????
    235  28000 ????				       sec		; start bit
    236  28000 ????			    .byteout_loop
    237  28000 ????						; put carry flag into bit 0 of SWACNT, perserving other bits
    238  28000 ????				       lda	SWACNT	; 4
    239  28000 ????				       and	#$fe	; 2 6
    240  28000 ????				       adc	#$00	; 2 8
    241  28000 ????				       sta	SWACNT	; 4 12
    242  28000 ????
    243  28000 ????						; 10 bits sent? (1 start bit, 8 data bits, 1 stop bit)
    244  28000 ????				       cpy	#$09	; 2 14
    245  28000 ????				       beq	.speech_done	; 2 16
    246  28000 ????				       iny		; 2 18
    247  28000 ????
    248  28000 ????						; the 7800 is 1.5x faster than the 2600. Waste more cycles here
    249  28000 ????						; to match the original baud rate...
    250  28000 ????						;ldx	  #$07 ; 2600
    251  28000 ????				       ldx	#$0D
    252  28000 ????
    253  28000 ????			    .delay_loop
    254  28000 ????				       dex		; 
    255  28000 ????				       bne	.delay_loop	; 36 54
    256  28000 ????
    257  28000 ????						; shift next data bit into carry
    258  28000 ????				       lsr	{1}	; 5 59
    259  28000 ????
    260  28000 ????						; and loop (branch always taken)
    261  28000 ????				       bpl	.byteout_loop	; 3 62 cycles for loop
    262  28000 ????
    263  28000 ????			    .speech_done
    264  28000 ????
    265  28000 ????				       endm
    266  28000 ????
    267  28000 ????
    268  28000 ????				       mac	speak
    269  28000 ????
    270  28000 ????				       lda	#<{1}
    271  28000 ????				       sta	speech_addr
    272  28000 ????				       lda	#>{1}
    273  28000 ????				       sta	speech_addr+1
    274  28000 ????
    275  28000 ????				       endm
    276  28000 ????
    277  28000 ????
    278  28000 ????
    279  28000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
    280  28000 ????
    281  28000 ????				       processor	6502
    282  28000 ????
------- FILE 7800basic.h LEVEL 2 PASS 3
      0  28000 ????				       include	"7800basic.h"
      1  28000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  28000 ????
      3  28000 ????				       processor	6502
------- FILE 7800.h LEVEL 3 PASS 3
      0  28000 ????				       include	"7800.h"
      1  28000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  28000 ????
      3  28000 ????						; 7800.h
      4  28000 ????						; Version 1.0, 2019/12/13
      5  28000 ????
      6  28000 ????						; This file defines hardware registers and memory mapping for the
      7  28000 ????						; Atari 7800. It is distributed as a companion machine-specific support package
      8  28000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
      9  28000 ????						; available at https://github.com/dasm-assembler/dasm
     10  28000 ????
     11  28000 ????
     12  28000 ????						; ******************** 7800 Hardware Adresses ***************************
     13  28000 ????						;
     14  28000 ????						;	 MEMORY MAP USAGE OF THE 7800
     15  28000 ????						;
     16  28000 ????						;	  00 -   1F	TIA REGISTERS
     17  28000 ????						;	  20 -   3F	MARIA REGISTERS
     18  28000 ????						;	  40 -   FF	RAM block 0 (zero page)
     19  28000 ????						;	 100 -  11F	TIA   (mirror of 0000-001f)
     20  28000 ????						;	 120 -  13F	MARIA (mirror of 0020-003f)
     21  28000 ????						;	 140 -  1FF	RAM block 1 (stack)
     22  28000 ????						;	 200 -  21F	TIA   (mirror of 0000-001f)
     23  28000 ????						;	 220 -  23F	MARIA (mirror of 0020-003f)
     24  28000 ????						;	 240 -  27F	???
     25  28000 ????						;	 280 -  2FF	RIOT I/O ports and timers
     26  28000 ????						;	 300 -  31F	TIA   (mirror of 0000-001f)
     27  28000 ????						;	 320 -  33F	MARIA (mirror of 0020-003f)
     28  28000 ????						;	 340 -  3FF	???
     29  28000 ????						;	 400 -  47F	unused address space
     30  28000 ????						;	 480 -  4FF	RIOT RAM
     31  28000 ????						;	 500 -  57F	unused address space
     32  28000 ????						;	 580 -  5FF	RIOT RAM (mirror of 0480-04ff)
     33  28000 ????						;	 600 - 17FF	unused address space
     34  28000 ????						;	1800 - 203F	RAM
     35  28000 ????						;	2040 - 20FF	RAM block 0 (mirror of 0000-001f)
     36  28000 ????						;	2100 - 213F	RAM
     37  28000 ????						;	2140 - 21FF	RAM block 1 (mirror of 0140-01ff)
     38  28000 ????						;	2200 - 27FF	RAM
     39  28000 ????						;	2800 - 2FFF	mirror of 1800-27ff
     40  28000 ????						;	3000 - 3FFF	unused address space
     41  28000 ????						;	4000 - FF7F	potential cartridge address space
     42  28000 ????						;	FF80 - FFF9	RESERVED FOR ENCRYPTION
     43  28000 ????						;	FFFA - FFFF	6502 VECTORS
     44  28000 ????
     45  28000 ????
     46  28000 ????						;****** 00-1F ********* TIA REGISTERS ******************
     47  28000 ????
     48  28000 ????		00 01	    INPTCTRL   =	$01	;Input control. In same address space as TIA. write-only
     49  28000 ????		00 01	    VBLANK     =	$01	;VBLANK. D7=1:dump paddle caps to ground.     write-only
     50  28000 ????		00 08	    INPT0      =	$08	;Paddle Control Input 0		       read-only
     51  28000 ????		00 09	    INPT1      =	$09	;Paddle Control Input 1		       read-only
     52  28000 ????		00 0a	    INPT2      =	$0A	;Paddle Control Input 2		       read-only
     53  28000 ????		00 0b	    INPT3      =	$0B	;Paddle Control Input 3		       read-only
     54  28000 ????
     55  28000 ????						; ** some common alternate names for INPT0/1/2/3
     56  28000 ????		00 08	    INPT4B     =	$08	;Joystick 0 Fire 1			       read-only
     57  28000 ????		00 09	    INPT4A     =	$09	;Joystick 0 Fire 1			       read-only
     58  28000 ????		00 0a	    INPT5B     =	$0A	;Joystick 1 Fire 0			       read-only
     59  28000 ????		00 0b	    INPT5A     =	$0B	;Joystick 1 Fire 1			       read-only
     60  28000 ????		00 08	    INPT4R     =	$08	;Joystick 0 Fire 1			       read-only
     61  28000 ????		00 09	    INPT4L     =	$09	;Joystick 0 Fire 1			       read-only
     62  28000 ????		00 0a	    INPT5R     =	$0A	;Joystick 1 Fire 0			       read-only
     63  28000 ????		00 0b	    INPT5L     =	$0B	;Joystick 1 Fire 1			       read-only
     64  28000 ????
     65  28000 ????		00 0c	    INPT4      =	$0C	;Player 0 Fire Button Input		       read-only
     66  28000 ????		00 0d	    INPT5      =	$0D	;Player 1 Fire Button Input		       read-only
     67  28000 ????
     68  28000 ????		00 15	    AUDC0      =	$15	;Audio Control Channel   0		       write-only
     69  28000 ????		00 16	    AUDC1      =	$16	;Audio Control Channel   1		       write-only
     70  28000 ????		00 17	    AUDF0      =	$17	;Audio Frequency Channel 0		       write-only
     71  28000 ????		00 18	    AUDF1      =	$18	;Audio Frequency Channel 1		       write-only
     72  28000 ????		00 19	    AUDV0      =	$19	;Audio Volume Channel	  0		       write-only
     73  28000 ????		00 1a	    AUDV1      =	$1A	;Audio Volume Channel	  1		       write-only
     74  28000 ????
     75  28000 ????						;****** 20-3F ********* MARIA REGISTERS ***************
     76  28000 ????
     77  28000 ????		00 20	    BACKGRND   =	$20	;Background Color			       write-only
     78  28000 ????		00 21	    P0C1       =	$21	;Palette 0 - Color 1			       write-only
     79  28000 ????		00 22	    P0C2       =	$22	;Palette 0 - Color 2			       write-only
     80  28000 ????		00 23	    P0C3       =	$23	;Palette 0 - Color 3			       write-only
     81  28000 ????		00 24	    WSYNC      =	$24	;Wait For Sync 			       write-only
     82  28000 ????		00 25	    P1C1       =	$25	;Palette 1 - Color 1			       write-only
     83  28000 ????		00 26	    P1C2       =	$26	;Palette 1 - Color 2			       write-only
     84  28000 ????		00 27	    P1C3       =	$27	;Palette 1 - Color 3			       write-only
     85  28000 ????		00 28	    MSTAT      =	$28	;Maria Status				       read-only
     86  28000 ????		00 29	    P2C1       =	$29	;Palette 2 - Color 1			       write-only
     87  28000 ????		00 2a	    P2C2       =	$2A	;Palette 2 - Color 2			       write-only
     88  28000 ????		00 2b	    P2C3       =	$2B	;Palette 2 - Color 3			       write-only
     89  28000 ????		00 2c	    DPPH       =	$2C	;Display List List Pointer High	       write-only
     90  28000 ????		00 2d	    P3C1       =	$2D	;Palette 3 - Color 1			       write-only
     91  28000 ????		00 2e	    P3C2       =	$2E	;Palette 3 - Color 2			       write-only
     92  28000 ????		00 2f	    P3C3       =	$2F	;Palette 3 - Color 3			       write-only
     93  28000 ????		00 30	    DPPL       =	$30	;Display List List Pointer Low 	       write-only
     94  28000 ????		00 31	    P4C1       =	$31	;Palette 4 - Color 1			       write-only
     95  28000 ????		00 32	    P4C2       =	$32	;Palette 4 - Color 2			       write-only
     96  28000 ????		00 33	    P4C3       =	$33	;Palette 4 - Color 3			       write-only
     97  28000 ????		00 34	    CHARBASE   =	$34	;Character Base Address		       write-only
     98  28000 ????		00 34	    CHBASE     =	$34	;Character Base Address		       write-only
     99  28000 ????		00 35	    P5C1       =	$35	;Palette 5 - Color 1			       write-only
    100  28000 ????		00 36	    P5C2       =	$36	;Palette 5 - Color 2			       write-only
    101  28000 ????		00 37	    P5C3       =	$37	;Palette 5 - Color 3			       write-only
    102  28000 ????		00 38	    OFFSET     =	$38	;Unused - Store zero here		       write-only
    103  28000 ????		00 39	    P6C1       =	$39	;Palette 6 - Color 1			       write-only
    104  28000 ????		00 3a	    P6C2       =	$3A	;Palette 6 - Color 2			       write-only
    105  28000 ????		00 3b	    P6C3       =	$3B	;Palette 6 - Color 3			       write-only
    106  28000 ????		00 3c	    CTRL       =	$3C	;Maria Control Register		       write-only
    107  28000 ????		00 3d	    P7C1       =	$3D	;Palette 7 - Color 1			       write-only
    108  28000 ????		00 3e	    P7C2       =	$3E	;Palette 7 - Color 2			       write-only
    109  28000 ????		00 3f	    P7C3       =	$3F	;Palette 7 - Color 3			       write-only
    110  28000 ????
    111  28000 ????
    112  28000 ????						;****** 280-2FF ******* PIA PORTS AND TIMERS ************
    113  28000 ????
    114  28000 ????		02 80	    SWCHA      =	$280	;P0+P1 Joystick Directional Input	       read-write
    115  28000 ????		02 81	    CTLSWA     =	$281	;I/O Control for SCHWA 		       read-write
    116  28000 ????		02 81	    SWACNT     =	$281	;VCS name for above			       read-write
    117  28000 ????		02 82	    SWCHB      =	$282	;Console Switches			       read-write
    118  28000 ????		02 83	    CTLSWB     =	$283	;I/O Control for SCHWB 		       read-write
    119  28000 ????		02 83	    SWBCNT     =	$283	;VCS name for above			       read-write
    120  28000 ????
    121  28000 ????		02 84	    INTIM      =	$284	;Iterval Timer Read			       read-only
    122  28000 ????		02 94	    TIM1T      =	$294	;Set 1    CLK Interval (838   nsec/interval)  write-only
    123  28000 ????		02 95	    TIM8T      =	$295	;Set 8    CLK Interval (6.7   usec/interval)  write-only
    124  28000 ????		02 96	    TIM64T     =	$296	;Set 64   CLK Interval (63.6  usec/interval)  write-only
    125  28000 ????		02 97	    T1024T     =	$297	;Set 1024 CLK Interval (858.2 usec/interval)  write-only
    126  28000 ????		02 9e	    TIM64TI    =	$29E	;Interrupt timer 64T			       write-only
    127  28000 ????
    128  28000 ????						;XM
    129  28000 ????		04 70	    XCTRL      =	$470	; 7=YM2151 6=RAM@6k 5=RAM@4k 4=pokey@450 3=hsc 2=cart 1=RoF_bank1 0=RoF_bank2
    130  28000 ????		04 70	    XCTRL1     =	$470
    131  28000 ????		04 78	    XCTRL2     =	$478
    132  28000 ????		04 7c	    XCTRL3     =	$47c
    133  28000 ????		04 71	    XCTRL4     =	$471
    134  28000 ????		04 72	    XCTRL5     =	$472
    135  28000 ????
    136  28000 ????						; Pokey register relative locations, since its base may be different
    137  28000 ????						; depending on the hardware.
    138  28000 ????		00 00	    PAUDF0     =	$0	; extra audio channels and frequencies
    139  28000 ????		00 01	    PAUDC0     =	$1
    140  28000 ????		00 02	    PAUDF1     =	$2
    141  28000 ????		00 03	    PAUDC1     =	$3
    142  28000 ????		00 04	    PAUDF2     =	$4
    143  28000 ????		00 05	    PAUDC2     =	$5
    144  28000 ????		00 06	    PAUDF3     =	$6
    145  28000 ????		00 07	    PAUDC3     =	$7
    146  28000 ????		00 08	    PAUDCTL    =	$8	; Audio Control
    147  28000 ????		00 0a	    PRANDOM    =	$A	; 17 bit polycounter pseudo random
    148  28000 ????		00 0f	    PSKCTL     =	$F	; Serial Port control
------- FILE 7800basic.h
------- FILE 7800basic_variable_redefs.h LEVEL 3 PASS 3
      0  28000 ????				       include	"7800basic_variable_redefs.h"
      1  28000 ????						; This file contains variable mapping and other information for the current project.
      2  28000 ????
      3  28000 ????		00 00	    font_mode  =	$00
      4  28000 ????		00 0b	    font_width_twoscompliment =	$0b
      5  28000 ????		00 35	    font_width =	$35
      6  28000 ????		00 00	    blank_mode =	$00
      7  28000 ????		00 1c	    blank_width_twoscompliment =	$1c
      8  28000 ????		00 04	    blank_width =	$04
      9  28000 ????		00 00	    p1_mode    =	$00
     10  28000 ????		00 1e	    p1_width_twoscompliment =	$1e
     11  28000 ????		00 02	    p1_width   =	$02
     12  28000 ????		00 00	    ex7_mode   =	$00
     13  28000 ????		00 1c	    ex7_width_twoscompliment =	$1c
     14  28000 ????		00 04	    ex7_width  =	$04
     15  28000 ????		00 00	    ex6_mode   =	$00
     16  28000 ????		00 1c	    ex6_width_twoscompliment =	$1c
     17  28000 ????		00 04	    ex6_width  =	$04
     18  28000 ????		00 00	    ex5_mode   =	$00
     19  28000 ????		00 1c	    ex5_width_twoscompliment =	$1c
     20  28000 ????		00 04	    ex5_width  =	$04
     21  28000 ????		00 00	    ex4_mode   =	$00
     22  28000 ????		00 1c	    ex4_width_twoscompliment =	$1c
     23  28000 ????		00 04	    ex4_width  =	$04
     24  28000 ????		00 00	    ex3_mode   =	$00
     25  28000 ????		00 1c	    ex3_width_twoscompliment =	$1c
     26  28000 ????		00 04	    ex3_width  =	$04
     27  28000 ????		00 00	    ex2_mode   =	$00
     28  28000 ????		00 1c	    ex2_width_twoscompliment =	$1c
     29  28000 ????		00 04	    ex2_width  =	$04
     30  28000 ????		00 00	    ex1_mode   =	$00
     31  28000 ????		00 1c	    ex1_width_twoscompliment =	$1c
     32  28000 ????		00 04	    ex1_width  =	$04
     33  28000 ????		00 00	    zonebg80x16_16_mode =	$00
     34  28000 ????		00 0c	    zonebg80x16_16_width_twoscompliment =	$0c
     35  28000 ????		00 14	    zonebg80x16_16_width =	$14
     36  28000 ????		00 00	    g16x16_4color8_mode =	$00
     37  28000 ????		00 1c	    g16x16_4color8_width_twoscompliment =	$1c
     38  28000 ????		00 04	    g16x16_4color8_width =	$04
     39  28000 ????		00 00	    g16x16_4color7_mode =	$00
     40  28000 ????		00 1c	    g16x16_4color7_width_twoscompliment =	$1c
     41  28000 ????		00 04	    g16x16_4color7_width =	$04
     42  28000 ????		00 00	    g16x16_4color6_mode =	$00
     43  28000 ????		00 1c	    g16x16_4color6_width_twoscompliment =	$1c
     44  28000 ????		00 04	    g16x16_4color6_width =	$04
     45  28000 ????		00 00	    g16x16_4color5_mode =	$00
     46  28000 ????		00 1c	    g16x16_4color5_width_twoscompliment =	$1c
     47  28000 ????		00 04	    g16x16_4color5_width =	$04
     48  28000 ????		00 00	    g16x16_4color4_mode =	$00
     49  28000 ????		00 1c	    g16x16_4color4_width_twoscompliment =	$1c
     50  28000 ????		00 04	    g16x16_4color4_width =	$04
     51  28000 ????		00 00	    g16x16_4color3_mode =	$00
     52  28000 ????		00 1c	    g16x16_4color3_width_twoscompliment =	$1c
     53  28000 ????		00 04	    g16x16_4color3_width =	$04
     54  28000 ????		00 00	    g16x16_4color2_mode =	$00
     55  28000 ????		00 1c	    g16x16_4color2_width_twoscompliment =	$1c
     56  28000 ????		00 04	    g16x16_4color2_width =	$04
     57  28000 ????		00 00	    g16x16_4color_mode =	$00
     58  28000 ????		00 1c	    g16x16_4color_width_twoscompliment =	$1c
     59  28000 ????		00 04	    g16x16_4color_width =	$04
     60  28000 ????		00 01	    DOUBLEBUFFER =	1
     61  28000 ????		01 45	    wrap       =	var5
     62  28000 ????
     63  28000 ????		01 44	    ex	       =	var4
     64  28000 ????
     65  28000 ????		01 43	    an	       =	var3
     66  28000 ????
     67  28000 ????		01 42	    db	       =	var2
     68  28000 ????
     69  28000 ????		01 41	    bg	       =	var1
     70  28000 ????
     71  28000 ????		00 0f	    font_color1 =	$0f
     72  28000 ????		00 00	    font_color0 =	$00
     73  28000 ????		00 00	    blank_color1 =	0
     74  28000 ????		00 00	    blank_color0 =	$00
     75  28000 ????		00 35	    p1_color3  =	$35
     76  28000 ????		00 07	    p1_color2  =	$07
     77  28000 ????		00 0c	    p1_color1  =	$0c
     78  28000 ????		00 00	    p1_color0  =	$00
     79  28000 ????		00 07	    ex7_color1 =	$07
     80  28000 ????		00 00	    ex7_color0 =	$00
     81  28000 ????		00 00	    ex6_color3 =	0
     82  28000 ????		00 35	    ex6_color2 =	$35
     83  28000 ????		00 07	    ex6_color1 =	$07
     84  28000 ????		00 00	    ex6_color0 =	$00
     85  28000 ????		00 35	    ex5_color3 =	$35
     86  28000 ????		00 0c	    ex5_color2 =	$0c
     87  28000 ????		00 07	    ex5_color1 =	$07
     88  28000 ????		00 00	    ex5_color0 =	$00
     89  28000 ????		00 35	    ex4_color3 =	$35
     90  28000 ????		00 0c	    ex4_color2 =	$0c
     91  28000 ????		00 07	    ex4_color1 =	$07
     92  28000 ????		00 00	    ex4_color0 =	$00
     93  28000 ????		00 35	    ex3_color3 =	$35
     94  28000 ????		00 0c	    ex3_color2 =	$0c
     95  28000 ????		00 07	    ex3_color1 =	$07
     96  28000 ????		00 00	    ex3_color0 =	$00
     97  28000 ????		00 35	    ex2_color3 =	$35
     98  28000 ????		00 0c	    ex2_color2 =	$0c
     99  28000 ????		00 07	    ex2_color1 =	$07
    100  28000 ????		00 00	    ex2_color0 =	$00
    101  28000 ????		00 35	    ex1_color3 =	$35
    102  28000 ????		00 0c	    ex1_color2 =	$0c
    103  28000 ????		00 07	    ex1_color1 =	$07
    104  28000 ????		00 00	    ex1_color0 =	$00
    105  28000 ????		00 08	    zonebg80x16_16_color1 =	$08
    106  28000 ????		00 00	    zonebg80x16_16_color0 =	$00
    107  28000 ????		00 91	    g16x16_4color8_color3 =	$91
    108  28000 ????		00 a8	    g16x16_4color8_color2 =	$a8
    109  28000 ????		00 91	    g16x16_4color8_color1 =	$91
    110  28000 ????		00 00	    g16x16_4color8_color0 =	$00
    111  28000 ????		00 a8	    g16x16_4color7_color3 =	$a8
    112  28000 ????		00 91	    g16x16_4color7_color2 =	$91
    113  28000 ????		00 91	    g16x16_4color7_color1 =	$91
    114  28000 ????		00 00	    g16x16_4color7_color0 =	$00
    115  28000 ????		00 91	    g16x16_4color6_color3 =	$91
    116  28000 ????		00 a8	    g16x16_4color6_color2 =	$a8
    117  28000 ????		00 91	    g16x16_4color6_color1 =	$91
    118  28000 ????		00 00	    g16x16_4color6_color0 =	$00
    119  28000 ????		00 91	    g16x16_4color5_color3 =	$91
    120  28000 ????		00 a8	    g16x16_4color5_color2 =	$a8
    121  28000 ????		00 91	    g16x16_4color5_color1 =	$91
    122  28000 ????		00 00	    g16x16_4color5_color0 =	$00
    123  28000 ????		00 91	    g16x16_4color4_color3 =	$91
    124  28000 ????		00 a8	    g16x16_4color4_color2 =	$a8
    125  28000 ????		00 91	    g16x16_4color4_color1 =	$91
    126  28000 ????		00 00	    g16x16_4color4_color0 =	$00
    127  28000 ????		00 91	    g16x16_4color3_color3 =	$91
    128  28000 ????		00 a8	    g16x16_4color3_color2 =	$a8
    129  28000 ????		00 91	    g16x16_4color3_color1 =	$91
    130  28000 ????		00 00	    g16x16_4color3_color0 =	$00
    131  28000 ????		00 91	    g16x16_4color2_color3 =	$91
    132  28000 ????		00 a8	    g16x16_4color2_color2 =	$a8
    133  28000 ????		00 91	    g16x16_4color2_color1 =	$91
    134  28000 ????		00 00	    g16x16_4color2_color0 =	$00
    135  28000 ????		00 91	    g16x16_4color_color3 =	$91
    136  28000 ????		00 a8	    g16x16_4color_color2 =	$a8
    137  28000 ????		00 91	    g16x16_4color_color1 =	$91
    138  28000 ????		00 00	    g16x16_4color_color0 =	$00
    139  28000 ????		00 01	    SGRAM      =	1
    140  28000 ????		00 08	    bankswitchmode =	8
    141  28000 ????		00 01	    ROM128K    =	1
    142  28000 ????		00 01	    plotvalueonscreen =	1
    143  28000 ????		00 10	    ZONEHEIGHT =	16
------- FILE 7800basic.h
      6  28000 ????
      7  28000 ????						;************ 7800 overall RAM map **************
      8  28000 ????
      9  28000 ????						;	   40-FF	 zero page RAM
     10  28000 ????						;	  140-1FF	 RAM (stack)
     11  28000 ????						;	 1800-203F	 RAM
     12  28000 ????						;	 2100-213F	 RAM
     13  28000 ????						;	 2200-27FF	 RAM
     14  28000 ????
     15  28000 ????						;************ 7800basic RAM usage map **************
     16  28000 ????
     17  28000 ????						;	   40-FF	 numerous defines, listed below
     18  28000 ????						;	  140-1FF	 RAM (stack)
     19  28000 ????
     20  28000 ????						;	 1800-187F	 DLL  (1800-18DF with page flipping enabled)
     21  28000 ????						;	 1880-1FFF	 DLs  (18E0-1FFF with page flipping enabled)
     22  28000 ????
     23  28000 ????						;	 2000-203F	 Reserved
     24  28000 ????						;	 2100-213F	 Reserved
     25  28000 ????						;	 2200-27FF	 Free
     26  28000 ????
     27  28000 ????		1f e0	    eeprombuffer =	$1FE0
     28  28000 ????		18 00	    DLLMEM     =	$1800
     29  28000 ????		00 70	    DBOFFSET   =	$70	; $E0 length DL is /2 for double-buffering
     30  28000 ????
     31  28000 ????			   -	       ifconst	PLOTVALUEPAGE
     32  28000 ????			   -VALBUFFER  =	(PLOTVALUEPAGE*256)
     33  28000 ????				       else
     34  28000 ????		20 00	    VALBUFFER  =	$2000	; to $203F  ** never let VALBUFFER straddle pages
     35  28000 ????				       endif
     36  28000 ????
     37  28000 ????
     38  28000 ????		21 00	    pausestate =	$2100
     39  28000 ????		21 01	    dlzero     =	$2101	; zero to force end of $2100 DL, which we use in vblank and overscan
     40  28000 ????		21 02	    sINPT1     =	$2102	; save register for joy button joy0
     41  28000 ????		21 03	    sINPT3     =	$2103	; save register for joy button joy1
     42  28000 ????		21 04	    currentbank =	$2104
     43  28000 ????
     44  28000 ????		21 05	    currentrambank =	$2105
     45  28000 ????		21 06	    charactermode =	$2106
     46  28000 ????		21 07	    sCTRL      =	$2107
     47  28000 ????		21 08	    pokeydetected =	$2108
     48  28000 ????		21 09	    paldetected =	$2109
     49  28000 ????		21 0a	    avoxdetected =	$210A
     50  28000 ????		21 0b	    sCHARBASE  =	$210B	; save register for CHARBASE
     51  28000 ????
     52  28000 ????		21 0c	    hsdevice   =	$210C
     53  28000 ????		21 0d	    hsdifficulty =	$210D
     54  28000 ????		21 0e	    hserror    =	$210E
     55  28000 ????		21 0f	    hsgameslot =	$210F
     56  28000 ????		21 10	    hsnewscoreline =	$2110
     57  28000 ????		21 11	    hsnewscorerank =	$2111
     58  28000 ????		21 12	    HSRAMTable =	$2112	; to $212F (30 bytes) Format: III*5, SSS*5
     59  28000 ????		21 12	    HSRAMInitials =	$2112	; see above
     60  28000 ????		21 21	    HSRAMScores =	$2121	; see above
     61  28000 ????
     62  28000 ????		21 31	    ssCTRL     =	$2131
     63  28000 ????		21 32	    ssCHARBASE =	$2132
     64  28000 ????		21 33	    hsdisplaymode =	$2133
     65  28000 ????		21 34	    gamedifficulty =	$2134
     66  28000 ????		21 35	    hsinitialpos =	$2135
     67  28000 ????		21 36	    hsinitialhold =	$2136
     68  28000 ????		21 37	    hscursorx  =	$2137
     69  28000 ????		21 38	    hsjoydebounce =	$2138
     70  28000 ????		21 39	    hsswcha    =	$2139
     71  28000 ????		21 3a	    hsinpt1    =	$213A
     72  28000 ????		21 3b	    hscolorchaseindex =	$213B
     73  28000 ????		21 3c	    visibleDLLstart =	$213C
     74  28000 ????		21 3d	    overscanDLLstart =	$213D
     75  28000 ????		21 3e	    frameslost =	$213E
     76  28000 ????
     77  28000 ????
     78  28000 ????		00 40	    rand       =	$40
     79  28000 ????		00 41	    rand16     =	$41
     80  28000 ????		00 42	    temp1      =	$42
     81  28000 ????		00 43	    temp2      =	$43
     82  28000 ????		00 44	    temp3      =	$44
     83  28000 ????		00 45	    temp4      =	$45
     84  28000 ????		00 46	    temp5      =	$46
     85  28000 ????		00 47	    temp6      =	$47
     86  28000 ????		00 48	    temp7      =	$48
     87  28000 ????		00 49	    temp8      =	$49
     88  28000 ????		00 4a	    temp9      =	$4a
     89  28000 ????
     90  28000 ????		00 4b	    pokeybase  =	$4b
     91  28000 ????		00 4b	    pokeybaselo =	$4b
     92  28000 ????		00 4c	    pokeybasehi =	$4c
     93  28000 ????
     94  28000 ????		00 4d	    visibleover =	$4d
     95  28000 ????
     96  28000 ????		00 4e	    sfx1pointlo =	$4e
     97  28000 ????		00 4f	    sfx2pointlo =	$4f
     98  28000 ????		00 50	    sfx1pointhi =	$50
     99  28000 ????		00 51	    sfx2pointhi =	$51
    100  28000 ????
    101  28000 ????		00 52	    sfx1priority =	$52
    102  28000 ????		00 53	    sfx2priority =	$53
    103  28000 ????		00 54	    sfx1poffset =	$54
    104  28000 ????		00 55	    sfx2poffset =	$55
    105  28000 ????
    106  28000 ????		00 56	    sfx1frames =	$56
    107  28000 ????		00 57	    sfx2frames =	$57
    108  28000 ????		00 58	    sfx1tick   =	$58
    109  28000 ????		00 59	    sfx2tick   =	$59
    110  28000 ????
    111  28000 ????		00 5a	    tempmath   =	$5a
    112  28000 ????
    113  28000 ????		00 5b	    pokey1pointlo =	$5b
    114  28000 ????		00 5c	    pokey1pointhi =	$5c
    115  28000 ????		00 5d	    pokey2pointlo =	$5d
    116  28000 ????		00 5e	    pokey2pointhi =	$5e
    117  28000 ????		00 5f	    pokey3pointlo =	$5f
    118  28000 ????		00 60	    pokey3pointhi =	$60
    119  28000 ????		00 61	    pokey4pointlo =	$61
    120  28000 ????		00 62	    pokey4pointhi =	$62
    121  28000 ????
    122  28000 ????		00 63	    dlpnt      =	$63	; to $64
    123  28000 ????		00 65	    dlend      =	$65	; to $81 - for 28 possible visible dll entries
    124  28000 ????		00 82	    dlendsave  =	$82	; to $9e - for 28 possible visible dll entries
    125  28000 ????
    126  28000 ????		00 9f	    speech_addr =	$9f
    127  28000 ????		00 a0	    speech_addr_hi =	$a0
    128  28000 ????
    129  28000 ????		00 a1	    HSGameTableLo =	$a1
    130  28000 ????		00 a2	    HSGameTableHi =	$a2
    131  28000 ????		00 a3	    HSVoxHi    =	$a3
    132  28000 ????		00 a4	    HSVoxLo    =	$a4
    133  28000 ????
    134  28000 ????						;channel pointers
    135  28000 ????
    136  28000 ????		00 a5	    songchannel1layer1lo =	$a5
    137  28000 ????		00 a6	    songchannel2layer1lo =	$a6
    138  28000 ????		00 a7	    songchannel3layer1lo =	$a7
    139  28000 ????		00 a8	    songchannel4layer1lo =	$a8
    140  28000 ????
    141  28000 ????		00 a9	    songchannel1layer2lo =	$a9
    142  28000 ????		00 aa	    songchannel2layer2lo =	$aA
    143  28000 ????		00 ab	    songchannel3layer2lo =	$aB
    144  28000 ????		00 ac	    songchannel4layer2lo =	$aC
    145  28000 ????
    146  28000 ????		00 ad	    songchannel1layer3lo =	$aD
    147  28000 ????		00 ae	    songchannel2layer3lo =	$aE
    148  28000 ????		00 af	    songchannel3layer3lo =	$aF
    149  28000 ????		00 b0	    songchannel4layer3lo =	$b0
    150  28000 ????
    151  28000 ????		00 b1	    songchannel1layer1hi =	$b1
    152  28000 ????		00 b2	    songchannel2layer1hi =	$b2
    153  28000 ????		00 b3	    songchannel3layer1hi =	$b3
    154  28000 ????		00 b4	    songchannel4layer1hi =	$b4
    155  28000 ????
    156  28000 ????		00 b5	    songchannel1layer2hi =	$b5
    157  28000 ????		00 b6	    songchannel2layer2hi =	$b6
    158  28000 ????		00 b7	    songchannel3layer2hi =	$b7
    159  28000 ????		00 b8	    songchannel4layer2hi =	$b8
    160  28000 ????
    161  28000 ????		00 b9	    songchannel1layer3hi =	$b9
    162  28000 ????		00 ba	    songchannel2layer3hi =	$bA
    163  28000 ????		00 bb	    songchannel3layer3hi =	$bB
    164  28000 ????		00 bc	    songchannel4layer3hi =	$bC
    165  28000 ????
    166  28000 ????		00 bd	    songdatalo =	$bd
    167  28000 ????		00 be	    songdatahi =	$be
    168  28000 ????
    169  28000 ????		00 bf	    inactivechannelcount =	$bf
    170  28000 ????
    171  28000 ????
    172  28000 ????		00 c0	    songchannel1transpose =	$c0
    173  28000 ????		00 c1	    songchannel2transpose =	$c1
    174  28000 ????		00 c2	    songchannel3transpose =	$c2
    175  28000 ????		00 c3	    songchannel4transpose =	$c3
    176  28000 ????
    177  28000 ????		00 c4	    songstackindex =	$c4
    178  28000 ????
    179  28000 ????		00 c5	    songchannel1instrumentlo =	$c5
    180  28000 ????		00 c6	    songchannel2instrumentlo =	$c6
    181  28000 ????		00 c7	    songchannel3instrumentlo =	$c7
    182  28000 ????		00 c8	    songchannel4instrumentlo =	$c8
    183  28000 ????
    184  28000 ????		00 c9	    songchannel1instrumenthi =	$c9
    185  28000 ????		00 ca	    songchannel2instrumenthi =	$ca
    186  28000 ????		00 cb	    songchannel3instrumenthi =	$cb
    187  28000 ????		00 cc	    songchannel4instrumenthi =	$cc
    188  28000 ????
    189  28000 ????		00 cd	    sfx1notedata =	$cd
    190  28000 ????		00 ce	    sfx2notedata =	$ce
    191  28000 ????
    192  28000 ????		00 cf	    songloops  =	$cf
    193  28000 ????
    194  28000 ????		00 d0	    songpointerlo =	$D0
    195  28000 ????		00 d1	    songpointerhi =	$D1
    196  28000 ????
    197  28000 ????		00 d2	    voxlock    =	$D2
    198  28000 ????		00 d3	    voxqueuesize =	$D3
    199  28000 ????
    200  28000 ????		00 d4	    vblankroutines =	$D4
    201  28000 ????
    202  28000 ????		00 d5	    doublebufferstate =	$D5
    203  28000 ????		00 d6	    doublebufferdloffset =	$D6
    204  28000 ????		00 d7	    doublebufferbufferdirty =	$D7
    205  28000 ????
    206  28000 ????		00 d8	    inttemp1   =	$D8
    207  28000 ????		00 d9	    inttemp2   =	$D9
    208  28000 ????		00 da	    inttemp3   =	$DA
    209  28000 ????		00 db	    inttemp4   =	$DB
    210  28000 ????		00 dc	    inttemp5   =	$DC
    211  28000 ????		00 dd	    inttemp6   =	$DD
    212  28000 ????
    213  28000 ????		00 de	    sfxschedulelock =	$DE
    214  28000 ????		00 df	    sfxschedulemissed =	$DF
    215  28000 ????		00 e0	    sfxinstrumentlo =	$E0
    216  28000 ????		00 e1	    sfxinstrumenthi =	$E1
    217  28000 ????		00 e2	    sfxpitchoffset =	$E2
    218  28000 ????		00 e3	    sfxnoteindex =	$E3
    219  28000 ????
    220  28000 ????		00 e4	    CTLSWAs    =	$E4
    221  28000 ????		00 e5	    CTLSWBs    =	$E5
    222  28000 ????
    223  28000 ????		00 e6	    A	       =	$e6
    224  28000 ????		00 e6	    a	       =	$e6
    225  28000 ????		00 e7	    B	       =	$e7
    226  28000 ????		00 e7	    b	       =	$e7
    227  28000 ????		00 e8	    C	       =	$e8
    228  28000 ????		00 e8	    c	       =	$e8
    229  28000 ????		00 e9	    D	       =	$e9
    230  28000 ????		00 e9	    d	       =	$e9
    231  28000 ????		00 ea	    E	       =	$ea
    232  28000 ????		00 ea	    e	       =	$ea
    233  28000 ????		00 eb	    F	       =	$eb
    234  28000 ????		00 eb	    f	       =	$eb
    235  28000 ????		00 ec	    G	       =	$ec
    236  28000 ????		00 ec	    g	       =	$ec
    237  28000 ????		00 ed	    H	       =	$ed
    238  28000 ????		00 ed	    h	       =	$ed
    239  28000 ????		00 ee	    I	       =	$ee
    240  28000 ????		00 ee	    i	       =	$ee
    241  28000 ????		00 ef	    J	       =	$ef
    242  28000 ????		00 ef	    j	       =	$ef
    243  28000 ????		00 f0	    K	       =	$f0
    244  28000 ????		00 f0	    k	       =	$f0
    245  28000 ????		00 f1	    L	       =	$f1
    246  28000 ????		00 f1	    l	       =	$f1
    247  28000 ????		00 f2	    M	       =	$f2
    248  28000 ????		00 f2	    m	       =	$f2
    249  28000 ????		00 f3	    N	       =	$f3
    250  28000 ????		00 f3	    n	       =	$f3
    251  28000 ????		00 f4	    O	       =	$f4
    252  28000 ????		00 f4	    o	       =	$f4
    253  28000 ????		00 f5	    P	       =	$f5
    254  28000 ????		00 f5	    p	       =	$f5
    255  28000 ????		00 f6	    Q	       =	$f6
    256  28000 ????		00 f6	    q	       =	$f6
    257  28000 ????		00 f7	    R	       =	$f7
    258  28000 ????		00 f7	    r	       =	$f7
    259  28000 ????		00 f8	    S	       =	$f8
    260  28000 ????		00 f8	    s	       =	$f8
    261  28000 ????		00 f9	    T	       =	$f9
    262  28000 ????		00 f9	    t	       =	$f9
    263  28000 ????		00 fa	    U	       =	$fa
    264  28000 ????		00 fa	    u	       =	$fa
    265  28000 ????		00 fb	    V	       =	$fb
    266  28000 ????		00 fb	    v	       =	$fb
    267  28000 ????		00 fc	    W	       =	$fc
    268  28000 ????		00 fc	    w	       =	$fc
    269  28000 ????		00 fd	    X	       =	$fd
    270  28000 ????		00 fd	    x	       =	$fd
    271  28000 ????		00 fe	    Y	       =	$fe
    272  28000 ????		00 fe	    y	       =	$fe
    273  28000 ????		00 ff	    Z	       =	$ff
    274  28000 ????		00 ff	    z	       =	$ff
    275  28000 ????
    276  28000 ????						; var0-var99 variables use the top of the stack
    277  28000 ????		01 40	    var0       =	$140
    278  28000 ????		01 41	    var1       =	$141
    279  28000 ????		01 42	    var2       =	$142
    280  28000 ????		01 43	    var3       =	$143
    281  28000 ????		01 44	    var4       =	$144
    282  28000 ????		01 45	    var5       =	$145
    283  28000 ????		01 46	    var6       =	$146
    284  28000 ????		01 47	    var7       =	$147
    285  28000 ????		01 48	    var8       =	$148
    286  28000 ????		01 49	    var9       =	$149
    287  28000 ????		01 4a	    var10      =	$14a
    288  28000 ????		01 4b	    var11      =	$14b
    289  28000 ????		01 4c	    var12      =	$14c
    290  28000 ????		01 4d	    var13      =	$14d
    291  28000 ????		01 4e	    var14      =	$14e
    292  28000 ????		01 4f	    var15      =	$14f
    293  28000 ????		01 50	    var16      =	$150
    294  28000 ????		01 51	    var17      =	$151
    295  28000 ????		01 52	    var18      =	$152
    296  28000 ????		01 53	    var19      =	$153
    297  28000 ????		01 54	    var20      =	$154
    298  28000 ????		01 55	    var21      =	$155
    299  28000 ????		01 56	    var22      =	$156
    300  28000 ????		01 57	    var23      =	$157
    301  28000 ????		01 58	    var24      =	$158
    302  28000 ????		01 59	    var25      =	$159
    303  28000 ????		01 5a	    var26      =	$15a
    304  28000 ????		01 5b	    var27      =	$15b
    305  28000 ????		01 5c	    var28      =	$15c
    306  28000 ????		01 5d	    var29      =	$15d
    307  28000 ????		01 5e	    var30      =	$15e
    308  28000 ????		01 5f	    var31      =	$15f
    309  28000 ????		01 60	    var32      =	$160
    310  28000 ????		01 61	    var33      =	$161
    311  28000 ????		01 62	    var34      =	$162
    312  28000 ????		01 63	    var35      =	$163
    313  28000 ????		01 64	    var36      =	$164
    314  28000 ????		01 65	    var37      =	$165
    315  28000 ????		01 66	    var38      =	$166
    316  28000 ????		01 67	    var39      =	$167
    317  28000 ????		01 68	    var40      =	$168
    318  28000 ????		01 69	    var41      =	$169
    319  28000 ????		01 6a	    var42      =	$16a
    320  28000 ????		01 6b	    var43      =	$16b
    321  28000 ????		01 6c	    var44      =	$16c
    322  28000 ????		01 6d	    var45      =	$16d
    323  28000 ????		01 6e	    var46      =	$16e
    324  28000 ????		01 6f	    var47      =	$16f
    325  28000 ????		01 70	    var48      =	$170
    326  28000 ????		01 71	    var49      =	$171
    327  28000 ????		01 72	    var50      =	$172
    328  28000 ????		01 73	    var51      =	$173
    329  28000 ????		01 74	    var52      =	$174
    330  28000 ????		01 75	    var53      =	$175
    331  28000 ????		01 76	    var54      =	$176
    332  28000 ????		01 77	    var55      =	$177
    333  28000 ????		01 78	    var56      =	$178
    334  28000 ????		01 79	    var57      =	$179
    335  28000 ????		01 7a	    var58      =	$17a
    336  28000 ????		01 7b	    var59      =	$17b
    337  28000 ????		01 7c	    var60      =	$17c
    338  28000 ????		01 7d	    var61      =	$17d
    339  28000 ????		01 7e	    var62      =	$17e
    340  28000 ????		01 7f	    var63      =	$17f
    341  28000 ????		01 80	    var64      =	$180
    342  28000 ????		01 81	    var65      =	$181
    343  28000 ????		01 82	    var66      =	$182
    344  28000 ????		01 83	    var67      =	$183
    345  28000 ????		01 84	    var68      =	$184
    346  28000 ????		01 85	    var69      =	$185
    347  28000 ????		01 86	    var70      =	$186
    348  28000 ????		01 87	    var71      =	$187
    349  28000 ????		01 88	    var72      =	$188
    350  28000 ????		01 89	    var73      =	$189
    351  28000 ????		01 8a	    var74      =	$18a
    352  28000 ????		01 8b	    var75      =	$18b
    353  28000 ????		01 8c	    var76      =	$18c
    354  28000 ????		01 8d	    var77      =	$18d
    355  28000 ????		01 8e	    var78      =	$18e
    356  28000 ????		01 8f	    var79      =	$18f
    357  28000 ????		01 90	    var80      =	$190
    358  28000 ????		01 91	    var81      =	$191
    359  28000 ????		01 92	    var82      =	$192
    360  28000 ????		01 93	    var83      =	$193
    361  28000 ????		01 94	    var84      =	$194
    362  28000 ????		01 95	    var85      =	$195
    363  28000 ????		01 96	    var86      =	$196
    364  28000 ????		01 97	    var87      =	$197
    365  28000 ????		01 98	    var88      =	$198
    366  28000 ????		01 99	    var89      =	$199
    367  28000 ????		01 9a	    var90      =	$19a
    368  28000 ????		01 9b	    var91      =	$19b
    369  28000 ????		01 9c	    var92      =	$19c
    370  28000 ????		01 9d	    var93      =	$19d
    371  28000 ????		01 9e	    var94      =	$19e
    372  28000 ????		01 9f	    var95      =	$19f
    373  28000 ????		01 a0	    var96      =	$1a0
    374  28000 ????		01 a1	    var97      =	$1a1
    375  28000 ????		01 a2	    var98      =	$1a2
    376  28000 ????		01 a3	    var99      =	$1a3
    377  28000 ????
    378  28000 ????		01 a4	    framecounter =	$1A4
    379  28000 ????		01 a5	    countdownseconds =	$1A5
    380  28000 ????		01 a6	    score0     =	$1A6	; $1A7 $1A8
    381  28000 ????		01 a9	    score1     =	$1A9	; $1AA $1AB
    382  28000 ????		01 ac	    pausebuttonflag =	$1AC
    383  28000 ????		01 ad	    valbufend  =	$1AD
    384  28000 ????		01 ae	    valbufendsave =	$1AE
    385  28000 ????		01 af	    finescrollx =	$1AF
    386  28000 ????		01 b0	    finescrolly =	$1B0
    387  28000 ????		01 b1	    joybuttonmode =	$1B1	; used to track any joysticks that were changed to one-button mode
    388  28000 ????		01 b2	    interruptindex =	$1B2
    389  28000 ????		01 b3	    tempavox   =	$1B3
    390  28000 ????		01 b4	    doublebufferminimumframetarget =	$1B4
    391  28000 ????		01 b5	    doublebufferminimumframeindex =	$1B5
    392  28000 ????		01 b6	    pausedisable =	$1B6
    393  28000 ????		01 b7	    XCTRL1s    =	$1B7
    394  28000 ????		01 b8	    spritecount =	$1B8
    395  28000 ????		01 b9	    avoxenable =	$1B9
    396  28000 ????
    397  28000 ????		01 ba	    pokey1frames =	$1BA
    398  28000 ????		01 bb	    pokey1tick =	$1BB
    399  28000 ????		01 bc	    pokey2frames =	$1BC
    400  28000 ????		01 bd	    pokey2tick =	$1BD
    401  28000 ????		01 be	    pokey3frames =	$1BE
    402  28000 ????		01 bf	    pokey3tick =	$1BF
    403  28000 ????		01 c0	    pokey4frames =	$1C0
    404  28000 ????		01 c1	    pokey4tick =	$1C1
    405  28000 ????		01 c2	    pokey1priority =	$1C2
    406  28000 ????		01 c3	    pokey1offset =	$1C3
    407  28000 ????		01 c4	    pokey2priority =	$1C4
    408  28000 ????		01 c5	    pokey2offset =	$1C5
    409  28000 ????		01 c6	    pokey3priority =	$1C6
    410  28000 ????		01 c7	    pokey3offset =	$1C7
    411  28000 ????		01 c8	    pokey4priority =	$1C8
    412  28000 ????		01 c9	    pokey4offset =	$1C9
    413  28000 ????
    414  28000 ????		01 ca	    songtempo  =	$1CA
    415  28000 ????		01 cb	    songtick   =	$1CB
    416  28000 ????
    417  28000 ????		01 cc	    songchannel1layer1loops =	$1CC
    418  28000 ????		01 cd	    songchannel2layer1loops =	$1CD
    419  28000 ????		01 ce	    songchannel3layer1loops =	$1CE
    420  28000 ????		01 cf	    songchannel4layer1loops =	$1CF
    421  28000 ????
    422  28000 ????		01 d0	    songchannel1layer2loops =	$1D0
    423  28000 ????		01 d1	    songchannel2layer2loops =	$1D1
    424  28000 ????		01 d2	    songchannel3layer2loops =	$1D2
    425  28000 ????		01 d3	    songchannel4layer2loops =	$1D3
    426  28000 ????
    427  28000 ????		01 d4	    songchannel1layer3loops =	$1D4
    428  28000 ????		01 d5	    songchannel2layer3loops =	$1D5
    429  28000 ????		01 d6	    songchannel3layer3loops =	$1D6
    430  28000 ????		01 d7	    songchannel4layer3loops =	$1D7
    431  28000 ????
    432  28000 ????		01 d8	    songchannel1busywait =	$1D8
    433  28000 ????		01 d9	    songchannel2busywait =	$1D9
    434  28000 ????		01 da	    songchannel3busywait =	$1DA
    435  28000 ????		01 db	    songchannel4busywait =	$1DB
    436  28000 ????
    437  28000 ????		01 dc	    songchannel1stackdepth =	$1DC
    438  28000 ????		01 dd	    songchannel2stackdepth =	$1DD
    439  28000 ????		01 de	    songchannel3stackdepth =	$1DE
    440  28000 ????		01 df	    songchannel4stackdepth =	$1DF
    441  28000 ????
    442  28000 ????		01 e0	    palframes  =	$1E0
    443  28000 ????		01 e1	    palfastframe =	$1E1
    444  28000 ????
    445  28000 ????		01 e2	    port0control =	$1E2
    446  28000 ????		01 e3	    port1control =	$1E3
    447  28000 ????
    448  28000 ????						; port#control values...
    449  28000 ????						;	1 = proline
    450  28000 ????						;	2 = lightgun
    451  28000 ????						;	3 = paddle
    452  28000 ????						;	4 = trakball
    453  28000 ????						;	5 = vcs joystick
    454  28000 ????						;	6 = driving
    455  28000 ????						;	7 = keypad
    456  28000 ????						;	8 = st mouse/cx80
    457  28000 ????						;	9 = amiga mouse
    458  28000 ????						;     10 = atarivox
    459  28000 ????
    460  28000 ????						; controller 0 data...
    461  28000 ????		01 e4	    paddleposition0 =	$1E4
    462  28000 ????		01 e4	    keypadmatrix0a =	$1E4
    463  28000 ????		01 e4	    drivingposition0 =	$1E4
    464  28000 ????		01 e4	    trakballx0 =	$1E4
    465  28000 ????		01 e4	    mousex0    =	$1E4
    466  28000 ????		01 e4	    lighttgunx0 =	$1E4
    467  28000 ????
    468  28000 ????						; controller 1 data...
    469  28000 ????		01 e5	    paddleposition2 =	$1E5
    470  28000 ????		01 e5	    keypadmatrix1a =	$1E5
    471  28000 ????		01 e5	    drivingposition1 =	$1E5
    472  28000 ????		01 e5	    trakballx1 =	$1E5
    473  28000 ????		01 e5	    mousex1    =	$1E5
    474  28000 ????		01 e5	    lightgunx1 =	$1E5
    475  28000 ????
    476  28000 ????						; controller 0 altdata...
    477  28000 ????		01 e6	    paddleposition1 =	$1E6
    478  28000 ????		01 e6	    keypadmatrix0b =	$1E6
    479  28000 ????		01 e6	    trakbally0 =	$1E6
    480  28000 ????		01 e6	    mousey0    =	$1E6
    481  28000 ????		01 e6	    lightguny0 =	$1E6
    482  28000 ????
    483  28000 ????						; controller 1 altdata...
    484  28000 ????		01 e7	    paddleposition3 =	$1E7
    485  28000 ????		01 e7	    keypadmatrix1b =	$1E7
    486  28000 ????		01 e7	    trakbally1 =	$1E7
    487  28000 ????		01 e7	    mousey1    =	$1E7
    488  28000 ????		01 e7	    lightguny1 =	$1E7
    489  28000 ????
    490  28000 ????						; controller state save. for trakball state+dir codes, rotary position codes
    491  28000 ????		01 e8	    controller0statesave =	$1E8
    492  28000 ????		01 e8	    mousecodex0 =	$1E8
    493  28000 ????		01 e8	    trakballcodex0 =	$1E8
    494  28000 ????		01 e8	    keypadmatrix0c =	$1E8
    495  28000 ????
    496  28000 ????		01 e9	    controller1statesave =	$1E9
    497  28000 ????		01 e9	    mousecodex1 =	$1E9
    498  28000 ????		01 e9	    trakballcodex1 =	$1E9
    499  28000 ????		01 e9	    keypadmatrix1c =	$1E9
    500  28000 ????
    501  28000 ????		01 ea	    keypadmatrix0d =	$1EA
    502  28000 ????		01 ea	    mousecodey0 =	$1EA
    503  28000 ????		01 ea	    trakballcodey0 =	$1EA
    504  28000 ????
    505  28000 ????		01 eb	    keypadmatrix1d =	$1EB
    506  28000 ????		01 eb	    mousecodey1 =	$1EB
    507  28000 ????		01 eb	    trakballcodey1 =	$1EB
    508  28000 ????
    509  28000 ????		01 ec	    genesisdetected0 =	$1EC
    510  28000 ????		01 ed	    genesisdetected1 =	$1ED
    511  28000 ????
    512  28000 ????						; $1EE - $1FF reserved for stack
    513  28000 ????
------- FILE c:\Users\Steve\Desktop\2018dev\7800\7800basic\projects\lessons\lesson1_gfx_modes\160A_16pixelzone_128_16.bas.asm
------- FILE 7800basic_variable_redefs.h LEVEL 2 PASS 3
      0  28000 ????				       include	"7800basic_variable_redefs.h"
      1  28000 ????						; This file contains variable mapping and other information for the current project.
      2  28000 ????
      3  28000 ????		00 00	    font_mode  =	$00
      4  28000 ????		00 0b	    font_width_twoscompliment =	$0b
      5  28000 ????		00 35	    font_width =	$35
      6  28000 ????		00 00	    blank_mode =	$00
      7  28000 ????		00 1c	    blank_width_twoscompliment =	$1c
      8  28000 ????		00 04	    blank_width =	$04
      9  28000 ????		00 00	    p1_mode    =	$00
     10  28000 ????		00 1e	    p1_width_twoscompliment =	$1e
     11  28000 ????		00 02	    p1_width   =	$02
     12  28000 ????		00 00	    ex7_mode   =	$00
     13  28000 ????		00 1c	    ex7_width_twoscompliment =	$1c
     14  28000 ????		00 04	    ex7_width  =	$04
     15  28000 ????		00 00	    ex6_mode   =	$00
     16  28000 ????		00 1c	    ex6_width_twoscompliment =	$1c
     17  28000 ????		00 04	    ex6_width  =	$04
     18  28000 ????		00 00	    ex5_mode   =	$00
     19  28000 ????		00 1c	    ex5_width_twoscompliment =	$1c
     20  28000 ????		00 04	    ex5_width  =	$04
     21  28000 ????		00 00	    ex4_mode   =	$00
     22  28000 ????		00 1c	    ex4_width_twoscompliment =	$1c
     23  28000 ????		00 04	    ex4_width  =	$04
     24  28000 ????		00 00	    ex3_mode   =	$00
     25  28000 ????		00 1c	    ex3_width_twoscompliment =	$1c
     26  28000 ????		00 04	    ex3_width  =	$04
     27  28000 ????		00 00	    ex2_mode   =	$00
     28  28000 ????		00 1c	    ex2_width_twoscompliment =	$1c
     29  28000 ????		00 04	    ex2_width  =	$04
     30  28000 ????		00 00	    ex1_mode   =	$00
     31  28000 ????		00 1c	    ex1_width_twoscompliment =	$1c
     32  28000 ????		00 04	    ex1_width  =	$04
     33  28000 ????		00 00	    zonebg80x16_16_mode =	$00
     34  28000 ????		00 0c	    zonebg80x16_16_width_twoscompliment =	$0c
     35  28000 ????		00 14	    zonebg80x16_16_width =	$14
     36  28000 ????		00 00	    g16x16_4color8_mode =	$00
     37  28000 ????		00 1c	    g16x16_4color8_width_twoscompliment =	$1c
     38  28000 ????		00 04	    g16x16_4color8_width =	$04
     39  28000 ????		00 00	    g16x16_4color7_mode =	$00
     40  28000 ????		00 1c	    g16x16_4color7_width_twoscompliment =	$1c
     41  28000 ????		00 04	    g16x16_4color7_width =	$04
     42  28000 ????		00 00	    g16x16_4color6_mode =	$00
     43  28000 ????		00 1c	    g16x16_4color6_width_twoscompliment =	$1c
     44  28000 ????		00 04	    g16x16_4color6_width =	$04
     45  28000 ????		00 00	    g16x16_4color5_mode =	$00
     46  28000 ????		00 1c	    g16x16_4color5_width_twoscompliment =	$1c
     47  28000 ????		00 04	    g16x16_4color5_width =	$04
     48  28000 ????		00 00	    g16x16_4color4_mode =	$00
     49  28000 ????		00 1c	    g16x16_4color4_width_twoscompliment =	$1c
     50  28000 ????		00 04	    g16x16_4color4_width =	$04
     51  28000 ????		00 00	    g16x16_4color3_mode =	$00
     52  28000 ????		00 1c	    g16x16_4color3_width_twoscompliment =	$1c
     53  28000 ????		00 04	    g16x16_4color3_width =	$04
     54  28000 ????		00 00	    g16x16_4color2_mode =	$00
     55  28000 ????		00 1c	    g16x16_4color2_width_twoscompliment =	$1c
     56  28000 ????		00 04	    g16x16_4color2_width =	$04
     57  28000 ????		00 00	    g16x16_4color_mode =	$00
     58  28000 ????		00 1c	    g16x16_4color_width_twoscompliment =	$1c
     59  28000 ????		00 04	    g16x16_4color_width =	$04
     60  28000 ????		00 01	    DOUBLEBUFFER =	1
     61  28000 ????		01 45	    wrap       =	var5
     62  28000 ????
     63  28000 ????		01 44	    ex	       =	var4
     64  28000 ????
     65  28000 ????		01 43	    an	       =	var3
     66  28000 ????
     67  28000 ????		01 42	    db	       =	var2
     68  28000 ????
     69  28000 ????		01 41	    bg	       =	var1
     70  28000 ????
     71  28000 ????		00 0f	    font_color1 =	$0f
     72  28000 ????		00 00	    font_color0 =	$00
     73  28000 ????		00 00	    blank_color1 =	0
     74  28000 ????		00 00	    blank_color0 =	$00
     75  28000 ????		00 35	    p1_color3  =	$35
     76  28000 ????		00 07	    p1_color2  =	$07
     77  28000 ????		00 0c	    p1_color1  =	$0c
     78  28000 ????		00 00	    p1_color0  =	$00
     79  28000 ????		00 07	    ex7_color1 =	$07
     80  28000 ????		00 00	    ex7_color0 =	$00
     81  28000 ????		00 00	    ex6_color3 =	0
     82  28000 ????		00 35	    ex6_color2 =	$35
     83  28000 ????		00 07	    ex6_color1 =	$07
     84  28000 ????		00 00	    ex6_color0 =	$00
     85  28000 ????		00 35	    ex5_color3 =	$35
     86  28000 ????		00 0c	    ex5_color2 =	$0c
     87  28000 ????		00 07	    ex5_color1 =	$07
     88  28000 ????		00 00	    ex5_color0 =	$00
     89  28000 ????		00 35	    ex4_color3 =	$35
     90  28000 ????		00 0c	    ex4_color2 =	$0c
     91  28000 ????		00 07	    ex4_color1 =	$07
     92  28000 ????		00 00	    ex4_color0 =	$00
     93  28000 ????		00 35	    ex3_color3 =	$35
     94  28000 ????		00 0c	    ex3_color2 =	$0c
     95  28000 ????		00 07	    ex3_color1 =	$07
     96  28000 ????		00 00	    ex3_color0 =	$00
     97  28000 ????		00 35	    ex2_color3 =	$35
     98  28000 ????		00 0c	    ex2_color2 =	$0c
     99  28000 ????		00 07	    ex2_color1 =	$07
    100  28000 ????		00 00	    ex2_color0 =	$00
    101  28000 ????		00 35	    ex1_color3 =	$35
    102  28000 ????		00 0c	    ex1_color2 =	$0c
    103  28000 ????		00 07	    ex1_color1 =	$07
    104  28000 ????		00 00	    ex1_color0 =	$00
    105  28000 ????		00 08	    zonebg80x16_16_color1 =	$08
    106  28000 ????		00 00	    zonebg80x16_16_color0 =	$00
    107  28000 ????		00 91	    g16x16_4color8_color3 =	$91
    108  28000 ????		00 a8	    g16x16_4color8_color2 =	$a8
    109  28000 ????		00 91	    g16x16_4color8_color1 =	$91
    110  28000 ????		00 00	    g16x16_4color8_color0 =	$00
    111  28000 ????		00 a8	    g16x16_4color7_color3 =	$a8
    112  28000 ????		00 91	    g16x16_4color7_color2 =	$91
    113  28000 ????		00 91	    g16x16_4color7_color1 =	$91
    114  28000 ????		00 00	    g16x16_4color7_color0 =	$00
    115  28000 ????		00 91	    g16x16_4color6_color3 =	$91
    116  28000 ????		00 a8	    g16x16_4color6_color2 =	$a8
    117  28000 ????		00 91	    g16x16_4color6_color1 =	$91
    118  28000 ????		00 00	    g16x16_4color6_color0 =	$00
    119  28000 ????		00 91	    g16x16_4color5_color3 =	$91
    120  28000 ????		00 a8	    g16x16_4color5_color2 =	$a8
    121  28000 ????		00 91	    g16x16_4color5_color1 =	$91
    122  28000 ????		00 00	    g16x16_4color5_color0 =	$00
    123  28000 ????		00 91	    g16x16_4color4_color3 =	$91
    124  28000 ????		00 a8	    g16x16_4color4_color2 =	$a8
    125  28000 ????		00 91	    g16x16_4color4_color1 =	$91
    126  28000 ????		00 00	    g16x16_4color4_color0 =	$00
    127  28000 ????		00 91	    g16x16_4color3_color3 =	$91
    128  28000 ????		00 a8	    g16x16_4color3_color2 =	$a8
    129  28000 ????		00 91	    g16x16_4color3_color1 =	$91
    130  28000 ????		00 00	    g16x16_4color3_color0 =	$00
    131  28000 ????		00 91	    g16x16_4color2_color3 =	$91
    132  28000 ????		00 a8	    g16x16_4color2_color2 =	$a8
    133  28000 ????		00 91	    g16x16_4color2_color1 =	$91
    134  28000 ????		00 00	    g16x16_4color2_color0 =	$00
    135  28000 ????		00 91	    g16x16_4color_color3 =	$91
    136  28000 ????		00 a8	    g16x16_4color_color2 =	$a8
    137  28000 ????		00 91	    g16x16_4color_color1 =	$91
    138  28000 ????		00 00	    g16x16_4color_color0 =	$00
    139  28000 ????		00 01	    SGRAM      =	1
    140  28000 ????		00 08	    bankswitchmode =	8
    141  28000 ????		00 01	    ROM128K    =	1
    142  28000 ????		00 01	    plotvalueonscreen =	1
    143  28000 ????		00 10	    ZONEHEIGHT =	16
------- FILE c:\Users\Steve\Desktop\2018dev\7800\7800basic\projects\lessons\lesson1_gfx_modes\160A_16pixelzone_128_16.bas.asm
    285  28000 ????
    286  28000 ????						; A BEAD header gets automatically incorportated into the ROM header. 
    287  28000 ????						; For more BEAD executable info, check out the spec...
    288  28000 ????						; http://7800.8bitdev.org/index.php/The_Atari_7800_BEAD_Execuable_Specification
    289  28000 ????
    290  28000 ????		00 01	    GAMEDESCRIPTIONSET =	1
    291  28000 ????		4e 61 6d 65 GAMEDESCRIPTION =	"Test Name"
    292  28000 ????
    293  28000 ????		00 40	    BDHSC      =	%01000000
    294  28000 ????		00 20	    BDYM       =	%00100000
    295  28000 ????		00 10	    BDPOKEY    =	%00010000
    296  28000 ????		00 08	    BDROF      =	%00001000
    297  28000 ????		00 00	    BD16K      =	%00000000
    298  28000 ????		00 01	    BD32K      =	%00000001
    299  28000 ????		00 02	    BD48K      =	%00000010
    300  28000 ????		00 05	    BD1800     =	%00000101
    301  28000 ????		00 06	    BD4000     =	%00000110
    302  28000 ????
    303  28000 ????			   -	       ifconst	ROM16K
    304  28000 ????			   -BEADHEADER =	1
    305  28000 ????				       endif
    306  28000 ????			   -	       ifconst	ROM32K
    307  28000 ????			   -BEADHEADER =	1
    308  28000 ????				       endif
    309  28000 ????			   -	       ifconst	ROM48K
    310  28000 ????			   -BEADHEADER =	1
    311  28000 ????				       endif
    312  28000 ????
    313  28000 ????			   -	       ifconst	BEADHEADER
    314  28000 ????			   -BEADHARDWARE SET	0
    315  28000 ????			   -	       ifconst	ROM16K
    316  28000 ????			   -BEADHARDWARE SET	(BEADHARDWARE|BD16K)
    317  28000 ????			   -	       endif
    318  28000 ????			   -	       ifconst	ROM32K
    319  28000 ????			   -BEADHARDWARE SET	(BEADHARDWARE|BD32K)
    320  28000 ????			   -	       endif
    321  28000 ????			   -	       ifconst	ROM48K
    322  28000 ????			   -BEADHARDWARE SET	(BEADHARDWARE|BD48K)
    323  28000 ????			   -	       endif
    324  28000 ????			   -	       ifconst	pokeysupport
    325  28000 ????			   -BEADHARDWARE SET	(BEADHARDWARE|BDPOKEY)
    326  28000 ????			   -	       endif
    327  28000 ????			   -	       ifconst	HSSUPPORT
    328  28000 ????			   -BEADHARDWARE SET	(BEADHARDWARE|BDHSC)
    329  28000 ????			   -	       endif
    330  28000 ????				       endif
    331  28000 ????
    332  28000 ????						;start address of cart...
    333  28000 ????			   -	       ifconst	ROM48K
    334  28000 ????			   -	       ORG	$4000,0
    335  28000 ????			   -	       ifconst	BEADHEADER
    336  28000 ????			   -	       .byte	$BE,$AD,BEADHARDWARE
    337  28000 ????			   -	       ifconst	GAMEDESCRIPTIONSET
    338  28000 ????			   -	       CLC
    339  28000 ????			   -	       BCC	_SKIPDESCRIPTION
    340  28000 ????			   -	       .byte	GAMEDESCRIPTION,0
    341  28000 ????			   -_SKIPDESCRIPTION
    342  28000 ????			   -	       endif
    343  28000 ????			   -	       jmp	($FFFC)
    344  28000 ????			   -	       endif
    345  28000 ????				       else
    346  28000 ????				       ifconst	bankswitchmode
    347  28000 ????			   -	       ifconst	ROMAT4K
    348  28000 ????			   -	       ORG	$4000,0
    349  28000 ????			   -	       RORG	$4000
    350  28000 ????				       else
    351  8000					      ORG	$8000,0
    352  8000					      RORG	$8000
    353  8000					      endif
    354  8000				  -	      else		; not bankswitchmode
    355  8000				  -	      ifconst	ROM16K
    356  8000				  -	      ORG	$C000,0
    357  8000				  -	      ifconst	BEADHEADER
    358  8000				  -	      .byte	$BE,$AD,BEADHARDWARE
    359  8000				  -	      ifconst	GAMEDESCRIPTION
    360  8000				  -	      CLC
    361  8000				  -	      BCC	_SKIPDESCRIPTION
    362  8000				  -	      .byte	GAMEDESCRIPTION,0
    363  8000				  -_SKIPDESCRIPTION
    364  8000				  -	      endif
    365  8000				  -	      jmp	($FFFC)
    366  8000				  -	      endif
    367  8000				  -	      else
    368  8000				  -	      ifconst	ROM8K
    369  8000				  -	      ORG	$E000,0
    370  8000				  -	      else
    371  8000				  -	      ORG	$8000,0
    372  8000				  -	      ifconst	BEADHEADER
    373  8000				  -	      .byte	$BE,$AD,BEADHARDWARE
    374  8000				  -	      ifconst	GAMEDESCRIPTION
    375  8000				  -	      CLC
    376  8000				  -	      BCC	_SKIPDESCRIPTION
    377  8000				  -	      .byte	GAMEDESCRIPTION,0
    378  8000				  -_SKIPDESCRIPTION
    379  8000				  -	      endif
    380  8000				  -	      jmp	($FFFC)
    381  8000				  -	      endif
    382  8000				  -	      endif
    383  8000				  -	      endif
    384  8000					      endif
    385  8000					      endif
    386  8000
    387  8000				   game
    388  8000				   .L00 		;;  set zoneheight 16
    389  8000
    390  8000				   .L01 		;;  displaymode 160A
    391  8000
    392  8000		       a9 40		      lda	#%01000000	;Enable DMA, mode=160x2/160x4
    393  8002		       85 3c		      sta	CTRL
    394  8004
    395  8004		       8d 07 21 	      sta	sCTRL
    396  8007
    397  8007				   .L02 		;;  set plotvalueonscreen on
    398  8007
    399  8007				   .L03 		;;  set romsize 128kRAM
    400  8007
    401  8007				   .L04 		;;  set dlmemory $4000 $67ff
    402  8007
    403  8007		       40 00	   DLMEMSTART =	$4000
    404  8007		       67 ff	   DLMEMEND   =	$67ff
    405  8007
    406  8007				   .L05 		;;  BACKGRND = $00
    407  8007
    408  8007		       a9 00		      LDA	#$00
    409  8009		       85 20		      STA	BACKGRND
    410  800b				   .
    411  800b							;; 
    412  800b
    413  800b				   .L06 		;;  rem set dlmemory $4000 $67ff
    414  800b
    415  800b				   .
    416  800b							;; 
    417  800b
    418  800b				   .L07 		;;  incgraphic g16x16_4color.png 160A
    419  800b
    420  800b				   .L08 		;;  incgraphic g16x16_4color2.png 160A
    421  800b
    422  800b				   .L09 		;;  incgraphic g16x16_4color3.png 160A
    423  800b
    424  800b				   .L010		;;  incgraphic g16x16_4color4.png 160A 
    425  800b
    426  800b				   .L011		;;  incgraphic g16x16_4color5.png 160A
    427  800b
    428  800b				   .L012		;;  incgraphic g16x16_4color6.png 160A
    429  800b
    430  800b				   .L013		;;  incgraphic g16x16_4color7.png 160A
    431  800b
    432  800b				   .L014		;;  incgraphic g16x16_4color8.png 160A 
    433  800b
    434  800b				   .L015		;;  incgraphic zonebg80x16_16.png 160A 0 2 3 1
    435  800b
    436  800b				   .L016		;;  incgraphic ex1.png 160A
    437  800b
    438  800b				   .L017		;;  incgraphic ex2.png 160A
    439  800b
    440  800b				   .L018		;;  incgraphic ex3.png 160A
    441  800b
    442  800b				   .L019		;;  incgraphic ex4.png 160A
    443  800b
    444  800b				   .L020		;;  incgraphic ex5.png 160A
    445  800b
    446  800b				   .L021		;;  incgraphic ex6.png 160A
    447  800b
    448  800b				   .L022		;;  incgraphic ex7.png 160A
    449  800b
    450  800b				   .L023		;;  incgraphic p1.png 160A
    451  800b
    452  800b				   .L024		;;  incgraphic blank.png 160A
    453  800b
    454  800b				   .L025		;;  incgraphic font.png 160A 
    455  800b
    456  800b				   .
    457  800b							;; 
    458  800b
    459  800b				   .L026		;;  rem font
    460  800b
    461  800b				   .L027		;;  alphachars '0123456789abcdefghijklmnopqrstuvwxyz>`?!/.,-_()[]&AB '
    462  800b
    463  800b				   .L028		;;  characterset font
    464  800b
    465  800b		       a9 a0		      lda	#>font
    466  800d		       85 34		      sta	CHARBASE
    467  800f		       8d 0b 21 	      sta	sCHARBASE
    468  8012
    469  8012		       a9 60		      lda	#(font_mode | %01100000)
    470  8014		       8d 06 21 	      sta	charactermode
    471  8017
    472  8017				   .
    473  8017							;; 
    474  8017
    475  8017				   .L029		;;  rem blue
    476  8017
    477  8017				   .L030		;;  P0C1 = $90
    478  8017
    479  8017		       a9 90		      LDA	#$90
    480  8019		       85 21		      STA	P0C1
    481  801b				   .L031		;;  P0C2 = $70
    482  801b
    483  801b		       a9 70		      LDA	#$70
    484  801d		       85 22		      STA	P0C2
    485  801f				   .L032		;;  P0C3 = $98
    486  801f
    487  801f		       a9 98		      LDA	#$98
    488  8021		       85 23		      STA	P0C3
    489  8023				   .L033		;;  rem red
    490  8023
    491  8023				   .L034		;;  P1C1 = $20
    492  8023
    493  8023		       a9 20		      LDA	#$20
    494  8025		       85 25		      STA	P1C1
    495  8027				   .L035		;;  P1C2 = $32
    496  8027
    497  8027		       a9 32		      LDA	#$32
    498  8029		       85 26		      STA	P1C2
    499  802b				   .L036		;;  P1C3 = $36
    500  802b
    501  802b		       a9 36		      LDA	#$36
    502  802d		       85 27		      STA	P1C3
    503  802f				   .L037		;;  rem green
    504  802f
    505  802f				   .L038		;;  P2C1 = $C1
    506  802f
    507  802f		       a9 c1		      LDA	#$C1
    508  8031		       85 29		      STA	P2C1
    509  8033				   .L039		;;  P2C2 = $C6
    510  8033
    511  8033		       a9 c6		      LDA	#$C6
    512  8035		       85 2a		      STA	P2C2
    513  8037				   .L040		;;  P2C3 = $CB
    514  8037
    515  8037		       a9 cb		      LDA	#$CB
    516  8039		       85 2b		      STA	P2C3
    517  803b				   .L041		;;  rem purple
    518  803b
    519  803b				   .L042		;;  P3C1 = $50
    520  803b
    521  803b		       a9 50		      LDA	#$50
    522  803d		       85 2d		      STA	P3C1
    523  803f				   .L043		;;  P3C2 = $53
    524  803f
    525  803f		       a9 53		      LDA	#$53
    526  8041		       85 2e		      STA	P3C2
    527  8043				   .L044		;;  P3C3 = $58
    528  8043
    529  8043		       a9 58		      LDA	#$58
    530  8045		       85 2f		      STA	P3C3
    531  8047				   .L045		;;  rem orange
    532  8047
    533  8047				   .L046		;;  P4C1 = $35
    534  8047
    535  8047		       a9 35		      LDA	#$35
    536  8049		       85 31		      STA	P4C1
    537  804b				   .L047		;;  P4C2 = $38
    538  804b
    539  804b		       a9 38		      LDA	#$38
    540  804d		       85 32		      STA	P4C2
    541  804f				   .L048		;;  P4C3 = $3C
    542  804f
    543  804f		       a9 3c		      LDA	#$3C
    544  8051		       85 33		      STA	P4C3
    545  8053				   .L049		;;  rem yellow
    546  8053
    547  8053				   .L050		;;  P5C1 = $15
    548  8053
    549  8053		       a9 15		      LDA	#$15
    550  8055		       85 35		      STA	P5C1
    551  8057				   .L051		;;  P5C2 = $1A
    552  8057
    553  8057		       a9 1a		      LDA	#$1A
    554  8059		       85 36		      STA	P5C2
    555  805b				   .L052		;;  P5C3 = $1E
    556  805b
    557  805b		       a9 1e		      LDA	#$1E
    558  805d		       85 37		      STA	P5C3
    559  805f				   .L053		;;  rem teal
    560  805f
    561  805f				   .L054		;;  P6C1 = $A1
    562  805f
    563  805f		       a9 a1		      LDA	#$A1
    564  8061		       85 39		      STA	P6C1
    565  8063				   .L055		;;  P6C2 = $A6
    566  8063
    567  8063		       a9 a6		      LDA	#$A6
    568  8065		       85 3a		      STA	P6C2
    569  8067				   .L056		;;  P6C3 = $Ac
    570  8067
    571  8067		       a9 ac		      LDA	#$Ac
    572  8069		       85 3b		      STA	P6C3
    573  806b				   .L057		;;  rem white
    574  806b
    575  806b				   .L058		;;  P7C1 = $0F
    576  806b
    577  806b		       a9 0f		      LDA	#$0F
    578  806d		       85 3d		      STA	P7C1
    579  806f				   .L059		;;  P7C2 = $05
    580  806f
    581  806f		       a9 05		      LDA	#$05
    582  8071		       85 3e		      STA	P7C2
    583  8073				   .L060		;;  P7C3 = $09
    584  8073
    585  8073		       a9 09		      LDA	#$09
    586  8075		       85 3f		      STA	P7C3
    587  8077				   .
    588  8077							;; 
    589  8077
    590  8077				   .L061		;;  dim bg  =	var1
    591  8077
    592  8077				   .L062		;;  dim db  =	var2
    593  8077
    594  8077				   .L063		;;  dim an  =	var3
    595  8077
    596  8077				   .L064		;;  dim ex  =	var4
    597  8077
    598  8077				   .L065		;;  dim wrap  =  var5
    599  8077
    600  8077				   .
    601  8077							;; 
    602  8077
    603  8077				   .L066		;;  bg  =  0
    604  8077
    605  8077		       a9 00		      LDA	#0
    606  8079		       8d 41 01 	      STA	bg
    607  807c				   .L067		;;  db  =  0
    608  807c
    609  807c		       a9 00		      LDA	#0
    610  807e		       8d 42 01 	      STA	db
    611  8081				   .L068		;;  an  =  0
    612  8081
    613  8081		       a9 00		      LDA	#0
    614  8083		       8d 43 01 	      STA	an
    615  8086				   .L069		;;  ex  =  0
    616  8086
    617  8086		       a9 00		      LDA	#0
    618  8088		       8d 44 01 	      STA	ex
    619  808b				   .L070		;;  wrap  =  0
    620  808b
    621  808b		       a9 00		      LDA	#0
    622  808d		       8d 45 01 	      STA	wrap
    623  8090				   .
    624  8090							;; 
    625  8090
    626  8090				   .L071		;;  w	=  0
    627  8090
    628  8090		       a9 00		      LDA	#0
    629  8092		       85 fc		      STA	w
    630  8094				   .L072		;;  z	=  0
    631  8094
    632  8094		       a9 00		      LDA	#0
    633  8096		       85 ff		      STA	z
    634  8098				   .
    635  8098							;; 
    636  8098
    637  8098				   ._title
    638  8098							;; _title
    639  8098
    640  8098				   .L073		;;  clearscreen
    641  8098
    642  8098		       20 77 f0 	      jsr	clearscreen
    643  809b				   .L074		;;  plotchars 'demo^1' 7 67 3 1
    644  809b
    645  809b		       4c a4 80 	      JMP	skipalphadata0
    646  809e				   alphadata0
    647  809e		       63		      .byte.b	(<font + $0d)
    648  809f		       64		      .byte.b	(<font + $0e)
    649  80a0		       6c		      .byte.b	(<font + $16)
    650  80a1		       6e		      .byte.b	(<font + $18)
    651  80a2		       8a		      .byte.b	(<font + $34)
    652  80a3		       57		      .byte.b	(<font + $01)
    653  80a4				   skipalphadata0
    654  80a4		       a9 9e		      lda	#<alphadata0
    655  80a6		       85 42		      sta	temp1
    656  80a8
    657  80a8		       a9 80		      lda	#>alphadata0
    658  80aa		       85 43		      sta	temp2
    659  80ac
    660  80ac		       a9 1a		      lda	#26	; width in two's complement
    661  80ae		       09 e0		      ora	#224	; palette left shifted 5 bits
    662  80b0		       85 44		      sta	temp3
    663  80b2		       a9 43		      lda	#67
    664  80b4		       85 45		      sta	temp4
    665  80b6
    666  80b6		       a9 03		      lda	#3
    667  80b8		       85 46		      sta	temp5
    668  80ba
    669  80ba		       20 67 f3 	      jsr	plotcharacters
    670  80bd				   .L075		;;  plotchars 'atari^7800^basic^exploration' 1 23 5 1
    671  80bd
    672  80bd		       4c dc 80 	      JMP	skipalphadata1
    673  80c0				   alphadata1
    674  80c0		       60		      .byte.b	(<font + $0a)
    675  80c1		       73		      .byte.b	(<font + $1d)
    676  80c2		       60		      .byte.b	(<font + $0a)
    677  80c3		       71		      .byte.b	(<font + $1b)
    678  80c4		       68		      .byte.b	(<font + $12)
    679  80c5		       8a		      .byte.b	(<font + $34)
    680  80c6		       5d		      .byte.b	(<font + $07)
    681  80c7		       5e		      .byte.b	(<font + $08)
    682  80c8		       56		      .byte.b	(<font + $00)
    683  80c9		       56		      .byte.b	(<font + $00)
    684  80ca		       8a		      .byte.b	(<font + $34)
    685  80cb		       61		      .byte.b	(<font + $0b)
    686  80cc		       60		      .byte.b	(<font + $0a)
    687  80cd		       72		      .byte.b	(<font + $1c)
    688  80ce		       68		      .byte.b	(<font + $12)
    689  80cf		       62		      .byte.b	(<font + $0c)
    690  80d0		       8a		      .byte.b	(<font + $34)
    691  80d1		       64		      .byte.b	(<font + $0e)
    692  80d2		       77		      .byte.b	(<font + $21)
    693  80d3		       6f		      .byte.b	(<font + $19)
    694  80d4		       6b		      .byte.b	(<font + $15)
    695  80d5		       6e		      .byte.b	(<font + $18)
    696  80d6		       71		      .byte.b	(<font + $1b)
    697  80d7		       60		      .byte.b	(<font + $0a)
    698  80d8		       73		      .byte.b	(<font + $1d)
    699  80d9		       68		      .byte.b	(<font + $12)
    700  80da		       6e		      .byte.b	(<font + $18)
    701  80db		       6d		      .byte.b	(<font + $17)
    702  80dc				   skipalphadata1
    703  80dc		       a9 c0		      lda	#<alphadata1
    704  80de		       85 42		      sta	temp1
    705  80e0
    706  80e0		       a9 80		      lda	#>alphadata1
    707  80e2		       85 43		      sta	temp2
    708  80e4
    709  80e4		       a9 04		      lda	#4	; width in two's complement
    710  80e6		       09 20		      ora	#32	; palette left shifted 5 bits
    711  80e8		       85 44		      sta	temp3
    712  80ea		       a9 17		      lda	#23
    713  80ec		       85 45		      sta	temp4
    714  80ee
    715  80ee		       a9 05		      lda	#5
    716  80f0		       85 46		      sta	temp5
    717  80f2
    718  80f2		       20 67 f3 	      jsr	plotcharacters
    719  80f5				   .L076		;;  plotchars '160a^zoneheight^16' 7 47 7 1
    720  80f5
    721  80f5		       4c 0a 81 	      JMP	skipalphadata2
    722  80f8				   alphadata2
    723  80f8		       57		      .byte.b	(<font + $01)
    724  80f9		       5c		      .byte.b	(<font + $06)
    725  80fa		       56		      .byte.b	(<font + $00)
    726  80fb		       60		      .byte.b	(<font + $0a)
    727  80fc		       8a		      .byte.b	(<font + $34)
    728  80fd		       79		      .byte.b	(<font + $23)
    729  80fe		       6e		      .byte.b	(<font + $18)
    730  80ff		       6d		      .byte.b	(<font + $17)
    731  8100		       64		      .byte.b	(<font + $0e)
    732  8101		       67		      .byte.b	(<font + $11)
    733  8102		       64		      .byte.b	(<font + $0e)
    734  8103		       68		      .byte.b	(<font + $12)
    735  8104		       66		      .byte.b	(<font + $10)
    736  8105		       67		      .byte.b	(<font + $11)
    737  8106		       73		      .byte.b	(<font + $1d)
    738  8107		       8a		      .byte.b	(<font + $34)
    739  8108		       57		      .byte.b	(<font + $01)
    740  8109		       5c		      .byte.b	(<font + $06)
    741  810a				   skipalphadata2
    742  810a		       a9 f8		      lda	#<alphadata2
    743  810c		       85 42		      sta	temp1
    744  810e
    745  810e		       a9 80		      lda	#>alphadata2
    746  8110		       85 43		      sta	temp2
    747  8112
    748  8112		       a9 0e		      lda	#14	; width in two's complement
    749  8114		       09 e0		      ora	#224	; palette left shifted 5 bits
    750  8116		       85 44		      sta	temp3
    751  8118		       a9 2f		      lda	#47
    752  811a		       85 45		      sta	temp4
    753  811c
    754  811c		       a9 07		      lda	#7
    755  811e		       85 46		      sta	temp5
    756  8120
    757  8120		       20 67 f3 	      jsr	plotcharacters
    758  8123				   .L077		;;  if w  >  8  &&  joy0fire then w  =  0  :  goto _screen2_init
    759  8123
    760  8123		       a9 08		      LDA	#8
    761  8125		       c5 fc		      CMP	w
    762  8127		       b0 0c		      BCS	.skipL077
    763  8129				   .condpart0
    764  8129		       2c 02 21 	      bit	sINPT1
    765  812c		       10 07		      BPL	.skip0then
    766  812e				   .condpart1
    767  812e		       a9 00		      LDA	#0
    768  8130		       85 fc		      STA	w
    769  8132		       4c 42 81 	      jmp	._screen2_init
    770  8135
    771  8135				   .skip0then
    772  8135				   .skipL077
    773  8135				   .L078		;;  w	=  w  +  1
    774  8135
    775  8135		       a5 fc		      LDA	w
    776  8137		       18		      CLC
    777  8138		       69 01		      ADC	#1
    778  813a		       85 fc		      STA	w
    779  813c				   .L079		;;  drawscreen
    780  813c
    781  813c		       20 b3 f0 	      jsr	drawscreen
    782  813f				   .L080		;;  goto _title
    783  813f
    784  813f		       4c 98 80 	      jmp	._title
    785  8142
    786  8142				   .
    787  8142							;; 
    788  8142
    789  8142				   .L081		;;  rem background with no animation or doublebuffering
    790  8142
    791  8142				   ._screen2_init
    792  8142							;; _screen2_init
    793  8142
    794  8142				   .L082		;;  bg  =  1
    795  8142
    796  8142		       a9 01		      LDA	#1
    797  8144		       8d 41 01 	      STA	bg
    798  8147				   .L083		;;  db  =  0
    799  8147
    800  8147		       a9 00		      LDA	#0
    801  8149		       8d 42 01 	      STA	db
    802  814c				   .L084		;;  an  =  0
    803  814c
    804  814c		       a9 00		      LDA	#0
    805  814e		       8d 43 01 	      STA	an
    806  8151				   .L085		;;  w	=  0
    807  8151
    808  8151		       a9 00		      LDA	#0
    809  8153		       85 fc		      STA	w
    810  8155				   .L086		;;  gosub _screen_setup
    811  8155
    812  8155		       20 ba 82 	      jsr	._screen_setup
    813  8158
    814  8158				   ._screen2_loop
    815  8158							;; _screen2_loop
    816  8158
    817  8158				   .L087		;;  gosub _screen
    818  8158
    819  8158		       20 fa 82 	      jsr	._screen
    820  815b
    821  815b				   .L088		;;  if w  >  8  &&  joy0fire then w  =  0  :  goto _screen3_init
    822  815b
    823  815b		       a9 08		      LDA	#8
    824  815d		       c5 fc		      CMP	w
    825  815f		       b0 0c		      BCS	.skipL088
    826  8161				   .condpart2
    827  8161		       2c 02 21 	      bit	sINPT1
    828  8164		       10 07		      BPL	.skip2then
    829  8166				   .condpart3
    830  8166		       a9 00		      LDA	#0
    831  8168		       85 fc		      STA	w
    832  816a		       4c 77 81 	      jmp	._screen3_init
    833  816d
    834  816d				   .skip2then
    835  816d				   .skipL088
    836  816d				   .L089		;;  w	=  w  +  1
    837  816d
    838  816d		       a5 fc		      LDA	w
    839  816f		       18		      CLC
    840  8170		       69 01		      ADC	#1
    841  8172		       85 fc		      STA	w
    842  8174				   .L090		;;  goto _screen2_loop
    843  8174
    844  8174		       4c 58 81 	      jmp	._screen2_loop
    845  8177
    846  8177				   .
    847  8177							;; 
    848  8177
    849  8177				   .L091		;;  rem no background with no animation or doublebuffering
    850  8177
    851  8177				   ._screen3_init
    852  8177							;; _screen3_init
    853  8177
    854  8177				   .L092		;;  bg  =  0
    855  8177
    856  8177		       a9 00		      LDA	#0
    857  8179		       8d 41 01 	      STA	bg
    858  817c				   .L093		;;  db  =  0
    859  817c
    860  817c		       a9 00		      LDA	#0
    861  817e		       8d 42 01 	      STA	db
    862  8181				   .L094		;;  an  =  0
    863  8181
    864  8181		       a9 00		      LDA	#0
    865  8183		       8d 43 01 	      STA	an
    866  8186				   .L095		;;  w	=  0
    867  8186
    868  8186		       a9 00		      LDA	#0
    869  8188		       85 fc		      STA	w
    870  818a				   .L096		;;  gosub _screen_setup
    871  818a
    872  818a		       20 ba 82 	      jsr	._screen_setup
    873  818d
    874  818d				   ._screen3_loop
    875  818d							;; _screen3_loop
    876  818d
    877  818d				   .L097		;;  gosub _screen
    878  818d
    879  818d		       20 fa 82 	      jsr	._screen
    880  8190
    881  8190				   .L098		;;  if w  >  8  &&  joy0fire then w  =  0  :  goto _screen4_init
    882  8190
    883  8190		       a9 08		      LDA	#8
    884  8192		       c5 fc		      CMP	w
    885  8194		       b0 0c		      BCS	.skipL098
    886  8196				   .condpart4
    887  8196		       2c 02 21 	      bit	sINPT1
    888  8199		       10 07		      BPL	.skip4then
    889  819b				   .condpart5
    890  819b		       a9 00		      LDA	#0
    891  819d		       85 fc		      STA	w
    892  819f		       4c ac 81 	      jmp	._screen4_init
    893  81a2
    894  81a2				   .skip4then
    895  81a2				   .skipL098
    896  81a2				   .L099		;;  w	=  w  +  1
    897  81a2
    898  81a2		       a5 fc		      LDA	w
    899  81a4		       18		      CLC
    900  81a5		       69 01		      ADC	#1
    901  81a7		       85 fc		      STA	w
    902  81a9				   .L0100		;;  goto _screen3_loop
    903  81a9
    904  81a9		       4c 8d 81 	      jmp	._screen3_loop
    905  81ac
    906  81ac				   .
    907  81ac							;; 
    908  81ac
    909  81ac				   .L0101		;;  rem no background with  animation and no doublebuffering
    910  81ac
    911  81ac				   ._screen4_init
    912  81ac							;; _screen4_init
    913  81ac
    914  81ac				   .L0102		;;  bg  =  0
    915  81ac
    916  81ac		       a9 00		      LDA	#0
    917  81ae		       8d 41 01 	      STA	bg
    918  81b1				   .L0103		;;  db  =  0
    919  81b1
    920  81b1		       a9 00		      LDA	#0
    921  81b3		       8d 42 01 	      STA	db
    922  81b6				   .L0104		;;  an  =  1
    923  81b6
    924  81b6		       a9 01		      LDA	#1
    925  81b8		       8d 43 01 	      STA	an
    926  81bb				   .L0105		;;  w	=  0
    927  81bb
    928  81bb		       a9 00		      LDA	#0
    929  81bd		       85 fc		      STA	w
    930  81bf				   .L0106		;;  gosub _screen_setup
    931  81bf
    932  81bf		       20 ba 82 	      jsr	._screen_setup
    933  81c2
    934  81c2				   ._screen4_loop
    935  81c2							;; _screen4_loop
    936  81c2
    937  81c2				   .L0107		;;  gosub _screen
    938  81c2
    939  81c2		       20 fa 82 	      jsr	._screen
    940  81c5
    941  81c5				   .L0108		;;  if w  >  8  &&  joy0fire then w  =  0  :  goto _screen5_init
    942  81c5
    943  81c5		       a9 08		      LDA	#8
    944  81c7		       c5 fc		      CMP	w
    945  81c9		       b0 0c		      BCS	.skipL0108
    946  81cb				   .condpart6
    947  81cb		       2c 02 21 	      bit	sINPT1
    948  81ce		       10 07		      BPL	.skip6then
    949  81d0				   .condpart7
    950  81d0		       a9 00		      LDA	#0
    951  81d2		       85 fc		      STA	w
    952  81d4		       4c e1 81 	      jmp	._screen5_init
    953  81d7
    954  81d7				   .skip6then
    955  81d7				   .skipL0108
    956  81d7				   .L0109		;;  w	=  w  +  1
    957  81d7
    958  81d7		       a5 fc		      LDA	w
    959  81d9		       18		      CLC
    960  81da		       69 01		      ADC	#1
    961  81dc		       85 fc		      STA	w
    962  81de				   .L0110		;;  goto _screen4_loop
    963  81de
    964  81de		       4c c2 81 	      jmp	._screen4_loop
    965  81e1
    966  81e1				   .
    967  81e1							;; 
    968  81e1
    969  81e1				   .L0111		;;  rem with background with animation and no doublebuffering
    970  81e1
    971  81e1				   ._screen5_init
    972  81e1							;; _screen5_init
    973  81e1
    974  81e1				   .L0112		;;  bg  =  1
    975  81e1
    976  81e1		       a9 01		      LDA	#1
    977  81e3		       8d 41 01 	      STA	bg
    978  81e6				   .L0113		;;  db  =  0
    979  81e6
    980  81e6		       a9 00		      LDA	#0
    981  81e8		       8d 42 01 	      STA	db
    982  81eb				   .L0114		;;  an  =  1
    983  81eb
    984  81eb		       a9 01		      LDA	#1
    985  81ed		       8d 43 01 	      STA	an
    986  81f0				   .L0115		;;  w	=  0
    987  81f0
    988  81f0		       a9 00		      LDA	#0
    989  81f2		       85 fc		      STA	w
    990  81f4				   .L0116		;;  gosub _screen_setup
    991  81f4
    992  81f4		       20 ba 82 	      jsr	._screen_setup
    993  81f7
    994  81f7				   ._screen5_loop
    995  81f7							;; _screen5_loop
    996  81f7
    997  81f7				   .L0117		;;  gosub _screen
    998  81f7
    999  81f7		       20 fa 82 	      jsr	._screen
   1000  81fa
   1001  81fa				   .L0118		;;  if w  >  8  &&  joy0fire then w  =  0  :  goto _screen6_init
   1002  81fa
   1003  81fa		       a9 08		      LDA	#8
   1004  81fc		       c5 fc		      CMP	w
   1005  81fe		       b0 0c		      BCS	.skipL0118
   1006  8200				   .condpart8
   1007  8200		       2c 02 21 	      bit	sINPT1
   1008  8203		       10 07		      BPL	.skip8then
   1009  8205				   .condpart9
   1010  8205		       a9 00		      LDA	#0
   1011  8207		       85 fc		      STA	w
   1012  8209		       4c 16 82 	      jmp	._screen6_init
   1013  820c
   1014  820c				   .skip8then
   1015  820c				   .skipL0118
   1016  820c				   .L0119		;;  w	=  w  +  1
   1017  820c
   1018  820c		       a5 fc		      LDA	w
   1019  820e		       18		      CLC
   1020  820f		       69 01		      ADC	#1
   1021  8211		       85 fc		      STA	w
   1022  8213				   .L0120		;;  goto _screen5_loop
   1023  8213
   1024  8213		       4c f7 81 	      jmp	._screen5_loop
   1025  8216
   1026  8216				   .
   1027  8216							;; 
   1028  8216
   1029  8216				   .L0121		;;  rem with no background with animation and with doublebuffering
   1030  8216
   1031  8216				   ._screen6_init
   1032  8216							;; _screen6_init
   1033  8216
   1034  8216				   .L0122		;;  bg  =  0
   1035  8216
   1036  8216		       a9 00		      LDA	#0
   1037  8218		       8d 41 01 	      STA	bg
   1038  821b				   .L0123		;;  db  =  1
   1039  821b
   1040  821b		       a9 01		      LDA	#1
   1041  821d		       8d 42 01 	      STA	db
   1042  8220				   .L0124		;;  an  =  1
   1043  8220
   1044  8220		       a9 01		      LDA	#1
   1045  8222		       8d 43 01 	      STA	an
   1046  8225				   .L0125		;;  w	=  0
   1047  8225
   1048  8225		       a9 00		      LDA	#0
   1049  8227		       85 fc		      STA	w
   1050  8229				   .L0126		;;  gosub _screen_setup
   1051  8229
   1052  8229		       20 ba 82 	      jsr	._screen_setup
   1053  822c
   1054  822c				   ._screen6_loop
   1055  822c							;; _screen6_loop
   1056  822c
   1057  822c				   .L0127		;;  gosub _screen
   1058  822c
   1059  822c		       20 fa 82 	      jsr	._screen
   1060  822f
   1061  822f				   .L0128		;;  if w  >  8  &&  joy0fire then w  =  0  :  goto _screen7_init
   1062  822f
   1063  822f		       a9 08		      LDA	#8
   1064  8231		       c5 fc		      CMP	w
   1065  8233		       b0 0c		      BCS	.skipL0128
   1066  8235				   .condpart10
   1067  8235		       2c 02 21 	      bit	sINPT1
   1068  8238		       10 07		      BPL	.skip10then
   1069  823a				   .condpart11
   1070  823a		       a9 00		      LDA	#0
   1071  823c		       85 fc		      STA	w
   1072  823e		       4c 4b 82 	      jmp	._screen7_init
   1073  8241
   1074  8241				   .skip10then
   1075  8241				   .skipL0128
   1076  8241				   .L0129		;;  w	=  w  +  1
   1077  8241
   1078  8241		       a5 fc		      LDA	w
   1079  8243		       18		      CLC
   1080  8244		       69 01		      ADC	#1
   1081  8246		       85 fc		      STA	w
   1082  8248				   .L0130		;;  goto _screen6_loop
   1083  8248
   1084  8248		       4c 2c 82 	      jmp	._screen6_loop
   1085  824b
   1086  824b				   .
   1087  824b							;; 
   1088  824b
   1089  824b				   .L0131		;;  rem with background with animation and with doublebuffering
   1090  824b
   1091  824b				   ._screen7_init
   1092  824b							;; _screen7_init
   1093  824b
   1094  824b				   .L0132		;;  bg  =  1
   1095  824b
   1096  824b		       a9 01		      LDA	#1
   1097  824d		       8d 41 01 	      STA	bg
   1098  8250				   .L0133		;;  db  =  1
   1099  8250
   1100  8250		       a9 01		      LDA	#1
   1101  8252		       8d 42 01 	      STA	db
   1102  8255				   .L0134		;;  an  =  1
   1103  8255
   1104  8255		       a9 01		      LDA	#1
   1105  8257		       8d 43 01 	      STA	an
   1106  825a				   .L0135		;;  w	=  0
   1107  825a
   1108  825a		       a9 00		      LDA	#0
   1109  825c		       85 fc		      STA	w
   1110  825e				   .L0136		;;  gosub _screen_setup
   1111  825e
   1112  825e		       20 ba 82 	      jsr	._screen_setup
   1113  8261
   1114  8261				   ._screen7_loop
   1115  8261							;; _screen7_loop
   1116  8261
   1117  8261				   .L0137		;;  gosub _screen
   1118  8261
   1119  8261		       20 fa 82 	      jsr	._screen
   1120  8264
   1121  8264				   .L0138		;;  if w  >  8  &&  joy0fire then w  =  0  :  goto _screen8_init
   1122  8264
   1123  8264		       a9 08		      LDA	#8
   1124  8266		       c5 fc		      CMP	w
   1125  8268		       b0 0c		      BCS	.skipL0138
   1126  826a				   .condpart12
   1127  826a		       2c 02 21 	      bit	sINPT1
   1128  826d		       10 07		      BPL	.skip12then
   1129  826f				   .condpart13
   1130  826f		       a9 00		      LDA	#0
   1131  8271		       85 fc		      STA	w
   1132  8273		       4c 80 82 	      jmp	._screen8_init
   1133  8276
   1134  8276				   .skip12then
   1135  8276				   .skipL0138
   1136  8276				   .L0139		;;  w	=  w  +  1
   1137  8276
   1138  8276		       a5 fc		      LDA	w
   1139  8278		       18		      CLC
   1140  8279		       69 01		      ADC	#1
   1141  827b		       85 fc		      STA	w
   1142  827d				   .L0140		;;  goto _screen7_loop
   1143  827d
   1144  827d		       4c 61 82 	      jmp	._screen7_loop
   1145  8280
   1146  8280				   .
   1147  8280							;; 
   1148  8280
   1149  8280				   ._screen8_init
   1150  8280							;; _screen8_init
   1151  8280
   1152  8280				   .L0141		;;  bg  =  1
   1153  8280
   1154  8280		       a9 01		      LDA	#1
   1155  8282		       8d 41 01 	      STA	bg
   1156  8285				   .L0142		;;  db  =  1
   1157  8285
   1158  8285		       a9 01		      LDA	#1
   1159  8287		       8d 42 01 	      STA	db
   1160  828a				   .L0143		;;  an  =  1
   1161  828a
   1162  828a		       a9 01		      LDA	#1
   1163  828c		       8d 43 01 	      STA	an
   1164  828f				   .L0144		;;  ex  =  1
   1165  828f
   1166  828f		       a9 01		      LDA	#1
   1167  8291		       8d 44 01 	      STA	ex
   1168  8294				   .L0145		;;  w	=  0
   1169  8294
   1170  8294		       a9 00		      LDA	#0
   1171  8296		       85 fc		      STA	w
   1172  8298				   .L0146		;;  gosub _screen_setup
   1173  8298
   1174  8298		       20 ba 82 	      jsr	._screen_setup
   1175  829b
   1176  829b				   ._screen8_loop
   1177  829b							;; _screen8_loop
   1178  829b
   1179  829b				   .L0147		;;  gosub _screen
   1180  829b
   1181  829b		       20 fa 82 	      jsr	._screen
   1182  829e
   1183  829e				   .L0148		;;  if w  >  8  &&  joy0fire then w  =  0  :  goto _screen2_init
   1184  829e
   1185  829e		       a9 08		      LDA	#8
   1186  82a0		       c5 fc		      CMP	w
   1187  82a2		       b0 0c		      BCS	.skipL0148
   1188  82a4				   .condpart14
   1189  82a4		       2c 02 21 	      bit	sINPT1
   1190  82a7		       10 07		      BPL	.skip14then
   1191  82a9				   .condpart15
   1192  82a9		       a9 00		      LDA	#0
   1193  82ab		       85 fc		      STA	w
   1194  82ad		       4c 42 81 	      jmp	._screen2_init
   1195  82b0
   1196  82b0				   .skip14then
   1197  82b0				   .skipL0148
   1198  82b0				   .L0149		;;  w	=  w  +  1
   1199  82b0
   1200  82b0		       a5 fc		      LDA	w
   1201  82b2		       18		      CLC
   1202  82b3		       69 01		      ADC	#1
   1203  82b5		       85 fc		      STA	w
   1204  82b7				   .L0150		;;  goto _screen8_loop
   1205  82b7
   1206  82b7		       4c 9b 82 	      jmp	._screen8_loop
   1207  82ba
   1208  82ba				   .
   1209  82ba							;; 
   1210  82ba
   1211  82ba				   .L0151		;;  rem set-up screen vars
   1212  82ba
   1213  82ba				   ._screen_setup
   1214  82ba							;; _screen_setup
   1215  82ba
   1216  82ba				   .L0152		;;  clearscreen
   1217  82ba
   1218  82ba		       20 77 f0 	      jsr	clearscreen
   1219  82bd				   .L0153		;;  if db then doublebuffer on 2
   1220  82bd
   1221  82bd		       ad 42 01 	      LDA	db
   1222  82c0		       f0 09		      BEQ	.skipL0153
   1223  82c2				   .condpart16
   1224  82c2		       a9 01		      lda	#1
   1225  82c4		       85 d5		      sta	doublebufferstate
   1226  82c6		       a9 02		      lda	#2
   1227  82c8		       8d b4 01 	      sta	doublebufferminimumframetarget
   1228  82cb				   .skipL0153
   1229  82cb				   .L0154		;;  if !db then doublebuffer off
   1230  82cb
   1231  82cb		       ad 42 01 	      LDA	db
   1232  82ce		       d0 03		      BNE	.skipL0154
   1233  82d0				   .condpart17
   1234  82d0		       20 20 f6 	      jsr	doublebufferoff
   1235  82d3				   .skipL0154
   1236  82d3				   .L0155		;;  if bg then gosub drawZoneBG
   1237  82d3
   1238  82d3		       ad 41 01 	      LDA	bg
   1239  82d6		       f0 03		      BEQ	.skipL0155
   1240  82d8				   .condpart18
   1241  82d8		       20 f4 85 	      jsr	.drawZoneBG
   1242  82db
   1243  82db				   .skipL0155
   1244  82db				   .L0156		;;  m	=  0
   1245  82db
   1246  82db		       a9 00		      LDA	#0
   1247  82dd		       85 f2		      STA	m
   1248  82df				   .L0157		;;  n	=  0
   1249  82df
   1250  82df		       a9 00		      LDA	#0
   1251  82e1		       85 f3		      STA	n
   1252  82e3				   .L0158		;;  c	=  0
   1253  82e3
   1254  82e3		       a9 00		      LDA	#0
   1255  82e5		       85 e8		      STA	c
   1256  82e7				   .L0159		;;  f	=  0
   1257  82e7
   1258  82e7		       a9 00		      LDA	#0
   1259  82e9		       85 eb		      STA	f
   1260  82eb				   .L0160		;;  wrap  =  0
   1261  82eb
   1262  82eb		       a9 00		      LDA	#0
   1263  82ed		       8d 45 01 	      STA	wrap
   1264  82f0				   .L0161		;;  return
   1265  82f0
   1266  82f0		       ba		      tsx
   1267  82f1		       bd 02 01 	      lda	$102,x
   1268  82f4		       f0 01		      beq	bankswitchret4
   1269  82f6		       60		      RTS
   1270  82f7				   bankswitchret4
   1271  82f7		       4c c2 f4 	      JMP	BS_return
   1272  82fa				   .
   1273  82fa							;; 
   1274  82fa
   1275  82fa				   .L0162		;;  rem draw screen
   1276  82fa
   1277  82fa				   ._screen
   1278  82fa							;; _screen
   1279  82fa
   1280  82fa				   .L0163		;;  if bg then restorescreen
   1281  82fa
   1282  82fa		       ad 41 01 	      LDA	bg
   1283  82fd		       f0 03		      BEQ	.skipL0163
   1284  82ff				   .condpart19
   1285  82ff		       20 89 f0 	      jsr	restorescreen
   1286  8302				   .skipL0163
   1287  8302				   .L0164		;;  if !bg then clearscreen
   1288  8302
   1289  8302		       ad 41 01 	      LDA	bg
   1290  8305		       d0 03		      BNE	.skipL0164
   1291  8307				   .condpart20
   1292  8307		       20 77 f0 	      jsr	clearscreen
   1293  830a				   .skipL0164
   1294  830a				   .L0165		;;  y	=  0
   1295  830a
   1296  830a		       a9 00		      LDA	#0
   1297  830c		       85 fe		      STA	y
   1298  830e				   .L0166		;;  x	=  0
   1299  830e
   1300  830e		       a9 00		      LDA	#0
   1301  8310		       85 fd		      STA	x
   1302  8312				   .L0167		;;  c	=  0
   1303  8312
   1304  8312		       a9 00		      LDA	#0
   1305  8314		       85 e8		      STA	c
   1306  8316				   .L0168		;;  for i  =  0 to n
   1307  8316
   1308  8316		       a9 00		      LDA	#0
   1309  8318		       85 ee		      STA	i
   1310  831a				   .L0168fori
   1311  831a				   .L0169		;;  for j  =  0 to m
   1312  831a
   1313  831a		       a9 00		      LDA	#0
   1314  831c		       85 ef		      STA	j
   1315  831e				   .L0169forj
   1316  831e				   .L0170		;;  if ex  =  1  &&  wrap  =  0 then plotsprite ex1 c x y f
   1317  831e
   1318  831e		       ad 44 01 	      LDA	ex
   1319  8321		       c9 01		      CMP	#1
   1320  8323		       d0 33		      BNE	.skipL0170
   1321  8325				   .condpart21
   1322  8325		       ad 45 01 	      LDA	wrap
   1323  8328		       c9 00		      CMP	#0
   1324  832a		       d0 2c		      BNE	.skip21then
   1325  832c				   .condpart22
   1326  832c		       a9 34		      lda	#<ex1
   1327  832e		       a0 04		      ldy	#ex1_width
   1328  8330		       18		      clc
   1329  8331		       f0 05		      beq	plotspritewidthskip4
   1330  8333				   plotspritewidthloop4
   1331  8333		       65 eb		      adc	f
   1332  8335		       88		      dey
   1333  8336		       d0 fb		      bne	plotspritewidthloop4
   1334  8338				   plotspritewidthskip4
   1335  8338		       85 42		      sta	temp1
   1336  833a
   1337  833a		       a9 a0		      lda	#>ex1
   1338  833c		       85 43		      sta	temp2
   1339  833e
   1340  833e		       a5 e8		      lda	c
   1341  8340		       0a		      asl
   1342  8341		       0a		      asl
   1343  8342		       0a		      asl
   1344  8343		       0a		      asl
   1345  8344		       0a		      asl
   1346  8345		       09 1c		      ora	#ex1_width_twoscompliment
   1347  8347		       85 44		      sta	temp3
   1348  8349
   1349  8349		       a5 fd		      lda	x
   1350  834b		       85 45		      sta	temp4
   1351  834d
   1352  834d		       a5 fe		      lda	y
   1353  834f		       85 46		      sta	temp5
   1354  8351
   1355  8351		       a9 40		      lda	#(ex1_mode|%01000000)
   1356  8353		       85 47		      sta	temp6
   1357  8355
   1358  8355		       20 9d f2 	      jsr	plotsprite
   1359  8358				   .skip21then
   1360  8358				   .skipL0170
   1361  8358				   .L0171		;;  if ex  =  0  &&  wrap  =  0 then plotsprite g16x16_4color c x y f
   1362  8358
   1363  8358		       ad 44 01 	      LDA	ex
   1364  835b		       c9 00		      CMP	#0
   1365  835d		       d0 33		      BNE	.skipL0171
   1366  835f				   .condpart23
   1367  835f		       ad 45 01 	      LDA	wrap
   1368  8362		       c9 00		      CMP	#0
   1369  8364		       d0 2c		      BNE	.skip23then
   1370  8366				   .condpart24
   1371  8366		       a9 00		      lda	#<g16x16_4color
   1372  8368		       a0 04		      ldy	#g16x16_4color_width
   1373  836a		       18		      clc
   1374  836b		       f0 05		      beq	plotspritewidthskip5
   1375  836d				   plotspritewidthloop5
   1376  836d		       65 eb		      adc	f
   1377  836f		       88		      dey
   1378  8370		       d0 fb		      bne	plotspritewidthloop5
   1379  8372				   plotspritewidthskip5
   1380  8372		       85 42		      sta	temp1
   1381  8374
   1382  8374		       a9 a0		      lda	#>g16x16_4color
   1383  8376		       85 43		      sta	temp2
   1384  8378
   1385  8378		       a5 e8		      lda	c
   1386  837a		       0a		      asl
   1387  837b		       0a		      asl
   1388  837c		       0a		      asl
   1389  837d		       0a		      asl
   1390  837e		       0a		      asl
   1391  837f		       09 1c		      ora	#g16x16_4color_width_twoscompliment
   1392  8381		       85 44		      sta	temp3
   1393  8383
   1394  8383		       a5 fd		      lda	x
   1395  8385		       85 45		      sta	temp4
   1396  8387
   1397  8387		       a5 fe		      lda	y
   1398  8389		       85 46		      sta	temp5
   1399  838b
   1400  838b		       a9 40		      lda	#(g16x16_4color_mode|%01000000)
   1401  838d		       85 47		      sta	temp6
   1402  838f
   1403  838f		       20 9d f2 	      jsr	plotsprite
   1404  8392				   .skip23then
   1405  8392				   .skipL0171
   1406  8392				   .L0172		;;  if wrap  =  1 then plotsprite p1 7 x y 0
   1407  8392
   1408  8392		       ad 45 01 	      LDA	wrap
   1409  8395		       c9 01		      CMP	#1
   1410  8397		       d0 1b		      BNE	.skipL0172
   1411  8399				   .condpart25
   1412  8399		       a9 50		      lda	#<p1
   1413  839b		       85 42		      sta	temp1
   1414  839d
   1415  839d		       a9 a0		      lda	#>p1
   1416  839f		       85 43		      sta	temp2
   1417  83a1
   1418  83a1		       a9 fe		      lda	#(224|p1_width_twoscompliment)
   1419  83a3		       85 44		      sta	temp3
   1420  83a5
   1421  83a5		       a5 fd		      lda	x
   1422  83a7		       85 45		      sta	temp4
   1423  83a9
   1424  83a9		       a5 fe		      lda	y
   1425  83ab		       85 46		      sta	temp5
   1426  83ad
   1427  83ad		       a9 40		      lda	#(p1_mode|%01000000)
   1428  83af		       85 47		      sta	temp6
   1429  83b1
   1430  83b1		       20 9d f2 	      jsr	plotsprite
   1431  83b4				   .skipL0172
   1432  83b4				   .L0173		;;  x	=  x  +  16
   1433  83b4
   1434  83b4		       a5 fd		      LDA	x
   1435  83b6		       18		      CLC
   1436  83b7		       69 10		      ADC	#16
   1437  83b9		       85 fd		      STA	x
   1438  83bb				   .L0174		;;  if x  >  144 then x  =  0	:  wrap  =  1
   1439  83bb
   1440  83bb		       a9 90		      LDA	#144
   1441  83bd		       c5 fd		      CMP	x
   1442  83bf		       b0 09		      BCS	.skipL0174
   1443  83c1				   .condpart26
   1444  83c1		       a9 00		      LDA	#0
   1445  83c3		       85 fd		      STA	x
   1446  83c5		       a9 01		      LDA	#1
   1447  83c7		       8d 45 01 	      STA	wrap
   1448  83ca				   .skipL0174
   1449  83ca				   .L0175		;;  next
   1450  83ca
   1451  83ca		       a5 ef		      LDA	j
   1452  83cc		       c5 f2		      CMP	m
   1453  83ce		       e6 ef		      INC	j
   1454  83d0				  -	      if	((* - .L0169forj) < 127) && ((* - .L0169forj) > -128)
   1455  83d0				  -	      bcc	.L0169forj
   1456  83d0					      else
   1457  83d0		       b0 03		      bcs	.0skipL0169forj
   1458  83d2		       4c 1e 83 	      jmp	.L0169forj
   1459  83d5				   .0skipL0169forj
   1460  83d5					      endif
   1461  83d5				   .L0176		;;  wrap  =  0
   1462  83d5
   1463  83d5		       a9 00		      LDA	#0
   1464  83d7		       8d 45 01 	      STA	wrap
   1465  83da				   .L0177		;;  x	=  0
   1466  83da
   1467  83da		       a9 00		      LDA	#0
   1468  83dc		       85 fd		      STA	x
   1469  83de				   .L0178		;;  y	=  y  +  16
   1470  83de
   1471  83de		       a5 fe		      LDA	y
   1472  83e0		       18		      CLC
   1473  83e1		       69 10		      ADC	#16
   1474  83e3		       85 fe		      STA	y
   1475  83e5				   .L0179		;;  c	=  c  +  1
   1476  83e5
   1477  83e5		       a5 e8		      LDA	c
   1478  83e7		       18		      CLC
   1479  83e8		       69 01		      ADC	#1
   1480  83ea		       85 e8		      STA	c
   1481  83ec				   .L0180		;;  if c  >  6 then c	=  0
   1482  83ec
   1483  83ec		       a9 06		      LDA	#6
   1484  83ee		       c5 e8		      CMP	c
   1485  83f0		       b0 04		      BCS	.skipL0180
   1486  83f2				   .condpart27
   1487  83f2		       a9 00		      LDA	#0
   1488  83f4		       85 e8		      STA	c
   1489  83f6				   .skipL0180
   1490  83f6				   .L0181		;;  next
   1491  83f6
   1492  83f6		       a5 ee		      LDA	i
   1493  83f8		       c5 f3		      CMP	n
   1494  83fa		       e6 ee		      INC	i
   1495  83fc				  -	      if	((* - .L0168fori) < 127) && ((* - .L0168fori) > -128)
   1496  83fc				  -	      bcc	.L0168fori
   1497  83fc					      else
   1498  83fc		       b0 03		      bcs	.1skipL0168fori
   1499  83fe		       4c 1a 83 	      jmp	.L0168fori
   1500  8401				   .1skipL0168fori
   1501  8401					      endif
   1502  8401				   .L0182		;;  if w  >  8  &&  joy0right then w  = 0  :  m  =  m	+  1
   1503  8401
   1504  8401		       a9 08		      LDA	#8
   1505  8403		       c5 fc		      CMP	w
   1506  8405		       b0 10		      BCS	.skipL0182
   1507  8407				   .condpart28
   1508  8407		       2c 80 02 	      bit	SWCHA
   1509  840a		       30 0b		      BMI	.skip28then
   1510  840c				   .condpart29
   1511  840c		       a9 00		      LDA	#0
   1512  840e		       85 fc		      STA	w
   1513  8410		       a5 f2		      LDA	m
   1514  8412		       18		      CLC
   1515  8413		       69 01		      ADC	#1
   1516  8415		       85 f2		      STA	m
   1517  8417				   .skip28then
   1518  8417				   .skipL0182
   1519  8417				   .L0183		;;  if w  >  8  &&  joy0down then w  =  0  :  n  =  n	+  1
   1520  8417
   1521  8417		       a9 08		      LDA	#8
   1522  8419		       c5 fc		      CMP	w
   1523  841b		       b0 12		      BCS	.skipL0183
   1524  841d				   .condpart30
   1525  841d		       a9 20		      lda	#$20
   1526  841f		       2c 80 02 	      bit	SWCHA
   1527  8422		       d0 0b		      BNE	.skip30then
   1528  8424				   .condpart31
   1529  8424		       a9 00		      LDA	#0
   1530  8426		       85 fc		      STA	w
   1531  8428		       a5 f3		      LDA	n
   1532  842a		       18		      CLC
   1533  842b		       69 01		      ADC	#1
   1534  842d		       85 f3		      STA	n
   1535  842f				   .skip30then
   1536  842f				   .skipL0183
   1537  842f				   .L0184		;;  if w  >  8  &&  joy0left then w  = 0  :  m  =  m  -  1
   1538  842f
   1539  842f		       a9 08		      LDA	#8
   1540  8431		       c5 fc		      CMP	w
   1541  8433		       b0 10		      BCS	.skipL0184
   1542  8435				   .condpart32
   1543  8435		       2c 80 02 	      bit	SWCHA
   1544  8438		       70 0b		      BVS	.skip32then
   1545  843a				   .condpart33
   1546  843a		       a9 00		      LDA	#0
   1547  843c		       85 fc		      STA	w
   1548  843e		       a5 f2		      LDA	m
   1549  8440		       38		      SEC
   1550  8441		       e9 01		      SBC	#1
   1551  8443		       85 f2		      STA	m
   1552  8445				   .skip32then
   1553  8445				   .skipL0184
   1554  8445				   .L0185		;;  if w  >  8  &&  joy0up then w  =  0  :  n	=  n  -  1
   1555  8445
   1556  8445		       a9 08		      LDA	#8
   1557  8447		       c5 fc		      CMP	w
   1558  8449		       b0 12		      BCS	.skipL0185
   1559  844b				   .condpart34
   1560  844b		       a9 10		      lda	#$10
   1561  844d		       2c 80 02 	      bit	SWCHA
   1562  8450		       d0 0b		      BNE	.skip34then
   1563  8452				   .condpart35
   1564  8452		       a9 00		      LDA	#0
   1565  8454		       85 fc		      STA	w
   1566  8456		       a5 f3		      LDA	n
   1567  8458		       38		      SEC
   1568  8459		       e9 01		      SBC	#1
   1569  845b		       85 f3		      STA	n
   1570  845d				   .skip34then
   1571  845d				   .skipL0185
   1572  845d				   .L0186		;;  if n  >  24 then n  =  0
   1573  845d
   1574  845d		       a9 18		      LDA	#24
   1575  845f		       c5 f3		      CMP	n
   1576  8461		       b0 04		      BCS	.skipL0186
   1577  8463				   .condpart36
   1578  8463		       a9 00		      LDA	#0
   1579  8465		       85 f3		      STA	n
   1580  8467				   .skipL0186
   1581  8467				   .L0187		;;  if m  >  40 then m  =  0
   1582  8467
   1583  8467		       a9 28		      LDA	#40
   1584  8469		       c5 f2		      CMP	m
   1585  846b		       b0 04		      BCS	.skipL0187
   1586  846d				   .condpart37
   1587  846d		       a9 00		      LDA	#0
   1588  846f		       85 f2		      STA	m
   1589  8471				   .skipL0187
   1590  8471				   .L0188		;;  if an  =  1 then f  =  f  +  1
   1591  8471
   1592  8471		       ad 43 01 	      LDA	an
   1593  8474		       c9 01		      CMP	#1
   1594  8476		       d0 07		      BNE	.skipL0188
   1595  8478				   .condpart38
   1596  8478		       a5 eb		      LDA	f
   1597  847a		       18		      CLC
   1598  847b		       69 01		      ADC	#1
   1599  847d		       85 eb		      STA	f
   1600  847f				   .skipL0188
   1601  847f				   .L0189		;;  if an  =  1  &&  f  >  7 then f  =  0
   1602  847f
   1603  847f		       ad 43 01 	      LDA	an
   1604  8482		       c9 01		      CMP	#1
   1605  8484		       d0 0a		      BNE	.skipL0189
   1606  8486				   .condpart39
   1607  8486		       a9 07		      LDA	#7
   1608  8488		       c5 eb		      CMP	f
   1609  848a		       b0 04		      BCS	.skip39then
   1610  848c				   .condpart40
   1611  848c		       a9 00		      LDA	#0
   1612  848e		       85 eb		      STA	f
   1613  8490				   .skip39then
   1614  8490				   .skipL0189
   1615  8490				   .
   1616  8490							;; 
   1617  8490
   1618  8490				   .L0190		;;  rem plotchars 'joystick to draw fire to next' 7 10 23 1
   1619  8490
   1620  8490				   .L0191		;;  r	=  n  +  1
   1621  8490
   1622  8490		       a5 f3		      LDA	n
   1623  8492		       18		      CLC
   1624  8493		       69 01		      ADC	#1
   1625  8495		       85 f7		      STA	r
   1626  8497				   .L0192		;;  s	=  m  +  1
   1627  8497
   1628  8497		       a5 f2		      LDA	m
   1629  8499		       18		      CLC
   1630  849a		       69 01		      ADC	#1
   1631  849c		       85 f8		      STA	s
   1632  849e				   .
   1633  849e							;; 
   1634  849e
   1635  849e				   .L0193		;;  plotvalue font 4 s 2 8 11
   1636  849e
   1637  849e		       a9 56		      lda	#<font
   1638  84a0		       85 42		      sta	temp1
   1639  84a2
   1640  84a2		       a9 a0		      lda	#>font
   1641  84a4		       85 43		      sta	temp2
   1642  84a6
   1643  84a6		       ad 06 21 	      lda	charactermode
   1644  84a9		       85 4a		      sta	temp9
   1645  84ab		       a9 60		      lda	#(font_mode | %01100000)
   1646  84ad		       8d 06 21 	      sta	charactermode
   1647  84b0		       a9 1e		      lda	#30	; width in two's complement
   1648  84b2		       09 80		      ora	#128	; palette left shifted 5 bits
   1649  84b4		       85 44		      sta	temp3
   1650  84b6		       a9 08		      lda	#8
   1651  84b8		       85 45		      sta	temp4
   1652  84ba
   1653  84ba		       a9 0b		      lda	#11
   1654  84bc		       85 46		      sta	temp5
   1655  84be
   1656  84be		       a9 02		      lda	#2
   1657  84c0		       85 47		      sta	temp6
   1658  84c2
   1659  84c2		       a9 f8		      lda	#<s
   1660  84c4		       85 48		      sta	temp7
   1661  84c6
   1662  84c6		       a9 00		      lda	#>s
   1663  84c8		       85 49		      sta	temp8
   1664  84ca
   1665  84ca		       20 d1 f3 	      jsr	plotvalue
   1666  84ca		       00 01	   USED_PLOTVALUE =	1
   1667  84cd		       a5 4a		      lda	temp9
   1668  84cf		       8d 06 21 	      sta	charactermode
   1669  84d2				   .L0194		;;  plotvalue font 4 r 2 24 11
   1670  84d2
   1671  84d2		       a9 56		      lda	#<font
   1672  84d4		       85 42		      sta	temp1
   1673  84d6
   1674  84d6		       a9 a0		      lda	#>font
   1675  84d8		       85 43		      sta	temp2
   1676  84da
   1677  84da		       ad 06 21 	      lda	charactermode
   1678  84dd		       85 4a		      sta	temp9
   1679  84df		       a9 60		      lda	#(font_mode | %01100000)
   1680  84e1		       8d 06 21 	      sta	charactermode
   1681  84e4		       a9 1e		      lda	#30	; width in two's complement
   1682  84e6		       09 80		      ora	#128	; palette left shifted 5 bits
   1683  84e8		       85 44		      sta	temp3
   1684  84ea		       a9 18		      lda	#24
   1685  84ec		       85 45		      sta	temp4
   1686  84ee
   1687  84ee		       a9 0b		      lda	#11
   1688  84f0		       85 46		      sta	temp5
   1689  84f2
   1690  84f2		       a9 02		      lda	#2
   1691  84f4		       85 47		      sta	temp6
   1692  84f6
   1693  84f6		       a9 f7		      lda	#<r
   1694  84f8		       85 48		      sta	temp7
   1695  84fa
   1696  84fa		       a9 00		      lda	#>r
   1697  84fc		       85 49		      sta	temp8
   1698  84fe
   1699  84fe		       20 d1 f3 	      jsr	plotvalue
   1700  84fe		       00 01	   USED_PLOTVALUE =	1
   1701  8501		       a5 4a		      lda	temp9
   1702  8503		       8d 06 21 	      sta	charactermode
   1703  8506				   .L0195		;;  plotvalue font 4 z 2 40 11
   1704  8506
   1705  8506		       a9 56		      lda	#<font
   1706  8508		       85 42		      sta	temp1
   1707  850a
   1708  850a		       a9 a0		      lda	#>font
   1709  850c		       85 43		      sta	temp2
   1710  850e
   1711  850e		       ad 06 21 	      lda	charactermode
   1712  8511		       85 4a		      sta	temp9
   1713  8513		       a9 60		      lda	#(font_mode | %01100000)
   1714  8515		       8d 06 21 	      sta	charactermode
   1715  8518		       a9 1e		      lda	#30	; width in two's complement
   1716  851a		       09 80		      ora	#128	; palette left shifted 5 bits
   1717  851c		       85 44		      sta	temp3
   1718  851e		       a9 28		      lda	#40
   1719  8520		       85 45		      sta	temp4
   1720  8522
   1721  8522		       a9 0b		      lda	#11
   1722  8524		       85 46		      sta	temp5
   1723  8526
   1724  8526		       a9 02		      lda	#2
   1725  8528		       85 47		      sta	temp6
   1726  852a
   1727  852a		       a9 ff		      lda	#<z
   1728  852c		       85 48		      sta	temp7
   1729  852e
   1730  852e		       a9 00		      lda	#>z
   1731  8530		       85 49		      sta	temp8
   1732  8532
   1733  8532		       20 d1 f3 	      jsr	plotvalue
   1734  8532		       00 01	   USED_PLOTVALUE =	1
   1735  8535		       a5 4a		      lda	temp9
   1736  8537		       8d 06 21 	      sta	charactermode
   1737  853a				   .L0196		;;  plotvalue font 4 bg 2 56 11
   1738  853a
   1739  853a		       a9 56		      lda	#<font
   1740  853c		       85 42		      sta	temp1
   1741  853e
   1742  853e		       a9 a0		      lda	#>font
   1743  8540		       85 43		      sta	temp2
   1744  8542
   1745  8542		       ad 06 21 	      lda	charactermode
   1746  8545		       85 4a		      sta	temp9
   1747  8547		       a9 60		      lda	#(font_mode | %01100000)
   1748  8549		       8d 06 21 	      sta	charactermode
   1749  854c		       a9 1e		      lda	#30	; width in two's complement
   1750  854e		       09 80		      ora	#128	; palette left shifted 5 bits
   1751  8550		       85 44		      sta	temp3
   1752  8552		       a9 38		      lda	#56
   1753  8554		       85 45		      sta	temp4
   1754  8556
   1755  8556		       a9 0b		      lda	#11
   1756  8558		       85 46		      sta	temp5
   1757  855a
   1758  855a		       a9 02		      lda	#2
   1759  855c		       85 47		      sta	temp6
   1760  855e
   1761  855e		       a9 41		      lda	#<bg
   1762  8560		       85 48		      sta	temp7
   1763  8562
   1764  8562		       a9 01		      lda	#>bg
   1765  8564		       85 49		      sta	temp8
   1766  8566
   1767  8566		       20 d1 f3 	      jsr	plotvalue
   1768  8566		       00 01	   USED_PLOTVALUE =	1
   1769  8569		       a5 4a		      lda	temp9
   1770  856b		       8d 06 21 	      sta	charactermode
   1771  856e				   .L0197		;;  plotvalue font 4 an 2 72 11
   1772  856e
   1773  856e		       a9 56		      lda	#<font
   1774  8570		       85 42		      sta	temp1
   1775  8572
   1776  8572		       a9 a0		      lda	#>font
   1777  8574		       85 43		      sta	temp2
   1778  8576
   1779  8576		       ad 06 21 	      lda	charactermode
   1780  8579		       85 4a		      sta	temp9
   1781  857b		       a9 60		      lda	#(font_mode | %01100000)
   1782  857d		       8d 06 21 	      sta	charactermode
   1783  8580		       a9 1e		      lda	#30	; width in two's complement
   1784  8582		       09 80		      ora	#128	; palette left shifted 5 bits
   1785  8584		       85 44		      sta	temp3
   1786  8586		       a9 48		      lda	#72
   1787  8588		       85 45		      sta	temp4
   1788  858a
   1789  858a		       a9 0b		      lda	#11
   1790  858c		       85 46		      sta	temp5
   1791  858e
   1792  858e		       a9 02		      lda	#2
   1793  8590		       85 47		      sta	temp6
   1794  8592
   1795  8592		       a9 43		      lda	#<an
   1796  8594		       85 48		      sta	temp7
   1797  8596
   1798  8596		       a9 01		      lda	#>an
   1799  8598		       85 49		      sta	temp8
   1800  859a
   1801  859a		       20 d1 f3 	      jsr	plotvalue
   1802  859a		       00 01	   USED_PLOTVALUE =	1
   1803  859d		       a5 4a		      lda	temp9
   1804  859f		       8d 06 21 	      sta	charactermode
   1805  85a2				   .L0198		;;  plotvalue font 4 db 2 88 11
   1806  85a2
   1807  85a2		       a9 56		      lda	#<font
   1808  85a4		       85 42		      sta	temp1
   1809  85a6
   1810  85a6		       a9 a0		      lda	#>font
   1811  85a8		       85 43		      sta	temp2
   1812  85aa
   1813  85aa		       ad 06 21 	      lda	charactermode
   1814  85ad		       85 4a		      sta	temp9
   1815  85af		       a9 60		      lda	#(font_mode | %01100000)
   1816  85b1		       8d 06 21 	      sta	charactermode
   1817  85b4		       a9 1e		      lda	#30	; width in two's complement
   1818  85b6		       09 80		      ora	#128	; palette left shifted 5 bits
   1819  85b8		       85 44		      sta	temp3
   1820  85ba		       a9 58		      lda	#88
   1821  85bc		       85 45		      sta	temp4
   1822  85be
   1823  85be		       a9 0b		      lda	#11
   1824  85c0		       85 46		      sta	temp5
   1825  85c2
   1826  85c2		       a9 02		      lda	#2
   1827  85c4		       85 47		      sta	temp6
   1828  85c6
   1829  85c6		       a9 42		      lda	#<db
   1830  85c8		       85 48		      sta	temp7
   1831  85ca
   1832  85ca		       a9 01		      lda	#>db
   1833  85cc		       85 49		      sta	temp8
   1834  85ce
   1835  85ce		       20 d1 f3 	      jsr	plotvalue
   1836  85ce		       00 01	   USED_PLOTVALUE =	1
   1837  85d1		       a5 4a		      lda	temp9
   1838  85d3		       8d 06 21 	      sta	charactermode
   1839  85d6				   .
   1840  85d6							;; 
   1841  85d6
   1842  85d6				   .L0199		;;  if db then doublebuffer flip
   1843  85d6
   1844  85d6		       ad 42 01 	      LDA	db
   1845  85d9		       f0 03		      BEQ	.skipL0199
   1846  85db				   .condpart41
   1847  85db		       20 ad f5 	      jsr	flipdisplaybuffer
   1848  85de				   .skipL0199
   1849  85de				   .L0200		;;  if !db then drawscreen
   1850  85de
   1851  85de		       ad 42 01 	      LDA	db
   1852  85e1		       d0 03		      BNE	.skipL0200
   1853  85e3				   .condpart42
   1854  85e3		       20 b3 f0 	      jsr	drawscreen
   1855  85e6				   .skipL0200
   1856  85e6				   .L0201		;;  z	=  0
   1857  85e6
   1858  85e6		       a9 00		      LDA	#0
   1859  85e8		       85 ff		      STA	z
   1860  85ea				   .L0202		;;  return
   1861  85ea
   1862  85ea		       ba		      tsx
   1863  85eb		       bd 02 01 	      lda	$102,x
   1864  85ee		       f0 01		      beq	bankswitchret7
   1865  85f0		       60		      RTS
   1866  85f1				   bankswitchret7
   1867  85f1		       4c c2 f4 	      JMP	BS_return
   1868  85f4				   .
   1869  85f4							;; 
   1870  85f4
   1871  85f4				   .L0203		;;  rem draw sprites with arrow no bg
   1872  85f4
   1873  85f4				   .
   1874  85f4							;; 
   1875  85f4
   1876  85f4				   .
   1877  85f4							;; 
   1878  85f4
   1879  85f4				   .
   1880  85f4							;; 
   1881  85f4
   1882  85f4				   .
   1883  85f4							;; 
   1884  85f4
   1885  85f4				   .
   1886  85f4							;; 
   1887  85f4
   1888  85f4				   .
   1889  85f4							;; 
   1890  85f4
   1891  85f4				   .
   1892  85f4							;; 
   1893  85f4
   1894  85f4				   .
   1895  85f4							;; 
   1896  85f4
   1897  85f4				   .
   1898  85f4							;; 
   1899  85f4
   1900  85f4				   .
   1901  85f4							;; 
   1902  85f4
   1903  85f4				   .
   1904  85f4							;; 
   1905  85f4
   1906  85f4				   .
   1907  85f4							;; 
   1908  85f4
   1909  85f4				   .
   1910  85f4							;; 
   1911  85f4
   1912  85f4				   .
   1913  85f4							;; 
   1914  85f4
   1915  85f4				   .
   1916  85f4							;; 
   1917  85f4
   1918  85f4				   .
   1919  85f4							;; 
   1920  85f4
   1921  85f4				   .
   1922  85f4							;; 
   1923  85f4
   1924  85f4				   .
   1925  85f4							;; 
   1926  85f4
   1927  85f4				   .
   1928  85f4							;; 
   1929  85f4
   1930  85f4				   .
   1931  85f4							;; 
   1932  85f4
   1933  85f4				   .
   1934  85f4							;; 
   1935  85f4
   1936  85f4				   .
   1937  85f4							;; 
   1938  85f4
   1939  85f4				   .
   1940  85f4							;; 
   1941  85f4
   1942  85f4				   .
   1943  85f4							;; 
   1944  85f4
   1945  85f4				   .
   1946  85f4							;; 
   1947  85f4
   1948  85f4				   .
   1949  85f4							;; 
   1950  85f4
   1951  85f4				   .
   1952  85f4							;; 
   1953  85f4
   1954  85f4				   .
   1955  85f4							;; 
   1956  85f4
   1957  85f4				   .
   1958  85f4							;; 
   1959  85f4
   1960  85f4				   .
   1961  85f4							;; 
   1962  85f4
   1963  85f4				   .
   1964  85f4							;; 
   1965  85f4
   1966  85f4				   .
   1967  85f4							;; 
   1968  85f4
   1969  85f4				   .
   1970  85f4							;; 
   1971  85f4
   1972  85f4				   .
   1973  85f4							;; 
   1974  85f4
   1975  85f4				   .
   1976  85f4							;; 
   1977  85f4
   1978  85f4				   .
   1979  85f4							;; 
   1980  85f4
   1981  85f4				   .
   1982  85f4							;; 
   1983  85f4
   1984  85f4				   .
   1985  85f4							;; 
   1986  85f4
   1987  85f4				   .
   1988  85f4							;; 
   1989  85f4
   1990  85f4				   .
   1991  85f4							;; 
   1992  85f4
   1993  85f4				   .
   1994  85f4							;; 
   1995  85f4
   1996  85f4				   .
   1997  85f4							;; 
   1998  85f4
   1999  85f4				   .
   2000  85f4							;; 
   2001  85f4
   2002  85f4				   .
   2003  85f4							;; 
   2004  85f4
   2005  85f4				   .
   2006  85f4							;; 
   2007  85f4
   2008  85f4				   .
   2009  85f4							;; 
   2010  85f4
   2011  85f4				   .
   2012  85f4							;; 
   2013  85f4
   2014  85f4				   .
   2015  85f4							;; 
   2016  85f4
   2017  85f4				   .
   2018  85f4							;; 
   2019  85f4
   2020  85f4				   .
   2021  85f4							;; 
   2022  85f4
   2023  85f4				   .
   2024  85f4							;; 
   2025  85f4
   2026  85f4				   .
   2027  85f4							;; 
   2028  85f4
   2029  85f4				   .
   2030  85f4							;; 
   2031  85f4
   2032  85f4				   .
   2033  85f4							;; 
   2034  85f4
   2035  85f4				   .
   2036  85f4							;; 
   2037  85f4
   2038  85f4				   .
   2039  85f4							;; 
   2040  85f4
   2041  85f4				   .
   2042  85f4							;; 
   2043  85f4
   2044  85f4				   .
   2045  85f4							;; 
   2046  85f4
   2047  85f4				   .
   2048  85f4							;; 
   2049  85f4
   2050  85f4				   .
   2051  85f4							;; 
   2052  85f4
   2053  85f4				   .
   2054  85f4							;; 
   2055  85f4
   2056  85f4				   .
   2057  85f4							;; 
   2058  85f4
   2059  85f4				   .
   2060  85f4							;; 
   2061  85f4
   2062  85f4				   .
   2063  85f4							;; 
   2064  85f4
   2065  85f4				   .
   2066  85f4							;; 
   2067  85f4
   2068  85f4				   .
   2069  85f4							;; 
   2070  85f4
   2071  85f4				   .
   2072  85f4							;; 
   2073  85f4
   2074  85f4				   .
   2075  85f4							;; 
   2076  85f4
   2077  85f4				   .
   2078  85f4							;; 
   2079  85f4
   2080  85f4				   .
   2081  85f4							;; 
   2082  85f4
   2083  85f4				   .
   2084  85f4							;; 
   2085  85f4
   2086  85f4				   .
   2087  85f4							;; 
   2088  85f4
   2089  85f4				   .
   2090  85f4							;; 
   2091  85f4
   2092  85f4				   .
   2093  85f4							;; 
   2094  85f4
   2095  85f4				   .
   2096  85f4							;; 
   2097  85f4
   2098  85f4				   .
   2099  85f4							;; 
   2100  85f4
   2101  85f4				   .
   2102  85f4							;; 
   2103  85f4
   2104  85f4				   .drawZoneBG
   2105  85f4							;; drawZoneBG
   2106  85f4
   2107  85f4				   .L0204		;;  x	=  0
   2108  85f4
   2109  85f4		       a9 00		      LDA	#0
   2110  85f6		       85 fd		      STA	x
   2111  85f8				   .L0205		;;  y	=  0
   2112  85f8
   2113  85f8		       a9 00		      LDA	#0
   2114  85fa		       85 fe		      STA	y
   2115  85fc				   .L0206		;;  for j  =  0 to 10
   2116  85fc
   2117  85fc		       a9 00		      LDA	#0
   2118  85fe		       85 ef		      STA	j
   2119  8600				   .L0206forj
   2120  8600				   .L0207		;;  for i  =  0 to 1
   2121  8600
   2122  8600		       a9 00		      LDA	#0
   2123  8602		       85 ee		      STA	i
   2124  8604				   .L0207fori
   2125  8604				   .L0208		;;  plotsprite zonebg80x16_16 7 x y 0
   2126  8604
   2127  8604		       a9 20		      lda	#<zonebg80x16_16
   2128  8606		       85 42		      sta	temp1
   2129  8608
   2130  8608		       a9 a0		      lda	#>zonebg80x16_16
   2131  860a		       85 43		      sta	temp2
   2132  860c
   2133  860c		       a9 ec		      lda	#(224|zonebg80x16_16_width_twoscompliment)
   2134  860e		       85 44		      sta	temp3
   2135  8610
   2136  8610		       a5 fd		      lda	x
   2137  8612		       85 45		      sta	temp4
   2138  8614
   2139  8614		       a5 fe		      lda	y
   2140  8616		       85 46		      sta	temp5
   2141  8618
   2142  8618		       a9 40		      lda	#(zonebg80x16_16_mode|%01000000)
   2143  861a		       85 47		      sta	temp6
   2144  861c
   2145  861c		       20 9d f2 	      jsr	plotsprite
   2146  861f				   .L0209		;;  x	=  x  +  80
   2147  861f
   2148  861f		       a5 fd		      LDA	x
   2149  8621		       18		      CLC
   2150  8622		       69 50		      ADC	#80
   2151  8624		       85 fd		      STA	x
   2152  8626				   .L0210		;;  next
   2153  8626
   2154  8626		       a5 ee		      LDA	i
   2155  8628		       c9 01		      CMP	#1
   2156  862a		       e6 ee		      INC	i
   2157  862c					      if	((* - .L0207fori) < 127) && ((* - .L0207fori) > -128)
   2158  862c		       90 d6		      bcc	.L0207fori
   2159  862e				  -	      else
   2160  862e				  -	      bcs	.2skipL0207fori
   2161  862e				  -	      jmp	.L0207fori
   2162  862e				  -.2skipL0207fori
   2163  862e					      endif
   2164  862e				   .L0211		;;  x	=  0
   2165  862e
   2166  862e		       a9 00		      LDA	#0
   2167  8630		       85 fd		      STA	x
   2168  8632				   .L0212		;;  y	=  y  +  16
   2169  8632
   2170  8632		       a5 fe		      LDA	y
   2171  8634		       18		      CLC
   2172  8635		       69 10		      ADC	#16
   2173  8637		       85 fe		      STA	y
   2174  8639				   .L0213		;;  next
   2175  8639
   2176  8639		       a5 ef		      LDA	j
   2177  863b		       c9 0a		      CMP	#10
   2178  863d		       e6 ef		      INC	j
   2179  863f					      if	((* - .L0206forj) < 127) && ((* - .L0206forj) > -128)
   2180  863f		       90 bf		      bcc	.L0206forj
   2181  8641				  -	      else
   2182  8641				  -	      bcs	.3skipL0206forj
   2183  8641				  -	      jmp	.L0206forj
   2184  8641				  -.3skipL0206forj
   2185  8641					      endif
   2186  8641				   .L0214		;;  savescreen
   2187  8641
   2188  8641		       20 9b f0 	      jsr	savescreen
   2189  8644				   .L0215		;;  return
   2190  8644
   2191  8644		       ba		      tsx
   2192  8645		       bd 02 01 	      lda	$102,x
   2193  8648		       f0 01		      beq	bankswitchret8
   2194  864a		       60		      RTS
   2195  864b				   bankswitchret8
   2196  864b		       4c c2 f4 	      JMP	BS_return
   2197  864e				   .
   2198  864e							;; 
   2199  864e
   2200  864e				   .topscreenroutine
   2201  864e							;; topscreenroutine
   2202  864e
   2203  864e				   .L0216		;;  z	=  z  +  1
   2204  864e
   2205  864e		       a5 ff		      LDA	z
   2206  8650		       18		      CLC
   2207  8651		       69 01		      ADC	#1
   2208  8653		       85 ff		      STA	z
   2209  8655				   .L0217		;;  return
   2210  8655		       ba		      tsx
   2211  8656		       bd 02 01 	      lda	$102,x
   2212  8659		       f0 01		      beq	bankswitchret9
   2213  865b		       60		      RTS
   2214  865c				   bankswitchret9
   2215  865c		       4c c2 f4 	      JMP	BS_return
   2216  865c				   DMAHOLEEND0 SET	.
   2217  865f				   gameend
   2218  865f				   DMAHOLEEND0 SET	.
   6561 bytes of ROM space left in the main area of bank 1.
   2219  865f					      echo	" ",[($A000 - .)]d , "bytes of ROM space left in the main area of bank 1."
   2220  865f
   2221  a000					      ORG	$A000,0	; *************
   2222  a000
   2223  a000					      RORG	$A000	; *************
   2224  a000
   2225  a000				   g16x16_4color
   2226  a000		       aa aa aa aa	      HEX	aaaaaaaa
   2227  a004				   g16x16_4color2
   2228  a004		       aa aa aa aa	      HEX	aaaaaaaa
   2229  a008				   g16x16_4color3
   2230  a008		       ff ff ff ff	      HEX	ffffffff
   2231  a00c				   g16x16_4color4
   2232  a00c		       ff ff ff ff	      HEX	ffffffff
   2233  a010				   g16x16_4color5
   2234  a010		       55 55 55 55	      HEX	55555555
   2235  a014				   g16x16_4color6
   2236  a014		       55 55 55 55	      HEX	55555555
   2237  a018				   g16x16_4color7
   2238  a018		       55 55 55 55	      HEX	55555555
   2239  a01c				   g16x16_4color8
   2240  a01c		       00 00 00 00	      HEX	00000000
   2241  a020				   zonebg80x16_16
   2242  a020		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000
   2243  a034				   ex1
   2244  a034		       00 00 00 00	      HEX	00000000
   2245  a038				   ex2
   2246  a038		       00 00 00 00	      HEX	00000000
   2247  a03c				   ex3
   2248  a03c		       00 00 00 00	      HEX	00000000
   2249  a040				   ex4
   2250  a040		       00 41 50 00	      HEX	00415000
   2251  a044				   ex5
   2252  a044		       31 41 51 00	      HEX	31415100
   2253  a048				   ex6
   2254  a048		       00 15 15 00	      HEX	00151500
   2255  a04c				   ex7
   2256  a04c		       01 50 55 40	      HEX	01505540
   2257  a050				   p1
   2258  a050		       00 00		      HEX	0000
   2259  a052				   blank
   2260  a052		       00 00 00 00	      HEX	00000000
   2261  a056				   font
   2262  a056		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000000000000000000000000000
   2263  a076		       00 00 00 00*	      HEX	000000000000000000000000000000000000000000
   2264  a08b
   2265  a100					      ORG	$A100,0	; *************
   2266  a100
   2267  a100					      RORG	$A100	; *************
   2268  a100
   2269  a100							;g16x16_4color
   2270  a100		       aa aa aa aa	      HEX	aaaaaaaa
   2271  a104							;g16x16_4color2
   2272  a104		       ff ff ff ff	      HEX	ffffffff
   2273  a108							;g16x16_4color3
   2274  a108		       ff ff ff ff	      HEX	ffffffff
   2275  a10c							;g16x16_4color4
   2276  a10c		       55 55 55 55	      HEX	55555555
   2277  a110							;g16x16_4color5
   2278  a110		       55 55 55 55	      HEX	55555555
   2279  a114							;g16x16_4color6
   2280  a114		       00 00 00 00	      HEX	00000000
   2281  a118							;g16x16_4color7
   2282  a118		       55 55 55 55	      HEX	55555555
   2283  a11c							;g16x16_4color8
   2284  a11c		       aa aa aa aa	      HEX	aaaaaaaa
   2285  a120							;zonebg80x16_16
   2286  a120		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000
   2287  a134							;ex1
   2288  a134		       00 00 00 00	      HEX	00000000
   2289  a138							;ex2
   2290  a138		       00 03 00 30	      HEX	00030030
   2291  a13c							;ex3
   2292  a13c		       30 15 40 0c	      HEX	3015400c
   2293  a140							;ex4
   2294  a140		       00 51 25 90	      HEX	00512590
   2295  a144							;ex5
   2296  a144		       01 55 35 53	      HEX	01553553
   2297  a148							;ex6
   2298  a148		       05 65 56 40	      HEX	05655640
   2299  a14c							;ex7
   2300  a14c		       04 00 00 00	      HEX	04000000
   2301  a150							;p1
   2302  a150		       00 00		      HEX	0000
   2303  a152							;blank
   2304  a152		       00 00 00 00	      HEX	00000000
   2305  a156							;font
   2306  a156		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000000000000000000000000000
   2307  a176		       00 00 00 00*	      HEX	000000000000000000000000000000000000000000
   2308  a18b
   2309  a200					      ORG	$A200,0	; *************
   2310  a200
   2311  a200					      RORG	$A200	; *************
   2312  a200
   2313  a200							;g16x16_4color
   2314  a200		       ff ff ff ff	      HEX	ffffffff
   2315  a204							;g16x16_4color2
   2316  a204		       ff ff ff ff	      HEX	ffffffff
   2317  a208							;g16x16_4color3
   2318  a208		       55 55 55 55	      HEX	55555555
   2319  a20c							;g16x16_4color4
   2320  a20c		       55 55 55 55	      HEX	55555555
   2321  a210							;g16x16_4color5
   2322  a210		       00 00 00 00	      HEX	00000000
   2323  a214							;g16x16_4color6
   2324  a214		       00 00 00 00	      HEX	00000000
   2325  a218							;g16x16_4color7
   2326  a218		       ff ff ff ff	      HEX	ffffffff
   2327  a21c							;g16x16_4color8
   2328  a21c		       aa aa aa aa	      HEX	aaaaaaaa
   2329  a220							;zonebg80x16_16
   2330  a220		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000
   2331  a234							;ex1
   2332  a234		       00 30 00 00	      HEX	00300000
   2333  a238							;ex2
   2334  a238		       0c 14 14 00	      HEX	0c141400
   2335  a23c							;ex3
   2336  a23c		       00 2b 91 00	      HEX	002b9100
   2337  a240							;ex4
   2338  a240		       05 aa 3a 60	      HEX	05aa3a60
   2339  a244							;ex5
   2340  a244		       15 9a a9 10	      HEX	159aa910
   2341  a248							;ex6
   2342  a248		       11 40 14 54	      HEX	11401454
   2343  a24c							;ex7
   2344  a24c		       10 00 00 04	      HEX	10000004
   2345  a250							;p1
   2346  a250		       00 00		      HEX	0000
   2347  a252							;blank
   2348  a252		       00 00 00 00	      HEX	00000000
   2349  a256							;font
   2350  a256		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000000000000000000000000000
   2351  a276		       00 00 00 00*	      HEX	000000000000000000000000000000000000000000
   2352  a28b
   2353  a300					      ORG	$A300,0	; *************
   2354  a300
   2355  a300					      RORG	$A300	; *************
   2356  a300
   2357  a300							;g16x16_4color
   2358  a300		       ff ff ff ff	      HEX	ffffffff
   2359  a304							;g16x16_4color2
   2360  a304		       55 55 55 55	      HEX	55555555
   2361  a308							;g16x16_4color3
   2362  a308		       55 55 55 55	      HEX	55555555
   2363  a30c							;g16x16_4color4
   2364  a30c		       00 00 00 00	      HEX	00000000
   2365  a310							;g16x16_4color5
   2366  a310		       00 00 00 00	      HEX	00000000
   2367  a314							;g16x16_4color6
   2368  a314		       aa aa aa aa	      HEX	aaaaaaaa
   2369  a318							;g16x16_4color7
   2370  a318		       ff ff ff ff	      HEX	ffffffff
   2371  a31c							;g16x16_4color8
   2372  a31c		       ff ff ff ff	      HEX	ffffffff
   2373  a320							;zonebg80x16_16
   2374  a320		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000
   2375  a334							;ex1
   2376  a334		       00 01 43 00	      HEX	00014300
   2377  a338							;ex2
   2378  a338		       00 29 69 00	      HEX	00296900
   2379  a33c							;ex3
   2380  a33c		       01 85 a2 40	      HEX	0185a240
   2381  a340							;ex4
   2382  a340		       19 12 a4 94	      HEX	1912a494
   2383  a344							;ex5
   2384  a344		       52 79 1a d4	      HEX	52791ad4
   2385  a348							;ex6
   2386  a348		       15 00 00 10	      HEX	15000010
   2387  a34c							;ex7
   2388  a34c		       00 00 00 01	      HEX	00000001
   2389  a350							;p1
   2390  a350		       00 00		      HEX	0000
   2391  a352							;blank
   2392  a352		       00 00 00 00	      HEX	00000000
   2393  a356							;font
   2394  a356		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000000000000000000000000000
   2395  a376		       00 00 00 00*	      HEX	000000000000000000000000000000000000000000
   2396  a38b
   2397  a400					      ORG	$A400,0	; *************
   2398  a400
   2399  a400					      RORG	$A400	; *************
   2400  a400
   2401  a400							;g16x16_4color
   2402  a400		       55 55 55 55	      HEX	55555555
   2403  a404							;g16x16_4color2
   2404  a404		       55 55 55 55	      HEX	55555555
   2405  a408							;g16x16_4color3
   2406  a408		       00 00 00 00	      HEX	00000000
   2407  a40c							;g16x16_4color4
   2408  a40c		       00 00 00 00	      HEX	00000000
   2409  a410							;g16x16_4color5
   2410  a410		       aa aa aa aa	      HEX	aaaaaaaa
   2411  a414							;g16x16_4color6
   2412  a414		       aa aa aa aa	      HEX	aaaaaaaa
   2413  a418							;g16x16_4color7
   2414  a418		       aa aa aa aa	      HEX	aaaaaaaa
   2415  a41c							;g16x16_4color8
   2416  a41c		       ff ff ff ff	      HEX	ffffffff
   2417  a420							;zonebg80x16_16
   2418  a420		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000
   2419  a434							;ex1
   2420  a434		       00 01 80 00	      HEX	00018000
   2421  a438							;ex2
   2422  a438		       01 95 8a 03	      HEX	01958a03
   2423  a43c							;ex3
   2424  a43c		       04 6a 98 90	      HEX	046a9890
   2425  a440							;ex4
   2426  a440		       62 eb 4a 89	      HEX	62eb4a89
   2427  a444							;ex5
   2428  a444		       5a 94 04 a5	      HEX	5a9404a5
   2429  a448							;ex6
   2430  a448		       54 00 00 16	      HEX	54000016
   2431  a44c							;ex7
   2432  a44c		       40 00 00 01	      HEX	40000001
   2433  a450							;p1
   2434  a450		       00 00		      HEX	0000
   2435  a452							;blank
   2436  a452		       00 00 00 00	      HEX	00000000
   2437  a456							;font
   2438  a456		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000000000000000000000000000
   2439  a476		       00 00 00 00*	      HEX	000000000000000000000000000000000000000000
   2440  a48b
   2441  a500					      ORG	$A500,0	; *************
   2442  a500
   2443  a500					      RORG	$A500	; *************
   2444  a500
   2445  a500							;g16x16_4color
   2446  a500		       55 55 55 55	      HEX	55555555
   2447  a504							;g16x16_4color2
   2448  a504		       00 00 00 00	      HEX	00000000
   2449  a508							;g16x16_4color3
   2450  a508		       00 00 00 00	      HEX	00000000
   2451  a50c							;g16x16_4color4
   2452  a50c		       aa aa aa aa	      HEX	aaaaaaaa
   2453  a510							;g16x16_4color5
   2454  a510		       aa aa aa aa	      HEX	aaaaaaaa
   2455  a514							;g16x16_4color6
   2456  a514		       ff ff ff ff	      HEX	ffffffff
   2457  a518							;g16x16_4color7
   2458  a518		       aa aa aa aa	      HEX	aaaaaaaa
   2459  a51c							;g16x16_4color8
   2460  a51c		       55 55 55 55	      HEX	55555555
   2461  a520							;zonebg80x16_16
   2462  a520		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000
   2463  a534							;ex1
   2464  a534		       00 da 24 00	      HEX	00da2400
   2465  a538							;ex2
   2466  a538		       06 46 6e 40	      HEX	06466e40
   2467  a53c							;ex3
   2468  a53c		       1a 88 69 e4	      HEX	1a8869e4
   2469  a540							;ex4
   2470  a540		       52 44 1a 6c	      HEX	52441a6c
   2471  a544							;ex5
   2472  a544		       ca 00 00 49	      HEX	ca000049
   2473  a548							;ex6
   2474  a548		       60 00 00 05	      HEX	60000005
   2475  a54c							;ex7
   2476  a54c		       40 00 00 01	      HEX	40000001
   2477  a550							;p1
   2478  a550		       00 00		      HEX	0000
   2479  a552							;blank
   2480  a552		       00 00 00 00	      HEX	00000000
   2481  a556							;font
   2482  a556		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000000000000000000000000000
   2483  a576		       00 00 00 00*	      HEX	000000000000000000000000000000000000000000
   2484  a58b
   2485  a600					      ORG	$A600,0	; *************
   2486  a600
   2487  a600					      RORG	$A600	; *************
   2488  a600
   2489  a600							;g16x16_4color
   2490  a600		       00 00 00 00	      HEX	00000000
   2491  a604							;g16x16_4color2
   2492  a604		       00 00 00 00	      HEX	00000000
   2493  a608							;g16x16_4color3
   2494  a608		       aa aa aa aa	      HEX	aaaaaaaa
   2495  a60c							;g16x16_4color4
   2496  a60c		       aa aa aa aa	      HEX	aaaaaaaa
   2497  a610							;g16x16_4color5
   2498  a610		       ff ff ff ff	      HEX	ffffffff
   2499  a614							;g16x16_4color6
   2500  a614		       ff ff ff ff	      HEX	ffffffff
   2501  a618							;g16x16_4color7
   2502  a618		       55 55 55 55	      HEX	55555555
   2503  a61c							;g16x16_4color8
   2504  a61c		       55 55 55 55	      HEX	55555555
   2505  a620							;zonebg80x16_16
   2506  a620		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000
   2507  a634							;ex1
   2508  a634		       00 05 b9 00	      HEX	0005b900
   2509  a638							;ex2
   2510  a638		       c5 ae a1 90	      HEX	c5aea190
   2511  a63c							;ex3
   2512  a63c		       07 67 18 90	      HEX	07671890
   2513  a640							;ex4
   2514  a640		       6a 90 07 64	      HEX	6a900764
   2515  a644							;ex5
   2516  a644		       58 40 00 69	      HEX	58400069
   2517  a648							;ex6
   2518  a648		       50 00 00 04	      HEX	50000004
   2519  a64c							;ex7
   2520  a64c		       40 00 00 00	      HEX	40000000
   2521  a650							;p1
   2522  a650		       00 00		      HEX	0000
   2523  a652							;blank
   2524  a652		       00 00 00 00	      HEX	00000000
   2525  a656							;font
   2526  a656		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000000000000000000000000000
   2527  a676		       00 00 00 00*	      HEX	000000000000000000000000000000000000000000
   2528  a68b
   2529  a700					      ORG	$A700,0	; *************
   2530  a700
   2531  a700					      RORG	$A700	; *************
   2532  a700
   2533  a700							;g16x16_4color
   2534  a700		       00 00 00 00	      HEX	00000000
   2535  a704							;g16x16_4color2
   2536  a704		       aa aa aa aa	      HEX	aaaaaaaa
   2537  a708							;g16x16_4color3
   2538  a708		       aa aa aa aa	      HEX	aaaaaaaa
   2539  a70c							;g16x16_4color4
   2540  a70c		       ff ff ff ff	      HEX	ffffffff
   2541  a710							;g16x16_4color5
   2542  a710		       ff ff ff ff	      HEX	ffffffff
   2543  a714							;g16x16_4color6
   2544  a714		       55 55 55 55	      HEX	55555555
   2545  a718							;g16x16_4color7
   2546  a718		       55 55 55 55	      HEX	55555555
   2547  a71c							;g16x16_4color8
   2548  a71c		       00 00 00 00	      HEX	00000000
   2549  a720							;zonebg80x16_16
   2550  a720		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000
   2551  a734							;ex1
   2552  a734		       00 63 44 00	      HEX	00634400
   2553  a738							;ex2
   2554  a738		       06 28 91 40	      HEX	06289140
   2555  a73c							;ex3
   2556  a73c		       18 a0 ca 10	      HEX	18a0ca10
   2557  a740							;ex4
   2558  a740		       1d 80 02 05	      HEX	1d800205
   2559  a744							;ex5
   2560  a744		       12 00 00 63	      HEX	12000063
   2561  a748							;ex6
   2562  a748		       14 00 00 01	      HEX	14000001
   2563  a74c							;ex7
   2564  a74c		       00 00 00 01	      HEX	00000001
   2565  a750							;p1
   2566  a750		       00 00		      HEX	0000
   2567  a752							;blank
   2568  a752		       00 00 00 00	      HEX	00000000
   2569  a756							;font
   2570  a756		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000000000000000000000000000
   2571  a776		       00 00 00 00*	      HEX	000000000000000000000000000000000000000000
   2572  a78b
   2573  a800					      ORG	$A800,0	; *************
   2574  a800
   2575  a800					      RORG	$A800	; *************
   2576  a800
   2577  a800							;g16x16_4color
   2578  a800		       aa aa aa aa	      HEX	aaaaaaaa
   2579  a804							;g16x16_4color2
   2580  a804		       aa aa aa aa	      HEX	aaaaaaaa
   2581  a808							;g16x16_4color3
   2582  a808		       ff ff ff ff	      HEX	ffffffff
   2583  a80c							;g16x16_4color4
   2584  a80c		       ff ff ff ff	      HEX	ffffffff
   2585  a810							;g16x16_4color5
   2586  a810		       55 55 55 55	      HEX	55555555
   2587  a814							;g16x16_4color6
   2588  a814		       55 55 55 55	      HEX	55555555
   2589  a818							;g16x16_4color7
   2590  a818		       00 00 00 00	      HEX	00000000
   2591  a81c							;g16x16_4color8
   2592  a81c		       00 00 00 00	      HEX	00000000
   2593  a820							;zonebg80x16_16
   2594  a820		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000
   2595  a834							;ex1
   2596  a834		       00 66 b9 00	      HEX	0066b900
   2597  a838							;ex2
   2598  a838		       01 6a f9 80	      HEX	016af980
   2599  a83c							;ex3
   2600  a83c		       c5 ac 16 c4	      HEX	c5ac16c4
   2601  a840							;ex4
   2602  a840		       16 90 04 64	      HEX	16900464
   2603  a844							;ex5
   2604  a844		       5e 00 00 34	      HEX	5e000034
   2605  a848							;ex6
   2606  a848		       14 00 00 01	      HEX	14000001
   2607  a84c							;ex7
   2608  a84c		       40 00 00 00	      HEX	40000000
   2609  a850							;p1
   2610  a850		       56 00		      HEX	5600
   2611  a852							;blank
   2612  a852		       00 00 00 00	      HEX	00000000
   2613  a856							;font
   2614  a856		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000000000000000000000000000
   2615  a876		       00 00 00 00*	      HEX	000000000000000000004000540000000000000000
   2616  a88b
   2617  a900					      ORG	$A900,0	; *************
   2618  a900
   2619  a900					      RORG	$A900	; *************
   2620  a900
   2621  a900							;g16x16_4color
   2622  a900		       aa aa aa aa	      HEX	aaaaaaaa
   2623  a904							;g16x16_4color2
   2624  a904		       ff ff ff ff	      HEX	ffffffff
   2625  a908							;g16x16_4color3
   2626  a908		       ff ff ff ff	      HEX	ffffffff
   2627  a90c							;g16x16_4color4
   2628  a90c		       55 55 55 55	      HEX	55555555
   2629  a910							;g16x16_4color5
   2630  a910		       55 55 55 55	      HEX	55555555
   2631  a914							;g16x16_4color6
   2632  a914		       00 00 00 00	      HEX	00000000
   2633  a918							;g16x16_4color7
   2634  a918		       00 00 00 00	      HEX	00000000
   2635  a91c							;g16x16_4color8
   2636  a91c		       aa aa aa aa	      HEX	aaaaaaaa
   2637  a920							;zonebg80x16_16
   2638  a920		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000
   2639  a934							;ex1
   2640  a934		       03 19 24 00	      HEX	03192400
   2641  a938							;ex2
   2642  a938		       06 7b 69 10	      HEX	067b6910
   2643  a93c							;ex3
   2644  a93c		       04 99 6a 64	      HEX	04996a64
   2645  a940							;ex4
   2646  a940		       62 74 06 64	      HEX	62740664
   2647  a944							;ex5
   2648  a944		       19 40 00 65	      HEX	19400065
   2649  a948							;ex6
   2650  a948		       50 00 00 01	      HEX	50000001
   2651  a94c							;ex7
   2652  a94c		       40 00 00 01	      HEX	40000001
   2653  a950							;p1
   2654  a950		       14 00		      HEX	1400
   2655  a952							;blank
   2656  a952		       00 00 00 00	      HEX	00000000
   2657  a956							;font
   2658  a956		       54 54 54 54*	      HEX	5454545404545410545444505450544054445454445444445440044454105410
   2659  a976		       44 44 10 54*	      HEX	444410544000101040101000000440545414154000
   2660  a98b
   2661  aa00					      ORG	$AA00,0	; *************
   2662  aa00
   2663  aa00					      RORG	$AA00	; *************
   2664  aa00
   2665  aa00							;g16x16_4color
   2666  aa00		       ff ff ff ff	      HEX	ffffffff
   2667  aa04							;g16x16_4color2
   2668  aa04		       ff ff ff ff	      HEX	ffffffff
   2669  aa08							;g16x16_4color3
   2670  aa08		       55 55 55 55	      HEX	55555555
   2671  aa0c							;g16x16_4color4
   2672  aa0c		       55 55 55 55	      HEX	55555555
   2673  aa10							;g16x16_4color5
   2674  aa10		       00 00 00 00	      HEX	00000000
   2675  aa14							;g16x16_4color6
   2676  aa14		       00 00 00 00	      HEX	00000000
   2677  aa18							;g16x16_4color7
   2678  aa18		       ff ff ff ff	      HEX	ffffffff
   2679  aa1c							;g16x16_4color8
   2680  aa1c		       aa aa aa aa	      HEX	aaaaaaaa
   2681  aa20							;zonebg80x16_16
   2682  aa20		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000
   2683  aa34							;ex1
   2684  aa34		       00 05 90 c0	      HEX	000590c0
   2685  aa38							;ex2
   2686  aa38		       05 96 2e 90	      HEX	05962e90
   2687  aa3c							;ex3
   2688  aa3c		       1b 8a 98 50	      HEX	1b8a9850
   2689  aa40							;ex4
   2690  aa40		       66 69 1e a5	      HEX	66691ea5
   2691  aa44							;ex5
   2692  aa44		       5a 50 00 61	      HEX	5a500061
   2693  aa48							;ex6
   2694  aa48		       54 00 00 05	      HEX	54000005
   2695  aa4c							;ex7
   2696  aa4c		       00 00 00 01	      HEX	00000001
   2697  aa50							;p1
   2698  aa50		       15 80		      HEX	1580
   2699  aa52							;blank
   2700  aa52		       00 00 00 00	      HEX	00000000
   2701  aa56							;font
   2702  aa56		       44 10 40 04*	      HEX	4410400404444410440444444044404044441044444044444440504404104454
   2703  aa76		       54 44 10 40*	      HEX	544410405000000040000000001010400441401000
   2704  aa8b
   2705  ab00					      ORG	$AB00,0	; *************
   2706  ab00
   2707  ab00					      RORG	$AB00	; *************
   2708  ab00
   2709  ab00							;g16x16_4color
   2710  ab00		       ff ff ff ff	      HEX	ffffffff
   2711  ab04							;g16x16_4color2
   2712  ab04		       55 55 55 55	      HEX	55555555
   2713  ab08							;g16x16_4color3
   2714  ab08		       55 55 55 55	      HEX	55555555
   2715  ab0c							;g16x16_4color4
   2716  ab0c		       00 00 00 00	      HEX	00000000
   2717  ab10							;g16x16_4color5
   2718  ab10		       00 00 00 00	      HEX	00000000
   2719  ab14							;g16x16_4color6
   2720  ab14		       aa aa aa aa	      HEX	aaaaaaaa
   2721  ab18							;g16x16_4color7
   2722  ab18		       ff ff ff ff	      HEX	ffffffff
   2723  ab1c							;g16x16_4color8
   2724  ab1c		       ff ff ff ff	      HEX	ffffffff
   2725  ab20							;zonebg80x16_16
   2726  ab20		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000
   2727  ab34							;ex1
   2728  ab34		       00 30 40 00	      HEX	00304000
   2729  ab38							;ex2
   2730  ab38		       30 69 9a 40	      HEX	30699a40
   2731  ab3c							;ex3
   2732  ab3c		       05 a5 6d 83	      HEX	05a56d83
   2733  ab40							;ex4
   2734  ab40		       26 9a 68 d8	      HEX	269a68d8
   2735  ab44							;ex5
   2736  ab44		       18 d4 04 69	      HEX	18d40469
   2737  ab48							;ex6
   2738  ab48		       14 00 00 01	      HEX	14000001
   2739  ab4c							;ex7
   2740  ab4c		       40 00 00 01	      HEX	40000001
   2741  ab50							;p1
   2742  ab50		       0d 56		      HEX	0d56
   2743  ab52							;blank
   2744  ab52		       00 00 00 00	      HEX	00000000
   2745  ab56							;font
   2746  ab56		       44 10 40 04*	      HEX	4410400404044410440454444044404044441004504044444454445004104444
   2747  ab76		       54 54 10 40*	      HEX	545410405400101010000000004004400441451000
   2748  ab8b
   2749  ac00					      ORG	$AC00,0	; *************
   2750  ac00
   2751  ac00					      RORG	$AC00	; *************
   2752  ac00
   2753  ac00							;g16x16_4color
   2754  ac00		       55 55 55 55	      HEX	55555555
   2755  ac04							;g16x16_4color2
   2756  ac04		       55 55 55 55	      HEX	55555555
   2757  ac08							;g16x16_4color3
   2758  ac08		       00 00 00 00	      HEX	00000000
   2759  ac0c							;g16x16_4color4
   2760  ac0c		       00 00 00 00	      HEX	00000000
   2761  ac10							;g16x16_4color5
   2762  ac10		       aa aa aa aa	      HEX	aaaaaaaa
   2763  ac14							;g16x16_4color6
   2764  ac14		       aa aa aa aa	      HEX	aaaaaaaa
   2765  ac18							;g16x16_4color7
   2766  ac18		       aa aa aa aa	      HEX	aaaaaaaa
   2767  ac1c							;g16x16_4color8
   2768  ac1c		       ff ff ff ff	      HEX	ffffffff
   2769  ac20							;zonebg80x16_16
   2770  ac20		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000
   2771  ac34							;ex1
   2772  ac34		       00 00 00 00	      HEX	00000000
   2773  ac38							;ex2
   2774  ac38		       00 64 a8 00	      HEX	0064a800
   2775  ac3c							;ex3
   2776  ac3c		       00 6e a2 40	      HEX	006ea240
   2777  ac40							;ex4
   2778  ac40		       1b 26 a6 a4	      HEX	1b26a6a4
   2779  ac44							;ex5
   2780  ac44		       12 a5 5a a4	      HEX	12a55aa4
   2781  ac48							;ex6
   2782  ac48		       11 00 00 14	      HEX	11000014
   2783  ac4c							;ex7
   2784  ac4c		       10 00 00 00	      HEX	10000000
   2785  ac50							;p1
   2786  ac50		       0d 56		      HEX	0d56
   2787  ac52							;blank
   2788  ac52		       00 00 00 00	      HEX	00000000
   2789  ac56							;font
   2790  ac56		       44 10 54 14*	      HEX	4410541454045410545444504044505044541004504054444444444454104444
   2791  ac76		       44 10 10 50*	      HEX	441010505500101010000054004004400414441000
   2792  ac8b
   2793  ad00					      ORG	$AD00,0	; *************
   2794  ad00
   2795  ad00					      RORG	$AD00	; *************
   2796  ad00
   2797  ad00							;g16x16_4color
   2798  ad00		       55 55 55 55	      HEX	55555555
   2799  ad04							;g16x16_4color2
   2800  ad04		       00 00 00 00	      HEX	00000000
   2801  ad08							;g16x16_4color3
   2802  ad08		       00 00 00 00	      HEX	00000000
   2803  ad0c							;g16x16_4color4
   2804  ad0c		       aa aa aa aa	      HEX	aaaaaaaa
   2805  ad10							;g16x16_4color5
   2806  ad10		       aa aa aa aa	      HEX	aaaaaaaa
   2807  ad14							;g16x16_4color6
   2808  ad14		       ff ff ff ff	      HEX	ffffffff
   2809  ad18							;g16x16_4color7
   2810  ad18		       aa aa aa aa	      HEX	aaaaaaaa
   2811  ad1c							;g16x16_4color8
   2812  ad1c		       55 55 55 55	      HEX	55555555
   2813  ad20							;zonebg80x16_16
   2814  ad20		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000
   2815  ad34							;ex1
   2816  ad34		       00 00 00 00	      HEX	00000000
   2817  ad38							;ex2
   2818  ad38		       00 14 14 0c	      HEX	0014140c
   2819  ad3c							;ex3
   2820  ad3c		       00 65 95 03	      HEX	00659503
   2821  ad40							;ex4
   2822  ad40		       16 68 4a 60	      HEX	16684a60
   2823  ad44							;ex5
   2824  ad44		       15 82 a3 54	      HEX	1582a354
   2825  ad48							;ex6
   2826  ad48		       25 51 05 24	      HEX	25510524
   2827  ad4c							;ex7
   2828  ad4c		       00 00 00 04	      HEX	00000004
   2829  ad50							;p1
   2830  ad50		       15 80		      HEX	1580
   2831  ad52							;blank
   2832  ad52		       00 00 00 00	      HEX	00000000
   2833  ad56							;font
   2834  ad56		       44 10 04 04*	      HEX	4410040444544004444444444044404040441004444054444444444440104444
   2835  ad76		       44 54 44 14*	      HEX	445444145400041010000000004004400444451000
   2836  ad8b
   2837  ae00					      ORG	$AE00,0	; *************
   2838  ae00
   2839  ae00					      RORG	$AE00	; *************
   2840  ae00
   2841  ae00							;g16x16_4color
   2842  ae00		       00 00 00 00	      HEX	00000000
   2843  ae04							;g16x16_4color2
   2844  ae04		       00 00 00 00	      HEX	00000000
   2845  ae08							;g16x16_4color3
   2846  ae08		       aa aa aa aa	      HEX	aaaaaaaa
   2847  ae0c							;g16x16_4color4
   2848  ae0c		       aa aa aa aa	      HEX	aaaaaaaa
   2849  ae10							;g16x16_4color5
   2850  ae10		       ff ff ff ff	      HEX	ffffffff
   2851  ae14							;g16x16_4color6
   2852  ae14		       ff ff ff ff	      HEX	ffffffff
   2853  ae18							;g16x16_4color7
   2854  ae18		       55 55 55 55	      HEX	55555555
   2855  ae1c							;g16x16_4color8
   2856  ae1c		       55 55 55 55	      HEX	55555555
   2857  ae20							;zonebg80x16_16
   2858  ae20		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000
   2859  ae34							;ex1
   2860  ae34		       00 00 00 00	      HEX	00000000
   2861  ae38							;ex2
   2862  ae38		       00 c0 00 00	      HEX	00c00000
   2863  ae3c							;ex3
   2864  ae3c		       c0 10 50 00	      HEX	c0105000
   2865  ae40							;ex4
   2866  ae40		       06 a5 79 40	      HEX	06a57940
   2867  ae44							;ex5
   2868  ae44		       31 55 45 13	      HEX	31554513
   2869  ae48							;ex6
   2870  ae48		       01 15 45 50	      HEX	01154550
   2871  ae4c							;ex7
   2872  ae4c		       05 00 00 10	      HEX	05000010
   2873  ae50							;p1
   2874  ae50		       14 00		      HEX	1400
   2875  ae52							;blank
   2876  ae52		       00 00 00 00	      HEX	00000000
   2877  ae56							;font
   2878  ae56		       44 50 04 04*	      HEX	4450040444404044444444444044404040441004444054444444444440104444
   2879  ae76		       44 44 44 04*	      HEX	444444045044441004000000001010400444401000
   2880  ae8b
   2881  af00					      ORG	$AF00,0	; *************
   2882  af00
   2883  af00					      RORG	$AF00	; *************
   2884  af00
   2885  af00							;g16x16_4color
   2886  af00		       00 00 00 00	      HEX	00000000
   2887  af04							;g16x16_4color2
   2888  af04		       aa aa aa aa	      HEX	aaaaaaaa
   2889  af08							;g16x16_4color3
   2890  af08		       aa aa aa aa	      HEX	aaaaaaaa
   2891  af0c							;g16x16_4color4
   2892  af0c		       ff ff ff ff	      HEX	ffffffff
   2893  af10							;g16x16_4color5
   2894  af10		       ff ff ff ff	      HEX	ffffffff
   2895  af14							;g16x16_4color6
   2896  af14		       55 55 55 55	      HEX	55555555
   2897  af18							;g16x16_4color7
   2898  af18		       55 55 55 55	      HEX	55555555
   2899  af1c							;g16x16_4color8
   2900  af1c		       00 00 00 00	      HEX	00000000
   2901  af20							;zonebg80x16_16
   2902  af20		       aa aa aa aa*	      HEX	aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
   2903  af34							;ex1
   2904  af34		       00 00 00 00	      HEX	00000000
   2905  af38							;ex2
   2906  af38		       00 00 c0 00	      HEX	0000c000
   2907  af3c							;ex3
   2908  af3c		       00 00 00 c0	      HEX	000000c0
   2909  af40							;ex4
   2910  af40		       00 50 54 00	      HEX	00505400
   2911  af44							;ex5
   2912  af44		       01 15 07 40	      HEX	01150740
   2913  af48							;ex6
   2914  af48		       00 50 64 40	      HEX	00506440
   2915  af4c							;ex7
   2916  af4c		       01 45 45 40	      HEX	01454540
   2917  af50							;p1
   2918  af50		       56 00		      HEX	5600
   2919  af52							;blank
   2920  af52		       00 00 00 00	      HEX	00000000
   2921  af56							;font
   2922  af56		       54 10 54 54*	      HEX	5410545444545454545454505450545454445404444044545454545454544444
   2923  af76		       44 44 44 54*	      HEX	444444544044541004000000000440545410154000
   2924  af8b
   2925  b000					      ORG	$B000,0	; *************
   2926  b000
   2927  b000					      RORG	$B000	; *************
   2928  b000
   2929  b000
   2930  b000							; Provided under the CC0 license. See the included LICENSE.txt for details.
   2931  b000
   2932  b000				  -	      ifnconst	bankswitchmode
   2933  b000				  -	      if	( * < $f000 )
   2934  b000				  -	      ORG	$F000
   2935  b000				  -	      endif
   2936  b000					      else
   2937  b000					      ifconst	ROM128K
   2938  b000					      if	( * < $f000 )
   2939  27000					       ORG	$27000
   2940  27000					       RORG	$F000
   2941  27000					       endif
   2942  27000					       endif
   2943  27000				   -	       ifconst	ROM144K
   2944  27000				   -	       if	( * < $f000 )
   2945  27000				   -	       ORG	$27000
   2946  27000				   -	       RORG	$F000
   2947  27000				   -	       endif
   2948  27000					       endif
   2949  27000				   -	       ifconst	ROM256K
   2950  27000				   -	       if	( * < $f000 )
   2951  27000				   -	       ORG	$47000
   2952  27000				   -	       RORG	$F000
   2953  27000				   -	       endif
   2954  27000					       endif
   2955  27000				   -	       ifconst	ROM272K
   2956  27000				   -	       if	( * < $f000 )
   2957  27000				   -	       ORG	$47000
   2958  27000				   -	       RORG	$F000
   2959  27000				   -	       endif
   2960  27000					       endif
   2961  27000				   -	       ifconst	ROM512K
   2962  27000				   -	       if	( * < $f000 )
   2963  27000				   -	       ORG	$87000
   2964  27000				   -	       RORG	$F000
   2965  27000				   -	       endif
   2966  27000					       endif
   2967  27000				   -	       ifconst	ROM528K
   2968  27000				   -	       if	( * < $f000 )
   2969  27000				   -	       ORG	$87000
   2970  27000				   -	       RORG	$F000
   2971  27000				   -	       endif
   2972  27000					       endif
   2973  27000					       endif
   2974  27000
   2975  27000							; all of these "modules" have conditional clauses in them, so even though
   2976  27000							; they're always included here, they don't take up rom unless the user
   2977  27000							; explicitly enables support for the feature.
   2978  27000
   2979  27000					       ifnconst	included.7800vox.asm
------- FILE 7800vox.asm LEVEL 2 PASS 3
      0  27000					       include	7800vox.asm
      1  27000							; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  27000
      3  27000							; AtariVox 7800basic wrapper
      4  27000
      5  27000							; to be called with
      6  27000							; A=# of bytes
      7  27000							;
      8  27000
      9  27000				   -	       ifconst	HSSUPPORT
     10  27000				   -
     11  27000				   -AVoxReadBytes
     12  27000				   -	       sta	temp8
     13  27000				   -	       jsr	i2c_startwrite
     14  27000				   -	       bcs	eeprom_error
     15  27000				   -
     16  27000				   -	       lda	HSVoxHi
     17  27000				   -	       jsr	i2c_txbyte
     18  27000				   -	       lda	HSVoxLo
     19  27000				   -	       jsr	i2c_txbyte
     20  27000				   -	       jsr	i2c_stopwrite
     21  27000				   -
     22  27000				   -	       jsr	i2c_startread
     23  27000				   -
     24  27000				   -	       ldx	#0
     25  27000				   -AVoxReadBytesLoop
     26  27000				   -	       jsr	i2c_rxbyte
     27  27000				   -	       sta	eeprombuffer,x
     28  27000				   -	       inx
     29  27000				   -	       cpx	temp8
     30  27000				   -	       bne	AVoxReadBytesLoop
     31  27000				   -	       jsr	i2c_stopread
     32  27000				   -	       lda	#0
     33  27000				   -	       rts
     34  27000				   -
     35  27000				   -			; to be called with
     36  27000				   -			; A=# of bytes
     37  27000				   -			;
     38  27000				   -
     39  27000				   -AVoxWriteBytes
     40  27000				   -	       sta	temp8
     41  27000				   -	       jsr	i2c_startwrite
     42  27000				   -	       bcs	eeprom_error
     43  27000				   -
     44  27000				   -	       lda	HSVoxHi
     45  27000				   -	       jsr	i2c_txbyte
     46  27000				   -	       lda	HSVoxLo
     47  27000				   -	       jsr	i2c_txbyte
     48  27000				   -
     49  27000				   -	       ldx	#$00
     50  27000				   -AVoxWriteBytesLoop
     51  27000				   -	       lda	eeprombuffer,x
     52  27000				   -	       jsr	i2c_txbyte
     53  27000				   -	       inx
     54  27000				   -	       cpx	temp8
     55  27000				   -	       bne	AVoxWriteBytesLoop
     56  27000				   -	       jsr	i2c_stopwrite
     57  27000				   -
     58  27000				   -	       lda	#0
     59  27000				   -	       rts
     60  27000				   -
     61  27000				   -eeprom_error
     62  27000				   -	       lda	#$ff
     63  27000				   -	       rts
     64  27000				   -
     65  27000				   -AVoxDetect
     66  27000				   -
     67  27000				   -	       jsr	i2c_startwrite
     68  27000				   -	       bcs	eeprom_error
     69  27000				   -	       lda	#$30
     70  27000				   -	       jsr	i2c_txbyte
     71  27000				   -	       lda	#$00
     72  27000				   -	       jsr	i2c_txbyte
     73  27000				   -	       jsr	i2c_stopwrite
     74  27000				   -	       rts
     75  27000				   -
     76  27000				   -	       include	"i2c7800.inc"
     77  27000				   -	       I2C_SUBS	temp9
     78  27000				   -
     79  27000					       endif
     80  27000
------- FILE c:\Users\Steve\Desktop\2018dev\7800\7800basic\projects\lessons\lesson1_gfx_modes\160A_16pixelzone_128_16.bas.asm
   2981  27000					       endif
   2982  27000					       ifnconst	included.pokeysound.asm
------- FILE pokeysound.asm LEVEL 2 PASS 3
      0  27000					       include	pokeysound.asm
      1  27000							; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  27000
      3  27000
      4  27000				   -	       ifconst	pokeysupport
      5  27000				   -
      6  27000				   -pokeysoundmodulestart
      7  27000				   -
      8  27000				   -mutepokey
      9  27000				   -	       lda	#0
     10  27000				   -	       ldy	#7
     11  27000				   -mutepokeyloop
     12  27000				   -	       sta	pokey1pointlo,y
     13  27000				   -	       sta	(pokeybaselo),y
     14  27000				   -	       dey
     15  27000				   -	       bpl	mutepokeyloop
     16  27000				   -	       rts
     17  27000				   -
     18  27000				   -checkpokeyplaying
     19  27000				   -	       ldx	#6
     20  27000				   -checkpokeyplayingloop
     21  27000				   -	       lda	pokey1pointlo,x
     22  27000				   -	       ora	pokey1pointhi,x
     23  27000				   -	       beq	pokeychannelinactive
     24  27000				   -	       jsr	playpokeysfxA	; x=channel*2
     25  27000				   -pokeychannelinactive
     26  27000				   -	       dex
     27  27000				   -	       dex
     28  27000				   -	       bpl	checkpokeyplayingloop
     29  27000				   -	       rts
     30  27000				   -
     31  27000				   -playpokeysfxA
     32  27000				   -	       txa
     33  27000				   -	       tay
     34  27000				   -	       lda	pokey1tick,x
     35  27000				   -	       beq	playpokeysfxAcont
     36  27000				   -	       sec
     37  27000				   -	       sbc	#1
     38  27000				   -	       sta	pokey1tick,x	; sound resolution is >1 frame, and we're mid-tock...
     39  27000				   -	       rts
     40  27000				   -
     41  27000				   -playpokeysfxAcont
     42  27000				   -	       lda	pokey1frames,x	; set the frame countdown for this sound chunk
     43  27000				   -	       sta	pokey1tick,x
     44  27000				   -
     45  27000				   -	       lda	pokey1priority,x	; decrease the sound's priority if its non-zero
     46  27000				   -	       beq	playpokeysfxAcont2
     47  27000				   -	       sec
     48  27000				   -	       sbc	#1
     49  27000				   -	       sta	pokey1priority,x
     50  27000				   -playpokeysfxAcont2
     51  27000				   -
     52  27000				   -			; *** FREQUENCY
     53  27000				   -	       lda	(pokey1pointlo,x)
     54  27000				   -	       sta	temp1
     55  27000				   -	       clc
     56  27000				   -	       adc	pokey1offset,x	; take into account any pitch modification
     57  27000				   -	       sta	(pokeybaselo),y	; PAUDF0,0
     58  27000				   -
     59  27000				   -			;advance the data pointer +1
     60  27000				   -	       inc	pokey1pointlo,x
     61  27000				   -	       bne	skippokeyhiinc1
     62  27000				   -	       inc	pokey1pointhi,x
     63  27000				   -skippokeyhiinc1
     64  27000				   -
     65  27000				   -			; *** WAVE
     66  27000				   -	       lda	(pokey1pointlo,x)
     67  27000				   -	       asl
     68  27000				   -	       asl
     69  27000				   -	       asl
     70  27000				   -	       asl		; x16
     71  27000				   -
     72  27000				   -			;advance the data pointer +1
     73  27000				   -	       inc	pokey1pointlo,x
     74  27000				   -	       bne	skippokeyhiinc2
     75  27000				   -	       inc	pokey1pointhi,x
     76  27000				   -skippokeyhiinc2
     77  27000				   -
     78  27000				   -	       ora	(pokey1pointlo,x)
     79  27000				   -	       iny
     80  27000				   -	       sta	(pokeybaselo),y
     81  27000				   -
     82  27000				   -	       ora	temp1	; check if F|C|V=0
     83  27000				   -	       beq	zeropokeypoint	; if so, we're at the end of the sound.
     84  27000				   -
     85  27000				   -			; advance the pointer +1, on to the next sound chunk
     86  27000				   -	       inc	pokey1pointlo,x
     87  27000				   -	       bne	skippokeyhiinc3
     88  27000				   -	       inc	pokey1pointhi,x
     89  27000				   -skippokeyhiinc3
     90  27000				   -	       rts
     91  27000				   -
     92  27000				   -zeropokeypoint
     93  27000				   -	       sta	pokey1pointlo,x
     94  27000				   -	       sta	pokey1pointhi,x
     95  27000				   -	       sta	pokey1priority,x
     96  27000				   -	       rts
     97  27000				   -
     98  27000				   -schedulepokeysfx
     99  27000				   -	       ldx	#6
    100  27000				   -schedulepokeysfxloop
    101  27000				   -	       lda	pokey1pointlo,x
    102  27000				   -	       ora	pokey1pointhi,x
    103  27000				   -	       bne	schedulespokeysearch
    104  27000				   -	       jmp	schedulepokeyX	; we found an unused channel, so use it...
    105  27000				   -schedulespokeysearch
    106  27000				   -	       dex
    107  27000				   -	       dex
    108  27000				   -	       bpl	schedulepokeysfxloop
    109  27000				   -
    110  27000				   -			; if we're here, all 4 channels are presently playing a sound...
    111  27000				   -	       ldy	#1
    112  27000				   -	       lda	(temp1),y	; peek at the priority of this sfx...
    113  27000				   -	       bne	schedulepokeysfxcont1
    114  27000				   -	       rts		; ...and skip it if it's 0 priority
    115  27000				   -schedulepokeysfxcont1
    116  27000				   -
    117  27000				   -			; figure out which current sound has the lowest priority...
    118  27000				   -	       lda	#0
    119  27000				   -	       sta	temp8
    120  27000				   -	       lda	pokey1priority
    121  27000				   -	       sta	temp9
    122  27000				   -	       ldx	#6
    123  27000				   -findlowprioritypokeyloop
    124  27000				   -	       lda	pokey1priority,x
    125  27000				   -	       cmp	temp9
    126  27000				   -	       bcs	findlowprioritypokeyloopcontinue
    127  27000				   -	       sta	temp9
    128  27000				   -	       stx	temp8
    129  27000				   -findlowprioritypokeyloopcontinue
    130  27000				   -	       dex
    131  27000				   -	       dex
    132  27000				   -	       bne	findlowprioritypokeyloop
    133  27000				   -	       ldx	temp8	; the low priority channel we'll interrupt
    134  27000				   -
    135  27000				   -schedulepokeyX
    136  27000				   -			;called with X=2*pokey channel to play on...
    137  27000				   -	       ldy	#1	; get priority and sound-resolution (in frames)
    138  27000				   -	       lda	(temp1),y
    139  27000				   -	       sta	pokey1priority,x
    140  27000				   -	       iny
    141  27000				   -	       lda	(temp1),y
    142  27000				   -	       sta	pokey1frames,x
    143  27000				   -
    144  27000				   -	       lda	temp1
    145  27000				   -	       clc
    146  27000				   -	       adc	#3
    147  27000				   -	       sta	pokey1pointlo,x
    148  27000				   -	       lda	temp2
    149  27000				   -	       adc	#0
    150  27000				   -	       sta	pokey1pointhi,x
    151  27000				   -	       lda	temp3
    152  27000				   -	       sta	pokey1offset,x
    153  27000				   -	       lda	#0
    154  27000				   -	       sta	pokey1tick,x
    155  27000				   -	       rts
    156  27000				   -
    157  27000				   -			; pokey detection routine. we check for pokey in the XBOARD/XM location,
    158  27000				   -			; and the standard $4000 location.
    159  27000				   -			; if pokey the pokey is present, this routine will reset it.
    160  27000				   -
    161  27000				   -detectpokeylocation
    162  27000				   -			;XBoard/XM...
    163  27000				   -	       ldx	#2
    164  27000				   -detectpokeyloop
    165  27000				   -	       lda	XCTRL1s
    166  27000				   -	       ora	#%00010100
    167  27000				   -	       and	POKEYXMMASK,x
    168  27000				   -	       sta	XCTRL1s
    169  27000				   -	       sta	XCTRL1
    170  27000				   -
    171  27000				   -	       lda	POKEYCHECKLO,x
    172  27000				   -	       sta	pokeybaselo
    173  27000				   -	       lda	POKEYCHECKHI,x
    174  27000				   -	       sta	pokeybasehi
    175  27000				   -	       jsr	checkforpokey
    176  27000				   -	       lda	pokeydetected
    177  27000				   -	       beq	foundpokeychip
    178  27000				   -	       dex
    179  27000				   -	       bpl	detectpokeyloop
    180  27000				   -foundpokeychip
    181  27000				   -	       eor	#$ff	; invert state for 7800basic if...then test
    182  27000				   -	       sta	pokeydetected
    183  27000				   -	       rts
    184  27000				   -
    185  27000				   -POKEYXMMASK
    186  27000				   -			;     XM POKEY on    XM POKEY off   XM POKEY off
    187  27000				   -	       .byte	%11111111, %11101111, %11101111
    188  27000				   -
    189  27000				   -POKEYCHECKLO
    190  27000				   -	       .byte	<$0450, <$0450, <$4000
    191  27000				   -POKEYCHECKHI
    192  27000				   -	       .byte	>$0450, >$0450, >$4000
    193  27000				   -
    194  27000				   -checkforpokey
    195  27000				   -	       ldy	#$0f
    196  27000				   -	       lda	#$00
    197  27000				   -	       sta	pokeydetected	; start off by assuming pokey will be detected
    198  27000				   -resetpokeyregistersloop
    199  27000				   -	       sta	(pokeybase),y
    200  27000				   -	       dey
    201  27000				   -	       bpl	resetpokeyregistersloop
    202  27000				   -
    203  27000				   -	       ldy	#PAUDCTL
    204  27000				   -	       sta	(pokeybase),y
    205  27000				   -	       ldy	#PSKCTL
    206  27000				   -	       sta	(pokeybase),y
    207  27000				   -
    208  27000				   -			; let the dust settle...
    209  27000				   -	       nop
    210  27000				   -	       nop
    211  27000				   -	       nop
    212  27000				   -
    213  27000				   -	       lda	#4
    214  27000				   -	       sta	temp9
    215  27000				   -pokeycheckloop1
    216  27000				   -			; we're in reset, so the RANDOM register should read $ff...
    217  27000				   -	       ldy	#PRANDOM
    218  27000				   -	       lda	(pokeybase),y
    219  27000				   -	       cmp	#$ff
    220  27000				   -	       bne	nopokeydetected
    221  27000				   -	       dec	temp9
    222  27000				   -	       bne	pokeycheckloop1
    223  27000				   -
    224  27000				   -			; take pokey out of reset...
    225  27000				   -	       ldy	#PSKCTL
    226  27000				   -	       lda	#3
    227  27000				   -	       sta	(pokeybase),y
    228  27000				   -	       ldy	#PAUDCTL
    229  27000				   -	       lda	#0
    230  27000				   -	       sta	(pokeybase),y
    231  27000				   -
    232  27000				   -			; let the dust settle again...
    233  27000				   -	       nop
    234  27000				   -	       nop
    235  27000				   -	       nop
    236  27000				   -
    237  27000				   -	       lda	#4
    238  27000				   -	       sta	temp9
    239  27000				   -pokeycheckloop2
    240  27000				   -			; we're out of reset, so RANDOM should read non-$ff...
    241  27000				   -	       ldy	#PRANDOM
    242  27000				   -	       lda	(pokeybase),y
    243  27000				   -	       cmp	#$ff
    244  27000				   -	       beq	skippokeycheckreturn
    245  27000				   -	       rts
    246  27000				   -skippokeycheckreturn
    247  27000				   -	       dec	temp9
    248  27000				   -	       bne	pokeycheckloop2
    249  27000				   -nopokeydetected
    250  27000				   -	       dec	pokeydetected	; pokeydetected=#$ff
    251  27000				   -	       rts
    252  27000				   -
    253  27000				   -pokeysoundmoduleend
    254  27000				   -
    255  27000				   -	       echo	"  pokeysound assembly: ",[(pokeysoundmoduleend-pokeysoundmodulestart)]d," bytes"
    256  27000				   -
    257  27000					       endif
------- FILE c:\Users\Steve\Desktop\2018dev\7800\7800basic\projects\lessons\lesson1_gfx_modes\160A_16pixelzone_128_16.bas.asm
   2984  27000					       endif
   2985  27000					       ifnconst	included.tracker.asm
------- FILE tracker.asm LEVEL 2 PASS 3
      0  27000					       include	tracker.asm
      1  27000							; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  27000
      3  27000
      4  27000				   -	       ifconst	MUSICTRACKER
      5  27000				   -			; ** songtempo lists how many 256ths of a frame a 16th note lasts
      6  27000				   -			; ** the player operates on a 16th note grid.
      7  27000				   -
      8  27000				   -servicesongover
      9  27000				   -	       rts
     10  27000				   -servicesong
     11  27000				   -	       lda	songtempo
     12  27000				   -	       beq	servicesongover	; ** if song is off/paused then return
     13  27000				   -servicesongcontinue
     14  27000				   -	       lda	sfxschedulelock
     15  27000				   -	       sta	sfxschedulemissed
     16  27000				   -	       bne	servicesongover
     17  27000				   -	       lda	songtempo
     18  27000				   -	       clc
     19  27000				   -	       adc	songtick	; add songtempo to songtick until it rolls over
     20  27000				   -	       sta	songtick	; this is how we break away from 50/60Hz timing.
     21  27000				   -	       bcc	servicesongover
     22  27000				   -			; ** if we're here a new 16th note has passed
     23  27000				   -			; ** check if a new note is due on any of the 4 channels
     24  27000				   -servicesongredo
     25  27000				   -	       ldx	#3
     26  27000				   -checkchannelloop
     27  27000				   -	       dec	songchannel1busywait,x
     28  27000				   -	       bpl	carryoncheckingchannel
     29  27000				   -	       txa
     30  27000				   -	       pha		; save X for the loop
     31  27000				   -	       jsr	processsongdata
     32  27000				   -	       pla		; restore X for the loop
     33  27000				   -	       tax
     34  27000				   -carryoncheckingchannel
     35  27000				   -	       dex
     36  27000				   -	       bpl	checkchannelloop
     37  27000				   -	       lda	inactivechannelcount
     38  27000				   -	       cmp	#15
     39  27000				   -	       bne	skipstopsong
     40  27000				   -	       lda	songloops
     41  27000				   -	       bne	doasongloop
     42  27000				   -			;lda #0
     43  27000				   -	       sta	songtempo	; all channels are done. stop the song
     44  27000				   -	       rts
     45  27000				   -doasongloop
     46  27000				   -	       bmi	skipsongloopadjust
     47  27000				   -	       dec	songloops
     48  27000				   -skipsongloopadjust
     49  27000				   -	       jsr	setsongchannels
     50  27000				   -	       jmp	servicesongredo
     51  27000				   -skipstopsong
     52  27000				   -	       rts
     53  27000				   -
     54  27000				   -processsongdata
     55  27000				   -			; channel needs processing
     56  27000				   -			; X=channel #
     57  27000				   -
     58  27000				   -	       txa
     59  27000				   -	       clc
     60  27000				   -	       adc	songchannel1stackdepth,x	; stack depth value will be 0, 4, or 8
     61  27000				   -	       tay
     62  27000				   -
     63  27000				   -
     64  27000				   -			; ** indirect x is cumbersome with mult-byte commands.
     65  27000				   -			; ** setup a pointer to the song data for indirect y addressing.
     66  27000				   -	       lda	songchannel1layer1lo,y
     67  27000				   -	       sta	songdatalo
     68  27000				   -	       lda	songchannel1layer1hi,y
     69  27000				   -	       sta	songdatahi
     70  27000				   -	       ora	songdatalo
     71  27000				   -	       bne	channelhasdata
     72  27000				   -			;channel data is pointing at $0000
     73  27000				   -	       lda	#$7F
     74  27000				   -	       sta	songchannel1busywait,x	; skip a bunch of notes
     75  27000				   -setchannelcountbits
     76  27000				   -	       lda	channel2bits,x
     77  27000				   -	       ora	inactivechannelcount
     78  27000				   -	       sta	inactivechannelcount
     79  27000				   -	       rts
     80  27000				   -channelhasdata
     81  27000				   -
     82  27000				   -	       sty	songstackindex
     83  27000				   -	       ldy	#0
     84  27000				   -	       lda	(songdatalo),y	; ** load in the next byte of song data, so we can decode it
     85  27000				   -	       cmp	#$ff
     86  27000				   -	       bne	carryoncheckingdatatype	; ** $ff=pattern end marker
     87  27000				   -	       jmp	handlechannelEOD
     88  27000				   -
     89  27000				   -carryoncheckingdatatype
     90  27000				   -	       and	#$F0
     91  27000				   -	       cmp	#$C0
     92  27000				   -	       beq	handlechannelrest	; 0000XXXX=rest
     93  27000				   -	       cmp	#$F0
     94  27000				   -	       beq	handlemultibytecommand
     95  27000				   -	       cmp	#$D0
     96  27000				   -	       beq	handlesemiup
     97  27000				   -	       cmp	#$E0
     98  27000				   -	       beq	handlesemidown
     99  27000				   -handlenotedata
    100  27000				   -			; ** TODO: note playing is a terrible choice for fall-through
    101  27000				   -
    102  27000				   -			; ** its simple note data, prepare arguments for schedulesfx
    103  27000				   -
    104  27000				   -			; ** set the note length
    105  27000				   -	       lda	(songdatalo),y
    106  27000				   -	       and	#$0F
    107  27000				   -	       sta	songchannel1busywait,x
    108  27000				   -
    109  27000				   -			; ** load the instrument
    110  27000				   -	       lda	songchannel1instrumentlo,x
    111  27000				   -	       sta	sfxinstrumentlo
    112  27000				   -	       lda	songchannel1instrumenthi,x
    113  27000				   -	       sta	sfxinstrumenthi
    114  27000				   -
    115  27000				   -			; ** get the note, and transpose
    116  27000				   -	       lda	(songdatalo),y
    117  27000				   -	       lsr
    118  27000				   -	       lsr
    119  27000				   -	       lsr
    120  27000				   -	       lsr
    121  27000				   -	       clc
    122  27000				   -	       adc	songchannel1transpose,x	; ** add it to the transpose index
    123  27000				   -			; ** its up the respective SFX scheduler to handle and save the note data
    124  27000				   -	       sta	sfxnoteindex
    125  27000				   -
    126  27000				   -	       lda	#0
    127  27000				   -	       sta	sfxpitchoffset
    128  27000				   -
    129  27000				   -	       jsr	schedulesfx
    130  27000				   -
    131  27000				   -	       jmp	advancethesongpointer1byte	; advance to the next data byte and exit
    132  27000				   -
    133  27000				   -handlechannelrest
    134  27000				   -			; ** set the note length
    135  27000				   -	       lda	(songdatalo),y
    136  27000				   -	       and	#$0F
    137  27000				   -	       sta	songchannel1busywait,x
    138  27000				   -	       jmp	advancethesongpointer1byte	; advance to the next data byte and exit
    139  27000				   -
    140  27000				   -handlesemiup
    141  27000				   -	       lda	(songdatalo),y	; ** reload the song data, so we can get at the lower nibble
    142  27000				   -	       and	#$0f	; ** since we need to mask the nibble of the subtracted value,
    143  27000				   -	       clc
    144  27000				   -handlesemidownentry
    145  27000				   -	       adc	songchannel1transpose,x	; ** add it to the transpose index
    146  27000				   -	       sta	songchannel1transpose,x
    147  27000				   -	       jsr	advancethesongpointer1byte
    148  27000				   -	       jmp	processsongdata	; semi doesn't have note length, so process the next data byte...
    149  27000				   -
    150  27000				   -handlesemidown
    151  27000				   -	       lda	(songdatalo),y	; ** reload the song data, so we can get at the lower nibble
    152  27000				   -	       and	#$0f	; ** since we need to mask the nibble of the subtracted value,
    153  27000				   -	       eor	#$ff	; ** its easier if we negate it, and then add it instead.
    154  27000				   -	       sec
    155  27000				   -	       jmp	handlesemidownentry
    156  27000				   -
    157  27000				   -handlemultibytecommand
    158  27000				   -	       lda	(songdatalo),y	; ** reload the song data, so we can get at the lower nibble
    159  27000				   -	       and	#$0f	; ** since we need to mask the nibble of the subtracted value,
    160  27000				   -	       cmp	#$08	; ** load new instrument?
    161  27000				   -	       bne	nothandleinstrumentchange
    162  27000				   -handleinstrumentchange
    163  27000				   -	       iny
    164  27000				   -	       lda	(songdatalo),y
    165  27000				   -	       sta	songchannel1instrumentlo,x
    166  27000				   -	       iny
    167  27000				   -	       lda	(songdatalo),y
    168  27000				   -	       sta	songchannel1instrumenthi,x
    169  27000				   -	       lda	#3
    170  27000				   -	       jsr	advancethesongpointerNbytes	; advance 3 bytes
    171  27000				   -	       jmp	processsongdata
    172  27000				   -
    173  27000				   -nothandleinstrumentchange
    174  27000				   -	       cmp	#$09	; ** absolute tempo change?
    175  27000				   -	       bne	nothandletempochange
    176  27000				   -	       lda	#0
    177  27000				   -	       sta	songtempo
    178  27000				   -handlerelativetempochange
    179  27000				   -	       iny
    180  27000				   -	       lda	(songdatalo),y
    181  27000				   -	       clc
    182  27000				   -	       adc	songtempo
    183  27000				   -	       sta	songtempo
    184  27000				   -	       lda	#2
    185  27000				   -	       jsr	advancethesongpointerNbytes	; advance 2 bytes
    186  27000				   -	       jmp	processsongdata
    187  27000				   -
    188  27000				   -nothandletempochange
    189  27000				   -	       cmp	#$0A	; ** relative tempo change?:
    190  27000				   -	       beq	handlerelativetempochange
    191  27000				   -	       cmp	#$0B	; ** octave/semi change?
    192  27000				   -	       beq	handleoctavesemichange
    193  27000				   -handlepatterndata
    194  27000				   -			; ** if we're here its a pattern/loop "subroutine"
    195  27000				   -			; ** move the channel's "stack" pointer and populate the new stack level
    196  27000				   -
    197  27000				   -	       lda	#4
    198  27000				   -	       clc
    199  27000				   -	       adc	songchannel1stackdepth,x
    200  27000				   -	       sta	songchannel1stackdepth,x	; stack depth value will be 0, 4, or 8
    201  27000				   -
    202  27000				   -	       stx	inttemp6	; about to invalidate x. save it.
    203  27000				   -	       lda	songstackindex
    204  27000				   -	       adc	#4
    205  27000				   -	       tax
    206  27000				   -
    207  27000				   -	       lda	(songdatalo),y
    208  27000				   -	       and	#$7
    209  27000				   -	       sta	songchannel1layer1loops,x
    210  27000				   -	       iny
    211  27000				   -	       lda	(songdatalo),y
    212  27000				   -	       sta	songchannel1layer1lo,x
    213  27000				   -	       iny
    214  27000				   -	       lda	(songdatalo),y
    215  27000				   -	       sta	songchannel1layer1hi,x
    216  27000				   -
    217  27000				   -	       ldx	inttemp6	; restore x with the channel #
    218  27000				   -
    219  27000				   -			; ** advance will operate on the old stack level, since we didn't store the updated songstackindex...
    220  27000				   -	       lda	#3
    221  27000				   -	       jsr	advancethesongpointerNbytes	; advance 3 bytes
    222  27000				   -
    223  27000				   -			; ** ...but the new stack level will be correctly picked up when we process the next byte.
    224  27000				   -	       jmp	processsongdata
    225  27000				   -
    226  27000				   -handlechannelEOD
    227  27000				   -			; ** check if there are loops remaining on the pattern
    228  27000				   -	       stx	inttemp6
    229  27000				   -	       ldx	songstackindex
    230  27000				   -	       dec	songchannel1layer1loops,x
    231  27000				   -	       bmi	handlechannelEODnoloop
    232  27000				   -			; ** loops are remaining. set the pattern pointer to the pattern start, which is contained after the EOD
    233  27000				   -	       iny
    234  27000				   -	       lda	(songdatalo),y
    235  27000				   -	       sta	songchannel1layer1lo,x
    236  27000				   -	       iny
    237  27000				   -	       lda	(songdatalo),y
    238  27000				   -	       sta	songchannel1layer1hi,x
    239  27000				   -	       ldx	inttemp6
    240  27000				   -	       jmp	processsongdata	; EOD handling doesn't have note length, so process the next data byte...
    241  27000				   -
    242  27000				   -handlechannelEODnoloop
    243  27000				   -			; this pattern/loop is done playing. "pop" the stack
    244  27000				   -	       ldx	inttemp6
    245  27000				   -	       lda	songchannel1stackdepth,x
    246  27000				   -	       beq	handlerootchannelEOD
    247  27000				   -	       sec
    248  27000				   -	       sbc	#4
    249  27000				   -	       sta	songchannel1stackdepth,x
    250  27000				   -	       jmp	processsongdata	; EOD handling doesn't have note length, so process the next data byte...
    251  27000				   -
    252  27000				   -handlerootchannelEOD
    253  27000				   -			; this channel is done. point it to $ff data so we no longer process this channel.
    254  27000				   -	       lda	#0
    255  27000				   -	       sta	songchannel1layer1lo,x
    256  27000				   -	       sta	songchannel1layer1hi,x
    257  27000				   -	       sta	songchannel1busywait,x
    258  27000				   -	       jmp	setchannelcountbits
    259  27000				   -	       rts
    260  27000				   -
    261  27000				   -nothandlepatternchange
    262  27000				   -handleoctavesemichange
    263  27000				   -	       iny
    264  27000				   -	       lda	(songdatalo),y
    265  27000				   -	       sta	songchannel1transpose,x
    266  27000				   -	       lda	#2
    267  27000				   -	       jsr	advancethesongpointerNbytes	; advance 2 bytes
    268  27000				   -	       jmp	processsongdata
    269  27000				   -
    270  27000				   -advancethesongpointer1byte
    271  27000				   -	       txa
    272  27000				   -	       ldx	songstackindex
    273  27000				   -	       inc	songchannel1layer1lo,x
    274  27000				   -	       bne	skiphiadvancethesongpointer1byte
    275  27000				   -	       inc	songchannel1layer1hi,x
    276  27000				   -skiphiadvancethesongpointer1byte
    277  27000				   -	       tax
    278  27000				   -	       rts
    279  27000				   -
    280  27000				   -advancethesongpointerNbytes
    281  27000				   -			; entered with A=# of byte to advance
    282  27000				   -	       stx	inttemp6
    283  27000				   -	       ldx	songstackindex
    284  27000				   -	       clc
    285  27000				   -	       adc	songchannel1layer1lo,x
    286  27000				   -	       sta	songchannel1layer1lo,x
    287  27000				   -	       lda	#0
    288  27000				   -	       adc	songchannel1layer1hi,x
    289  27000				   -	       sta	songchannel1layer1hi,x
    290  27000				   -	       ldx	inttemp6
    291  27000				   -	       rts
    292  27000				   -
    293  27000				   -clearsongmemory
    294  27000				   -	       lda	#0
    295  27000				   -	       ldx	#(songchannel4instrumenthi-songchannel1layer1lo)
    296  27000				   -clearsongmemoryloop1
    297  27000				   -	       sta	songchannel1layer1lo,x
    298  27000				   -	       dex
    299  27000				   -	       bpl	clearsongmemoryloop1
    300  27000				   -
    301  27000				   -	       ldx	#(songchannel4stackdepth-songchannel1layer1loops)
    302  27000				   -clearsongmemoryloop2
    303  27000				   -	       sta	songchannel1layer1loops,x
    304  27000				   -	       dex
    305  27000				   -	       bpl	clearsongmemoryloop2
    306  27000				   -
    307  27000				   -	       lda	#$ff
    308  27000				   -	       ldx	#3
    309  27000				   -clearsongmemoryloop3
    310  27000				   -	       sta	songchannel1busywait,x
    311  27000				   -	       dex
    312  27000				   -	       bpl	clearsongmemoryloop3
    313  27000				   -	       rts
    314  27000				   -
    315  27000				   -setsongchannels
    316  27000				   -	       jsr	clearsongmemory
    317  27000				   -	       ldy	#7
    318  27000				   -	       ldx	#3
    319  27000				   -setsongchannelsloop
    320  27000				   -	       lda	(songpointerlo),y
    321  27000				   -	       sta	songchannel1layer1hi,x
    322  27000				   -	       dey
    323  27000				   -	       lda	(songpointerlo),y
    324  27000				   -	       sta	songchannel1layer1lo,x
    325  27000				   -	       dex
    326  27000				   -	       dey
    327  27000				   -	       bpl	setsongchannelsloop
    328  27000				   -	       rts
    329  27000				   -
    330  27000				   -channel2bits
    331  27000				   -	       .byte	1,2,4,8
    332  27000				   -
    333  27000				   -tiatrackeroctavenotes
    334  27000				   -	       ifconst	BUZZBASS
    335  27000				   -LOWC       =	15
    336  27000				   -	       else
    337  27000				   -LOWC       =	14
    338  27000				   -	       endif
    339  27000				   -			; ****** ELECTRONIC (0 to 11)
    340  27000				   -	       .byte	LOWC,20	; c0	 16.1Hz
    341  27000				   -	       .byte	LOWC,18	; c#0
    342  27000				   -	       .byte	LOWC,17	; d0
    343  27000				   -	       .byte	LOWC,16	; d#0
    344  27000				   -	       .byte	LOWC,15	; e0
    345  27000				   -	       .byte	LOWC,14	; f0  (very off)
    346  27000				   -	       .byte	LOWC,14	; f#0
    347  27000				   -	       .byte	LOWC,13	; g0
    348  27000				   -	       .byte	LOWC,12	; g#0
    349  27000				   -	       .byte	LOWC,11	; a0
    350  27000				   -	       .byte	LOWC,11	; a#0 (very off)
    351  27000				   -	       .byte	LOWC,10	; b0	 30.7Hz
    352  27000				   -
    353  27000				   -			; ****** SLIGHTLY BUZZY (12 to 23)
    354  27000				   -	       .byte	6,30	; c1	 32.7Hz
    355  27000				   -	       .byte	6,28	; c#1
    356  27000				   -	       .byte	6,27	; d1
    357  27000				   -	       .byte	6,25	; d#1
    358  27000				   -	       .byte	6,24	; e1
    359  27000				   -	       .byte	6,22	; f1
    360  27000				   -	       .byte	6,21	; f#1
    361  27000				   -	       .byte	6,20	; g1
    362  27000				   -	       .byte	6,18	; g#1
    363  27000				   -	       .byte	6,17	; a1
    364  27000				   -	       .byte	6,16	; a#1
    365  27000				   -	       .byte	6,15	; b1	 63.4Hz
    366  27000				   -
    367  27000				   -			; ****** BUZZY (24 to 39)
    368  27000				   -	       .byte	1,31	; c2	 65.5
    369  27000				   -	       .byte	1,30	; c#2	 67.6
    370  27000				   -	       .byte	1,27	; d2	 72.3
    371  27000				   -	       .byte	1,26	; d#2	 77.6
    372  27000				   -	       .byte	1,24	; e2
    373  27000				   -	       .byte	1,23	; f2
    374  27000				   -	       .byte	1,22	; f#2
    375  27000				   -	       .byte	1,20	; g2
    376  27000				   -	       .byte	1,19	; g#2
    377  27000				   -	       .byte	1,18	; a2
    378  27000				   -	       .byte	1,17	; a#2
    379  27000				   -	       .byte	1,16	; b2
    380  27000				   -	       .byte	1,15	; c3	126.8Hz
    381  27000				   -	       .byte	1,14	; c#3
    382  27000				   -	       .byte	1,13	; d3	149.7Hz
    383  27000				   -	       .byte	1,12	; d#3	161.2Hz (very off)
    384  27000				   -			; ****** PURE (40 to 71) - best key is A3 Major
    385  27000				   -	       .byte	12,31	; e3	163.8Hz
    386  27000				   -	       .byte	12,29	; f3
    387  27000				   -	       .byte	12,28	; f#3
    388  27000				   -	       .byte	12,26	; g3
    389  27000				   -	       .byte	12,24	; g#3
    390  27000				   -	       .byte	12,23	; a3  songs in key of A benefit from Perceptual Tuning
    391  27000				   -	       .byte	12,22	; a#3
    392  27000				   -	       .byte	12,20	; b3
    393  27000				   -	       .byte	12,19	; c4  (middle C)
    394  27000				   -	       .byte	12,18	; c#4
    395  27000				   -	       .byte	12,17	; d4
    396  27000				   -	       .byte	12,16	; d#4
    397  27000				   -	       .byte	12,15	; e4
    398  27000				   -	       .byte	12,14	; f4
    399  27000				   -	       .byte	12,13	; f#4
    400  27000				   -	       .byte	12,12	; g4  (very off)
    401  27000				   -	       .byte	12,12	; g#4
    402  27000				   -	       .byte	12,11	; a4
    403  27000				   -	       .byte	12,10	; a#4
    404  27000				   -	       .byte	4,31	; b4
    405  27000				   -	       .byte	4,29	; c5
    406  27000				   -	       .byte	4,28	; c#5
    407  27000				   -	       .byte	4,26	; d5
    408  27000				   -	       .byte	4,24	; d#5
    409  27000				   -	       .byte	4,23	; e5
    410  27000				   -	       .byte	4,22	; f5
    411  27000				   -	       .byte	4,20	; f#5
    412  27000				   -	       .byte	4,19	; g5
    413  27000				   -	       .byte	4,18	; g#5
    414  27000				   -	       .byte	4,17	; a5
    415  27000				   -	       .byte	4,16	; a#5
    416  27000				   -	       .byte	4,15	; b5
    417  27000				   -
    418  27000				   -			; ****** TUNED WIND (72 to 83)
    419  27000				   -	       .byte	8,30	; c
    420  27000				   -	       .byte	8,28	; c#
    421  27000				   -	       .byte	8,27	; d
    422  27000				   -	       .byte	8,25	; d#
    423  27000				   -	       .byte	8,24	; e
    424  27000				   -	       .byte	8,22	; f
    425  27000				   -	       .byte	8,21	; f#
    426  27000				   -	       .byte	8,20	; g
    427  27000				   -	       .byte	8,18	; g#
    428  27000				   -	       .byte	8,17	; a
    429  27000				   -	       .byte	8,16	; a#
    430  27000				   -	       .byte	8,15	; b
    431  27000				   -
    432  27000				   -	       include	"tiadrumkit.asm"
    433  27000				   -
    434  27000					       endif		;MUSICTRACKER
------- FILE c:\Users\Steve\Desktop\2018dev\7800\7800basic\projects\lessons\lesson1_gfx_modes\160A_16pixelzone_128_16.bas.asm
   2987  27000					       endif
   2988  27000					       ifnconst	included.hiscore.asm
------- FILE hiscore.asm LEVEL 2 PASS 3
      0  27000					       include	hiscore.asm
      1  27000							; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  27000
      3  27000				   -	       ifconst	HSSUPPORT
      4  27000				   -detectatarivoxeeprom
      5  27000				   -hiscoremodulestart
      6  27000				   -			; do a test to see if atarivox eeprom can be accessed, and save results
      7  27000				   -	       jsr	AVoxDetect
      8  27000				   -	       eor	#$ff	; invert for easy 7800basic if...then logic
      9  27000				   -	       sta	avoxdetected
     10  27000				   -	       lda	#$0
     11  27000				   -	       sta	SWACNT
     12  27000				   -	       lda	avoxdetected
     13  27000				   -	       rts
     14  27000				   -
     15  27000				   -detecthsc
     16  27000				   -			; check for the HSC ROM signature...
     17  27000				   -	       lda	XCTRL1s
     18  27000				   -	       ora	#%00001100
     19  27000				   -	       sta	XCTRL1s
     20  27000				   -	       sta	XCTRL1
     21  27000				   -	       lda	$3900
     22  27000				   -	       cmp	#$C6
     23  27000				   -	       bne	detecthscfail
     24  27000				   -	       lda	$3904
     25  27000				   -	       cmp	#$FE
     26  27000				   -	       bne	detecthscfail
     27  27000				   -			; check if it's initialized...
     28  27000				   -	       ldy	#0
     29  27000				   -	       lda	#$ff
     30  27000				   -checkhscinit
     31  27000				   -	       and	$1000,y
     32  27000				   -	       dey
     33  27000				   -	       bpl	checkhscinit
     34  27000				   -	       cmp	#$ff
     35  27000				   -	       bne	hscisalreadyinit
     36  27000				   -			; if we're here, we need to do a minimal HSC init...
     37  27000				   -	       ldy	#$28
     38  27000				   -hscinitloop1
     39  27000				   -	       lda	hscheader,y
     40  27000				   -	       sta	$1000,y
     41  27000				   -	       dey
     42  27000				   -	       bpl	hscinitloop1
     43  27000				   -	       ldy	#$89
     44  27000				   -	       lda	#$7F
     45  27000				   -hscinitloop2
     46  27000				   -	       sta	$10B3,y
     47  27000				   -	       dey
     48  27000				   -	       cpy	#$ff
     49  27000				   -	       bne	hscinitloop2
     50  27000				   -hscisalreadyinit
     51  27000				   -	       lda	#$ff
     52  27000				   -	       rts
     53  27000				   -hscheader
     54  27000				   -	       .byte	$00,$00,$68,$83,$AA,$55,$9C,$FF,$07,$12,$02,$1F,$00,$00,$00,$00
     55  27000				   -	       .byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     56  27000				   -	       .byte	$00,$00,$00,$00,$00,$00,$00,$00,$03
     57  27000				   -detecthscfail
     58  27000				   -	       lda	XCTRL1s
     59  27000				   -	       and	#%11110111
     60  27000				   -	       sta	XCTRL1s
     61  27000				   -	       lda	#0
     62  27000				   -	       rts
     63  27000					       endif		; HSSUPPORT
     64  27000
     65  27000				   -	       ifconst	HSSUPPORT
     66  27000				   -	       ifnconst	hiscorefont
     67  27000				   -	       echo	""
     68  27000				   -	       echo	"WARNING: High score support is enabled, but the hiscorefont.png was"
     69  27000				   -	       echo	" NOT imported with incgraphic. The high score display code"
     70  27000				   -	       echo	" has been omitted from this build."
     71  27000				   -	       echo	""
     72  27000				   -	       else
     73  27000				   -hscdrawscreen
     74  27000				   -
     75  27000				   -			; we use 20 lines on a 24 line display
     76  27000				   -			; HSSCOREY to dynamically centers based on
     77  27000				   -			;HSSCOREY = 0
     78  27000				   -HSSCOREY   =	((WZONECOUNT*WZONEHEIGHT/8)-22)/2
     79  27000				   -HSCURSORY  =	((HSSCOREY/(WZONEHEIGHT/8))*WZONEHEIGHT)
     80  27000				   -
     81  27000				   -	       ifconst	HSSCORESIZE
     82  27000				   -SCORESIZE  =	HSSCORESIZE
     83  27000				   -	       else
     84  27000				   -SCORESIZE  =	6
     85  27000				   -	       endif
     86  27000				   -
     87  27000				   -			;save shadow registers for later return...
     88  27000				   -	       lda	sCTRL
     89  27000				   -	       sta	ssCTRL
     90  27000				   -	       lda	sCHARBASE
     91  27000				   -	       sta	ssCHARBASE
     92  27000				   -	       lda	#$60
     93  27000				   -	       sta	charactermode
     94  27000				   -	       jsr	drawwait
     95  27000				   -	       jsr	blacken320colors
     96  27000				   -	       jsr	clearscreen
     97  27000				   -
     98  27000				   -			;set the character base to the HSC font
     99  27000				   -	       lda	#>hiscorefont
    100  27000				   -	       sta	CHARBASE
    101  27000				   -	       sta	sCHARBASE
    102  27000				   -	       lda	#%01000011	;Enable DMA, mode=320A
    103  27000				   -	       sta	CTRL
    104  27000				   -	       sta	sCTRL
    105  27000				   -
    106  27000				   -	       lda	#60
    107  27000				   -	       sta	hsjoydebounce
    108  27000				   -
    109  27000				   -	       lda	#0
    110  27000				   -	       sta	hscursorx
    111  27000				   -	       sta	framecounter
    112  27000				   -	       ifnconst	HSCOLORCHASESTART
    113  27000				   -	       lda	#$8D	; default is blue. why not?
    114  27000				   -	       else
    115  27000				   -	       lda	#HSCOLORCHASESTART
    116  27000				   -	       endif
    117  27000				   -	       sta	hscolorchaseindex
    118  27000				   -
    119  27000				   -	       lda	#$0F
    120  27000				   -	       sta	P0C2	; base text is white
    121  27000				   -
    122  27000				   -	       jsr	hschasecolors
    123  27000				   -			; ** plot all of the initials
    124  27000				   -	       lda	#<HSRAMInitials
    125  27000				   -	       sta	temp1	; charmaplo
    126  27000				   -	       lda	#>HSRAMInitials
    127  27000				   -	       sta	temp2	; charmaphi
    128  27000				   -	       lda	#32+29	; palette=0-29 | 32-(width=3)
    129  27000				   -	       sta	temp3	; palette/width
    130  27000				   -	       lda	#104
    131  27000				   -	       sta	temp4	; X
    132  27000				   -	       lda	#((HSSCOREY+6)/(WZONEHEIGHT/8))
    133  27000				   -	       sta	temp5	; Y
    134  27000				   -plothsinitialsloop
    135  27000				   -	       jsr	plotcharacters
    136  27000				   -	       clc
    137  27000				   -	       lda	temp3
    138  27000				   -	       adc	#32
    139  27000				   -	       sta	temp3
    140  27000				   -	       inc	temp5
    141  27000				   -	       if	WZONEHEIGHT = 8
    142  27000				   -	       inc	temp5
    143  27000				   -	       endif
    144  27000				   -	       clc
    145  27000				   -	       lda	#3
    146  27000				   -	       adc	temp1
    147  27000				   -	       sta	temp1
    148  27000				   -	       cmp	#(<(HSRAMInitials+15))
    149  27000				   -	       bcc	plothsinitialsloop
    150  27000				   -
    151  27000				   -	       ifconst	HSGAMENAMELEN
    152  27000				   -			;plot the game name...
    153  27000				   -	       lda	#<HSGAMENAMEtable
    154  27000				   -	       sta	temp1	; charmaplo
    155  27000				   -	       lda	#>HSGAMENAMEtable
    156  27000				   -	       sta	temp2	; charmaphi
    157  27000				   -	       lda	#(32-HSGAMENAMELEN)	; palette=0*29 | 32-(width=3)
    158  27000				   -	       sta	temp3	; palette/width
    159  27000				   -	       lda	#(80-(HSGAMENAMELEN*2))
    160  27000				   -	       sta	temp4	; X
    161  27000				   -	       lda	#((HSSCOREY+0)/(WZONEHEIGHT/8))
    162  27000				   -	       sta	temp5	; Y
    163  27000				   -	       jsr	plotcharacters
    164  27000				   -	       endif		; HSGAMENAMELEN
    165  27000				   -
    166  27000				   -			;plot "difficulty"...
    167  27000				   -	       ldy	gamedifficulty
    168  27000				   -	       ifnconst	HSNOLEVELNAMES
    169  27000				   -	       lda	highscoredifficultytextlo,y
    170  27000				   -	       sta	temp1
    171  27000				   -	       lda	highscoredifficultytexthi,y
    172  27000				   -	       sta	temp2
    173  27000				   -	       sec
    174  27000				   -	       lda	#32
    175  27000				   -	       sbc	highscoredifficultytextlen,y
    176  27000				   -	       sta	temp3	; palette/width
    177  27000				   -	       sec
    178  27000				   -	       lda	#40
    179  27000				   -	       sbc	highscoredifficultytextlen,y
    180  27000				   -	       asl
    181  27000				   -	       sta	temp4	; X
    182  27000				   -	       else
    183  27000				   -	       lda	#<HSHIGHSCOREStext
    184  27000				   -	       sta	temp1	; charmaplo
    185  27000				   -	       lda	#>HSHIGHSCOREStext
    186  27000				   -	       sta	temp2	; charmaphi
    187  27000				   -	       lda	#(32-11)	; palette=0*29 | 32-(width=3)
    188  27000				   -	       sta	temp3	; palette/width
    189  27000				   -	       lda	#(80-(11*2))
    190  27000				   -	       sta	temp4	; X
    191  27000				   -	       endif		; HSNOLEVELNAMES
    192  27000				   -
    193  27000				   -	       lda	#((HSSCOREY+2)/(WZONEHEIGHT/8))
    194  27000				   -	       sta	temp5	; Y
    195  27000				   -	       jsr	plotcharacters
    196  27000				   -	       ldy	hsdisplaymode	; 0=attact mode, 1=player eval, 2=player 1 eval, 3=player 2 player eval
    197  27000				   -	       bne	carronwithscoreevaluation
    198  27000				   -	       jmp	donoscoreevaluation
    199  27000				   -carronwithscoreevaluation
    200  27000				   -	       dey
    201  27000				   -	       lda	highscorelabeltextlo,y
    202  27000				   -	       sta	temp1
    203  27000				   -	       lda	highscorelabeltexthi,y
    204  27000				   -	       sta	temp2
    205  27000				   -	       sec
    206  27000				   -	       lda	#(32-15)	; palette=0*29 | 32-(width=3)
    207  27000				   -	       sta	temp3	; palette/width
    208  27000				   -	       lda	highscorelabeladjust1,y
    209  27000				   -	       sta	temp4	; X
    210  27000				   -	       lda	#((HSSCOREY+18)/(WZONEHEIGHT/8))
    211  27000				   -	       sta	temp5	; Y
    212  27000				   -	       jsr	plotcharacters
    213  27000				   -
    214  27000				   -	       ldy	hsdisplaymode	; 0=attact mode, 1=player eval, 2=player 1 eval, 3=player 2 player eval
    215  27000				   -	       dey
    216  27000				   -			;plot the current player score...
    217  27000				   -	       lda	#(32-SCORESIZE)	; palette=0*32
    218  27000				   -	       sta	temp3	; palette/width
    219  27000				   -	       lda	highscorelabeladjust2,y
    220  27000				   -	       sta	temp4	; X
    221  27000				   -	       lda	#((HSSCOREY+18)/(WZONEHEIGHT/8))
    222  27000				   -	       sta	temp5	; Y
    223  27000				   -
    224  27000				   -	       lda	scorevarlo,y
    225  27000				   -	       sta	temp7	; score variable lo
    226  27000				   -	       lda	scorevarhi,y
    227  27000				   -	       sta	temp8	; score variable hi
    228  27000				   -
    229  27000				   -	       lda	#(hiscorefont_mode | %01100000)	; charactermode
    230  27000				   -	       sta	temp9
    231  27000				   -
    232  27000				   -	       lda	#<(hiscorefont+33)	; +33 to get to '0' character
    233  27000				   -	       sta	temp1	; charmaplo
    234  27000				   -	       lda	#>(hiscorefont+33)
    235  27000				   -	       sta	temp2	; charmaphi
    236  27000				   -	       lda	#SCORESIZE
    237  27000				   -	       sta	temp6
    238  27000				   -	       ifnconst	DOUBLEWIDE
    239  27000				   -	       jsr	plotvalue
    240  27000				   -	       else
    241  27000				   -	       jsr	plotvaluedw
    242  27000				   -	       endif
    243  27000				   -
    244  27000				   -USED_PLOTVALUE =	1	; ensure that plotvalue gets compiled in
    245  27000				   -
    246  27000				   -	       ifconst	HSGAMERANKS
    247  27000				   -
    248  27000				   -	       ldx	#$ff	; start at 0 after the inx...
    249  27000				   -comparescore2rankloop
    250  27000				   -	       inx
    251  27000				   -	       ldy	#0
    252  27000				   -	       lda	rankvalue_0,x
    253  27000				   -	       cmp	(temp7),y
    254  27000				   -	       bcc	score2rankloopdone
    255  27000				   -	       bne	comparescore2rankloop
    256  27000				   -	       iny
    257  27000				   -	       lda	rankvalue_1,x
    258  27000				   -	       cmp	(temp7),y
    259  27000				   -	       bcc	score2rankloopdone
    260  27000				   -	       bne	comparescore2rankloop
    261  27000				   -	       iny
    262  27000				   -	       lda	(temp7),y
    263  27000				   -	       cmp	rankvalue_2,x
    264  27000				   -	       bcs	score2rankloopdone
    265  27000				   -	       jmp	comparescore2rankloop
    266  27000				   -score2rankloopdone
    267  27000				   -	       stx	hsnewscorerank
    268  27000				   -
    269  27000				   -	       lda	ranklabello,x
    270  27000				   -	       sta	temp1
    271  27000				   -	       lda	ranklabelhi,x
    272  27000				   -	       sta	temp2
    273  27000				   -	       sec
    274  27000				   -	       lda	#32	; palette=0*29 | 32-(width=3)
    275  27000				   -	       sbc	ranklabellengths,x
    276  27000				   -	       sta	temp3	; palette/width
    277  27000				   -	       sec
    278  27000				   -	       lda	#(40+6)
    279  27000				   -	       sbc	ranklabellengths,x
    280  27000				   -	       asl
    281  27000				   -	       sta	temp4	; X
    282  27000				   -	       lda	#((HSSCOREY+20)/(WZONEHEIGHT/8))
    283  27000				   -	       sta	temp5	; Y
    284  27000				   -	       jsr	plotcharacters
    285  27000				   -
    286  27000				   -	       ldx	hsnewscorerank
    287  27000				   -
    288  27000				   -	       lda	#<highscoreranklabel
    289  27000				   -	       sta	temp1
    290  27000				   -	       lda	#>highscoreranklabel
    291  27000				   -	       sta	temp2
    292  27000				   -
    293  27000				   -	       lda	#(32-5)	; palette=0*29 | 32-(width=3)
    294  27000				   -	       sta	temp3	; palette/width
    295  27000				   -	       lda	#(40-6)
    296  27000				   -	       sec
    297  27000				   -	       sbc	ranklabellengths,x
    298  27000				   -	       asl
    299  27000				   -	       sta	temp4	; X
    300  27000				   -	       lda	#((HSSCOREY+20)/(WZONEHEIGHT/8))
    301  27000				   -	       sta	temp5	; Y
    302  27000				   -	       jsr	plotcharacters
    303  27000				   -	       endif
    304  27000				   -
    305  27000				   -
    306  27000				   -			; ** which line did this player beat?
    307  27000				   -	       lda	#$ff
    308  27000				   -	       sta	hsnewscoreline
    309  27000				   -	       ldx	#$fd
    310  27000				   -comparescoreadd2x
    311  27000				   -	       inx
    312  27000				   -comparescoreadd1x
    313  27000				   -	       inx
    314  27000				   -comparescore2lineloop
    315  27000				   -	       inc	hsnewscoreline
    316  27000				   -	       inx		; initialrun, x=0
    317  27000				   -	       cpx	#15
    318  27000				   -	       beq	nohighscoreforyou
    319  27000				   -	       ldy	#0
    320  27000				   -	       lda	HSRAMScores,x
    321  27000				   -	       cmp	(temp7),y	; first score digit
    322  27000				   -	       bcc	score2lineloopdonedel1x
    323  27000				   -	       bne	comparescoreadd2x
    324  27000				   -	       iny
    325  27000				   -	       inx
    326  27000				   -	       lda	HSRAMScores,x
    327  27000				   -	       cmp	(temp7),y
    328  27000				   -	       bcc	score2lineloopdonedel2x
    329  27000				   -	       bne	comparescoreadd1x
    330  27000				   -	       iny
    331  27000				   -	       inx
    332  27000				   -	       lda	(temp7),y
    333  27000				   -	       cmp	HSRAMScores,x
    334  27000				   -	       bcs	score2lineloopdonedel3x
    335  27000				   -	       jmp	comparescore2lineloop
    336  27000				   -nohighscoreforyou
    337  27000				   -	       lda	#$ff
    338  27000				   -	       sta	hsnewscoreline
    339  27000				   -	       sta	countdownseconds
    340  27000				   -	       jmp	donoscoreevaluation
    341  27000				   -score2lineloopdonedel3x
    342  27000				   -	       dex
    343  27000				   -score2lineloopdonedel2x
    344  27000				   -	       dex
    345  27000				   -score2lineloopdonedel1x
    346  27000				   -	       dex
    347  27000				   -
    348  27000				   -			; 0 1 2
    349  27000				   -			; 3 4 5
    350  27000				   -			; 6 7 8
    351  27000				   -			; 9 0 1
    352  27000				   -			; 2 3 4
    353  27000				   -
    354  27000				   -	       stx	temp9
    355  27000				   -	       cpx	#11
    356  27000				   -	       beq	postsortscoresuploop
    357  27000				   -	       ldx	#11
    358  27000				   -sortscoresuploop
    359  27000				   -	       lda	HSRAMScores,x
    360  27000				   -	       sta	HSRAMScores+3,x
    361  27000				   -	       lda	HSRAMInitials,x
    362  27000				   -	       sta	HSRAMInitials+3,x
    363  27000				   -	       dex
    364  27000				   -	       cpx	temp9
    365  27000				   -	       bne	sortscoresuploop
    366  27000				   -postsortscoresuploop
    367  27000				   -
    368  27000				   -			;stick the score and cleared initials in the slot...
    369  27000				   -	       inx
    370  27000				   -	       ldy	#0
    371  27000				   -	       sty	hsinitialhold
    372  27000				   -	       lda	(temp7),y
    373  27000				   -	       sta	HSRAMScores,x
    374  27000				   -	       iny
    375  27000				   -	       lda	(temp7),y
    376  27000				   -	       sta	HSRAMScores+1,x
    377  27000				   -	       iny
    378  27000				   -	       lda	(temp7),y
    379  27000				   -	       sta	HSRAMScores+2,x
    380  27000				   -	       lda	#0
    381  27000				   -	       sta	HSRAMInitials,x
    382  27000				   -	       lda	#29
    383  27000				   -	       sta	HSRAMInitials+1,x
    384  27000				   -	       sta	HSRAMInitials+2,x
    385  27000				   -
    386  27000				   -	       stx	hsinitialpos
    387  27000				   -
    388  27000				   -	       ifconst	vox_highscore
    389  27000				   -	       lda	<#vox_highscore
    390  27000				   -	       sta	speech_addr
    391  27000				   -	       lda	>#vox_highscore
    392  27000				   -	       sta	speech_addr+1
    393  27000				   -	       endif
    394  27000				   -	       ifconst	sfx_highscore
    395  27000				   -	       lda	<#sfx_highscore
    396  27000				   -	       sta	temp1
    397  27000				   -	       lda	>#sfx_highscore
    398  27000				   -	       sta	temp2
    399  27000				   -	       lda	#0
    400  27000				   -	       sta	temp3
    401  27000				   -	       jsr	schedulesfx
    402  27000				   -	       endif
    403  27000				   -	       ifconst	songdatastart_song_highscore
    404  27000				   -	       lda	#<songchanneltable_song_highscore
    405  27000				   -	       sta	songpointerlo
    406  27000				   -	       lda	#>songchanneltable_song_highscore
    407  27000				   -	       sta	songpointerhi
    408  27000				   -	       lda	#73
    409  27000				   -	       sta	songtempo
    410  27000				   -	       jsr	setsongchannels
    411  27000				   -	       endif
    412  27000				   -
    413  27000				   -
    414  27000				   -donoscoreevaluation
    415  27000				   -
    416  27000				   -	       lda	#(32+(32-SCORESIZE))	; palette=0*32 | 32-(width=6)
    417  27000				   -	       sta	temp3	; palette/width
    418  27000				   -	       lda	#(72+(4*(6-SCORESIZE)))
    419  27000				   -	       sta	temp4	; X
    420  27000				   -	       lda	#((HSSCOREY+6)/(WZONEHEIGHT/8))
    421  27000				   -	       sta	temp5	; Y
    422  27000				   -	       lda	#<HSRAMScores
    423  27000				   -	       sta	temp7	; score variable lo
    424  27000				   -	       lda	#>HSRAMScores
    425  27000				   -	       sta	temp8	; score variable hi
    426  27000				   -	       lda	#(hiscorefont_mode | %01100000)	; charactermode
    427  27000				   -	       sta	temp9
    428  27000				   -plothsscoresloop
    429  27000				   -	       lda	#<(hiscorefont+33)	; +33 to get to '0' character
    430  27000				   -	       sta	temp1	; charmaplo
    431  27000				   -	       lda	#>(hiscorefont+33)
    432  27000				   -	       sta	temp2	; charmaphi
    433  27000				   -	       lda	#6
    434  27000				   -	       sta	temp6
    435  27000				   -	       ifnconst	DOUBLEWIDE
    436  27000				   -	       jsr	plotvalue
    437  27000				   -	       else
    438  27000				   -	       jsr	plotvaluedw
    439  27000				   -	       endif
    440  27000				   -	       clc
    441  27000				   -	       lda	temp3
    442  27000				   -	       adc	#32
    443  27000				   -	       sta	temp3
    444  27000				   -	       inc	temp5
    445  27000				   -	       if	WZONEHEIGHT = 8
    446  27000				   -	       inc	temp5
    447  27000				   -	       endif
    448  27000				   -	       clc
    449  27000				   -	       lda	#3
    450  27000				   -	       adc	temp7
    451  27000				   -	       sta	temp7
    452  27000				   -	       cmp	#(<(HSRAMScores+15))
    453  27000				   -	       bcc	plothsscoresloop
    454  27000				   -plothsindex
    455  27000				   -	       lda	#32+31	; palette=0*32 | 32-(width=1)
    456  27000				   -	       sta	temp3	; palette/width
    457  27000				   -	       lda	#44
    458  27000				   -	       sta	temp4	; X
    459  27000				   -	       lda	#((HSSCOREY+6)/(WZONEHEIGHT/8))
    460  27000				   -	       sta	temp5	; Y
    461  27000				   -	       lda	#<hsgameslotnumbers
    462  27000				   -	       sta	temp7	; score variable lo
    463  27000				   -	       lda	#>hsgameslotnumbers
    464  27000				   -	       sta	temp8	; score variable hi
    465  27000				   -	       lda	#(hiscorefont_mode | %01100000)	; charactermode
    466  27000				   -	       sta	temp9
    467  27000				   -plothsindexloop
    468  27000				   -	       lda	#<(hiscorefont+33)
    469  27000				   -	       sta	temp1	; charmaplo
    470  27000				   -	       lda	#>(hiscorefont+33)
    471  27000				   -	       sta	temp2	; charmaphi
    472  27000				   -	       lda	#1
    473  27000				   -	       sta	temp6	; number of characters
    474  27000				   -	       ifnconst	DOUBLEWIDE
    475  27000				   -	       jsr	plotvalue
    476  27000				   -	       else
    477  27000				   -	       jsr	plotvaluedw
    478  27000				   -	       endif
    479  27000				   -	       clc
    480  27000				   -	       lda	temp3
    481  27000				   -	       adc	#32
    482  27000				   -	       sta	temp3
    483  27000				   -	       inc	temp5
    484  27000				   -	       if	WZONEHEIGHT = 8
    485  27000				   -	       inc	temp5
    486  27000				   -	       endif
    487  27000				   -	       inc	temp7
    488  27000				   -	       lda	temp7
    489  27000				   -	       cmp	#(<(hsgameslotnumbers+5))
    490  27000				   -	       bcc	plothsindexloop
    491  27000				   -
    492  27000				   -	       jsr	savescreen
    493  27000				   -	       ifnconst	HSSECONDS
    494  27000				   -	       lda	#6
    495  27000				   -	       else
    496  27000				   -	       lda	#HSSECONDS
    497  27000				   -	       endif
    498  27000				   -
    499  27000				   -	       sta	countdownseconds
    500  27000				   -
    501  27000				   -keepdisplayinghs
    502  27000				   -	       jsr	restorescreen
    503  27000				   -
    504  27000				   -	       jsr	setuphsinpt1
    505  27000				   -
    506  27000				   -	       lda	hsnewscoreline
    507  27000				   -	       bpl	carryonkeepdisplayinghs
    508  27000				   -	       jmp	skipenterscorecontrol
    509  27000				   -carryonkeepdisplayinghs
    510  27000				   -
    511  27000				   -
    512  27000				   -	       ifnconst	HSSECONDS
    513  27000				   -	       lda	#6
    514  27000				   -	       else
    515  27000				   -	       lda	#HSSECONDS
    516  27000				   -	       endif
    517  27000				   -
    518  27000				   -	       sta	countdownseconds
    519  27000				   -
    520  27000				   -			;plot the "cursor" initial sprite...
    521  27000				   -	       lda	hsinitialhold
    522  27000				   -
    523  27000				   -	       sta	temp1
    524  27000				   -	       lda	#>(hiscorefont+32)
    525  27000				   -	       sta	temp2
    526  27000				   -	       lda	#31	; palette=0*32 | 32-(width=1)
    527  27000				   -	       sta	temp3	; palette/width
    528  27000				   -	       lda	hscursorx
    529  27000				   -	       asl
    530  27000				   -	       asl
    531  27000				   -	       clc
    532  27000				   -	       adc	#104
    533  27000				   -	       sta	temp4	; X
    534  27000				   -	       lda	hsnewscoreline
    535  27000				   -	       asl
    536  27000				   -	       asl
    537  27000				   -	       asl
    538  27000				   -	       asl
    539  27000				   -	       adc	#((3*16)+HSCURSORY)
    540  27000				   -	       sta	temp5	; Y
    541  27000				   -	       lda	#%01000000
    542  27000				   -	       sta	temp6
    543  27000				   -	       jsr	plotsprite
    544  27000				   -
    545  27000				   -	       ldx	hscursorx
    546  27000				   -	       ldy	hsdisplaymode
    547  27000				   -	       lda	SWCHA
    548  27000				   -	       cpy	#3
    549  27000				   -	       bne	hsskipadjustjoystick1
    550  27000				   -	       asl
    551  27000				   -	       asl
    552  27000				   -	       asl
    553  27000				   -	       asl
    554  27000				   -hsskipadjustjoystick1
    555  27000				   -	       sta	hsswcha
    556  27000				   -	       and	#%00110000
    557  27000				   -	       cmp	#%00110000
    558  27000				   -	       beq	hsjoystickskipped
    559  27000				   -	       lda	hsjoydebounce
    560  27000				   -	       beq	hsdontdebounce
    561  27000				   -	       jmp	hspostjoystick
    562  27000				   -hsdontdebounce
    563  27000				   -	       ldx	#1	; small tick sound
    564  27000				   -	       jsr	playhssfx
    565  27000				   -	       lda	hsswcha
    566  27000				   -	       and	#%00110000
    567  27000				   -	       ldx	hscursorx
    568  27000				   -	       cmp	#%00100000	; check down
    569  27000				   -	       bne	hsjoycheckup
    570  27000				   -	       ldy	hsinitialhold
    571  27000				   -	       cpx	#0
    572  27000				   -	       bne	skipavoid31_1
    573  27000				   -	       cpy	#0	; if we're about to change to the <- char (#31) then double-decrement to skip over it
    574  27000				   -	       bne	skipavoid31_1
    575  27000				   -	       dey
    576  27000				   -skipavoid31_1
    577  27000				   -	       dey
    578  27000				   -	       jmp	hssetdebounce
    579  27000				   -hsjoycheckup
    580  27000				   -	       cmp	#%00010000	; check up
    581  27000				   -	       bne	hsjoystickskipped
    582  27000				   -	       ldy	hsinitialhold
    583  27000				   -	       cpx	#0
    584  27000				   -	       bne	skipavoid31_2
    585  27000				   -	       cpy	#30	; if we're about to change to the <- char (#31) then double-increment to skip over it
    586  27000				   -	       bne	skipavoid31_2
    587  27000				   -	       iny
    588  27000				   -skipavoid31_2
    589  27000				   -	       iny
    590  27000				   -hssetdebounce
    591  27000				   -	       tya
    592  27000				   -	       and	#31
    593  27000				   -	       sta	hsinitialhold
    594  27000				   -	       lda	#15
    595  27000				   -	       sta	hsjoydebounce
    596  27000				   -	       bne	hspostjoystick
    597  27000				   -hsjoystickskipped
    598  27000				   -			; check the fire button only when the stick isn't engaged
    599  27000				   -	       lda	hsinpt1
    600  27000				   -	       bpl	hsbuttonskipped
    601  27000				   -	       lda	hsjoydebounce
    602  27000				   -	       beq	hsfiredontdebounce
    603  27000				   -	       bne	hspostjoystick
    604  27000				   -hsfiredontdebounce
    605  27000				   -	       lda	hsinitialhold
    606  27000				   -	       cmp	#31
    607  27000				   -	       beq	hsmovecursorback
    608  27000				   -	       inc	hscursorx
    609  27000				   -	       inc	hsinitialpos
    610  27000				   -	       lda	hscursorx
    611  27000				   -	       cmp	#3
    612  27000				   -	       bne	skiphsentryisdone
    613  27000				   -	       lda	#0
    614  27000				   -	       sta	framecounter
    615  27000				   -	       lda	#$ff
    616  27000				   -	       sta	hsnewscoreline
    617  27000				   -	       dec	hsinitialpos
    618  27000				   -	       bne	skiphsentryisdone
    619  27000				   -hsmovecursorback
    620  27000				   -	       lda	hscursorx
    621  27000				   -	       beq	skiphsmovecursorback
    622  27000				   -	       lda	#29
    623  27000				   -	       ldx	hsinitialpos
    624  27000				   -	       sta	HSRAMInitials,x
    625  27000				   -	       dec	hsinitialpos
    626  27000				   -	       dec	hscursorx
    627  27000				   -	       dex
    628  27000				   -	       lda	HSRAMInitials,x
    629  27000				   -	       sta	hsinitialhold
    630  27000				   -skiphsmovecursorback
    631  27000				   -skiphsentryisdone
    632  27000				   -	       ldx	#0
    633  27000				   -	       jsr	playhssfx
    634  27000				   -	       lda	#20
    635  27000				   -	       sta	hsjoydebounce
    636  27000				   -	       bne	hspostjoystick
    637  27000				   -
    638  27000				   -hsbuttonskipped
    639  27000				   -	       lda	#0
    640  27000				   -	       sta	hsjoydebounce
    641  27000				   -hspostjoystick
    642  27000				   -
    643  27000				   -	       ldx	hsinitialpos
    644  27000				   -	       lda	hsinitialhold
    645  27000				   -	       sta	HSRAMInitials,x
    646  27000				   -
    647  27000				   -	       jmp	skiphschasecolors
    648  27000				   -
    649  27000				   -skipenterscorecontrol
    650  27000				   -	       jsr	hschasecolors
    651  27000				   -	       jsr	setuphsinpt1
    652  27000				   -	       lda	hsjoydebounce
    653  27000				   -	       bne	skiphschasecolors
    654  27000				   -	       lda	hsinpt1
    655  27000				   -	       bmi	returnfromhs
    656  27000				   -skiphschasecolors
    657  27000				   -
    658  27000				   -	       jsr	drawscreen
    659  27000				   -
    660  27000				   -	       lda	countdownseconds
    661  27000				   -	       beq	returnfromhs
    662  27000				   -	       jmp	keepdisplayinghs
    663  27000				   -returnfromhs
    664  27000				   -
    665  27000				   -	       ifconst	songdatastart_song_highscore
    666  27000				   -	       lda	hsdisplaymode
    667  27000				   -	       beq	skipclearHSCsong
    668  27000				   -	       lda	#0
    669  27000				   -	       sta	songtempo
    670  27000				   -skipclearHSCsong
    671  27000				   -	       endif
    672  27000				   -	       jsr	drawwait
    673  27000				   -	       jsr	clearscreen
    674  27000				   -	       lda	#0
    675  27000				   -	       ldy	#7
    676  27000				   -	       jsr	blacken320colors
    677  27000				   -	       lda	ssCTRL
    678  27000				   -	       sta	sCTRL
    679  27000				   -	       lda	ssCHARBASE
    680  27000				   -	       sta	sCHARBASE
    681  27000				   -	       rts
    682  27000				   -
    683  27000				   -setuphsinpt1
    684  27000				   -	       lda	#$ff
    685  27000				   -	       sta	hsinpt1
    686  27000				   -	       lda	hsjoydebounce
    687  27000				   -	       beq	skipdebounceadjust
    688  27000				   -	       dec	hsjoydebounce
    689  27000				   -	       bne	skipstorefirebuttonstatus
    690  27000				   -skipdebounceadjust
    691  27000				   -	       ldx	hsdisplaymode
    692  27000				   -	       cpx	#3
    693  27000				   -	       bne	hsskipadjustjoyfire1
    694  27000				   -	       lda	sINPT3
    695  27000				   -	       jmp	hsskipadjustjoyfire1done
    696  27000				   -hsskipadjustjoyfire1
    697  27000				   -	       lda	sINPT1
    698  27000				   -hsskipadjustjoyfire1done
    699  27000				   -	       sta	hsinpt1
    700  27000				   -skipstorefirebuttonstatus
    701  27000				   -	       rts
    702  27000				   -
    703  27000				   -blacken320colors
    704  27000				   -	       ldy	#7
    705  27000				   -blacken320colorsloop
    706  27000				   -	       sta	P0C2,y
    707  27000				   -	       dey
    708  27000				   -	       bpl	blacken320colorsloop
    709  27000				   -	       rts
    710  27000				   -
    711  27000				   -hschasecolors
    712  27000				   -	       lda	framecounter
    713  27000				   -	       and	#3
    714  27000				   -	       bne	hschasecolorsreturn
    715  27000				   -	       inc	hscolorchaseindex
    716  27000				   -	       lda	hscolorchaseindex
    717  27000				   -
    718  27000				   -	       sta	P5C2
    719  27000				   -	       sbc	#$02
    720  27000				   -	       sta	P4C2
    721  27000				   -	       sbc	#$02
    722  27000				   -	       sta	P3C2
    723  27000				   -	       sbc	#$02
    724  27000				   -	       sta	P2C2
    725  27000				   -	       sbc	#$02
    726  27000				   -	       sta	P1C2
    727  27000				   -hschasecolorsreturn
    728  27000				   -	       rts
    729  27000				   -
    730  27000				   -playhssfx
    731  27000				   -	       lda	hssfx_lo,x
    732  27000				   -	       sta	temp1
    733  27000				   -	       lda	hssfx_hi,x
    734  27000				   -	       sta	temp2
    735  27000				   -	       lda	#0
    736  27000				   -	       sta	temp3
    737  27000				   -	       jmp	schedulesfx
    738  27000				   -
    739  27000				   -hssfx_lo
    740  27000				   -	       .byte	<sfx_hsletterpositionchange, <sfx_hslettertick
    741  27000				   -hssfx_hi
    742  27000				   -	       .byte	>sfx_hsletterpositionchange, >sfx_hslettertick
    743  27000				   -
    744  27000				   -sfx_hsletterpositionchange
    745  27000				   -	       .byte	$10,$18,$00
    746  27000				   -	       .byte	$02,$06,$08
    747  27000				   -	       .byte	$02,$06,$04
    748  27000				   -	       .byte	$00,$00,$00
    749  27000				   -sfx_hslettertick
    750  27000				   -	       .byte	$10,$18,$00
    751  27000				   -	       .byte	$00,$00,$0a
    752  27000				   -	       .byte	$00,$00,$00
    753  27000				   -
    754  27000				   -highscorelabeladjust1
    755  27000				   -	       .byte	(80-(14*2)-(SCORESIZE*2)),(80-(16*2)-(SCORESIZE*2)),(80-(16*2)-(SCORESIZE*2))
    756  27000				   -highscorelabeladjust2
    757  27000				   -	       .byte	(80+(14*2)-(SCORESIZE*2)),(80+(16*2)-(SCORESIZE*2)),(80+(16*2)-(SCORESIZE*2))
    758  27000				   -
    759  27000				   -scorevarlo
    760  27000				   -	       .byte	<(score0+((6-SCORESIZE)/2)),<(score0+((6-SCORESIZE)/2)),<(score1+((6-SCORESIZE)/2))
    761  27000				   -scorevarhi
    762  27000				   -	       .byte	>(score0+((6-SCORESIZE)/2)),>(score0+((6-SCORESIZE)/2)),>(score1+((6-SCORESIZE)/2))
    763  27000				   -
    764  27000				   -	       ifnconst	HSNOLEVELNAMES
    765  27000				   -highscoredifficultytextlo
    766  27000				   -	       .byte	<easylevelname, <mediumlevelname, <hardlevelname, <expertlevelname
    767  27000				   -highscoredifficultytexthi
    768  27000				   -	       .byte	>easylevelname, >mediumlevelname, >hardlevelname, >expertlevelname
    769  27000				   -	       ifnconst	HSCUSTOMLEVELNAMES
    770  27000				   -highscoredifficultytextlen
    771  27000				   -	       .byte	22, 30, 26, 24
    772  27000				   -
    773  27000				   -easylevelname
    774  27000				   -	       .byte	$04,$00,$12,$18,$1d,$0b,$04,$15,$04,$0b,$1d,$07,$08,$06,$07,$1d,$12,$02,$0e,$11,$04,$12
    775  27000				   -mediumlevelname
    776  27000				   -	       .byte	$08,$0d,$13,$04,$11,$0c,$04,$03,$08,$00,$13,$04,$1d,$0b,$04,$15,$04,$0b,$1d,$07,$08,$06,$07,$1d,$12,$02,$0e,$11,$04,$12
    777  27000				   -hardlevelname
    778  27000				   -	       .byte	$00,$03,$15,$00,$0d,$02,$04,$03,$1d,$0b,$04,$15,$04,$0b,$1d,$07,$08,$06,$07,$1d,$12,$02,$0e,$11,$04,$12
    779  27000				   -expertlevelname
    780  27000				   -	       .byte	$04,$17,$0f,$04,$11,$13,$1d,$0b,$04,$15,$04,$0b,$1d,$07,$08,$06,$07,$1d,$12,$02,$0e,$11,$04,$12
    781  27000				   -	       else
    782  27000				   -	       include	"7800hsgamediffnames.asm"
    783  27000				   -	       endif		; HSCUSTOMLEVELNAMES
    784  27000				   -	       else
    785  27000				   -HSHIGHSCOREStext
    786  27000				   -	       .byte	$07,$08,$06,$07,$1d,$12,$02,$0e,$11,$04,$12
    787  27000				   -	       endif		; HSNOLEVELNAMES
    788  27000				   -
    789  27000				   -highscorelabeltextlo
    790  27000				   -	       .byte	<player0label, <player1label, <player2label
    791  27000				   -highscorelabeltexthi
    792  27000				   -	       .byte	>player0label, >player1label, >player2label
    793  27000				   -
    794  27000				   -player0label
    795  27000				   -	       .byte	$0f,$0b,$00,$18,$04,$11,$1d,$12,$02,$0e,$11,$04,$1a,$1d,$1d
    796  27000				   -
    797  27000				   -player1label
    798  27000				   -	       .byte	$0f,$0b,$00,$18,$04,$11,$1d,$22,$1d,$12,$02,$0e,$11,$04,$1a
    799  27000				   -
    800  27000				   -player2label
    801  27000				   -	       .byte	$0f,$0b,$00,$18,$04,$11,$1d,$23,$1d,$12,$02,$0e,$11,$04,$1a
    802  27000				   -
    803  27000				   -
    804  27000				   -	       ifconst	HSGAMENAMELEN
    805  27000				   -HSGAMENAMEtable
    806  27000				   -	       include	"7800hsgamename.asm"
    807  27000				   -	       endif
    808  27000				   -	       ifconst	HSGAMERANKS
    809  27000				   -	       include	"7800hsgameranks.asm"
    810  27000				   -highscoreranklabel
    811  27000				   -	       .byte	$11,$00,$0d,$0a,$1a
    812  27000				   -	       endif
    813  27000				   -
    814  27000				   -			;ensure our table doesn't wrap a page...
    815  27000				   -	       if	((<*)>251)
    816  27000				   -	       align	256
    817  27000				   -	       endif
    818  27000				   -hsgameslotnumbers
    819  27000				   -	       .byte	33,34,35,36,37
    820  27000				   -	       endif
    821  27000				   -
    822  27000				   -loaddifficultytable
    823  27000				   -	       lda	gamedifficulty
    824  27000				   -	       and	#$03	; ensure the user hasn't selected an invalid difficulty
    825  27000				   -	       sta	gamedifficulty
    826  27000				   -	       cmp	hsdifficulty	; check game difficulty is the same as RAM table
    827  27000				   -	       bne	loaddifficultytablecontinue1
    828  27000				   -	       rts		; this high score difficulty table is already loaded
    829  27000				   -loaddifficultytablecontinue1
    830  27000				   -	       lda	gamedifficulty
    831  27000				   -	       sta	hsdifficulty
    832  27000				   -			;we need to check the device for the table
    833  27000				   -	       lda	hsdevice
    834  27000				   -	       bne	loaddifficultytablecontinue2
    835  27000				   -			; there's no save device. clear out this table.
    836  27000				   -	       jmp	cleardifficultytablemem
    837  27000				   -loaddifficultytablecontinue2
    838  27000				   -	       lda	hsdevice
    839  27000				   -	       and	#1
    840  27000				   -	       beq	memdeviceisntHSC
    841  27000				   -	       jmp	loaddifficultytableHSC
    842  27000				   -memdeviceisntHSC
    843  27000				   -	       jmp	loaddifficultytableAVOX
    844  27000				   -
    845  27000				   -savedifficultytable
    846  27000				   -			;*** we need to check wich device we should use...
    847  27000				   -	       lda	hsdevice
    848  27000				   -	       bne	savedifficultytablerealdevice
    849  27000				   -	       rts		; its a ram device
    850  27000				   -savedifficultytablerealdevice
    851  27000				   -	       and	#1
    852  27000				   -	       beq	savememdeviceisntHSC
    853  27000				   -	       jmp	savedifficultytableHSC
    854  27000				   -savememdeviceisntHSC
    855  27000				   -	       jmp	savedifficultytableAVOX
    856  27000				   -
    857  27000				   -savedifficultytableAVOX
    858  27000				   -			; the load call already setup the memory structure and atarivox memory location
    859  27000				   -	       jsr	savealoadedHSCtablecontinue
    860  27000				   -savedifficultytableAVOXskipconvert
    861  27000				   -	       lda	#HSIDHI
    862  27000				   -	       sta	eeprombuffer
    863  27000				   -	       lda	#HSIDLO
    864  27000				   -	       sta	eeprombuffer+1
    865  27000				   -	       lda	hsdifficulty
    866  27000				   -	       sta	eeprombuffer+2
    867  27000				   -	       lda	#32
    868  27000				   -	       jsr	AVoxWriteBytes
    869  27000				   -	       rts
    870  27000				   -
    871  27000				   -savedifficultytableHSC
    872  27000				   -			;we always load a table before reaching here, so the
    873  27000				   -			;memory structures from the load should be intact...
    874  27000				   -	       ldy	hsgameslot
    875  27000				   -	       bpl	savealoadedHSCtable
    876  27000				   -	       rts
    877  27000				   -savealoadedHSCtable
    878  27000				   -	       lda	HSCGameDifficulty,y
    879  27000				   -	       cmp	#$7F
    880  27000				   -	       bne	savealoadedHSCtablecontinue
    881  27000				   -	       jsr	initializeHSCtableentry
    882  27000				   -savealoadedHSCtablecontinue
    883  27000				   -			;convert our RAM table to HSC format and write it out...
    884  27000				   -	       ldy	#0
    885  27000				   -	       ldx	#0
    886  27000				   -savedifficultytableScores
    887  27000				   -
    888  27000				   -	       lda	HSRAMInitials,x
    889  27000				   -	       sta	temp3
    890  27000				   -	       lda	HSRAMInitials+1,x
    891  27000				   -	       sta	temp4
    892  27000				   -	       lda	HSRAMInitials+2,x
    893  27000				   -	       sta	temp5
    894  27000				   -	       jsr	encodeHSCInitials	; takes 3 byte initials from temp3,4,5 and stores 2 byte initials in temp1,2
    895  27000				   -
    896  27000				   -	       lda	temp1
    897  27000				   -	       sta	(HSGameTableLo),y
    898  27000				   -	       iny
    899  27000				   -	       lda	temp2
    900  27000				   -	       sta	(HSGameTableLo),y
    901  27000				   -	       iny
    902  27000				   -
    903  27000				   -	       lda	HSRAMScores,x
    904  27000				   -	       sta	(HSGameTableLo),y
    905  27000				   -	       iny
    906  27000				   -	       lda	HSRAMScores+1,x
    907  27000				   -	       sta	(HSGameTableLo),y
    908  27000				   -	       iny
    909  27000				   -	       lda	HSRAMScores+2,x
    910  27000				   -	       sta	(HSGameTableLo),y
    911  27000				   -	       iny
    912  27000				   -	       inx
    913  27000				   -	       inx
    914  27000				   -	       inx		; +3
    915  27000				   -	       cpx	#15
    916  27000				   -	       bne	savedifficultytableScores
    917  27000				   -	       rts
    918  27000				   -
    919  27000				   -loaddifficultytableHSC
    920  27000				   -			; routine responsible for loading the difficulty table from HSC
    921  27000				   -	       jsr	findindexHSC
    922  27000				   -	       ldy	hsgameslot
    923  27000				   -	       lda	HSCGameDifficulty,y
    924  27000				   -	       cmp	#$7F
    925  27000				   -	       bne	loaddifficultytableHSCcontinue
    926  27000				   -			;there was an error. use a new RAM table instead...
    927  27000				   -	       jmp	cleardifficultytablemem
    928  27000				   -loaddifficultytableHSCcontinue
    929  27000				   -			; parse the data into the HS memory...
    930  27000				   -	       ldy	#0
    931  27000				   -	       ldx	#0
    932  27000				   -loaddifficultytableScores
    933  27000				   -	       lda	(HSGameTableLo),y
    934  27000				   -	       sta	temp1
    935  27000				   -	       iny
    936  27000				   -	       lda	(HSGameTableLo),y
    937  27000				   -	       sta	temp2
    938  27000				   -	       jsr	decodeHSCInitials	; takes 2 byte initials from temp1,2 and stores 3 byte initials in temp3,4,5
    939  27000				   -	       iny
    940  27000				   -	       lda	(HSGameTableLo),y
    941  27000				   -	       sta	HSRAMScores,x
    942  27000				   -	       lda	temp3
    943  27000				   -	       sta	HSRAMInitials,x
    944  27000				   -	       inx
    945  27000				   -	       iny
    946  27000				   -	       lda	(HSGameTableLo),y
    947  27000				   -	       sta	HSRAMScores,x
    948  27000				   -	       lda	temp4
    949  27000				   -	       sta	HSRAMInitials,x
    950  27000				   -	       inx
    951  27000				   -	       iny
    952  27000				   -	       lda	(HSGameTableLo),y
    953  27000				   -	       sta	HSRAMScores,x
    954  27000				   -	       lda	temp5
    955  27000				   -	       sta	HSRAMInitials,x
    956  27000				   -	       inx
    957  27000				   -	       iny
    958  27000				   -	       cpx	#15
    959  27000				   -	       bne	loaddifficultytableScores
    960  27000				   -	       rts
    961  27000				   -
    962  27000				   -decodeHSCInitials
    963  27000				   -			; takes 2 byte initials from temp1,2 and stores 3 byte initials in temp3,4,5
    964  27000				   -			; 2 bytes are packed in the form: 22211111 22_33333
    965  27000				   -	       lda	#0
    966  27000				   -	       sta	temp4
    967  27000				   -	       lda	temp1
    968  27000				   -	       and	#%00011111
    969  27000				   -	       sta	temp3
    970  27000				   -
    971  27000				   -	       lda	temp2
    972  27000				   -	       and	#%00011111
    973  27000				   -	       sta	temp5
    974  27000				   -
    975  27000				   -	       lda	temp1
    976  27000				   -	       asl
    977  27000				   -	       rol	temp4
    978  27000				   -	       asl
    979  27000				   -	       rol	temp4
    980  27000				   -	       asl
    981  27000				   -	       rol	temp4
    982  27000				   -	       lda	temp2
    983  27000				   -	       asl
    984  27000				   -	       rol	temp4
    985  27000				   -	       asl
    986  27000				   -	       rol	temp4
    987  27000				   -	       rts
    988  27000				   -encodeHSCInitials
    989  27000				   -			; takes 3 byte initials from temp3,4,5 and stores 2 byte initials in temp1,2
    990  27000				   -			; 2 bytes are packed in the form: 22211111 22_33333
    991  27000				   -			; start with packing temp1...
    992  27000				   -	       lda	temp4
    993  27000				   -	       and	#%00011100
    994  27000				   -	       sta	temp1
    995  27000				   -	       asl	temp1
    996  27000				   -	       asl	temp1
    997  27000				   -	       asl	temp1
    998  27000				   -	       lda	temp3
    999  27000				   -	       and	#%00011111
   1000  27000				   -	       ora	temp1
   1001  27000				   -	       sta	temp1
   1002  27000				   -			; ...temp1 is now packed, on to temp2...
   1003  27000				   -	       lda	temp5
   1004  27000				   -	       asl
   1005  27000				   -	       asl
   1006  27000				   -	       ror	temp4
   1007  27000				   -	       ror
   1008  27000				   -	       ror	temp4
   1009  27000				   -	       ror
   1010  27000				   -	       sta	temp2
   1011  27000				   -	       rts
   1012  27000				   -
   1013  27000				   -findindexHSCerror
   1014  27000				   -			;the HSC is stuffed. return the bad slot flag
   1015  27000				   -	       ldy	#$ff
   1016  27000				   -	       sty	hsgameslot
   1017  27000				   -	       rts
   1018  27000				   -
   1019  27000				   -findindexHSC
   1020  27000				   -HSCGameID1 =	$1029
   1021  27000				   -HSCGameID2 =	$106E
   1022  27000				   -HSCGameDifficulty =	$10B3
   1023  27000				   -HSCGameIndex =	$10F8
   1024  27000				   -			; routine responsible for finding the game index from HSC
   1025  27000				   -			; call with x=0 to create a new table if none exist, call with x=$ff to avoid creating new tables
   1026  27000				   -			; the HS loading routine will use x=$ff, the HS saving routine will use x=0
   1027  27000				   -	       ldy	#69	; start +1 to account for the dey
   1028  27000				   -findindexHSCloop
   1029  27000				   -	       dey
   1030  27000				   -	       bmi	findindexHSCerror
   1031  27000				   -	       lda	HSCGameDifficulty,y
   1032  27000				   -	       cmp	#$7F
   1033  27000				   -	       beq	findourindexHSC
   1034  27000				   -	       cmp	gamedifficulty
   1035  27000				   -	       bne	findindexHSCloop
   1036  27000				   -	       lda	HSCGameID1,y
   1037  27000				   -	       cmp	#HSIDHI
   1038  27000				   -	       bne	findindexHSCloop
   1039  27000				   -	       lda	HSCGameID2,y
   1040  27000				   -	       cmp	#HSIDLO
   1041  27000				   -	       bne	findindexHSCloop
   1042  27000				   -findourindexHSC
   1043  27000				   -			; if we're here we found our index in the table
   1044  27000				   -			; or we found the first empty one
   1045  27000				   -	       sty	hsgameslot
   1046  27000				   -	       jsr	setupHSCGamepointer	; setup the pointer to the HS Table for this game...
   1047  27000				   -	       rts
   1048  27000				   -
   1049  27000				   -
   1050  27000				   -initializeHSCtableentry
   1051  27000				   -	       ldy	hsgameslot
   1052  27000				   -			; we need to make a new entry...
   1053  27000				   -	       lda	#HSIDHI
   1054  27000				   -	       sta	HSCGameID1,y
   1055  27000				   -	       lda	#HSIDLO
   1056  27000				   -	       sta	HSCGameID2,y
   1057  27000				   -	       lda	gamedifficulty
   1058  27000				   -	       sta	HSCGameDifficulty,y
   1059  27000				   -	       ldx	#0
   1060  27000				   -fixHSDGameDifficultylistLoop
   1061  27000				   -	       inx
   1062  27000				   -	       txa
   1063  27000				   -	       sta	HSCGameIndex,y
   1064  27000				   -	       iny
   1065  27000				   -	       cpy	#69
   1066  27000				   -	       bne	fixHSDGameDifficultylistLoop
   1067  27000				   -	       rts
   1068  27000				   -
   1069  27000				   -setupHSCGamepointer
   1070  27000				   -			; this routines sets (HSGameTableLo) pointing to the game's HS table
   1071  27000				   -	       lda	#$17
   1072  27000				   -	       sta	HSGameTableHi
   1073  27000				   -	       lda	#$FA
   1074  27000				   -	       sta	HSGameTableLo
   1075  27000				   -setupHSCGamepointerLoop
   1076  27000				   -	       lda	HSGameTableLo
   1077  27000				   -	       sec
   1078  27000				   -	       sbc	#25
   1079  27000				   -	       sta	HSGameTableLo
   1080  27000				   -	       lda	HSGameTableHi
   1081  27000				   -	       sbc	#0
   1082  27000				   -	       sta	HSGameTableHi
   1083  27000				   -	       iny
   1084  27000				   -	       cpy	#69
   1085  27000				   -	       bne	setupHSCGamepointerLoop
   1086  27000				   -	       rts
   1087  27000				   -
   1088  27000				   -loaddifficultytableAVOX
   1089  27000				   -			; routine responsible for loading the difficulty table from Avox
   1090  27000				   -			; we reuse HSC routines to format data to/from our Avox RAM buffer...
   1091  27000				   -	       lda	#>(eeprombuffer+3)
   1092  27000				   -	       sta	HSGameTableHi
   1093  27000				   -	       lda	#<(eeprombuffer+3)
   1094  27000				   -	       sta	HSGameTableLo
   1095  27000				   -
   1096  27000				   -			; the start location in EEPROM, subtract 32...
   1097  27000				   -	       lda	#$5F
   1098  27000				   -	       sta	HSVoxHi
   1099  27000				   -	       lda	#$E0
   1100  27000				   -	       sta	HSVoxLo
   1101  27000				   -	       lda	#0
   1102  27000				   -	       sta	temp1
   1103  27000				   -loaddifficultytableAVOXloop
   1104  27000				   -	       inc	temp1
   1105  27000				   -	       beq	loaddifficultytableAVOXfull
   1106  27000				   -	       clc
   1107  27000				   -	       lda	HSVoxLo
   1108  27000				   -	       adc	#32
   1109  27000				   -	       sta	HSVoxLo
   1110  27000				   -	       lda	HSVoxHi
   1111  27000				   -	       adc	#0
   1112  27000				   -	       sta	HSVoxHi
   1113  27000				   -	       lda	#3
   1114  27000				   -	       jsr	AVoxReadBytes	; read in 3 bytes, ID1,ID2,Difficulty
   1115  27000				   -	       lda	eeprombuffer
   1116  27000				   -	       cmp	#$FF
   1117  27000				   -	       beq	loaddifficultytableAVOXempty
   1118  27000				   -	       cmp	#HSIDHI
   1119  27000				   -	       bne	loaddifficultytableAVOXloop
   1120  27000				   -	       lda	eeprombuffer+1
   1121  27000				   -	       cmp	#HSIDLO
   1122  27000				   -	       bne	loaddifficultytableAVOXloop
   1123  27000				   -	       lda	eeprombuffer+2
   1124  27000				   -	       cmp	gamedifficulty
   1125  27000				   -	       bne	loaddifficultytableAVOXloop
   1126  27000				   -loaddifficultytableAVOXdone
   1127  27000				   -	       lda	#32
   1128  27000				   -	       jsr	AVoxReadBytes
   1129  27000				   -	       jsr	loaddifficultytableHSCcontinue
   1130  27000				   -	       rts
   1131  27000				   -loaddifficultytableAVOXfull
   1132  27000				   -	       lda	#0
   1133  27000				   -	       sta	hsdevice	; looks like all 255 entries are taken... disable it.
   1134  27000				   -loaddifficultytableAVOXempty
   1135  27000				   -	       jmp	cleardifficultytablemem
   1136  27000				   -	       rts
   1137  27000				   -
   1138  27000				   -cleardifficultytablemem
   1139  27000				   -	       ldy	#29
   1140  27000				   -	       lda	#0
   1141  27000				   -cleardifficultytablememloop
   1142  27000				   -	       sta	HSRAMTable,y
   1143  27000				   -	       dey
   1144  27000				   -	       bpl	cleardifficultytablememloop
   1145  27000				   -	       rts
   1146  27000				   -hiscoremoduleend
   1147  27000				   -
   1148  27000				   -	       echo	"  hiscore assembly: ",[(hiscoremoduleend-hiscoremodulestart)]d," bytes"
   1149  27000				   -
   1150  27000				   -	       ifconst	DOUBLEWIDE
   1151  27000				   -plotvaluedw
   1152  27000				   -plotdigitcount =	temp6
   1153  27000				   -	       lda	#0
   1154  27000				   -	       tay
   1155  27000				   -	       ldx	valbufend
   1156  27000				   -
   1157  27000				   -	       lda	plotdigitcount
   1158  27000				   -	       and	#1
   1159  27000				   -	       beq	pvnibble2chardw
   1160  27000				   -	       lda	#0
   1161  27000				   -	       sta	VALBUFFER,x	; just in case we skip this digit
   1162  27000				   -	       beq	pvnibble2char_skipnibbledw
   1163  27000				   -
   1164  27000				   -pvnibble2chardw
   1165  27000				   -			; high nibble...
   1166  27000				   -	       lda	(temp7),y
   1167  27000				   -	       and	#$f0
   1168  27000				   -	       lsr
   1169  27000				   -	       lsr
   1170  27000				   -	       lsr
   1171  27000				   -	       lsr
   1172  27000				   -
   1173  27000				   -	       clc
   1174  27000				   -	       adc	temp1	; add the offset to character graphics to our value
   1175  27000				   -	       sta	VALBUFFER,x
   1176  27000				   -	       inx
   1177  27000				   -	       dec	plotdigitcount
   1178  27000				   -pvnibble2char_skipnibbledw
   1179  27000				   -			; low nibble...
   1180  27000				   -	       lda	(temp7),y
   1181  27000				   -	       and	#$0f
   1182  27000				   -	       clc
   1183  27000				   -	       adc	temp1	; add the offset to character graphics to our value
   1184  27000				   -	       sta	VALBUFFER,x
   1185  27000				   -	       inx
   1186  27000				   -	       iny
   1187  27000				   -
   1188  27000				   -	       dec	plotdigitcount
   1189  27000				   -	       bne	pvnibble2chardw
   1190  27000				   -			;point to the start of our valuebuffer
   1191  27000				   -	       clc
   1192  27000				   -	       lda	#<VALBUFFER
   1193  27000				   -	       adc	valbufend
   1194  27000				   -	       sta	temp1
   1195  27000				   -	       lda	#>VALBUFFER
   1196  27000				   -	       adc	#0
   1197  27000				   -	       sta	temp2
   1198  27000				   -
   1199  27000				   -			;advance valbufend to the end of our value buffer
   1200  27000				   -	       stx	valbufend
   1201  27000				   -
   1202  27000				   -	       ifnconst	plotvalueonscreen
   1203  27000				   -	       jmp	plotcharacters
   1204  27000				   -	       else
   1205  27000				   -	       jmp	plotcharacterslive
   1206  27000				   -	       endif
   1207  27000				   -	       endif		; DOUBLEWIDE
   1208  27000				   -
   1209  27000					       endif		; HSSUPPORT
   1210  27000
------- FILE c:\Users\Steve\Desktop\2018dev\7800\7800basic\projects\lessons\lesson1_gfx_modes\160A_16pixelzone_128_16.bas.asm
   2990  27000					       endif
   2991  27000							; Provided under the CC0 license. See the included LICENSE.txt for details.
   2992  27000
   2993  27000							;standard routimes needed for pretty much all games
   2994  27000
   2995  27000							; some definitions used with "set debug color"
   2996  27000			00 91	    DEBUGCALC  =	$91
   2997  27000			00 41	    DEBUGWASTE =	$41
   2998  27000			00 c1	    DEBUGDRAW  =	$C1
   2999  27000
   3000  27000							;NMI and IRQ handlers
   3001  27000				    NMI
   3002  27000							;VISIBLEOVER is 255 while the screen is drawn, and 0 right after the visible screen is done.
   3003  27000			48		       pha		; save A
   3004  27001			a5 4d		       lda	visibleover
   3005  27003			49 ff		       eor	#255
   3006  27005			85 4d		       sta	visibleover
   3007  27007				   -	       ifconst	DEBUGINTERRUPT
   3008  27007				   -	       and	#$93
   3009  27007				   -	       sta	BACKGRND
   3010  27007					       endif
   3011  27007			ce b2 01	       dec	interruptindex
   3012  2700a			d0 03		       bne	skipreallyoffvisible
   3013  2700c			4c 5e f0	       jmp	reallyoffvisible
   3014  2700f				    skipreallyoffvisible
   3015  2700f			a5 4d		       lda	visibleover
   3016  27011			f0 49		       beq	skiptopscreenroutine
   3017  27013			8a		       txa		; save X+Y
   3018  27014			48		       pha
   3019  27015			98		       tya
   3020  27016			48		       pha
   3021  27017			d8		       cld
   3022  27018					       ifconst	.topscreenroutine
   3023  27018			20 4e 86	       jsr	.topscreenroutine
   3024  2701b					       endif
   3025  2701b			ee 3e 21	       inc	frameslost	; this is balanced with a "dec frameslost" when drawscreen is called.
   3026  2701e
   3027  2701e							; ** Other important routines that need to regularly run, and can run onscreen.
   3028  2701e							; ** Atarivox can't go here, because Maria might interrupt it while it's bit-banging.
   3029  2701e
   3030  2701e				    longcontrollerreads 		; ** controllers that take a lot of time to read. We use much of the visible screen here.
   3031  2701e				   -	       ifconst	LONGCONTROLLERREAD
   3032  2701e				   -	       lda	#$38
   3033  2701e				   -	       ifconst	LONGDEBUG
   3034  2701e				   -	       sta	BACKGRND
   3035  2701e				   -	       endif
   3036  2701e				   -	       sta	inttemp6
   3037  2701e				   -
   3038  2701e				   -longreadlineloop
   3039  2701e				   -	       ldx	#1
   3040  2701e				   -longreadloop
   3041  2701e				   -	       ldy	port0control,x
   3042  2701e				   -	       lda	longreadroutinelo,y
   3043  2701e				   -	       sta	inttemp3
   3044  2701e				   -	       lda	longreadroutinehi,y
   3045  2701e				   -	       sta	inttemp4
   3046  2701e				   -	       ora	inttemp3
   3047  2701e				   -	       beq	longreadloopreturn
   3048  2701e				   -	       jmp	(inttemp3)
   3049  2701e				   -longreadloopreturn
   3050  2701e				   -	       dex
   3051  2701e				   -	       bpl	longreadloop
   3052  2701e				   -	       dec	inttemp6
   3053  2701e				   -	       sta	WSYNC
   3054  2701e				   -	       bne	longreadlineloop
   3055  2701e				   -
   3056  2701e				   -	       ifconst	LONGDEBUG
   3057  2701e				   -	       lda	#$00
   3058  2701e				   -	       sta	BACKGRND
   3059  2701e				   -	       endif
   3060  2701e					       endif		; LONGCONTROLLERREAD
   3061  2701e
   3062  2701e			20 e2 f1	       jsr	servicesfxchannels
   3063  27021				   -	       ifconst	MUSICTRACKER
   3064  27021				   -	       jsr	servicesong
   3065  27021					       endif		; MUSICTRACKER
   3066  27021
   3067  27021			ee a4 01	       inc	framecounter
   3068  27024			ad a4 01	       lda	framecounter
   3069  27027			29 3f		       and	#63
   3070  27029			d0 08		       bne	skipcountdownseconds
   3071  2702b			ad a5 01	       lda	countdownseconds
   3072  2702e			f0 03		       beq	skipcountdownseconds
   3073  27030			ce a5 01	       dec	countdownseconds
   3074  27033				    skipcountdownseconds
   3075  27033
   3076  27033			a2 01		       ldx	#1
   3077  27035				    buttonreadloop
   3078  27035			8a		       txa
   3079  27036			48		       pha
   3080  27037			bc e2 01	       ldy	port0control,x
   3081  2703a			b9 c5 f1	       lda	buttonhandlerlo,y
   3082  2703d			85 da		       sta	inttemp3
   3083  2703f			b9 ba f1	       lda	buttonhandlerhi,y
   3084  27042			85 db		       sta	inttemp4
   3085  27044			05 da		       ora	inttemp3
   3086  27046			f0 03		       beq	buttonreadloopreturn
   3087  27048			6c da 00	       jmp	(inttemp3)
   3088  2704b				    buttonreadloopreturn
   3089  2704b			68		       pla
   3090  2704c			aa		       tax
   3091  2704d			ca		       dex
   3092  2704e			10 e5		       bpl	buttonreadloop
   3093  27050
   3094  27050				   -	       ifconst	DRIVINGSUPPORT
   3095  27050				   -	       jsr	drivingupdate
   3096  27050					       endif		; DRIVINGSUPPORT
   3097  27050				   -	       ifconst	KEYPADSUPPORT
   3098  27050				   -	       jsr	keypadrowselect
   3099  27050					       endif		; KEYPADSUPPORT
   3100  27050
   3101  27050
   3102  27050			ad b5 01	       lda	doublebufferminimumframeindex
   3103  27053			f0 03		       beq	skipdoublebufferminimumframeindexadjust
   3104  27055			ce b5 01	       dec	doublebufferminimumframeindex
   3105  27058				    skipdoublebufferminimumframeindexadjust
   3106  27058
   3107  27058			68		       pla
   3108  27059			a8		       tay
   3109  2705a			68		       pla
   3110  2705b			aa		       tax
   3111  2705c				    skiptopscreenroutine
   3112  2705c			68		       pla
   3113  2705d				    IRQ
   3114  2705d			40		       RTI
   3115  2705e
   3116  2705e				   -	       ifconst	LONGCONTROLLERREAD
   3117  2705e				   -longreadroutinelo
   3118  2705e				   -			;	  NONE		PROLINE        LIGHTGUN      PADDLE
   3119  2705e				   -	       .byte	0, 0, 0, 0
   3120  2705e				   -			;	  TRKBALL	VCS STICK      DRIVING	     KEYPAD
   3121  2705e				   -	       .byte	0, 0, 0, 0
   3122  2705e				   -			;	  STMOUSE	AMOUSE	       ATARIVOX
   3123  2705e				   -	       .byte	<mouseupdate, <mouseupdate, 0
   3124  2705e				   -
   3125  2705e				   -longreadroutinehi
   3126  2705e				   -			;	  NONE		PROLINE        LIGHTGUN      PADDLE
   3127  2705e				   -	       .byte	0, 0, 0, 0
   3128  2705e				   -			;	  TRKBALL	VCS STICK      DRIVING	     KEYPAD
   3129  2705e				   -	       .byte	0, 0, 0, 0
   3130  2705e				   -			;	  STMOUSE	AMOUSE	       ATARIVOX
   3131  2705e				   -	       .byte	>mouseupdate, >mouseupdate, 0
   3132  2705e				   -nullroutine
   3133  2705e				   -	       rts
   3134  2705e					       endif		; LONGCONTROLLERREAD
   3135  2705e
   3136  2705e				    reallyoffvisible
   3137  2705e			85 24		       sta	WSYNC
   3138  27060
   3139  27060			a9 00		       lda	#0
   3140  27062			85 4d		       sta	visibleover
   3141  27064				   -	       ifconst	DEBUGINTERRUPT
   3142  27064				   -	       sta	BACKGRND
   3143  27064					       endif
   3144  27064
   3145  27064			a9 03		       lda	#3
   3146  27066			8d b2 01	       sta	interruptindex
   3147  27069
   3148  27069			8a		       txa
   3149  2706a			48		       pha
   3150  2706b			98		       tya
   3151  2706c			48		       pha
   3152  2706d			d8		       cld
   3153  2706e
   3154  2706e			20 5c f1	       jsr	uninterruptableroutines
   3155  27071
   3156  27071				   -	       ifconst	.userinterrupt
   3157  27071				   -	       jsr	.userinterrupt
   3158  27071					       endif
   3159  27071
   3160  27071				   -	       ifconst	KEYPADSUPPORT
   3161  27071				   -	       jsr	keypadcolumnread
   3162  27071					       endif
   3163  27071
   3164  27071			68		       pla
   3165  27072			a8		       tay
   3166  27073			68		       pla
   3167  27074			aa		       tax
   3168  27075			68		       pla
   3169  27076			40		       RTI
   3170  27077
   3171  27077				    clearscreen
   3172  27077			a2 0b		       ldx	#(WZONECOUNT-1)
   3173  27079			a9 00		       lda	#0
   3174  2707b				    clearscreenloop
   3175  2707b			95 65		       sta	dlend,x
   3176  2707d			ca		       dex
   3177  2707e			10 fb		       bpl	clearscreenloop
   3178  27080			a9 00		       lda	#0
   3179  27082			8d ad 01	       sta	valbufend	; clear the bcd value buffer
   3180  27085			8d ae 01	       sta	valbufendsave
   3181  27088			60		       rts
   3182  27089
   3183  27089				    restorescreen
   3184  27089			a2 0b		       ldx	#(WZONECOUNT-1)
   3185  2708b			a9 00		       lda	#0
   3186  2708d				    restorescreenloop
   3187  2708d			b5 82		       lda	dlendsave,x
   3188  2708f			95 65		       sta	dlend,x
   3189  27091			ca		       dex
   3190  27092			10 f9		       bpl	restorescreenloop
   3191  27094			ad ae 01	       lda	valbufendsave
   3192  27097			8d ad 01	       sta	valbufend
   3193  2709a			60		       rts
   3194  2709b
   3195  2709b				    savescreen
   3196  2709b			a2 0b		       ldx	#(WZONECOUNT-1)
   3197  2709d				    savescreenloop
   3198  2709d			b5 65		       lda	dlend,x
   3199  2709f			95 82		       sta	dlendsave,x
   3200  270a1			ca		       dex
   3201  270a2			10 f9		       bpl	savescreenloop
   3202  270a4			ad ad 01	       lda	valbufend
   3203  270a7			8d ae 01	       sta	valbufendsave
   3204  270aa					       ifconst	DOUBLEBUFFER
   3205  270aa			a5 d5		       lda	doublebufferstate
   3206  270ac			f0 04		       beq	savescreenrts
   3207  270ae			a9 01		       lda	#1
   3208  270b0			85 d7		       sta	doublebufferbufferdirty
   3209  270b2				    savescreenrts
   3210  270b2					       endif		; DOUBLEBUFFER
   3211  270b2			60		       rts
   3212  270b3
   3213  270b3				    drawscreen
   3214  270b3
   3215  270b3			a9 00		       lda	#0
   3216  270b5			85 42		       sta	temp1	; not B&W if we're here...
   3217  270b7
   3218  270b7				    drawscreenwait
   3219  270b7			a5 4d		       lda	visibleover
   3220  270b9			d0 fc		       bne	drawscreenwait	; make sure the visible screen isn't being drawn
   3221  270bb
   3222  270bb							;restore some registers in case the game changed them mid-screen...
   3223  270bb			ad 07 21	       lda	sCTRL
   3224  270be			05 42		       ora	temp1
   3225  270c0			85 3c		       sta	CTRL
   3226  270c2			ad 0b 21	       lda	sCHARBASE
   3227  270c5			85 34		       sta	CHARBASE
   3228  270c7
   3229  270c7							;ensure all of the display list is terminated...
   3230  270c7			20 39 f1	       jsr	terminatedisplaylist
   3231  270ca
   3232  270ca					       ifnconst	pauseroutineoff
   3233  270ca			20 d5 f0	       jsr	pauseroutine
   3234  270cd					       endif		; pauseroutineoff
   3235  270cd
   3236  270cd							; Make sure the visible screen has *started* before we exit. That way we can rely on drawscreen
   3237  270cd							; delaying a full frame, but still allowing time for basic calculations.
   3238  270cd				    visiblescreenstartedwait
   3239  270cd			a5 4d		       lda	visibleover
   3240  270cf			f0 fc		       beq	visiblescreenstartedwait
   3241  270d1				    visiblescreenstartedwaitdone
   3242  270d1			ce 3e 21	       dec	frameslost	; ; this gets balanced with an "inc frameslost" by an NMI at the top of the screen
   3243  270d4			60		       rts
   3244  270d5
   3245  270d5					       ifnconst	pauseroutineoff
   3246  270d5							; check to see if pause was pressed and released
   3247  270d5				    pauseroutine
   3248  270d5			ad b6 01	       lda	pausedisable
   3249  270d8			d0 4e		       bne	leavepauseroutine
   3250  270da			a9 08		       lda	#8
   3251  270dc			2c 82 02	       bit	SWCHB
   3252  270df			f0 29		       beq	pausepressed
   3253  270e1
   3254  270e1					       ifnconst	SOFTRESETASPAUSEOFF
   3255  270e1					       ifnconst	MOUSESUPPORT
   3256  270e1			ad 80 02	       lda	SWCHA	; then check the soft "RESET" joysick code...
   3257  270e4			29 70		       and	#%01110000	; _LDU
   3258  270e6			f0 22		       beq	pausepressed
   3259  270e8					       endif
   3260  270e8					       endif
   3261  270e8
   3262  270e8							;pause isn't pressed
   3263  270e8			a9 00		       lda	#0
   3264  270ea			8d ac 01	       sta	pausebuttonflag	; clear pause hold state in case its set
   3265  270ed
   3266  270ed							;check if we're in an already paused state
   3267  270ed			ad 00 21	       lda	pausestate
   3268  270f0			f0 36		       beq	leavepauseroutine	; nope, leave
   3269  270f2
   3270  270f2			c9 01		       cmp	#1	; last frame was the start of pausing
   3271  270f4			f0 2b		       beq	enterpausestate2	; move from state 1 to 2
   3272  270f6
   3273  270f6			c9 02		       cmp	#2
   3274  270f8			f0 34		       beq	carryonpausing
   3275  270fa
   3276  270fa							;pausestate must be >2, which means we're ending an unpause 
   3277  270fa			a9 00		       lda	#0
   3278  270fc			8d ac 01	       sta	pausebuttonflag
   3279  270ff			8d 00 21	       sta	pausestate
   3280  27102			ad 07 21	       lda	sCTRL
   3281  27105			85 3c		       sta	CTRL
   3282  27107			4c 28 f1	       jmp	leavepauseroutine
   3283  2710a
   3284  2710a				    pausepressed
   3285  2710a							;pause is pressed
   3286  2710a			ad ac 01	       lda	pausebuttonflag
   3287  2710d			c9 ff		       cmp	#$ff
   3288  2710f			f0 1d		       beq	carryonpausing
   3289  27111
   3290  27111							;its a new press, increment the state
   3291  27111			ee 00 21	       inc	pausestate
   3292  27114
   3293  27114							;silence volume at the start and end of pausing
   3294  27114			a9 00		       lda	#0
   3295  27116			85 19		       sta	AUDV0
   3296  27118			85 1a		       sta	AUDV1
   3297  2711a
   3298  2711a				   -	       ifconst	pokeysupport
   3299  2711a				   -	       ldy	#7
   3300  2711a				   -pausesilencepokeyaudioloop
   3301  2711a				   -	       sta	(pokeybase),y
   3302  2711a				   -	       dey
   3303  2711a				   -	       bpl	pausesilencepokeyaudioloop
   3304  2711a					       endif		; pokeysupport
   3305  2711a
   3306  2711a			a9 ff		       lda	#$ff
   3307  2711c			8d ac 01	       sta	pausebuttonflag
   3308  2711f			d0 0d		       bne	carryonpausing
   3309  27121
   3310  27121				    enterpausestate2
   3311  27121			a9 02		       lda	#2
   3312  27123			8d 00 21	       sta	pausestate
   3313  27126			d0 06		       bne	carryonpausing
   3314  27128				    leavepauseroutine
   3315  27128			ad 07 21	       lda	sCTRL
   3316  2712b			85 3c		       sta	CTRL
   3317  2712d			60		       rts
   3318  2712e				    carryonpausing
   3319  2712e				   -	       ifconst	.pause
   3320  2712e				   -	       jsr	.pause
   3321  2712e					       endif		; .pause
   3322  2712e			ad 07 21	       lda	sCTRL
   3323  27131			09 80		       ora	#%10000000	; turn off colorburst during pause...
   3324  27133			85 3c		       sta	CTRL
   3325  27135			4c d5 f0	       jmp	pauseroutine
   3326  27138					       endif		; pauseroutineoff
   3327  27138
   3328  27138
   3329  27138					       ifconst	DOUBLEBUFFER
   3330  27138				    skipterminatedisplaylistreturn
   3331  27138			60		       rts
   3332  27139					       endif		; DOUBLEBUFFER
   3333  27139				    terminatedisplaylist
   3334  27139					       ifconst	DOUBLEBUFFER
   3335  27139			a5 d5		       lda	doublebufferstate
   3336  2713b			d0 fb		       bne	skipterminatedisplaylistreturn	; double-buffering runs it's own DL termination code
   3337  2713d					       endif		; DOUBLEBUFFER
   3338  2713d				    terminatedisplaybuffer
   3339  2713d							;add DL end entry on each DL
   3340  2713d			a2 0b		       ldx	#(WZONECOUNT-1)
   3341  2713f				    dlendloop
   3342  2713f			bd 5f f7	       lda	DLPOINTL,x
   3343  27142					       ifconst	DOUBLEBUFFER
   3344  27142			18		       clc
   3345  27143			65 d6		       adc	doublebufferdloffset
   3346  27145					       endif		; DOUBLEBUFFER
   3347  27145			85 63		       sta	dlpnt
   3348  27147			bd 53 f7	       lda	DLPOINTH,x
   3349  2714a					       ifconst	DOUBLEBUFFER
   3350  2714a			69 00		       adc	#0
   3351  2714c					       endif		; DOUBLEBUFFER
   3352  2714c			85 64		       sta	dlpnt+1
   3353  2714e			b4 65		       ldy	dlend,x
   3354  27150			a9 00		       lda	#$00
   3355  27152				    dlendmoreloops
   3356  27152			c8		       iny
   3357  27153			91 63		       sta	(dlpnt),y
   3358  27155				   -	       ifconst	FRAMESKIPGLITCHFIXWEAK
   3359  27155				   -	       cpy	#DLLASTOBJ+1
   3360  27155				   -	       beq	dlendthiszonedone
   3361  27155				   -	       iny
   3362  27155				   -	       iny
   3363  27155				   -	       iny
   3364  27155				   -	       iny
   3365  27155				   -	       iny
   3366  27155				   -	       sta	(dlpnt),y
   3367  27155				   -dlendthiszonedone
   3368  27155					       endif	FRAMESKIPGLITCHFIXWEAK
   3369  27155				   -	       ifconst	FRAMESKIPGLITCHFIX
   3370  27155				   -	       iny
   3371  27155				   -	       iny
   3372  27155				   -	       iny
   3373  27155				   -	       iny
   3374  27155				   -	       cpy	#DLLASTOBJ-1
   3375  27155				   -	       bcc	dlendmoreloops
   3376  27155					       endif		; FRAMESKIPGLITCHFIX
   3377  27155			ca		       dex
   3378  27156			10 e7		       bpl	dlendloop
   3379  27158
   3380  27158					       ifnconst	pauseroutineoff
   3381  27158			20 d5 f0	       jsr	pauseroutine
   3382  2715b					       endif		; pauseroutineoff
   3383  2715b			60		       rts
   3384  2715c
   3385  2715c				    uninterruptableroutines
   3386  2715c							; this is for routines that must happen off the visible screen, each frame.
   3387  2715c
   3388  2715c				   -	       ifconst	AVOXVOICE
   3389  2715c				   -	       jsr	serviceatarivoxqueue
   3390  2715c					       endif
   3391  2715c
   3392  2715c			a9 00		       lda	#0
   3393  2715e			8d e1 01	       sta	palfastframe
   3394  27161			ad 09 21	       lda	paldetected
   3395  27164			f0 10		       beq	skippalframeadjusting
   3396  27166							; ** PAL console is detected. we increment palframes to accurately count 5 frames,
   3397  27166			ae e0 01	       ldx	palframes
   3398  27169			e8		       inx
   3399  2716a			e0 05		       cpx	#5
   3400  2716c			d0 05		       bne	palframeskipdone
   3401  2716e			ee e1 01	       inc	palfastframe
   3402  27171			a2 00		       ldx	#0
   3403  27173				    palframeskipdone
   3404  27173			8e e0 01	       stx	palframes
   3405  27176				    skippalframeadjusting
   3406  27176
   3407  27176				   -	       ifconst	MUSICTRACKER
   3408  27176				   -			; We normally run the servicesong routine from the top-screen interrupt, but if it
   3409  27176				   -			; happens to interrupt the scheduling of a sound effect in the game code, we skip it.
   3410  27176				   -			; If that happens, we try again here. Chances are very small we'll run into the same
   3411  27176				   -			; problem twice, and if we do, we just drop a musical note or two.
   3412  27176				   -	       lda	sfxschedulemissed
   3413  27176				   -	       beq	servicesongwasnotmissed
   3414  27176				   -	       jsr	servicesong
   3415  27176				   -servicesongwasnotmissed
   3416  27176					       endif		; MUSICTRACKER
   3417  27176
   3418  27176			60		       rts
   3419  27177
   3420  27177				    serviceatarivoxqueue
   3421  27177				   -	       ifconst	AVOXVOICE
   3422  27177				   -	       lda	voxlock
   3423  27177				   -	       bne	skipvoxprocessing	; the vox is in the middle of speech address update
   3424  27177				   -skipvoxqueuesizedec
   3425  27177				   -	       jmp	processavoxvoice
   3426  27177				   -skipvoxprocessing
   3427  27177				   -	       rts
   3428  27177				   -
   3429  27177				   -processavoxvoice
   3430  27177				   -	       lda	avoxenable
   3431  27177				   -	       bne	avoxfixport
   3432  27177				   -	       SPKOUT	tempavox
   3433  27177				   -	       rts
   3434  27177				   -avoxfixport
   3435  27177				   -	       lda	#0	; restore the port to all bits as inputs...
   3436  27177				   -	       sta	CTLSWA
   3437  27177				   -	       rts
   3438  27177				   -silenceavoxvoice
   3439  27177				   -	       SPEAK	avoxsilentdata
   3440  27177				   -	       rts
   3441  27177				   -avoxsilentdata
   3442  27177				   -	       .byte	31,255
   3443  27177					       else
   3444  27177			60		       rts
   3445  27178					       endif		; AVOXVOICE
   3446  27178
   3447  27178				    joybuttonhandler
   3448  27178			8a		       txa
   3449  27179			0a		       asl
   3450  2717a			a8		       tay
   3451  2717b			b9 08 00	       lda	INPT0,y
   3452  2717e			4a		       lsr
   3453  2717f			9d 02 21	       sta	sINPT1,x
   3454  27182			b9 09 00	       lda	INPT1,y
   3455  27185			29 80		       and	#%10000000
   3456  27187			1d 02 21	       ora	sINPT1,x
   3457  2718a							;eor genesisdetected0,x ; invert INPT1 if genesis is detected
   3458  2718a			9d 02 21	       sta	sINPT1,x
   3459  2718d
   3460  2718d			b5 0c		       lda	INPT4,x
   3461  2718f			30 19		       bmi	.skip1bjoyfirecheck
   3462  27191							;one button joystick is down
   3463  27191			49 80		       eor	#%10000000
   3464  27193			9d 02 21	       sta	sINPT1,x
   3465  27196
   3466  27196			ad b1 01	       lda	joybuttonmode
   3467  27199			3d ad f1	       and	twobuttonmask,x
   3468  2719c			f0 0c		       beq	.skip1bjoyfirecheck
   3469  2719e			ad b1 01	       lda	joybuttonmode
   3470  271a1			1d ad f1	       ora	twobuttonmask,x
   3471  271a4			8d b1 01	       sta	joybuttonmode
   3472  271a7			8d 82 02	       sta	SWCHB
   3473  271aa				    .skip1bjoyfirecheck
   3474  271aa			4c 4b f0	       jmp	buttonreadloopreturn
   3475  271ad
   3476  271ad				    twobuttonmask
   3477  271ad			04 10		       .byte.b	%00000100,%00010000
   3478  271af
   3479  271af				    gunbuttonhandler		; outside of the conditional, so our button handler LUT is valid
   3480  271af				   -	       ifconst	LIGHTGUNSUPPORT
   3481  271af				   -	       cpx	#0
   3482  271af				   -	       bne	secondportgunhandler
   3483  271af				   -firstportgunhandler
   3484  271af				   -	       lda	SWCHA
   3485  271af				   -	       asl
   3486  271af				   -	       asl
   3487  271af				   -	       asl		; shift D4 to D7
   3488  271af				   -	       and	#%10000000
   3489  271af				   -	       eor	#%10000000
   3490  271af				   -	       sta	sINPT1
   3491  271af				   -	       jmp	buttonreadloopreturn
   3492  271af				   -secondportgunhandler
   3493  271af				   -	       lda	SWCHA
   3494  271af				   -	       lsr		; shift D0 into carry
   3495  271af				   -	       lsr		; shift carry into D7
   3496  271af				   -	       and	#%10000000
   3497  271af				   -	       eor	#%10000000
   3498  271af				   -	       sta	sINPT3
   3499  271af				   -	       jmp	buttonreadloopreturn
   3500  271af					       endif		; LIGHTGUNSUPPORT
   3501  271af
   3502  271af				    controlsusing2buttoncode
   3503  271af			00		       .byte.b	0	; 00=no controller plugged in
   3504  271b0			01		       .byte.b	1	; 01=proline joystick
   3505  271b1			00		       .byte.b	0	; 02=lightgun
   3506  271b2			00		       .byte.b	0	; 03=paddle
   3507  271b3			01		       .byte.b	1	; 04=trakball
   3508  271b4			01		       .byte.b	1	; 05=vcs joystick
   3509  271b5			01		       .byte.b	1	; 06=driving control
   3510  271b6			00		       .byte.b	0	; 07=keypad control
   3511  271b7			00		       .byte.b	0	; 08=st mouse/cx80
   3512  271b8			00		       .byte.b	0	; 09=amiga mouse
   3513  271b9			01		       .byte.b	1	; 10=atarivox
   3514  271ba
   3515  271ba				    buttonhandlerhi
   3516  271ba			00		       .byte.b	0	; 00=no controller plugged in
   3517  271bb			f1		       .byte.b	>joybuttonhandler	; 01=proline joystick
   3518  271bc			f1		       .byte.b	>gunbuttonhandler	; 02=lightgun
   3519  271bd			00		       .byte.b	0	; 03=paddle [not implemented yet]
   3520  271be			f1		       .byte.b	>joybuttonhandler	; 04=trakball
   3521  271bf			f1		       .byte.b	>joybuttonhandler	; 05=vcs joystick
   3522  271c0			f1		       .byte.b	>joybuttonhandler	; 06=driving control
   3523  271c1			00		       .byte.b	0	; 07=keypad
   3524  271c2			f6		       .byte.b	>mousebuttonhandler	; 08=st mouse
   3525  271c3			f6		       .byte.b	>mousebuttonhandler	; 09=amiga mouse
   3526  271c4			f1		       .byte.b	>joybuttonhandler	; 10=atarivox
   3527  271c5				    buttonhandlerlo
   3528  271c5			00		       .byte.b	0	; 00=no controller plugged in
   3529  271c6			78		       .byte.b	<joybuttonhandler	; 01=proline joystick
   3530  271c7			af		       .byte.b	<gunbuttonhandler	; 02=lightgun 
   3531  271c8			00		       .byte.b	0	; 03=paddle [not implemented yet]
   3532  271c9			78		       .byte.b	<joybuttonhandler	; 04=trakball
   3533  271ca			78		       .byte.b	<joybuttonhandler	; 05=vcs joystick
   3534  271cb			78		       .byte.b	<joybuttonhandler	; 06=driving control
   3535  271cc			00		       .byte.b	0	; 07=keypad
   3536  271cd			36		       .byte.b	<mousebuttonhandler	; 08=st mouse
   3537  271ce			36		       .byte.b	<mousebuttonhandler	; 09=amiga mouse
   3538  271cf			78		       .byte.b	<joybuttonhandler	; 10=atarivox
   3539  271d0
   3540  271d0				    drawwait
   3541  271d0			a5 4d		       lda	visibleover
   3542  271d2			d0 fc		       bne	drawwait	; make sure the visible screen isn't being drawn
   3543  271d4			60		       rts
   3544  271d5
   3545  271d5				    mutetia
   3546  271d5			a9 00		       lda	#0
   3547  271d7			a2 03		       ldx	#3
   3548  271d9				    mutetialoop
   3549  271d9			95 4e		       sta	sfx1pointlo,x
   3550  271db			95 17		       sta	AUDF0,x
   3551  271dd			ca		       dex
   3552  271de			10 f9		       bpl	mutetialoop
   3553  271e0			60		       rts
   3554  271e1
   3555  271e1				    servicesfxchannelsdone
   3556  271e1					       ifnconst	pokeysupport
   3557  271e1			60		       rts
   3558  271e2				   -	       else
   3559  271e2				   -	       jmp	checkpokeyplaying
   3560  271e2					       endif
   3561  271e2				    servicesfxchannels
   3562  271e2			a2 ff		       ldx	#255
   3563  271e4				    servicesfxchannelsloop
   3564  271e4			e8		       inx
   3565  271e5					       ifnconst	TIASFXMONO
   3566  271e5			e0 02		       cpx	#2
   3567  271e7				   -	       else
   3568  271e7				   -	       cpx	#1
   3569  271e7					       endif
   3570  271e7			f0 f8		       beq	servicesfxchannelsdone
   3571  271e9
   3572  271e9			b5 4e		       lda	sfx1pointlo,x
   3573  271eb			85 dc		       sta	inttemp5
   3574  271ed			15 50		       ora	sfx1pointhi,x
   3575  271ef			f0 f3		       beq	servicesfxchannelsloop
   3576  271f1			b5 50		       lda	sfx1pointhi,x
   3577  271f3			85 dd		       sta	inttemp6
   3578  271f5
   3579  271f5			b5 58		       lda	sfx1tick,x
   3580  271f7			f0 05		       beq	servicesfx_cont1	; this chunk is over, load the next!
   3581  271f9			d6 58		       dec	sfx1tick,x	; frame countdown is non-zero, subtract one
   3582  271fb			4c e4 f1	       jmp	servicesfxchannelsloop
   3583  271fe				    servicesfx_cont1
   3584  271fe
   3585  271fe			b5 56		       lda	sfx1frames,x	; set the frame countdown for this sound chunk
   3586  27200			95 58		       sta	sfx1tick,x
   3587  27202
   3588  27202			b5 52		       lda	sfx1priority,x	; decrease the sound's priority if its non-zero
   3589  27204			f0 02		       beq	servicesfx_cont2
   3590  27206			d6 52		       dec	sfx1priority,x
   3591  27208				    servicesfx_cont2
   3592  27208
   3593  27208			a0 00		       ldy	#0	; play the sound
   3594  2720a			b1 dc		       lda	(inttemp5),y
   3595  2720c			85 d8		       sta	inttemp1
   3596  2720e
   3597  2720e				   -	       ifconst	MUSICTRACKER
   3598  2720e				   -	       lda	sfx1notedata,x
   3599  2720e				   -	       beq	exitmusictracker	; exit if this isn't a pitched instrument
   3600  2720e				   -	       ldy	#0
   3601  2720e				   -	       sty	inttemp2
   3602  2720e				   -	       clc
   3603  2720e				   -	       adc	(inttemp5),y
   3604  2720e				   -	       asl		; x2
   3605  2720e				   -	       tay
   3606  2720e				   -	       lda	tiatrackeroctavenotes,y
   3607  2720e				   -	       sta	AUDC0,x
   3608  2720e				   -	       iny
   3609  2720e				   -	       lda	tiatrackeroctavenotes,y
   3610  2720e				   -	       sta	AUDF0,x
   3611  2720e				   -	       ldy	#1
   3612  2720e				   -	       jmp	sfxvolumeentrypt
   3613  2720e				   -exitmusictracker
   3614  2720e				   -	       lda	inttemp1
   3615  2720e					       endif		; MUSICTRACKER
   3616  2720e
   3617  2720e			18		       clc
   3618  2720f			75 54		       adc	sfx1poffset,x	; take into account any pitch modification
   3619  27211			95 17		       sta	AUDF0,x
   3620  27213			c8		       iny
   3621  27214			b1 dc		       lda	(inttemp5),y
   3622  27216			95 15		       sta	AUDC0,x
   3623  27218			85 d9		       sta	inttemp2
   3624  2721a			c8		       iny
   3625  2721b				    sfxvolumeentrypt
   3626  2721b			b1 dc		       lda	(inttemp5),y
   3627  2721d			95 19		       sta	AUDV0,x
   3628  2721f			c9 10		       cmp	#$10
   3629  27221			b0 19		       bcs	sfxsoundloop	; AUDV0>$0F means the sound is looped while priority is active
   3630  27223
   3631  27223			05 d9		       ora	inttemp2
   3632  27225			05 d8		       ora	inttemp1	; check if F|C|V=0
   3633  27227			f0 23		       beq	zerosfx	; if so, we're at the end of the sound.
   3634  27229
   3635  27229				    advancesfxpointer
   3636  27229							; advance the pointer to the next sound chunk
   3637  27229			c8		       iny
   3638  2722a			84 da		       sty	inttemp3
   3639  2722c			18		       clc
   3640  2722d			b5 4e		       lda	sfx1pointlo,x
   3641  2722f			65 da		       adc	inttemp3
   3642  27231			95 4e		       sta	sfx1pointlo,x
   3643  27233			b5 50		       lda	sfx1pointhi,x
   3644  27235			69 00		       adc	#0
   3645  27237			95 50		       sta	sfx1pointhi,x
   3646  27239			4c e4 f1	       jmp	servicesfxchannelsloop
   3647  2723c
   3648  2723c				    sfxsoundloop
   3649  2723c			48		       pha
   3650  2723d			b5 52		       lda	sfx1priority,x
   3651  2723f			d0 04		       bne	sfxsoundloop_carryon
   3652  27241			68		       pla		; fix the stack before we go
   3653  27242			4c 29 f2	       jmp	advancesfxpointer
   3654  27245				    sfxsoundloop_carryon
   3655  27245			68		       pla
   3656  27246			29 f0		       and	#$F0
   3657  27248			4a		       lsr
   3658  27249			4a		       lsr
   3659  2724a			4a		       lsr
   3660  2724b			4a		       lsr
   3661  2724c
   3662  2724c				    zerosfx
   3663  2724c			95 4e		       sta	sfx1pointlo,x
   3664  2724e			95 50		       sta	sfx1pointhi,x
   3665  27250			95 52		       sta	sfx1priority,x
   3666  27252			4c e4 f1	       jmp	servicesfxchannelsloop
   3667  27255
   3668  27255
   3669  27255				    schedulesfx
   3670  27255							; called with sfxinstrumentlo=<data sfxinstrumenthi=>data sfxpitchoffset=pitch-offset sfxnoteindex=note index
   3671  27255			a0 00		       ldy	#0
   3672  27257			b1 e0		       lda	(sfxinstrumentlo),y
   3673  27259				   -	       ifconst	pokeysupport
   3674  27259				   -	       cmp	#$20	; POKEY?
   3675  27259				   -	       bne	scheduletiasfx
   3676  27259				   -	       jmp	schedulepokeysfx
   3677  27259					       endif
   3678  27259				    scheduletiasfx
   3679  27259							;cmp #$10 ; TIA?
   3680  27259							;beq continuescheduletiasfx
   3681  27259							; rts ; unhandled!!! 
   3682  27259				    continuescheduletiasfx
   3683  27259					       ifnconst	TIASFXMONO
   3684  27259			a5 4e		       lda	sfx1pointlo
   3685  2725b			05 50		       ora	sfx1pointhi
   3686  2725d			f0 13		       beq	schedulesfx1	;if channel 1 is idle, use it
   3687  2725f			a5 4f		       lda	sfx2pointlo
   3688  27261			05 51		       ora	sfx2pointhi
   3689  27263			f0 11		       beq	schedulesfx2	;if channel 2 is idle, use it
   3690  27265							; Both channels are scheduled. 
   3691  27265			a0 01		       ldy	#1
   3692  27267			b1 e0		       lda	(sfxinstrumentlo),y
   3693  27269			d0 01		       bne	interruptsfx
   3694  2726b			60		       rts		; the new sound has 0 priority and both channels are busy. Skip playing it.
   3695  2726c				    interruptsfx
   3696  2726c							;Compare which active sound has a lower priority. We'll interrupt the lower one.
   3697  2726c			a5 52		       lda	sfx1priority
   3698  2726e			c5 53		       cmp	sfx2priority
   3699  27270			b0 04		       bcs	schedulesfx2
   3700  27272					       endif		; !TIASFXMONO
   3701  27272
   3702  27272				    schedulesfx1
   3703  27272			a2 00		       ldx	#0	; channel 1
   3704  27274					       ifnconst	TIASFXMONO
   3705  27274			f0 02		       beq	skipschedulesfx2
   3706  27276				    schedulesfx2
   3707  27276			a2 01		       ldx	#1	; channel 2
   3708  27278				    skipschedulesfx2
   3709  27278					       endif		; !TIASFXMONO
   3710  27278
   3711  27278				   -	       ifconst	MUSICTRACKER
   3712  27278				   -	       lda	sfxnoteindex
   3713  27278				   -	       bpl	skipdrumkitoverride
   3714  27278				   -	       and	#$7F	; subtract 128
   3715  27278				   -	       sec
   3716  27278				   -	       sbc	#4	; drums start at 132, i.e. octave 10
   3717  27278				   -	       asl
   3718  27278				   -	       tay
   3719  27278				   -	       lda	tiadrumkitdefinition,y
   3720  27278				   -	       sta	sfxinstrumentlo
   3721  27278				   -	       iny
   3722  27278				   -	       lda	tiadrumkitdefinition,y
   3723  27278				   -	       sta	sfxinstrumenthi
   3724  27278				   -	       lda	#0
   3725  27278				   -	       sta	sfxnoteindex	; and tell the driver it's a non-pitched instrument
   3726  27278				   -skipdrumkitoverride
   3727  27278					       endif		; MUSICTRACKER
   3728  27278			a0 01		       ldy	#1	; get priority and sound-resolution (in frames)
   3729  2727a			b1 e0		       lda	(sfxinstrumentlo),y
   3730  2727c			95 52		       sta	sfx1priority,x
   3731  2727e			c8		       iny
   3732  2727f			b1 e0		       lda	(sfxinstrumentlo),y
   3733  27281			95 56		       sta	sfx1frames,x
   3734  27283			a5 e0		       lda	sfxinstrumentlo
   3735  27285			18		       clc
   3736  27286			69 03		       adc	#3
   3737  27288			95 4e		       sta	sfx1pointlo,x
   3738  2728a			a5 e1		       lda	sfxinstrumenthi
   3739  2728c			69 00		       adc	#0
   3740  2728e			95 50		       sta	sfx1pointhi,x
   3741  27290			a5 e2		       lda	sfxpitchoffset
   3742  27292			95 54		       sta	sfx1poffset,x
   3743  27294			a9 00		       lda	#0
   3744  27296			95 58		       sta	sfx1tick,x
   3745  27298			a5 e3		       lda	sfxnoteindex
   3746  2729a			95 cd		       sta	sfx1notedata,x
   3747  2729c			60		       rts
   3748  2729d
   3749  2729d				    plotsprite
   3750  2729d					       ifconst	DOUBLEBUFFER
   3751  2729d			a5 d5		       lda	doublebufferstate
   3752  2729f			d0 04		       bne	skipplotspritewait
   3753  272a1					       endif		; DOUBLEBUFFER
   3754  272a1				    plotspritewait
   3755  272a1			a5 4d		       lda	visibleover
   3756  272a3			d0 fc		       bne	plotspritewait
   3757  272a5				    skipplotspritewait
   3758  272a5
   3759  272a5							;arguments: 
   3760  272a5							; temp1=lo graphicdata 
   3761  272a5							; temp2=hi graphicdata 
   3762  272a5							; temp3=palette | width byte
   3763  272a5							; temp4=x
   3764  272a5							; temp5=y
   3765  272a5							; temp6=mode
   3766  272a5			a5 46		       lda	temp5	;Y position
   3767  272a7			4a		       lsr		; 2 - Divide by 8 or 16
   3768  272a8			4a		       lsr		; 2
   3769  272a9			4a		       lsr		; 2
   3770  272aa					       if	WZONEHEIGHT = 16
   3771  272aa			4a		       lsr		; 2
   3772  272ab					       endif
   3773  272ab
   3774  272ab			aa		       tax
   3775  272ac
   3776  272ac							; the next block allows for vertical masking, and ensures we don't overwrite non-DL memory
   3777  272ac
   3778  272ac			c9 0c		       cmp	#WZONECOUNT
   3779  272ae
   3780  272ae			90 0a		       bcc	continueplotsprite1	; the sprite is fully on-screen, so carry on...
   3781  272b0							; otherwise, check to see if the bottom half is in zone 0...
   3782  272b0
   3783  272b0					       if	WZONEHEIGHT = 16
   3784  272b0			c9 0f		       cmp	#15
   3785  272b2				   -	       else
   3786  272b2				   -	       cmp	#31
   3787  272b2					       endif
   3788  272b2
   3789  272b2			d0 05		       bne	exitplotsprite1
   3790  272b4			a2 00		       ldx	#0
   3791  272b6			4c f6 f2	       jmp	continueplotsprite2
   3792  272b9				    exitplotsprite1
   3793  272b9			60		       rts
   3794  272ba
   3795  272ba				    continueplotsprite1
   3796  272ba
   3797  272ba			bd 5f f7	       lda	DLPOINTL,x	;Get pointer to DL that this sprite starts in
   3798  272bd					       ifconst	DOUBLEBUFFER
   3799  272bd			18		       clc
   3800  272be			65 d6		       adc	doublebufferdloffset
   3801  272c0					       endif		; DOUBLEBUFFER
   3802  272c0			85 63		       sta	dlpnt
   3803  272c2			bd 53 f7	       lda	DLPOINTH,x
   3804  272c5					       ifconst	DOUBLEBUFFER
   3805  272c5			69 00		       adc	#0
   3806  272c7					       endif		; DOUBLEBUFFER
   3807  272c7			85 64		       sta	dlpnt+1
   3808  272c9
   3809  272c9							;Create DL entry for upper part of sprite
   3810  272c9
   3811  272c9			b4 65		       ldy	dlend,x	;Get the index to the end of this DL
   3812  272cb
   3813  272cb				   -	       ifconst	CHECKOVERWRITE
   3814  272cb				   -	       cpy	#DLLASTOBJ
   3815  272cb				   -	       beq	checkcontinueplotsprite2
   3816  272cb				   -continueplotsprite1a
   3817  272cb					       endif
   3818  272cb
   3819  272cb			a5 42		       lda	temp1	; graphic data, lo byte
   3820  272cd			91 63		       sta	(dlpnt),y	;Low byte of data address
   3821  272cf
   3822  272cf					       ifnconst	ATOMICSPRITEUPDATE
   3823  272cf			c8		       iny
   3824  272d0			a5 47		       lda	temp6
   3825  272d2			91 63		       sta	(dlpnt),y
   3826  272d4				   -	       else
   3827  272d4				   -	       iny
   3828  272d4				   -	       sty	temp8
   3829  272d4				   -			;lda #0
   3830  272d4				   -			;sta (dlpnt),y
   3831  272d4					       endif
   3832  272d4
   3833  272d4			c8		       iny
   3834  272d5			a5 46		       lda	temp5	;Y position
   3835  272d7
   3836  272d7					       if	WZONEHEIGHT = 16
   3837  272d7			29 0f		       and	#$0F
   3838  272d9				   -	       else		; WZONEHEIGHT = 8
   3839  272d9				   -	       and	#$7
   3840  272d9					       endif
   3841  272d9
   3842  272d9			05 43		       ora	temp2	; graphic data, hi byte
   3843  272db			91 63		       sta	(dlpnt),y
   3844  272dd
   3845  272dd			c8		       iny
   3846  272de			a5 44		       lda	temp3	;palette|width
   3847  272e0			91 63		       sta	(dlpnt),y
   3848  272e2
   3849  272e2			c8		       iny
   3850  272e3			a5 45		       lda	temp4	;Horizontal position
   3851  272e5			91 63		       sta	(dlpnt),y
   3852  272e7
   3853  272e7			c8		       iny
   3854  272e8			94 65		       sty	dlend,x
   3855  272ea
   3856  272ea				   -	       ifconst	ATOMICSPRITEUPDATE
   3857  272ea				   -	       ldy	temp8
   3858  272ea				   -	       lda	temp6
   3859  272ea				   -	       sta	(dlpnt),y
   3860  272ea					       endif
   3861  272ea				    checkcontinueplotsprite2
   3862  272ea
   3863  272ea			a5 46		       lda	temp5
   3864  272ec			29 0f		       and	#(WZONEHEIGHT-1)
   3865  272ee
   3866  272ee			f0 3d		       beq	doneSPDL	;branch if it is
   3867  272f0
   3868  272f0							;Create DL entry for lower part of sprite
   3869  272f0
   3870  272f0			e8		       inx		;Next region
   3871  272f1
   3872  272f1			e0 0c		       cpx	#WZONECOUNT
   3873  272f3
   3874  272f3			90 01		       bcc	continueplotsprite2	; the second half of the sprite is fully on-screen, so carry on...
   3875  272f5			60		       rts
   3876  272f6				    continueplotsprite2
   3877  272f6
   3878  272f6			bd 5f f7	       lda	DLPOINTL,x	;Get pointer to next DL
   3879  272f9					       ifconst	DOUBLEBUFFER
   3880  272f9			18		       clc
   3881  272fa			65 d6		       adc	doublebufferdloffset
   3882  272fc					       endif		; DOUBLEBUFFER
   3883  272fc			85 63		       sta	dlpnt
   3884  272fe			bd 53 f7	       lda	DLPOINTH,x
   3885  27301					       ifconst	DOUBLEBUFFER
   3886  27301			69 00		       adc	#0
   3887  27303					       endif		; DOUBLEBUFFER
   3888  27303			85 64		       sta	dlpnt+1
   3889  27305			b4 65		       ldy	dlend,x	;Get the index to the end of this DL
   3890  27307
   3891  27307				   -	       ifconst	CHECKOVERWRITE
   3892  27307				   -	       cpy	#DLLASTOBJ
   3893  27307				   -	       bne	continueplotsprite2a
   3894  27307				   -	       rts
   3895  27307				   -continueplotsprite2a
   3896  27307					       endif
   3897  27307
   3898  27307			a5 42		       lda	temp1	; graphic data, lo byte
   3899  27309			91 63		       sta	(dlpnt),y
   3900  2730b
   3901  2730b					       ifnconst	ATOMICSPRITEUPDATE
   3902  2730b			c8		       iny
   3903  2730c			a5 47		       lda	temp6
   3904  2730e			91 63		       sta	(dlpnt),y
   3905  27310				   -	       else
   3906  27310				   -	       iny
   3907  27310				   -	       sty	temp8
   3908  27310				   -			;lda #0
   3909  27310				   -			;sta (dlpnt),y
   3910  27310					       endif
   3911  27310
   3912  27310			c8		       iny
   3913  27311			a5 46		       lda	temp5	;Y position
   3914  27313
   3915  27313					       if	WZONEHEIGHT = 16
   3916  27313			29 0f		       and	#$0F
   3917  27315			49 0f		       eor	#$0F
   3918  27317					       endif
   3919  27317				   -	       if	WZONEHEIGHT = 8
   3920  27317				   -	       and	#$07
   3921  27317				   -	       eor	#$07
   3922  27317					       endif
   3923  27317
   3924  27317			85 4a		       sta	temp9
   3925  27319			a5 43		       lda	temp2	; graphic data, hi byte
   3926  2731b			18		       clc
   3927  2731c			e5 4a		       sbc	temp9
   3928  2731e			91 63		       sta	(dlpnt),y
   3929  27320
   3930  27320			c8		       iny
   3931  27321			a5 44		       lda	temp3	;palette|width
   3932  27323			91 63		       sta	(dlpnt),y
   3933  27325
   3934  27325			c8		       iny
   3935  27326			a5 45		       lda	temp4	;Horizontal position
   3936  27328			91 63		       sta	(dlpnt),y
   3937  2732a
   3938  2732a			c8		       iny
   3939  2732b			94 65		       sty	dlend,x
   3940  2732d
   3941  2732d				   -	       ifconst	ATOMICSPRITEUPDATE
   3942  2732d				   -	       ldy	temp8
   3943  2732d				   -	       lda	temp6
   3944  2732d				   -	       sta	(dlpnt),y
   3945  2732d					       endif
   3946  2732d
   3947  2732d				    doneSPDL
   3948  2732d			60		       rts
   3949  2732e
   3950  2732e				    lockzonex
   3951  2732e				   -	       ifconst	ZONELOCKS
   3952  2732e				   -	       ldy	dlend,x
   3953  2732e				   -	       cpy	#DLLASTOBJ
   3954  2732e				   -	       beq	lockzonexreturn	; the zone is either stuffed or locked. abort!
   3955  2732e				   -	       lda	DLPOINTL,x
   3956  2732e				   -	       ifconst	DOUBLEBUFFER
   3957  2732e				   -	       clc
   3958  2732e				   -	       adc	doublebufferdloffset
   3959  2732e				   -	       endif		; DOUBLEBUFFER
   3960  2732e				   -	       sta	dlpnt
   3961  2732e				   -	       lda	DLPOINTH,x
   3962  2732e				   -	       ifconst	DOUBLEBUFFER
   3963  2732e				   -	       adc	#0
   3964  2732e				   -	       endif		; DOUBLEBUFFER
   3965  2732e				   -	       sta	dlpnt+1
   3966  2732e				   -	       iny
   3967  2732e				   -	       lda	#0
   3968  2732e				   -	       sta	(dlpnt),y
   3969  2732e				   -	       dey
   3970  2732e				   -	       tya
   3971  2732e				   -	       ldy	#(DLLASTOBJ-1)
   3972  2732e				   -	       sta	(dlpnt),y
   3973  2732e				   -	       iny
   3974  2732e				   -	       sty	dlend,x
   3975  2732e				   -lockzonexreturn
   3976  2732e				   -	       rts
   3977  2732e					       endif		; ZONELOCKS
   3978  2732e				    unlockzonex
   3979  2732e				   -	       ifconst	ZONELOCKS
   3980  2732e				   -	       ldy	dlend,x
   3981  2732e				   -	       cpy	#DLLASTOBJ
   3982  2732e				   -	       bne	unlockzonexreturn	; if the zone isn't stuffed, it's not locked. abort!
   3983  2732e				   -	       lda	DLPOINTL,x
   3984  2732e				   -	       ifconst	DOUBLEBUFFER
   3985  2732e				   -	       clc
   3986  2732e				   -	       adc	doublebufferdloffset
   3987  2732e				   -	       endif		; DOUBLEBUFFER
   3988  2732e				   -	       sta	dlpnt
   3989  2732e				   -	       lda	DLPOINTH,x
   3990  2732e				   -	       ifconst	DOUBLEBUFFER
   3991  2732e				   -	       adc	#0
   3992  2732e				   -	       endif		; DOUBLEBUFFER
   3993  2732e				   -	       sta	dlpnt+1
   3994  2732e				   -	       dey
   3995  2732e				   -			;ldy #(DLLASTOBJ-1)
   3996  2732e				   -	       lda	(dlpnt),y
   3997  2732e				   -	       tay
   3998  2732e				   -	       sty	dlend,x
   3999  2732e				   -unlockzonexreturn
   4000  2732e					       endif		; ZONELOCKS
   4001  2732e			60		       rts
   4002  2732f
   4003  2732f				    plotcharloop
   4004  2732f							; ** read from a data indirectly pointed to from temp8,temp9
   4005  2732f							; ** format is: lo_data, hi_data, palette|width, x, y
   4006  2732f							; ** format ends with lo_data | hi_data = 0
   4007  2732f
   4008  2732f					       ifconst	DOUBLEBUFFER
   4009  2732f			a5 d5		       lda	doublebufferstate
   4010  27331			d0 04		       bne	skipplotcharloopwait
   4011  27333					       endif		; DOUBLEBUFFER
   4012  27333				    plotcharloopwait
   4013  27333			a5 4d		       lda	visibleover
   4014  27335			d0 fc		       bne	plotcharloopwait
   4015  27337				    skipplotcharloopwait
   4016  27337				    plotcharlooploop
   4017  27337			a0 00		       ldy	#0
   4018  27339			b1 49		       lda	(temp8),y
   4019  2733b			85 42		       sta	temp1
   4020  2733d			c8		       iny
   4021  2733e			b1 49		       lda	(temp8),y
   4022  27340			85 43		       sta	temp2
   4023  27342			05 42		       ora	temp1
   4024  27344			d0 01		       bne	plotcharloopcontinue
   4025  27346							;the pointer=0, so return
   4026  27346			60		       rts
   4027  27347				    plotcharloopcontinue
   4028  27347			c8		       iny
   4029  27348			b1 49		       lda	(temp8),y
   4030  2734a			85 44		       sta	temp3
   4031  2734c			c8		       iny
   4032  2734d			b1 49		       lda	(temp8),y
   4033  2734f			85 45		       sta	temp4
   4034  27351			c8		       iny
   4035  27352			b1 49		       lda	(temp8),y
   4036  27354							;sta temp5 ; not needed with our late entry.
   4037  27354			20 71 f3	       jsr	plotcharactersskipentry
   4038  27357			a5 49		       lda	temp8
   4039  27359			18		       clc
   4040  2735a			69 05		       adc	#5
   4041  2735c			85 49		       sta	temp8
   4042  2735e			a5 4a		       lda	temp9
   4043  27360			69 00		       adc	#0
   4044  27362			85 4a		       sta	temp9
   4045  27364			4c 37 f3	       jmp	plotcharlooploop
   4046  27367
   4047  27367				    plotcharacters
   4048  27367					       ifconst	DOUBLEBUFFER
   4049  27367			a5 d5		       lda	doublebufferstate
   4050  27369			d0 04		       bne	skipplotcharacterswait
   4051  2736b					       endif		; DOUBLEBUFFER
   4052  2736b				    plotcharacterswait
   4053  2736b			a5 4d		       lda	visibleover
   4054  2736d			d0 fc		       bne	plotcharacterswait
   4055  2736f				    skipplotcharacterswait
   4056  2736f							;arguments: 
   4057  2736f							; temp1=lo charactermap
   4058  2736f							; temp2=hi charactermap
   4059  2736f							; temp3=palette | width byte
   4060  2736f							; temp4=x
   4061  2736f							; temp5=y
   4062  2736f
   4063  2736f			a5 46		       lda	temp5	;Y position
   4064  27371
   4065  27371				    plotcharactersskipentry
   4066  27371
   4067  27371							;ifconst ZONEHEIGHT
   4068  27371							; if ZONEHEIGHT = 16
   4069  27371							; and #$0F
   4070  27371							; endif
   4071  27371							; if ZONEHEIGHT = 8
   4072  27371							; and #$1F
   4073  27371							; endif
   4074  27371							;else
   4075  27371							; and #$0F
   4076  27371							;endif
   4077  27371
   4078  27371			aa		       tax
   4079  27372			bd 5f f7	       lda	DLPOINTL,x	;Get pointer to DL that the characters are in
   4080  27375					       ifconst	DOUBLEBUFFER
   4081  27375			18		       clc
   4082  27376			65 d6		       adc	doublebufferdloffset
   4083  27378					       endif		; DOUBLEBUFFER
   4084  27378			85 63		       sta	dlpnt
   4085  2737a			bd 53 f7	       lda	DLPOINTH,x
   4086  2737d					       ifconst	DOUBLEBUFFER
   4087  2737d			69 00		       adc	#0
   4088  2737f					       endif		; DOUBLEBUFFER
   4089  2737f			85 64		       sta	dlpnt+1
   4090  27381
   4091  27381							;Create DL entry for the characters
   4092  27381
   4093  27381			b4 65		       ldy	dlend,x	;Get the index to the end of this DL
   4094  27383
   4095  27383				   -	       ifconst	CHECKOVERWRITE
   4096  27383				   -	       cpy	#DLLASTOBJ
   4097  27383				   -	       bne	continueplotcharacters
   4098  27383				   -	       rts
   4099  27383				   -continueplotcharacters
   4100  27383					       endif
   4101  27383
   4102  27383			a5 42		       lda	temp1	; character map data, lo byte
   4103  27385			91 63		       sta	(dlpnt),y	;(1) store low address
   4104  27387
   4105  27387			c8		       iny
   4106  27388			ad 06 21	       lda	charactermode
   4107  2738b			91 63		       sta	(dlpnt),y	;(2) store mode
   4108  2738d
   4109  2738d			c8		       iny
   4110  2738e			a5 43		       lda	temp2	; character map, hi byte
   4111  27390			91 63		       sta	(dlpnt),y	;(3) store high address
   4112  27392
   4113  27392			c8		       iny
   4114  27393			a5 44		       lda	temp3	;palette|width
   4115  27395			91 63		       sta	(dlpnt),y	;(4) store palette|width
   4116  27397
   4117  27397			c8		       iny
   4118  27398			a5 45		       lda	temp4	;Horizontal position
   4119  2739a			91 63		       sta	(dlpnt),y	;(5) store horizontal position
   4120  2739c
   4121  2739c			c8		       iny
   4122  2739d			94 65		       sty	dlend,x	; save display list end byte
   4123  2739f			60		       rts
   4124  273a0
   4125  273a0
   4126  273a0					       ifconst	plotvalueonscreen
   4127  273a0				    plotcharacterslive
   4128  273a0							; a version of plotcharacters that draws live and minimally disrupts the screen...
   4129  273a0
   4130  273a0							;arguments: 
   4131  273a0							; temp1=lo charactermap
   4132  273a0							; temp2=hi charactermap
   4133  273a0							; temp3=palette | width byte
   4134  273a0							; temp4=x
   4135  273a0							; temp5=y
   4136  273a0
   4137  273a0			a5 46		       lda	temp5	;Y position
   4138  273a2
   4139  273a2			aa		       tax
   4140  273a3			bd 5f f7	       lda	DLPOINTL,x	;Get pointer to DL that the characters are in
   4141  273a6					       ifconst	DOUBLEBUFFER
   4142  273a6			18		       clc
   4143  273a7			65 d6		       adc	doublebufferdloffset
   4144  273a9					       endif		; DOUBLEBUFFER
   4145  273a9			85 63		       sta	dlpnt
   4146  273ab			bd 53 f7	       lda	DLPOINTH,x
   4147  273ae					       ifconst	DOUBLEBUFFER
   4148  273ae			69 00		       adc	#0
   4149  273b0					       endif		; DOUBLEBUFFER
   4150  273b0			85 64		       sta	dlpnt+1
   4151  273b2
   4152  273b2							;Create DL entry for the characters
   4153  273b2
   4154  273b2			b4 65		       ldy	dlend,x	;Get the index to the end of this DL
   4155  273b4
   4156  273b4				   -	       ifconst	CHECKOVERWRITE
   4157  273b4				   -	       cpy	#DLLASTOBJ
   4158  273b4				   -	       bne	continueplotcharacterslive
   4159  273b4				   -	       rts
   4160  273b4				   -continueplotcharacterslive
   4161  273b4					       endif
   4162  273b4
   4163  273b4			a5 42		       lda	temp1	; character map data, lo byte
   4164  273b6			91 63		       sta	(dlpnt),y	;(1) store low address
   4165  273b8
   4166  273b8			c8		       iny
   4167  273b9							; we don't add the second byte yet, since the charmap could briefly
   4168  273b9							; render without a proper character map address, width, or position.
   4169  273b9			ad 06 21	       lda	charactermode
   4170  273bc			91 63		       sta	(dlpnt),y	;(2) store mode
   4171  273be
   4172  273be			c8		       iny
   4173  273bf			a5 43		       lda	temp2	; character map, hi byte
   4174  273c1			91 63		       sta	(dlpnt),y	;(3) store high address
   4175  273c3
   4176  273c3			c8		       iny
   4177  273c4			a5 44		       lda	temp3	;palette|width
   4178  273c6			91 63		       sta	(dlpnt),y	;(4) store palette|width
   4179  273c8
   4180  273c8			c8		       iny
   4181  273c9			a5 45		       lda	temp4	;Horizontal position
   4182  273cb			91 63		       sta	(dlpnt),y	;(5) store horizontal position
   4183  273cd
   4184  273cd			c8		       iny
   4185  273ce			94 65		       sty	dlend,x	; save display list end byte
   4186  273d0
   4187  273d0			60		       rts
   4188  273d1					       endif		;plotcharacterslive
   4189  273d1
   4190  273d1					       ifconst	USED_PLOTVALUE
   4191  273d1				    plotvalue
   4192  273d1							; calling 7800basic command:
   4193  273d1							; plotvalue digit_gfx palette variable/data number_of_digits screen_x screen_y
   4194  273d1							; ...displays the variable as BCD digits
   4195  273d1							;
   4196  273d1							; asm sub arguments: 
   4197  273d1							; temp1=lo charactermap
   4198  273d1							; temp2=hi charactermap
   4199  273d1							; temp3=palette | width byte
   4200  273d1							; temp4=x
   4201  273d1							; temp5=y
   4202  273d1							; temp6=number of digits
   4203  273d1							; temp7=lo variable
   4204  273d1							; temp8=hi variable
   4205  273d1							; temp9=character mode
   4206  273d1
   4207  273d1			00 47	    plotdigitcount =	temp6
   4208  273d1
   4209  273d1				   -	       ifconst	ZONELOCKS
   4210  273d1				   -	       ldx	temp5
   4211  273d1				   -	       ldy	dlend,x
   4212  273d1				   -	       cpy	#DLLASTOBJ
   4213  273d1				   -	       bne	carryonplotvalue
   4214  273d1				   -	       rts
   4215  273d1				   -carryonplotvalue
   4216  273d1					       endif
   4217  273d1
   4218  273d1			a9 00		       lda	#0
   4219  273d3			a8		       tay
   4220  273d4			ae ad 01	       ldx	valbufend
   4221  273d7
   4222  273d7			a5 47		       lda	plotdigitcount
   4223  273d9			29 01		       and	#1
   4224  273db			f0 07		       beq	pvnibble2char
   4225  273dd			a9 00		       lda	#0
   4226  273df			9d 00 20	       sta	VALBUFFER,x	; just in case we skip this digit
   4227  273e2			f0 11		       beq	pvnibble2char_skipnibble
   4228  273e4
   4229  273e4				    pvnibble2char
   4230  273e4							; high nibble...
   4231  273e4			b1 48		       lda	(temp7),y
   4232  273e6			29 f0		       and	#$f0
   4233  273e8			4a		       lsr
   4234  273e9			4a		       lsr
   4235  273ea			4a		       lsr
   4236  273eb					       ifnconst	DOUBLEWIDE	; multiply value by 2 for double-width
   4237  273eb			4a		       lsr
   4238  273ec					       endif
   4239  273ec
   4240  273ec			18		       clc
   4241  273ed			65 42		       adc	temp1	; add the offset to character graphics to our value
   4242  273ef			9d 00 20	       sta	VALBUFFER,x
   4243  273f2			e8		       inx
   4244  273f3			c6 47		       dec	plotdigitcount
   4245  273f5
   4246  273f5				    pvnibble2char_skipnibble
   4247  273f5							; low nibble...
   4248  273f5			b1 48		       lda	(temp7),y
   4249  273f7			29 0f		       and	#$0f
   4250  273f9				   -	       ifconst	DOUBLEWIDE	; multiply value by 2 for double-width
   4251  273f9				   -	       asl
   4252  273f9					       endif
   4253  273f9			18		       clc
   4254  273fa			65 42		       adc	temp1	; add the offset to character graphics to our value
   4255  273fc			9d 00 20	       sta	VALBUFFER,x
   4256  273ff			e8		       inx
   4257  27400			c8		       iny
   4258  27401
   4259  27401			c6 47		       dec	plotdigitcount
   4260  27403			d0 df		       bne	pvnibble2char
   4261  27405
   4262  27405							;point to the start of our valuebuffer
   4263  27405			18		       clc
   4264  27406			a9 00		       lda	#<VALBUFFER
   4265  27408			6d ad 01	       adc	valbufend
   4266  2740b			85 42		       sta	temp1
   4267  2740d			a9 20		       lda	#>VALBUFFER
   4268  2740f			69 00		       adc	#0
   4269  27411			85 43		       sta	temp2
   4270  27413
   4271  27413							;advance valbufend to the end of our value buffer
   4272  27413			8e ad 01	       stx	valbufend
   4273  27416
   4274  27416				   -	       ifnconst	plotvalueonscreen
   4275  27416				   -	       jmp	plotcharacters
   4276  27416					       else
   4277  27416			4c a0 f3	       jmp	plotcharacterslive
   4278  27419					       endif
   4279  27419
   4280  27419					       endif		; USED_PLOTVALUE
   4281  27419
   4282  27419
   4283  27419				   -	       ifconst	USED_PLOTVALUEEXTRA
   4284  27419				   -plotdigitcount =	temp6
   4285  27419				   -plotvalueextra
   4286  27419				   -			; calling 7800basic command:
   4287  27419				   -			; plotvalue digit_gfx palette variable/data number_of_digits screen_x screen_y
   4288  27419				   -			; ...displays the variable as BCD digits
   4289  27419				   -			;
   4290  27419				   -			; asm sub arguments: 
   4291  27419				   -			; temp1=lo charactermap
   4292  27419				   -			; temp2=hi charactermap
   4293  27419				   -			; temp3=palette | width byte
   4294  27419				   -			; temp4=x
   4295  27419				   -			; temp5=y
   4296  27419				   -			; temp6=number of digits
   4297  27419				   -			; temp7=lo variable
   4298  27419				   -			; temp8=hi variable
   4299  27419				   -
   4300  27419				   -	       lda	#0
   4301  27419				   -	       tay
   4302  27419				   -	       ldx	valbufend
   4303  27419				   -	       ifnconst	plotvalueonscreen
   4304  27419				   -	       sta	VALBUFFER,x
   4305  27419				   -	       endif
   4306  27419				   -
   4307  27419				   -	       lda	plotdigitcount
   4308  27419				   -	       and	#1
   4309  27419				   -
   4310  27419				   -	       bne	pvnibble2char_skipnibbleextra
   4311  27419				   -
   4312  27419				   -pvnibble2charextra
   4313  27419				   -			; high nibble...
   4314  27419				   -	       lda	(temp7),y
   4315  27419				   -	       and	#$f0
   4316  27419				   -	       lsr
   4317  27419				   -	       lsr
   4318  27419				   -	       ifnconst	DOUBLEWIDE	; multiply value by 2 for double-width
   4319  27419				   -	       lsr
   4320  27419				   -	       endif
   4321  27419				   -	       clc
   4322  27419				   -	       adc	temp1	; add the offset to character graphics to our value
   4323  27419				   -	       sta	VALBUFFER,x
   4324  27419				   -	       inx
   4325  27419				   -
   4326  27419				   -			; second half of the digit
   4327  27419				   -	       clc
   4328  27419				   -	       adc	#1
   4329  27419				   -	       sta	VALBUFFER,x
   4330  27419				   -	       inx
   4331  27419				   -
   4332  27419				   -pvnibble2char_skipnibbleextra
   4333  27419				   -			; low nibble...
   4334  27419				   -	       lda	(temp7),y
   4335  27419				   -	       and	#$0f
   4336  27419				   -	       ifconst	DOUBLEWIDE	; multiply value by 2 for double-width
   4337  27419				   -	       asl
   4338  27419				   -	       endif
   4339  27419				   -	       asl
   4340  27419				   -
   4341  27419				   -	       clc
   4342  27419				   -	       adc	temp1	; add the offset to character graphics to our value
   4343  27419				   -	       sta	VALBUFFER,x
   4344  27419				   -	       inx
   4345  27419				   -
   4346  27419				   -	       clc
   4347  27419				   -	       adc	#1
   4348  27419				   -	       sta	VALBUFFER,x
   4349  27419				   -	       inx
   4350  27419				   -	       iny
   4351  27419				   -
   4352  27419				   -	       dec	plotdigitcount
   4353  27419				   -	       bne	pvnibble2charextra
   4354  27419				   -
   4355  27419				   -			;point to the start of our valuebuffer
   4356  27419				   -	       clc
   4357  27419				   -	       lda	#<VALBUFFER
   4358  27419				   -	       adc	valbufend
   4359  27419				   -	       sta	temp1
   4360  27419				   -	       lda	#>VALBUFFER
   4361  27419				   -	       adc	#0
   4362  27419				   -	       sta	temp2
   4363  27419				   -
   4364  27419				   -			;advance valbufend to the end of our value buffer
   4365  27419				   -	       stx	valbufend
   4366  27419				   -
   4367  27419				   -	       ifnconst	plotvalueonscreen
   4368  27419				   -	       jmp	plotcharacters
   4369  27419				   -	       else
   4370  27419				   -	       jmp	plotcharacterslive
   4371  27419				   -	       endif
   4372  27419					       endif		; USED_PLOTVALUEEXTRA
   4373  27419
   4374  27419				    boxcollision
   4375  27419							; the worst case cycle-time for the code below is 43 cycles.
   4376  27419							; unfortunately, prior to getting here we've burned 44 cycles in argument setup. eep!
   4377  27419
   4378  27419							;__boxx1 = accumulator
   4379  27419							;__boxy1 = y
   4380  27419			00 44	    __boxw1    =	temp3
   4381  27419			00 45	    __boxh1    =	temp4
   4382  27419
   4383  27419			00 46	    __boxx2    =	temp5
   4384  27419			00 47	    __boxy2    =	temp6
   4385  27419			00 48	    __boxw2    =	temp7
   4386  27419			00 49	    __boxh2    =	temp8
   4387  27419
   4388  27419				    DoXCollisionCheck
   4389  27419							;lda __boxx1 ; skipped. already in the accumulator
   4390  27419			c5 46		       cmp	__boxx2	;3
   4391  2741b			b0 07		       bcs	X1isbiggerthanX2	;2/3
   4392  2741d				    X2isbiggerthanX1
   4393  2741d							; carry is clear
   4394  2741d			65 44		       adc	__boxw1	;3
   4395  2741f			c5 46		       cmp	__boxx2	;3
   4396  27421			b0 08		       bcs	DoYCollisionCheck	;3/2
   4397  27423			60		       rts		;6 - carry clear, no collision
   4398  27424				    X1isbiggerthanX2
   4399  27424			18		       clc		;2
   4400  27425			e5 48		       sbc	__boxw2	;3
   4401  27427			c5 46		       cmp	__boxx2	;3
   4402  27429			b0 13		       bcs	noboxcollision	;3/2
   4403  2742b				    DoYCollisionCheck
   4404  2742b			98		       tya		; 2 ; use to be "lda __boxy1"
   4405  2742c			c5 47		       cmp	__boxy2	;3
   4406  2742e			b0 05		       bcs	Y1isbiggerthanY2	;3/2
   4407  27430				    Y2isbiggerthanY1
   4408  27430							; carry is clear
   4409  27430			65 45		       adc	__boxh1	;3
   4410  27432			c5 47		       cmp	__boxy2	;3
   4411  27434			60		       rts		;6 
   4412  27435				    Y1isbiggerthanY2
   4413  27435			18		       clc		;2
   4414  27436			e5 49		       sbc	__boxh2	;3
   4415  27438			c5 47		       cmp	__boxy2	;3
   4416  2743a			b0 02		       bcs	noboxcollision	;3/2
   4417  2743c				    yesboxcollision
   4418  2743c			38		       sec		;2
   4419  2743d			60		       rts		;6
   4420  2743e				    noboxcollision
   4421  2743e			18		       clc		;2
   4422  2743f			60		       rts		;6
   4423  27440
   4424  27440				    randomize
   4425  27440			a5 40		       lda	rand
   4426  27442			4a		       lsr
   4427  27443			26 41		       rol	rand16
   4428  27445			90 02		       bcc	noeor
   4429  27447			49 b4		       eor	#$B4
   4430  27449				    noeor
   4431  27449			85 40		       sta	rand
   4432  2744b			45 41		       eor	rand16
   4433  2744d			60		       rts
   4434  2744e
   4435  2744e							; bcd conversion routine courtesy Omegamatrix
   4436  2744e							; http://atariage.com/forums/blog/563/entry-10832-hex-to-bcd-conversion-0-99/
   4437  2744e				    converttobcd
   4438  2744e							;value to convert is in the accumulator
   4439  2744e			85 42		       sta	temp1
   4440  27450			4a		       lsr
   4441  27451			65 42		       adc	temp1
   4442  27453			6a		       ror
   4443  27454			4a		       lsr
   4444  27455			4a		       lsr
   4445  27456			65 42		       adc	temp1
   4446  27458			6a		       ror
   4447  27459			65 42		       adc	temp1
   4448  2745b			6a		       ror
   4449  2745c			4a		       lsr
   4450  2745d			29 3c		       and	#$3C
   4451  2745f			85 43		       sta	temp2
   4452  27461			4a		       lsr
   4453  27462			65 43		       adc	temp2
   4454  27464			65 42		       adc	temp1
   4455  27466			60		       rts		; return the result in the accumulator
   4456  27467
   4457  27467							; Y and A contain multiplicands, result in A
   4458  27467				    mul8
   4459  27467			84 42		       sty	temp1
   4460  27469			85 43		       sta	temp2
   4461  2746b			a9 00		       lda	#0
   4462  2746d				    reptmul8
   4463  2746d			46 43		       lsr	temp2
   4464  2746f			90 03		       bcc	skipmul8
   4465  27471			18		       clc
   4466  27472			65 42		       adc	temp1
   4467  27474							;bcs donemul8 might save cycles?
   4468  27474				    skipmul8
   4469  27474							;beq donemul8 might save cycles?
   4470  27474			06 42		       asl	temp1
   4471  27476			d0 f5		       bne	reptmul8
   4472  27478				    donemul8
   4473  27478			60		       rts
   4474  27479
   4475  27479				    div8
   4476  27479							; A=numerator Y=denominator, result in A
   4477  27479			c0 02		       cpy	#2
   4478  2747b			90 0a		       bcc	div8end+1	;div by 0 = bad, div by 1=no calc needed, so bail out
   4479  2747d			84 42		       sty	temp1
   4480  2747f			a0 ff		       ldy	#$ff
   4481  27481				    div8loop
   4482  27481			e5 42		       sbc	temp1
   4483  27483			c8		       iny
   4484  27484			b0 fb		       bcs	div8loop
   4485  27486				    div8end
   4486  27486			98		       tya
   4487  27487							; result in A
   4488  27487			60		       rts
   4489  27488
   4490  27488							; Y and A contain multiplicands, result in temp2,A=low, temp1=high
   4491  27488				    mul16
   4492  27488			84 42		       sty	temp1
   4493  2748a			85 43		       sta	temp2
   4494  2748c
   4495  2748c			a9 00		       lda	#0
   4496  2748e			a2 08		       ldx	#8
   4497  27490			46 42		       lsr	temp1
   4498  27492				    mul16_1
   4499  27492			90 03		       bcc	mul16_2
   4500  27494			18		       clc
   4501  27495			65 43		       adc	temp2
   4502  27497				    mul16_2
   4503  27497			6a		       ror
   4504  27498			66 42		       ror	temp1
   4505  2749a			ca		       dex
   4506  2749b			d0 f5		       bne	mul16_1
   4507  2749d			85 43		       sta	temp2
   4508  2749f			60		       rts
   4509  274a0
   4510  274a0							; div int/int
   4511  274a0							; numerator in A, denom in temp1
   4512  274a0							; returns with quotient in A, remainder in temp1
   4513  274a0				    div16
   4514  274a0			85 43		       sta	temp2
   4515  274a2			84 42		       sty	temp1
   4516  274a4			a9 00		       lda	#0
   4517  274a6			a2 08		       ldx	#8
   4518  274a8			06 43		       asl	temp2
   4519  274aa				    div16_1
   4520  274aa			2a		       rol
   4521  274ab			c5 42		       cmp	temp1
   4522  274ad			90 02		       bcc	div16_2
   4523  274af			e5 42		       sbc	temp1
   4524  274b1				    div16_2
   4525  274b1			26 43		       rol	temp2
   4526  274b3			ca		       dex
   4527  274b4			d0 f4		       bne	div16_1
   4528  274b6			85 42		       sta	temp1
   4529  274b8			a5 43		       lda	temp2
   4530  274ba			60		       rts
   4531  274bb
   4532  274bb					       ifconst	bankswitchmode
   4533  274bb				    BS_jsr
   4534  274bb				   -	       ifconst	MCPDEVCART
   4535  274bb				   -	       ora	#$18
   4536  274bb				   -	       sta	$3000
   4537  274bb					       else
   4538  274bb			8d 00 80	       sta	$8000
   4539  274be					       endif
   4540  274be			68		       pla
   4541  274bf			aa		       tax
   4542  274c0			68		       pla
   4543  274c1			60		       rts
   4544  274c2
   4545  274c2				    BS_return
   4546  274c2			68		       pla		; bankswitch bank
   4547  274c3				   -	       ifconst	BANKRAM
   4548  274c3				   -	       sta	currentbank
   4549  274c3				   -	       ora	currentrambank
   4550  274c3					       endif
   4551  274c3				   -	       ifconst	MCPDEVCART
   4552  274c3				   -	       ora	#$18
   4553  274c3				   -	       sta	$3000
   4554  274c3					       else
   4555  274c3			8d 00 80	       sta	$8000
   4556  274c6					       endif
   4557  274c6			68		       pla		; bankswitch $0 flag
   4558  274c7			60		       rts
   4559  274c8					       endif
   4560  274c8
   4561  274c8				    checkselectswitch
   4562  274c8			ad 82 02	       lda	SWCHB	; first check the real select switch...
   4563  274cb			29 02		       and	#%00000010
   4564  274cd					       ifnconst	MOUSESUPPORT
   4565  274cd			f0 05		       beq	checkselectswitchreturn	; switch is pressed
   4566  274cf			ad 80 02	       lda	SWCHA	; then check the soft "select" joysick code...
   4567  274d2			29 b0		       and	#%10110000	; R_DU
   4568  274d4					       endif		; MOUSESUPPORT
   4569  274d4				    checkselectswitchreturn
   4570  274d4			60		       rts
   4571  274d5
   4572  274d5				    checkresetswitch
   4573  274d5			ad 82 02	       lda	SWCHB	; first check the real reset switch...
   4574  274d8			29 01		       and	#%00000001
   4575  274da					       ifnconst	MOUSESUPPORT
   4576  274da			f0 05		       beq	checkresetswitchreturn	; switch is pressed
   4577  274dc			ad 80 02	       lda	SWCHA	; then check the soft "reset" joysick code...
   4578  274df			29 70		       and	#%01110000	; _LDU
   4579  274e1					       endif		; MOUSESUPPORT
   4580  274e1				    checkresetswitchreturn
   4581  274e1			60		       rts
   4582  274e2
   4583  274e2				   -	       ifconst	FINESCROLLENABLED
   4584  274e2				   -finescrolldlls
   4585  274e2				   -	       ldx	temp1	; first DLL index x3
   4586  274e2				   -	       lda	DLLMEM,x
   4587  274e2				   -	       and	#%11110000
   4588  274e2				   -	       ora	finescrolly
   4589  274e2				   -	       sta	DLLMEM,x
   4590  274e2				   -
   4591  274e2				   -	       ldx	temp2	; last DLL index x3
   4592  274e2				   -	       lda	DLLMEM,x
   4593  274e2				   -	       and	#%11110000
   4594  274e2				   -	       ora	finescrolly
   4595  274e2				   -	       eor	#(WZONEHEIGHT-1)
   4596  274e2				   -	       sta	DLLMEM,x
   4597  274e2				   -	       rts
   4598  274e2					       endif		; FINESCROLLENABLED
   4599  274e2
   4600  274e2				   -	       ifconst	USED_ADJUSTVISIBLE
   4601  274e2				   -adjustvisible
   4602  274e2				   -			; called with temp1=first visible zone *3, temp2=last visible zone *3
   4603  274e2				   -	       jsr	waitforvblankstart	; ensure vblank just started
   4604  274e2				   -	       ldx	visibleDLLstart
   4605  274e2				   -findfirstinterrupt
   4606  274e2				   -	       lda	DLLMEM,x
   4607  274e2				   -	       bmi	foundfirstinterrupt
   4608  274e2				   -	       inx
   4609  274e2				   -	       inx
   4610  274e2				   -	       inx
   4611  274e2				   -	       bne	findfirstinterrupt
   4612  274e2				   -foundfirstinterrupt
   4613  274e2				   -	       and	#%01111111	; clear the interrupt bit
   4614  274e2				   -	       sta	DLLMEM,x
   4615  274e2				   -	       ifconst	DOUBLEBUFFER
   4616  274e2				   -	       sta	DLLMEM+DBOFFSET,x
   4617  274e2				   -	       endif		; DOUBLEBUFFER
   4618  274e2				   -	       ldx	overscanDLLstart
   4619  274e2				   -findlastinterrupt
   4620  274e2				   -	       lda	DLLMEM,x
   4621  274e2				   -	       bmi	foundlastinterrupt
   4622  274e2				   -	       dex
   4623  274e2				   -	       dex
   4624  274e2				   -	       dex
   4625  274e2				   -	       bne	findlastinterrupt
   4626  274e2				   -foundlastinterrupt
   4627  274e2				   -	       and	#%01111111	; clear the interrupt bit
   4628  274e2				   -	       sta	DLLMEM,x
   4629  274e2				   -	       ifconst	DOUBLEBUFFER
   4630  274e2				   -	       sta	DLLMEM+DBOFFSET,x
   4631  274e2				   -	       endif		; DOUBLEBUFFER
   4632  274e2				   -			;now we need to set the new interrupts
   4633  274e2				   -	       clc
   4634  274e2				   -	       lda	temp1
   4635  274e2				   -	       adc	visibleDLLstart
   4636  274e2				   -	       tax
   4637  274e2				   -	       lda	DLLMEM,x
   4638  274e2				   -	       ora	#%10000000
   4639  274e2				   -	       sta	DLLMEM,x
   4640  274e2				   -	       ifconst	DOUBLEBUFFER
   4641  274e2				   -	       sta	DLLMEM+DBOFFSET,x
   4642  274e2				   -	       endif		; DOUBLEBUFFER
   4643  274e2				   -	       clc
   4644  274e2				   -	       lda	temp2
   4645  274e2				   -	       adc	visibleDLLstart
   4646  274e2				   -	       tax
   4647  274e2				   -	       lda	DLLMEM,x
   4648  274e2				   -	       ora	#%10000000
   4649  274e2				   -	       sta	DLLMEM,x
   4650  274e2				   -	       ifconst	DOUBLEBUFFER
   4651  274e2				   -	       sta	DLLMEM+DBOFFSET,x
   4652  274e2				   -	       endif		; DOUBLEBUFFER
   4653  274e2				   -	       jsr	vblankresync
   4654  274e2				   -	       rts
   4655  274e2					       endif		; USED_ADJUSTVISIBLE
   4656  274e2
   4657  274e2				    vblankresync
   4658  274e2			20 a3 f5	       jsr	waitforvblankstart	; ensure vblank just started
   4659  274e5			a9 00		       lda	#0
   4660  274e7			85 4d		       sta	visibleover
   4661  274e9			a9 03		       lda	#3
   4662  274eb			8d b2 01	       sta	interruptindex
   4663  274ee			60		       rts
   4664  274ef
   4665  274ef				    createallgamedlls
   4666  274ef			a2 00		       ldx	#0
   4667  274f1			a9 19		       lda	#NVLINES
   4668  274f3			ac 09 21	       ldy	paldetected
   4669  274f6			f0 03		       beq	skipcreatePALpadding
   4670  274f8			18		       clc
   4671  274f9			69 15		       adc	#21
   4672  274fb				    skipcreatePALpadding
   4673  274fb			20 39 f5	       jsr	createnonvisibledlls
   4674  274fe			8e 3c 21	       stx	visibleDLLstart
   4675  27501			20 73 f5	       jsr	createvisiblezones
   4676  27504			8e 3d 21	       stx	overscanDLLstart
   4677  27507				    createallgamedllscontinue
   4678  27507			a9 50		       lda	#(NVLINES+55)	; extras for PAL
   4679  27509			20 39 f5	       jsr	createnonvisibledlls
   4680  2750c
   4681  2750c			ae 3c 21	       ldx	visibleDLLstart
   4682  2750f			bd 00 18	       lda	DLLMEM,x
   4683  27512			09 80		       ora	#%10000000	; NMI 1 - start of visible screen
   4684  27514			9d 00 18	       sta	DLLMEM,x
   4685  27517					       ifconst	DOUBLEBUFFER
   4686  27517			9d 70 18	       sta	DLLMEM+DBOFFSET,x
   4687  2751a					       endif		; DOUBLEBUFFER
   4688  2751a
   4689  2751a			ae 3d 21	       ldx	overscanDLLstart
   4690  2751d			bd 00 18	       lda	DLLMEM,x
   4691  27520			09 83		       ora	#%10000011	; NMI 2 - end of visible screen
   4692  27522			29 f3		       and	#%11110011	; change this to a 1-line DLL, so there's time enough for the "deeper overscan" DLL
   4693  27524			9d 00 18	       sta	DLLMEM,x
   4694  27527					       ifconst	DOUBLEBUFFER
   4695  27527			9d 70 18	       sta	DLLMEM+DBOFFSET,x
   4696  2752a					       endif		; DOUBLEBUFFER
   4697  2752a
   4698  2752a			e8		       inx
   4699  2752b			e8		       inx
   4700  2752c			e8		       inx
   4701  2752d
   4702  2752d			bd 00 18	       lda	DLLMEM,x
   4703  27530			09 80		       ora	#%10000000	; NMI 3 - deeper overscan
   4704  27532			9d 00 18	       sta	DLLMEM,x
   4705  27535					       ifconst	DOUBLEBUFFER
   4706  27535			9d 70 18	       sta	DLLMEM+DBOFFSET,x
   4707  27538					       endif		; DOUBLEBUFFER
   4708  27538
   4709  27538			60		       rts
   4710  27539
   4711  27539				    createnonvisibledlls
   4712  27539			85 42		       sta	temp1
   4713  2753b			4a		       lsr
   4714  2753c			4a		       lsr
   4715  2753d			4a		       lsr
   4716  2753e			4a		       lsr		; /16
   4717  2753f			f0 09		       beq	skipcreatenonvisibledlls1loop
   4718  27541			a8		       tay
   4719  27542				    createnonvisibledlls1loop
   4720  27542			a9 4f		       lda	#%01001111	;low nibble=16 lines, high nibble=Holey DMA
   4721  27544			20 59 f5	       jsr	createblankdllentry
   4722  27547			88		       dey
   4723  27548			d0 f8		       bne	createnonvisibledlls1loop
   4724  2754a				    skipcreatenonvisibledlls1loop
   4725  2754a			a5 42		       lda	temp1
   4726  2754c			29 0f		       and	#%00001111
   4727  2754e			f0 08		       beq	createnonvisibledllsreturn
   4728  27550			38		       sec
   4729  27551			e9 01		       sbc	#1
   4730  27553			09 40		       ora	#%01000000
   4731  27555			20 59 f5	       jsr	createblankdllentry
   4732  27558				    createnonvisibledllsreturn
   4733  27558			60		       rts
   4734  27559
   4735  27559				    createblankdllentry
   4736  27559			9d 00 18	       sta	DLLMEM,x
   4737  2755c					       ifconst	DOUBLEBUFFER
   4738  2755c			9d 70 18	       sta	DLLMEM+DBOFFSET,x
   4739  2755f					       endif		; DOUBLEBUFFER
   4740  2755f			e8		       inx
   4741  27560			a9 21		       lda	#$21	; blank
   4742  27562			9d 00 18	       sta	DLLMEM,x
   4743  27565					       ifconst	DOUBLEBUFFER
   4744  27565			9d 70 18	       sta	DLLMEM+DBOFFSET,x
   4745  27568					       endif		; DOUBLEBUFFER
   4746  27568			e8		       inx
   4747  27569			a9 00		       lda	#$00
   4748  2756b			9d 00 18	       sta	DLLMEM,x
   4749  2756e					       ifconst	DOUBLEBUFFER
   4750  2756e			9d 70 18	       sta	DLLMEM+DBOFFSET,x
   4751  27571					       endif		; DOUBLEBUFFER
   4752  27571			e8		       inx
   4753  27572			60		       rts
   4754  27573
   4755  27573				    createvisiblezones
   4756  27573			a0 00		       ldy	#0
   4757  27575				    createvisiblezonesloop
   4758  27575			b9 6b f7	       lda.w	DLHEIGHT,y
   4759  27578			09 40		       ora	#(WZONEHEIGHT * 4)	; set Holey DMA for 8 or 16 tall zones
   4760  2757a			9d 00 18	       sta	DLLMEM,x
   4761  2757d					       ifconst	DOUBLEBUFFER
   4762  2757d			9d 70 18	       sta	DLLMEM+DBOFFSET,x
   4763  27580					       endif		; DOUBLEBUFFER
   4764  27580			e8		       inx
   4765  27581			b9 53 f7	       lda	DLPOINTH,y
   4766  27584			9d 00 18	       sta	DLLMEM,x
   4767  27587					       ifconst	DOUBLEBUFFER
   4768  27587			9d 70 18	       sta	DLLMEM+DBOFFSET,x
   4769  2758a					       endif		; DOUBLEBUFFER
   4770  2758a			e8		       inx
   4771  2758b			b9 5f f7	       lda	DLPOINTL,y
   4772  2758e			9d 00 18	       sta	DLLMEM,x
   4773  27591					       ifconst	DOUBLEBUFFER
   4774  27591			18		       clc
   4775  27592			69 ff		       adc	#DOUBLEBUFFEROFFSET
   4776  27594			9d 70 18	       sta	DLLMEM+DBOFFSET,x
   4777  27597			90 03		       bcc	skiphidoublebufferadjust	; dlls are big endian, so we need to fix the hi byte after-the-fact...
   4778  27599			fe 6f 18	       inc	DLLMEM+DBOFFSET-1,x
   4779  2759c				    skiphidoublebufferadjust
   4780  2759c					       endif		; DOUBLEBUFFER
   4781  2759c			e8		       inx
   4782  2759d			c8		       iny
   4783  2759e			c0 0c		       cpy	#WZONECOUNT
   4784  275a0			d0 d3		       bne	createvisiblezonesloop
   4785  275a2			60		       rts
   4786  275a3
   4787  275a3				    waitforvblankstart
   4788  275a3				    visibleoverwait
   4789  275a3			24 28		       BIT	MSTAT
   4790  275a5			10 fc		       bpl	visibleoverwait
   4791  275a7				    vblankstartwait
   4792  275a7			24 28		       BIT	MSTAT
   4793  275a9			30 fc		       bmi	vblankstartwait
   4794  275ab			60		       rts
   4795  275ac
   4796  275ac					       ifconst	DOUBLEBUFFER
   4797  275ac				    flipdisplaybufferreturn
   4798  275ac			60		       rts
   4799  275ad				    flipdisplaybuffer
   4800  275ad			a5 d5		       lda	doublebufferstate
   4801  275af			f0 fb		       beq	flipdisplaybufferreturn	; exit if we're not in double-buffer
   4802  275b1
   4803  275b1			20 3d f1	       jsr	terminatedisplaybuffer	; terminate the working buffer before we flip
   4804  275b4
   4805  275b4			a5 d5		       lda	doublebufferstate
   4806  275b6			4a		       lsr		; /2, so we'll see 0 or 1, rather than 1 or 3
   4807  275b7			aa		       tax
   4808  275b8
   4809  275b8							; ensure we don't flip mid-display. otherwise the displayed DL will be the one the game is working on.
   4810  275b8
   4811  275b8				    flipdisplaybufferwait1
   4812  275b8			a5 4d		       lda	visibleover
   4813  275ba			f0 fc		       beq	flipdisplaybufferwait1
   4814  275bc
   4815  275bc				    flipdisplaybufferwait
   4816  275bc			a5 4d		       lda	visibleover
   4817  275be			d0 fc		       bne	flipdisplaybufferwait
   4818  275c0
   4819  275c0			ad b4 01	       lda	doublebufferminimumframetarget
   4820  275c3			f0 0b		       beq	skipminimumframecode
   4821  275c5			ad b5 01	       lda	doublebufferminimumframeindex
   4822  275c8			d0 ee		       bne	flipdisplaybufferwait1
   4823  275ca			ad b4 01	       lda	doublebufferminimumframetarget
   4824  275cd			8d b5 01	       sta	doublebufferminimumframeindex
   4825  275d0				    skipminimumframecode
   4826  275d0
   4827  275d0			bd 30 f6	       lda	DLLMEMLutHi,x
   4828  275d3			85 2c		       sta	DPPH
   4829  275d5			bd 2e f6	       lda	DLLMEMLutLo,x
   4830  275d8			85 30		       sta	DPPL
   4831  275da
   4832  275da			bd 32 f6	       lda	NewPageflipstate,x
   4833  275dd			85 d5		       sta	doublebufferstate
   4834  275df			bd 34 f6	       lda	NewPageflipoffset,x
   4835  275e2			85 d6		       sta	doublebufferdloffset
   4836  275e4
   4837  275e4			a5 d7		       lda	doublebufferbufferdirty
   4838  275e6			f0 c4		       beq	flipdisplaybufferreturn
   4839  275e8
   4840  275e8							; The doublebuffer buffer is dirty, so the game code must have issued a savescreen recently.
   4841  275e8							; To make savescreen work with the new working buffer, we need to copy over the saved objects
   4842  275e8							; from the displayed buffer to the working buffer...
   4843  275e8
   4844  275e8			a5 d6		       lda	doublebufferdloffset
   4845  275ea			49 ff		       eor	#DOUBLEBUFFEROFFSET
   4846  275ec			85 47		       sta	temp6	; make temp6 the anti-doublebufferdloffset variable
   4847  275ee
   4848  275ee			a2 0b		       ldx	#(WZONECOUNT-1)
   4849  275f0				    copybufferzoneloop
   4850  275f0
   4851  275f0			bd 5f f7	       lda	DLPOINTL,x
   4852  275f3			18		       clc
   4853  275f4			65 d6		       adc	doublebufferdloffset
   4854  275f6			85 42		       sta	temp1
   4855  275f8			bd 53 f7	       lda	DLPOINTH,x
   4856  275fb			69 00		       adc	#0
   4857  275fd			85 43		       sta	temp2
   4858  275ff
   4859  275ff			bd 5f f7	       lda	DLPOINTL,x
   4860  27602			18		       clc
   4861  27603			65 47		       adc	temp6
   4862  27605			85 44		       sta	temp3
   4863  27607			bd 53 f7	       lda	DLPOINTH,x
   4864  2760a			69 00		       adc	#0
   4865  2760c			85 45		       sta	temp4
   4866  2760e
   4867  2760e			b5 82		       lda	dlendsave,x
   4868  27610			a8		       tay
   4869  27611				    copybuffercharsloop
   4870  27611			b1 44		       lda	(temp3),y
   4871  27613			91 42		       sta	(temp1),y
   4872  27615			88		       dey
   4873  27616			10 f9		       bpl	copybuffercharsloop
   4874  27618			ca		       dex
   4875  27619			10 d5		       bpl	copybufferzoneloop
   4876  2761b			a9 00		       lda	#0
   4877  2761d			85 d7		       sta	doublebufferbufferdirty
   4878  2761f			60		       rts
   4879  27620
   4880  27620				    doublebufferoff
   4881  27620			a9 01		       lda	#1
   4882  27622			85 d5		       sta	doublebufferstate
   4883  27624			20 ad f5	       jsr	flipdisplaybuffer
   4884  27627			a9 00		       lda	#0
   4885  27629			85 d5		       sta	doublebufferstate
   4886  2762b			85 d6		       sta	doublebufferdloffset
   4887  2762d			60		       rts
   4888  2762e
   4889  2762e				    DLLMEMLutLo
   4890  2762e			00 70		       .byte.b	<DLLMEM,<(DLLMEM+DBOFFSET)
   4891  27630				    DLLMEMLutHi
   4892  27630			18 18		       .byte.b	>DLLMEM,>(DLLMEM+DBOFFSET)
   4893  27632				    NewPageflipstate
   4894  27632			03 01		       .byte.b	3,1
   4895  27634				    NewPageflipoffset
   4896  27634			ff 00		       .byte.b	DOUBLEBUFFEROFFSET,0
   4897  27636
   4898  27636					       endif		; DOUBLEBUFFER
   4899  27636
   4900  27636				   -	       ifconst	MOUSESUPPORT
   4901  27636				   -	       ifnconst	DRIVINGSUPPORT
   4902  27636				   -rotationalcompare
   4903  27636				   -			; new=00, old=xx
   4904  27636				   -	       .byte	$00, $01, $ff, $00
   4905  27636				   -			; new=01, old=xx
   4906  27636				   -	       .byte	$ff, $00, $00, $01
   4907  27636				   -			; new=10, old=xx
   4908  27636				   -	       .byte	$01, $00, $00, $ff
   4909  27636				   -			; new=11, old=xx
   4910  27636				   -	       .byte	$00, $ff, $01, $00
   4911  27636				   -	       endif
   4912  27636				   -
   4913  27636				   -			;  0000YyXx st mouse
   4914  27636				   -			;  0000xyXY amiga mouse
   4915  27636				   -amigatoataribits		; swap bits 1 and 4...
   4916  27636				   -	       .byte	%00000000, %00001000, %00000010, %00001010
   4917  27636				   -	       .byte	%00000100, %00001100, %00000110, %00001110
   4918  27636				   -	       .byte	%00000001, %00001001, %00000011, %00001011
   4919  27636				   -	       .byte	%00000101, %00001101, %00000111, %00001111
   4920  27636				   -
   4921  27636				   -mouseupdate
   4922  27636				   -			;LONGDEBUG = 1
   4923  27636				   -	       lda	SWCHA
   4924  27636				   -	       and	#$0f
   4925  27636				   -	       sta	inttemp2
   4926  27636				   -	       lda	SWCHA
   4927  27636				   -	       lsr
   4928  27636				   -	       lsr
   4929  27636				   -	       lsr
   4930  27636				   -	       lsr
   4931  27636				   -	       sta	inttemp1
   4932  27636				   -
   4933  27636				   -	       lda	port0control,x
   4934  27636				   -	       cmp	#8	; st mouse
   4935  27636				   -	       beq	domousecontrol
   4936  27636				   -	       cmp	#9	; amiga mouse
   4937  27636				   -	       bne	skipmousecontrol
   4938  27636				   -			; st mice encode on different bits/joystick-lines than amiga mice...
   4939  27636				   -			;  0000YyXx st mouse
   4940  27636				   -			;  0000xyXY amiga mouse
   4941  27636				   -			; ...so can shuffle the amiga bits to reuse the st driver.
   4942  27636				   -	       lda	inttemp1,x
   4943  27636				   -	       tay
   4944  27636				   -	       lda	amigatoataribits,y
   4945  27636				   -	       sta	inttemp1,x
   4946  27636				   -domousecontrol
   4947  27636				   -			;port X has a mouse enabled
   4948  27636				   -	       lda	inttemp1,x
   4949  27636				   -	       and	#%00000011
   4950  27636				   -	       asl
   4951  27636				   -	       asl
   4952  27636				   -	       ora	mousecodex0,x
   4953  27636				   -	       and	#%00001111
   4954  27636				   -	       tay
   4955  27636				   -	       lda	rotationalcompare,y
   4956  27636				   -	       clc
   4957  27636				   -	       adc	mousex0,x
   4958  27636				   -	       sta	mousex0,x
   4959  27636				   -	       tya
   4960  27636				   -	       lsr
   4961  27636				   -	       lsr
   4962  27636				   -	       sta	mousecodex0,x
   4963  27636				   -
   4964  27636				   -	       lda	inttemp1,x
   4965  27636				   -	       and	#%00001100
   4966  27636				   -	       ora	mousecodey0,x
   4967  27636				   -	       and	#%00001111
   4968  27636				   -	       tay
   4969  27636				   -	       lda	rotationalcompare,y
   4970  27636				   -	       asl		; *2 for y axis, since it has ~double the resolution of x
   4971  27636				   -	       clc
   4972  27636				   -	       adc	mousey0,x
   4973  27636				   -	       sta	mousey0,x
   4974  27636				   -	       tya
   4975  27636				   -	       lsr
   4976  27636				   -	       lsr
   4977  27636				   -	       sta	mousecodey0,x
   4978  27636				   -skipmousecontrol
   4979  27636				   -	       jmp	longreadloopreturn
   4980  27636					       endif		; MOUSESUPPORT
   4981  27636
   4982  27636				    mousebuttonhandler		; outside of conditional, so button handler entry in LUT is valid
   4983  27636				   -	       ifconst	MOUSESUPPORT
   4984  27636				   -			; stick the mouse buttons in the correct shadow register...
   4985  27636				   -	       txa
   4986  27636				   -	       asl
   4987  27636				   -	       tay		; y=x*2
   4988  27636				   -	       lda	INPT1,y
   4989  27636				   -	       eor	#%10000000
   4990  27636				   -	       lsr
   4991  27636				   -	       sta	sINPT1,x
   4992  27636				   -
   4993  27636				   -	       lda	INPT4,x
   4994  27636				   -	       and	#%10000000
   4995  27636				   -	       eor	#%10000000
   4996  27636				   -	       ora	sINPT1,x
   4997  27636				   -	       sta	sINPT1,x
   4998  27636				   -	       jmp	buttonreadloopreturn
   4999  27636					       endif		; MOUSESUPPORT
   5000  27636
   5001  27636				   -	       ifconst	DRIVINGSUPPORT
   5002  27636				   -rotationalcompare
   5003  27636				   -			; new=00, old=xx
   5004  27636				   -	       .byte	$00, $01, $ff, $00
   5005  27636				   -			; new=01, old=xx
   5006  27636				   -	       .byte	$ff, $00, $00, $01
   5007  27636				   -			; new=10, old=xx
   5008  27636				   -	       .byte	$01, $00, $00, $ff
   5009  27636				   -			; new=11, old=xx
   5010  27636				   -	       .byte	$00, $ff, $01, $00
   5011  27636				   -drivingupdate
   5012  27636				   -	       ldx	#1
   5013  27636				   -	       lda	port1control
   5014  27636				   -	       cmp	#6	; check if port1=driving
   5015  27636				   -	       bne	skipfirstdrivingcontrol
   5016  27636				   -	       lda	SWCHA
   5017  27636				   -	       and	#%00000011
   5018  27636				   -	       asl
   5019  27636				   -	       asl
   5020  27636				   -drivingupdateloop
   5021  27636				   -	       ora	controller0statesave,x
   5022  27636				   -	       tay
   5023  27636				   -	       lda	rotationalcompare,y
   5024  27636				   -	       clc
   5025  27636				   -	       adc	drivingposition0,x
   5026  27636				   -	       sta	drivingposition0,x
   5027  27636				   -	       tya
   5028  27636				   -	       lsr
   5029  27636				   -	       lsr
   5030  27636				   -	       sta	controller0statesave,x
   5031  27636				   -skipfirstdrivingcontrol
   5032  27636				   -	       lda	port0control
   5033  27636				   -	       cmp	#6	; check if port0=driving
   5034  27636				   -	       bne	drivingcontrolsloopdone
   5035  27636				   -	       lda	SWCHA
   5036  27636				   -	       and	#%00110000
   5037  27636				   -	       lsr
   5038  27636				   -	       lsr
   5039  27636				   -	       dex
   5040  27636				   -	       bpl	drivingupdateloop
   5041  27636				   -drivingcontrolsloopdone
   5042  27636				   -	       rts
   5043  27636					       endif		; DRIVINGSUPPORT
   5044  27636
   5045  27636				   -	       ifconst	KEYPADSUPPORT
   5046  27636				   -			; ** select keypad rows 0 to 3 over 4 frames...
   5047  27636				   -keypadrowselect
   5048  27636				   -	       ldy	#0
   5049  27636				   -	       lda	port0control
   5050  27636				   -	       cmp	#7
   5051  27636				   -	       bne	skipport0val
   5052  27636				   -	       iny		; y=y+1
   5053  27636				   -skipport0val
   5054  27636				   -	       lda	port1control
   5055  27636				   -	       cmp	#7
   5056  27636				   -	       bne	skipport1val
   5057  27636				   -	       iny
   5058  27636				   -	       iny		; y=y+2
   5059  27636				   -skipport1val
   5060  27636				   -	       lda	keyrowdirectionmask,y
   5061  27636				   -	       sta	CTLSWA
   5062  27636				   -	       tya
   5063  27636				   -	       asl
   5064  27636				   -	       asl
   5065  27636				   -	       sta	inttemp1
   5066  27636				   -	       lda	framecounter
   5067  27636				   -	       and	#3
   5068  27636				   -	       ora	inttemp1
   5069  27636				   -	       tax
   5070  27636				   -	       lda	keyrowselectvalue,x
   5071  27636				   -	       sta	SWCHA
   5072  27636				   -	       rts
   5073  27636				   -
   5074  27636				   -keyrowdirectionmask
   5075  27636				   -	       .byte	#%00000000	; 0 : port0=input  port1=input
   5076  27636				   -	       .byte	#%11110000	; 1 : port0=output port1=input
   5077  27636				   -	       .byte	#%00001111	; 2 : port0=input  port1=output
   5078  27636				   -	       .byte	#%11111111	; 3 : port0=output port1=output
   5079  27636				   -
   5080  27636				   -keyrowselectvalue
   5081  27636				   -	       .byte	#%00000000, #%00000000, #%00000000, #%00000000	; no row selected, all pins high, always
   5082  27636				   -	       .byte	#%11100000, #%11010000, #%10110000, #%01110000	; p0 keypad in
   5083  27636				   -	       .byte	#%00001110, #%00001101, #%00001011, #%00000111	; p1 keypad in
   5084  27636				   -	       .byte	#%11101110, #%11011101, #%10111011, #%01110111	; p0+p1 keypads in
   5085  27636					       endif		;  KEYPADSUPPORT
   5086  27636
   5087  27636				   -	       ifconst	KEYPADSUPPORT
   5088  27636				   -keypadcolumnread
   5089  27636				   -	       lda	framecounter
   5090  27636				   -	       and	#3
   5091  27636				   -	       asl		; x2 because keypad variables are interleaved
   5092  27636				   -	       tax
   5093  27636				   -
   5094  27636				   -	       lda	#0
   5095  27636				   -	       sta	keypadmatrix0a,x
   5096  27636				   -	       sta	keypadmatrix1a,x
   5097  27636				   -
   5098  27636				   -	       lda	INPT0
   5099  27636				   -	       cmp	#$80
   5100  27636				   -	       rol	keypadmatrix0a,x
   5101  27636				   -	       lda	INPT1
   5102  27636				   -	       cmp	#$80
   5103  27636				   -	       rol	keypadmatrix0a,x
   5104  27636				   -	       lda	INPT4
   5105  27636				   -	       cmp	#$80
   5106  27636				   -	       rol	keypadmatrix0a,x
   5107  27636				   -	       lda	keypadmatrix0a,x
   5108  27636				   -	       eor	#%00000111
   5109  27636				   -	       sta	keypadmatrix0a,x
   5110  27636				   -
   5111  27636				   -	       rol	keypadmatrix1a,x
   5112  27636				   -	       lda	INPT2
   5113  27636				   -	       cmp	#$80
   5114  27636				   -	       rol	keypadmatrix1a,x
   5115  27636				   -	       lda	INPT3
   5116  27636				   -	       cmp	#$80
   5117  27636				   -	       rol	keypadmatrix1a,x
   5118  27636				   -	       lda	INPT5
   5119  27636				   -	       cmp	#$80
   5120  27636				   -	       rol	keypadmatrix1a,x
   5121  27636				   -	       lda	keypadmatrix1a,x
   5122  27636				   -	       eor	#%00000111
   5123  27636				   -	       sta	keypadmatrix1a,x
   5124  27636				   -
   5125  27636				   -	       rts
   5126  27636					       endif		; KEYPADSUPPORT
   5127  27636
   5128  27636				    setportforinput
   5129  27636			a5 e4		       lda	CTLSWAs
   5130  27638			3d 41 f6	       and	allpinsinputlut,x
   5131  2763b			85 e4		       sta	CTLSWAs
   5132  2763d			8d 81 02	       sta	CTLSWA
   5133  27640			60		       rts
   5134  27641
   5135  27641				    allpinsinputlut
   5136  27641			0f f0		       .byte.b	$0F, $F0
   5137  27643
   5138  27643				    setonebuttonmode
   5139  27643			a9 14		       lda	#$14
   5140  27645			8d 83 02	       sta	CTLSWB	; set both 2-button disable bits to writable
   5141  27648			a5 e5		       lda	CTLSWBs
   5142  2764a			1d 53 f6	       ora	thisjoy2buttonbit,x
   5143  2764d			85 e5		       sta	CTLSWBs
   5144  2764f			8d 82 02	       sta	SWCHB	; turn off the 2-button disable bits
   5145  27652			60		       rts
   5146  27653
   5147  27653				    thisjoy2buttonbit
   5148  27653			04 10		       .byte.b	$04, $10
   5149  27655
   5150  27655				    settwobuttonmode
   5151  27655			a9 14		       lda	#$14
   5152  27657			8d 83 02	       sta	CTLSWB	; set both 2-button disable bits to writable
   5153  2765a			a5 e5		       lda	CTLSWBs
   5154  2765c			3d 65 f6	       and	thisjoy2buttonmask,x
   5155  2765f			85 e5		       sta	CTLSWBs
   5156  27661			8d 82 02	       sta	SWCHB
   5157  27664			60		       rts
   5158  27665
   5159  27665				    thisjoy2buttonmask
   5160  27665			fb ef		       .byte.b	$fb, $ef
   5161  27667
   5162  27667							; Provided under the CC0 license. See the included LICENSE.txt for details.
   5163  27667
   5164  27667				    START
   5165  27667				    start
   5166  27667
   5167  27667							;******** more or less the Atari recommended startup procedure
   5168  27667
   5169  27667			78		       sei
   5170  27668			d8		       cld
   5171  27669
   5172  27669					       ifnconst	NOTIALOCK
   5173  27669			a9 07		       lda	#$07
   5174  2766b				   -	       else
   5175  2766b				   -	       lda	#$06
   5176  2766b					       endif
   5177  2766b			85 01		       sta	INPTCTRL	;lock 7800 into 7800 mode
   5178  2766d			a9 7f		       lda	#$7F
   5179  2766f			85 3c		       sta	CTRL	;disable DMA
   5180  27671			a9 00		       lda	#$00
   5181  27673			85 38		       sta	OFFSET
   5182  27675					       ifnconst	NOTIALOCK
   5183  27675			85 01		       sta	INPTCTRL
   5184  27677					       endif
   5185  27677			a2 ff		       ldx	#$FF
   5186  27679			9a		       txs
   5187  2767a
   5188  2767a							;************** Clear Memory
   5189  2767a
   5190  2767a			a2 40		       ldx	#$40
   5191  2767c			a9 00		       lda	#$00
   5192  2767e				    crloop1
   5193  2767e			95 00		       sta	$00,x	;Clear zero page
   5194  27680			9d 00 01	       sta	$100,x	;Clear page 1
   5195  27683			e8		       inx
   5196  27684			d0 f8		       bne	crloop1
   5197  27686
   5198  27686
   5199  27686			a0 00		       ldy	#$00	;Clear Ram
   5200  27688			a9 18		       lda	#$18	;Start at $1800
   5201  2768a			85 81		       sta	$81
   5202  2768c			a9 00		       lda	#$00
   5203  2768e			85 80		       sta	$80
   5204  27690				    crloop3
   5205  27690			a9 00		       lda	#$00
   5206  27692			91 80		       sta	($80),y	;Store data
   5207  27694			c8		       iny		;Next byte
   5208  27695			d0 f9		       bne	crloop3	;Branch if not done page
   5209  27697			e6 81		       inc	$81	;Next page
   5210  27699			a5 81		       lda	$81
   5211  2769b			c9 20		       cmp	#$20	;End at $1FFF
   5212  2769d			d0 f1		       bne	crloop3	;Branch if not
   5213  2769f
   5214  2769f			a0 00		       ldy	#$00	;Clear Ram
   5215  276a1			a9 22		       lda	#$22	;Start at $2200
   5216  276a3			85 81		       sta	$81
   5217  276a5			a9 00		       lda	#$00
   5218  276a7			85 80		       sta	$80
   5219  276a9				    crloop4
   5220  276a9			a9 00		       lda	#$00
   5221  276ab			91 80		       sta	($80),y	;Store data
   5222  276ad			c8		       iny		;Next byte
   5223  276ae			d0 f9		       bne	crloop4	;Branch if not done page
   5224  276b0			e6 81		       inc	$81	;Next page
   5225  276b2			a5 81		       lda	$81
   5226  276b4			c9 27		       cmp	#$27	;End at $27FF
   5227  276b6			d0 f1		       bne	crloop4	;Branch if not
   5228  276b8
   5229  276b8			a2 00		       ldx	#$00
   5230  276ba			a9 00		       lda	#$00
   5231  276bc				    crloop5		;Clear 2100-213F, 2000-203F
   5232  276bc			9d 00 20	       sta	$2000,x
   5233  276bf			9d 00 21	       sta	$2100,x
   5234  276c2			e8		       inx
   5235  276c3			e0 40		       cpx	#$40
   5236  276c5			d0 f5		       bne	crloop5
   5237  276c7
   5238  276c7			85 80		       sta	$80
   5239  276c9			85 81		       sta	$81
   5240  276cb			85 82		       sta	$82
   5241  276cd			85 83		       sta	$83
   5242  276cf
   5243  276cf							;seed random number with hopefully-random timer value
   5244  276cf			a9 01		       lda	#1
   5245  276d1			0d 84 02	       ora	INTIM
   5246  276d4			85 40		       sta	rand
   5247  276d6
   5248  276d6							; detect the console type...
   5249  276d6				    pndetectvblankstart
   5250  276d6			a5 28		       lda	MSTAT
   5251  276d8			10 fc		       bpl	pndetectvblankstart	; if we're not in VBLANK, wait for it to start 
   5252  276da				    pndetectvblankover
   5253  276da			a5 28		       lda	MSTAT
   5254  276dc			30 fc		       bmi	pndetectvblankover	;  then wait for it to be over
   5255  276de			a0 00		       ldy	#$00
   5256  276e0			a2 00		       ldx	#$00
   5257  276e2				    pndetectvblankhappening
   5258  276e2			a5 28		       lda	MSTAT
   5259  276e4			30 07		       bmi	pndetectinvblank	;  if VBLANK starts, exit our counting loop 
   5260  276e6			85 24		       sta	WSYNC
   5261  276e8			85 24		       sta	WSYNC
   5262  276ea			e8		       inx
   5263  276eb			d0 f5		       bne	pndetectvblankhappening
   5264  276ed				    pndetectinvblank
   5265  276ed			e0 7d		       cpx	#125
   5266  276ef			90 02		       bcc	pndetecispal
   5267  276f1			a0 01		       ldy	#$01
   5268  276f3				    pndetecispal
   5269  276f3			8c 09 21	       sty	paldetected
   5270  276f6
   5271  276f6			20 ef f4	       jsr	createallgamedlls
   5272  276f9
   5273  276f9			a9 18		       lda	#>DLLMEM
   5274  276fb			85 2c		       sta	DPPH
   5275  276fd			a9 00		       lda	#<DLLMEM
   5276  276ff			85 30		       sta	DPPL
   5277  27701
   5278  27701							; CTRL 76543210
   5279  27701							; 7 colorburst kill
   5280  27701							; 6,5 dma ctrl 2=normal DMA, 3=no DMA
   5281  27701							; 4 character width 1=2 byte chars, 0=1 byte chars
   5282  27701							; 3 border control 0=background color border, 1=black border
   5283  27701							; 2 kangaroo mode 0=transparancy, 1=kangaroo
   5284  27701							; 1,0 read mode 0=160x2/160x4 1=N/A 2=320B/320D 3=320A/320C
   5285  27701
   5286  27701				   -	       ifconst	DOUBLEWIDE
   5287  27701				   -	       lda	#%01010000	;Enable DMA, mode=160x2/160x4, 2x character width
   5288  27701					       else
   5289  27701			a9 40		       lda	#%01000000	;Enable DMA, mode=160x2/160x4
   5290  27703					       endif
   5291  27703			85 3c		       sta	CTRL
   5292  27705			8d 07 21	       sta	sCTRL
   5293  27708
   5294  27708			20 e2 f4	       jsr	vblankresync
   5295  2770b
   5296  2770b			a9 04		       lda	#%00000100	; leave cartridge plugged in for any testing
   5297  2770d			8d b7 01	       sta	XCTRL1s
   5298  27710
   5299  27710				   -	       ifconst	pokeysupport
   5300  27710				   -			; pokey support is compiled in, so try to detect it...
   5301  27710				   -	       jsr	detectpokeylocation
   5302  27710					       endif
   5303  27710
   5304  27710			a9 01		       lda	#1	; default for port 0 and 1 is a regular joystick
   5305  27712			8d e2 01	       sta	port0control
   5306  27715			8d e3 01	       sta	port1control
   5307  27718
   5308  27718							;Setup port A to read mode
   5309  27718							;lda #$00
   5310  27718							;sta SWCHA
   5311  27718							;sta CTLSWA
   5312  27718
   5313  27718				   -	       ifconst	HSSUPPORT
   5314  27718				   -			; try to detect HSC
   5315  27718				   -	       jsr	detecthsc
   5316  27718				   -	       and	#1
   5317  27718				   -	       sta	hsdevice
   5318  27718				   -skipHSCdetect
   5319  27718				   -			; try to detect AtariVox eeprom
   5320  27718				   -	       jsr	detectatarivoxeeprom
   5321  27718				   -	       and	#2
   5322  27718				   -	       ora	hsdevice
   5323  27718				   -	       cmp	#3
   5324  27718				   -	       bne	storeAinhsdevice
   5325  27718				   -			; For now, we tie break by giving HSC priority over AtariVox.
   5326  27718				   -			; Later we should check each device's priority byte if set, instead, 
   5327  27718				   -	       lda	#2
   5328  27718				   -storeAinhsdevice
   5329  27718				   -	       sta	hsdevice
   5330  27718				   -	       lda	#$ff
   5331  27718				   -	       sta	hsdifficulty
   5332  27718				   -	       sta	hsgameslot
   5333  27718				   -	       sta	hsnewscoreline
   5334  27718					       endif
   5335  27718
   5336  27718				   -	       ifconst	AVOXVOICE
   5337  27718				   -	       jsr	silenceavoxvoice
   5338  27718					       endif
   5339  27718
   5340  27718					       ifconst	SGRAM
   5341  27718							; check if we actually have SGRAM. If not, probe XM for it...
   5342  27718			a0 ea		       ldy	#$EA
   5343  2771a			8c 00 40	       sty	$4000
   5344  2771d			ac 00 40	       ldy	$4000
   5345  27720			c0 ea		       cpy	#$EA
   5346  27722			f0 1d		       beq	skipSGRAMcheck
   5347  27724			ad b7 01	       lda	XCTRL1s
   5348  27727			09 64		       ora	#%01100100
   5349  27729			8d 70 04	       sta	XCTRL1
   5350  2772c			8c 00 40	       sty	$4000
   5351  2772f			ac 00 40	       ldy	$4000
   5352  27732			c0 ea		       cpy	#$EA
   5353  27734			d0 0b		       bne	skipSGRAMcheck
   5354  27736							;if we're here, XM memory satisfied our RAM requirement
   5355  27736			8d b7 01	       sta	XCTRL1s	; save it
   5356  27739			a9 10		       lda	#$10
   5357  2773b			8d 78 04	       sta	XCTRL2
   5358  2773e			8d 7c 04	       sta	XCTRL3
   5359  27741				    skipSGRAMcheck
   5360  27741					       endif
   5361  27741
   5362  27741				   -	       ifconst	TURNEDOFF
   5363  27741				   -	       ldx	#1
   5364  27741				   -	       ldy	#3
   5365  27741				   -joystickdetectloop
   5366  27741				   -	       jsr	setonebuttonmode
   5367  27741				   -			; ensure we're in one-button mode and check for a genesis controller
   5368  27741				   -	       lda	INPT0,y
   5369  27741				   -	       and	#$80
   5370  27741				   -	       sta	genesisdetected0,x
   5371  27741				   -	       bne	skipsetgenesistwobutton
   5372  27741				   -skipsetgenesis
   5373  27741				   -	       jsr	settwobuttonmode
   5374  27741				   -skipsetgenesistwobutton
   5375  27741				   -	       dey
   5376  27741				   -	       dey
   5377  27741				   -	       dex
   5378  27741				   -	       bpl	joystickdetectloop
   5379  27741					       endif
   5380  27741
   5381  27741			a2 01		       ldx	#1
   5382  27743			20 55 f6	       jsr	settwobuttonmode
   5383  27746			a2 00		       ldx	#0
   5384  27748			20 55 f6	       jsr	settwobuttonmode
   5385  2774b
   5386  2774b					       ifconst	bankswitchmode
   5387  2774b							; we need to switch to the first bank before we jump there!
   5388  2774b				   -	       ifconst	MCPDEVCART
   5389  2774b				   -	       lda	#$18	; xxx11nnn - switch to bank 0
   5390  2774b				   -	       sta	$3000
   5391  2774b					       else
   5392  2774b			a9 00		       lda	#0
   5393  2774d			8d 00 80	       sta	$8000
   5394  27750					       endif
   5395  27750					       endif
   5396  27750
   5397  27750			4c 00 80	       jmp	game
   5398  27753
   5399  27753
   5400  27753							; Provided under the CC0 license. See the included LICENSE.txt for details.
   5401  27753
   5402  27753							;************** Setup DLL entries
   5403  27753
   5404  27753							; setup some working definitions, to avoid ifnconst mess elsewhere...
   5405  27753					       ifnconst	SCREENHEIGHT
   5406  27753			00 c0	    WSCREENHEIGHT =	192
   5407  27753				   -	       else
   5408  27753				   -WSCREENHEIGHT =	SCREENHEIGHT
   5409  27753					       endif
   5410  27753
   5411  27753				   -	       ifnconst	ZONEHEIGHT
   5412  27753				   -WZONEHEIGHT =	16
   5413  27753					       else
   5414  27753			00 10	    WZONEHEIGHT =	ZONEHEIGHT
   5415  27753					       endif
   5416  27753
   5417  27753					       ifnconst	ZONECOUNT
   5418  27753			00 0c	    WZONECOUNT =	(WSCREENHEIGHT/WZONEHEIGHT)
   5419  27753				   -	       else
   5420  27753				   -WZONECOUNT =	ZONECOUNT
   5421  27753					       endif
   5422  27753
   5423  27753							; top of the frame, non-visible lines. this is based on NTSC,
   5424  27753							; but we add in extra NV lines at the end of the display to ensure
   5425  27753							; our PAL friends can play the game without it crashing.
   5426  27753			00 19	    NVLINES    =	((243-WSCREENHEIGHT)/2)
   5427  27753
   5428  27753				   -	       ifnconst	DLMEMSTART
   5429  27753				   -	       ifnconst	DOUBLEBUFFER
   5430  27753				   -WDLMEMSTART =	$1880
   5431  27753				   -	       else
   5432  27753				   -WDLMEMSTART =	$18E0
   5433  27753				   -	       endif		; DOUBLEBUFFER
   5434  27753					       else
   5435  27753			40 00	    WDLMEMSTART =	DLMEMSTART
   5436  27753					       endif
   5437  27753
   5438  27753				   -	       ifnconst	DLMEMEND
   5439  27753				   -	       ifconst	EXTRADLMEMORY
   5440  27753				   -WDLMEMEND  =	$23FF
   5441  27753				   -	       else
   5442  27753				   -WDLMEMEND  =	$1FFF
   5443  27753				   -	       endif
   5444  27753					       else
   5445  27753			67 ff	    WDLMEMEND  =	DLMEMEND
   5446  27753					       endif
   5447  27753
   5448  27753
   5449  27753			28 00	    WMEMSIZE   =	(WDLMEMEND-WDLMEMSTART+1)
   5450  27753
   5451  27753				   -	       ifnconst	DOUBLEBUFFER
   5452  27753				   -DLLASTOBJ  =	((((WMEMSIZE/WZONECOUNT)-2)/5)*5)	; -2 to always ensure we have 1x double-byte terminator
   5453  27753					       else
   5454  27753			01 a4	    DLLASTOBJ  =	((((WMEMSIZE/WZONECOUNT)-4)/10)*5)	; -4 to always ensure we have 2x double-byte terminators
   5455  27753					       endif
   5456  27753
   5457  27753			01 a6	    TDOUBLEBUFFEROFFSET =	(DLLASTOBJ+2)	; offset between DL buffers. ie. half the real DL
   5458  27753					       if	TDOUBLEBUFFEROFFSET > 255
   5459  27753			00 ff	    DOUBLEBUFFEROFFSET =	255
   5460  27753				   -	       else
   5461  27753				   -DOUBLEBUFFEROFFSET =	(DLLASTOBJ+2)
   5462  27753					       endif
   5463  27753
   5464  27753				   -	       ifconst	EXTRADLMEMORY
   5465  27753				   -SECONDDLHALFSTART SET	$2300
   5466  27753					       endif
   5467  27753
   5468  27753				    DLPOINTH
   5469  27753				    DLINDEX    SET	0
   5470  27753					       REPEAT	WZONECOUNT
   5471  27753				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5472  27753				   -	       ifconst	EXTRADLMEMORY
   5473  27753				   -	       if	TMPMEMADDRESS > $1FFF
   5474  27753				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5475  27753				   -	       else
   5476  27753				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5477  27753				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5478  27753				   -SECONDDLHALFSTART SET	TMPMEMADDRESS
   5479  27753				   -	       endif
   5480  27753				   -	       endif		; TMPMEMADDRESS > $1FFF
   5481  27753					       endif		; EXTRADLMEMORY
   5482  27753							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   5483  27753			40		       .byte.b	>TMPMEMADDRESS
   5484  27753				    DLINDEX    SET	DLINDEX + 1
   5470  27753					       REPEND
   5471  27753				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5472  27754				   -	       ifconst	EXTRADLMEMORY
   5473  27754				   -	       if	TMPMEMADDRESS > $1FFF
   5474  27754				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5475  27754				   -	       else
   5476  27754				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5477  27754				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5478  27754				   -SECONDDLHALFSTART SET	TMPMEMADDRESS
   5479  27754				   -	       endif
   5480  27754				   -	       endif		; TMPMEMADDRESS > $1FFF
   5481  27754					       endif		; EXTRADLMEMORY
   5482  27754							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   5483  27754			43		       .byte.b	>TMPMEMADDRESS
   5484  27754				    DLINDEX    SET	DLINDEX + 1
   5470  27754					       REPEND
   5471  27754				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5472  27755				   -	       ifconst	EXTRADLMEMORY
   5473  27755				   -	       if	TMPMEMADDRESS > $1FFF
   5474  27755				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5475  27755				   -	       else
   5476  27755				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5477  27755				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5478  27755				   -SECONDDLHALFSTART SET	TMPMEMADDRESS
   5479  27755				   -	       endif
   5480  27755				   -	       endif		; TMPMEMADDRESS > $1FFF
   5481  27755					       endif		; EXTRADLMEMORY
   5482  27755							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   5483  27755			46		       .byte.b	>TMPMEMADDRESS
   5484  27755				    DLINDEX    SET	DLINDEX + 1
   5470  27755					       REPEND
   5471  27755				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5472  27756				   -	       ifconst	EXTRADLMEMORY
   5473  27756				   -	       if	TMPMEMADDRESS > $1FFF
   5474  27756				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5475  27756				   -	       else
   5476  27756				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5477  27756				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5478  27756				   -SECONDDLHALFSTART SET	TMPMEMADDRESS
   5479  27756				   -	       endif
   5480  27756				   -	       endif		; TMPMEMADDRESS > $1FFF
   5481  27756					       endif		; EXTRADLMEMORY
   5482  27756							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   5483  27756			4a		       .byte.b	>TMPMEMADDRESS
   5484  27756				    DLINDEX    SET	DLINDEX + 1
   5470  27756					       REPEND
   5471  27756				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5472  27757				   -	       ifconst	EXTRADLMEMORY
   5473  27757				   -	       if	TMPMEMADDRESS > $1FFF
   5474  27757				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5475  27757				   -	       else
   5476  27757				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5477  27757				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5478  27757				   -SECONDDLHALFSTART SET	TMPMEMADDRESS
   5479  27757				   -	       endif
   5480  27757				   -	       endif		; TMPMEMADDRESS > $1FFF
   5481  27757					       endif		; EXTRADLMEMORY
   5482  27757							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   5483  27757			4d		       .byte.b	>TMPMEMADDRESS
   5484  27757				    DLINDEX    SET	DLINDEX + 1
   5470  27757					       REPEND
   5471  27757				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5472  27758				   -	       ifconst	EXTRADLMEMORY
   5473  27758				   -	       if	TMPMEMADDRESS > $1FFF
   5474  27758				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5475  27758				   -	       else
   5476  27758				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5477  27758				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5478  27758				   -SECONDDLHALFSTART SET	TMPMEMADDRESS
   5479  27758				   -	       endif
   5480  27758				   -	       endif		; TMPMEMADDRESS > $1FFF
   5481  27758					       endif		; EXTRADLMEMORY
   5482  27758							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   5483  27758			50		       .byte.b	>TMPMEMADDRESS
   5484  27758				    DLINDEX    SET	DLINDEX + 1
   5470  27758					       REPEND
   5471  27758				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5472  27759				   -	       ifconst	EXTRADLMEMORY
   5473  27759				   -	       if	TMPMEMADDRESS > $1FFF
   5474  27759				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5475  27759				   -	       else
   5476  27759				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5477  27759				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5478  27759				   -SECONDDLHALFSTART SET	TMPMEMADDRESS
   5479  27759				   -	       endif
   5480  27759				   -	       endif		; TMPMEMADDRESS > $1FFF
   5481  27759					       endif		; EXTRADLMEMORY
   5482  27759							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   5483  27759			54		       .byte.b	>TMPMEMADDRESS
   5484  27759				    DLINDEX    SET	DLINDEX + 1
   5470  27759					       REPEND
   5471  27759				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5472  2775a				   -	       ifconst	EXTRADLMEMORY
   5473  2775a				   -	       if	TMPMEMADDRESS > $1FFF
   5474  2775a				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5475  2775a				   -	       else
   5476  2775a				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5477  2775a				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5478  2775a				   -SECONDDLHALFSTART SET	TMPMEMADDRESS
   5479  2775a				   -	       endif
   5480  2775a				   -	       endif		; TMPMEMADDRESS > $1FFF
   5481  2775a					       endif		; EXTRADLMEMORY
   5482  2775a							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   5483  2775a			57		       .byte.b	>TMPMEMADDRESS
   5484  2775a				    DLINDEX    SET	DLINDEX + 1
   5470  2775a					       REPEND
   5471  2775a				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5472  2775b				   -	       ifconst	EXTRADLMEMORY
   5473  2775b				   -	       if	TMPMEMADDRESS > $1FFF
   5474  2775b				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5475  2775b				   -	       else
   5476  2775b				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5477  2775b				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5478  2775b				   -SECONDDLHALFSTART SET	TMPMEMADDRESS
   5479  2775b				   -	       endif
   5480  2775b				   -	       endif		; TMPMEMADDRESS > $1FFF
   5481  2775b					       endif		; EXTRADLMEMORY
   5482  2775b							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   5483  2775b			5a		       .byte.b	>TMPMEMADDRESS
   5484  2775b				    DLINDEX    SET	DLINDEX + 1
   5470  2775b					       REPEND
   5471  2775b				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5472  2775c				   -	       ifconst	EXTRADLMEMORY
   5473  2775c				   -	       if	TMPMEMADDRESS > $1FFF
   5474  2775c				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5475  2775c				   -	       else
   5476  2775c				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5477  2775c				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5478  2775c				   -SECONDDLHALFSTART SET	TMPMEMADDRESS
   5479  2775c				   -	       endif
   5480  2775c				   -	       endif		; TMPMEMADDRESS > $1FFF
   5481  2775c					       endif		; EXTRADLMEMORY
   5482  2775c							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   5483  2775c			5e		       .byte.b	>TMPMEMADDRESS
   5484  2775c				    DLINDEX    SET	DLINDEX + 1
   5470  2775c					       REPEND
   5471  2775c				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5472  2775d				   -	       ifconst	EXTRADLMEMORY
   5473  2775d				   -	       if	TMPMEMADDRESS > $1FFF
   5474  2775d				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5475  2775d				   -	       else
   5476  2775d				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5477  2775d				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5478  2775d				   -SECONDDLHALFSTART SET	TMPMEMADDRESS
   5479  2775d				   -	       endif
   5480  2775d				   -	       endif		; TMPMEMADDRESS > $1FFF
   5481  2775d					       endif		; EXTRADLMEMORY
   5482  2775d							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   5483  2775d			61		       .byte.b	>TMPMEMADDRESS
   5484  2775d				    DLINDEX    SET	DLINDEX + 1
   5470  2775d					       REPEND
   5471  2775d				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5472  2775e				   -	       ifconst	EXTRADLMEMORY
   5473  2775e				   -	       if	TMPMEMADDRESS > $1FFF
   5474  2775e				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5475  2775e				   -	       else
   5476  2775e				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5477  2775e				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5478  2775e				   -SECONDDLHALFSTART SET	TMPMEMADDRESS
   5479  2775e				   -	       endif
   5480  2775e				   -	       endif		; TMPMEMADDRESS > $1FFF
   5481  2775e					       endif		; EXTRADLMEMORY
   5482  2775e							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   5483  2775e			64		       .byte.b	>TMPMEMADDRESS
   5484  2775e				    DLINDEX    SET	DLINDEX + 1
   5485  2775f					       REPEND
   5486  2775f
   5487  2775f				   -	       ifconst	EXTRADLMEMORY
   5488  2775f				   -	       echo	"   ",[SECONDDLHALFSTART],"to",[$27FF],"was claimed as extra DL memory."
   5489  2775f					       endif
   5490  2775f
   5491  2775f
   5492  2775f				    DLPOINTL
   5493  2775f				    DLINDEX    SET	0
   5494  2775f					       REPEAT	WZONECOUNT
   5495  2775f				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5496  2775f				   -	       ifconst	EXTRADLMEMORY
   5497  2775f				   -	       if	TMPMEMADDRESS > $1FFF
   5498  2775f				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5499  2775f				   -	       else
   5500  2775f				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5501  2775f				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5502  2775f				   -	       endif
   5503  2775f				   -	       endif		; TMPMEMADDRESS > $1FFF
   5504  2775f					       endif		; EXTRADLMEMORY
   5505  2775f			00		       .byte.b	<TMPMEMADDRESS
   5506  2775f				    DLINDEX    SET	DLINDEX + 1
   5494  2775f					       REPEND
   5495  2775f				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5496  27760				   -	       ifconst	EXTRADLMEMORY
   5497  27760				   -	       if	TMPMEMADDRESS > $1FFF
   5498  27760				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5499  27760				   -	       else
   5500  27760				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5501  27760				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5502  27760				   -	       endif
   5503  27760				   -	       endif		; TMPMEMADDRESS > $1FFF
   5504  27760					       endif		; EXTRADLMEMORY
   5505  27760			55		       .byte.b	<TMPMEMADDRESS
   5506  27760				    DLINDEX    SET	DLINDEX + 1
   5494  27760					       REPEND
   5495  27760				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5496  27761				   -	       ifconst	EXTRADLMEMORY
   5497  27761				   -	       if	TMPMEMADDRESS > $1FFF
   5498  27761				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5499  27761				   -	       else
   5500  27761				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5501  27761				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5502  27761				   -	       endif
   5503  27761				   -	       endif		; TMPMEMADDRESS > $1FFF
   5504  27761					       endif		; EXTRADLMEMORY
   5505  27761			aa		       .byte.b	<TMPMEMADDRESS
   5506  27761				    DLINDEX    SET	DLINDEX + 1
   5494  27761					       REPEND
   5495  27761				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5496  27762				   -	       ifconst	EXTRADLMEMORY
   5497  27762				   -	       if	TMPMEMADDRESS > $1FFF
   5498  27762				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5499  27762				   -	       else
   5500  27762				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5501  27762				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5502  27762				   -	       endif
   5503  27762				   -	       endif		; TMPMEMADDRESS > $1FFF
   5504  27762					       endif		; EXTRADLMEMORY
   5505  27762			00		       .byte.b	<TMPMEMADDRESS
   5506  27762				    DLINDEX    SET	DLINDEX + 1
   5494  27762					       REPEND
   5495  27762				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5496  27763				   -	       ifconst	EXTRADLMEMORY
   5497  27763				   -	       if	TMPMEMADDRESS > $1FFF
   5498  27763				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5499  27763				   -	       else
   5500  27763				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5501  27763				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5502  27763				   -	       endif
   5503  27763				   -	       endif		; TMPMEMADDRESS > $1FFF
   5504  27763					       endif		; EXTRADLMEMORY
   5505  27763			55		       .byte.b	<TMPMEMADDRESS
   5506  27763				    DLINDEX    SET	DLINDEX + 1
   5494  27763					       REPEND
   5495  27763				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5496  27764				   -	       ifconst	EXTRADLMEMORY
   5497  27764				   -	       if	TMPMEMADDRESS > $1FFF
   5498  27764				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5499  27764				   -	       else
   5500  27764				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5501  27764				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5502  27764				   -	       endif
   5503  27764				   -	       endif		; TMPMEMADDRESS > $1FFF
   5504  27764					       endif		; EXTRADLMEMORY
   5505  27764			aa		       .byte.b	<TMPMEMADDRESS
   5506  27764				    DLINDEX    SET	DLINDEX + 1
   5494  27764					       REPEND
   5495  27764				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5496  27765				   -	       ifconst	EXTRADLMEMORY
   5497  27765				   -	       if	TMPMEMADDRESS > $1FFF
   5498  27765				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5499  27765				   -	       else
   5500  27765				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5501  27765				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5502  27765				   -	       endif
   5503  27765				   -	       endif		; TMPMEMADDRESS > $1FFF
   5504  27765					       endif		; EXTRADLMEMORY
   5505  27765			00		       .byte.b	<TMPMEMADDRESS
   5506  27765				    DLINDEX    SET	DLINDEX + 1
   5494  27765					       REPEND
   5495  27765				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5496  27766				   -	       ifconst	EXTRADLMEMORY
   5497  27766				   -	       if	TMPMEMADDRESS > $1FFF
   5498  27766				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5499  27766				   -	       else
   5500  27766				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5501  27766				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5502  27766				   -	       endif
   5503  27766				   -	       endif		; TMPMEMADDRESS > $1FFF
   5504  27766					       endif		; EXTRADLMEMORY
   5505  27766			55		       .byte.b	<TMPMEMADDRESS
   5506  27766				    DLINDEX    SET	DLINDEX + 1
   5494  27766					       REPEND
   5495  27766				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5496  27767				   -	       ifconst	EXTRADLMEMORY
   5497  27767				   -	       if	TMPMEMADDRESS > $1FFF
   5498  27767				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5499  27767				   -	       else
   5500  27767				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5501  27767				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5502  27767				   -	       endif
   5503  27767				   -	       endif		; TMPMEMADDRESS > $1FFF
   5504  27767					       endif		; EXTRADLMEMORY
   5505  27767			aa		       .byte.b	<TMPMEMADDRESS
   5506  27767				    DLINDEX    SET	DLINDEX + 1
   5494  27767					       REPEND
   5495  27767				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5496  27768				   -	       ifconst	EXTRADLMEMORY
   5497  27768				   -	       if	TMPMEMADDRESS > $1FFF
   5498  27768				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5499  27768				   -	       else
   5500  27768				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5501  27768				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5502  27768				   -	       endif
   5503  27768				   -	       endif		; TMPMEMADDRESS > $1FFF
   5504  27768					       endif		; EXTRADLMEMORY
   5505  27768			00		       .byte.b	<TMPMEMADDRESS
   5506  27768				    DLINDEX    SET	DLINDEX + 1
   5494  27768					       REPEND
   5495  27768				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5496  27769				   -	       ifconst	EXTRADLMEMORY
   5497  27769				   -	       if	TMPMEMADDRESS > $1FFF
   5498  27769				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5499  27769				   -	       else
   5500  27769				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5501  27769				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5502  27769				   -	       endif
   5503  27769				   -	       endif		; TMPMEMADDRESS > $1FFF
   5504  27769					       endif		; EXTRADLMEMORY
   5505  27769			55		       .byte.b	<TMPMEMADDRESS
   5506  27769				    DLINDEX    SET	DLINDEX + 1
   5494  27769					       REPEND
   5495  27769				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5496  2776a				   -	       ifconst	EXTRADLMEMORY
   5497  2776a				   -	       if	TMPMEMADDRESS > $1FFF
   5498  2776a				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5499  2776a				   -	       else
   5500  2776a				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5501  2776a				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5502  2776a				   -	       endif
   5503  2776a				   -	       endif		; TMPMEMADDRESS > $1FFF
   5504  2776a					       endif		; EXTRADLMEMORY
   5505  2776a			aa		       .byte.b	<TMPMEMADDRESS
   5506  2776a				    DLINDEX    SET	DLINDEX + 1
   5507  2776b					       REPEND
   5508  2776b
   5509  2776b
   5510  2776b				    DLINDEX    SET	0
   5511  2776b					       REPEAT	WZONECOUNT
   5512  2776b				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5513  2776b				   -	       ifconst	EXTRADLMEMORY
   5514  2776b				   -	       if	TMPMEMADDRESS > $1FFF
   5515  2776b				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5516  2776b				   -	       else
   5517  2776b				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5518  2776b				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5519  2776b				   -	       endif
   5520  2776b				   -	       endif		; TMPMEMADDRESS > $1FFF
   5521  2776b					       endif		; EXTRADLMEMORY
   5522  2776b					       if	DLINDEX = 0
   5523  2776b			40 00	    ZONE0ADDRESS =	TMPMEMADDRESS
   5524  2776b					       endif
   5525  2776b				   -	       if	DLINDEX = 1
   5526  2776b				   -ZONE1ADDRESS =	TMPMEMADDRESS
   5527  2776b					       endif
   5528  2776b				   -	       if	DLINDEX = 2
   5529  2776b				   -ZONE2ADDRESS =	TMPMEMADDRESS
   5530  2776b					       endif
   5531  2776b				   -	       if	DLINDEX = 3
   5532  2776b				   -ZONE3ADDRESS =	TMPMEMADDRESS
   5533  2776b					       endif
   5534  2776b				   -	       if	DLINDEX = 4
   5535  2776b				   -ZONE4ADDRESS =	TMPMEMADDRESS
   5536  2776b					       endif
   5537  2776b				   -	       if	DLINDEX = 5
   5538  2776b				   -ZONE5ADDRESS =	TMPMEMADDRESS
   5539  2776b					       endif
   5540  2776b				   -	       if	DLINDEX = 6
   5541  2776b				   -ZONE6ADDRESS =	TMPMEMADDRESS
   5542  2776b					       endif
   5543  2776b				   -	       if	DLINDEX = 7
   5544  2776b				   -ZONE7ADDRESS =	TMPMEMADDRESS
   5545  2776b					       endif
   5546  2776b				   -	       if	DLINDEX = 8
   5547  2776b				   -ZONE8ADDRESS =	TMPMEMADDRESS
   5548  2776b					       endif
   5549  2776b				   -	       if	DLINDEX = 9
   5550  2776b				   -ZONE9ADDRESS =	TMPMEMADDRESS
   5551  2776b					       endif
   5552  2776b				   -	       if	DLINDEX = 10
   5553  2776b				   -ZONE10ADDRESS =	TMPMEMADDRESS
   5554  2776b					       endif
   5555  2776b				   -	       if	DLINDEX = 11
   5556  2776b				   -ZONE11ADDRESS =	TMPMEMADDRESS
   5557  2776b					       endif
   5558  2776b				   -	       if	DLINDEX = 12
   5559  2776b				   -ZONE12ADDRESS =	TMPMEMADDRESS
   5560  2776b					       endif
   5561  2776b				   -	       if	DLINDEX = 13
   5562  2776b				   -ZONE13ADDRESS =	TMPMEMADDRESS
   5563  2776b					       endif
   5564  2776b				   -	       if	DLINDEX = 14
   5565  2776b				   -ZONE14ADDRESS =	TMPMEMADDRESS
   5566  2776b					       endif
   5567  2776b				   -	       if	DLINDEX = 15
   5568  2776b				   -ZONE15ADDRESS =	TMPMEMADDRESS
   5569  2776b					       endif
   5570  2776b				   -	       if	DLINDEX = 16
   5571  2776b				   -ZONE16ADDRESS =	TMPMEMADDRESS
   5572  2776b					       endif
   5573  2776b				   -	       if	DLINDEX = 17
   5574  2776b				   -ZONE17ADDRESS =	TMPMEMADDRESS
   5575  2776b					       endif
   5576  2776b				   -	       if	DLINDEX = 18
   5577  2776b				   -ZONE18ADDRESS =	TMPMEMADDRESS
   5578  2776b					       endif
   5579  2776b				   -	       if	DLINDEX = 19
   5580  2776b				   -ZONE19ADDRESS =	TMPMEMADDRESS
   5581  2776b					       endif
   5582  2776b				   -	       if	DLINDEX = 20
   5583  2776b				   -ZONE20ADDRESS =	TMPMEMADDRESS
   5584  2776b					       endif
   5585  2776b				   -	       if	DLINDEX = 21
   5586  2776b				   -ZONE21ADDRESS =	TMPMEMADDRESS
   5587  2776b					       endif
   5588  2776b				   -	       if	DLINDEX = 22
   5589  2776b				   -ZONE22ADDRESS =	TMPMEMADDRESS
   5590  2776b					       endif
   5591  2776b				   -	       if	DLINDEX = 23
   5592  2776b				   -ZONE23ADDRESS =	TMPMEMADDRESS
   5593  2776b					       endif
   5594  2776b				   -	       if	DLINDEX = 24
   5595  2776b				   -ZONE24ADDRESS =	TMPMEMADDRESS
   5596  2776b					       endif
   5597  2776b				   -	       if	DLINDEX = 25
   5598  2776b				   -ZONE25ADDRESS =	TMPMEMADDRESS
   5599  2776b					       endif
   5600  2776b				   -	       if	DLINDEX = 26
   5601  2776b				   -ZONE26ADDRESS =	TMPMEMADDRESS
   5602  2776b					       endif
   5603  2776b				   -	       if	DLINDEX = 27
   5604  2776b				   -ZONE27ADDRESS =	TMPMEMADDRESS
   5605  2776b					       endif
   5606  2776b				    DLINDEX    SET	DLINDEX + 1
   5511  2776b					       REPEND
   5512  2776b				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5513  2776b				   -	       ifconst	EXTRADLMEMORY
   5514  2776b				   -	       if	TMPMEMADDRESS > $1FFF
   5515  2776b				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5516  2776b				   -	       else
   5517  2776b				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5518  2776b				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5519  2776b				   -	       endif
   5520  2776b				   -	       endif		; TMPMEMADDRESS > $1FFF
   5521  2776b					       endif		; EXTRADLMEMORY
   5522  2776b				   -	       if	DLINDEX = 0
   5523  2776b				   -ZONE0ADDRESS =	TMPMEMADDRESS
   5524  2776b					       endif
   5525  2776b					       if	DLINDEX = 1
   5526  2776b			43 55	    ZONE1ADDRESS =	TMPMEMADDRESS
   5527  2776b					       endif
   5528  2776b				   -	       if	DLINDEX = 2
   5529  2776b				   -ZONE2ADDRESS =	TMPMEMADDRESS
   5530  2776b					       endif
   5531  2776b				   -	       if	DLINDEX = 3
   5532  2776b				   -ZONE3ADDRESS =	TMPMEMADDRESS
   5533  2776b					       endif
   5534  2776b				   -	       if	DLINDEX = 4
   5535  2776b				   -ZONE4ADDRESS =	TMPMEMADDRESS
   5536  2776b					       endif
   5537  2776b				   -	       if	DLINDEX = 5
   5538  2776b				   -ZONE5ADDRESS =	TMPMEMADDRESS
   5539  2776b					       endif
   5540  2776b				   -	       if	DLINDEX = 6
   5541  2776b				   -ZONE6ADDRESS =	TMPMEMADDRESS
   5542  2776b					       endif
   5543  2776b				   -	       if	DLINDEX = 7
   5544  2776b				   -ZONE7ADDRESS =	TMPMEMADDRESS
   5545  2776b					       endif
   5546  2776b				   -	       if	DLINDEX = 8
   5547  2776b				   -ZONE8ADDRESS =	TMPMEMADDRESS
   5548  2776b					       endif
   5549  2776b				   -	       if	DLINDEX = 9
   5550  2776b				   -ZONE9ADDRESS =	TMPMEMADDRESS
   5551  2776b					       endif
   5552  2776b				   -	       if	DLINDEX = 10
   5553  2776b				   -ZONE10ADDRESS =	TMPMEMADDRESS
   5554  2776b					       endif
   5555  2776b				   -	       if	DLINDEX = 11
   5556  2776b				   -ZONE11ADDRESS =	TMPMEMADDRESS
   5557  2776b					       endif
   5558  2776b				   -	       if	DLINDEX = 12
   5559  2776b				   -ZONE12ADDRESS =	TMPMEMADDRESS
   5560  2776b					       endif
   5561  2776b				   -	       if	DLINDEX = 13
   5562  2776b				   -ZONE13ADDRESS =	TMPMEMADDRESS
   5563  2776b					       endif
   5564  2776b				   -	       if	DLINDEX = 14
   5565  2776b				   -ZONE14ADDRESS =	TMPMEMADDRESS
   5566  2776b					       endif
   5567  2776b				   -	       if	DLINDEX = 15
   5568  2776b				   -ZONE15ADDRESS =	TMPMEMADDRESS
   5569  2776b					       endif
   5570  2776b				   -	       if	DLINDEX = 16
   5571  2776b				   -ZONE16ADDRESS =	TMPMEMADDRESS
   5572  2776b					       endif
   5573  2776b				   -	       if	DLINDEX = 17
   5574  2776b				   -ZONE17ADDRESS =	TMPMEMADDRESS
   5575  2776b					       endif
   5576  2776b				   -	       if	DLINDEX = 18
   5577  2776b				   -ZONE18ADDRESS =	TMPMEMADDRESS
   5578  2776b					       endif
   5579  2776b				   -	       if	DLINDEX = 19
   5580  2776b				   -ZONE19ADDRESS =	TMPMEMADDRESS
   5581  2776b					       endif
   5582  2776b				   -	       if	DLINDEX = 20
   5583  2776b				   -ZONE20ADDRESS =	TMPMEMADDRESS
   5584  2776b					       endif
   5585  2776b				   -	       if	DLINDEX = 21
   5586  2776b				   -ZONE21ADDRESS =	TMPMEMADDRESS
   5587  2776b					       endif
   5588  2776b				   -	       if	DLINDEX = 22
   5589  2776b				   -ZONE22ADDRESS =	TMPMEMADDRESS
   5590  2776b					       endif
   5591  2776b				   -	       if	DLINDEX = 23
   5592  2776b				   -ZONE23ADDRESS =	TMPMEMADDRESS
   5593  2776b					       endif
   5594  2776b				   -	       if	DLINDEX = 24
   5595  2776b				   -ZONE24ADDRESS =	TMPMEMADDRESS
   5596  2776b					       endif
   5597  2776b				   -	       if	DLINDEX = 25
   5598  2776b				   -ZONE25ADDRESS =	TMPMEMADDRESS
   5599  2776b					       endif
   5600  2776b				   -	       if	DLINDEX = 26
   5601  2776b				   -ZONE26ADDRESS =	TMPMEMADDRESS
   5602  2776b					       endif
   5603  2776b				   -	       if	DLINDEX = 27
   5604  2776b				   -ZONE27ADDRESS =	TMPMEMADDRESS
   5605  2776b					       endif
   5606  2776b				    DLINDEX    SET	DLINDEX + 1
   5511  2776b					       REPEND
   5512  2776b				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5513  2776b				   -	       ifconst	EXTRADLMEMORY
   5514  2776b				   -	       if	TMPMEMADDRESS > $1FFF
   5515  2776b				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5516  2776b				   -	       else
   5517  2776b				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5518  2776b				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5519  2776b				   -	       endif
   5520  2776b				   -	       endif		; TMPMEMADDRESS > $1FFF
   5521  2776b					       endif		; EXTRADLMEMORY
   5522  2776b				   -	       if	DLINDEX = 0
   5523  2776b				   -ZONE0ADDRESS =	TMPMEMADDRESS
   5524  2776b					       endif
   5525  2776b				   -	       if	DLINDEX = 1
   5526  2776b				   -ZONE1ADDRESS =	TMPMEMADDRESS
   5527  2776b					       endif
   5528  2776b					       if	DLINDEX = 2
   5529  2776b			46 aa	    ZONE2ADDRESS =	TMPMEMADDRESS
   5530  2776b					       endif
   5531  2776b				   -	       if	DLINDEX = 3
   5532  2776b				   -ZONE3ADDRESS =	TMPMEMADDRESS
   5533  2776b					       endif
   5534  2776b				   -	       if	DLINDEX = 4
   5535  2776b				   -ZONE4ADDRESS =	TMPMEMADDRESS
   5536  2776b					       endif
   5537  2776b				   -	       if	DLINDEX = 5
   5538  2776b				   -ZONE5ADDRESS =	TMPMEMADDRESS
   5539  2776b					       endif
   5540  2776b				   -	       if	DLINDEX = 6
   5541  2776b				   -ZONE6ADDRESS =	TMPMEMADDRESS
   5542  2776b					       endif
   5543  2776b				   -	       if	DLINDEX = 7
   5544  2776b				   -ZONE7ADDRESS =	TMPMEMADDRESS
   5545  2776b					       endif
   5546  2776b				   -	       if	DLINDEX = 8
   5547  2776b				   -ZONE8ADDRESS =	TMPMEMADDRESS
   5548  2776b					       endif
   5549  2776b				   -	       if	DLINDEX = 9
   5550  2776b				   -ZONE9ADDRESS =	TMPMEMADDRESS
   5551  2776b					       endif
   5552  2776b				   -	       if	DLINDEX = 10
   5553  2776b				   -ZONE10ADDRESS =	TMPMEMADDRESS
   5554  2776b					       endif
   5555  2776b				   -	       if	DLINDEX = 11
   5556  2776b				   -ZONE11ADDRESS =	TMPMEMADDRESS
   5557  2776b					       endif
   5558  2776b				   -	       if	DLINDEX = 12
   5559  2776b				   -ZONE12ADDRESS =	TMPMEMADDRESS
   5560  2776b					       endif
   5561  2776b				   -	       if	DLINDEX = 13
   5562  2776b				   -ZONE13ADDRESS =	TMPMEMADDRESS
   5563  2776b					       endif
   5564  2776b				   -	       if	DLINDEX = 14
   5565  2776b				   -ZONE14ADDRESS =	TMPMEMADDRESS
   5566  2776b					       endif
   5567  2776b				   -	       if	DLINDEX = 15
   5568  2776b				   -ZONE15ADDRESS =	TMPMEMADDRESS
   5569  2776b					       endif
   5570  2776b				   -	       if	DLINDEX = 16
   5571  2776b				   -ZONE16ADDRESS =	TMPMEMADDRESS
   5572  2776b					       endif
   5573  2776b				   -	       if	DLINDEX = 17
   5574  2776b				   -ZONE17ADDRESS =	TMPMEMADDRESS
   5575  2776b					       endif
   5576  2776b				   -	       if	DLINDEX = 18
   5577  2776b				   -ZONE18ADDRESS =	TMPMEMADDRESS
   5578  2776b					       endif
   5579  2776b				   -	       if	DLINDEX = 19
   5580  2776b				   -ZONE19ADDRESS =	TMPMEMADDRESS
   5581  2776b					       endif
   5582  2776b				   -	       if	DLINDEX = 20
   5583  2776b				   -ZONE20ADDRESS =	TMPMEMADDRESS
   5584  2776b					       endif
   5585  2776b				   -	       if	DLINDEX = 21
   5586  2776b				   -ZONE21ADDRESS =	TMPMEMADDRESS
   5587  2776b					       endif
   5588  2776b				   -	       if	DLINDEX = 22
   5589  2776b				   -ZONE22ADDRESS =	TMPMEMADDRESS
   5590  2776b					       endif
   5591  2776b				   -	       if	DLINDEX = 23
   5592  2776b				   -ZONE23ADDRESS =	TMPMEMADDRESS
   5593  2776b					       endif
   5594  2776b				   -	       if	DLINDEX = 24
   5595  2776b				   -ZONE24ADDRESS =	TMPMEMADDRESS
   5596  2776b					       endif
   5597  2776b				   -	       if	DLINDEX = 25
   5598  2776b				   -ZONE25ADDRESS =	TMPMEMADDRESS
   5599  2776b					       endif
   5600  2776b				   -	       if	DLINDEX = 26
   5601  2776b				   -ZONE26ADDRESS =	TMPMEMADDRESS
   5602  2776b					       endif
   5603  2776b				   -	       if	DLINDEX = 27
   5604  2776b				   -ZONE27ADDRESS =	TMPMEMADDRESS
   5605  2776b					       endif
   5606  2776b				    DLINDEX    SET	DLINDEX + 1
   5511  2776b					       REPEND
   5512  2776b				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5513  2776b				   -	       ifconst	EXTRADLMEMORY
   5514  2776b				   -	       if	TMPMEMADDRESS > $1FFF
   5515  2776b				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5516  2776b				   -	       else
   5517  2776b				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5518  2776b				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5519  2776b				   -	       endif
   5520  2776b				   -	       endif		; TMPMEMADDRESS > $1FFF
   5521  2776b					       endif		; EXTRADLMEMORY
   5522  2776b				   -	       if	DLINDEX = 0
   5523  2776b				   -ZONE0ADDRESS =	TMPMEMADDRESS
   5524  2776b					       endif
   5525  2776b				   -	       if	DLINDEX = 1
   5526  2776b				   -ZONE1ADDRESS =	TMPMEMADDRESS
   5527  2776b					       endif
   5528  2776b				   -	       if	DLINDEX = 2
   5529  2776b				   -ZONE2ADDRESS =	TMPMEMADDRESS
   5530  2776b					       endif
   5531  2776b					       if	DLINDEX = 3
   5532  2776b			4a 00	    ZONE3ADDRESS =	TMPMEMADDRESS
   5533  2776b					       endif
   5534  2776b				   -	       if	DLINDEX = 4
   5535  2776b				   -ZONE4ADDRESS =	TMPMEMADDRESS
   5536  2776b					       endif
   5537  2776b				   -	       if	DLINDEX = 5
   5538  2776b				   -ZONE5ADDRESS =	TMPMEMADDRESS
   5539  2776b					       endif
   5540  2776b				   -	       if	DLINDEX = 6
   5541  2776b				   -ZONE6ADDRESS =	TMPMEMADDRESS
   5542  2776b					       endif
   5543  2776b				   -	       if	DLINDEX = 7
   5544  2776b				   -ZONE7ADDRESS =	TMPMEMADDRESS
   5545  2776b					       endif
   5546  2776b				   -	       if	DLINDEX = 8
   5547  2776b				   -ZONE8ADDRESS =	TMPMEMADDRESS
   5548  2776b					       endif
   5549  2776b				   -	       if	DLINDEX = 9
   5550  2776b				   -ZONE9ADDRESS =	TMPMEMADDRESS
   5551  2776b					       endif
   5552  2776b				   -	       if	DLINDEX = 10
   5553  2776b				   -ZONE10ADDRESS =	TMPMEMADDRESS
   5554  2776b					       endif
   5555  2776b				   -	       if	DLINDEX = 11
   5556  2776b				   -ZONE11ADDRESS =	TMPMEMADDRESS
   5557  2776b					       endif
   5558  2776b				   -	       if	DLINDEX = 12
   5559  2776b				   -ZONE12ADDRESS =	TMPMEMADDRESS
   5560  2776b					       endif
   5561  2776b				   -	       if	DLINDEX = 13
   5562  2776b				   -ZONE13ADDRESS =	TMPMEMADDRESS
   5563  2776b					       endif
   5564  2776b				   -	       if	DLINDEX = 14
   5565  2776b				   -ZONE14ADDRESS =	TMPMEMADDRESS
   5566  2776b					       endif
   5567  2776b				   -	       if	DLINDEX = 15
   5568  2776b				   -ZONE15ADDRESS =	TMPMEMADDRESS
   5569  2776b					       endif
   5570  2776b				   -	       if	DLINDEX = 16
   5571  2776b				   -ZONE16ADDRESS =	TMPMEMADDRESS
   5572  2776b					       endif
   5573  2776b				   -	       if	DLINDEX = 17
   5574  2776b				   -ZONE17ADDRESS =	TMPMEMADDRESS
   5575  2776b					       endif
   5576  2776b				   -	       if	DLINDEX = 18
   5577  2776b				   -ZONE18ADDRESS =	TMPMEMADDRESS
   5578  2776b					       endif
   5579  2776b				   -	       if	DLINDEX = 19
   5580  2776b				   -ZONE19ADDRESS =	TMPMEMADDRESS
   5581  2776b					       endif
   5582  2776b				   -	       if	DLINDEX = 20
   5583  2776b				   -ZONE20ADDRESS =	TMPMEMADDRESS
   5584  2776b					       endif
   5585  2776b				   -	       if	DLINDEX = 21
   5586  2776b				   -ZONE21ADDRESS =	TMPMEMADDRESS
   5587  2776b					       endif
   5588  2776b				   -	       if	DLINDEX = 22
   5589  2776b				   -ZONE22ADDRESS =	TMPMEMADDRESS
   5590  2776b					       endif
   5591  2776b				   -	       if	DLINDEX = 23
   5592  2776b				   -ZONE23ADDRESS =	TMPMEMADDRESS
   5593  2776b					       endif
   5594  2776b				   -	       if	DLINDEX = 24
   5595  2776b				   -ZONE24ADDRESS =	TMPMEMADDRESS
   5596  2776b					       endif
   5597  2776b				   -	       if	DLINDEX = 25
   5598  2776b				   -ZONE25ADDRESS =	TMPMEMADDRESS
   5599  2776b					       endif
   5600  2776b				   -	       if	DLINDEX = 26
   5601  2776b				   -ZONE26ADDRESS =	TMPMEMADDRESS
   5602  2776b					       endif
   5603  2776b				   -	       if	DLINDEX = 27
   5604  2776b				   -ZONE27ADDRESS =	TMPMEMADDRESS
   5605  2776b					       endif
   5606  2776b				    DLINDEX    SET	DLINDEX + 1
   5511  2776b					       REPEND
   5512  2776b				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5513  2776b				   -	       ifconst	EXTRADLMEMORY
   5514  2776b				   -	       if	TMPMEMADDRESS > $1FFF
   5515  2776b				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5516  2776b				   -	       else
   5517  2776b				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5518  2776b				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5519  2776b				   -	       endif
   5520  2776b				   -	       endif		; TMPMEMADDRESS > $1FFF
   5521  2776b					       endif		; EXTRADLMEMORY
   5522  2776b				   -	       if	DLINDEX = 0
   5523  2776b				   -ZONE0ADDRESS =	TMPMEMADDRESS
   5524  2776b					       endif
   5525  2776b				   -	       if	DLINDEX = 1
   5526  2776b				   -ZONE1ADDRESS =	TMPMEMADDRESS
   5527  2776b					       endif
   5528  2776b				   -	       if	DLINDEX = 2
   5529  2776b				   -ZONE2ADDRESS =	TMPMEMADDRESS
   5530  2776b					       endif
   5531  2776b				   -	       if	DLINDEX = 3
   5532  2776b				   -ZONE3ADDRESS =	TMPMEMADDRESS
   5533  2776b					       endif
   5534  2776b					       if	DLINDEX = 4
   5535  2776b			4d 55	    ZONE4ADDRESS =	TMPMEMADDRESS
   5536  2776b					       endif
   5537  2776b				   -	       if	DLINDEX = 5
   5538  2776b				   -ZONE5ADDRESS =	TMPMEMADDRESS
   5539  2776b					       endif
   5540  2776b				   -	       if	DLINDEX = 6
   5541  2776b				   -ZONE6ADDRESS =	TMPMEMADDRESS
   5542  2776b					       endif
   5543  2776b				   -	       if	DLINDEX = 7
   5544  2776b				   -ZONE7ADDRESS =	TMPMEMADDRESS
   5545  2776b					       endif
   5546  2776b				   -	       if	DLINDEX = 8
   5547  2776b				   -ZONE8ADDRESS =	TMPMEMADDRESS
   5548  2776b					       endif
   5549  2776b				   -	       if	DLINDEX = 9
   5550  2776b				   -ZONE9ADDRESS =	TMPMEMADDRESS
   5551  2776b					       endif
   5552  2776b				   -	       if	DLINDEX = 10
   5553  2776b				   -ZONE10ADDRESS =	TMPMEMADDRESS
   5554  2776b					       endif
   5555  2776b				   -	       if	DLINDEX = 11
   5556  2776b				   -ZONE11ADDRESS =	TMPMEMADDRESS
   5557  2776b					       endif
   5558  2776b				   -	       if	DLINDEX = 12
   5559  2776b				   -ZONE12ADDRESS =	TMPMEMADDRESS
   5560  2776b					       endif
   5561  2776b				   -	       if	DLINDEX = 13
   5562  2776b				   -ZONE13ADDRESS =	TMPMEMADDRESS
   5563  2776b					       endif
   5564  2776b				   -	       if	DLINDEX = 14
   5565  2776b				   -ZONE14ADDRESS =	TMPMEMADDRESS
   5566  2776b					       endif
   5567  2776b				   -	       if	DLINDEX = 15
   5568  2776b				   -ZONE15ADDRESS =	TMPMEMADDRESS
   5569  2776b					       endif
   5570  2776b				   -	       if	DLINDEX = 16
   5571  2776b				   -ZONE16ADDRESS =	TMPMEMADDRESS
   5572  2776b					       endif
   5573  2776b				   -	       if	DLINDEX = 17
   5574  2776b				   -ZONE17ADDRESS =	TMPMEMADDRESS
   5575  2776b					       endif
   5576  2776b				   -	       if	DLINDEX = 18
   5577  2776b				   -ZONE18ADDRESS =	TMPMEMADDRESS
   5578  2776b					       endif
   5579  2776b				   -	       if	DLINDEX = 19
   5580  2776b				   -ZONE19ADDRESS =	TMPMEMADDRESS
   5581  2776b					       endif
   5582  2776b				   -	       if	DLINDEX = 20
   5583  2776b				   -ZONE20ADDRESS =	TMPMEMADDRESS
   5584  2776b					       endif
   5585  2776b				   -	       if	DLINDEX = 21
   5586  2776b				   -ZONE21ADDRESS =	TMPMEMADDRESS
   5587  2776b					       endif
   5588  2776b				   -	       if	DLINDEX = 22
   5589  2776b				   -ZONE22ADDRESS =	TMPMEMADDRESS
   5590  2776b					       endif
   5591  2776b				   -	       if	DLINDEX = 23
   5592  2776b				   -ZONE23ADDRESS =	TMPMEMADDRESS
   5593  2776b					       endif
   5594  2776b				   -	       if	DLINDEX = 24
   5595  2776b				   -ZONE24ADDRESS =	TMPMEMADDRESS
   5596  2776b					       endif
   5597  2776b				   -	       if	DLINDEX = 25
   5598  2776b				   -ZONE25ADDRESS =	TMPMEMADDRESS
   5599  2776b					       endif
   5600  2776b				   -	       if	DLINDEX = 26
   5601  2776b				   -ZONE26ADDRESS =	TMPMEMADDRESS
   5602  2776b					       endif
   5603  2776b				   -	       if	DLINDEX = 27
   5604  2776b				   -ZONE27ADDRESS =	TMPMEMADDRESS
   5605  2776b					       endif
   5606  2776b				    DLINDEX    SET	DLINDEX + 1
   5511  2776b					       REPEND
   5512  2776b				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5513  2776b				   -	       ifconst	EXTRADLMEMORY
   5514  2776b				   -	       if	TMPMEMADDRESS > $1FFF
   5515  2776b				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5516  2776b				   -	       else
   5517  2776b				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5518  2776b				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5519  2776b				   -	       endif
   5520  2776b				   -	       endif		; TMPMEMADDRESS > $1FFF
   5521  2776b					       endif		; EXTRADLMEMORY
   5522  2776b				   -	       if	DLINDEX = 0
   5523  2776b				   -ZONE0ADDRESS =	TMPMEMADDRESS
   5524  2776b					       endif
   5525  2776b				   -	       if	DLINDEX = 1
   5526  2776b				   -ZONE1ADDRESS =	TMPMEMADDRESS
   5527  2776b					       endif
   5528  2776b				   -	       if	DLINDEX = 2
   5529  2776b				   -ZONE2ADDRESS =	TMPMEMADDRESS
   5530  2776b					       endif
   5531  2776b				   -	       if	DLINDEX = 3
   5532  2776b				   -ZONE3ADDRESS =	TMPMEMADDRESS
   5533  2776b					       endif
   5534  2776b				   -	       if	DLINDEX = 4
   5535  2776b				   -ZONE4ADDRESS =	TMPMEMADDRESS
   5536  2776b					       endif
   5537  2776b					       if	DLINDEX = 5
   5538  2776b			50 aa	    ZONE5ADDRESS =	TMPMEMADDRESS
   5539  2776b					       endif
   5540  2776b				   -	       if	DLINDEX = 6
   5541  2776b				   -ZONE6ADDRESS =	TMPMEMADDRESS
   5542  2776b					       endif
   5543  2776b				   -	       if	DLINDEX = 7
   5544  2776b				   -ZONE7ADDRESS =	TMPMEMADDRESS
   5545  2776b					       endif
   5546  2776b				   -	       if	DLINDEX = 8
   5547  2776b				   -ZONE8ADDRESS =	TMPMEMADDRESS
   5548  2776b					       endif
   5549  2776b				   -	       if	DLINDEX = 9
   5550  2776b				   -ZONE9ADDRESS =	TMPMEMADDRESS
   5551  2776b					       endif
   5552  2776b				   -	       if	DLINDEX = 10
   5553  2776b				   -ZONE10ADDRESS =	TMPMEMADDRESS
   5554  2776b					       endif
   5555  2776b				   -	       if	DLINDEX = 11
   5556  2776b				   -ZONE11ADDRESS =	TMPMEMADDRESS
   5557  2776b					       endif
   5558  2776b				   -	       if	DLINDEX = 12
   5559  2776b				   -ZONE12ADDRESS =	TMPMEMADDRESS
   5560  2776b					       endif
   5561  2776b				   -	       if	DLINDEX = 13
   5562  2776b				   -ZONE13ADDRESS =	TMPMEMADDRESS
   5563  2776b					       endif
   5564  2776b				   -	       if	DLINDEX = 14
   5565  2776b				   -ZONE14ADDRESS =	TMPMEMADDRESS
   5566  2776b					       endif
   5567  2776b				   -	       if	DLINDEX = 15
   5568  2776b				   -ZONE15ADDRESS =	TMPMEMADDRESS
   5569  2776b					       endif
   5570  2776b				   -	       if	DLINDEX = 16
   5571  2776b				   -ZONE16ADDRESS =	TMPMEMADDRESS
   5572  2776b					       endif
   5573  2776b				   -	       if	DLINDEX = 17
   5574  2776b				   -ZONE17ADDRESS =	TMPMEMADDRESS
   5575  2776b					       endif
   5576  2776b				   -	       if	DLINDEX = 18
   5577  2776b				   -ZONE18ADDRESS =	TMPMEMADDRESS
   5578  2776b					       endif
   5579  2776b				   -	       if	DLINDEX = 19
   5580  2776b				   -ZONE19ADDRESS =	TMPMEMADDRESS
   5581  2776b					       endif
   5582  2776b				   -	       if	DLINDEX = 20
   5583  2776b				   -ZONE20ADDRESS =	TMPMEMADDRESS
   5584  2776b					       endif
   5585  2776b				   -	       if	DLINDEX = 21
   5586  2776b				   -ZONE21ADDRESS =	TMPMEMADDRESS
   5587  2776b					       endif
   5588  2776b				   -	       if	DLINDEX = 22
   5589  2776b				   -ZONE22ADDRESS =	TMPMEMADDRESS
   5590  2776b					       endif
   5591  2776b				   -	       if	DLINDEX = 23
   5592  2776b				   -ZONE23ADDRESS =	TMPMEMADDRESS
   5593  2776b					       endif
   5594  2776b				   -	       if	DLINDEX = 24
   5595  2776b				   -ZONE24ADDRESS =	TMPMEMADDRESS
   5596  2776b					       endif
   5597  2776b				   -	       if	DLINDEX = 25
   5598  2776b				   -ZONE25ADDRESS =	TMPMEMADDRESS
   5599  2776b					       endif
   5600  2776b				   -	       if	DLINDEX = 26
   5601  2776b				   -ZONE26ADDRESS =	TMPMEMADDRESS
   5602  2776b					       endif
   5603  2776b				   -	       if	DLINDEX = 27
   5604  2776b				   -ZONE27ADDRESS =	TMPMEMADDRESS
   5605  2776b					       endif
   5606  2776b				    DLINDEX    SET	DLINDEX + 1
   5511  2776b					       REPEND
   5512  2776b				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5513  2776b				   -	       ifconst	EXTRADLMEMORY
   5514  2776b				   -	       if	TMPMEMADDRESS > $1FFF
   5515  2776b				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5516  2776b				   -	       else
   5517  2776b				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5518  2776b				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5519  2776b				   -	       endif
   5520  2776b				   -	       endif		; TMPMEMADDRESS > $1FFF
   5521  2776b					       endif		; EXTRADLMEMORY
   5522  2776b				   -	       if	DLINDEX = 0
   5523  2776b				   -ZONE0ADDRESS =	TMPMEMADDRESS
   5524  2776b					       endif
   5525  2776b				   -	       if	DLINDEX = 1
   5526  2776b				   -ZONE1ADDRESS =	TMPMEMADDRESS
   5527  2776b					       endif
   5528  2776b				   -	       if	DLINDEX = 2
   5529  2776b				   -ZONE2ADDRESS =	TMPMEMADDRESS
   5530  2776b					       endif
   5531  2776b				   -	       if	DLINDEX = 3
   5532  2776b				   -ZONE3ADDRESS =	TMPMEMADDRESS
   5533  2776b					       endif
   5534  2776b				   -	       if	DLINDEX = 4
   5535  2776b				   -ZONE4ADDRESS =	TMPMEMADDRESS
   5536  2776b					       endif
   5537  2776b				   -	       if	DLINDEX = 5
   5538  2776b				   -ZONE5ADDRESS =	TMPMEMADDRESS
   5539  2776b					       endif
   5540  2776b					       if	DLINDEX = 6
   5541  2776b			54 00	    ZONE6ADDRESS =	TMPMEMADDRESS
   5542  2776b					       endif
   5543  2776b				   -	       if	DLINDEX = 7
   5544  2776b				   -ZONE7ADDRESS =	TMPMEMADDRESS
   5545  2776b					       endif
   5546  2776b				   -	       if	DLINDEX = 8
   5547  2776b				   -ZONE8ADDRESS =	TMPMEMADDRESS
   5548  2776b					       endif
   5549  2776b				   -	       if	DLINDEX = 9
   5550  2776b				   -ZONE9ADDRESS =	TMPMEMADDRESS
   5551  2776b					       endif
   5552  2776b				   -	       if	DLINDEX = 10
   5553  2776b				   -ZONE10ADDRESS =	TMPMEMADDRESS
   5554  2776b					       endif
   5555  2776b				   -	       if	DLINDEX = 11
   5556  2776b				   -ZONE11ADDRESS =	TMPMEMADDRESS
   5557  2776b					       endif
   5558  2776b				   -	       if	DLINDEX = 12
   5559  2776b				   -ZONE12ADDRESS =	TMPMEMADDRESS
   5560  2776b					       endif
   5561  2776b				   -	       if	DLINDEX = 13
   5562  2776b				   -ZONE13ADDRESS =	TMPMEMADDRESS
   5563  2776b					       endif
   5564  2776b				   -	       if	DLINDEX = 14
   5565  2776b				   -ZONE14ADDRESS =	TMPMEMADDRESS
   5566  2776b					       endif
   5567  2776b				   -	       if	DLINDEX = 15
   5568  2776b				   -ZONE15ADDRESS =	TMPMEMADDRESS
   5569  2776b					       endif
   5570  2776b				   -	       if	DLINDEX = 16
   5571  2776b				   -ZONE16ADDRESS =	TMPMEMADDRESS
   5572  2776b					       endif
   5573  2776b				   -	       if	DLINDEX = 17
   5574  2776b				   -ZONE17ADDRESS =	TMPMEMADDRESS
   5575  2776b					       endif
   5576  2776b				   -	       if	DLINDEX = 18
   5577  2776b				   -ZONE18ADDRESS =	TMPMEMADDRESS
   5578  2776b					       endif
   5579  2776b				   -	       if	DLINDEX = 19
   5580  2776b				   -ZONE19ADDRESS =	TMPMEMADDRESS
   5581  2776b					       endif
   5582  2776b				   -	       if	DLINDEX = 20
   5583  2776b				   -ZONE20ADDRESS =	TMPMEMADDRESS
   5584  2776b					       endif
   5585  2776b				   -	       if	DLINDEX = 21
   5586  2776b				   -ZONE21ADDRESS =	TMPMEMADDRESS
   5587  2776b					       endif
   5588  2776b				   -	       if	DLINDEX = 22
   5589  2776b				   -ZONE22ADDRESS =	TMPMEMADDRESS
   5590  2776b					       endif
   5591  2776b				   -	       if	DLINDEX = 23
   5592  2776b				   -ZONE23ADDRESS =	TMPMEMADDRESS
   5593  2776b					       endif
   5594  2776b				   -	       if	DLINDEX = 24
   5595  2776b				   -ZONE24ADDRESS =	TMPMEMADDRESS
   5596  2776b					       endif
   5597  2776b				   -	       if	DLINDEX = 25
   5598  2776b				   -ZONE25ADDRESS =	TMPMEMADDRESS
   5599  2776b					       endif
   5600  2776b				   -	       if	DLINDEX = 26
   5601  2776b				   -ZONE26ADDRESS =	TMPMEMADDRESS
   5602  2776b					       endif
   5603  2776b				   -	       if	DLINDEX = 27
   5604  2776b				   -ZONE27ADDRESS =	TMPMEMADDRESS
   5605  2776b					       endif
   5606  2776b				    DLINDEX    SET	DLINDEX + 1
   5511  2776b					       REPEND
   5512  2776b				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5513  2776b				   -	       ifconst	EXTRADLMEMORY
   5514  2776b				   -	       if	TMPMEMADDRESS > $1FFF
   5515  2776b				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5516  2776b				   -	       else
   5517  2776b				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5518  2776b				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5519  2776b				   -	       endif
   5520  2776b				   -	       endif		; TMPMEMADDRESS > $1FFF
   5521  2776b					       endif		; EXTRADLMEMORY
   5522  2776b				   -	       if	DLINDEX = 0
   5523  2776b				   -ZONE0ADDRESS =	TMPMEMADDRESS
   5524  2776b					       endif
   5525  2776b				   -	       if	DLINDEX = 1
   5526  2776b				   -ZONE1ADDRESS =	TMPMEMADDRESS
   5527  2776b					       endif
   5528  2776b				   -	       if	DLINDEX = 2
   5529  2776b				   -ZONE2ADDRESS =	TMPMEMADDRESS
   5530  2776b					       endif
   5531  2776b				   -	       if	DLINDEX = 3
   5532  2776b				   -ZONE3ADDRESS =	TMPMEMADDRESS
   5533  2776b					       endif
   5534  2776b				   -	       if	DLINDEX = 4
   5535  2776b				   -ZONE4ADDRESS =	TMPMEMADDRESS
   5536  2776b					       endif
   5537  2776b				   -	       if	DLINDEX = 5
   5538  2776b				   -ZONE5ADDRESS =	TMPMEMADDRESS
   5539  2776b					       endif
   5540  2776b				   -	       if	DLINDEX = 6
   5541  2776b				   -ZONE6ADDRESS =	TMPMEMADDRESS
   5542  2776b					       endif
   5543  2776b					       if	DLINDEX = 7
   5544  2776b			57 55	    ZONE7ADDRESS =	TMPMEMADDRESS
   5545  2776b					       endif
   5546  2776b				   -	       if	DLINDEX = 8
   5547  2776b				   -ZONE8ADDRESS =	TMPMEMADDRESS
   5548  2776b					       endif
   5549  2776b				   -	       if	DLINDEX = 9
   5550  2776b				   -ZONE9ADDRESS =	TMPMEMADDRESS
   5551  2776b					       endif
   5552  2776b				   -	       if	DLINDEX = 10
   5553  2776b				   -ZONE10ADDRESS =	TMPMEMADDRESS
   5554  2776b					       endif
   5555  2776b				   -	       if	DLINDEX = 11
   5556  2776b				   -ZONE11ADDRESS =	TMPMEMADDRESS
   5557  2776b					       endif
   5558  2776b				   -	       if	DLINDEX = 12
   5559  2776b				   -ZONE12ADDRESS =	TMPMEMADDRESS
   5560  2776b					       endif
   5561  2776b				   -	       if	DLINDEX = 13
   5562  2776b				   -ZONE13ADDRESS =	TMPMEMADDRESS
   5563  2776b					       endif
   5564  2776b				   -	       if	DLINDEX = 14
   5565  2776b				   -ZONE14ADDRESS =	TMPMEMADDRESS
   5566  2776b					       endif
   5567  2776b				   -	       if	DLINDEX = 15
   5568  2776b				   -ZONE15ADDRESS =	TMPMEMADDRESS
   5569  2776b					       endif
   5570  2776b				   -	       if	DLINDEX = 16
   5571  2776b				   -ZONE16ADDRESS =	TMPMEMADDRESS
   5572  2776b					       endif
   5573  2776b				   -	       if	DLINDEX = 17
   5574  2776b				   -ZONE17ADDRESS =	TMPMEMADDRESS
   5575  2776b					       endif
   5576  2776b				   -	       if	DLINDEX = 18
   5577  2776b				   -ZONE18ADDRESS =	TMPMEMADDRESS
   5578  2776b					       endif
   5579  2776b				   -	       if	DLINDEX = 19
   5580  2776b				   -ZONE19ADDRESS =	TMPMEMADDRESS
   5581  2776b					       endif
   5582  2776b				   -	       if	DLINDEX = 20
   5583  2776b				   -ZONE20ADDRESS =	TMPMEMADDRESS
   5584  2776b					       endif
   5585  2776b				   -	       if	DLINDEX = 21
   5586  2776b				   -ZONE21ADDRESS =	TMPMEMADDRESS
   5587  2776b					       endif
   5588  2776b				   -	       if	DLINDEX = 22
   5589  2776b				   -ZONE22ADDRESS =	TMPMEMADDRESS
   5590  2776b					       endif
   5591  2776b				   -	       if	DLINDEX = 23
   5592  2776b				   -ZONE23ADDRESS =	TMPMEMADDRESS
   5593  2776b					       endif
   5594  2776b				   -	       if	DLINDEX = 24
   5595  2776b				   -ZONE24ADDRESS =	TMPMEMADDRESS
   5596  2776b					       endif
   5597  2776b				   -	       if	DLINDEX = 25
   5598  2776b				   -ZONE25ADDRESS =	TMPMEMADDRESS
   5599  2776b					       endif
   5600  2776b				   -	       if	DLINDEX = 26
   5601  2776b				   -ZONE26ADDRESS =	TMPMEMADDRESS
   5602  2776b					       endif
   5603  2776b				   -	       if	DLINDEX = 27
   5604  2776b				   -ZONE27ADDRESS =	TMPMEMADDRESS
   5605  2776b					       endif
   5606  2776b				    DLINDEX    SET	DLINDEX + 1
   5511  2776b					       REPEND
   5512  2776b				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5513  2776b				   -	       ifconst	EXTRADLMEMORY
   5514  2776b				   -	       if	TMPMEMADDRESS > $1FFF
   5515  2776b				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5516  2776b				   -	       else
   5517  2776b				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5518  2776b				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5519  2776b				   -	       endif
   5520  2776b				   -	       endif		; TMPMEMADDRESS > $1FFF
   5521  2776b					       endif		; EXTRADLMEMORY
   5522  2776b				   -	       if	DLINDEX = 0
   5523  2776b				   -ZONE0ADDRESS =	TMPMEMADDRESS
   5524  2776b					       endif
   5525  2776b				   -	       if	DLINDEX = 1
   5526  2776b				   -ZONE1ADDRESS =	TMPMEMADDRESS
   5527  2776b					       endif
   5528  2776b				   -	       if	DLINDEX = 2
   5529  2776b				   -ZONE2ADDRESS =	TMPMEMADDRESS
   5530  2776b					       endif
   5531  2776b				   -	       if	DLINDEX = 3
   5532  2776b				   -ZONE3ADDRESS =	TMPMEMADDRESS
   5533  2776b					       endif
   5534  2776b				   -	       if	DLINDEX = 4
   5535  2776b				   -ZONE4ADDRESS =	TMPMEMADDRESS
   5536  2776b					       endif
   5537  2776b				   -	       if	DLINDEX = 5
   5538  2776b				   -ZONE5ADDRESS =	TMPMEMADDRESS
   5539  2776b					       endif
   5540  2776b				   -	       if	DLINDEX = 6
   5541  2776b				   -ZONE6ADDRESS =	TMPMEMADDRESS
   5542  2776b					       endif
   5543  2776b				   -	       if	DLINDEX = 7
   5544  2776b				   -ZONE7ADDRESS =	TMPMEMADDRESS
   5545  2776b					       endif
   5546  2776b					       if	DLINDEX = 8
   5547  2776b			5a aa	    ZONE8ADDRESS =	TMPMEMADDRESS
   5548  2776b					       endif
   5549  2776b				   -	       if	DLINDEX = 9
   5550  2776b				   -ZONE9ADDRESS =	TMPMEMADDRESS
   5551  2776b					       endif
   5552  2776b				   -	       if	DLINDEX = 10
   5553  2776b				   -ZONE10ADDRESS =	TMPMEMADDRESS
   5554  2776b					       endif
   5555  2776b				   -	       if	DLINDEX = 11
   5556  2776b				   -ZONE11ADDRESS =	TMPMEMADDRESS
   5557  2776b					       endif
   5558  2776b				   -	       if	DLINDEX = 12
   5559  2776b				   -ZONE12ADDRESS =	TMPMEMADDRESS
   5560  2776b					       endif
   5561  2776b				   -	       if	DLINDEX = 13
   5562  2776b				   -ZONE13ADDRESS =	TMPMEMADDRESS
   5563  2776b					       endif
   5564  2776b				   -	       if	DLINDEX = 14
   5565  2776b				   -ZONE14ADDRESS =	TMPMEMADDRESS
   5566  2776b					       endif
   5567  2776b				   -	       if	DLINDEX = 15
   5568  2776b				   -ZONE15ADDRESS =	TMPMEMADDRESS
   5569  2776b					       endif
   5570  2776b				   -	       if	DLINDEX = 16
   5571  2776b				   -ZONE16ADDRESS =	TMPMEMADDRESS
   5572  2776b					       endif
   5573  2776b				   -	       if	DLINDEX = 17
   5574  2776b				   -ZONE17ADDRESS =	TMPMEMADDRESS
   5575  2776b					       endif
   5576  2776b				   -	       if	DLINDEX = 18
   5577  2776b				   -ZONE18ADDRESS =	TMPMEMADDRESS
   5578  2776b					       endif
   5579  2776b				   -	       if	DLINDEX = 19
   5580  2776b				   -ZONE19ADDRESS =	TMPMEMADDRESS
   5581  2776b					       endif
   5582  2776b				   -	       if	DLINDEX = 20
   5583  2776b				   -ZONE20ADDRESS =	TMPMEMADDRESS
   5584  2776b					       endif
   5585  2776b				   -	       if	DLINDEX = 21
   5586  2776b				   -ZONE21ADDRESS =	TMPMEMADDRESS
   5587  2776b					       endif
   5588  2776b				   -	       if	DLINDEX = 22
   5589  2776b				   -ZONE22ADDRESS =	TMPMEMADDRESS
   5590  2776b					       endif
   5591  2776b				   -	       if	DLINDEX = 23
   5592  2776b				   -ZONE23ADDRESS =	TMPMEMADDRESS
   5593  2776b					       endif
   5594  2776b				   -	       if	DLINDEX = 24
   5595  2776b				   -ZONE24ADDRESS =	TMPMEMADDRESS
   5596  2776b					       endif
   5597  2776b				   -	       if	DLINDEX = 25
   5598  2776b				   -ZONE25ADDRESS =	TMPMEMADDRESS
   5599  2776b					       endif
   5600  2776b				   -	       if	DLINDEX = 26
   5601  2776b				   -ZONE26ADDRESS =	TMPMEMADDRESS
   5602  2776b					       endif
   5603  2776b				   -	       if	DLINDEX = 27
   5604  2776b				   -ZONE27ADDRESS =	TMPMEMADDRESS
   5605  2776b					       endif
   5606  2776b				    DLINDEX    SET	DLINDEX + 1
   5511  2776b					       REPEND
   5512  2776b				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5513  2776b				   -	       ifconst	EXTRADLMEMORY
   5514  2776b				   -	       if	TMPMEMADDRESS > $1FFF
   5515  2776b				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5516  2776b				   -	       else
   5517  2776b				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5518  2776b				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5519  2776b				   -	       endif
   5520  2776b				   -	       endif		; TMPMEMADDRESS > $1FFF
   5521  2776b					       endif		; EXTRADLMEMORY
   5522  2776b				   -	       if	DLINDEX = 0
   5523  2776b				   -ZONE0ADDRESS =	TMPMEMADDRESS
   5524  2776b					       endif
   5525  2776b				   -	       if	DLINDEX = 1
   5526  2776b				   -ZONE1ADDRESS =	TMPMEMADDRESS
   5527  2776b					       endif
   5528  2776b				   -	       if	DLINDEX = 2
   5529  2776b				   -ZONE2ADDRESS =	TMPMEMADDRESS
   5530  2776b					       endif
   5531  2776b				   -	       if	DLINDEX = 3
   5532  2776b				   -ZONE3ADDRESS =	TMPMEMADDRESS
   5533  2776b					       endif
   5534  2776b				   -	       if	DLINDEX = 4
   5535  2776b				   -ZONE4ADDRESS =	TMPMEMADDRESS
   5536  2776b					       endif
   5537  2776b				   -	       if	DLINDEX = 5
   5538  2776b				   -ZONE5ADDRESS =	TMPMEMADDRESS
   5539  2776b					       endif
   5540  2776b				   -	       if	DLINDEX = 6
   5541  2776b				   -ZONE6ADDRESS =	TMPMEMADDRESS
   5542  2776b					       endif
   5543  2776b				   -	       if	DLINDEX = 7
   5544  2776b				   -ZONE7ADDRESS =	TMPMEMADDRESS
   5545  2776b					       endif
   5546  2776b				   -	       if	DLINDEX = 8
   5547  2776b				   -ZONE8ADDRESS =	TMPMEMADDRESS
   5548  2776b					       endif
   5549  2776b					       if	DLINDEX = 9
   5550  2776b			5e 00	    ZONE9ADDRESS =	TMPMEMADDRESS
   5551  2776b					       endif
   5552  2776b				   -	       if	DLINDEX = 10
   5553  2776b				   -ZONE10ADDRESS =	TMPMEMADDRESS
   5554  2776b					       endif
   5555  2776b				   -	       if	DLINDEX = 11
   5556  2776b				   -ZONE11ADDRESS =	TMPMEMADDRESS
   5557  2776b					       endif
   5558  2776b				   -	       if	DLINDEX = 12
   5559  2776b				   -ZONE12ADDRESS =	TMPMEMADDRESS
   5560  2776b					       endif
   5561  2776b				   -	       if	DLINDEX = 13
   5562  2776b				   -ZONE13ADDRESS =	TMPMEMADDRESS
   5563  2776b					       endif
   5564  2776b				   -	       if	DLINDEX = 14
   5565  2776b				   -ZONE14ADDRESS =	TMPMEMADDRESS
   5566  2776b					       endif
   5567  2776b				   -	       if	DLINDEX = 15
   5568  2776b				   -ZONE15ADDRESS =	TMPMEMADDRESS
   5569  2776b					       endif
   5570  2776b				   -	       if	DLINDEX = 16
   5571  2776b				   -ZONE16ADDRESS =	TMPMEMADDRESS
   5572  2776b					       endif
   5573  2776b				   -	       if	DLINDEX = 17
   5574  2776b				   -ZONE17ADDRESS =	TMPMEMADDRESS
   5575  2776b					       endif
   5576  2776b				   -	       if	DLINDEX = 18
   5577  2776b				   -ZONE18ADDRESS =	TMPMEMADDRESS
   5578  2776b					       endif
   5579  2776b				   -	       if	DLINDEX = 19
   5580  2776b				   -ZONE19ADDRESS =	TMPMEMADDRESS
   5581  2776b					       endif
   5582  2776b				   -	       if	DLINDEX = 20
   5583  2776b				   -ZONE20ADDRESS =	TMPMEMADDRESS
   5584  2776b					       endif
   5585  2776b				   -	       if	DLINDEX = 21
   5586  2776b				   -ZONE21ADDRESS =	TMPMEMADDRESS
   5587  2776b					       endif
   5588  2776b				   -	       if	DLINDEX = 22
   5589  2776b				   -ZONE22ADDRESS =	TMPMEMADDRESS
   5590  2776b					       endif
   5591  2776b				   -	       if	DLINDEX = 23
   5592  2776b				   -ZONE23ADDRESS =	TMPMEMADDRESS
   5593  2776b					       endif
   5594  2776b				   -	       if	DLINDEX = 24
   5595  2776b				   -ZONE24ADDRESS =	TMPMEMADDRESS
   5596  2776b					       endif
   5597  2776b				   -	       if	DLINDEX = 25
   5598  2776b				   -ZONE25ADDRESS =	TMPMEMADDRESS
   5599  2776b					       endif
   5600  2776b				   -	       if	DLINDEX = 26
   5601  2776b				   -ZONE26ADDRESS =	TMPMEMADDRESS
   5602  2776b					       endif
   5603  2776b				   -	       if	DLINDEX = 27
   5604  2776b				   -ZONE27ADDRESS =	TMPMEMADDRESS
   5605  2776b					       endif
   5606  2776b				    DLINDEX    SET	DLINDEX + 1
   5511  2776b					       REPEND
   5512  2776b				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5513  2776b				   -	       ifconst	EXTRADLMEMORY
   5514  2776b				   -	       if	TMPMEMADDRESS > $1FFF
   5515  2776b				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5516  2776b				   -	       else
   5517  2776b				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5518  2776b				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5519  2776b				   -	       endif
   5520  2776b				   -	       endif		; TMPMEMADDRESS > $1FFF
   5521  2776b					       endif		; EXTRADLMEMORY
   5522  2776b				   -	       if	DLINDEX = 0
   5523  2776b				   -ZONE0ADDRESS =	TMPMEMADDRESS
   5524  2776b					       endif
   5525  2776b				   -	       if	DLINDEX = 1
   5526  2776b				   -ZONE1ADDRESS =	TMPMEMADDRESS
   5527  2776b					       endif
   5528  2776b				   -	       if	DLINDEX = 2
   5529  2776b				   -ZONE2ADDRESS =	TMPMEMADDRESS
   5530  2776b					       endif
   5531  2776b				   -	       if	DLINDEX = 3
   5532  2776b				   -ZONE3ADDRESS =	TMPMEMADDRESS
   5533  2776b					       endif
   5534  2776b				   -	       if	DLINDEX = 4
   5535  2776b				   -ZONE4ADDRESS =	TMPMEMADDRESS
   5536  2776b					       endif
   5537  2776b				   -	       if	DLINDEX = 5
   5538  2776b				   -ZONE5ADDRESS =	TMPMEMADDRESS
   5539  2776b					       endif
   5540  2776b				   -	       if	DLINDEX = 6
   5541  2776b				   -ZONE6ADDRESS =	TMPMEMADDRESS
   5542  2776b					       endif
   5543  2776b				   -	       if	DLINDEX = 7
   5544  2776b				   -ZONE7ADDRESS =	TMPMEMADDRESS
   5545  2776b					       endif
   5546  2776b				   -	       if	DLINDEX = 8
   5547  2776b				   -ZONE8ADDRESS =	TMPMEMADDRESS
   5548  2776b					       endif
   5549  2776b				   -	       if	DLINDEX = 9
   5550  2776b				   -ZONE9ADDRESS =	TMPMEMADDRESS
   5551  2776b					       endif
   5552  2776b					       if	DLINDEX = 10
   5553  2776b			61 55	    ZONE10ADDRESS =	TMPMEMADDRESS
   5554  2776b					       endif
   5555  2776b				   -	       if	DLINDEX = 11
   5556  2776b				   -ZONE11ADDRESS =	TMPMEMADDRESS
   5557  2776b					       endif
   5558  2776b				   -	       if	DLINDEX = 12
   5559  2776b				   -ZONE12ADDRESS =	TMPMEMADDRESS
   5560  2776b					       endif
   5561  2776b				   -	       if	DLINDEX = 13
   5562  2776b				   -ZONE13ADDRESS =	TMPMEMADDRESS
   5563  2776b					       endif
   5564  2776b				   -	       if	DLINDEX = 14
   5565  2776b				   -ZONE14ADDRESS =	TMPMEMADDRESS
   5566  2776b					       endif
   5567  2776b				   -	       if	DLINDEX = 15
   5568  2776b				   -ZONE15ADDRESS =	TMPMEMADDRESS
   5569  2776b					       endif
   5570  2776b				   -	       if	DLINDEX = 16
   5571  2776b				   -ZONE16ADDRESS =	TMPMEMADDRESS
   5572  2776b					       endif
   5573  2776b				   -	       if	DLINDEX = 17
   5574  2776b				   -ZONE17ADDRESS =	TMPMEMADDRESS
   5575  2776b					       endif
   5576  2776b				   -	       if	DLINDEX = 18
   5577  2776b				   -ZONE18ADDRESS =	TMPMEMADDRESS
   5578  2776b					       endif
   5579  2776b				   -	       if	DLINDEX = 19
   5580  2776b				   -ZONE19ADDRESS =	TMPMEMADDRESS
   5581  2776b					       endif
   5582  2776b				   -	       if	DLINDEX = 20
   5583  2776b				   -ZONE20ADDRESS =	TMPMEMADDRESS
   5584  2776b					       endif
   5585  2776b				   -	       if	DLINDEX = 21
   5586  2776b				   -ZONE21ADDRESS =	TMPMEMADDRESS
   5587  2776b					       endif
   5588  2776b				   -	       if	DLINDEX = 22
   5589  2776b				   -ZONE22ADDRESS =	TMPMEMADDRESS
   5590  2776b					       endif
   5591  2776b				   -	       if	DLINDEX = 23
   5592  2776b				   -ZONE23ADDRESS =	TMPMEMADDRESS
   5593  2776b					       endif
   5594  2776b				   -	       if	DLINDEX = 24
   5595  2776b				   -ZONE24ADDRESS =	TMPMEMADDRESS
   5596  2776b					       endif
   5597  2776b				   -	       if	DLINDEX = 25
   5598  2776b				   -ZONE25ADDRESS =	TMPMEMADDRESS
   5599  2776b					       endif
   5600  2776b				   -	       if	DLINDEX = 26
   5601  2776b				   -ZONE26ADDRESS =	TMPMEMADDRESS
   5602  2776b					       endif
   5603  2776b				   -	       if	DLINDEX = 27
   5604  2776b				   -ZONE27ADDRESS =	TMPMEMADDRESS
   5605  2776b					       endif
   5606  2776b				    DLINDEX    SET	DLINDEX + 1
   5511  2776b					       REPEND
   5512  2776b				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5513  2776b				   -	       ifconst	EXTRADLMEMORY
   5514  2776b				   -	       if	TMPMEMADDRESS > $1FFF
   5515  2776b				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5516  2776b				   -	       else
   5517  2776b				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5518  2776b				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5519  2776b				   -	       endif
   5520  2776b				   -	       endif		; TMPMEMADDRESS > $1FFF
   5521  2776b					       endif		; EXTRADLMEMORY
   5522  2776b				   -	       if	DLINDEX = 0
   5523  2776b				   -ZONE0ADDRESS =	TMPMEMADDRESS
   5524  2776b					       endif
   5525  2776b				   -	       if	DLINDEX = 1
   5526  2776b				   -ZONE1ADDRESS =	TMPMEMADDRESS
   5527  2776b					       endif
   5528  2776b				   -	       if	DLINDEX = 2
   5529  2776b				   -ZONE2ADDRESS =	TMPMEMADDRESS
   5530  2776b					       endif
   5531  2776b				   -	       if	DLINDEX = 3
   5532  2776b				   -ZONE3ADDRESS =	TMPMEMADDRESS
   5533  2776b					       endif
   5534  2776b				   -	       if	DLINDEX = 4
   5535  2776b				   -ZONE4ADDRESS =	TMPMEMADDRESS
   5536  2776b					       endif
   5537  2776b				   -	       if	DLINDEX = 5
   5538  2776b				   -ZONE5ADDRESS =	TMPMEMADDRESS
   5539  2776b					       endif
   5540  2776b				   -	       if	DLINDEX = 6
   5541  2776b				   -ZONE6ADDRESS =	TMPMEMADDRESS
   5542  2776b					       endif
   5543  2776b				   -	       if	DLINDEX = 7
   5544  2776b				   -ZONE7ADDRESS =	TMPMEMADDRESS
   5545  2776b					       endif
   5546  2776b				   -	       if	DLINDEX = 8
   5547  2776b				   -ZONE8ADDRESS =	TMPMEMADDRESS
   5548  2776b					       endif
   5549  2776b				   -	       if	DLINDEX = 9
   5550  2776b				   -ZONE9ADDRESS =	TMPMEMADDRESS
   5551  2776b					       endif
   5552  2776b				   -	       if	DLINDEX = 10
   5553  2776b				   -ZONE10ADDRESS =	TMPMEMADDRESS
   5554  2776b					       endif
   5555  2776b					       if	DLINDEX = 11
   5556  2776b			64 aa	    ZONE11ADDRESS =	TMPMEMADDRESS
   5557  2776b					       endif
   5558  2776b				   -	       if	DLINDEX = 12
   5559  2776b				   -ZONE12ADDRESS =	TMPMEMADDRESS
   5560  2776b					       endif
   5561  2776b				   -	       if	DLINDEX = 13
   5562  2776b				   -ZONE13ADDRESS =	TMPMEMADDRESS
   5563  2776b					       endif
   5564  2776b				   -	       if	DLINDEX = 14
   5565  2776b				   -ZONE14ADDRESS =	TMPMEMADDRESS
   5566  2776b					       endif
   5567  2776b				   -	       if	DLINDEX = 15
   5568  2776b				   -ZONE15ADDRESS =	TMPMEMADDRESS
   5569  2776b					       endif
   5570  2776b				   -	       if	DLINDEX = 16
   5571  2776b				   -ZONE16ADDRESS =	TMPMEMADDRESS
   5572  2776b					       endif
   5573  2776b				   -	       if	DLINDEX = 17
   5574  2776b				   -ZONE17ADDRESS =	TMPMEMADDRESS
   5575  2776b					       endif
   5576  2776b				   -	       if	DLINDEX = 18
   5577  2776b				   -ZONE18ADDRESS =	TMPMEMADDRESS
   5578  2776b					       endif
   5579  2776b				   -	       if	DLINDEX = 19
   5580  2776b				   -ZONE19ADDRESS =	TMPMEMADDRESS
   5581  2776b					       endif
   5582  2776b				   -	       if	DLINDEX = 20
   5583  2776b				   -ZONE20ADDRESS =	TMPMEMADDRESS
   5584  2776b					       endif
   5585  2776b				   -	       if	DLINDEX = 21
   5586  2776b				   -ZONE21ADDRESS =	TMPMEMADDRESS
   5587  2776b					       endif
   5588  2776b				   -	       if	DLINDEX = 22
   5589  2776b				   -ZONE22ADDRESS =	TMPMEMADDRESS
   5590  2776b					       endif
   5591  2776b				   -	       if	DLINDEX = 23
   5592  2776b				   -ZONE23ADDRESS =	TMPMEMADDRESS
   5593  2776b					       endif
   5594  2776b				   -	       if	DLINDEX = 24
   5595  2776b				   -ZONE24ADDRESS =	TMPMEMADDRESS
   5596  2776b					       endif
   5597  2776b				   -	       if	DLINDEX = 25
   5598  2776b				   -ZONE25ADDRESS =	TMPMEMADDRESS
   5599  2776b					       endif
   5600  2776b				   -	       if	DLINDEX = 26
   5601  2776b				   -ZONE26ADDRESS =	TMPMEMADDRESS
   5602  2776b					       endif
   5603  2776b				   -	       if	DLINDEX = 27
   5604  2776b				   -ZONE27ADDRESS =	TMPMEMADDRESS
   5605  2776b					       endif
   5606  2776b				    DLINDEX    SET	DLINDEX + 1
   5607  2776b					       REPEND
   5608  2776b
   5609  2776b
     $4000 to $67ff used as zone memory, allowing 84 display objects per zone.
   5610  2776b					       echo	"   ",[WDLMEMSTART],"to",[WDLMEMEND],"used as zone memory, allowing",[(DLLASTOBJ/5)]d,"display objects per zone."
   5611  2776b
   5612  2776b				    DLHEIGHT
   5613  2776b					       REPEAT	WZONECOUNT
   5614  2776b			0f		       .byte.b	(WZONEHEIGHT-1)
   5613  2776b					       REPEND
   5614  2776c			0f		       .byte.b	(WZONEHEIGHT-1)
   5613  2776c					       REPEND
   5614  2776d			0f		       .byte.b	(WZONEHEIGHT-1)
   5613  2776d					       REPEND
   5614  2776e			0f		       .byte.b	(WZONEHEIGHT-1)
   5613  2776e					       REPEND
   5614  2776f			0f		       .byte.b	(WZONEHEIGHT-1)
   5613  2776f					       REPEND
   5614  27770			0f		       .byte.b	(WZONEHEIGHT-1)
   5613  27770					       REPEND
   5614  27771			0f		       .byte.b	(WZONEHEIGHT-1)
   5613  27771					       REPEND
   5614  27772			0f		       .byte.b	(WZONEHEIGHT-1)
   5613  27772					       REPEND
   5614  27773			0f		       .byte.b	(WZONEHEIGHT-1)
   5613  27773					       REPEND
   5614  27774			0f		       .byte.b	(WZONEHEIGHT-1)
   5613  27774					       REPEND
   5614  27775			0f		       .byte.b	(WZONEHEIGHT-1)
   5613  27775					       REPEND
   5614  27776			0f		       .byte.b	(WZONEHEIGHT-1)
   5615  27777					       REPEND
   5616  27777
   5617  27777							; Provided under the CC0 license. See the included LICENSE.txt for details.
   5618  27777
   5619  27777							; a simple guard, than ensures the 7800basic code hasn't
   5620  27777							; spilled into the encryption area...
     2055 bytes left in the 7800basic reserved area.
   5621  27777					       echo	"   ",($FF7E-*)d,"bytes left in the 7800basic reserved area."
   5622  27777				   -	       if	(*>$FF7D)
   5623  27777				   -	       ERR		; abort the assembly
   5624  27777					       endif
   5625  27777							; Provided under the CC0 license. See the included LICENSE.txt for details.
   5626  27777
   5627  27777				   -	       ifconst	DEV
   5628  27777				   -	       ifnconst	ZONEHEIGHT
   5629  27777				   -	       echo	"* the 4k 7800basic area has",[($FF7E - *)]d,"bytes free."
   5630  27777				   -	       else
   5631  27777				   -	       if	ZONEHEIGHT = 8
   5632  27777				   -	       echo	"* the 4k 7800basic area has",[($FF7E - *)]d,"bytes free."
   5633  27777				   -	       else
   5634  27777				   -	       echo	"* the 4k 7800basic area has",[($FF7E - *)]d,"bytes free."
   5635  27777				   -	       endif
   5636  27777				   -	       endif
   5637  27777					       endif
   5638  27777
   5639  27777							; FF7E/FF7F contains the 7800basic crc checksum word
   5640  27777
   5641  27777							; FF80 - FFF7 contains the 7800 encryption key 
   5642  27777
   5643  27777				   -	       ifnconst	bankswitchmode
   5644  27777				   -	       ORG	$FFF8
   5645  27777					       else
   5646  27777					       ifconst	ROM128K
   5647  27ff8					       ORG	$27FF8
   5648  27ff8					       RORG	$FFF8
   5649  27ff8					       endif
   5650  27ff8				   -	       ifconst	ROM144K
   5651  27ff8				   -	       ORG	$27FF8
   5652  27ff8				   -	       RORG	$FFF8
   5653  27ff8					       endif
   5654  27ff8				   -	       ifconst	ROM256K
   5655  27ff8				   -	       ORG	$47FF8
   5656  27ff8				   -	       RORG	$FFF8
   5657  27ff8					       endif
   5658  27ff8				   -	       ifconst	ROM272K
   5659  27ff8				   -	       ORG	$47FF8
   5660  27ff8				   -	       RORG	$FFF8
   5661  27ff8					       endif
   5662  27ff8				   -	       ifconst	ROM512K
   5663  27ff8				   -	       ORG	$87FF8
   5664  27ff8				   -	       RORG	$FFF8
   5665  27ff8					       endif
   5666  27ff8				   -	       ifconst	ROM528K
   5667  27ff8				   -	       ORG	$87FF8
   5668  27ff8				   -	       RORG	$FFF8
   5669  27ff8					       endif
   5670  27ff8					       endif
   5671  27ff8
   5672  27ff8
   5673  27ff8			ff		       .byte.b	$FF	; region verification. $FF=all regions
   5674  27ff9			f7		       .byte.b	$F7	; high nibble:  encryption check from $N000 to $FF7F. we only hash the last 4k for faster boot.
   5675  27ffa							; low nibble :  N=7 atari rainbow start, N=3 no atari rainbow
   5676  27ffa
   5677  27ffa							;Vectors
   5678  27ffa			00 f0		       .word.w	NMI
   5679  27ffc			67 f6		       .word.w	START
   5680  27ffe			5d f0		       .word.w	IRQ
   5681  28000
