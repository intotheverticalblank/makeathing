------- FILE c:\Users\steve\OneDrive\Desktop\2018dev\7800\7800basic\projects\demo1\lesson2_2.78b.asm LEVEL 1 PASS 3
      1  10000 ????						; MACRO.H
      2  10000 ????
      3  10000 ????						; Based on the 2600 macro.h file.
      4  10000 ????						; Macros irrelevant to the 7800 have been removed, and the sleep macro 
      5  10000 ????						; has been adapted to give accurate results on the 7800.
      6  10000 ????
      7  10000 ????						; Version 1.0 2019/12/11 (based on the 2600 Version 1.05, 13/NOVEMBER/2003)
      8  10000 ????
      9  10000 ????						; Available macros...
     10  10000 ????						;   SLEEP n		 - sleep for n cycles
     11  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     12  10000 ????
     13  10000 ????						;-------------------------------------------------------------------------------
     14  10000 ????						; SLEEP duration
     15  10000 ????						; Original author: Thomas Jentzsch
     16  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     17  10000 ????						; useful for code where precise timing is required.
     18  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     19  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     20  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     21  10000 ????
     22  10000 ????				       MAC	sleep
     23  10000 ????			    .CYCLES    SET	{1}
     24  10000 ????
     25  10000 ????				       IF	.CYCLES < 2
     26  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     27  10000 ????				       ERR
     28  10000 ????				       ENDIF
     29  10000 ????
     30  10000 ????				       IF	.CYCLES & 1
     31  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     32  10000 ????				       nop	$80
     33  10000 ????				       ELSE
     34  10000 ????				       bit	$80
     35  10000 ????				       ENDIF
     36  10000 ????			    .CYCLES    SET	.CYCLES - 3
     37  10000 ????				       ENDIF
     38  10000 ????
     39  10000 ????				       REPEAT	.CYCLES / 2
     40  10000 ????				       nop
     41  10000 ????				       REPEND
     42  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     43  10000 ????
     44  10000 ????
     45  10000 ????						;-------------------------------------------------------------------------------
     46  10000 ????						; FRACSLEEP duration
     47  10000 ????						; Based on Thomas Jentzsch's SLEEP macro, but takes cycles*2 to allow for
     48  10000 ????						; 7800 based 0.5 cycle sleep.
     49  10000 ????
     50  10000 ????				       MAC	fracsleep
     51  10000 ????			    .CYCLES    SET	{1}
     52  10000 ????
     53  10000 ????				       IF	.CYCLES < 4
     54  10000 ????				       ECHO	"MACRO ERROR: 'FRACSLEEP': Duration must be > 4"
     55  10000 ????				       ERR
     56  10000 ????				       ENDIF
     57  10000 ????				       IF	.CYCLES = 5
     58  10000 ????				       ECHO	"MACRO ERROR: 'FRACSLEEP': Duration = 5 is impossible"
     59  10000 ????				       ERR
     60  10000 ????				       ENDIF
     61  10000 ????
     62  10000 ????				       IF	.CYCLES & 1
     63  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     64  10000 ????				       nop	$0	; TIA access is 3.5 cycles
     65  10000 ????				       ELSE
     66  10000 ????				       bit	$0	; TIA access is 3.5 cycles
     67  10000 ????				       ENDIF
     68  10000 ????			    .CYCLES    SET	.CYCLES - 7
     69  10000 ????				       ENDIF
     70  10000 ????
     71  10000 ????				       IF	.CYCLES & 2
     72  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     73  10000 ????				       nop	$80
     74  10000 ????				       ELSE
     75  10000 ????				       bit	$80
     76  10000 ????				       ENDIF
     77  10000 ????			    .CYCLES    SET	.CYCLES - 6
     78  10000 ????				       ENDIF
     79  10000 ????
     80  10000 ????				       REPEAT	.CYCLES / 4
     81  10000 ????				       nop
     82  10000 ????				       REPEND
     83  10000 ????				       ENDM		;usage: FRACSLEEP n (n>1)
     84  10000 ????
     85  10000 ????
     86  10000 ????						;-------------------------------------------------------
     87  10000 ????						; SET_POINTER
     88  10000 ????						; Original author: Manuel Rotschkar
     89  10000 ????						;
     90  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
     91  10000 ????						;
     92  10000 ????						; Usage: SET_POINTER pointer, address
     93  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
     94  10000 ????						;
     95  10000 ????						; Note: Alters the accumulator, NZ flags
     96  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
     97  10000 ????						; IN 2: absolute address
     98  10000 ????
     99  10000 ????				       MAC	set_pointer
    100  10000 ????			    .POINTER   SET	{1}
    101  10000 ????			    .ADDRESS   SET	{2}
    102  10000 ????
    103  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    104  10000 ????				       STA	.POINTER	; Store in pointer
    105  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    106  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    107  10000 ????
    108  10000 ????				       ENDM
    109  10000 ????
    110  10000 ????						; EOF
    111  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
    112  10000 ????
    113  10000 ????						; 7800MACRO.H
    114  10000 ????
    115  10000 ????						;-------------------------------------------------------
    116  10000 ????						; BOXCOLLISIONCHECK
    117  10000 ????						; author: Mike Saarna
    118  10000 ????						;
    119  10000 ????						; A general bounding box collision check. compares 2 rectangles of differing size
    120  10000 ????						; and shape for overlap. Carry is set for collision detected, clear for none.
    121  10000 ????						; 
    122  10000 ????						; Usage: BOXCOLLISIONCHECK x1var,y1var,w1var,h1var,x2var,y2var,w2var,h2var
    123  10000 ????						;
    124  10000 ????
    125  10000 ????				       MAC	boxcollisioncheck
    126  10000 ????			    .boxx1     SET	{1}
    127  10000 ????			    .boxy1     SET	{2}
    128  10000 ????			    .boxw1     SET	{3}
    129  10000 ????			    .boxh1     SET	{4}
    130  10000 ????			    .boxx2     SET	{5}
    131  10000 ????			    .boxy2     SET	{6}
    132  10000 ????			    .boxw2     SET	{7}
    133  10000 ????			    .boxh2     SET	{8}
    134  10000 ????
    135  10000 ????			    .DoXCollisionCheck
    136  10000 ????				       lda	.boxx1	;3
    137  10000 ????				       cmp	.boxx2	;2
    138  10000 ????				       bcs	.X1isbiggerthanX2	;2/3
    139  10000 ????			    .X2isbiggerthanX1
    140  10000 ????				       adc	#.boxw1	;2
    141  10000 ????				       cmp	.boxx2	;3
    142  10000 ????				       bcs	.DoYCollisionCheck	;3/2
    143  10000 ????				       bcc	.noboxcollision	;3
    144  10000 ????			    .X1isbiggerthanX2
    145  10000 ????				       clc		;2
    146  10000 ????				       sbc	#.boxw2	;2
    147  10000 ????				       cmp	.boxx2	;3
    148  10000 ????				       bcs	.noboxcollision	;3/2
    149  10000 ????			    .DoYCollisionCheck
    150  10000 ????				       lda	.boxy1	;3
    151  10000 ????				       cmp	.boxy2	;3
    152  10000 ????				       bcs	.Y1isbiggerthanY2	;3/2
    153  10000 ????			    .Y2isbiggerthanY1
    154  10000 ????				       adc	#.boxh1	;2
    155  10000 ????				       cmp	.boxy2	;3
    156  10000 ????				       jmp	.checkdone	;6 
    157  10000 ????			    .Y1isbiggerthanY2
    158  10000 ????				       clc		;2
    159  10000 ????				       sbc	#.boxh2	;2
    160  10000 ????				       cmp	.boxy2	;3
    161  10000 ????				       bcs	.noboxcollision	;3/2
    162  10000 ????			    .boxcollision
    163  10000 ????				       sec		;2
    164  10000 ????				       .byte	$24	; hardcoded "BIT [clc opcode]", used to skip over the following clc
    165  10000 ????			    .noboxcollision
    166  10000 ????				       clc		;2
    167  10000 ????			    .checkdone
    168  10000 ????
    169  10000 ????				       ENDM
    170  10000 ????
    171  10000 ????						; QBOXCOLLISIONCHECK
    172  10000 ????						; author: unknown
    173  10000 ????						;
    174  10000 ????						; A general bounding box collision check. compares 2 rectangles of differing size
    175  10000 ????						; and shape for overlap. Carry is CLEAR for collision detected, SET for none.
    176  10000 ????						; 
    177  10000 ????						; Usage: QBOXCOLLISIONCHECK x1var,y1var,w1var,h1var,x2var,y2var,w2var,h2var
    178  10000 ????						;
    179  10000 ????				       MAC	qboxcollisioncheck
    180  10000 ????			    .boxx1     SET	{1}
    181  10000 ????			    .boxy1     SET	{2}
    182  10000 ????			    .boxw1     SET	{3}
    183  10000 ????			    .boxh1     SET	{4}
    184  10000 ????			    .boxx2     SET	{5}
    185  10000 ????			    .boxy2     SET	{6}
    186  10000 ????			    .boxw2     SET	{7}
    187  10000 ????			    .boxh2     SET	{8}
    188  10000 ????
    189  10000 ????				       lda	.boxx2
    190  10000 ????				       clc
    191  10000 ????				       adc	#.boxw2
    192  10000 ????				       sbc	.boxx1
    193  10000 ????				       cmp	#.boxw1+.boxw2-1
    194  10000 ????				       bcs	.qboxcollisiondone
    195  10000 ????						;if we're here, carry is clear
    196  10000 ????				       lda	.boxy2
    197  10000 ????				       adc	#.boxh2
    198  10000 ????				       sbc	.boxy1
    199  10000 ????				       cmp	#.boxh1+.boxh2-1
    200  10000 ????			    .qboxcollisiondone
    201  10000 ????				       rol		; temp for testing - invert carry...
    202  10000 ????				       eor	#1
    203  10000 ????				       ror
    204  10000 ????				       ENDM
    205  10000 ????
    206  10000 ????
    207  10000 ????				       MAC	median3
    208  10000 ????
    209  10000 ????						; A median filter (for smoothing paddle jitter)
    210  10000 ????						;   this macro takes the current paddle value, compares it to historic
    211  10000 ????						;   values, and replaces the current paddle value with the median.
    212  10000 ????						; 
    213  10000 ????						; called as:  MEDIAN3 STORAGE CURRENT
    214  10000 ????						;    where STORAGE points to 3 consecutive bytes of memory. The first 2
    215  10000 ????						;	  must be dedicated to this MEDIAN filter. The last 1 is a temp.
    216  10000 ????						;    where CURRENT is memory holding the new value you wish to compare to
    217  10000 ????						;	  the previous values, and update with the median value.
    218  10000 ????						;
    219  10000 ????						; returns: CURRENT (modified to contain median value)
    220  10000 ????						;
    221  10000 ????						; author: Mike Saarna (aka RevEng)
    222  10000 ????
    223  10000 ????			    .MedianBytes SET	{1}
    224  10000 ????			    .NewValue  SET	{2}
    225  10000 ????
    226  10000 ????				       lda	#0
    227  10000 ????				       ldy	.NewValue
    228  10000 ????				       sty	.MedianBytes+2	; put the new value in the most "recent" slot
    229  10000 ????
    230  10000 ????						; build an index from relative size comparisons between our 3 values.
    231  10000 ????				       cpy	.MedianBytes
    232  10000 ????				       rol
    233  10000 ????				       cpy	.MedianBytes+1
    234  10000 ????				       rol
    235  10000 ????				       ldy	.MedianBytes
    236  10000 ????				       cpy	.MedianBytes+1
    237  10000 ????				       rol
    238  10000 ????				       tay
    239  10000 ????
    240  10000 ????				       ldx	MedianOrderLUT,y	; convert the size-comparison index to an index to the median value
    241  10000 ????				       lda	.MedianBytes,x
    242  10000 ????				       sta	.NewValue	; we replace the new value memory with the median value
    243  10000 ????
    244  10000 ????						; then shift values from "newer" bytes to "older" bytes, leaving the 
    245  10000 ????						; newest byte (.MedianBytes+2) empty for next time.
    246  10000 ????				       lda	.MedianBytes+1
    247  10000 ????				       sta	.MedianBytes
    248  10000 ????				       lda	.MedianBytes+2
    249  10000 ????				       sta	.MedianBytes+1
    250  10000 ????				       ifnconst	MedianOrderLUT
    251  10000 ????				       jmp	MedianOrderLUTend
    252  10000 ????			    MedianOrderLUT		; converts our "comparison index" to an index to the median value
    253  10000 ????				       .byte	0	; 0  B2 < B0 < B1
    254  10000 ????				       .byte	1	; 1  B2 < B1 < B0
    255  10000 ????				       .byte	2	; 2   impossible 
    256  10000 ????				       .byte	2	; 3  B1 < B2 < B0
    257  10000 ????				       .byte	2	; 4  B0 < B2 < B1
    258  10000 ????				       .byte	2	; 5   impossible 
    259  10000 ????				       .byte	1	; 6  B0 < B1 < B2
    260  10000 ????				       .byte	0	; 7  B1 < B0 < B2
    261  10000 ????			    MedianOrderLUTend
    262  10000 ????				       endif
    263  10000 ????				       ENDM
    264  10000 ????
    265  10000 ????				       MAC	plotsprite
    266  10000 ????
    267  10000 ????						; A macro version of the plotsprite command. 
    268  10000 ????						; This trades off rom space for speed.
    269  10000 ????						; It also doesn't check if the visible screen is displayed or not.
    270  10000 ????						; It has no training wheels. It is all rusty sharp edges.
    271  10000 ????
    272  10000 ????			    .GFXLabel  SET	{1}
    273  10000 ????			    .Palette   SET	{2}	; constant
    274  10000 ????			    .SpriteX   SET	{3}	; variable
    275  10000 ????			    .SpriteY   SET	{4}	; variable
    276  10000 ????			    .ByteOffset SET	{5}	; variable 
    277  10000 ????
    278  10000 ????				       lda	.SpriteY
    279  10000 ????				       lsr
    280  10000 ????				       lsr
    281  10000 ????				       asr	#%11111110	; ensure carry is clear
    282  10000 ????				       if	WZONEHEIGHT = 16
    283  10000 ????				       asr	#%11111110	; ensure carry is clear
    284  10000 ????				       endif
    285  10000 ????
    286  10000 ????				       tax
    287  10000 ????
    288  10000 ????				       lda	DLPOINTL,x	; setup DL pointer for this zone
    289  10000 ????				       sta	dlpnt
    290  10000 ????				       lda	DLPOINTH,x	; setup DL pointer for this zone
    291  10000 ????				       sta	dlpnt+1
    292  10000 ????
    293  10000 ????				       ldy	dlend,x	; find the next new object position in this zone
    294  10000 ????
    295  10000 ????				       lda	.ByteOffset
    296  10000 ????				       if	{1}_width = 2
    297  10000 ????				       asl
    298  10000 ????				       endif
    299  10000 ????				       if	{1}_width = 3
    300  10000 ????				       asl
    301  10000 ????				       adc	.ByteOffset
    302  10000 ????				       endif
    303  10000 ????				       if	{1}_width = 4
    304  10000 ????				       asl
    305  10000 ????				       asl
    306  10000 ????				       endif
    307  10000 ????				       if	{1}_width = 5
    308  10000 ????				       asl
    309  10000 ????				       asl
    310  10000 ????				       adc	.ByteOffset
    311  10000 ????				       endif
    312  10000 ????				       if	{1}_width = 6
    313  10000 ????				       asl
    314  10000 ????				       adc	.ByteOffset
    315  10000 ????				       asl
    316  10000 ????				       endif
    317  10000 ????				       if	{1}_width = 7
    318  10000 ????				       asl
    319  10000 ????				       adc	.ByteOffset
    320  10000 ????				       asl
    321  10000 ????				       adc	.ByteOffset
    322  10000 ????				       endif
    323  10000 ????				       if	{1}_width = 8
    324  10000 ????				       asl
    325  10000 ????				       asl
    326  10000 ????				       asl
    327  10000 ????				       endif
    328  10000 ????				       if	{1}_width = 9
    329  10000 ????				       asl
    330  10000 ????				       asl
    331  10000 ????				       asl
    332  10000 ????				       adc	.ByteOffset
    333  10000 ????				       endif
    334  10000 ????				       if	{1}_width = 10
    335  10000 ????				       asl
    336  10000 ????				       asl
    337  10000 ????				       adc	.ByteOffset
    338  10000 ????				       asl
    339  10000 ????				       endif
    340  10000 ????				       if	{1}_width = 11
    341  10000 ????				       asl
    342  10000 ????				       asl
    343  10000 ????				       adc	.ByteOffset
    344  10000 ????				       asl
    345  10000 ????				       adc	.ByteOffset
    346  10000 ????				       endif
    347  10000 ????				       if	{1}_width = 12
    348  10000 ????				       asl
    349  10000 ????				       adc	.ByteOffset
    350  10000 ????				       asl
    351  10000 ????				       asl
    352  10000 ????				       endif
    353  10000 ????				       if	{1}_width = 13
    354  10000 ????				       asl
    355  10000 ????				       adc	.ByteOffset
    356  10000 ????				       asl
    357  10000 ????				       asl
    358  10000 ????				       adc	.ByteOffset
    359  10000 ????				       endif
    360  10000 ????				       if	{1}_width = 14
    361  10000 ????				       asl
    362  10000 ????				       adc	.ByteOffset
    363  10000 ????				       asl
    364  10000 ????				       adc	.ByteOffset
    365  10000 ????				       asl
    366  10000 ????				       endif
    367  10000 ????
    368  10000 ????				       adc	#<.GFXLabel	; carry is clear via previous asl or asr
    369  10000 ????				       sta	(dlpnt),y	; #1 - low byte object address
    370  10000 ????
    371  10000 ????				       iny
    372  10000 ????
    373  10000 ????				       lda	#({1}_mode | %01000000)
    374  10000 ????				       sta	(dlpnt),y	; #2 - graphics mode , indirect
    375  10000 ????
    376  10000 ????				       iny
    377  10000 ????
    378  10000 ????				       lda	.SpriteY
    379  10000 ????				       and	#(WZONEHEIGHT - 1)
    380  10000 ????				       cmp	#1	; clear carry if our sprite is just in this zone
    381  10000 ????				       ora	#>.GFXLabel
    382  10000 ????				       sta	(dlpnt),y	; #3 - hi byte object address
    383  10000 ????
    384  10000 ????				       iny
    385  10000 ????
    386  10000 ????				       lda	#({1}_width_twoscompliment | (.Palette * 32))
    387  10000 ????				       sta	(dlpnt),y	; #4 - palette|width
    388  10000 ????
    389  10000 ????				       iny
    390  10000 ????
    391  10000 ????				       lda	.SpriteX
    392  10000 ????				       sta	(dlpnt),y	; #5 - x object position
    393  10000 ????
    394  10000 ????				       iny
    395  10000 ????				       sty	dlend,x
    396  10000 ????
    397  10000 ????				       ifconst	ALWAYSTERMINATE
    398  10000 ????				       iny
    399  10000 ????				       lda	#0
    400  10000 ????				       sta	(dlpnt),y
    401  10000 ????				       endif
    402  10000 ????
    403  10000 ????				       bcc	.PLOTSPRITEend
    404  10000 ????
    405  10000 ????				       inx		; next zone
    406  10000 ????
    407  10000 ????				       lda	DLPOINTL,x	; setup DL pointer for this zone
    408  10000 ????				       sta	dlpnt
    409  10000 ????				       lda	DLPOINTH,x	; setup DL pointer for this zone
    410  10000 ????				       sta	dlpnt+1
    411  10000 ????
    412  10000 ????				       ldy	dlend,x	; find the next new object position in this zone
    413  10000 ????
    414  10000 ????				       lda	.ByteOffset
    415  10000 ????				       if	{1}_width = 1
    416  10000 ????				       clc
    417  10000 ????				       endif
    418  10000 ????				       if	{1}_width = 2
    419  10000 ????				       asl		; carry clear
    420  10000 ????				       endif
    421  10000 ????				       if	{1}_width = 3
    422  10000 ????				       asl		; carry clear
    423  10000 ????				       adc	.ByteOffset
    424  10000 ????				       endif
    425  10000 ????				       if	{1}_width = 4
    426  10000 ????				       asl		; carry clear
    427  10000 ????				       asl
    428  10000 ????				       endif
    429  10000 ????				       if	{1}_width = 5
    430  10000 ????				       asl		; carry clear
    431  10000 ????				       asl
    432  10000 ????				       adc	.ByteOffset
    433  10000 ????				       endif
    434  10000 ????				       if	{1}_width = 6
    435  10000 ????				       asl		; carry clear
    436  10000 ????				       adc	.ByteOffset
    437  10000 ????				       asl
    438  10000 ????				       endif
    439  10000 ????				       if	{1}_width = 7
    440  10000 ????				       asl		; carry clear
    441  10000 ????				       adc	.ByteOffset
    442  10000 ????				       asl
    443  10000 ????				       endif
    444  10000 ????				       if	{1}_width = 8
    445  10000 ????				       asl		; carry clear
    446  10000 ????				       asl
    447  10000 ????				       asl
    448  10000 ????				       endif
    449  10000 ????				       if	{1}_width = 9
    450  10000 ????				       asl		; carry clear
    451  10000 ????				       asl
    452  10000 ????				       asl
    453  10000 ????				       adc	.ByteOffset
    454  10000 ????				       endif
    455  10000 ????				       if	{1}_width = 10
    456  10000 ????				       asl		; carry clear
    457  10000 ????				       asl
    458  10000 ????				       adc	.ByteOffset
    459  10000 ????				       asl
    460  10000 ????				       endif
    461  10000 ????				       if	{1}_width = 11
    462  10000 ????				       asl		; carry clear
    463  10000 ????				       asl
    464  10000 ????				       adc	.ByteOffset
    465  10000 ????				       asl
    466  10000 ????				       adc	.ByteOffset
    467  10000 ????				       endif
    468  10000 ????				       if	{1}_width = 12
    469  10000 ????				       asl		; carry clear
    470  10000 ????				       adc	.ByteOffset
    471  10000 ????				       asl
    472  10000 ????				       asl
    473  10000 ????				       endif
    474  10000 ????				       if	{1}_width = 13
    475  10000 ????				       asl		; carry clear
    476  10000 ????				       adc	.ByteOffset
    477  10000 ????				       asl
    478  10000 ????				       asl
    479  10000 ????				       adc	.ByteOffset
    480  10000 ????				       endif
    481  10000 ????				       if	{1}_width = 14
    482  10000 ????				       asl		; carry clear
    483  10000 ????				       adc	.ByteOffset
    484  10000 ????				       asl
    485  10000 ????				       adc	.ByteOffset
    486  10000 ????				       asl
    487  10000 ????				       endif
    488  10000 ????
    489  10000 ????				       adc	#<.GFXLabel
    490  10000 ????				       sta	(dlpnt),y	; #1 - low byte object address
    491  10000 ????
    492  10000 ????				       iny
    493  10000 ????
    494  10000 ????				       lda	#({1}_mode | %01000000)
    495  10000 ????				       sta	(dlpnt),y	; #2 - graphics mode , indirect
    496  10000 ????
    497  10000 ????				       iny
    498  10000 ????
    499  10000 ????				       lda	.SpriteY
    500  10000 ????				       and	#(WZONEHEIGHT - 1)
    501  10000 ????				       ora	#>(.GFXLabel - (WZONEHEIGHT * 256))	; start in the dma hole
    502  10000 ????				       sta	(dlpnt),y	; #3 - hi byte object address
    503  10000 ????
    504  10000 ????				       iny
    505  10000 ????
    506  10000 ????				       lda	#({1}_width_twoscompliment | (.Palette * 32))
    507  10000 ????				       sta	(dlpnt),y	; #4 - palette|width
    508  10000 ????
    509  10000 ????				       iny
    510  10000 ????
    511  10000 ????				       lda	.SpriteX
    512  10000 ????				       sta	(dlpnt),y	; #5 - x object position
    513  10000 ????
    514  10000 ????				       iny
    515  10000 ????				       sty	dlend,x
    516  10000 ????
    517  10000 ????				       ifconst	ALWAYSTERMINATE
    518  10000 ????				       iny
    519  10000 ????				       lda	#0
    520  10000 ????				       sta	(dlpnt),y
    521  10000 ????				       endif
    522  10000 ????
    523  10000 ????			    .PLOTSPRITEend
    524  10000 ????				       ENDM
    525  10000 ????
    526  10000 ????				       MAC	sizeof
    527  10000 ????
    528  10000 ????						; echo's the size difference between the current address and the
    529  10000 ????						; a label that was passed as an argument. This is a quick way to
    530  10000 ????						; determine the size of a structure.
    531  10000 ????
    532  10000 ????			    .NAME      SETSTR	{1}
    533  10000 ????				       echo	" The Size of",.NAME,"is:",[* - {1}]d,[* - {2}]d,"bytes."
    534  10000 ????				       ENDM
    535  10000 ????
    536  10000 ????						;
    537  10000 ????						; speakjet.inc
    538  10000 ????						;
    539  10000 ????						;
    540  10000 ????						; AtariVox Speech Synth Driver
    541  10000 ????						;
    542  10000 ????						; By Alex Herbert, 2004
    543  10000 ????						;
    544  10000 ????
    545  10000 ????
    546  10000 ????
    547  10000 ????
    548  10000 ????						; Constants
    549  10000 ????
    550  10000 ????
    551  10000 ????		00 01	    SERIAL_OUTMASK equ	$01
    552  10000 ????		00 02	    SERIAL_RDYMASK equ	$02
    553  10000 ????
    554  10000 ????
    555  10000 ????
    556  10000 ????						; Macros
    557  10000 ????
    558  10000 ????				       mac	spkout
    559  10000 ????
    560  10000 ????						; check buffer-full status
    561  10000 ????				       lda	SWCHA
    562  10000 ????				       and	#SERIAL_RDYMASK
    563  10000 ????				       beq	.speech_done
    564  10000 ????
    565  10000 ????						; get next speech byte
    566  10000 ????				       ldy	#$00
    567  10000 ????				       lda	(speech_addr),y
    568  10000 ????
    569  10000 ????						; invert data and check for end of string
    570  10000 ????				       eor	#$ff
    571  10000 ????						;sta BACKGRND ; debug - uncomment to flash the background color with vox data
    572  10000 ????				       beq	.speech_done
    573  10000 ????				       sta	{1}
    574  10000 ????
    575  10000 ????						; increment speech pointer
    576  10000 ????				       inc	speech_addr
    577  10000 ????				       bne	.incaddr_skip
    578  10000 ????				       inc	speech_addr+1
    579  10000 ????			    .incaddr_skip
    580  10000 ????
    581  10000 ????						; output byte as serial data
    582  10000 ????
    583  10000 ????				       sec		; start bit
    584  10000 ????			    .byteout_loop
    585  10000 ????						; put carry flag into bit 0 of SWACNT, preserving other bits
    586  10000 ????				       lda	SWACNT	; 4
    587  10000 ????				       and	#$fe	; 2 6
    588  10000 ????				       adc	#$00	; 2 8
    589  10000 ????				       sta	SWACNT	; 4 12
    590  10000 ????
    591  10000 ????						; 10 bits sent? (1 start bit, 8 data bits, 1 stop bit)
    592  10000 ????				       cpy	#$09	; 2 14
    593  10000 ????				       beq	.speech_done	; 2 16
    594  10000 ????				       iny		; 2 18
    595  10000 ????
    596  10000 ????						; the 7800 is 1.5x faster than the 2600. Waste more cycles here
    597  10000 ????						; to match the original baud rate...
    598  10000 ????						;ldx	  #$07 ; 2600
    599  10000 ????				       ldx	#$0D
    600  10000 ????
    601  10000 ????			    .delay_loop
    602  10000 ????				       dex		; 
    603  10000 ????				       bne	.delay_loop	; 36 54
    604  10000 ????
    605  10000 ????						; shift next data bit into carry
    606  10000 ????				       lsr	{1}	; 5 59
    607  10000 ????
    608  10000 ????						; and loop (branch always taken)
    609  10000 ????				       bpl	.byteout_loop	; 3 62 cycles for loop
    610  10000 ????
    611  10000 ????			    .speech_done
    612  10000 ????
    613  10000 ????				       endm
    614  10000 ????
    615  10000 ????
    616  10000 ????				       mac	speak
    617  10000 ????
    618  10000 ????				       lda	#<{1}
    619  10000 ????				       sta	speech_addr
    620  10000 ????				       lda	#>{1}
    621  10000 ????				       sta	speech_addr+1
    622  10000 ????
    623  10000 ????				       endm
    624  10000 ????
    625  10000 ????
    626  10000 ????
    627  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
    628  10000 ????
    629  10000 ????				       processor	6502
    630  10000 ????
------- FILE 7800basic.h LEVEL 2 PASS 3
      0  10000 ????				       include	"7800basic.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE 7800.h LEVEL 3 PASS 3
      0  10000 ????				       include	"7800.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; 7800.h
      4  10000 ????						; Version 1.0, 2019/12/13
      5  10000 ????
      6  10000 ????						; This file defines hardware registers and memory mapping for the
      7  10000 ????						; Atari 7800. It is distributed as a companion machine-specific support package
      8  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
      9  10000 ????						; available at https://github.com/dasm-assembler/dasm
     10  10000 ????
     11  10000 ????
     12  10000 ????						; ******************** 7800 Hardware Addresses ***************************
     13  10000 ????						;
     14  10000 ????						;	 MEMORY MAP USAGE OF THE 7800
     15  10000 ????						;
     16  10000 ????						;	  00 -   1F	TIA REGISTERS
     17  10000 ????						;	  20 -   3F	MARIA REGISTERS
     18  10000 ????						;	  40 -   FF	RAM block 0 (zero page)
     19  10000 ????						;	 100 -  11F	TIA   (mirror of 0000-001f)
     20  10000 ????						;	 120 -  13F	MARIA (mirror of 0020-003f)
     21  10000 ????						;	 140 -  1FF	RAM block 1 (stack)
     22  10000 ????						;	 200 -  21F	TIA   (mirror of 0000-001f)
     23  10000 ????						;	 220 -  23F	MARIA (mirror of 0020-003f)
     24  10000 ????						;	 240 -  27F	???
     25  10000 ????						;	 280 -  2FF	RIOT I/O ports and timers
     26  10000 ????						;	 300 -  31F	TIA   (mirror of 0000-001f)
     27  10000 ????						;	 320 -  33F	MARIA (mirror of 0020-003f)
     28  10000 ????						;	 340 -  3FF	???
     29  10000 ????						;	 400 -  47F	unused address space
     30  10000 ????						;	 480 -  4FF	RIOT RAM
     31  10000 ????						;	 500 -  57F	unused address space
     32  10000 ????						;	 580 -  5FF	RIOT RAM (mirror of 0480-04ff)
     33  10000 ????						;	 600 - 17FF	unused address space
     34  10000 ????						;	1800 - 203F	RAM
     35  10000 ????						;	2040 - 20FF	RAM block 0 (mirror of 0000-001f)
     36  10000 ????						;	2100 - 213F	RAM
     37  10000 ????						;	2140 - 21FF	RAM block 1 (mirror of 0140-01ff)
     38  10000 ????						;	2200 - 27FF	RAM
     39  10000 ????						;	2800 - 2FFF	unavailable to external devices (bios bus-conflict)
     40  10000 ????						;	3000 - 3FFF	unused address space
     41  10000 ????						;	4000 - FF7F	potential cartridge address space
     42  10000 ????						;	FF80 - FFF9	RESERVED FOR ENCRYPTION
     43  10000 ????						;	FFFA - FFFF	6502 VECTORS
     44  10000 ????
     45  10000 ????
     46  10000 ????						;****** 00-1F ********* TIA REGISTERS ******************
     47  10000 ????
     48  10000 ????		00 01	    INPTCTRL   =	$01	;Input control. In same address space as TIA. write-only
     49  10000 ????		00 01	    VBLANK     =	$01	;VBLANK. D7=1:dump paddle caps to ground.     write-only
     50  10000 ????		00 02	    _WSYNC     =	$02	;Wait for HSync			       write-only
     51  10000 ????		00 03	    _RSYNC     =	$03	;Reset HSync				       write-only
     52  10000 ????		00 08	    INPT0      =	$08	;Paddle Control Input 0		       read-only
     53  10000 ????		00 09	    INPT1      =	$09	;Paddle Control Input 1		       read-only
     54  10000 ????		00 0a	    INPT2      =	$0A	;Paddle Control Input 2		       read-only
     55  10000 ????		00 0b	    INPT3      =	$0B	;Paddle Control Input 3		       read-only
     56  10000 ????
     57  10000 ????						; ** some common alternate names for INPT0/1/2/3
     58  10000 ????		00 08	    INPT4B     =	$08	;Joystick 0 Fire 1			       read-only
     59  10000 ????		00 09	    INPT4A     =	$09	;Joystick 0 Fire 1			       read-only
     60  10000 ????		00 0a	    INPT5B     =	$0A	;Joystick 1 Fire 0			       read-only
     61  10000 ????		00 0b	    INPT5A     =	$0B	;Joystick 1 Fire 1			       read-only
     62  10000 ????		00 08	    INPT4R     =	$08	;Joystick 0 Fire 1			       read-only
     63  10000 ????		00 09	    INPT4L     =	$09	;Joystick 0 Fire 1			       read-only
     64  10000 ????		00 0a	    INPT5R     =	$0A	;Joystick 1 Fire 0			       read-only
     65  10000 ????		00 0b	    INPT5L     =	$0B	;Joystick 1 Fire 1			       read-only
     66  10000 ????
     67  10000 ????		00 0c	    INPT4      =	$0C	;Player 0 Fire Button Input		       read-only
     68  10000 ????		00 0d	    INPT5      =	$0D	;Player 1 Fire Button Input		       read-only
     69  10000 ????
     70  10000 ????		00 15	    AUDC0      =	$15	;Audio Control Channel   0		       write-only
     71  10000 ????		00 16	    AUDC1      =	$16	;Audio Control Channel   1		       write-only
     72  10000 ????		00 17	    AUDF0      =	$17	;Audio Frequency Channel 0		       write-only
     73  10000 ????		00 18	    AUDF1      =	$18	;Audio Frequency Channel 1		       write-only
     74  10000 ????		00 19	    AUDV0      =	$19	;Audio Volume Channel	  0		       write-only
     75  10000 ????		00 1a	    AUDV1      =	$1A	;Audio Volume Channel	  1		       write-only
     76  10000 ????
     77  10000 ????						;****** 20-3F ********* MARIA REGISTERS ***************
     78  10000 ????
     79  10000 ????		00 20	    BACKGRND   =	$20	;Background Color			       write-only
     80  10000 ????		00 21	    P0C1       =	$21	;Palette 0 - Color 1			       write-only
     81  10000 ????		00 22	    P0C2       =	$22	;Palette 0 - Color 2			       write-only
     82  10000 ????		00 23	    P0C3       =	$23	;Palette 0 - Color 3			       write-only
     83  10000 ????		00 24	    WSYNC      =	$24	;Wait For Sync 			       write-only
     84  10000 ????		00 25	    P1C1       =	$25	;Palette 1 - Color 1			       write-only
     85  10000 ????		00 26	    P1C2       =	$26	;Palette 1 - Color 2			       write-only
     86  10000 ????		00 27	    P1C3       =	$27	;Palette 1 - Color 3			       write-only
     87  10000 ????		00 28	    MSTAT      =	$28	;Maria Status				       read-only
     88  10000 ????		00 29	    P2C1       =	$29	;Palette 2 - Color 1			       write-only
     89  10000 ????		00 2a	    P2C2       =	$2A	;Palette 2 - Color 2			       write-only
     90  10000 ????		00 2b	    P2C3       =	$2B	;Palette 2 - Color 3			       write-only
     91  10000 ????		00 2c	    DPPH       =	$2C	;Display List List Pointer High	       write-only
     92  10000 ????		00 2d	    P3C1       =	$2D	;Palette 3 - Color 1			       write-only
     93  10000 ????		00 2e	    P3C2       =	$2E	;Palette 3 - Color 2			       write-only
     94  10000 ????		00 2f	    P3C3       =	$2F	;Palette 3 - Color 3			       write-only
     95  10000 ????		00 30	    DPPL       =	$30	;Display List List Pointer Low 	       write-only
     96  10000 ????		00 31	    P4C1       =	$31	;Palette 4 - Color 1			       write-only
     97  10000 ????		00 32	    P4C2       =	$32	;Palette 4 - Color 2			       write-only
     98  10000 ????		00 33	    P4C3       =	$33	;Palette 4 - Color 3			       write-only
     99  10000 ????		00 34	    CHARBASE   =	$34	;Character Base Address		       write-only
    100  10000 ????		00 34	    CHBASE     =	$34	;Character Base Address		       write-only
    101  10000 ????		00 35	    P5C1       =	$35	;Palette 5 - Color 1			       write-only
    102  10000 ????		00 36	    P5C2       =	$36	;Palette 5 - Color 2			       write-only
    103  10000 ????		00 37	    P5C3       =	$37	;Palette 5 - Color 3			       write-only
    104  10000 ????		00 38	    OFFSET     =	$38	;Unused - Store zero here		       write-only
    105  10000 ????		00 39	    P6C1       =	$39	;Palette 6 - Color 1			       write-only
    106  10000 ????		00 3a	    P6C2       =	$3A	;Palette 6 - Color 2			       write-only
    107  10000 ????		00 3b	    P6C3       =	$3B	;Palette 6 - Color 3			       write-only
    108  10000 ????		00 3c	    CTRL       =	$3C	;Maria Control Register		       write-only
    109  10000 ????		00 3d	    P7C1       =	$3D	;Palette 7 - Color 1			       write-only
    110  10000 ????		00 3e	    P7C2       =	$3E	;Palette 7 - Color 2			       write-only
    111  10000 ????		00 3f	    P7C3       =	$3F	;Palette 7 - Color 3			       write-only
    112  10000 ????
    113  10000 ????
    114  10000 ????						;****** 280-2FF ******* PIA PORTS AND TIMERS ************
    115  10000 ????
    116  10000 ????		02 80	    SWCHA      =	$280	;P0+P1 Joystick Directional Input	       read-write
    117  10000 ????		02 81	    CTLSWA     =	$281	;I/O Control for SCHWA 		       read-write
    118  10000 ????		02 81	    SWACNT     =	$281	;VCS name for above			       read-write
    119  10000 ????		02 82	    SWCHB      =	$282	;Console Switches			       read-write
    120  10000 ????		02 83	    CTLSWB     =	$283	;I/O Control for SCHWB 		       read-write
    121  10000 ????		02 83	    SWBCNT     =	$283	;VCS name for above			       read-write
    122  10000 ????
    123  10000 ????		02 84	    INTIM      =	$284	;Interval Timer Read			       read-only
    124  10000 ????		02 94	    TIM1T      =	$294	;Set 1    CLK Interval (838   nsec/interval)  write-only
    125  10000 ????		02 95	    TIMINT     =	$295	;Interval Timer Interrupt		       read-only
    126  10000 ????		02 95	    TIM8T      =	$295	;Set 8    CLK Interval (6.7   usec/interval)  write-only
    127  10000 ????		02 96	    TIM64T     =	$296	;Set 64   CLK Interval (63.6  usec/interval)  write-only
    128  10000 ????		02 97	    T1024T     =	$297	;Set 1024 CLK Interval (858.2 usec/interval)  write-only
    129  10000 ????		02 9e	    TIM64TI    =	$29E	;Interrupt timer 64T			       write-only
    130  10000 ????
    131  10000 ????						;XM
    132  10000 ????		04 70	    XCTRL      =	$470	; 7=YM2151 6=RAM@6k 5=RAM@4k 4=pokey@450 3=hsc 2=cart 1=RoF_bank1 0=RoF_bank2
    133  10000 ????		04 70	    XCTRL1     =	$470
    134  10000 ????		04 78	    XCTRL2     =	$478
    135  10000 ????		04 7c	    XCTRL3     =	$47c
    136  10000 ????		04 71	    XCTRL4     =	$471
    137  10000 ????		04 72	    XCTRL5     =	$472
    138  10000 ????
    139  10000 ????						; Pokey register relative locations, since its base may be different
    140  10000 ????						; depending on the hardware.
    141  10000 ????		00 00	    PAUDF0     =	$0	; extra audio channels and frequencies
    142  10000 ????		00 01	    PAUDC0     =	$1
    143  10000 ????		00 02	    PAUDF1     =	$2
    144  10000 ????		00 03	    PAUDC1     =	$3
    145  10000 ????		00 04	    PAUDF2     =	$4
    146  10000 ????		00 05	    PAUDC2     =	$5
    147  10000 ????		00 06	    PAUDF3     =	$6
    148  10000 ????		00 07	    PAUDC3     =	$7
    149  10000 ????		00 08	    PAUDCTL    =	$8	; Audio Control
    150  10000 ????		00 09	    PSTIMER    =	$9
    151  10000 ????		00 0a	    PRANDOM    =	$A	; 17 bit polycounter pseudo random
    152  10000 ????		00 0f	    PSKCTL     =	$F	; Serial Port control
------- FILE 7800basic.h
------- FILE 7800basic_variable_redefs.h LEVEL 3 PASS 3
      0  10000 ????				       include	"7800basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 00	    player4_mode =	$00
      4  10000 ????		00 1c	    player4_width_twoscompliment =	$1c
      5  10000 ????		00 04	    player4_width =	$04
      6  10000 ????		00 00	    player3_mode =	$00
      7  10000 ????		00 1c	    player3_width_twoscompliment =	$1c
      8  10000 ????		00 04	    player3_width =	$04
      9  10000 ????		00 00	    player2_mode =	$00
     10  10000 ????		00 1c	    player2_width_twoscompliment =	$1c
     11  10000 ????		00 04	    player2_width =	$04
     12  10000 ????		00 00	    player1_mode =	$00
     13  10000 ????		00 1c	    player1_width_twoscompliment =	$1c
     14  10000 ????		00 04	    player1_width =	$04
     15  10000 ????		00 00	    font_mode  =	$00
     16  10000 ????		00 0b	    font_width_twoscompliment =	$0b
     17  10000 ????		00 35	    font_width =	$35
     18  10000 ????		01 47	    playerAnimFrame =	var7
     19  10000 ????
     20  10000 ????		01 46	    playerY    =	var6
     21  10000 ????
     22  10000 ????		01 45	    playerX    =	var5
     23  10000 ????
     24  10000 ????		01 44	    score      =	var4
     25  10000 ????
     26  10000 ????		01 43	    lives      =	var3
     27  10000 ????
     28  10000 ????		01 42	    wait       =	var2
     29  10000 ????
     30  10000 ????		01 41	    bgColor    =	var1
     31  10000 ????
     32  10000 ????		00 00	    player4_color3 =	0
     33  10000 ????		00 44	    player4_color2 =	$44
     34  10000 ????		00 0d	    player4_color1 =	$0d
     35  10000 ????		00 00	    player4_color0 =	$00
     36  10000 ????		00 07	    player3_color3 =	$07
     37  10000 ????		00 44	    player3_color2 =	$44
     38  10000 ????		00 0d	    player3_color1 =	$0d
     39  10000 ????		00 00	    player3_color0 =	$00
     40  10000 ????		00 07	    player2_color3 =	$07
     41  10000 ????		00 44	    player2_color2 =	$44
     42  10000 ????		00 0d	    player2_color1 =	$0d
     43  10000 ????		00 00	    player2_color0 =	$00
     44  10000 ????		00 07	    player1_color3 =	$07
     45  10000 ????		00 44	    player1_color2 =	$44
     46  10000 ????		00 0d	    player1_color1 =	$0d
     47  10000 ????		00 00	    player1_color0 =	$00
     48  10000 ????		00 0f	    font_color1 =	$0f
     49  10000 ????		00 00	    font_color0 =	$00
     50  10000 ????		00 01	    ROM32K     =	1
     51  10000 ????		00 01	    plotvalueonscreen =	1
     52  10000 ????		00 10	    ZONEHEIGHT =	16
------- FILE 7800basic.h
      6  10000 ????
      7  10000 ????						;************ 7800 overall RAM map **************
      8  10000 ????
      9  10000 ????						;	   40-FF	 zero page RAM
     10  10000 ????						;	  140-1FF	 RAM (stack)
     11  10000 ????						;	 1800-203F	 RAM
     12  10000 ????						;	 2100-213F	 RAM
     13  10000 ????						;	 2200-27FF	 RAM
     14  10000 ????
     15  10000 ????						;************ 7800basic RAM usage map **************
     16  10000 ????
     17  10000 ????						;	   40-FF	 numerous defines, listed below
     18  10000 ????						;	  140-1FF	 RAM (stack)
     19  10000 ????
     20  10000 ????						;	 1800-187F	 DLL  (1800-18DF with page flipping enabled)
     21  10000 ????						;	 1880-1FFF	 DLs  (18E0-1FFF with page flipping enabled)
     22  10000 ????
     23  10000 ????						;	 2000-203F	 Reserved
     24  10000 ????						;	 2100-213F	 Reserved
     25  10000 ????						;	 2200-27FF	 Free
     26  10000 ????
     27  10000 ????		1f e0	    eeprombuffer =	$1FE0
     28  10000 ????		18 00	    DLLMEM     =	$1800
     29  10000 ????		00 70	    DBOFFSET   =	$70	; $E0 length DL is /2 for double-buffering
     30  10000 ????
     31  10000 ????			   -	       ifconst	PLOTVALUEPAGE
     32  10000 ????			   -VALBUFFER  =	(PLOTVALUEPAGE*256)
     33  10000 ????				       else
     34  10000 ????		20 00	    VALBUFFER  =	$2000	; to $203F  ** never let VALBUFFER straddle pages
     35  10000 ????				       endif
     36  10000 ????
     37  10000 ????
     38  10000 ????		21 00	    pausestate =	$2100
     39  10000 ????		21 01	    dlzero     =	$2101	; zero to force end of $2100 DL, which we use in vblank and overscan
     40  10000 ????		21 02	    sINPT1     =	$2102	; save register for joy button joy0
     41  10000 ????		21 03	    sINPT3     =	$2103	; save register for joy button joy1
     42  10000 ????		21 04	    currentbank =	$2104
     43  10000 ????
     44  10000 ????		21 05	    currentrambank =	$2105
     45  10000 ????		21 06	    charactermode =	$2106
     46  10000 ????		21 07	    sCTRL      =	$2107
     47  10000 ????		21 08	    pokeydetected =	$2108
     48  10000 ????		21 09	    paldetected =	$2109
     49  10000 ????		21 0a	    avoxdetected =	$210A
     50  10000 ????		21 0b	    sCHARBASE  =	$210B	; save register for CHARBASE
     51  10000 ????
     52  10000 ????		21 0c	    hsdevice   =	$210C
     53  10000 ????		21 0d	    hsdifficulty =	$210D
     54  10000 ????		21 0e	    hserror    =	$210E
     55  10000 ????		21 0f	    hsgameslot =	$210F
     56  10000 ????		21 10	    hsnewscoreline =	$2110
     57  10000 ????		21 11	    hsnewscorerank =	$2111
     58  10000 ????		21 12	    HSRAMTable =	$2112	; to $212F (30 bytes) Format: III*5, SSS*5
     59  10000 ????		21 12	    HSRAMInitials =	$2112	; see above
     60  10000 ????		21 21	    HSRAMScores =	$2121	; see above
     61  10000 ????
     62  10000 ????		21 31	    ssCTRL     =	$2131
     63  10000 ????		21 32	    ssCHARBASE =	$2132
     64  10000 ????		21 33	    hsdisplaymode =	$2133
     65  10000 ????		21 34	    gamedifficulty =	$2134
     66  10000 ????		21 35	    hsinitialpos =	$2135
     67  10000 ????		21 36	    hsinitialhold =	$2136
     68  10000 ????		21 37	    hscursorx  =	$2137
     69  10000 ????		21 38	    hsjoydebounce =	$2138
     70  10000 ????		21 39	    hsswcha    =	$2139
     71  10000 ????		21 3a	    hsinpt1    =	$213A
     72  10000 ????		21 3b	    hscolorchaseindex =	$213B
     73  10000 ????		21 3c	    visibleDLLstart =	$213C
     74  10000 ????		21 3d	    overscanDLLstart =	$213D
     75  10000 ????		21 3e	    frameslost =	$213E
     76  10000 ????		21 3f	    hsreturn   =	$213F
     77  10000 ????
     78  10000 ????
     79  10000 ????		00 40	    rand       =	$40
     80  10000 ????		00 41	    rand16     =	$41
     81  10000 ????		00 42	    temp1      =	$42
     82  10000 ????		00 43	    temp2      =	$43
     83  10000 ????		00 44	    temp3      =	$44
     84  10000 ????		00 45	    temp4      =	$45
     85  10000 ????		00 46	    temp5      =	$46
     86  10000 ????		00 47	    temp6      =	$47
     87  10000 ????		00 48	    temp7      =	$48
     88  10000 ????		00 49	    temp8      =	$49
     89  10000 ????		00 4a	    temp9      =	$4a
     90  10000 ????
     91  10000 ????		00 4b	    pokeybase  =	$4b
     92  10000 ????		00 4b	    pokeybaselo =	$4b
     93  10000 ????		00 4c	    pokeybasehi =	$4c
     94  10000 ????
     95  10000 ????		00 4d	    visibleover =	$4d
     96  10000 ????
     97  10000 ????		00 4e	    sfx1pointlo =	$4e
     98  10000 ????		00 4f	    sfx2pointlo =	$4f
     99  10000 ????		00 50	    sfx1pointhi =	$50
    100  10000 ????		00 51	    sfx2pointhi =	$51
    101  10000 ????
    102  10000 ????		00 52	    sfx1priority =	$52
    103  10000 ????		00 53	    sfx2priority =	$53
    104  10000 ????		00 54	    sfx1poffset =	$54
    105  10000 ????		00 55	    sfx2poffset =	$55
    106  10000 ????
    107  10000 ????		00 56	    sfx1frames =	$56
    108  10000 ????		00 57	    sfx2frames =	$57
    109  10000 ????		00 58	    sfx1tick   =	$58
    110  10000 ????		00 59	    sfx2tick   =	$59
    111  10000 ????
    112  10000 ????		00 5a	    tempmath   =	$5a
    113  10000 ????
    114  10000 ????		00 5b	    pokey1pointlo =	$5b
    115  10000 ????		00 5c	    pokey1pointhi =	$5c
    116  10000 ????		00 5d	    pokey2pointlo =	$5d
    117  10000 ????		00 5e	    pokey2pointhi =	$5e
    118  10000 ????		00 5f	    pokey3pointlo =	$5f
    119  10000 ????		00 60	    pokey3pointhi =	$60
    120  10000 ????		00 61	    pokey4pointlo =	$61
    121  10000 ????		00 62	    pokey4pointhi =	$62
    122  10000 ????
    123  10000 ????		00 63	    dlpnt      =	$63	; to $64
    124  10000 ????		00 65	    dlend      =	$65	; to $81 - for 28 possible visible dll entries
    125  10000 ????		00 82	    dlendsave  =	$82	; to $9e - for 28 possible visible dll entries
    126  10000 ????
    127  10000 ????		00 9f	    speech_addr =	$9f
    128  10000 ????		00 a0	    speech_addr_hi =	$a0
    129  10000 ????
    130  10000 ????		00 a1	    HSGameTableLo =	$a1
    131  10000 ????		00 a2	    HSGameTableHi =	$a2
    132  10000 ????		00 a3	    HSVoxHi    =	$a3
    133  10000 ????		00 a4	    HSVoxLo    =	$a4
    134  10000 ????
    135  10000 ????						;channel pointers
    136  10000 ????
    137  10000 ????		00 a5	    songchannel1layer1lo =	$a5
    138  10000 ????		00 a6	    songchannel2layer1lo =	$a6
    139  10000 ????		00 a7	    songchannel3layer1lo =	$a7
    140  10000 ????		00 a8	    songchannel4layer1lo =	$a8
    141  10000 ????
    142  10000 ????		00 a9	    songchannel1layer2lo =	$a9
    143  10000 ????		00 aa	    songchannel2layer2lo =	$aA
    144  10000 ????		00 ab	    songchannel3layer2lo =	$aB
    145  10000 ????		00 ac	    songchannel4layer2lo =	$aC
    146  10000 ????
    147  10000 ????		00 ad	    songchannel1layer3lo =	$aD
    148  10000 ????		00 ae	    songchannel2layer3lo =	$aE
    149  10000 ????		00 af	    songchannel3layer3lo =	$aF
    150  10000 ????		00 b0	    songchannel4layer3lo =	$b0
    151  10000 ????
    152  10000 ????		00 b1	    songchannel1layer1hi =	$b1
    153  10000 ????		00 b2	    songchannel2layer1hi =	$b2
    154  10000 ????		00 b3	    songchannel3layer1hi =	$b3
    155  10000 ????		00 b4	    songchannel4layer1hi =	$b4
    156  10000 ????
    157  10000 ????		00 b5	    songchannel1layer2hi =	$b5
    158  10000 ????		00 b6	    songchannel2layer2hi =	$b6
    159  10000 ????		00 b7	    songchannel3layer2hi =	$b7
    160  10000 ????		00 b8	    songchannel4layer2hi =	$b8
    161  10000 ????
    162  10000 ????		00 b9	    songchannel1layer3hi =	$b9
    163  10000 ????		00 ba	    songchannel2layer3hi =	$bA
    164  10000 ????		00 bb	    songchannel3layer3hi =	$bB
    165  10000 ????		00 bc	    songchannel4layer3hi =	$bC
    166  10000 ????
    167  10000 ????		00 bd	    songdatalo =	$bd
    168  10000 ????		00 be	    songdatahi =	$be
    169  10000 ????
    170  10000 ????		00 bf	    inactivechannelcount =	$bf
    171  10000 ????
    172  10000 ????		00 c0	    songchannel1transpose =	$c0
    173  10000 ????		00 c1	    songchannel2transpose =	$c1
    174  10000 ????		00 c2	    songchannel3transpose =	$c2
    175  10000 ????		00 c3	    songchannel4transpose =	$c3
    176  10000 ????
    177  10000 ????		00 c4	    songstackindex =	$c4
    178  10000 ????
    179  10000 ????		00 c5	    songchannel1instrumentlo =	$c5
    180  10000 ????		00 c6	    songchannel2instrumentlo =	$c6
    181  10000 ????		00 c7	    songchannel3instrumentlo =	$c7
    182  10000 ????		00 c8	    songchannel4instrumentlo =	$c8
    183  10000 ????
    184  10000 ????		00 c9	    songchannel1instrumenthi =	$c9
    185  10000 ????		00 ca	    songchannel2instrumenthi =	$ca
    186  10000 ????		00 cb	    songchannel3instrumenthi =	$cb
    187  10000 ????		00 cc	    songchannel4instrumenthi =	$cc
    188  10000 ????
    189  10000 ????		00 cd	    sfx1notedata =	$cd
    190  10000 ????		00 ce	    sfx2notedata =	$ce
    191  10000 ????
    192  10000 ????		00 cf	    songloops  =	$cf
    193  10000 ????
    194  10000 ????		00 d0	    songpointerlo =	$D0
    195  10000 ????		00 d1	    songpointerhi =	$D1
    196  10000 ????
    197  10000 ????		00 d2	    voxlock    =	$D2
    198  10000 ????		00 d3	    voxqueuesize =	$D3
    199  10000 ????
    200  10000 ????		00 d4	    vblankroutines =	$D4
    201  10000 ????
    202  10000 ????		00 d5	    doublebufferstate =	$D5
    203  10000 ????		00 d6	    doublebufferdloffset =	$D6
    204  10000 ????		00 d7	    doublebufferbufferdirty =	$D7
    205  10000 ????
    206  10000 ????		00 d8	    inttemp1   =	$D8
    207  10000 ????		00 d9	    inttemp2   =	$D9
    208  10000 ????		00 da	    inttemp3   =	$DA
    209  10000 ????		00 db	    inttemp4   =	$DB
    210  10000 ????		00 dc	    inttemp5   =	$DC
    211  10000 ????		00 dd	    inttemp6   =	$DD
    212  10000 ????
    213  10000 ????		00 de	    sfxschedulelock =	$DE
    214  10000 ????		00 df	    sfxschedulemissed =	$DF
    215  10000 ????		00 e0	    sfxinstrumentlo =	$E0
    216  10000 ????		00 e1	    sfxinstrumenthi =	$E1
    217  10000 ????		00 e2	    sfxpitchoffset =	$E2
    218  10000 ????		00 e3	    sfxnoteindex =	$E3
    219  10000 ????
    220  10000 ????		00 e4	    CTLSWAs    =	$E4
    221  10000 ????		00 e5	    CTLSWBs    =	$E5
    222  10000 ????
    223  10000 ????		00 e6	    A	       =	$e6
    224  10000 ????		00 e6	    a	       =	$e6
    225  10000 ????		00 e7	    B	       =	$e7
    226  10000 ????		00 e7	    b	       =	$e7
    227  10000 ????		00 e8	    C	       =	$e8
    228  10000 ????		00 e8	    c	       =	$e8
    229  10000 ????		00 e9	    D	       =	$e9
    230  10000 ????		00 e9	    d	       =	$e9
    231  10000 ????		00 ea	    E	       =	$ea
    232  10000 ????		00 ea	    e	       =	$ea
    233  10000 ????		00 eb	    F	       =	$eb
    234  10000 ????		00 eb	    f	       =	$eb
    235  10000 ????		00 ec	    G	       =	$ec
    236  10000 ????		00 ec	    g	       =	$ec
    237  10000 ????		00 ed	    H	       =	$ed
    238  10000 ????		00 ed	    h	       =	$ed
    239  10000 ????		00 ee	    I	       =	$ee
    240  10000 ????		00 ee	    i	       =	$ee
    241  10000 ????		00 ef	    J	       =	$ef
    242  10000 ????		00 ef	    j	       =	$ef
    243  10000 ????		00 f0	    K	       =	$f0
    244  10000 ????		00 f0	    k	       =	$f0
    245  10000 ????		00 f1	    L	       =	$f1
    246  10000 ????		00 f1	    l	       =	$f1
    247  10000 ????		00 f2	    M	       =	$f2
    248  10000 ????		00 f2	    m	       =	$f2
    249  10000 ????		00 f3	    N	       =	$f3
    250  10000 ????		00 f3	    n	       =	$f3
    251  10000 ????		00 f4	    O	       =	$f4
    252  10000 ????		00 f4	    o	       =	$f4
    253  10000 ????		00 f5	    P	       =	$f5
    254  10000 ????		00 f5	    p	       =	$f5
    255  10000 ????		00 f6	    Q	       =	$f6
    256  10000 ????		00 f6	    q	       =	$f6
    257  10000 ????		00 f7	    R	       =	$f7
    258  10000 ????		00 f7	    r	       =	$f7
    259  10000 ????		00 f8	    S	       =	$f8
    260  10000 ????		00 f8	    s	       =	$f8
    261  10000 ????		00 f9	    T	       =	$f9
    262  10000 ????		00 f9	    t	       =	$f9
    263  10000 ????		00 fa	    U	       =	$fa
    264  10000 ????		00 fa	    u	       =	$fa
    265  10000 ????		00 fb	    V	       =	$fb
    266  10000 ????		00 fb	    v	       =	$fb
    267  10000 ????		00 fc	    W	       =	$fc
    268  10000 ????		00 fc	    w	       =	$fc
    269  10000 ????		00 fd	    X	       =	$fd
    270  10000 ????		00 fd	    x	       =	$fd
    271  10000 ????		00 fe	    Y	       =	$fe
    272  10000 ????		00 fe	    y	       =	$fe
    273  10000 ????		00 ff	    Z	       =	$ff
    274  10000 ????		00 ff	    z	       =	$ff
    275  10000 ????
    276  10000 ????						; var0-var99 variables use the top of the stack
    277  10000 ????		01 40	    var0       =	$140
    278  10000 ????		01 41	    var1       =	$141
    279  10000 ????		01 42	    var2       =	$142
    280  10000 ????		01 43	    var3       =	$143
    281  10000 ????		01 44	    var4       =	$144
    282  10000 ????		01 45	    var5       =	$145
    283  10000 ????		01 46	    var6       =	$146
    284  10000 ????		01 47	    var7       =	$147
    285  10000 ????		01 48	    var8       =	$148
    286  10000 ????		01 49	    var9       =	$149
    287  10000 ????		01 4a	    var10      =	$14a
    288  10000 ????		01 4b	    var11      =	$14b
    289  10000 ????		01 4c	    var12      =	$14c
    290  10000 ????		01 4d	    var13      =	$14d
    291  10000 ????		01 4e	    var14      =	$14e
    292  10000 ????		01 4f	    var15      =	$14f
    293  10000 ????		01 50	    var16      =	$150
    294  10000 ????		01 51	    var17      =	$151
    295  10000 ????		01 52	    var18      =	$152
    296  10000 ????		01 53	    var19      =	$153
    297  10000 ????		01 54	    var20      =	$154
    298  10000 ????		01 55	    var21      =	$155
    299  10000 ????		01 56	    var22      =	$156
    300  10000 ????		01 57	    var23      =	$157
    301  10000 ????		01 58	    var24      =	$158
    302  10000 ????		01 59	    var25      =	$159
    303  10000 ????		01 5a	    var26      =	$15a
    304  10000 ????		01 5b	    var27      =	$15b
    305  10000 ????		01 5c	    var28      =	$15c
    306  10000 ????		01 5d	    var29      =	$15d
    307  10000 ????		01 5e	    var30      =	$15e
    308  10000 ????		01 5f	    var31      =	$15f
    309  10000 ????		01 60	    var32      =	$160
    310  10000 ????		01 61	    var33      =	$161
    311  10000 ????		01 62	    var34      =	$162
    312  10000 ????		01 63	    var35      =	$163
    313  10000 ????		01 64	    var36      =	$164
    314  10000 ????		01 65	    var37      =	$165
    315  10000 ????		01 66	    var38      =	$166
    316  10000 ????		01 67	    var39      =	$167
    317  10000 ????		01 68	    var40      =	$168
    318  10000 ????		01 69	    var41      =	$169
    319  10000 ????		01 6a	    var42      =	$16a
    320  10000 ????		01 6b	    var43      =	$16b
    321  10000 ????		01 6c	    var44      =	$16c
    322  10000 ????		01 6d	    var45      =	$16d
    323  10000 ????		01 6e	    var46      =	$16e
    324  10000 ????		01 6f	    var47      =	$16f
    325  10000 ????		01 70	    var48      =	$170
    326  10000 ????		01 71	    var49      =	$171
    327  10000 ????		01 72	    var50      =	$172
    328  10000 ????		01 73	    var51      =	$173
    329  10000 ????		01 74	    var52      =	$174
    330  10000 ????		01 75	    var53      =	$175
    331  10000 ????		01 76	    var54      =	$176
    332  10000 ????		01 77	    var55      =	$177
    333  10000 ????		01 78	    var56      =	$178
    334  10000 ????		01 79	    var57      =	$179
    335  10000 ????		01 7a	    var58      =	$17a
    336  10000 ????		01 7b	    var59      =	$17b
    337  10000 ????		01 7c	    var60      =	$17c
    338  10000 ????		01 7d	    var61      =	$17d
    339  10000 ????		01 7e	    var62      =	$17e
    340  10000 ????		01 7f	    var63      =	$17f
    341  10000 ????		01 80	    var64      =	$180
    342  10000 ????		01 81	    var65      =	$181
    343  10000 ????		01 82	    var66      =	$182
    344  10000 ????		01 83	    var67      =	$183
    345  10000 ????		01 84	    var68      =	$184
    346  10000 ????		01 85	    var69      =	$185
    347  10000 ????		01 86	    var70      =	$186
    348  10000 ????		01 87	    var71      =	$187
    349  10000 ????		01 88	    var72      =	$188
    350  10000 ????		01 89	    var73      =	$189
    351  10000 ????		01 8a	    var74      =	$18a
    352  10000 ????		01 8b	    var75      =	$18b
    353  10000 ????		01 8c	    var76      =	$18c
    354  10000 ????		01 8d	    var77      =	$18d
    355  10000 ????		01 8e	    var78      =	$18e
    356  10000 ????		01 8f	    var79      =	$18f
    357  10000 ????		01 90	    var80      =	$190
    358  10000 ????		01 91	    var81      =	$191
    359  10000 ????		01 92	    var82      =	$192
    360  10000 ????		01 93	    var83      =	$193
    361  10000 ????		01 94	    var84      =	$194
    362  10000 ????		01 95	    var85      =	$195
    363  10000 ????		01 96	    var86      =	$196
    364  10000 ????		01 97	    var87      =	$197
    365  10000 ????		01 98	    var88      =	$198
    366  10000 ????		01 99	    var89      =	$199
    367  10000 ????		01 9a	    var90      =	$19a
    368  10000 ????		01 9b	    var91      =	$19b
    369  10000 ????		01 9c	    var92      =	$19c
    370  10000 ????		01 9d	    var93      =	$19d
    371  10000 ????		01 9e	    var94      =	$19e
    372  10000 ????		01 9f	    var95      =	$19f
    373  10000 ????		01 a0	    var96      =	$1a0
    374  10000 ????		01 a1	    var97      =	$1a1
    375  10000 ????		01 a2	    var98      =	$1a2
    376  10000 ????		01 a3	    var99      =	$1a3
    377  10000 ????
    378 U01c2 ????				      SEG.U	"7800basicRAM"
    379 U01a4					      ORG	$1A4
    380 U01a4
    381 U01a4							; MAX allocation locations are in comments...
    382 U01a4		       00	   framecounter DS	1	; $1A4
    383 U01a5		       00	   countdownseconds DS	1	; $1A5
    384 U01a6		       00 00 00    score0     DS	3	; $1A6 $1A7 $1A8
    385 U01a9		       00 00 00    score1     DS	3	; $1A9 $1AA $1AB
    386 U01ac		       00	   pausebuttonflag DS	1	; $1AC
    387 U01ad		       00	   valbufend  DS	1	; $1AD
    388 U01ae		       00	   valbufendsave DS	1	; $1AE
    389 U01af		       00	   finescrollx DS	1	; $1AF
    390 U01b0		       00	   finescrolly DS	1	; $1B0
    391 U01b1		       00	   joybuttonmode DS	1	; $1B1 ; track joysticks that were changed to one-button mode
    392 U01b2		       00	   interruptindex DS	1	; $1B2
    393 U01b3
    394 U01b3				  -	      ifconst	DOUBLEBUFFER
    395 U01b3				  -doublebufferminimumframetarget DS	1	; $1B3
    396 U01b3				  -doublebufferminimumframeindex DS	1	; $1B4
    397 U01b3					      endif
    398 U01b3
    399 U01b3		       00	   pausedisable DS	1	; $1B5
    400 U01b4		       00	   XCTRL1s    DS	1	; $1B6
    401 U01b5
    402 U01b5				  -	      ifconst	AVOXVOICE
    403 U01b5				  -avoxenable DS	1	; $1B7
    404 U01b5				  -tempavox   DS	1	; $1B8
    405 U01b5					      endif
    406 U01b5
    407 U01b5				  -	      ifconst	MUSICTRACKER
    408 U01b5				  -songtempo  DS	1	; $1B9
    409 U01b5				  -songtick   DS	1	; $1BA
    410 U01b5				  -
    411 U01b5				  -songchannel1layer1loops DS	1	; $1BB
    412 U01b5				  -songchannel2layer1loops DS	1	; $1BC
    413 U01b5				  -songchannel3layer1loops DS	1	; $1BD
    414 U01b5				  -songchannel4layer1loops DS	1	; $1BE
    415 U01b5				  -
    416 U01b5				  -songchannel1layer2loops DS	1	; $1BF
    417 U01b5				  -songchannel2layer2loops DS	1	; $1C0
    418 U01b5				  -songchannel3layer2loops DS	1	; $1C1
    419 U01b5				  -songchannel4layer2loops DS	1	; $1C2
    420 U01b5				  -
    421 U01b5				  -songchannel1layer3loops DS	1	; $1C3
    422 U01b5				  -songchannel2layer3loops DS	1	; $1C4
    423 U01b5				  -songchannel3layer3loops DS	1	; $1C5
    424 U01b5				  -songchannel4layer3loops DS	1	; $1C6
    425 U01b5				  -
    426 U01b5				  -songchannel1busywait DS	1	; $1C7
    427 U01b5				  -songchannel2busywait DS	1	; $1C8
    428 U01b5				  -songchannel3busywait DS	1	; $1C9
    429 U01b5				  -songchannel4busywait DS	1	; $1CA
    430 U01b5				  -
    431 U01b5				  -songchannel1stackdepth DS	1	; $1CB
    432 U01b5				  -songchannel2stackdepth DS	1	; $1CC
    433 U01b5				  -songchannel3stackdepth DS	1	; $1CD
    434 U01b5				  -songchannel4stackdepth DS	1	; $1CE
    435 U01b5					      endif
    436 U01b5
    437 U01b5		       00	   palframes  DS	1	; $1CF
    438 U01b6		       00	   palfastframe DS	1	; $1D0
    439 U01b7
    440 U01b7				  -	      ifconst	MOUSESUPPORT
    441 U01b7				  -port0resolution DS	1	; $1D1
    442 U01b7				  -port1resolution DS	1	; $1D2
    443 U01b7					      else
    444 U01b7				  -	      ifconst	TRAKBALLSUPPORT
    445 U01b7				  -port0resolution DS	1	; $1D1
    446 U01b7				  -port1resolution DS	1	; $1D2
    447 U01b7					      endif
    448 U01b7					      endif
    449 U01b7
    450 U01b7		       00	   port0control DS	1	; $1D3
    451 U01b8		       00	   port1control DS	1	; $1D4
    452 U01b9
    453 U01b9							; port#control values...
    454 U01b9							;	1 = proline
    455 U01b9							;	2 = lightgun
    456 U01b9							;	3 = paddle
    457 U01b9							;	4 = trakball
    458 U01b9							;	5 = vcs joystick
    459 U01b9							;	6 = driving
    460 U01b9							;	7 = keypad
    461 U01b9							;	8 = st mouse/cx80
    462 U01b9							;	9 = amiga mouse
    463 U01b9							;     10 = atarivox
    464 U01b9
    465 U01b9							; controller 0 data...
    466 U01b9		       00	   paddleposition0 DS	1	; $1D5
    467 U01b9		       01 b9	   keypadmatrix0a =	paddleposition0
    468 U01b9		       01 b9	   drivingposition0 =	paddleposition0
    469 U01b9		       01 b9	   trakballx0 =	paddleposition0
    470 U01b9		       01 b9	   mousex0    =	paddleposition0
    471 U01b9		       01 b9	   lighttgunx0 =	paddleposition0
    472 U01b9		       01 b9	   snes2atari0lo =	paddleposition0
    473 U01ba
    474 U01ba							; controller 1 data...
    475 U01ba		       00	   paddleposition2 DS	1	; $1D6
    476 U01ba		       01 ba	   keypadmatrix1a =	paddleposition2
    477 U01ba		       01 ba	   drivingposition1 =	paddleposition2
    478 U01ba		       01 ba	   trakballx1 =	paddleposition2
    479 U01ba		       01 ba	   mousex1    =	paddleposition2
    480 U01ba		       01 ba	   lightgunx1 =	paddleposition2
    481 U01ba		       01 ba	   snes2atari1lo =	paddleposition2
    482 U01bb
    483 U01bb							; controller 0 altdata...
    484 U01bb		       00	   paddleposition1 DS	1	; $1D7
    485 U01bb		       01 bb	   keypadmatrix0b =	paddleposition1
    486 U01bb		       01 bb	   trakbally0 =	paddleposition1
    487 U01bb		       01 bb	   mousey0    =	paddleposition1
    488 U01bb		       01 bb	   lightguny0 =	paddleposition1
    489 U01bb		       01 bb	   snes2atari0hi =	paddleposition1
    490 U01bc
    491 U01bc							; controller 1 altdata...
    492 U01bc		       00	   paddleposition3 DS	1	; $1D8
    493 U01bc		       01 bc	   keypadmatrix1b =	paddleposition3
    494 U01bc		       01 bc	   trakbally1 =	paddleposition3
    495 U01bc		       01 bc	   mousey1    =	paddleposition3
    496 U01bc		       01 bc	   lightguny1 =	paddleposition3
    497 U01bc		       01 bc	   snes2atari1hi =	paddleposition3
    498 U01bd
    499 U01bd							; controller state save. for trakball state+dir codes, rotary position codes
    500 U01bd		       00	   controller0statesave DS	1	; $1D9
    501 U01bd		       01 bd	   paddleprevious0 =	controller0statesave
    502 U01bd		       01 bd	   mousecodex0 =	controller0statesave
    503 U01bd		       01 bd	   trakballcodex0 =	controller0statesave
    504 U01bd		       01 bd	   keypadmatrix0c =	controller0statesave
    505 U01bd		       01 bd	   snesdetected0 =	controller0statesave
    506 U01be
    507 U01be		       00	   controller1statesave DS	1	; $1DA
    508 U01be		       01 be	   paddleprevious2 =	controller1statesave
    509 U01be		       01 be	   mousecodex1 =	controller1statesave
    510 U01be		       01 be	   trakballcodex1 =	controller1statesave
    511 U01be		       01 be	   keypadmatrix1c =	controller1statesave
    512 U01be		       01 be	   snesdetected1 =	controller1statesave
    513 U01bf
    514 U01bf		       00	   paddleprevious1 DS	1	; $1DB
    515 U01bf		       01 bf	   keypadmatrix0d =	paddleprevious1
    516 U01bf		       01 bf	   mousecodey0 =	paddleprevious1
    517 U01bf		       01 bf	   trakballcodey0 =	paddleprevious1
    518 U01c0
    519 U01c0		       00	   paddleprevious3 DS	1	; $1DC
    520 U01c0		       01 c0	   keypadmatrix1d =	paddleprevious3
    521 U01c0		       01 c0	   mousecodey1 =	paddleprevious3
    522 U01c0		       01 c0	   trakballcodey1 =	paddleprevious3
    523 U01c1
    524 U01c1				  -	      ifconst	pokeysupport
    525 U01c1				  -pokey1frames DS	1	; $1DD
    526 U01c1				  -pokey1tick DS	1	; $1DE
    527 U01c1				  -pokey2frames DS	1	; $1DF
    528 U01c1				  -pokey2tick DS	1	; $1E0
    529 U01c1				  -pokey3frames DS	1	; $1E1
    530 U01c1				  -pokey3tick DS	1	; $1E2
    531 U01c1				  -pokey4frames DS	1	; $1E3
    532 U01c1				  -pokey4tick DS	1	; $1E4
    533 U01c1				  -pokey1priority DS	1	; $1E5
    534 U01c1				  -pokey1offset DS	1	; $1E6
    535 U01c1				  -pokey2priority DS	1	; $1E7
    536 U01c1				  -pokey2offset DS	1	; $1E8
    537 U01c1				  -pokey3priority DS	1	; $1E9
    538 U01c1				  -pokey3offset DS	1	; $1EA
    539 U01c1				  -pokey4priority DS	1	; $1EB
    540 U01c1				  -pokey4offset DS	1	; $1EC
    541 U01c1					      endif
    542 U01c1
    543 U01c1				  -	      ifconst	pokeykeysupport
    544 U01c1				  -pokeylastkeycode DS	1
    545 U01c1				  -pokeykeycode DS	1
    546 U01c1				  -pokeykeydebounce DS	1
    547 U01c1					      endif
    548 U01c1
    549 U01c1				  -	      ifconst	RMT
    550 U01c1				  -rasterpause DS	1
    551 U01c1					      endif		; RMT
    552 U01c1				  -	      ifconst	RMTVOLUME
    553 U01c1				  -rmtvolume  DS	1
    554 U01c1					      endif		; RMTVOLUME
    555 U01c1				  -	      ifconst	TIAVOLUME
    556 U01c1				  -tiavolume  DS	1
    557 U01c1					      endif		; TIAVOLUME
    558 U01c1
    559 U01c1				  -	      ifconst	FOURBITFADE
    560 U01c1				  -fourbittemp1 DS	1
    561 U01c1				  -fourbitfadevalue DS	1
    562 U01c1				  -fourbittemp1int DS	1
    563 U01c1				  -fourbitfadevalueint DS	1
    564 U01c1					      endif		; FOURBITFADE
    565 U01c1
    566 U01c1				  -	      ifconst	SNES2ATARISUPPORT
    567 U01c1				  -snesport   DS	1
    568 U01c1					      endif
    569 U01c1
    570 U01c1				  -	      ifconst	KEYPADSUPPORT
    571 U01c1				  -keypadcounter DS	1
    572 U01c1					      endif
    573 U01c1
    574 U01c1							; see if we need an interrupthold byte...
    575 U01c1				   INTERRUPTNEEDED SET	0
    576 U01c1				  -	      ifconst	.topscreenroutine
    577 U01c1				  -INTERRUPTNEEDED SET	1
    578 U01c1					      endif
    579 U01c1				  -	      ifconst	.bottomscreenroutine
    580 U01c1				  -INTERRUPTNEEDED SET	1
    581 U01c1					      endif
    582 U01c1				  -	      ifconst	.userinterrupt
    583 U01c1				  -INTERRUPTNEEDED SET	1
    584 U01c1					      endif
    585 U01c1				  -	      if	INTERRUPTNEEDED = 1
    586 U01c1				  -interrupthold DS	1	; $1ED
    587 U01c1					      endif
    588 U01c1
    589 U01c1					      ifnconst	CANARYOFF
    590 U01c1		       00	   canary     DS	1	; $1EF
    591 U01c2					      endif
    592 U01c2
    593 U01c2
    594 U01c2					      ifnconst	bankswitchmode
   stack allowance: 30 nested subroutines.
    595 U01c2					      echo	"  stack allowance:",[($1FF - .)/2]d,"nested subroutines."
    596 U01c2				  -	      else
    597 U01c2				  -	      echo	"  stack allowance:",[($1FF - .)/3]d,"nested subroutines."
    598 U01c2					      endif
    599 U01c2					      ifnconst	CANARYOFF
   the canary is situated at: $1c1
    600 U01c2					      echo	"  the canary is situated at:",[canary]
    601 U01c2				  -	      else
    602 U01c2				  -	      echo	"  the canary is disabled."
    603 U01c2					      endif
    604 U01c2
    605 U01c2							; $1EE - $1FF reserved for stack
    606 U01c2
    607  10000 ????				       SEG	"GAME"
    608  10000 ????
------- FILE c:\Users\steve\OneDrive\Desktop\2018dev\7800\7800basic\projects\demo1\lesson2_2.78b.asm
------- FILE 7800basic_variable_redefs.h LEVEL 2 PASS 3
      0  10000 ????				       include	"7800basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 00	    player4_mode =	$00
      4  10000 ????		00 1c	    player4_width_twoscompliment =	$1c
      5  10000 ????		00 04	    player4_width =	$04
      6  10000 ????		00 00	    player3_mode =	$00
      7  10000 ????		00 1c	    player3_width_twoscompliment =	$1c
      8  10000 ????		00 04	    player3_width =	$04
      9  10000 ????		00 00	    player2_mode =	$00
     10  10000 ????		00 1c	    player2_width_twoscompliment =	$1c
     11  10000 ????		00 04	    player2_width =	$04
     12  10000 ????		00 00	    player1_mode =	$00
     13  10000 ????		00 1c	    player1_width_twoscompliment =	$1c
     14  10000 ????		00 04	    player1_width =	$04
     15  10000 ????		00 00	    font_mode  =	$00
     16  10000 ????		00 0b	    font_width_twoscompliment =	$0b
     17  10000 ????		00 35	    font_width =	$35
     18  10000 ????		01 47	    playerAnimFrame =	var7
     19  10000 ????
     20  10000 ????		01 46	    playerY    =	var6
     21  10000 ????
     22  10000 ????		01 45	    playerX    =	var5
     23  10000 ????
     24  10000 ????		01 44	    score      =	var4
     25  10000 ????
     26  10000 ????		01 43	    lives      =	var3
     27  10000 ????
     28  10000 ????		01 42	    wait       =	var2
     29  10000 ????
     30  10000 ????		01 41	    bgColor    =	var1
     31  10000 ????
     32  10000 ????		00 00	    player4_color3 =	0
     33  10000 ????		00 44	    player4_color2 =	$44
     34  10000 ????		00 0d	    player4_color1 =	$0d
     35  10000 ????		00 00	    player4_color0 =	$00
     36  10000 ????		00 07	    player3_color3 =	$07
     37  10000 ????		00 44	    player3_color2 =	$44
     38  10000 ????		00 0d	    player3_color1 =	$0d
     39  10000 ????		00 00	    player3_color0 =	$00
     40  10000 ????		00 07	    player2_color3 =	$07
     41  10000 ????		00 44	    player2_color2 =	$44
     42  10000 ????		00 0d	    player2_color1 =	$0d
     43  10000 ????		00 00	    player2_color0 =	$00
     44  10000 ????		00 07	    player1_color3 =	$07
     45  10000 ????		00 44	    player1_color2 =	$44
     46  10000 ????		00 0d	    player1_color1 =	$0d
     47  10000 ????		00 00	    player1_color0 =	$00
     48  10000 ????		00 0f	    font_color1 =	$0f
     49  10000 ????		00 00	    font_color0 =	$00
     50  10000 ????		00 01	    ROM32K     =	1
     51  10000 ????		00 01	    plotvalueonscreen =	1
     52  10000 ????		00 10	    ZONEHEIGHT =	16
------- FILE c:\Users\steve\OneDrive\Desktop\2018dev\7800\7800basic\projects\demo1\lesson2_2.78b.asm
    633  10000 ????
    634  10000 ????						; BEADHEADER... disabled for now
    635  10000 ????						; A BEAD header gets automatically incorportated into the ROM header. 
    636  10000 ????						; For more BEAD executable info, check out the spec...
    637  10000 ????						; http://7800.8bitdev.org/index.php/The_Atari_7800_BEAD_Execuable_Specification
    638  10000 ????
    639  10000 ????		00 01	    GAMEDESCRIPTIONSET =	1
    640  10000 ????		4e 61 6d 65 GAMEDESCRIPTION =	"Test Name"
    641  10000 ????
    642  10000 ????
    643  10000 ????		00 40	    BDHSC      =	%01000000
    644  10000 ????		00 20	    BDYM       =	%00100000
    645  10000 ????		00 10	    BDPOKEY    =	%00010000
    646  10000 ????		00 08	    BDROF      =	%00001000
    647  10000 ????		00 00	    BD16K      =	%00000000
    648  10000 ????		00 01	    BD32K      =	%00000001
    649  10000 ????		00 02	    BD48K      =	%00000010
    650  10000 ????		00 05	    BD1800     =	%00000101
    651  10000 ????		00 06	    BD4000     =	%00000110
    652  10000 ????
    653  10000 ????			   -	       ifconst	BEADHEADER
    654  10000 ????			   -BEADHARDWARE SET	0
    655  10000 ????			   -	       ifconst	ROM16K
    656  10000 ????			   -BEADHARDWARE SET	(BEADHARDWARE|BD16K)
    657  10000 ????			   -	       endif
    658  10000 ????			   -	       ifconst	ROM32K
    659  10000 ????			   -BEADHARDWARE SET	(BEADHARDWARE|BD32K)
    660  10000 ????			   -	       endif
    661  10000 ????			   -	       ifconst	ROM48K
    662  10000 ????			   -BEADHARDWARE SET	(BEADHARDWARE|BD48K)
    663  10000 ????			   -	       endif
    664  10000 ????			   -	       ifconst	pokeysupport
    665  10000 ????			   -BEADHARDWARE SET	(BEADHARDWARE|BDPOKEY)
    666  10000 ????			   -	       endif
    667  10000 ????			   -	       ifconst	HSSUPPORT
    668  10000 ????			   -BEADHARDWARE SET	(BEADHARDWARE|BDHSC)
    669  10000 ????			   -	       endif
    670  10000 ????				       endif
    671  10000 ????
    672  10000 ????						;start address of cart...
    673  10000 ????
    674  10000 ????			    BANK_WAS_SET SET	0
    675  10000 ????
    676  10000 ????			   -	       ifconst	ROM8K
    677  10000 ????			   -	       ORG	$E000,0
    678  10000 ????			   -BANK_WAS_SET SET	1
    679  10000 ????				       endif		; ROM8K
    680  10000 ????
    681  10000 ????			   -	       ifconst	ROM16K
    682  10000 ????			   -	       ORG	$C000,0
    683  10000 ????			   -BANK_WAS_SET SET	1
    684  10000 ????			   -	       ifconst	BEADHEADER
    685  10000 ????			   -	       .byte	$BE,$AD,BEADHARDWARE
    686  10000 ????			   -	       ifconst	GAMEDESCRIPTION
    687  10000 ????			   -	       CLC
    688  10000 ????			   -	       BCC	_SKIPDESCRIPTION
    689  10000 ????			   -	       .byte	GAMEDESCRIPTION,0
    690  10000 ????			   -_SKIPDESCRIPTION
    691  10000 ????			   -	       endif		; GAMEDESCRIPTION
    692  10000 ????			   -	       jmp	($FFFC)
    693  10000 ????			   -	       endif		; BEADHEADER
    694  10000 ????				       endif		; ROM16K
    695  10000 ????
    696  10000 ????				       ifconst	ROM32K
    697  8000					      ORG	$8000,0
    698  8000				   BANK_WAS_SET SET	1
    699  8000				  -	      ifconst	BEADHEADER
    700  8000				  -	      .byte	$BE,$AD,BEADHARDWARE
    701  8000				  -	      ifconst	GAMEDESCRIPTION
    702  8000				  -	      CLC
    703  8000				  -	      BCC	_SKIPDESCRIPTION
    704  8000				  -	      .byte	GAMEDESCRIPTION,0
    705  8000				  -_SKIPDESCRIPTION
    706  8000				  -	      endif		; GAMEDESCRIPTION
    707  8000				  -	      jmp	($FFFC)
    708  8000					      endif		; BEADHEADER
    709  8000					      endif		; ROM32K
    710  8000
    711  8000				  -	      ifconst	ROM48K
    712  8000				  -	      ORG	$4000,0
    713  8000				  -BANK_WAS_SET SET	1
    714  8000				  -	      ifconst	BEADHEADER
    715  8000				  -	      .byte	$BE,$AD,BEADHARDWARE
    716  8000				  -	      ifconst	GAMEDESCRIPTIONSET
    717  8000				  -	      CLC
    718  8000				  -	      BCC	_SKIPDESCRIPTION
    719  8000				  -	      .byte	GAMEDESCRIPTION,0
    720  8000				  -_SKIPDESCRIPTION
    721  8000				  -	      endif		; GAMEDESCRIPTIONSET
    722  8000				  -	      jmp	($FFFC)
    723  8000				  -	      endif		; BEADHEADER
    724  8000					      endif		; ROM48K
    725  8000
    726  8000				  -	      ifconst	ROM52K
    727  8000				  -BANK_WAS_SET SET	1
    728  8000				  -	      ORG	$3000,0
    729  8000					      endif		; ROM52K
    730  8000
    731  8000				  -	      ifconst	bankswitchmode
    732  8000				  -	      ifconst	ROMAT4K
    733  8000				  -BANK_WAS_SET SET	1
    734  8000				  -	      ORG	$4000,0
    735  8000				  -	      RORG	$4000
    736  8000				  -	      else		; ROMAT4K
    737  8000				  -BANK_WAS_SET SET	1
    738  8000				  -	      ORG	$8000,0
    739  8000				  -	      RORG	$8000
    740  8000				  -	      endif
    741  8000					      endif
    742  8000
    743  8000				  -	      if	BANK_WAS_SET = 0
    744  8000				  -	      ORG	$8000,0	; default is 32K
    745  8000					      endif
    746  8000
    747  8000				   START_OF_ROM SET	.
    748  8000							;7800basic v0.24 Mar  2 2023 18:16:13
    749  8000				   SPACEOVERFLOW SET	0
    750  8000				   game
    751  8000				   .L00 		;;  set zoneheight 16
    752  8000
    753  8000				   .L01 		;;  displaymode 320A
    754  8000
    755  8000		       a9 43		      lda	#%01000011	;Enable DMA, mode=160x2/160x4
    756  8002		       85 3c		      sta	CTRL
    757  8004
    758  8004		       8d 07 21 	      sta	sCTRL
    759  8007
    760  8007				   .L02 		;;  set plotvalueonscreen on
    761  8007
    762  8007				   .L03 		;;  set romsize 32k
    763  8007
    764  8007				   .
    765  8007							;; 
    766  8007
    767  8007				   .L04 		;;  incgraphic font.png 160A 
    768  8007
    769  8007				   .L05 		;;  characterset font
    770  8007
    771  8007		       a9 e0		      lda	#>font
    772  8009		       8d 0b 21 	      sta	sCHARBASE
    773  800c
    774  800c		       85 34		      sta	CHARBASE
    775  800e		       a9 60		      lda	#(font_mode | %01100000)
    776  8010		       8d 06 21 	      sta	charactermode
    777  8013
    778  8013				   .L06 		;;  alphachars '0123456789abcdefghijklmnopqrstuvwxyz>`?!/.,-_()[]&AB '
    779  8013
    780  8013				   .
    781  8013							;; 
    782  8013
    783  8013				   .L07 		;;  rem sprites
    784  8013
    785  8013				   .L08 		;;  incgraphic images/player1.png 160A 0 1 3 2
    786  8013
    787  8013				   .L09 		;;  incgraphic images/player2.png 160A 0 1 3 2
    788  8013
    789  8013				   .L010		;;  incgraphic images/player3.png 160A 0 1 3 2
    790  8013
    791  8013				   .L011		;;  incgraphic images/player4.png 160A 0 1 3 2
    792  8013
    793  8013				   .
    794  8013							;; 
    795  8013
    796  8013				   .L012		;;  rem pallette 0 text
    797  8013
    798  8013				   .L013		;;  P0C1 = $0F
    799  8013
    800  8013		       a9 0f		      LDA	#$0F
    801  8015		       85 21		      STA	P0C1
    802  8017				   .L014		;;  P0C2 = $0C
    803  8017
    804  8017		       a9 0c		      LDA	#$0C
    805  8019		       85 22		      STA	P0C2
    806  801b				   .L015		;;  P0C3 = $0A
    807  801b
    808  801b		       a9 0a		      LDA	#$0A
    809  801d		       85 23		      STA	P0C3
    810  801f				   .
    811  801f							;; 
    812  801f
    813  801f				   .L016		;;  rem pallette 1 player
    814  801f
    815  801f				   .L017		;;  P1C1  =  $0D
    816  801f
    817  801f		       a9 0d		      LDA	#$0D
    818  8021		       85 25		      STA	P1C1
    819  8023				   .L018		;;  P1C2  =  $08
    820  8023
    821  8023		       a9 08		      LDA	#$08
    822  8025		       85 26		      STA	P1C2
    823  8027				   .L019		;;  P1C3  =  $33
    824  8027
    825  8027		       a9 33		      LDA	#$33
    826  8029		       85 27		      STA	P1C3
    827  802b				   .
    828  802b							;; 
    829  802b
    830  802b				   .L020		;;  BACKGRND = $00
    831  802b
    832  802b		       a9 00		      LDA	#$00
    833  802d		       85 20		      STA	BACKGRND
    834  802f				   .
    835  802f							;; 
    836  802f
    837  802f				   .L021		;;  dim bgColor  =  var1
    838  802f
    839  802f				   .L022		;;  dim wait  =  var2
    840  802f
    841  802f				   .L023		;;  dim lives	=  var3
    842  802f
    843  802f				   .L024		;;  dim score	=  var4
    844  802f
    845  802f				   .L025		;;  dim playerX  = var5
    846  802f
    847  802f				   .L026		;;  dim playerY  =  var6
    848  802f
    849  802f				   .L027		;;  dim playerAnimFrame  =  var7
    850  802f
    851  802f				   .
    852  802f							;; 
    853  802f
    854  802f				   .
    855  802f							;; 
    856  802f
    857  802f				   .L028		;;  bgColor  =  0
    858  802f
    859  802f		       a9 00		      LDA	#0
    860  8031		       8d 41 01 	      STA	bgColor
    861  8034				   .L029		;;  wait  =  0
    862  8034
    863  8034		       a9 00		      LDA	#0
    864  8036		       8d 42 01 	      STA	wait
    865  8039				   .L030		;;  lives  =  0
    866  8039
    867  8039		       a9 00		      LDA	#0
    868  803b		       8d 43 01 	      STA	lives
    869  803e				   .L031		;;  score  =  0
    870  803e
    871  803e		       a9 00		      LDA	#0
    872  8040		       8d 44 01 	      STA	score
    873  8043				   .L032		;;  playerY  =  0
    874  8043
    875  8043		       a9 00		      LDA	#0
    876  8045		       8d 46 01 	      STA	playerY
    877  8048				   .L033		;;  playerX  =  0
    878  8048
    879  8048		       a9 00		      LDA	#0
    880  804a		       8d 45 01 	      STA	playerX
    881  804d				   .L034		;;  playerAnimFrame  =  0
    882  804d
    883  804d		       a9 00		      LDA	#0
    884  804f		       8d 47 01 	      STA	playerAnimFrame
    885  8052				   .
    886  8052							;; 
    887  8052
    888  8052				   .
    889  8052							;; 
    890  8052
    891  8052				   ._titleLoop
    892  8052							;; _titleLoop
    893  8052
    894  8052				   .L035		;;  clearscreen
    895  8052
    896  8052		       20 7f f0 	      jsr	clearscreen
    897  8055				   .L036		;;  wait  =  wait  +  1
    898  8055
    899  8055		       ad 42 01 	      LDA	wait
    900  8058		       18		      CLC
    901  8059		       69 01		      ADC	#1
    902  805b		       8d 42 01 	      STA	wait
    903  805e				   .L037		;;  if wait  >  10 then wait  =  0  :	bgColor  =  bgColor  +	1
    904  805e
    905  805e		       a9 0a		      LDA	#10
    906  8060		       cd 42 01 	      CMP	wait
    907  8063		       b0 0e		      BCS	.skipL037
    908  8065				   .condpart0
    909  8065		       a9 00		      LDA	#0
    910  8067		       8d 42 01 	      STA	wait
    911  806a		       ad 41 01 	      LDA	bgColor
    912  806d		       18		      CLC
    913  806e		       69 01		      ADC	#1
    914  8070		       8d 41 01 	      STA	bgColor
    915  8073				   .skipL037
    916  8073				   .L038		;;  if bgColor  >  127 then bgColor  =  0
    917  8073
    918  8073		       a9 7f		      LDA	#127
    919  8075		       cd 41 01 	      CMP	bgColor
    920  8078		       b0 05		      BCS	.skipL038
    921  807a				   .condpart1
    922  807a		       a9 00		      LDA	#0
    923  807c		       8d 41 01 	      STA	bgColor
    924  807f				   .skipL038
    925  807f				   .L039		;;  BACKGRND  =  bgColor
    926  807f
    927  807f		       ad 41 01 	      LDA	bgColor
    928  8082		       85 20		      STA	BACKGRND
    929  8084				   .
    930  8084							;; 
    931  8084
    932  8084				   .L040		;;  plotchars 'u.a.p.' 0 68 5
    933  8084
    934  8084		       4c 8d 80 	      JMP	skipalphadata0
    935  8087				   alphadata0
    936  8087		       1e		      .byte.b	(<font + $1e)
    937  8088		       29		      .byte.b	(<font + $29)
    938  8089		       0a		      .byte.b	(<font + $0a)
    939  808a		       29		      .byte.b	(<font + $29)
    940  808b		       19		      .byte.b	(<font + $19)
    941  808c		       29		      .byte.b	(<font + $29)
    942  808d				   skipalphadata0
    943  808d		       a9 87		      lda	#<alphadata0
    944  808f		       85 42		      sta	temp1
    945  8091
    946  8091		       a9 80		      lda	#>alphadata0
    947  8093		       85 43		      sta	temp2
    948  8095
    949  8095		       a9 1a		      lda	#26	; width in two's complement
    950  8097		       09 00		      ora	#0	; palette left shifted 5 bits
    951  8099		       85 44		      sta	temp3
    952  809b		       a9 44		      lda	#68
    953  809d		       85 45		      sta	temp4
    954  809f
    955  809f		       a9 05		      lda	#5
    956  80a1
    957  80a1		       85 46		      sta	temp5
    958  80a3
    959  80a3		       20 7a f3 	      jsr	plotcharacters
    960  80a6				   .L041		;;  if joy0fire0  ||  joy0fire1 then goto _initGame
    961  80a6
    962  80a6		       2c 02 21 	      bit	sINPT1
    963  80a9		       50 03		      BVC	.skipL041
    964  80ab				   .condpart2
    965  80ab		       4c b3 80 	      jmp	.condpart3
    966  80ae				   .skipL041
    967  80ae		       2c 02 21 	      bit	sINPT1
    968  80b1		       10 03		      BPL	.skip0OR
    969  80b3				   .condpart3
    970  80b3		       4c bc 80 	      jmp	._initGame
    971  80b6
    972  80b6				   .skip0OR
    973  80b6				   .
    974  80b6							;; 
    975  80b6
    976  80b6				   .L042		;;  drawscreen
    977  80b6
    978  80b6		       20 b3 f0 	      jsr	drawscreen
    979  80b9				   .
    980  80b9							;; 
    981  80b9
    982  80b9				   .L043		;;  goto _titleLoop
    983  80b9
    984  80b9		       4c 52 80 	      jmp	._titleLoop
    985  80bc
    986  80bc				   .
    987  80bc							;; 
    988  80bc
    989  80bc				   ._initGame
    990  80bc							;; _initGame
    991  80bc
    992  80bc				   .L044		;;  lives  =  3
    993  80bc
    994  80bc		       a9 03		      LDA	#3
    995  80be		       8d 43 01 	      STA	lives
    996  80c1				   .L045		;;  score  =  0
    997  80c1
    998  80c1		       a9 00		      LDA	#0
    999  80c3		       8d 44 01 	      STA	score
   1000  80c6				   .L046		;;  BACKGRND = $00
   1001  80c6
   1002  80c6		       a9 00		      LDA	#$00
   1003  80c8		       85 20		      STA	BACKGRND
   1004  80ca				   .L047		;;  playerX  =  150
   1005  80ca
   1006  80ca		       a9 96		      LDA	#150
   1007  80cc		       8d 45 01 	      STA	playerX
   1008  80cf				   .L048		;;  playerY  =  90
   1009  80cf
   1010  80cf		       a9 5a		      LDA	#90
   1011  80d1		       8d 46 01 	      STA	playerY
   1012  80d4				   .L049		;;  playerAnimFrame  =  0
   1013  80d4
   1014  80d4		       a9 00		      LDA	#0
   1015  80d6		       8d 47 01 	      STA	playerAnimFrame
   1016  80d9				   .
   1017  80d9							;; 
   1018  80d9
   1019  80d9				   ._gameLoop
   1020  80d9							;; _gameLoop
   1021  80d9
   1022  80d9				   .
   1023  80d9							;; 
   1024  80d9
   1025  80d9				   .L050		;;  clearscreen
   1026  80d9
   1027  80d9		       20 7f f0 	      jsr	clearscreen
   1028  80dc				   .
   1029  80dc							;; 
   1030  80dc
   1031  80dc				   .L051		;;  rem plotchars 'game'  0 68 5
   1032  80dc
   1033  80dc				   .L052		;;  plotsprite player1 1 playerX playerY playerAnimFrame
   1034  80dc
   1035  80dc		       a9 35		      lda	#<player1
   1036  80de		       a0 04		      ldy	#player1_width
   1037  80e0		       18		      clc
   1038  80e1		       f0 06		      beq	plotspritewidthskip1
   1039  80e3				   plotspritewidthloop1
   1040  80e3		       6d 47 01 	      adc	playerAnimFrame
   1041  80e6		       88		      dey
   1042  80e7		       d0 fa		      bne	plotspritewidthloop1
   1043  80e9				   plotspritewidthskip1
   1044  80e9		       85 42		      sta	temp1
   1045  80eb
   1046  80eb		       a9 e0		      lda	#>player1
   1047  80ed		       85 43		      sta	temp2
   1048  80ef
   1049  80ef		       a9 3c		      lda	#(32|player1_width_twoscompliment)
   1050  80f1		       85 44		      sta	temp3
   1051  80f3
   1052  80f3		       ad 45 01 	      lda	playerX
   1053  80f6		       85 45		      sta	temp4
   1054  80f8
   1055  80f8		       ad 46 01 	      lda	playerY
   1056  80fb		       85 46		      sta	temp5
   1057  80fd
   1058  80fd		       a9 40		      lda	#(player1_mode|%01000000)
   1059  80ff		       85 47		      sta	temp6
   1060  8101
   1061  8101		       20 c9 f2 	      jsr	plotsprite
   1062  8104				   .L053		;;  playerAnimFrame  =  playerAnimFrame  +  1
   1063  8104
   1064  8104		       ad 47 01 	      LDA	playerAnimFrame
   1065  8107		       18		      CLC
   1066  8108		       69 01		      ADC	#1
   1067  810a		       8d 47 01 	      STA	playerAnimFrame
   1068  810d				   .L054		;;  if playerAnimFrame  >  3 then playerAnimFrame  =  0
   1069  810d
   1070  810d		       a9 03		      LDA	#3
   1071  810f		       cd 47 01 	      CMP	playerAnimFrame
   1072  8112		       b0 05		      BCS	.skipL054
   1073  8114				   .condpart4
   1074  8114		       a9 00		      LDA	#0
   1075  8116		       8d 47 01 	      STA	playerAnimFrame
   1076  8119				   .skipL054
   1077  8119				   .
   1078  8119							;; 
   1079  8119
   1080  8119				   .L055		;;  drawscreen
   1081  8119
   1082  8119		       20 b3 f0 	      jsr	drawscreen
   1083  811c				   .
   1084  811c							;; 
   1085  811c
   1086  811c				   .L056		;;  goto _gameLoop
   1087  811c		       4c d9 80 	      jmp	._gameLoop
   1088  811c				   DMAHOLEEND0 SET	.
   1089  811f				   gameend
   1090  811f				   DMAHOLEEND0 SET	.
   24289 bytes of ROM space left in the main area.
   1091  811f					      echo	" ",[($E000 - gameend)]d , "bytes of ROM space left in the main area."
   1092  811f				  -	      if	($E000 - gameend) < 0
   1093  811f				  -SPACEOVERFLOW SET	(SPACEOVERFLOW+1)
   1094  811f					      endif
   1095  811f				  -	      if	START_OF_ROM = .	; avoid dasm empty start-rom truncation.
   1096  811f				  -	      .byte	0
   1097  811f					      endif
   1098  811f				   START_OF_ROM SET	0	; scuttle so we always fail subsequent banks
   1099  811f
   1100  e000					      ORG	$E000,0	; *************
   1101  e000
   1102  e000		       e0 00	   font       =	$E000
   1103  e000
   1104  e000				   font
   1105  e000		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000000000000000000000000000
   1106  e020		       00 00 00 00*	      HEX	000000000000000000000000000000000000000000
   1107  e020		       e0 35	   player1    =	$E035
   1108  e035
   1109  e035				   player1
   1110  e035		       00 00 00 00	      HEX	00000000
   1111  e035		       e0 39	   player2    =	$E039
   1112  e039
   1113  e039				   player2
   1114  e039		       00 00 00 00	      HEX	00000000
   1115  e039		       e0 3d	   player3    =	$E03D
   1116  e03d
   1117  e03d				   player3
   1118  e03d		       00 00 00 00	      HEX	00000000
   1119  e03d		       e0 41	   player4    =	$E041
   1120  e041
   1121  e041				   player4
   1122  e041		       00 00 00 00	      HEX	00000000
   1123  e045
   1124  e100					      ORG	$E100,0	; *************
   1125  e100
   1126  e100							;font
   1127  e100		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000000000000000000000000000
   1128  e120		       00 00 00 00*	      HEX	000000000000000000000000000000000000000000
   1129  e135							;player1
   1130  e135		       00 00 00 00	      HEX	00000000
   1131  e139							;player2
   1132  e139		       00 00 00 00	      HEX	00000000
   1133  e13d							;player3
   1134  e13d		       00 00 00 00	      HEX	00000000
   1135  e141							;player4
   1136  e141		       00 00 00 00	      HEX	00000000
   1137  e145
   1138  e200					      ORG	$E200,0	; *************
   1139  e200
   1140  e200							;font
   1141  e200		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000000000000000000000000000
   1142  e220		       00 00 00 00*	      HEX	000000000000000000000000000000000000000000
   1143  e235							;player1
   1144  e235		       00 00 00 00	      HEX	00000000
   1145  e239							;player2
   1146  e239		       00 00 00 00	      HEX	00000000
   1147  e23d							;player3
   1148  e23d		       00 00 00 00	      HEX	00000000
   1149  e241							;player4
   1150  e241		       00 00 00 00	      HEX	00000000
   1151  e245
   1152  e300					      ORG	$E300,0	; *************
   1153  e300
   1154  e300							;font
   1155  e300		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000000000000000000000000000
   1156  e320		       00 00 00 00*	      HEX	000000000000000000000000000000000000000000
   1157  e335							;player1
   1158  e335		       00 00 00 00	      HEX	00000000
   1159  e339							;player2
   1160  e339		       00 00 00 00	      HEX	00000000
   1161  e33d							;player3
   1162  e33d		       00 00 00 00	      HEX	00000000
   1163  e341							;player4
   1164  e341		       00 00 00 00	      HEX	00000000
   1165  e345
   1166  e400					      ORG	$E400,0	; *************
   1167  e400
   1168  e400							;font
   1169  e400		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000000000000000000000000000
   1170  e420		       00 00 00 00*	      HEX	000000000000000000000000000000000000000000
   1171  e435							;player1
   1172  e435		       00 00 00 00	      HEX	00000000
   1173  e439							;player2
   1174  e439		       00 00 00 00	      HEX	00000000
   1175  e43d							;player3
   1176  e43d		       00 00 00 00	      HEX	00000000
   1177  e441							;player4
   1178  e441		       00 00 00 00	      HEX	00000000
   1179  e445
   1180  e500					      ORG	$E500,0	; *************
   1181  e500
   1182  e500							;font
   1183  e500		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000000000000000000000000000
   1184  e520		       00 00 00 00*	      HEX	000000000000000000000000000000000000000000
   1185  e535							;player1
   1186  e535		       00 00 00 00	      HEX	00000000
   1187  e539							;player2
   1188  e539		       00 00 00 00	      HEX	00000000
   1189  e53d							;player3
   1190  e53d		       00 00 00 00	      HEX	00000000
   1191  e541							;player4
   1192  e541		       00 00 00 00	      HEX	00000000
   1193  e545
   1194  e600					      ORG	$E600,0	; *************
   1195  e600
   1196  e600							;font
   1197  e600		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000000000000000000000000000
   1198  e620		       00 00 00 00*	      HEX	000000000000000000000000000000000000000000
   1199  e635							;player1
   1200  e635		       00 00 00 00	      HEX	00000000
   1201  e639							;player2
   1202  e639		       00 00 00 00	      HEX	00000000
   1203  e63d							;player3
   1204  e63d		       00 00 00 00	      HEX	00000000
   1205  e641							;player4
   1206  e641		       00 00 00 00	      HEX	00000000
   1207  e645
   1208  e700					      ORG	$E700,0	; *************
   1209  e700
   1210  e700							;font
   1211  e700		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000000000000000000000000000
   1212  e720		       00 00 00 00*	      HEX	000000000000000000000000000000000000000000
   1213  e735							;player1
   1214  e735		       0f 57 d4 00	      HEX	0f57d400
   1215  e739							;player2
   1216  e739		       07 d5 f4 00	      HEX	07d5f400
   1217  e73d							;player3
   1218  e73d		       05 f5 7c 00	      HEX	05f57c00
   1219  e741							;player4
   1220  e741		       0d 7d 5c 00	      HEX	0d7d5c00
   1221  e745
   1222  e800					      ORG	$E800,0	; *************
   1223  e800
   1224  e800							;font
   1225  e800		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000000000000000000000000000
   1226  e820		       00 00 00 00*	      HEX	000000000000000000004000540000000000000000
   1227  e835							;player1
   1228  e835		       15 55 55 00	      HEX	15555500
   1229  e839							;player2
   1230  e839		       15 55 55 00	      HEX	15555500
   1231  e83d							;player3
   1232  e83d		       15 55 55 00	      HEX	15555500
   1233  e841							;player4
   1234  e841		       15 55 55 00	      HEX	15555500
   1235  e845
   1236  e900					      ORG	$E900,0	; *************
   1237  e900
   1238  e900							;font
   1239  e900		       54 54 54 54*	      HEX	5454545404545410545444505450544054445454445444445440044454105410
   1240  e920		       44 44 10 54*	      HEX	444410544000101040101000000440545414154000
   1241  e935							;player1
   1242  e935		       55 55 55 40	      HEX	55555540
   1243  e939							;player2
   1244  e939		       55 55 55 40	      HEX	55555540
   1245  e93d							;player3
   1246  e93d		       55 55 55 40	      HEX	55555540
   1247  e941							;player4
   1248  e941		       55 55 55 40	      HEX	55555540
   1249  e945
   1250  ea00					      ORG	$EA00,0	; *************
   1251  ea00
   1252  ea00							;font
   1253  ea00		       44 10 40 04*	      HEX	4410400404444410440444444044404044441044444044444440504404104454
   1254  ea20		       54 44 10 40*	      HEX	544410405000000040000000001010400441401000
   1255  ea35							;player1
   1256  ea35		       00 00 00 00	      HEX	00000000
   1257  ea39							;player2
   1258  ea39		       00 00 00 00	      HEX	00000000
   1259  ea3d							;player3
   1260  ea3d		       a8 2a 0a 80	      HEX	a82a0a80
   1261  ea41							;player4
   1262  ea41		       00 00 00 00	      HEX	00000000
   1263  ea45
   1264  eb00					      ORG	$EB00,0	; *************
   1265  eb00
   1266  eb00							;font
   1267  eb00		       44 10 40 04*	      HEX	4410400404044410440454444044404044441004504044444454445004104444
   1268  eb20		       54 54 10 40*	      HEX	545410405400101010000000004004400441451000
   1269  eb35							;player1
   1270  eb35		       ff ff ff c0	      HEX	ffffffc0
   1271  eb39							;player2
   1272  eb39		       ab ea fa 80	      HEX	abeafa80
   1273  eb3d							;player3
   1274  eb3d		       ff ff ff c0	      HEX	ffffffc0
   1275  eb41							;player4
   1276  eb41		       ff ff ff c0	      HEX	ffffffc0
   1277  eb45
   1278  ec00					      ORG	$EC00,0	; *************
   1279  ec00
   1280  ec00							;font
   1281  ec00		       44 10 54 14*	      HEX	4410541454045410545444504044505044541004504054444444444454104444
   1282  ec20		       44 10 10 50*	      HEX	441010505500101010000054004004400414441000
   1283  ec35							;player1
   1284  ec35		       a8 2a 0a 80	      HEX	a82a0a80
   1285  ec39							;player2
   1286  ec39		       00 00 00 00	      HEX	00000000
   1287  ec3d							;player3
   1288  ec3d		       00 00 00 00	      HEX	00000000
   1289  ec41							;player4
   1290  ec41		       00 00 00 00	      HEX	00000000
   1291  ec45
   1292  ed00					      ORG	$ED00,0	; *************
   1293  ed00
   1294  ed00							;font
   1295  ed00		       44 10 04 04*	      HEX	4410040444544004444444444044404040441004444054444444444440104444
   1296  ed20		       44 54 44 14*	      HEX	445444145400041010000000004004400444451000
   1297  ed35							;player1
   1298  ed35		       55 55 55 40	      HEX	55555540
   1299  ed39							;player2
   1300  ed39		       55 55 55 40	      HEX	55555540
   1301  ed3d							;player3
   1302  ed3d		       55 55 55 40	      HEX	55555540
   1303  ed41							;player4
   1304  ed41		       55 55 55 40	      HEX	55555540
   1305  ed45
   1306  ee00					      ORG	$EE00,0	; *************
   1307  ee00
   1308  ee00							;font
   1309  ee00		       44 50 04 04*	      HEX	4450040444404044444444444044404040441004444054444444444440104444
   1310  ee20		       44 44 44 04*	      HEX	444444045044441004000000001010400444401000
   1311  ee35							;player1
   1312  ee35		       15 55 55 00	      HEX	15555500
   1313  ee39							;player2
   1314  ee39		       15 55 55 00	      HEX	15555500
   1315  ee3d							;player3
   1316  ee3d		       15 55 55 00	      HEX	15555500
   1317  ee41							;player4
   1318  ee41		       15 55 55 00	      HEX	15555500
   1319  ee45
   1320  ef00					      ORG	$EF00,0	; *************
   1321  ef00
   1322  ef00							;font
   1323  ef00		       54 10 54 54*	      HEX	5410545444545454545454505450545454445404444044545454545454544444
   1324  ef20		       44 44 44 54*	      HEX	444444544044541004000000000440545410154000
   1325  ef35							;player1
   1326  ef35		       05 f5 7c 00	      HEX	05f57c00
   1327  ef39							;player2
   1328  ef39		       07 d5 f4 00	      HEX	07d5f400
   1329  ef3d							;player3
   1330  ef3d		       0f 57 d4 00	      HEX	0f57d400
   1331  ef41							;player4
   1332  ef41		       0d 5f 5c 00	      HEX	0d5f5c00
   1333  ef45				  -	      if	SPACEOVERFLOW > 0
   1334  ef45				  -	      echo	""
   1335  ef45				  -	      echo	"######## ERROR: space overflow detected in",[SPACEOVERFLOW]d,"areas."
   1336  ef45				  -	      echo	"######## look above for areas with negative ROM space left."
   1337  ef45				  -	      echo	"######## Aborting assembly."
   1338  ef45				  -	      ERR
   1339  ef45					      endif
   1340  ef45
   1341  ef45
   1342  ef45							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1343  ef45
   1344  ef45					      ifnconst	bankswitchmode
   1345  ef45					      if	( * < $f000 )
   1346  f000					      ORG	$F000
   1347  f000					      endif
   1348  f000				  -	      else
   1349  f000				  -	      ifconst	ROM128K
   1350  f000				  -	      if	( * < $f000 )
   1351  f000				  -	      ORG	$27000
   1352  f000				  -	      RORG	$F000
   1353  f000				  -	      endif
   1354  f000				  -	      endif
   1355  f000				  -	      ifconst	ROM144K
   1356  f000				  -	      if	( * < $f000 )
   1357  f000				  -	      ORG	$27000
   1358  f000				  -	      RORG	$F000
   1359  f000				  -	      endif
   1360  f000				  -	      endif
   1361  f000				  -	      ifconst	ROM256K
   1362  f000				  -	      if	( * < $f000 )
   1363  f000				  -	      ORG	$47000
   1364  f000				  -	      RORG	$F000
   1365  f000				  -	      endif
   1366  f000				  -	      endif
   1367  f000				  -	      ifconst	ROM272K
   1368  f000				  -	      if	( * < $f000 )
   1369  f000				  -	      ORG	$47000
   1370  f000				  -	      RORG	$F000
   1371  f000				  -	      endif
   1372  f000				  -	      endif
   1373  f000				  -	      ifconst	ROM512K
   1374  f000				  -	      if	( * < $f000 )
   1375  f000				  -	      ORG	$87000
   1376  f000				  -	      RORG	$F000
   1377  f000				  -	      endif
   1378  f000				  -	      endif
   1379  f000				  -	      ifconst	ROM528K
   1380  f000				  -	      if	( * < $f000 )
   1381  f000				  -	      ORG	$87000
   1382  f000				  -	      RORG	$F000
   1383  f000				  -	      endif
   1384  f000				  -	      endif
   1385  f000					      endif
   1386  f000
   1387  f000							; all of these "modules" have conditional clauses in them, so even though
   1388  f000							; they're always included here, they don't take up rom unless the user
   1389  f000							; explicitly enables support for the feature.
   1390  f000
   1391  f000					      ifnconst	included.rmtplayer.asm
------- FILE rmtplayer.asm LEVEL 2 PASS 3
      0  f000					      include	rmtplayer.asm	; requires page alignment, so go first
      1  f000				  -	      ifconst	RMT
      2  f000				  -
      3  f000				  -rmtmodulestart
      4  f000				  -
      5  f000				  -			;*
      6  f000				  -			;* Raster Music Tracker, RMT Atari routine version 1.20030223
      7  f000				  -			;* (c) Radek Sterba, Raster/C.P.U., 2002 - 2003
      8  f000				  -			;* http://raster.atari.org
      9  f000				  -			;*
     10  f000				  -			;* Some small changes to allow using this code with DASM cross assembler and
     11  f000				  -			;* to compile for cartridge based systems, like the Atari 5200 or Atari 7800,
     12  f000				  -			;* by Eckhard Stolberg ( http://home.arcor.de/estolberg/ ).
     13  f000				  -			;*
     14  f000				  -			;* Warnings:
     15  f000				  -			;*
     16  f000				  -			;* 1. RMT player routine needs 19 itself reserved bytes in zero page (no accessed
     17  f000				  -			;*    from any other routines) as well as cca 1KB of memory before the "PLAYER"
     18  f000				  -			;*    address for frequency tables and functionary variables. It's:
     19  f000				  -			;*	  a) from PLAYER-$400 to PLAYER for stereo RMTplayer
     20  f000				  -			;*    b) from PLAYER-$380 to PLAYER for mono RMTplayer
     21  f000				  -			;*
     22  f000				  -			;* note: This has been changed for 5200 & 7800 compatibility. Now PLAYER points
     23  f000				  -			;*	  to the start of the frequency tables. The player routines follows after
     24  f000				  -			;*	  that. The variables are now independent and can be located with
     25  f000				  -			;*	  PLAYER_VAR_RAM and PLAYER_ZP_RAM (see below):
     26  f000				  -			;*
     27  f000				  -			;* 2. RMT player routine MUST (!!!) be compiled from the begin of the memory page.
     28  f000				  -			;*    i.e. "PLAYER" address can be $..00 only!
     29  f000				  -			;*
     30  f000				  -			;* 3. Because of RMTplayer provides a lot of effects, it spent a lot of CPU time.
     31  f000				  -			;*
     32  f000				  -			;*
     33  f000				  -			;* Define the following equates here or in your main code file.
     34  f000				  -			;* Set the values according to the system you compile for.
     35  f000				  -			;*
     36  f000				  -
     37  f000				  -POKEY_BASE equ	pokeyaddress
     38  f000				  -PLAYER_ZP_RAM equ	songchannel1layer1lo	; player routine needs 19 bytes of zero page RAM
     39  f000				  -PLAYER_VAR_RAM equ	RMTRAM	;variables in main RAM - 173 bytes mono - 337 stereo
     40  f000				  -ROM_BASED  equ	1	;using a ROM based system - no self modifying code
     41  f000				  -STEREO8T   equ	0	;0 => compile RMTplayer for mono 4 tracks
     42  f000				  -			;				    ;1 => compile RMTplayer for stereo 8 tracks
     43  f000				  -
     44  f000				  -rmt_ispeed equ	PLAYER_ZP_RAM+19
     45  f000				  -rmt_intcount equ	PLAYER_ZP_RAM+20
     46  f000				  -
     47  f000				  -			;*
     48  f000				  -
     49  f000				  -	      IF	STEREO8T
     50  f000				  -TRACKS     equ	8
     51  f000				  -	      ELSE
     52  f000				  -TRACKS     equ	4
     53  f000				  -	      EIF
     54  f000				  -
     55  f000				  -			;*
     56  f000				  -			;* RMT FEATures definitions
     57  f000				  -			;* For optimizations of RMT player routine to concrete RMT modul only!
     58  f000				  -			;* --------BEGIN--------
     59  f000				  -FEAT_COMMAND1 equ	1	;* cca 8 bytes
     60  f000				  -FEAT_COMMAND2 equ	1	;* cca 20 bytes (+save 1 address in zero page) and quicker whole RMT routine
     61  f000				  -FEAT_COMMAND3 equ	1	;* cca 12 bytes
     62  f000				  -FEAT_COMMAND4 equ	1	;* cca 15 bytes
     63  f000				  -FEAT_COMMAND5 equ	1	;* cca 67 bytes
     64  f000				  -FEAT_COMMAND6 equ	1	;* cca 15 bytes
     65  f000				  -			;* COMMAND7 SETNOTE (i.e. command 7 with parameter != $80)
     66  f000				  -FEAT_COMMAND7SETNOTE equ	1	;* cca 12 bytes
     67  f000				  -			;* COMMAND7 VOLUMEONLY (i.e. command 7 with parameter == $80)
     68  f000				  -FEAT_COMMAND7VOLUMEONLY equ	1	;* cca 74 bytes
     69  f000				  -			;* PORTAMENTO
     70  f000				  -FEAT_PORTAMENTO equ	1	;* cca 138 bytes and quicker whole RMT routine
     71  f000				  -			;* FILTER
     72  f000				  -FEAT_FILTER equ	1	;* cca 179 bytes and quicker whole RMT routine
     73  f000				  -FEAT_FILTERG0L equ	1	;* (cca 38 bytes for each)
     74  f000				  -FEAT_FILTERG1L equ	1
     75  f000				  -FEAT_FILTERG0R equ	1
     76  f000				  -FEAT_FILTERG1R equ	1
     77  f000				  -			;* BASS16B (i.e. distortion value 6)
     78  f000				  -FEAT_BASS16 equ	1	;* cca 194 bytes +128bytes freq table and quicker whole RMT routine
     79  f000				  -FEAT_BASS16G1L equ	1	;* (cca 47 bytes for each)
     80  f000				  -FEAT_BASS16G3L equ	1
     81  f000				  -FEAT_BASS16G1R equ	1
     82  f000				  -FEAT_BASS16G3R equ	1
     83  f000				  -			;* VOLUME ONLY for particular generators
     84  f000				  -FEAT_VOLUMEONLYG0L equ	1	;* (cca 7 bytes for each)
     85  f000				  -FEAT_VOLUMEONLYG2L equ	1
     86  f000				  -FEAT_VOLUMEONLYG3L equ	1
     87  f000				  -FEAT_VOLUMEONLYG0R equ	1
     88  f000				  -FEAT_VOLUMEONLYG2R equ	1
     89  f000				  -FEAT_VOLUMEONLYG3R equ	1
     90  f000				  -			;* TABLE TYPE (i.e. TABLETYPE=1)
     91  f000				  -FEAT_TABLETYPE equ	1	;* cca 53 bytes and quicker whole RMT routine
     92  f000				  -			;* TABLE MODE (i.e. TABLEMODE=1)
     93  f000				  -FEAT_TABLEMODE equ	1	;* cca 16 bytes and quicker whole RMT routine
     94  f000				  -			;* AUDCTLMANUALSET (i.e. any MANUAL AUDCTL setting to nonzero value)
     95  f000				  -FEAT_AUDCTLMANUALSET equ	1	;* cca 27 bytes and quicker whole RMT routine
     96  f000				  -			;* --------END--------
     97  f000				  -			;*
     98  f000				  -			;*
     99  f000				  -			;* RMT ZeroPage addresses
    100  f000				  -
    101  f000				  -MEMLOC     SET	PLAYER_ZP_RAM
    102  f000				  -p_tis      =	MEMLOC
    103  f000				  -p_instrstable =	MEMLOC
    104  f000				  -MEMLOC     SET	(MEMLOC+2)
    105  f000				  -p_trackslbstable =	MEMLOC
    106  f000				  -MEMLOC     SET	(MEMLOC+2)
    107  f000				  -p_trackshbstable =	MEMLOC
    108  f000				  -MEMLOC     SET	(MEMLOC+2)
    109  f000				  -p_song     =	MEMLOC
    110  f000				  -MEMLOC     SET	(MEMLOC+2)
    111  f000				  -
    112  f000				  -_ns	      =	MEMLOC
    113  f000				  -MEMLOC     SET	(MEMLOC+2)
    114  f000				  -_nr	      =	MEMLOC
    115  f000				  -MEMLOC     SET	(MEMLOC+2)
    116  f000				  -_nt	      =	MEMLOC
    117  f000				  -MEMLOC     SET	(MEMLOC+2)
    118  f000				  -
    119  f000				  -rmtreg1    =	MEMLOC
    120  f000				  -MEMLOC     SET	(MEMLOC+1)
    121  f000				  -rmtreg2    =	MEMLOC
    122  f000				  -MEMLOC     SET	(MEMLOC+1)
    123  f000				  -rmtreg3    =	MEMLOC
    124  f000				  -MEMLOC     SET	(MEMLOC+1)
    125  f000				  -_tmp       =	MEMLOC
    126  f000				  -MEMLOC     SET	(MEMLOC+1)
    127  f000				  -	      IF	FEAT_COMMAND2
    128  f000				  -frqaddcmd2 =	MEMLOC
    129  f000				  -MEMLOC     SET	(MEMLOC+1)
    130  f000				  -	      EIF
    131  f000				  -
    132  f000				  -			;*
    133  f000				  -			;* Variables in main RAM used by player routine.
    134  f000				  -			;* 337 bytes for stereo - 173 bytes for mono
    135  f000				  -			;*
    136  f000				  -
    137  f000				  -MEMLOC     SET	PLAYER_VAR_RAM
    138  f000				  -track_variables =	MEMLOC
    139  f000				  -
    140  f000				  -trackn_db  =	MEMLOC
    141  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    142  f000				  -trackn_hb  =	MEMLOC
    143  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    144  f000				  -trackn_idx =	MEMLOC
    145  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    146  f000				  -trackn_pause =	MEMLOC
    147  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    148  f000				  -trackn_note =	MEMLOC
    149  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    150  f000				  -trackn_volume =	MEMLOC
    151  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    152  f000				  -trackn_distor =	MEMLOC
    153  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    154  f000				  -trackn_shiftfrq =	MEMLOC
    155  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    156  f000				  -
    157  f000				  -	      IF	FEAT_PORTAMENTO
    158  f000				  -trackn_portafrqc =	MEMLOC
    159  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    160  f000				  -trackn_portafrqa =	MEMLOC
    161  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    162  f000				  -trackn_portaspeed =	MEMLOC
    163  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    164  f000				  -trackn_portaspeeda =	MEMLOC
    165  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    166  f000				  -trackn_portadepth =	MEMLOC
    167  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    168  f000				  -	      EIF
    169  f000				  -
    170  f000				  -trackn_instrx2 =	MEMLOC
    171  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    172  f000				  -trackn_instrdb =	MEMLOC
    173  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    174  f000				  -trackn_instrhb =	MEMLOC
    175  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    176  f000				  -trackn_instridx =	MEMLOC
    177  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    178  f000				  -trackn_instrlen =	MEMLOC
    179  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    180  f000				  -trackn_instrlop =	MEMLOC
    181  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    182  f000				  -trackn_instrreachend =	MEMLOC
    183  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    184  f000				  -trackn_volumeslidedepth =	MEMLOC
    185  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    186  f000				  -trackn_volumeslidevalue =	MEMLOC
    187  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    188  f000				  -trackn_volumemin =	MEMLOC
    189  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    190  f000				  -trackn_effdelay =	MEMLOC
    191  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    192  f000				  -trackn_effvibratoa =	MEMLOC
    193  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    194  f000				  -trackn_effvibratobeg =	MEMLOC
    195  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    196  f000				  -trackn_effvibratoend =	MEMLOC
    197  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    198  f000				  -trackn_effshift =	MEMLOC
    199  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    200  f000				  -trackn_tabletypespeed =	MEMLOC
    201  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    202  f000				  -
    203  f000				  -	      IF	FEAT_TABLEMODE
    204  f000				  -trackn_tablemode =	MEMLOC
    205  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    206  f000				  -	      EIF
    207  f000				  -
    208  f000				  -trackn_tablenote =	MEMLOC
    209  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    210  f000				  -
    211  f000				  -trackn_tablea =	MEMLOC
    212  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    213  f000				  -trackn_tableend =	MEMLOC
    214  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    215  f000				  -trackn_tablelop =	MEMLOC
    216  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    217  f000				  -trackn_tablespeeda =	MEMLOC
    218  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    219  f000				  -trackn_command =	MEMLOC
    220  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    221  f000				  -
    222  f000				  -	      IF	FEAT_BASS16
    223  f000				  -trackn_outnote =	MEMLOC
    224  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    225  f000				  -	      EIF
    226  f000				  -	      IF	FEAT_FILTER
    227  f000				  -trackn_filter =	MEMLOC
    228  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    229  f000				  -	      EIF
    230  f000				  -
    231  f000				  -trackn_audf =	MEMLOC
    232  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    233  f000				  -trackn_audc =	MEMLOC
    234  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    235  f000				  -
    236  f000				  -	      IF	FEAT_AUDCTLMANUALSET
    237  f000				  -trackn_audctl =	MEMLOC
    238  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    239  f000				  -	      EIF
    240  f000				  -
    241  f000				  -v_audctl   =	MEMLOC
    242  f000				  -MEMLOC     SET	(MEMLOC+1)
    243  f000				  -v_audctl2  =	MEMLOC
    244  f000				  -MEMLOC     SET	(MEMLOC+1)
    245  f000				  -v_speed    =	MEMLOC
    246  f000				  -MEMLOC     SET	(MEMLOC+1)
    247  f000				  -v_aspeed   =	MEMLOC
    248  f000				  -MEMLOC     SET	(MEMLOC+1)
    249  f000				  -v_bspeed   =	MEMLOC
    250  f000				  -MEMLOC     SET	(MEMLOC+1)
    251  f000				  -v_instrspeed =	MEMLOC
    252  f000				  -MEMLOC     SET	(MEMLOC+1)
    253  f000				  -v_ainstrspeed =	MEMLOC
    254  f000				  -MEMLOC     SET	(MEMLOC+1)
    255  f000				  -v_maxtracklen =	MEMLOC
    256  f000				  -MEMLOC     SET	(MEMLOC+1)
    257  f000				  -v_abeat    =	MEMLOC
    258  f000				  -MEMLOC     SET	(MEMLOC+1)
    259  f000				  -
    260  f000				  -track_endvariables =	MEMLOC
    261  f000				  -
    262  f000				  -			;*
    263  f000				  -			;* Data tables used by player routine.
    264  f000				  -			;*
    265  f000				  -	      ALIGN	256
    266  f000				  -PLAYER     =	.
    267  f000				  -
    268  f000				  -volumetab
    269  f000				  -	      dc.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    270  f000				  -	      dc.b	$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$01,$01,$01
    271  f000				  -	      dc.b	$00,$00,$00,$00,$01,$01,$01,$01,$01,$01,$01,$01,$02,$02,$02,$02
    272  f000				  -	      dc.b	$00,$00,$00,$01,$01,$01,$01,$01,$02,$02,$02,$02,$02,$03,$03,$03
    273  f000				  -	      dc.b	$00,$00,$01,$01,$01,$01,$02,$02,$02,$02,$03,$03,$03,$03,$04,$04
    274  f000				  -	      dc.b	$00,$00,$01,$01,$01,$02,$02,$02,$03,$03,$03,$04,$04,$04,$05,$05
    275  f000				  -	      dc.b	$00,$00,$01,$01,$02,$02,$02,$03,$03,$04,$04,$04,$05,$05,$06,$06
    276  f000				  -	      dc.b	$00,$00,$01,$01,$02,$02,$03,$03,$04,$04,$05,$05,$06,$06,$07,$07
    277  f000				  -	      dc.b	$00,$01,$01,$02,$02,$03,$03,$04,$04,$05,$05,$06,$06,$07,$07,$08
    278  f000				  -	      dc.b	$00,$01,$01,$02,$02,$03,$04,$04,$05,$05,$06,$07,$07,$08,$08,$09
    279  f000				  -	      dc.b	$00,$01,$01,$02,$03,$03,$04,$05,$05,$06,$07,$07,$08,$09,$09,$0A
    280  f000				  -	      dc.b	$00,$01,$01,$02,$03,$04,$04,$05,$06,$07,$07,$08,$09,$0A,$0A,$0B
    281  f000				  -	      dc.b	$00,$01,$02,$02,$03,$04,$05,$06,$06,$07,$08,$09,$0A,$0A,$0B,$0C
    282  f000				  -	      dc.b	$00,$01,$02,$03,$03,$04,$05,$06,$07,$08,$09,$0A,$0A,$0B,$0C,$0D
    283  f000				  -	      dc.b	$00,$01,$02,$03,$04,$05,$06,$07,$07,$08,$09,$0A,$0B,$0C,$0D,$0E
    284  f000				  -	      dc.b	$00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0A,$0B,$0C,$0D,$0E,$0F
    285  f000				  -
    286  f000				  -frqtab
    287  f000				  -			;	ERT [<frqtab]!=0	;* frqtab must begin at the memory page bound! (i.e. $..00 address)
    288  f000				  -frqtabbass1
    289  f000				  -	      dc.b	$BF,$B6,$AA,$A1,$98,$8F,$89,$80,$F2,$E6,$DA,$CE,$BF,$B6,$AA,$A1
    290  f000				  -	      dc.b	$98,$8F,$89,$80,$7A,$71,$6B,$65,$5F,$5C,$56,$50,$4D,$47,$44,$3E
    291  f000				  -	      dc.b	$3C,$38,$35,$32,$2F,$2D,$2A,$28,$25,$23,$21,$1F,$1D,$1C,$1A,$18
    292  f000				  -	      dc.b	$17,$16,$14,$13,$12,$11,$10,$0F,$0E,$0D,$0C,$0B,$0A,$09,$08,$07
    293  f000				  -frqtabbass2
    294  f000				  -	      dc.b	$FF,$F1,$E4,$D8,$CA,$C0,$B5,$AB,$A2,$99,$8E,$87,$7F,$79,$73,$70
    295  f000				  -	      dc.b	$66,$61,$5A,$55,$52,$4B,$48,$43,$3F,$3C,$39,$37,$33,$30,$2D,$2A
    296  f000				  -	      dc.b	$28,$25,$24,$21,$1F,$1E,$1C,$1B,$19,$17,$16,$15,$13,$12,$11,$10
    297  f000				  -	      dc.b	$0F,$0E,$0D,$0C,$0B,$0A,$09,$08,$07,$06,$05,$04,$03,$02,$01,$00
    298  f000				  -frqtabpure
    299  f000				  -	      dc.b	$F3,$E6,$D9,$CC,$C1,$B5,$AD,$A2,$99,$90,$88,$80,$79,$72,$6C,$66
    300  f000				  -	      dc.b	$60,$5B,$55,$51,$4C,$48,$44,$40,$3C,$39,$35,$32,$2F,$2D,$2A,$28
    301  f000				  -	      dc.b	$25,$23,$21,$1F,$1D,$1C,$1A,$18,$17,$16,$14,$13,$12,$11,$10,$0F
    302  f000				  -	      dc.b	$0E,$0D,$0C,$0B,$0A,$09,$08,$07,$06,$05,$04,$03,$02,$01,$00,$00
    303  f000				  -	      IF	FEAT_BASS16
    304  f000				  -frqtabbasshi
    305  f000				  -	      dc.b	$0D,$0D,$0C,$0B,$0B,$0A,$0A,$09,$08,$08,$07,$07,$07,$06,$06,$05
    306  f000				  -	      dc.b	$05,$05,$04,$04,$04,$04,$03,$03,$03,$03,$03,$02,$02,$02,$02,$02
    307  f000				  -	      dc.b	$02,$02,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00
    308  f000				  -	      dc.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    309  f000				  -	      EIF
    310  f000				  -
    311  f000				  -	      IF	FEAT_BASS16
    312  f000				  -frqtabbasslo
    313  f000				  -	      dc.b	$F2,$33,$96,$E2,$38,$8C,$00,$6A,$E8,$6A,$EF,$80,$08,$AE,$46,$E6
    314  f000				  -	      dc.b	$95,$41,$F6,$B0,$6E,$30,$F6,$BB,$84,$52,$22,$F4,$C8,$A0,$7A,$55
    315  f000				  -	      dc.b	$34,$14,$F5,$D8,$BD,$A4,$8D,$77,$60,$4E,$38,$27,$15,$06,$F7,$E8
    316  f000				  -	      dc.b	$DB,$CF,$C3,$B8,$AC,$A2,$9A,$90,$88,$7F,$78,$70,$6A,$64,$5E,$00
    317  f000				  -	      EIF
    318  f000				  -
    319  f000				  -	      IF	ROM_BASED
    320  f000				  -rts_tab    dc.w	cmd0-1,cmd1-1,cmd2-1,cmd3-1,cmd4-1,cmd5-1,cmd6-1,cmd7-1
    321  f000				  -	      EIF
    322  f000				  -INSTRPAR   equ	12
    323  f000				  -tabbeganddistor
    324  f000				  -	      dc.b	frqtabpure-frqtab,$00
    325  f000				  -	      dc.b	frqtabpure-frqtab,$20
    326  f000				  -	      dc.b	frqtabpure-frqtab,$40
    327  f000				  -	      dc.b	frqtabbass1-frqtab,$c0
    328  f000				  -	      dc.b	frqtabpure-frqtab,$80
    329  f000				  -	      dc.b	frqtabpure-frqtab,$a0
    330  f000				  -	      dc.b	frqtabbass1-frqtab,$c0
    331  f000				  -	      dc.b	frqtabbass2-frqtab,$c0
    332  f000				  -vibtabbeg  dc.b	0,vib1-vib0,vib2-vib0,vib3-vib0,vibx-vib0
    333  f000				  -vib0       dc.b	0
    334  f000				  -vib1       dc.b	1,-1,-1,1
    335  f000				  -vib2       dc.b	1,0,-1,-1,0,1
    336  f000				  -vib3       dc.b	1,1,0,-1,-1,-1,-1,0,1,1
    337  f000				  -vibx
    338  f000				  -emptytrack
    339  f000				  -	      dc.b	62,0
    340  f000				  -
    341  f000				  -			;*
    342  f000				  -			;* Set of RMT main vectors:
    343  f000				  -			;*
    344  f000				  -RASTERMUSICTRACKER
    345  f000				  -	      jmp	rmt_init
    346  f000				  -	      jmp	rmt_play
    347  f000				  -	      jmp	rmt_p3
    348  f000				  -	      jmp	rmt_silence
    349  f000				  -	      jmp	SetPokey
    350  f000				  -rmt_init
    351  f000				  -	      stx	_ns
    352  f000				  -	      sty	_ns+1
    353  f000				  -	      pha
    354  f000				  -	      IF	track_endvariables-track_variables>255
    355  f000				  -	      ldy	#0
    356  f000				  -	      tya
    357  f000				  -rmtri0     sta	track_variables,y
    358  f000				  -	      sta	track_endvariables-$100,y
    359  f000				  -	      iny
    360  f000				  -	      bne	rmtri0
    361  f000				  -	      ELSE
    362  f000				  -	      ldy	#track_endvariables-track_variables
    363  f000				  -	      lda	#0
    364  f000				  -rmtri0     sta	track_variables-1,y
    365  f000				  -	      dey
    366  f000				  -	      bne	rmtri0
    367  f000				  -	      EIF
    368  f000				  -	      ldy	#4
    369  f000				  -	      lda	(_ns),y
    370  f000				  -	      sta	v_maxtracklen
    371  f000				  -	      iny
    372  f000				  -	      lda	(_ns),y
    373  f000				  -	      sta	v_speed
    374  f000				  -	      iny
    375  f000				  -	      lda	(_ns),y
    376  f000				  -	      sta	v_instrspeed
    377  f000				  -	      sta	v_ainstrspeed
    378  f000				  -	      ldy	#8
    379  f000				  -rmtri1     lda	(_ns),y
    380  f000				  -	      sta	p_tis-8,y
    381  f000				  -	      iny
    382  f000				  -	      cpy	#8+8
    383  f000				  -	      bne	rmtri1
    384  f000				  -	      pla
    385  f000				  -	      pha
    386  f000				  -	      IF	STEREO8T
    387  f000				  -	      asl
    388  f000				  -	      asl
    389  f000				  -	      asl
    390  f000				  -	      clc
    391  f000				  -	      adc	p_song
    392  f000				  -	      sta	p_song
    393  f000				  -	      pla
    394  f000				  -	      and	#$e0
    395  f000				  -	      asl
    396  f000				  -	      rol
    397  f000				  -	      rol
    398  f000				  -	      rol
    399  f000				  -	      ELSE
    400  f000				  -	      asl
    401  f000				  -	      asl
    402  f000				  -	      clc
    403  f000				  -	      adc	p_song
    404  f000				  -	      sta	p_song
    405  f000				  -	      pla
    406  f000				  -	      and	#$c0
    407  f000				  -	      asl
    408  f000				  -	      rol
    409  f000				  -	      rol
    410  f000				  -	      EIF
    411  f000				  -	      adc	p_song+1
    412  f000				  -	      sta	p_song+1
    413  f000				  -	      jsr	GetSongLine
    414  f000				  -	      jsr	GetTrackLine
    415  f000				  -	      jsr	InitOfNewSetInstrumentsOnly
    416  f000				  -	      jsr	rmt_silence
    417  f000				  -	      lda	v_instrspeed
    418  f000				  -	      rts
    419  f000				  -rmt_silence
    420  f000				  -	      IF	STEREO8T
    421  f000				  -	      lda	#0
    422  f000				  -	      sta	POKEY_BASE+$08
    423  f000				  -	      sta	POKEY_BASE_S+$08
    424  f000				  -	      ldy	#3
    425  f000				  -	      sty	POKEY_BASE+$0f
    426  f000				  -	      sty	POKEY_BASE_S+$0f
    427  f000				  -	      ldy	#8
    428  f000				  -rmtsi1     sta	POKEY_BASE+$00,y
    429  f000				  -	      sta	POKEY_BASE_S+$00,y
    430  f000				  -	      dey
    431  f000				  -	      bpl	rmtsi1
    432  f000				  -	      ELSE
    433  f000				  -	      lda	#0
    434  f000				  -	      sta	POKEY_BASE+$08
    435  f000				  -	      ldy	#3
    436  f000				  -	      sty	POKEY_BASE+$0f
    437  f000				  -	      ldy	#8
    438  f000				  -rmtsi1     sta	POKEY_BASE+$00,y
    439  f000				  -	      dey
    440  f000				  -	      bpl	rmtsi1
    441  f000				  -	      EIF
    442  f000				  -	      rts
    443  f000				  -GetSongLine
    444  f000				  -	      ldx	#0
    445  f000				  -	      stx	v_abeat
    446  f000				  -rmtnn0
    447  f000				  -	      ldx	#0
    448  f000				  -rmtnn1     txa
    449  f000				  -	      tay
    450  f000				  -	      lda	(p_song),y
    451  f000				  -	      cmp	#$fe
    452  f000				  -	      bcs	rmtnn2
    453  f000				  -	      tay
    454  f000				  -	      lda	(p_trackslbstable),y
    455  f000				  -	      sta	trackn_db,x
    456  f000				  -	      lda	(p_trackshbstable),y
    457  f000				  -rmtnn1a    sta	trackn_hb,x
    458  f000				  -	      lda	#0
    459  f000				  -	      sta	trackn_idx,x
    460  f000				  -	      lda	#1
    461  f000				  -	      sta	trackn_pause,x
    462  f000				  -	      lda	#$80
    463  f000				  -	      sta	trackn_instrx2,x
    464  f000				  -	      inx
    465  f000				  -	      cpx	#TRACKS
    466  f000				  -	      bne	rmtnn1
    467  f000				  -	      lda	p_song
    468  f000				  -	      clc
    469  f000				  -	      adc	#TRACKS
    470  f000				  -	      sta	p_song
    471  f000				  -	      bcc	rmtnn1b
    472  f000				  -	      inc	p_song+1
    473  f000				  -rmtnn1b
    474  f000				  -	      rts
    475  f000				  -rmtnn2
    476  f000				  -	      beq	rmtnn3
    477  f000				  -rmtnn2a    lda	#<emptytrack
    478  f000				  -	      sta	trackn_db,x
    479  f000				  -	      lda	#>emptytrack
    480  f000				  -	      jmp	rmtnn1a
    481  f000				  -rmtnn3
    482  f000				  -	      ldy	#2
    483  f000				  -	      lda	(p_song),y
    484  f000				  -	      tax
    485  f000				  -	      iny
    486  f000				  -	      lda	(p_song),y
    487  f000				  -	      sta	p_song+1
    488  f000				  -	      stx	p_song
    489  f000				  -	      jmp	rmtnn0
    490  f000				  -GetTrackLine
    491  f000				  -rmtoo0
    492  f000				  -rmtoo0a
    493  f000				  -	      lda	v_speed
    494  f000				  -	      sta	v_bspeed
    495  f000				  -	      ldx	#0
    496  f000				  -rmtoo1
    497  f000				  -	      lda	trackn_pause,x
    498  f000				  -	      beq	rmtoo1x
    499  f000				  -	      dec	trackn_pause,x
    500  f000				  -	      bne	rmtoo1x
    501  f000				  -	      inc	trackn_pause,x
    502  f000				  -rmtoo1b
    503  f000				  -	      lda	trackn_db,x
    504  f000				  -	      sta	_ns
    505  f000				  -	      lda	trackn_hb,x
    506  f000				  -	      sta	_ns+1
    507  f000				  -rmtoo1i
    508  f000				  -	      ldy	trackn_idx,x
    509  f000				  -	      lda	(_ns),y
    510  f000				  -	      sta	rmtreg1
    511  f000				  -	      iny
    512  f000				  -	      lda	(_ns),y
    513  f000				  -	      sta	rmtreg2
    514  f000				  -	      iny
    515  f000				  -	      tya
    516  f000				  -	      sta	trackn_idx,x
    517  f000				  -	      lda	rmtreg1
    518  f000				  -	      and	#$3f
    519  f000				  -	      cmp	#61
    520  f000				  -	      beq	rmtoo1a
    521  f000				  -	      bcs	rmtoo2
    522  f000				  -	      sta	trackn_note,x
    523  f000				  -	      IF	FEAT_BASS16
    524  f000				  -	      sta	trackn_outnote,x
    525  f000				  -	      EIF
    526  f000				  -	      lda	rmtreg2
    527  f000				  -	      lsr
    528  f000				  -	      and	#$3f*2
    529  f000				  -	      sta	trackn_instrx2,x
    530  f000				  -rmtoo1a    lda	rmtreg2
    531  f000				  -	      lsr
    532  f000				  -	      ror	rmtreg1
    533  f000				  -	      lsr
    534  f000				  -	      ror	rmtreg1
    535  f000				  -	      lda	rmtreg1
    536  f000				  -	      and	#$f0
    537  f000				  -	      sta	trackn_volume,x
    538  f000				  -rmtoo1x
    539  f000				  -	      inx
    540  f000				  -	      cpx	#TRACKS
    541  f000				  -	      bne	rmtoo1
    542  f000				  -	      lda	v_bspeed
    543  f000				  -	      sta	v_speed
    544  f000				  -	      sta	v_aspeed
    545  f000				  -	      rts
    546  f000				  -rmtoo2
    547  f000				  -	      cmp	#63
    548  f000				  -	      beq	rmtoo63
    549  f000				  -	      lda	rmtreg1
    550  f000				  -	      and	#$c0
    551  f000				  -	      beq	rmtoo62_b
    552  f000				  -	      asl
    553  f000				  -	      rol
    554  f000				  -	      rol
    555  f000				  -	      sta	trackn_pause,x
    556  f000				  -	      dec	trackn_idx,x
    557  f000				  -	      jmp	rmtoo1x
    558  f000				  -rmtoo62_b
    559  f000				  -	      lda	rmtreg2
    560  f000				  -	      sta	trackn_pause,x
    561  f000				  -	      jmp	rmtoo1x
    562  f000				  -rmtoo63
    563  f000				  -	      lda	rmtreg1
    564  f000				  -	      bmi	rmtoo63_1X
    565  f000				  -	      lda	rmtreg2
    566  f000				  -	      sta	v_bspeed
    567  f000				  -	      jmp	rmtoo1i
    568  f000				  -rmtoo63_1X
    569  f000				  -	      cmp	#255
    570  f000				  -	      beq	rmtoo63_11
    571  f000				  -	      lda	rmtreg2
    572  f000				  -	      sta	trackn_idx,x
    573  f000				  -	      jmp	rmtoo1i
    574  f000				  -rmtoo63_11
    575  f000				  -	      jsr	GetSongLine
    576  f000				  -	      jmp	rmtoo0
    577  f000				  -InitOfNewSetInstrumentsOnly
    578  f000				  -	      ldx	#0
    579  f000				  -p2x1       ldy	trackn_instrx2,x
    580  f000				  -	      bmi	p2x2
    581  f000				  -	      jsr	SetUpInstrumentY2
    582  f000				  -	      lda	#$80
    583  f000				  -	      sta	trackn_instrx2,x
    584  f000				  -p2x2
    585  f000				  -	      inx
    586  f000				  -	      cpx	#TRACKS
    587  f000				  -	      bne	p2x1
    588  f000				  -	      rts
    589  f000				  -rmt_play
    590  f000				  -rmt_p0
    591  f000				  -	      jsr	SetPokey
    592  f000				  -rmt_p1
    593  f000				  -	      dec	v_ainstrspeed
    594  f000				  -	      beq	rmtp1a
    595  f000				  -	      jmp	rmt_p3
    596  f000				  -rmtp1a
    597  f000				  -	      lda	v_instrspeed
    598  f000				  -	      sta	v_ainstrspeed
    599  f000				  -rmt_p2
    600  f000				  -	      dec	v_aspeed
    601  f000				  -	      bne	rmt_p3
    602  f000				  -	      inc	v_abeat
    603  f000				  -	      lda	v_abeat
    604  f000				  -	      cmp	v_maxtracklen
    605  f000				  -	      bne	rmtp2o2
    606  f000				  -	      jsr	GetSongLine
    607  f000				  -rmtp2o2
    608  f000				  -	      jsr	GetTrackLine
    609  f000				  -	      jmp	rmt_p2X
    610  f000				  -go_ppnext  jmp	ppnext
    611  f000				  -rmt_p2X
    612  f000				  -	      jsr	InitOfNewSetInstrumentsOnly
    613  f000				  -rmt_p3
    614  f000				  -	      lda	#>frqtab
    615  f000				  -	      sta	_nr+1
    616  f000				  -	      ldx	#0
    617  f000				  -rmtpp1
    618  f000				  -	      lda	trackn_instrhb,x
    619  f000				  -	      beq	go_ppnext
    620  f000				  -	      sta	_ns+1
    621  f000				  -	      lda	trackn_instrdb,x
    622  f000				  -	      sta	_ns
    623  f000				  -	      ldy	trackn_instridx,x
    624  f000				  -	      lda	(_ns),y
    625  f000				  -	      sta	rmtreg1
    626  f000				  -	      iny
    627  f000				  -	      lda	(_ns),y
    628  f000				  -	      sta	rmtreg2
    629  f000				  -	      iny
    630  f000				  -	      lda	(_ns),y
    631  f000				  -	      sta	rmtreg3
    632  f000				  -	      iny
    633  f000				  -	      tya
    634  f000				  -	      cmp	trackn_instrlen,x
    635  f000				  -	      bcc	rmtpp2
    636  f000				  -	      beq	rmtpp2
    637  f000				  -	      lda	#$80
    638  f000				  -	      sta	trackn_instrreachend,x
    639  f000				  -rmtpp1b
    640  f000				  -	      lda	trackn_instrlop,x
    641  f000				  -rmtpp2     sta	trackn_instridx,x
    642  f000				  -	      lda	rmtreg1
    643  f000				  -	      IF	STEREO8T
    644  f000				  -	      cpx	#4
    645  f000				  -	      bcc	rmtpp2s
    646  f000				  -	      lsr
    647  f000				  -	      lsr
    648  f000				  -	      lsr
    649  f000				  -	      lsr
    650  f000				  -rmtpp2s
    651  f000				  -	      EIF
    652  f000				  -	      and	#$0f
    653  f000				  -	      ora	trackn_volume,x
    654  f000				  -	      tay
    655  f000				  -	      lda	volumetab,y
    656  f000				  -	      pha
    657  f000				  -	      lda	rmtreg2
    658  f000				  -	      and	#$0e
    659  f000				  -	      tay
    660  f000				  -	      lda	tabbeganddistor,y
    661  f000				  -	      sta	_nr
    662  f000				  -	      pla
    663  f000				  -	      ora	tabbeganddistor+1,y
    664  f000				  -	      sta	trackn_audc,x
    665  f000				  -	      jmp	InstrumentsEffects
    666  f000				  -returnfromInstrumentsEffects
    667  f000				  -	      IF	FEAT_COMMAND2
    668  f000				  -	      lda	#0
    669  f000				  -	      sta	frqaddcmd2
    670  f000				  -	      EIF
    671  f000				  -	      lda	rmtreg2
    672  f000				  -	      sta	trackn_command,x
    673  f000				  -	      and	#$70
    674  f000				  -	      lsr
    675  f000				  -	      lsr
    676  f000				  -	      IF	ROM_BASED
    677  f000				  -	      lsr
    678  f000				  -	      tay
    679  f000				  -	      lda	rts_tab+1,y
    680  f000				  -	      pha
    681  f000				  -	      lda	rts_tab,y
    682  f000				  -	      pha
    683  f000				  -	      rts
    684  f000				  -	      ELSE
    685  f000				  -	      sta	jmx+1
    686  f000				  -jmx	      bcc	*
    687  f000				  -	      jmp	cmd0
    688  f000				  -	      nop
    689  f000				  -	      jmp	cmd1
    690  f000				  -	      nop
    691  f000				  -	      jmp	cmd2
    692  f000				  -	      nop
    693  f000				  -	      jmp	cmd3
    694  f000				  -	      nop
    695  f000				  -	      jmp	cmd4
    696  f000				  -	      nop
    697  f000				  -	      jmp	cmd5
    698  f000				  -	      nop
    699  f000				  -	      jmp	cmd6
    700  f000				  -	      nop
    701  f000				  -	      jmp	cmd7
    702  f000				  -	      EIF
    703  f000				  -cmd0
    704  f000				  -	      lda	trackn_note,x
    705  f000				  -	      clc
    706  f000				  -	      adc	rmtreg3
    707  f000				  -cmd0a
    708  f000				  -	      IF	FEAT_TABLETYPE
    709  f000				  -	      ldy	trackn_tabletypespeed,x
    710  f000				  -	      bmi	cmd0b
    711  f000				  -	      EIF
    712  f000				  -	      clc
    713  f000				  -	      adc	trackn_tablenote,x
    714  f000				  -	      cmp	#61
    715  f000				  -	      bcc	cmd0a1
    716  f000				  -	      lda	#0
    717  f000				  -	      sta	trackn_audc,x
    718  f000				  -	      lda	#63
    719  f000				  -cmd0a1
    720  f000				  -	      IF	FEAT_BASS16
    721  f000				  -	      sta	trackn_outnote,x
    722  f000				  -	      EIF
    723  f000				  -	      tay
    724  f000				  -	      lda	(_nr),y
    725  f000				  -	      clc
    726  f000				  -	      adc	trackn_shiftfrq,x
    727  f000				  -	      IF	FEAT_COMMAND2
    728  f000				  -	      clc
    729  f000				  -	      adc	frqaddcmd2
    730  f000				  -	      EIF
    731  f000				  -	      sta	trackn_audf,x
    732  f000				  -	      jmp	rmtpp9
    733  f000				  -	      IF	FEAT_TABLETYPE
    734  f000				  -cmd0b
    735  f000				  -	      cmp	#61
    736  f000				  -	      bcc	cmd0b1
    737  f000				  -	      lda	#0
    738  f000				  -	      sta	trackn_audc,x
    739  f000				  -	      lda	#63
    740  f000				  -cmd0b1
    741  f000				  -	      tay
    742  f000				  -	      lda	trackn_shiftfrq,x
    743  f000				  -	      clc
    744  f000				  -	      adc	trackn_tablenote,x
    745  f000				  -	      clc
    746  f000				  -	      adc	(_nr),y
    747  f000				  -	      IF	FEAT_COMMAND2
    748  f000				  -	      clc
    749  f000				  -	      adc	frqaddcmd2
    750  f000				  -	      EIF
    751  f000				  -	      sta	trackn_audf,x
    752  f000				  -	      jmp	rmtpp9
    753  f000				  -	      EIF
    754  f000				  -cmd1
    755  f000				  -	      IF	FEAT_COMMAND1
    756  f000				  -	      lda	rmtreg3
    757  f000				  -	      sta	trackn_audf,x
    758  f000				  -	      jmp	rmtpp9
    759  f000				  -	      EIF
    760  f000				  -cmd2
    761  f000				  -	      IF	FEAT_COMMAND2
    762  f000				  -	      lda	rmtreg3
    763  f000				  -	      sta	frqaddcmd2
    764  f000				  -	      lda	trackn_note,x
    765  f000				  -	      jmp	cmd0a
    766  f000				  -	      EIF
    767  f000				  -cmd3
    768  f000				  -	      IF	FEAT_COMMAND3
    769  f000				  -	      lda	trackn_note,x
    770  f000				  -	      clc
    771  f000				  -	      adc	rmtreg3
    772  f000				  -	      sta	trackn_note,x
    773  f000				  -	      jmp	cmd0a
    774  f000				  -	      EIF
    775  f000				  -cmd4
    776  f000				  -	      IF	FEAT_COMMAND4
    777  f000				  -	      lda	trackn_shiftfrq,x
    778  f000				  -	      clc
    779  f000				  -	      adc	rmtreg3
    780  f000				  -	      sta	trackn_shiftfrq,x
    781  f000				  -	      lda	trackn_note,x
    782  f000				  -	      jmp	cmd0a
    783  f000				  -	      EIF
    784  f000				  -cmd5
    785  f000				  -	      IF	FEAT_COMMAND5&&FEAT_PORTAMENTO
    786  f000				  -	      IF	FEAT_TABLETYPE
    787  f000				  -	      lda	trackn_tabletypespeed,x
    788  f000				  -	      bpl	cmd5a1
    789  f000				  -	      ldy	trackn_note,x
    790  f000				  -	      lda	(_nr),y
    791  f000				  -	      clc
    792  f000				  -	      adc	trackn_tablenote,x
    793  f000				  -	      jmp	cmd5ax
    794  f000				  -	      EIF
    795  f000				  -cmd5a1
    796  f000				  -	      lda	trackn_note,x
    797  f000				  -	      clc
    798  f000				  -	      adc	trackn_tablenote,x
    799  f000				  -	      cmp	#61
    800  f000				  -	      bcc	cmd5a2
    801  f000				  -	      lda	#63
    802  f000				  -cmd5a2
    803  f000				  -	      tay
    804  f000				  -	      lda	(_nr),y
    805  f000				  -cmd5ax
    806  f000				  -	      sta	trackn_portafrqc,x
    807  f000				  -	      ldy	rmtreg3
    808  f000				  -	      bne	cmd5a
    809  f000				  -	      sta	trackn_portafrqa,x
    810  f000				  -cmd5a
    811  f000				  -	      tya
    812  f000				  -	      lsr
    813  f000				  -	      lsr
    814  f000				  -	      lsr
    815  f000				  -	      lsr
    816  f000				  -	      sta	trackn_portaspeed,x
    817  f000				  -	      sta	trackn_portaspeeda,x
    818  f000				  -	      lda	rmtreg3
    819  f000				  -	      and	#$0f
    820  f000				  -	      sta	trackn_portadepth,x
    821  f000				  -	      lda	trackn_note,x
    822  f000				  -	      jmp	cmd0a
    823  f000				  -	      ELSE
    824  f000				  -	      IF	FEAT_COMMAND5
    825  f000				  -	      jmp	rmtpp9
    826  f000				  -	      EIF
    827  f000				  -	      EIF
    828  f000				  -cmd6
    829  f000				  -	      IF	FEAT_COMMAND6&&FEAT_FILTER
    830  f000				  -	      lda	rmtreg3
    831  f000				  -	      clc
    832  f000				  -	      adc	trackn_filter,x
    833  f000				  -	      sta	trackn_filter,x
    834  f000				  -	      lda	trackn_note,x
    835  f000				  -	      jmp	cmd0a
    836  f000				  -	      ELSE
    837  f000				  -	      IF	FEAT_COMMAND6
    838  f000				  -	      jmp	rmtpp9
    839  f000				  -	      EIF
    840  f000				  -	      EIF
    841  f000				  -cmd7
    842  f000				  -	      IF	FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY
    843  f000				  -	      IF	FEAT_COMMAND7SETNOTE
    844  f000				  -	      lda	rmtreg3
    845  f000				  -	      IF	FEAT_COMMAND7VOLUMEONLY
    846  f000				  -	      cmp	#$80
    847  f000				  -	      beq	cmd7a
    848  f000				  -	      EIF
    849  f000				  -	      sta	trackn_note,x
    850  f000				  -	      jmp	cmd0a
    851  f000				  -	      EIF
    852  f000				  -	      IF	FEAT_COMMAND7VOLUMEONLY
    853  f000				  -cmd7a
    854  f000				  -	      lda	trackn_audc,x
    855  f000				  -	      ora	#$f0
    856  f000				  -	      sta	trackn_audc,x
    857  f000				  -	      lda	trackn_note,x
    858  f000				  -	      jmp	cmd0a
    859  f000				  -	      EIF
    860  f000				  -	      EIF
    861  f000				  -rmtpp9
    862  f000				  -	      IF	FEAT_PORTAMENTO
    863  f000				  -	      lda	trackn_portaspeeda,x
    864  f000				  -	      beq	rmtpp10
    865  f000				  -	      sec
    866  f000				  -	      sbc	#1
    867  f000				  -	      sta	trackn_portaspeeda,x
    868  f000				  -	      bne	rmtpp10
    869  f000				  -	      lda	trackn_portaspeed,x
    870  f000				  -	      sta	trackn_portaspeeda,x
    871  f000				  -	      lda	trackn_portafrqa,x
    872  f000				  -	      cmp	trackn_portafrqc,x
    873  f000				  -	      beq	rmtpp10
    874  f000				  -	      bcs	pps1
    875  f000				  -	      adc	trackn_portadepth,x
    876  f000				  -	      bcs	pps8
    877  f000				  -	      cmp	trackn_portafrqc,x
    878  f000				  -	      bcs	pps8
    879  f000				  -	      jmp	pps9
    880  f000				  -pps1
    881  f000				  -	      sbc	trackn_portadepth,x
    882  f000				  -	      bcc	pps8
    883  f000				  -	      cmp	trackn_portafrqc,x
    884  f000				  -	      bcs	pps9
    885  f000				  -pps8
    886  f000				  -	      lda	trackn_portafrqc,x
    887  f000				  -pps9
    888  f000				  -	      sta	trackn_portafrqa,x
    889  f000				  -rmtpp10
    890  f000				  -	      lda	rmtreg2
    891  f000				  -	      and	#$01
    892  f000				  -	      beq	rmtpp11
    893  f000				  -	      lda	trackn_portafrqa,x
    894  f000				  -	      clc
    895  f000				  -	      adc	trackn_shiftfrq,x
    896  f000				  -	      sta	trackn_audf,x
    897  f000				  -rmtpp11
    898  f000				  -	      EIF
    899  f000				  -ppnext
    900  f000				  -	      inx
    901  f000				  -	      cpx	#TRACKS
    902  f000				  -	      beq	rmt_p4
    903  f000				  -	      jmp	rmtpp1
    904  f000				  -rmt_p4
    905  f000				  -	      IF	FEAT_AUDCTLMANUALSET
    906  f000				  -	      ldx	#3
    907  f000				  -	      lda	#0
    908  f000				  -qq0	      ora	trackn_audctl,x
    909  f000				  -	      dex
    910  f000				  -	      bpl	qq0
    911  f000				  -	      sta	v_audctl
    912  f000				  -qq1
    913  f000				  -	      ldx	v_audctl
    914  f000				  -	      ELSE
    915  f000				  -	      ldx	#0
    916  f000				  -	      stx	v_audctl
    917  f000				  -	      EIF
    918  f000				  -	      IF	FEAT_FILTER
    919  f000				  -	      IF	FEAT_FILTERG0L
    920  f000				  -	      lda	trackn_command+0
    921  f000				  -	      bpl	qq2
    922  f000				  -	      lda	trackn_audc+0
    923  f000				  -	      and	#$0f
    924  f000				  -	      beq	qq2
    925  f000				  -	      lda	trackn_audf+0
    926  f000				  -	      clc
    927  f000				  -	      adc	trackn_filter+0
    928  f000				  -	      sta	trackn_audf+2
    929  f000				  -	      IF	FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG2L
    930  f000				  -	      lda	trackn_audc+2
    931  f000				  -	      and	#$10
    932  f000				  -	      bne	qq1a
    933  f000				  -	      EIF
    934  f000				  -	      lda	#0
    935  f000				  -	      sta	trackn_audc+2
    936  f000				  -qq1a
    937  f000				  -	      txa
    938  f000				  -	      ora	#4
    939  f000				  -	      tax
    940  f000				  -	      EIF
    941  f000				  -qq2
    942  f000				  -	      IF	FEAT_FILTERG1L
    943  f000				  -	      lda	trackn_command+1
    944  f000				  -	      bpl	qq3
    945  f000				  -	      lda	trackn_audc+1
    946  f000				  -	      and	#$0f
    947  f000				  -	      beq	qq3
    948  f000				  -	      lda	trackn_audf+1
    949  f000				  -	      clc
    950  f000				  -	      adc	trackn_filter+1
    951  f000				  -	      sta	trackn_audf+3
    952  f000				  -	      IF	FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG3L
    953  f000				  -	      lda	trackn_audc+3
    954  f000				  -	      and	#$10
    955  f000				  -	      bne	qq2a
    956  f000				  -	      EIF
    957  f000				  -	      lda	#0
    958  f000				  -	      sta	trackn_audc+3
    959  f000				  -qq2a
    960  f000				  -	      txa
    961  f000				  -	      ora	#2
    962  f000				  -	      tax
    963  f000				  -	      EIF
    964  f000				  -qq3
    965  f000				  -	      IF	FEAT_FILTERG0L||FEAT_FILTERG1L
    966  f000				  -	      cpx	v_audctl
    967  f000				  -	      bne	qq5
    968  f000				  -	      EIF
    969  f000				  -	      EIF
    970  f000				  -	      IF	FEAT_BASS16
    971  f000				  -	      IF	FEAT_BASS16G1L
    972  f000				  -	      lda	trackn_command+1
    973  f000				  -	      and	#$0e
    974  f000				  -	      cmp	#6
    975  f000				  -	      bne	qq4
    976  f000				  -	      lda	trackn_audc+1
    977  f000				  -	      and	#$0f
    978  f000				  -	      beq	qq4
    979  f000				  -	      ldy	trackn_outnote+1
    980  f000				  -	      lda	frqtabbasslo,y
    981  f000				  -	      sta	trackn_audf+0
    982  f000				  -	      lda	frqtabbasshi,y
    983  f000				  -	      sta	trackn_audf+1
    984  f000				  -	      IF	FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG0L
    985  f000				  -	      lda	trackn_audc+0
    986  f000				  -	      and	#$10
    987  f000				  -	      bne	qq3a
    988  f000				  -	      EIF
    989  f000				  -	      lda	#0
    990  f000				  -	      sta	trackn_audc+0
    991  f000				  -qq3a
    992  f000				  -	      txa
    993  f000				  -	      ora	#$50
    994  f000				  -	      tax
    995  f000				  -	      EIF
    996  f000				  -qq4
    997  f000				  -	      IF	FEAT_BASS16G3L
    998  f000				  -	      lda	trackn_command+3
    999  f000				  -	      and	#$0e
   1000  f000				  -	      cmp	#6
   1001  f000				  -	      bne	qq5
   1002  f000				  -	      lda	trackn_audc+3
   1003  f000				  -	      and	#$0f
   1004  f000				  -	      beq	qq5
   1005  f000				  -	      ldy	trackn_outnote+3
   1006  f000				  -	      lda	frqtabbasslo,y
   1007  f000				  -	      sta	trackn_audf+2
   1008  f000				  -	      lda	frqtabbasshi,y
   1009  f000				  -	      sta	trackn_audf+3
   1010  f000				  -	      IF	FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG2L
   1011  f000				  -	      lda	trackn_audc+2
   1012  f000				  -	      and	#$10
   1013  f000				  -	      bne	qq4a
   1014  f000				  -	      EIF
   1015  f000				  -	      lda	#0
   1016  f000				  -	      sta	trackn_audc+2
   1017  f000				  -qq4a
   1018  f000				  -	      txa
   1019  f000				  -	      ora	#$28
   1020  f000				  -	      tax
   1021  f000				  -	      EIF
   1022  f000				  -	      EIF
   1023  f000				  -qq5
   1024  f000				  -	      stx	v_audctl
   1025  f000				  -	      IF	STEREO8T
   1026  f000				  -	      IF	FEAT_AUDCTLMANUALSET
   1027  f000				  -	      ldx	#3
   1028  f000				  -	      lda	#0
   1029  f000				  -qs0	      ora	trackn_audctl+4,x
   1030  f000				  -	      dex
   1031  f000				  -	      bpl	qs0
   1032  f000				  -	      sta	v_audctl2
   1033  f000				  -qs1
   1034  f000				  -	      ldx	v_audctl2
   1035  f000				  -	      ELSE
   1036  f000				  -	      ldx	#0
   1037  f000				  -	      stx	v_audctl2
   1038  f000				  -	      EIF
   1039  f000				  -	      IF	FEAT_FILTER
   1040  f000				  -	      IF	FEAT_FILTERG0R
   1041  f000				  -	      lda	trackn_command+0+4
   1042  f000				  -	      bpl	qs2
   1043  f000				  -	      lda	trackn_audc+0+4
   1044  f000				  -	      and	#$0f
   1045  f000				  -	      beq	qs2
   1046  f000				  -	      lda	trackn_audf+0+4
   1047  f000				  -	      clc
   1048  f000				  -	      adc	trackn_filter+0+4
   1049  f000				  -	      sta	trackn_audf+2+4
   1050  f000				  -	      IF	FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG2R
   1051  f000				  -	      lda	trackn_audc+2+4
   1052  f000				  -	      and	#$10
   1053  f000				  -	      bne	qs1a
   1054  f000				  -	      EIF
   1055  f000				  -	      lda	#0
   1056  f000				  -	      sta	trackn_audc+2+4
   1057  f000				  -qs1a
   1058  f000				  -	      txa
   1059  f000				  -	      ora	#4
   1060  f000				  -	      tax
   1061  f000				  -	      EIF
   1062  f000				  -qs2
   1063  f000				  -	      IF	FEAT_FILTERG1R
   1064  f000				  -	      lda	trackn_command+1+4
   1065  f000				  -	      bpl	qs3
   1066  f000				  -	      lda	trackn_audc+1+4
   1067  f000				  -	      and	#$0f
   1068  f000				  -	      beq	qs3
   1069  f000				  -	      lda	trackn_audf+1+4
   1070  f000				  -	      clc
   1071  f000				  -	      adc	trackn_filter+1+4
   1072  f000				  -	      sta	trackn_audf+3+4
   1073  f000				  -	      IF	FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG3R
   1074  f000				  -	      lda	trackn_audc+3+4
   1075  f000				  -	      and	#$10
   1076  f000				  -	      bne	qs2a
   1077  f000				  -	      EIF
   1078  f000				  -	      lda	#0
   1079  f000				  -	      sta	trackn_audc+3+4
   1080  f000				  -qs2a
   1081  f000				  -	      txa
   1082  f000				  -	      ora	#2
   1083  f000				  -	      tax
   1084  f000				  -	      EIF
   1085  f000				  -qs3
   1086  f000				  -	      IF	FEAT_FILTERG0R||FEAT_FILTERG1R
   1087  f000				  -	      cpx	v_audctl2
   1088  f000				  -	      bne	qs5
   1089  f000				  -	      EIF
   1090  f000				  -	      EIF
   1091  f000				  -	      IF	FEAT_BASS16
   1092  f000				  -	      IF	FEAT_BASS16G1R
   1093  f000				  -	      lda	trackn_command+1+4
   1094  f000				  -	      and	#$0e
   1095  f000				  -	      cmp	#6
   1096  f000				  -	      bne	qs4
   1097  f000				  -	      lda	trackn_audc+1+4
   1098  f000				  -	      and	#$0f
   1099  f000				  -	      beq	qs4
   1100  f000				  -	      ldy	trackn_outnote+1+4
   1101  f000				  -	      lda	frqtabbasslo,y
   1102  f000				  -	      sta	trackn_audf+0+4
   1103  f000				  -	      lda	frqtabbasshi,y
   1104  f000				  -	      sta	trackn_audf+1+4
   1105  f000				  -	      IF	FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG0R
   1106  f000				  -	      lda	trackn_audc+0+4
   1107  f000				  -	      and	#$10
   1108  f000				  -	      bne	qs3a
   1109  f000				  -	      EIF
   1110  f000				  -	      lda	#0
   1111  f000				  -	      sta	trackn_audc+0+4
   1112  f000				  -qs3a
   1113  f000				  -	      txa
   1114  f000				  -	      ora	#$50
   1115  f000				  -	      tax
   1116  f000				  -	      EIF
   1117  f000				  -qs4
   1118  f000				  -	      IF	FEAT_BASS16G3R
   1119  f000				  -	      lda	trackn_command+3+4
   1120  f000				  -	      and	#$0e
   1121  f000				  -	      cmp	#6
   1122  f000				  -	      bne	qs5
   1123  f000				  -	      lda	trackn_audc+3+4
   1124  f000				  -	      and	#$0f
   1125  f000				  -	      beq	qs5
   1126  f000				  -	      ldy	trackn_outnote+3+4
   1127  f000				  -	      lda	frqtabbasslo,y
   1128  f000				  -	      sta	trackn_audf+2+4
   1129  f000				  -	      lda	frqtabbasshi,y
   1130  f000				  -	      sta	trackn_audf+3+4
   1131  f000				  -	      IF	FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG2R
   1132  f000				  -	      lda	trackn_audc+2+4
   1133  f000				  -	      and	#$10
   1134  f000				  -	      bne	qs4a
   1135  f000				  -	      EIF
   1136  f000				  -	      lda	#0
   1137  f000				  -	      sta	trackn_audc+2+4
   1138  f000				  -qs4a
   1139  f000				  -	      txa
   1140  f000				  -	      ora	#$28
   1141  f000				  -	      tax
   1142  f000				  -	      EIF
   1143  f000				  -	      EIF
   1144  f000				  -qs5
   1145  f000				  -	      stx	v_audctl2
   1146  f000				  -	      EIF
   1147  f000				  -rmt_p5
   1148  f000				  -	      lda	v_ainstrspeed
   1149  f000				  -	      rts
   1150  f000				  -SetPokey
   1151  f000				  -	      IF	STEREO8T
   1152  f000				  -	      ldy	v_audctl2
   1153  f000				  -	      lda	trackn_audf+0+4
   1154  f000				  -	      ldx	trackn_audf+0
   1155  f000				  -	      sta	POKEY_BASE_S+$00
   1156  f000				  -	      stx	POKEY_BASE+$00
   1157  f000				  -	      lda	trackn_audc+0+4
   1158  f000				  -	      ldx	trackn_audc+0
   1159  f000				  -	      sta	POKEY_BASE_S+$01
   1160  f000				  -	      stx	POKEY_BASE+$01
   1161  f000				  -	      lda	trackn_audf+1+4
   1162  f000				  -	      ldx	trackn_audf+1
   1163  f000				  -	      sta	POKEY_BASE_S+$02
   1164  f000				  -	      stx	POKEY_BASE+$02
   1165  f000				  -	      lda	trackn_audc+1+4
   1166  f000				  -	      ldx	trackn_audc+1
   1167  f000				  -	      sta	POKEY_BASE_S+$03
   1168  f000				  -	      stx	POKEY_BASE+$03
   1169  f000				  -	      lda	trackn_audf+2+4
   1170  f000				  -	      ldx	trackn_audf+2
   1171  f000				  -	      sta	POKEY_BASE_S+$04
   1172  f000				  -	      stx	POKEY_BASE+$04
   1173  f000				  -	      lda	trackn_audc+2+4
   1174  f000				  -	      ldx	trackn_audc+2
   1175  f000				  -	      sta	POKEY_BASE_S+$05
   1176  f000				  -	      stx	POKEY_BASE+$05
   1177  f000				  -	      lda	trackn_audf+3+4
   1178  f000				  -	      ldx	trackn_audf+3
   1179  f000				  -	      sta	POKEY_BASE_S+$06
   1180  f000				  -	      stx	POKEY_BASE+$06
   1181  f000				  -	      lda	trackn_audc+3+4
   1182  f000				  -	      ldx	trackn_audc+3
   1183  f000				  -	      sta	POKEY_BASE_S+$07
   1184  f000				  -	      stx	POKEY_BASE+$07
   1185  f000				  -	      lda	v_audctl
   1186  f000				  -	      sty	POKEY_BASE_S+$08
   1187  f000				  -	      sta	POKEY_BASE+$08
   1188  f000				  -	      ELSE
   1189  f000				  -
   1190  f000				  -	      ifconst	RMTVOLUME
   1191  f000				  -	      lda	rmtvolume
   1192  f000				  -	      sta	fourbitfadevalueint
   1193  f000				  -	      endif
   1194  f000				  -	      ldy	v_audctl
   1195  f000				  -	      ldx	trackn_audf+0
   1196  f000				  -	      lda	trackn_audc+0
   1197  f000				  -	      ifconst	RMTVOLUME
   1198  f000				  -	      jsr	fourbitfadeint
   1199  f000				  -	      endif
   1200  f000				  -	      stx	POKEY_BASE+$00+0
   1201  f000				  -	      stx	POKEY_BASE+$00+0
   1202  f000				  -	      sta	POKEY_BASE+$01+0
   1203  f000				  -	      sta	POKEY_BASE+$01+0
   1204  f000				  -
   1205  f000				  -	      ldx	trackn_audf+1
   1206  f000				  -	      lda	trackn_audc+1
   1207  f000				  -	      ifconst	RMTVOLUME
   1208  f000				  -	      jsr	fourbitfadeint
   1209  f000				  -	      endif
   1210  f000				  -	      stx	POKEY_BASE+$00+2
   1211  f000				  -	      stx	POKEY_BASE+$00+2
   1212  f000				  -	      sta	POKEY_BASE+$01+2
   1213  f000				  -	      sta	POKEY_BASE+$01+2
   1214  f000				  -
   1215  f000				  -	      ldx	trackn_audf+2
   1216  f000				  -	      lda	trackn_audc+2
   1217  f000				  -	      ifconst	RMTVOLUME
   1218  f000				  -	      jsr	fourbitfadeint
   1219  f000				  -	      endif
   1220  f000				  -	      stx	POKEY_BASE+$00+4
   1221  f000				  -	      stx	POKEY_BASE+$00+4
   1222  f000				  -	      sta	POKEY_BASE+$01+4
   1223  f000				  -	      sta	POKEY_BASE+$01+4
   1224  f000				  -
   1225  f000				  -	      ldx	trackn_audf+3
   1226  f000				  -	      lda	trackn_audc+3
   1227  f000				  -	      ifconst	RMTVOLUME
   1228  f000				  -	      jsr	fourbitfadeint
   1229  f000				  -	      endif
   1230  f000				  -	      stx	POKEY_BASE+$00+6
   1231  f000				  -	      stx	POKEY_BASE+$00+6
   1232  f000				  -	      sta	POKEY_BASE+$01+6
   1233  f000				  -	      sta	POKEY_BASE+$01+6
   1234  f000				  -
   1235  f000				  -	      sty	POKEY_BASE+$08
   1236  f000				  -	      sty	POKEY_BASE+$08
   1237  f000				  -
   1238  f000				  -	      EIF
   1239  f000				  -	      rts
   1240  f000				  -SetUpInstrumentY2
   1241  f000				  -	      lda	(p_instrstable),y
   1242  f000				  -	      sta	trackn_instrdb,x
   1243  f000				  -	      sta	_nt
   1244  f000				  -	      iny
   1245  f000				  -	      lda	(p_instrstable),y
   1246  f000				  -	      sta	trackn_instrhb,x
   1247  f000				  -	      sta	_nt+1
   1248  f000				  -	      ldy	#0
   1249  f000				  -	      lda	(_nt),y
   1250  f000				  -	      sta	trackn_tableend,x
   1251  f000				  -	      clc
   1252  f000				  -	      adc	#1
   1253  f000				  -	      sta	trackn_instridx,x
   1254  f000				  -	      iny
   1255  f000				  -	      lda	(_nt),y
   1256  f000				  -	      sta	trackn_tablelop,x
   1257  f000				  -	      iny
   1258  f000				  -	      lda	(_nt),y
   1259  f000				  -	      sta	trackn_instrlen,x
   1260  f000				  -	      iny
   1261  f000				  -	      lda	(_nt),y
   1262  f000				  -	      sta	trackn_instrlop,x
   1263  f000				  -	      iny
   1264  f000				  -	      lda	(_nt),y
   1265  f000				  -	      sta	trackn_tabletypespeed,x
   1266  f000				  -	      IF	FEAT_TABLETYPE||FEAT_TABLEMODE
   1267  f000				  -	      and	#$3f
   1268  f000				  -	      EIF
   1269  f000				  -	      sta	trackn_tablespeeda,x
   1270  f000				  -	      IF	FEAT_TABLEMODE
   1271  f000				  -	      lda	(_nt),y
   1272  f000				  -	      and	#$40
   1273  f000				  -	      sta	trackn_tablemode,x
   1274  f000				  -	      EIF
   1275  f000				  -	      iny
   1276  f000				  -	      IF	FEAT_AUDCTLMANUALSET
   1277  f000				  -	      lda	(_nt),y
   1278  f000				  -	      sta	trackn_audctl,x
   1279  f000				  -	      EIF
   1280  f000				  -	      iny
   1281  f000				  -	      lda	(_nt),y
   1282  f000				  -	      sta	trackn_volumeslidedepth,x
   1283  f000				  -	      iny
   1284  f000				  -	      lda	(_nt),y
   1285  f000				  -	      sta	trackn_volumemin,x
   1286  f000				  -	      iny
   1287  f000				  -	      lda	(_nt),y
   1288  f000				  -	      sta	trackn_effdelay,x
   1289  f000				  -	      iny
   1290  f000				  -	      lda	(_nt),y
   1291  f000				  -	      tay
   1292  f000				  -	      lda	vibtabbeg,y
   1293  f000				  -	      sta	trackn_effvibratoa,x
   1294  f000				  -	      sta	trackn_effvibratobeg,x
   1295  f000				  -	      lda	vibtabbeg+1,y
   1296  f000				  -	      sta	trackn_effvibratoend,x
   1297  f000				  -	      ldy	#10
   1298  f000				  -	      lda	(_nt),y
   1299  f000				  -	      sta	trackn_effshift,x
   1300  f000				  -	      lda	#128
   1301  f000				  -	      sta	trackn_volumeslidevalue,x
   1302  f000				  -	      lda	#0
   1303  f000				  -	      sta	trackn_instrreachend,x
   1304  f000				  -	      sta	trackn_shiftfrq,x
   1305  f000				  -	      lda	#INSTRPAR
   1306  f000				  -	      sta	trackn_tablea,x
   1307  f000				  -	      tay
   1308  f000				  -	      lda	(_nt),y
   1309  f000				  -	      sta	trackn_tablenote,x
   1310  f000				  -	      IF	FEAT_FILTER
   1311  f000				  -	      lda	#1
   1312  f000				  -	      sta	trackn_filter,x
   1313  f000				  -	      EIF
   1314  f000				  -	      rts
   1315  f000				  -InstrumentsEffects
   1316  f000				  -	      lda	trackn_effdelay,x
   1317  f000				  -	      beq	ei2
   1318  f000				  -	      tay
   1319  f000				  -	      dey
   1320  f000				  -	      bne	ei1
   1321  f000				  -	      lda	trackn_shiftfrq,x
   1322  f000				  -	      clc
   1323  f000				  -	      adc	trackn_effshift,x
   1324  f000				  -	      clc
   1325  f000				  -	      ldy	trackn_effvibratoa,x
   1326  f000				  -	      adc	vib0,y
   1327  f000				  -	      sta	trackn_shiftfrq,x
   1328  f000				  -	      iny
   1329  f000				  -	      tya
   1330  f000				  -	      cmp	trackn_effvibratoend,x
   1331  f000				  -	      bne	ei1a
   1332  f000				  -	      lda	trackn_effvibratobeg,x
   1333  f000				  -ei1a
   1334  f000				  -	      sta	trackn_effvibratoa,x
   1335  f000				  -	      jmp	ei2
   1336  f000				  -ei1
   1337  f000				  -	      tya
   1338  f000				  -	      sta	trackn_effdelay,x
   1339  f000				  -ei2
   1340  f000				  -	      lda	trackn_tableend,x
   1341  f000				  -	      cmp	#INSTRPAR
   1342  f000				  -	      beq	ei3
   1343  f000				  -	      lda	trackn_tablespeeda,x
   1344  f000				  -	      bpl	ei2f
   1345  f000				  -ei2c
   1346  f000				  -	      lda	trackn_tablea,x
   1347  f000				  -	      clc
   1348  f000				  -	      adc	#1
   1349  f000				  -	      cmp	trackn_tableend,x
   1350  f000				  -	      bcc	ei2a
   1351  f000				  -	      beq	ei2a
   1352  f000				  -	      lda	trackn_tablelop,x
   1353  f000				  -ei2a
   1354  f000				  -	      sta	trackn_tablea,x
   1355  f000				  -	      lda	trackn_instrdb,x
   1356  f000				  -	      sta	_nt
   1357  f000				  -	      lda	trackn_instrhb,x
   1358  f000				  -	      sta	_nt+1
   1359  f000				  -	      ldy	trackn_tablea,x
   1360  f000				  -	      lda	(_nt),y
   1361  f000				  -	      IF	FEAT_TABLEMODE
   1362  f000				  -	      ldy	trackn_tablemode,x
   1363  f000				  -	      beq	ei2e
   1364  f000				  -	      clc
   1365  f000				  -	      adc	trackn_tablenote,x
   1366  f000				  -ei2e
   1367  f000				  -	      EIF
   1368  f000				  -	      sta	trackn_tablenote,x
   1369  f000				  -	      lda	trackn_tabletypespeed,x
   1370  f000				  -	      IF	FEAT_TABLETYPE||FEAT_TABLEMODE
   1371  f000				  -	      and	#$3f
   1372  f000				  -	      EIF
   1373  f000				  -ei2f
   1374  f000				  -	      sec
   1375  f000				  -	      sbc	#1
   1376  f000				  -	      sta	trackn_tablespeeda,x
   1377  f000				  -ei3
   1378  f000				  -	      lda	trackn_instrreachend,x
   1379  f000				  -	      bpl	ei4
   1380  f000				  -	      lda	trackn_volume,x
   1381  f000				  -	      beq	ei4
   1382  f000				  -	      cmp	trackn_volumemin,x
   1383  f000				  -	      beq	ei4
   1384  f000				  -	      bcc	ei4
   1385  f000				  -	      tay
   1386  f000				  -	      lda	trackn_volumeslidevalue,x
   1387  f000				  -	      clc
   1388  f000				  -	      adc	trackn_volumeslidedepth,x
   1389  f000				  -	      sta	trackn_volumeslidevalue,x
   1390  f000				  -	      bcc	ei4
   1391  f000				  -	      tya
   1392  f000				  -	      sbc	#16
   1393  f000				  -	      sta	trackn_volume,x
   1394  f000				  -ei4
   1395  f000				  -	      jmp	returnfromInstrumentsEffects
   1396  f000				  -
   1397  f000				  -rmtmoduleend
   1398  f000				  -	      echo	"  (rmtplayer module is using ",[(rmtmoduleend-rmtmodulestart)]d," bytes of rom)"
   1399  f000				  -	      echo	"  (rmtplayer module is using ",[(MEMLOC-RMTRAM-1)]d," bytes of ram)"
   1400  f000				  -
   1401  f000					      endif		; RMT
------- FILE c:\Users\steve\OneDrive\Desktop\2018dev\7800\7800basic\projects\demo1\lesson2_2.78b.asm
   1393  f000					      endif
   1394  f000					      ifnconst	included.7800vox.asm
------- FILE 7800vox.asm LEVEL 2 PASS 3
      0  f000					      include	7800vox.asm
      1  f000							; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  f000
      3  f000							; AtariVox 7800basic wrapper
      4  f000
      5  f000							; to be called with
      6  f000							; A=# of bytes
      7  f000							;
      8  f000
      9  f000				  -	      ifconst	HSSUPPORT
     10  f000				  -
     11  f000				  -_7800voxstart
     12  f000				  -
     13  f000				  -AVoxReadBytes
     14  f000				  -	      sta	temp8
     15  f000				  -	      jsr	i2c_startwrite
     16  f000				  -	      bcs	eeprom_error
     17  f000				  -
     18  f000				  -	      lda	HSVoxHi
     19  f000				  -	      jsr	i2c_txbyte
     20  f000				  -	      lda	HSVoxLo
     21  f000				  -	      jsr	i2c_txbyte
     22  f000				  -	      jsr	i2c_stopwrite
     23  f000				  -
     24  f000				  -	      jsr	i2c_startread
     25  f000				  -
     26  f000				  -	      ldx	#0
     27  f000				  -AVoxReadBytesLoop
     28  f000				  -	      jsr	i2c_rxbyte
     29  f000				  -	      sta	eeprombuffer,x
     30  f000				  -	      inx
     31  f000				  -	      cpx	temp8
     32  f000				  -	      bne	AVoxReadBytesLoop
     33  f000				  -	      jsr	i2c_stopread
     34  f000				  -	      lda	#0
     35  f000				  -	      rts
     36  f000				  -
     37  f000				  -			; to be called with
     38  f000				  -			; A=# of bytes
     39  f000				  -			;
     40  f000				  -
     41  f000				  -AVoxWriteBytes
     42  f000				  -	      sta	temp8
     43  f000				  -	      jsr	i2c_startwrite
     44  f000				  -	      bcs	eeprom_error
     45  f000				  -
     46  f000				  -	      lda	HSVoxHi
     47  f000				  -	      jsr	i2c_txbyte
     48  f000				  -	      lda	HSVoxLo
     49  f000				  -	      jsr	i2c_txbyte
     50  f000				  -
     51  f000				  -	      ldx	#$00
     52  f000				  -AVoxWriteBytesLoop
     53  f000				  -	      lda	eeprombuffer,x
     54  f000				  -	      jsr	i2c_txbyte
     55  f000				  -	      inx
     56  f000				  -	      cpx	temp8
     57  f000				  -	      bne	AVoxWriteBytesLoop
     58  f000				  -	      jsr	i2c_stopwrite
     59  f000				  -
     60  f000				  -	      lda	#0
     61  f000				  -	      rts
     62  f000				  -
     63  f000				  -eeprom_error
     64  f000				  -	      lda	#$ff
     65  f000				  -	      rts
     66  f000				  -
     67  f000				  -AVoxDetect
     68  f000				  -
     69  f000				  -	      jsr	i2c_startwrite
     70  f000				  -	      bcs	eeprom_error
     71  f000				  -	      lda	#$30
     72  f000				  -	      jsr	i2c_txbyte
     73  f000				  -	      lda	#$00
     74  f000				  -	      jsr	i2c_txbyte
     75  f000				  -	      jsr	i2c_stopwrite
     76  f000				  -	      rts
     77  f000				  -
     78  f000				  -	      include	"i2c7800.inc"
     79  f000				  -	      I2C_SUBS	temp9
     80  f000				  -
     81  f000				  -_7800voxend
     82  f000				  -
     83  f000				  -	      echo	"  (7800vox module is using ",[(_7800voxend-_7800voxstart)]d," bytes)"
     84  f000				  -
     85  f000					      endif
     86  f000
------- FILE c:\Users\steve\OneDrive\Desktop\2018dev\7800\7800basic\projects\demo1\lesson2_2.78b.asm
   1396  f000					      endif
   1397  f000					      ifnconst	included.pokeysound.asm
------- FILE pokeysound.asm LEVEL 2 PASS 3
      0  f000					      include	pokeysound.asm
      1  f000							; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  f000
      3  f000
      4  f000				  -	      ifconst	pokeysupport
      5  f000				  -
      6  f000				  -pokeysoundmodulestart
      7  f000				  -
      8  f000				  -mutepokey
      9  f000				  -	      lda	#0
     10  f000				  -	      ldy	#7
     11  f000				  -mutepokeyloop
     12  f000				  -	      sta	pokey1pointlo,y
     13  f000				  -	      sta	(pokeybaselo),y
     14  f000				  -	      dey
     15  f000				  -	      bpl	mutepokeyloop
     16  f000				  -	      rts
     17  f000				  -
     18  f000				  -checkpokeyplaying
     19  f000				  -	      ldx	#6
     20  f000				  -checkpokeyplayingloop
     21  f000				  -	      lda	pokey1pointlo,x
     22  f000				  -	      ora	pokey1pointhi,x
     23  f000				  -	      beq	pokeychannelinactive
     24  f000				  -	      jsr	playpokeysfxA	; x=channel*2
     25  f000				  -pokeychannelinactive
     26  f000				  -	      dex
     27  f000				  -	      dex
     28  f000				  -	      bpl	checkpokeyplayingloop
     29  f000				  -	      rts
     30  f000				  -
     31  f000				  -playpokeysfxA
     32  f000				  -	      txa
     33  f000				  -	      tay
     34  f000				  -	      lda	pokey1tick,x
     35  f000				  -	      beq	playpokeysfxAcont
     36  f000				  -	      sec
     37  f000				  -	      sbc	#1
     38  f000				  -	      sta	pokey1tick,x	; sound resolution is >1 frame, and we're mid-tock...
     39  f000				  -	      rts
     40  f000				  -
     41  f000				  -playpokeysfxAcont
     42  f000				  -	      lda	pokey1frames,x	; set the frame countdown for this sound chunk
     43  f000				  -	      sta	pokey1tick,x
     44  f000				  -
     45  f000				  -	      lda	pokey1priority,x	; decrease the sound's priority if its non-zero
     46  f000				  -	      beq	playpokeysfxAcont2
     47  f000				  -	      sec
     48  f000				  -	      sbc	#1
     49  f000				  -	      sta	pokey1priority,x
     50  f000				  -playpokeysfxAcont2
     51  f000				  -
     52  f000				  -			; *** FREQUENCY
     53  f000				  -	      lda	(pokey1pointlo,x)
     54  f000				  -	      sta	inttemp1
     55  f000				  -	      clc
     56  f000				  -	      adc	pokey1offset,x	; take into account any pitch modification
     57  f000				  -	      sta	(pokeybaselo),y	; PAUDF0,0
     58  f000				  -
     59  f000				  -			;advance the data pointer +1
     60  f000				  -	      inc	pokey1pointlo,x
     61  f000				  -	      bne	skippokeyhiinc1
     62  f000				  -	      inc	pokey1pointhi,x
     63  f000				  -skippokeyhiinc1
     64  f000				  -
     65  f000				  -			; *** WAVE
     66  f000				  -	      lda	(pokey1pointlo,x)
     67  f000				  -	      asl
     68  f000				  -	      asl
     69  f000				  -	      asl
     70  f000				  -	      asl		; x16
     71  f000				  -
     72  f000				  -			;advance the data pointer +1
     73  f000				  -	      inc	pokey1pointlo,x
     74  f000				  -	      bne	skippokeyhiinc2
     75  f000				  -	      inc	pokey1pointhi,x
     76  f000				  -skippokeyhiinc2
     77  f000				  -
     78  f000				  -	      ora	(pokey1pointlo,x)
     79  f000				  -	      iny
     80  f000				  -	      sta	(pokeybaselo),y
     81  f000				  -
     82  f000				  -	      ora	inttemp1	; check if F|C|V=0
     83  f000				  -	      beq	zeropokeypoint	; if so, we're at the end of the sound.
     84  f000				  -
     85  f000				  -			; advance the pointer +1, on to the next sound chunk
     86  f000				  -	      inc	pokey1pointlo,x
     87  f000				  -	      bne	skippokeyhiinc3
     88  f000				  -	      inc	pokey1pointhi,x
     89  f000				  -skippokeyhiinc3
     90  f000				  -	      rts
     91  f000				  -
     92  f000				  -zeropokeypoint
     93  f000				  -	      sta	pokey1pointlo,x
     94  f000				  -	      sta	pokey1pointhi,x
     95  f000				  -	      sta	pokey1priority,x
     96  f000				  -	      rts
     97  f000				  -
     98  f000				  -schedulepokeysfx
     99  f000				  -	      ldx	#6
    100  f000				  -schedulepokeysfxloop
    101  f000				  -	      lda	pokey1pointlo,x
    102  f000				  -	      ora	pokey1pointhi,x
    103  f000				  -	      bne	schedulespokeysearch
    104  f000				  -	      jmp	schedulepokeyX	; we found an unused channel, so use it...
    105  f000				  -schedulespokeysearch
    106  f000				  -	      dex
    107  f000				  -	      dex
    108  f000				  -	      bpl	schedulepokeysfxloop
    109  f000				  -
    110  f000				  -			; if we're here, all 4 channels are presently playing a sound...
    111  f000				  -	      ldy	#1
    112  f000				  -	      lda	(sfxinstrumentlo),y	; peek at the priority of this sfx...
    113  f000				  -	      bne	schedulepokeysfxcont1
    114  f000				  -	      rts		; ...and skip it if it's 0 priority
    115  f000				  -schedulepokeysfxcont1
    116  f000				  -
    117  f000				  -			; figure out which current sound has the lowest priority...
    118  f000				  -	      lda	#0
    119  f000				  -	      sta	temp8
    120  f000				  -	      lda	pokey1priority
    121  f000				  -	      sta	temp9
    122  f000				  -	      ldx	#6
    123  f000				  -findlowprioritypokeyloop
    124  f000				  -	      lda	pokey1priority,x
    125  f000				  -	      cmp	temp9
    126  f000				  -	      bcs	findlowprioritypokeyloopcontinue
    127  f000				  -	      sta	temp9
    128  f000				  -	      stx	temp8
    129  f000				  -findlowprioritypokeyloopcontinue
    130  f000				  -	      dex
    131  f000				  -	      dex
    132  f000				  -	      bne	findlowprioritypokeyloop
    133  f000				  -	      ldx	temp8	; the low priority channel we'll interrupt
    134  f000				  -
    135  f000				  -schedulepokeyX
    136  f000				  -			;called with X=2*pokey channel to play on...
    137  f000				  -	      ldy	#1	; get priority and sound-resolution (in frames)
    138  f000				  -	      lda	(sfxinstrumentlo),y
    139  f000				  -	      sta	pokey1priority,x
    140  f000				  -	      iny
    141  f000				  -	      lda	(sfxinstrumentlo),y
    142  f000				  -	      sta	pokey1frames,x
    143  f000				  -
    144  f000				  -	      lda	sfxinstrumentlo
    145  f000				  -	      clc
    146  f000				  -	      adc	#3
    147  f000				  -	      sta	pokey1pointlo,x
    148  f000				  -	      lda	sfxinstrumenthi
    149  f000				  -	      adc	#0
    150  f000				  -	      sta	pokey1pointhi,x
    151  f000				  -	      lda	sfxpitchoffset
    152  f000				  -	      sta	pokey1offset,x
    153  f000				  -	      lda	#0
    154  f000				  -	      sta	pokey1tick,x
    155  f000				  -	      rts
    156  f000				  -
    157  f000				  -			; pokey detection routine. we check for pokey in the XBOARD/XM location,
    158  f000				  -			; and the standard $4000 location.
    159  f000				  -			; if pokey the pokey is present, this routine will reset it.
    160  f000				  -	      ifconst	pokeyaddress
    161  f000				  -detectpokeylocation
    162  f000				  -	      lda	#<pokeyaddress
    163  f000				  -	      sta	pokeybaselo
    164  f000				  -	      lda	#>pokeyaddress
    165  f000				  -	      sta	pokeybasehi
    166  f000				  -	      lda	#$ff
    167  f000				  -	      sta	pokeydetected
    168  f000				  -
    169  f000				  -	      if	pokeyaddress = $450
    170  f000				  -	      lda	XCTRL1s
    171  f000				  -	      ora	#%00010100
    172  f000				  -	      sta	XCTRL1s
    173  f000				  -	      sta	XCTRL1
    174  f000				  -	      endif
    175  f000				  -
    176  f000				  -
    177  f000				  -	      lda	#0
    178  f000				  -	      ldy	#15
    179  f000				  -clearpokeyloop
    180  f000				  -	      sta	(pokeybase),y
    181  f000				  -	      dey
    182  f000				  -	      bpl	clearpokeyloop
    183  f000				  -			; take pokey out of reset...
    184  f000				  -	      ldy	#PSKCTL
    185  f000				  -	      lda	#3
    186  f000				  -	      sta	(pokeybase),y
    187  f000				  -	      ldy	#PAUDCTL
    188  f000				  -	      lda	#0
    189  f000				  -	      sta	(pokeybase),y
    190  f000				  -	      rts
    191  f000				  -	      else		; !pokeyaddress
    192  f000				  -detectpokeylocation
    193  f000				  -			;XBoard/XM...
    194  f000				  -	      ldx	#2
    195  f000				  -detectpokeyloop
    196  f000				  -	      lda	XCTRL1s
    197  f000				  -	      ora	#%00010100
    198  f000				  -	      and	POKEYXMMASK,x
    199  f000				  -	      sta	XCTRL1s
    200  f000				  -	      sta	XCTRL1
    201  f000				  -
    202  f000				  -	      lda	POKEYCHECKLO,x
    203  f000				  -	      sta	pokeybaselo
    204  f000				  -	      lda	POKEYCHECKHI,x
    205  f000				  -	      sta	pokeybasehi
    206  f000				  -	      jsr	checkforpokey
    207  f000				  -	      lda	pokeydetected
    208  f000				  -	      beq	foundpokeychip
    209  f000				  -	      dex
    210  f000				  -	      bpl	detectpokeyloop
    211  f000				  -foundpokeychip
    212  f000				  -	      eor	#$ff	; invert state for 7800basic if...then test
    213  f000				  -	      sta	pokeydetected
    214  f000				  -	      rts
    215  f000				  -
    216  f000				  -POKEYXMMASK
    217  f000				  -			;     XM POKEY on    XM POKEY off   XM POKEY off
    218  f000				  -	      .byte	%11111111, %11101111, %11101111
    219  f000				  -
    220  f000				  -POKEYCHECKLO
    221  f000				  -	      .byte	<$0450, <$0450, <$4000
    222  f000				  -POKEYCHECKHI
    223  f000				  -	      .byte	>$0450, >$0450, >$4000
    224  f000				  -
    225  f000				  -checkforpokey
    226  f000				  -	      ldy	#$0f
    227  f000				  -	      lda	#$00
    228  f000				  -	      sta	pokeydetected	; start off by assuming pokey will be detected
    229  f000				  -resetpokeyregistersloop
    230  f000				  -	      sta	(pokeybase),y
    231  f000				  -	      dey
    232  f000				  -	      bpl	resetpokeyregistersloop
    233  f000				  -
    234  f000				  -	      ldy	#PAUDCTL
    235  f000				  -	      sta	(pokeybase),y
    236  f000				  -	      ldy	#PSKCTL
    237  f000				  -	      sta	(pokeybase),y
    238  f000				  -
    239  f000				  -			; let the dust settle...
    240  f000				  -	      nop
    241  f000				  -	      nop
    242  f000				  -	      nop
    243  f000				  -
    244  f000				  -	      lda	#4
    245  f000				  -	      sta	temp9
    246  f000				  -pokeycheckloop1
    247  f000				  -			; we're in reset, so the RANDOM register should read $ff...
    248  f000				  -	      ldy	#PRANDOM
    249  f000				  -	      lda	(pokeybase),y
    250  f000				  -	      cmp	#$ff
    251  f000				  -	      bne	nopokeydetected
    252  f000				  -	      dec	temp9
    253  f000				  -	      bne	pokeycheckloop1
    254  f000				  -
    255  f000				  -			; take pokey out of reset...
    256  f000				  -	      ldy	#PSKCTL
    257  f000				  -	      lda	#3
    258  f000				  -	      sta	(pokeybase),y
    259  f000				  -	      ldy	#PAUDCTL
    260  f000				  -	      lda	#0
    261  f000				  -	      sta	(pokeybase),y
    262  f000				  -
    263  f000				  -			; let the dust settle again...
    264  f000				  -	      nop
    265  f000				  -	      nop
    266  f000				  -	      nop
    267  f000				  -
    268  f000				  -	      lda	#4
    269  f000				  -	      sta	temp9
    270  f000				  -pokeycheckloop2
    271  f000				  -			; we're out of reset, so RANDOM should read non-$ff...
    272  f000				  -	      ldy	#PRANDOM
    273  f000				  -	      lda	(pokeybase),y
    274  f000				  -	      cmp	#$ff
    275  f000				  -	      beq	skippokeycheckreturn
    276  f000				  -	      rts
    277  f000				  -skippokeycheckreturn
    278  f000				  -	      dec	temp9
    279  f000				  -	      bne	pokeycheckloop2
    280  f000				  -nopokeydetected
    281  f000				  -	      dec	pokeydetected	; pokeydetected=#$ff
    282  f000				  -	      rts
    283  f000				  -
    284  f000				  -	      endif		; !pokeyaddress
    285  f000				  -
    286  f000				  -pokeysoundmoduleend
    287  f000				  -
    288  f000				  -	      echo	"  (pokeysound module is using ",[(pokeysoundmoduleend-pokeysoundmodulestart)]d," bytes)"
    289  f000				  -
    290  f000					      endif
------- FILE c:\Users\steve\OneDrive\Desktop\2018dev\7800\7800basic\projects\demo1\lesson2_2.78b.asm
   1399  f000					      endif
   1400  f000					      ifnconst	included.tracker.asm
------- FILE tracker.asm LEVEL 2 PASS 3
      0  f000					      include	tracker.asm
      1  f000							; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  f000
      3  f000
      4  f000				  -	      ifconst	MUSICTRACKER
      5  f000				  -
      6  f000				  -trackerstart
      7  f000				  -
      8  f000				  -			; ** songtempo lists how many 256ths of a frame a 16th note lasts
      9  f000				  -			; ** the player operates on a 16th note grid.
     10  f000				  -
     11  f000				  -servicesongover
     12  f000				  -	      rts
     13  f000				  -servicesong
     14  f000				  -	      lda	songtempo
     15  f000				  -	      beq	servicesongover	; ** if song is off/paused then return
     16  f000				  -servicesongcontinue
     17  f000				  -	      lda	sfxschedulelock
     18  f000				  -	      sta	sfxschedulemissed
     19  f000				  -	      bne	servicesongover
     20  f000				  -	      lda	songtempo
     21  f000				  -	      clc
     22  f000				  -	      adc	songtick	; add songtempo to songtick until it rolls over
     23  f000				  -	      sta	songtick	; this is how we break away from 50/60Hz timing.
     24  f000				  -	      bcc	servicesongover
     25  f000				  -			; ** if we're here a new 16th note has passed
     26  f000				  -			; ** check if a new note is due on any of the 4 channels
     27  f000				  -servicesongredo
     28  f000				  -	      ldx	#3
     29  f000				  -checkchannelloop
     30  f000				  -	      dec	songchannel1busywait,x
     31  f000				  -	      bpl	carryoncheckingchannel
     32  f000				  -	      txa
     33  f000				  -	      pha		; save X for the loop
     34  f000				  -	      jsr	processsongdata
     35  f000				  -	      pla		; restore X for the loop
     36  f000				  -	      tax
     37  f000				  -carryoncheckingchannel
     38  f000				  -	      dex
     39  f000				  -	      bpl	checkchannelloop
     40  f000				  -	      lda	inactivechannelcount
     41  f000				  -	      cmp	#15
     42  f000				  -	      bne	skipstopsong
     43  f000				  -	      lda	songloops
     44  f000				  -	      bne	doasongloop
     45  f000				  -			;lda #0
     46  f000				  -	      sta	songtempo	; all channels are done. stop the song
     47  f000				  -	      rts
     48  f000				  -doasongloop
     49  f000				  -	      bmi	skipsongloopadjust
     50  f000				  -	      dec	songloops
     51  f000				  -skipsongloopadjust
     52  f000				  -	      jsr	setsongchannels
     53  f000				  -	      jmp	servicesongredo
     54  f000				  -skipstopsong
     55  f000				  -	      rts
     56  f000				  -
     57  f000				  -processsongdata
     58  f000				  -			; channel needs processing
     59  f000				  -			; X=channel #
     60  f000				  -
     61  f000				  -	      txa
     62  f000				  -	      clc
     63  f000				  -	      adc	songchannel1stackdepth,x	; stack depth value will be 0, 4, or 8
     64  f000				  -	      tay
     65  f000				  -
     66  f000				  -
     67  f000				  -			; ** indirect x is cumbersome with mult-byte commands.
     68  f000				  -			; ** setup a pointer to the song data for indirect y addressing.
     69  f000				  -	      lda	songchannel1layer1lo,y
     70  f000				  -	      sta	songdatalo
     71  f000				  -	      lda	songchannel1layer1hi,y
     72  f000				  -	      sta	songdatahi
     73  f000				  -	      ora	songdatalo
     74  f000				  -	      bne	channelhasdata
     75  f000				  -			;channel data is pointing at $0000
     76  f000				  -	      lda	#$7F
     77  f000				  -	      sta	songchannel1busywait,x	; skip a bunch of notes
     78  f000				  -setchannelcountbits
     79  f000				  -	      lda	channel2bits,x
     80  f000				  -	      ora	inactivechannelcount
     81  f000				  -	      sta	inactivechannelcount
     82  f000				  -	      rts
     83  f000				  -channelhasdata
     84  f000				  -
     85  f000				  -	      sty	songstackindex
     86  f000				  -	      ldy	#0
     87  f000				  -	      lda	(songdatalo),y	; ** load in the next byte of song data, so we can decode it
     88  f000				  -	      cmp	#$ff
     89  f000				  -	      bne	carryoncheckingdatatype	; ** $ff=pattern end marker
     90  f000				  -	      jmp	handlechannelEOD
     91  f000				  -
     92  f000				  -carryoncheckingdatatype
     93  f000				  -	      and	#$F0
     94  f000				  -	      cmp	#$C0
     95  f000				  -	      beq	handlechannelrest	; 0000XXXX=rest
     96  f000				  -	      cmp	#$F0
     97  f000				  -	      beq	handlemultibytecommand
     98  f000				  -	      cmp	#$D0
     99  f000				  -	      beq	handlesemiup
    100  f000				  -	      cmp	#$E0
    101  f000				  -	      beq	handlesemidown
    102  f000				  -handlenotedata
    103  f000				  -			; ** TODO: note playing is a terrible choice for fall-through
    104  f000				  -
    105  f000				  -			; ** its simple note data, prepare arguments for schedulesfx
    106  f000				  -
    107  f000				  -			; ** set the note length
    108  f000				  -	      lda	(songdatalo),y
    109  f000				  -	      and	#$0F
    110  f000				  -	      sta	songchannel1busywait,x
    111  f000				  -
    112  f000				  -			; ** load the instrument
    113  f000				  -	      lda	songchannel1instrumentlo,x
    114  f000				  -	      sta	sfxinstrumentlo
    115  f000				  -	      lda	songchannel1instrumenthi,x
    116  f000				  -	      sta	sfxinstrumenthi
    117  f000				  -
    118  f000				  -			; ** get the note, and transpose
    119  f000				  -	      lda	(songdatalo),y
    120  f000				  -	      lsr
    121  f000				  -	      lsr
    122  f000				  -	      lsr
    123  f000				  -	      lsr
    124  f000				  -	      clc
    125  f000				  -	      adc	songchannel1transpose,x	; ** add it to the transpose index
    126  f000				  -			; ** its up the respective SFX scheduler to handle and save the note data
    127  f000				  -	      sta	sfxnoteindex
    128  f000				  -
    129  f000				  -	      lda	#0
    130  f000				  -	      sta	sfxpitchoffset
    131  f000				  -
    132  f000				  -	      jsr	schedulesfx
    133  f000				  -
    134  f000				  -	      jmp	advancethesongpointer1byte	; advance to the next data byte and exit
    135  f000				  -
    136  f000				  -handlechannelrest
    137  f000				  -			; ** set the note length
    138  f000				  -	      lda	(songdatalo),y
    139  f000				  -	      and	#$0F
    140  f000				  -	      sta	songchannel1busywait,x
    141  f000				  -	      jmp	advancethesongpointer1byte	; advance to the next data byte and exit
    142  f000				  -
    143  f000				  -handlesemiup
    144  f000				  -	      lda	(songdatalo),y	; ** reload the song data, so we can get at the lower nibble
    145  f000				  -	      and	#$0f	; ** since we need to mask the nibble of the subtracted value,
    146  f000				  -	      clc
    147  f000				  -handlesemidownentry
    148  f000				  -	      adc	songchannel1transpose,x	; ** add it to the transpose index
    149  f000				  -	      sta	songchannel1transpose,x
    150  f000				  -	      jsr	advancethesongpointer1byte
    151  f000				  -	      jmp	processsongdata	; semi doesn't have note length, so process the next data byte...
    152  f000				  -
    153  f000				  -handlesemidown
    154  f000				  -	      lda	(songdatalo),y	; ** reload the song data, so we can get at the lower nibble
    155  f000				  -	      and	#$0f	; ** since we need to mask the nibble of the subtracted value,
    156  f000				  -	      eor	#$ff	; ** its easier if we negate it, and then add it instead.
    157  f000				  -	      sec
    158  f000				  -	      jmp	handlesemidownentry
    159  f000				  -
    160  f000				  -handlemultibytecommand
    161  f000				  -	      lda	(songdatalo),y	; ** reload the song data, so we can get at the lower nibble
    162  f000				  -	      and	#$0f	; ** since we need to mask the nibble of the subtracted value,
    163  f000				  -	      cmp	#$08	; ** load new instrument?
    164  f000				  -	      bne	nothandleinstrumentchange
    165  f000				  -handleinstrumentchange
    166  f000				  -	      iny
    167  f000				  -	      lda	(songdatalo),y
    168  f000				  -	      sta	songchannel1instrumentlo,x
    169  f000				  -	      iny
    170  f000				  -	      lda	(songdatalo),y
    171  f000				  -	      sta	songchannel1instrumenthi,x
    172  f000				  -	      lda	#3
    173  f000				  -	      jsr	advancethesongpointerNbytes	; advance 3 bytes
    174  f000				  -	      jmp	processsongdata
    175  f000				  -
    176  f000				  -nothandleinstrumentchange
    177  f000				  -	      cmp	#$09	; ** absolute tempo change?
    178  f000				  -	      bne	nothandletempochange
    179  f000				  -	      lda	#0
    180  f000				  -	      sta	songtempo
    181  f000				  -handlerelativetempochange
    182  f000				  -	      iny
    183  f000				  -	      lda	(songdatalo),y
    184  f000				  -	      clc
    185  f000				  -	      adc	songtempo
    186  f000				  -	      sta	songtempo
    187  f000				  -	      lda	#2
    188  f000				  -	      jsr	advancethesongpointerNbytes	; advance 2 bytes
    189  f000				  -	      jmp	processsongdata
    190  f000				  -
    191  f000				  -nothandletempochange
    192  f000				  -	      cmp	#$0A	; ** relative tempo change?:
    193  f000				  -	      beq	handlerelativetempochange
    194  f000				  -	      cmp	#$0B	; ** octave/semi change?
    195  f000				  -	      beq	handleoctavesemichange
    196  f000				  -handlepatterndata
    197  f000				  -			; ** if we're here its a pattern/loop "subroutine"
    198  f000				  -			; ** move the channel's "stack" pointer and populate the new stack level
    199  f000				  -
    200  f000				  -	      lda	#4
    201  f000				  -	      clc
    202  f000				  -	      adc	songchannel1stackdepth,x
    203  f000				  -	      sta	songchannel1stackdepth,x	; stack depth value will be 0, 4, or 8
    204  f000				  -
    205  f000				  -	      stx	inttemp6	; about to invalidate x. save it.
    206  f000				  -	      lda	songstackindex
    207  f000				  -	      adc	#4
    208  f000				  -	      tax
    209  f000				  -
    210  f000				  -	      lda	(songdatalo),y
    211  f000				  -	      and	#$7
    212  f000				  -	      sta	songchannel1layer1loops,x
    213  f000				  -	      iny
    214  f000				  -	      lda	(songdatalo),y
    215  f000				  -	      sta	songchannel1layer1lo,x
    216  f000				  -	      iny
    217  f000				  -	      lda	(songdatalo),y
    218  f000				  -	      sta	songchannel1layer1hi,x
    219  f000				  -
    220  f000				  -	      ldx	inttemp6	; restore x with the channel #
    221  f000				  -
    222  f000				  -			; ** advance will operate on the old stack level, since we didn't store the updated songstackindex...
    223  f000				  -	      lda	#3
    224  f000				  -	      jsr	advancethesongpointerNbytes	; advance 3 bytes
    225  f000				  -
    226  f000				  -			; ** ...but the new stack level will be correctly picked up when we process the next byte.
    227  f000				  -	      jmp	processsongdata
    228  f000				  -
    229  f000				  -handlechannelEOD
    230  f000				  -			; ** check if there are loops remaining on the pattern
    231  f000				  -	      stx	inttemp6
    232  f000				  -	      ldx	songstackindex
    233  f000				  -	      dec	songchannel1layer1loops,x
    234  f000				  -	      bmi	handlechannelEODnoloop
    235  f000				  -			; ** loops are remaining. set the pattern pointer to the pattern start, which is contained after the EOD
    236  f000				  -	      iny
    237  f000				  -	      lda	(songdatalo),y
    238  f000				  -	      sta	songchannel1layer1lo,x
    239  f000				  -	      iny
    240  f000				  -	      lda	(songdatalo),y
    241  f000				  -	      sta	songchannel1layer1hi,x
    242  f000				  -	      ldx	inttemp6
    243  f000				  -	      jmp	processsongdata	; EOD handling doesn't have note length, so process the next data byte...
    244  f000				  -
    245  f000				  -handlechannelEODnoloop
    246  f000				  -			; this pattern/loop is done playing. "pop" the stack
    247  f000				  -	      ldx	inttemp6
    248  f000				  -	      lda	songchannel1stackdepth,x
    249  f000				  -	      beq	handlerootchannelEOD
    250  f000				  -	      sec
    251  f000				  -	      sbc	#4
    252  f000				  -	      sta	songchannel1stackdepth,x
    253  f000				  -	      jmp	processsongdata	; EOD handling doesn't have note length, so process the next data byte...
    254  f000				  -
    255  f000				  -handlerootchannelEOD
    256  f000				  -			; this channel is done. point it to $ff data so we no longer process this channel.
    257  f000				  -	      lda	#0
    258  f000				  -	      sta	songchannel1layer1lo,x
    259  f000				  -	      sta	songchannel1layer1hi,x
    260  f000				  -	      sta	songchannel1busywait,x
    261  f000				  -	      jmp	setchannelcountbits
    262  f000				  -	      rts
    263  f000				  -
    264  f000				  -nothandlepatternchange
    265  f000				  -handleoctavesemichange
    266  f000				  -	      iny
    267  f000				  -	      lda	(songdatalo),y
    268  f000				  -	      sta	songchannel1transpose,x
    269  f000				  -	      lda	#2
    270  f000				  -	      jsr	advancethesongpointerNbytes	; advance 2 bytes
    271  f000				  -	      jmp	processsongdata
    272  f000				  -
    273  f000				  -advancethesongpointer1byte
    274  f000				  -	      txa
    275  f000				  -	      ldx	songstackindex
    276  f000				  -	      inc	songchannel1layer1lo,x
    277  f000				  -	      bne	skiphiadvancethesongpointer1byte
    278  f000				  -	      inc	songchannel1layer1hi,x
    279  f000				  -skiphiadvancethesongpointer1byte
    280  f000				  -	      tax
    281  f000				  -	      rts
    282  f000				  -
    283  f000				  -advancethesongpointerNbytes
    284  f000				  -			; entered with A=# of byte to advance
    285  f000				  -	      stx	inttemp6
    286  f000				  -	      ldx	songstackindex
    287  f000				  -	      clc
    288  f000				  -	      adc	songchannel1layer1lo,x
    289  f000				  -	      sta	songchannel1layer1lo,x
    290  f000				  -	      lda	#0
    291  f000				  -	      adc	songchannel1layer1hi,x
    292  f000				  -	      sta	songchannel1layer1hi,x
    293  f000				  -	      ldx	inttemp6
    294  f000				  -	      rts
    295  f000				  -
    296  f000				  -clearsongmemory
    297  f000				  -	      lda	#0
    298  f000				  -	      ldx	#(songchannel4instrumenthi-songchannel1layer1lo)
    299  f000				  -clearsongmemoryloop1
    300  f000				  -	      sta	songchannel1layer1lo,x
    301  f000				  -	      dex
    302  f000				  -	      bpl	clearsongmemoryloop1
    303  f000				  -
    304  f000				  -	      ldx	#(songchannel4stackdepth-songchannel1layer1loops)
    305  f000				  -clearsongmemoryloop2
    306  f000				  -	      sta	songchannel1layer1loops,x
    307  f000				  -	      dex
    308  f000				  -	      bpl	clearsongmemoryloop2
    309  f000				  -
    310  f000				  -	      lda	#$ff
    311  f000				  -	      ldx	#3
    312  f000				  -clearsongmemoryloop3
    313  f000				  -	      sta	songchannel1busywait,x
    314  f000				  -	      dex
    315  f000				  -	      bpl	clearsongmemoryloop3
    316  f000				  -	      rts
    317  f000				  -
    318  f000				  -setsongchannels
    319  f000				  -	      jsr	clearsongmemory
    320  f000				  -	      ldy	#7
    321  f000				  -	      ldx	#3
    322  f000				  -setsongchannelsloop
    323  f000				  -	      lda	(songpointerlo),y
    324  f000				  -	      sta	songchannel1layer1hi,x
    325  f000				  -	      dey
    326  f000				  -	      lda	(songpointerlo),y
    327  f000				  -	      sta	songchannel1layer1lo,x
    328  f000				  -	      dex
    329  f000				  -	      dey
    330  f000				  -	      bpl	setsongchannelsloop
    331  f000				  -	      rts
    332  f000				  -
    333  f000				  -channel2bits
    334  f000				  -	      .byte	1,2,4,8
    335  f000				  -
    336  f000				  -tiatrackeroctavenotes
    337  f000				  -	      ifconst	BUZZBASS
    338  f000				  -LOWC       =	15
    339  f000				  -	      else
    340  f000				  -LOWC       =	14
    341  f000				  -	      endif
    342  f000				  -			; ****** ELECTRONIC (0 to 11)
    343  f000				  -	      .byte	LOWC,20	; c0	 16.1Hz
    344  f000				  -	      .byte	LOWC,18	; c#0
    345  f000				  -	      .byte	LOWC,17	; d0
    346  f000				  -	      .byte	LOWC,16	; d#0
    347  f000				  -	      .byte	LOWC,15	; e0
    348  f000				  -	      .byte	LOWC,14	; f0  (very off)
    349  f000				  -	      .byte	LOWC,14	; f#0
    350  f000				  -	      .byte	LOWC,13	; g0
    351  f000				  -	      .byte	LOWC,12	; g#0
    352  f000				  -	      .byte	LOWC,11	; a0
    353  f000				  -	      .byte	LOWC,11	; a#0 (very off)
    354  f000				  -	      .byte	LOWC,10	; b0	 30.7Hz
    355  f000				  -
    356  f000				  -			; ****** SLIGHTLY BUZZY (12 to 23)
    357  f000				  -	      .byte	6,30	; c1	 32.7Hz
    358  f000				  -	      .byte	6,28	; c#1
    359  f000				  -	      .byte	6,27	; d1
    360  f000				  -	      .byte	6,25	; d#1
    361  f000				  -	      .byte	6,24	; e1
    362  f000				  -	      .byte	6,22	; f1
    363  f000				  -	      .byte	6,21	; f#1
    364  f000				  -	      .byte	6,20	; g1
    365  f000				  -	      .byte	6,18	; g#1
    366  f000				  -	      .byte	6,17	; a1
    367  f000				  -	      .byte	6,16	; a#1
    368  f000				  -	      .byte	6,15	; b1	 63.4Hz
    369  f000				  -
    370  f000				  -			; ****** BUZZY (24 to 39)
    371  f000				  -	      .byte	1,31	; c2	 65.5
    372  f000				  -	      .byte	1,30	; c#2	 67.6
    373  f000				  -	      .byte	1,27	; d2	 72.3
    374  f000				  -	      .byte	1,26	; d#2	 77.6
    375  f000				  -	      .byte	1,24	; e2
    376  f000				  -	      .byte	1,23	; f2
    377  f000				  -	      .byte	1,22	; f#2
    378  f000				  -	      .byte	1,20	; g2
    379  f000				  -	      .byte	1,19	; g#2
    380  f000				  -	      .byte	1,18	; a2
    381  f000				  -	      .byte	1,17	; a#2
    382  f000				  -	      .byte	1,16	; b2
    383  f000				  -	      .byte	1,15	; c3	126.8Hz
    384  f000				  -	      .byte	1,14	; c#3
    385  f000				  -	      .byte	1,13	; d3	149.7Hz
    386  f000				  -	      .byte	1,12	; d#3	161.2Hz (very off)
    387  f000				  -			; ****** PURE (40 to 71) - best key is A3 Major
    388  f000				  -	      .byte	12,31	; e3	163.8Hz
    389  f000				  -	      .byte	12,29	; f3
    390  f000				  -	      .byte	12,28	; f#3
    391  f000				  -	      .byte	12,26	; g3
    392  f000				  -	      .byte	12,24	; g#3
    393  f000				  -	      .byte	12,23	; a3  songs in key of A benefit from Perceptual Tuning
    394  f000				  -	      .byte	12,22	; a#3
    395  f000				  -	      .byte	12,20	; b3
    396  f000				  -	      .byte	12,19	; c4  (middle C)
    397  f000				  -	      .byte	12,18	; c#4
    398  f000				  -	      .byte	12,17	; d4
    399  f000				  -	      .byte	12,16	; d#4
    400  f000				  -	      .byte	12,15	; e4
    401  f000				  -	      .byte	12,14	; f4
    402  f000				  -	      .byte	12,13	; f#4
    403  f000				  -	      .byte	12,12	; g4  (very off)
    404  f000				  -	      .byte	12,12	; g#4
    405  f000				  -	      .byte	12,11	; a4
    406  f000				  -	      .byte	12,10	; a#4
    407  f000				  -	      .byte	4,31	; b4
    408  f000				  -	      .byte	4,29	; c5
    409  f000				  -	      .byte	4,28	; c#5
    410  f000				  -	      .byte	4,26	; d5
    411  f000				  -	      .byte	4,24	; d#5
    412  f000				  -	      .byte	4,23	; e5
    413  f000				  -	      .byte	4,22	; f5
    414  f000				  -	      .byte	4,20	; f#5
    415  f000				  -	      .byte	4,19	; g5
    416  f000				  -	      .byte	4,18	; g#5
    417  f000				  -	      .byte	4,17	; a5
    418  f000				  -	      .byte	4,16	; a#5
    419  f000				  -	      .byte	4,15	; b5
    420  f000				  -
    421  f000				  -			; ****** TUNED WIND (72 to 83)
    422  f000				  -	      .byte	8,30	; c
    423  f000				  -	      .byte	8,28	; c#
    424  f000				  -	      .byte	8,27	; d
    425  f000				  -	      .byte	8,25	; d#
    426  f000				  -	      .byte	8,24	; e
    427  f000				  -	      .byte	8,22	; f
    428  f000				  -	      .byte	8,21	; f#
    429  f000				  -	      .byte	8,20	; g
    430  f000				  -	      .byte	8,18	; g#
    431  f000				  -	      .byte	8,17	; a
    432  f000				  -	      .byte	8,16	; a#
    433  f000				  -	      .byte	8,15	; b
    434  f000				  -
    435  f000				  -	      include	"tiadrumkit.asm"
    436  f000				  -
    437  f000				  -trackerend
    438  f000				  -
    439  f000				  -	      echo	"  (tracker module is using ",[(trackerend-trackerstart)]d," bytes)"
    440  f000				  -
    441  f000					      endif		;MUSICTRACKER
------- FILE c:\Users\steve\OneDrive\Desktop\2018dev\7800\7800basic\projects\demo1\lesson2_2.78b.asm
   1402  f000					      endif
   1403  f000					      ifnconst	included.hiscore.asm
------- FILE hiscore.asm LEVEL 2 PASS 3
      0  f000					      include	hiscore.asm
      1  f000							; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  f000
      3  f000				  -	      ifconst	HSSUPPORT
      4  f000				  -
      5  f000				  -	      ifconst	BANKSETROM
      6  f000				  -	      ifconst	isBANKSETBANK
      7  f000				  -HSCHARSHERE =	1
      8  f000				  -	      endif
      9  f000				  -	      else		; !BANKSETROM so embed the character strings
     10  f000				  -HSCHARSHERE =	1
     11  f000				  -	      endif
     12  f000				  -
     13  f000				  -	      ifnconst	isBANKSETBANK
     14  f000				  -hiscorestart
     15  f000				  -
     16  f000				  -detectatarivoxeeprom
     17  f000				  -hiscoremodulestart
     18  f000				  -			; do a test to see if atarivox eeprom can be accessed, and save results
     19  f000				  -	      jsr	AVoxDetect
     20  f000				  -	      eor	#$ff	; invert for easy 7800basic if...then logic
     21  f000				  -	      sta	avoxdetected
     22  f000				  -	      lda	#$0
     23  f000				  -	      sta	SWACNT
     24  f000				  -	      lda	avoxdetected
     25  f000				  -	      rts
     26  f000				  -
     27  f000				  -detecthsc
     28  f000				  -			; check for the HSC ROM signature...
     29  f000				  -	      lda	XCTRL1s
     30  f000				  -	      ora	#%00001100
     31  f000				  -	      sta	XCTRL1s
     32  f000				  -	      sta	XCTRL1
     33  f000				  -	      lda	$3900
     34  f000				  -	      eor	#$C6
     35  f000				  -	      bne	detecthscfail
     36  f000				  -	      lda	$3904
     37  f000				  -	      eor	#$FE
     38  f000				  -	      bne	detecthscfail
     39  f000				  -			; check if it's initialized...
     40  f000				  -	      ldy	#0
     41  f000				  -	      lda	#$ff
     42  f000				  -checkhscinit
     43  f000				  -	      and	$1000,y
     44  f000				  -	      dey
     45  f000				  -	      bpl	checkhscinit
     46  f000				  -	      cmp	#$ff
     47  f000				  -	      bne	hscisalreadyinit
     48  f000				  -			; if we're here, we need to do a minimal HSC init...
     49  f000				  -	      ldy	#$28
     50  f000				  -hscinitloop1
     51  f000				  -	      lda	hscheader,y
     52  f000				  -	      sta	$1000,y
     53  f000				  -	      dey
     54  f000				  -	      bpl	hscinitloop1
     55  f000				  -	      ldy	#$89
     56  f000				  -	      lda	#$7F
     57  f000				  -hscinitloop2
     58  f000				  -	      sta	$10B3,y
     59  f000				  -	      dey
     60  f000				  -	      cpy	#$ff
     61  f000				  -	      bne	hscinitloop2
     62  f000				  -hscisalreadyinit
     63  f000				  -	      lda	#$ff
     64  f000				  -	      rts
     65  f000				  -hscheader
     66  f000				  -	      .byte	$00,$00,$68,$83,$AA,$55,$9C,$FF,$07,$12,$02,$1F,$00,$00,$00,$00
     67  f000				  -	      .byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     68  f000				  -	      .byte	$00,$00,$00,$00,$00,$00,$00,$00,$03
     69  f000				  -detecthscfail
     70  f000				  -	      lda	XCTRL1s
     71  f000				  -	      and	#%11110111
     72  f000				  -	      sta	XCTRL1s
     73  f000				  -	      lda	#0
     74  f000				  -	      rts
     75  f000				  -	      endif		; isBANKSETBANK
     76  f000				  -
     77  f000				  -	      ifnconst	hiscorefont
     78  f000				  -	      echo	""
     79  f000				  -	      echo	"WARNING: High score support is enabled, but the hiscorefont.png was"
     80  f000				  -	      echo	" NOT imported with incgraphic. The high score display code"
     81  f000				  -	      echo	" has been omitted from this build."
     82  f000				  -	      echo	""
     83  f000				  -	      else		; hiscorefont
     84  f000				  -	      ifnconst	isBANKSETBANK
     85  f000				  -hscdrawscreen
     86  f000				  -
     87  f000				  -			; we use 20 lines on a 24 line display
     88  f000				  -			; HSSCOREY to dynamically centers based on
     89  f000				  -			;HSSCOREY = 0
     90  f000				  -HSSCOREY   =	((WZONECOUNT*WZONEHEIGHT/8)-22)/2
     91  f000				  -HSCURSORY  =	((HSSCOREY/(WZONEHEIGHT/8))*WZONEHEIGHT)
     92  f000				  -
     93  f000				  -	      ifconst	HSSCORESIZE
     94  f000				  -SCORESIZE  =	HSSCORESIZE
     95  f000				  -	      else
     96  f000				  -SCORESIZE  =	6
     97  f000				  -	      endif
     98  f000				  -
     99  f000				  -			;save shadow registers for later return...
    100  f000				  -	      lda	sCTRL
    101  f000				  -	      sta	ssCTRL
    102  f000				  -	      lda	sCHARBASE
    103  f000				  -	      sta	ssCHARBASE
    104  f000				  -	      lda	#$60
    105  f000				  -	      sta	charactermode
    106  f000				  -	      jsr	drawwait
    107  f000				  -	      jsr	blacken320colors
    108  f000				  -	      jsr	clearscreen
    109  f000				  -
    110  f000				  -			;set the character base to the HSC font
    111  f000				  -	      lda	#>hiscorefont
    112  f000				  -	      sta	CHARBASE
    113  f000				  -	      sta	sCHARBASE
    114  f000				  -	      lda	#%01000011	;Enable DMA, mode=320A
    115  f000				  -	      sta	CTRL
    116  f000				  -	      sta	sCTRL
    117  f000				  -
    118  f000				  -	      lda	#60
    119  f000				  -	      sta	hsjoydebounce
    120  f000				  -
    121  f000				  -	      lda	#0
    122  f000				  -	      sta	hscursorx
    123  f000				  -	      sta	framecounter
    124  f000				  -	      ifnconst	HSCOLORCHASESTART
    125  f000				  -	      lda	#$8D	; default is blue. why not?
    126  f000				  -	      else
    127  f000				  -	      lda	#HSCOLORCHASESTART
    128  f000				  -	      endif
    129  f000				  -	      sta	hscolorchaseindex
    130  f000				  -
    131  f000				  -	      lda	#$0F
    132  f000				  -	      sta	P0C2	; base text is white
    133  f000				  -
    134  f000				  -	      jsr	hschasecolors
    135  f000				  -			; ** plot all of the initials
    136  f000				  -	      lda	#<HSRAMInitials
    137  f000				  -	      sta	temp1	; charmaplo
    138  f000				  -	      lda	#>HSRAMInitials
    139  f000				  -	      sta	temp2	; charmaphi
    140  f000				  -	      lda	#32+29	; palette=0-29 | 32-(width=3)
    141  f000				  -	      sta	temp3	; palette/width
    142  f000				  -	      lda	#104
    143  f000				  -	      sta	temp4	; X
    144  f000				  -	      lda	#((HSSCOREY+6)/(WZONEHEIGHT/8))
    145  f000				  -	      sta	temp5	; Y
    146  f000				  -plothsinitialsloop
    147  f000				  -	      jsr	plotcharacters
    148  f000				  -	      clc
    149  f000				  -	      lda	temp3
    150  f000				  -	      adc	#32
    151  f000				  -	      sta	temp3
    152  f000				  -	      inc	temp5
    153  f000				  -	      if	WZONEHEIGHT = 8
    154  f000				  -	      inc	temp5
    155  f000				  -	      endif
    156  f000				  -	      clc
    157  f000				  -	      lda	#3
    158  f000				  -	      adc	temp1
    159  f000				  -	      sta	temp1
    160  f000				  -	      cmp	#(<(HSRAMInitials+15))
    161  f000				  -	      bcc	plothsinitialsloop
    162  f000				  -
    163  f000				  -	      ifconst	HSGAMENAMELEN
    164  f000				  -			;plot the game name...
    165  f000				  -	      lda	#<HSGAMENAMEtable
    166  f000				  -	      sta	temp1	; charmaplo
    167  f000				  -	      lda	#>HSGAMENAMEtable
    168  f000				  -	      sta	temp2	; charmaphi
    169  f000				  -	      lda	#(32-HSGAMENAMELEN)	; palette=0*29 | 32-(width=3)
    170  f000				  -	      sta	temp3	; palette/width
    171  f000				  -	      lda	#(80-(HSGAMENAMELEN*2))
    172  f000				  -	      sta	temp4	; X
    173  f000				  -	      lda	#((HSSCOREY+0)/(WZONEHEIGHT/8))
    174  f000				  -	      sta	temp5	; Y
    175  f000				  -	      jsr	plotcharacters
    176  f000				  -	      endif		; HSGAMENAMELEN
    177  f000				  -
    178  f000				  -			;plot "difficulty"...
    179  f000				  -	      ldy	gamedifficulty
    180  f000				  -	      ifnconst	HSNOLEVELNAMES
    181  f000				  -	      lda	highscoredifficultytextlo,y
    182  f000				  -	      sta	temp1
    183  f000				  -	      lda	highscoredifficultytexthi,y
    184  f000				  -	      sta	temp2
    185  f000				  -	      sec
    186  f000				  -	      lda	#32
    187  f000				  -	      sbc	highscoredifficultytextlen,y
    188  f000				  -	      sta	temp3	; palette/width
    189  f000				  -	      sec
    190  f000				  -	      lda	#40
    191  f000				  -	      sbc	highscoredifficultytextlen,y
    192  f000				  -	      asl
    193  f000				  -	      sta	temp4	; X
    194  f000				  -	      else
    195  f000				  -	      lda	#<HSHIGHSCOREStext
    196  f000				  -	      sta	temp1	; charmaplo
    197  f000				  -	      lda	#>HSHIGHSCOREStext
    198  f000				  -	      sta	temp2	; charmaphi
    199  f000				  -	      lda	#(32-11)	; palette=0*29 | 32-(width=3)
    200  f000				  -	      sta	temp3	; palette/width
    201  f000				  -	      lda	#(80-(11*2))
    202  f000				  -	      sta	temp4	; X
    203  f000				  -	      endif		; HSNOLEVELNAMES
    204  f000				  -
    205  f000				  -	      lda	#((HSSCOREY+2)/(WZONEHEIGHT/8))
    206  f000				  -	      sta	temp5	; Y
    207  f000				  -	      jsr	plotcharacters
    208  f000				  -	      ldy	hsdisplaymode	; 0=attact mode, 1=player eval, 2=player 1 eval, 3=player 2 player eval, 4=player 2 player evel (joy1)
    209  f000				  -	      bne	carronwithscoreevaluation
    210  f000				  -	      jmp	donoscoreevaluation
    211  f000				  -carronwithscoreevaluation
    212  f000				  -	      dey
    213  f000				  -	      lda	highscorelabeltextlo,y
    214  f000				  -	      sta	temp1
    215  f000				  -	      lda	highscorelabeltexthi,y
    216  f000				  -	      sta	temp2
    217  f000				  -	      sec
    218  f000				  -	      lda	#(32-15)	; palette=0*29 | 32-(width=3)
    219  f000				  -	      sta	temp3	; palette/width
    220  f000				  -	      lda	highscorelabeladjust1,y
    221  f000				  -	      sta	temp4	; X
    222  f000				  -	      lda	#((HSSCOREY+18)/(WZONEHEIGHT/8))
    223  f000				  -	      sta	temp5	; Y
    224  f000				  -	      jsr	plotcharacters
    225  f000				  -
    226  f000				  -	      ldy	hsdisplaymode	; 0=attact mode, 1=player eval, 2=player 1 eval, 3=player 2 player eval, 4=player 2 player evel (joy1)
    227  f000				  -	      dey
    228  f000				  -			;plot the current player score...
    229  f000				  -	      lda	#(32-SCORESIZE)	; palette=0*32
    230  f000				  -	      sta	temp3	; palette/width
    231  f000				  -	      lda	highscorelabeladjust2,y
    232  f000				  -	      sta	temp4	; X
    233  f000				  -	      lda	#((HSSCOREY+18)/(WZONEHEIGHT/8))
    234  f000				  -	      sta	temp5	; Y
    235  f000				  -
    236  f000				  -	      lda	scorevarlo,y
    237  f000				  -	      sta	temp7	; score variable lo
    238  f000				  -	      lda	scorevarhi,y
    239  f000				  -	      sta	temp8	; score variable hi
    240  f000				  -
    241  f000				  -	      lda	#(hiscorefont_mode | %01100000)	; charactermode
    242  f000				  -	      sta	temp9
    243  f000				  -
    244  f000				  -	      lda	#<(hiscorefont+33)	; +33 to get to '0' character
    245  f000				  -	      sta	temp1	; charmaplo
    246  f000				  -	      lda	#>(hiscorefont+33)
    247  f000				  -	      sta	temp2	; charmaphi
    248  f000				  -	      lda	#SCORESIZE
    249  f000				  -	      sta	temp6
    250  f000				  -	      ifnconst	DOUBLEWIDE
    251  f000				  -	      jsr	plotvalue
    252  f000				  -	      else
    253  f000				  -	      jsr	plotvaluedw
    254  f000				  -	      endif
    255  f000				  -
    256  f000				  -USED_PLOTVALUE =	1	; ensure that plotvalue gets compiled in
    257  f000				  -
    258  f000				  -	      ifconst	HSGAMERANKS
    259  f000				  -
    260  f000				  -	      ldx	#$ff	; start at 0 after the inx...
    261  f000				  -comparescore2rankloop
    262  f000				  -	      inx
    263  f000				  -	      ldy	#0
    264  f000				  -	      lda	rankvalue_0,x
    265  f000				  -	      cmp	(temp7),y
    266  f000				  -	      bcc	score2rankloopdone
    267  f000				  -	      bne	comparescore2rankloop
    268  f000				  -	      iny
    269  f000				  -	      lda	rankvalue_1,x
    270  f000				  -	      cmp	(temp7),y
    271  f000				  -	      bcc	score2rankloopdone
    272  f000				  -	      bne	comparescore2rankloop
    273  f000				  -	      iny
    274  f000				  -	      lda	(temp7),y
    275  f000				  -	      cmp	rankvalue_2,x
    276  f000				  -	      bcs	score2rankloopdone
    277  f000				  -	      jmp	comparescore2rankloop
    278  f000				  -score2rankloopdone
    279  f000				  -	      stx	hsnewscorerank
    280  f000				  -
    281  f000				  -	      lda	ranklabello,x
    282  f000				  -	      sta	temp1
    283  f000				  -	      lda	ranklabelhi,x
    284  f000				  -	      sta	temp2
    285  f000				  -	      sec
    286  f000				  -	      lda	#32	; palette=0*29 | 32-(width=3)
    287  f000				  -	      sbc	ranklabellengths,x
    288  f000				  -	      sta	temp3	; palette/width
    289  f000				  -	      sec
    290  f000				  -	      lda	#(40+6)
    291  f000				  -	      sbc	ranklabellengths,x
    292  f000				  -	      asl
    293  f000				  -	      sta	temp4	; X
    294  f000				  -	      lda	#((HSSCOREY+20)/(WZONEHEIGHT/8))
    295  f000				  -	      sta	temp5	; Y
    296  f000				  -	      jsr	plotcharacters
    297  f000				  -
    298  f000				  -	      ldx	hsnewscorerank
    299  f000				  -
    300  f000				  -	      lda	#<highscoreranklabel
    301  f000				  -	      sta	temp1
    302  f000				  -	      lda	#>highscoreranklabel
    303  f000				  -	      sta	temp2
    304  f000				  -
    305  f000				  -	      lda	#(32-5)	; palette=0*29 | 32-(width=3)
    306  f000				  -	      sta	temp3	; palette/width
    307  f000				  -	      lda	#(40-6)
    308  f000				  -	      sec
    309  f000				  -	      sbc	ranklabellengths,x
    310  f000				  -	      asl
    311  f000				  -	      sta	temp4	; X
    312  f000				  -	      lda	#((HSSCOREY+20)/(WZONEHEIGHT/8))
    313  f000				  -	      sta	temp5	; Y
    314  f000				  -	      jsr	plotcharacters
    315  f000				  -	      endif		; HSGAMERANKS
    316  f000				  -
    317  f000				  -
    318  f000				  -			; ** which line did this player beat?
    319  f000				  -	      lda	#$ff
    320  f000				  -	      sta	hsnewscoreline
    321  f000				  -	      ldx	#$fd
    322  f000				  -comparescoreadd2x
    323  f000				  -	      inx
    324  f000				  -comparescoreadd1x
    325  f000				  -	      inx
    326  f000				  -comparescore2lineloop
    327  f000				  -	      inc	hsnewscoreline
    328  f000				  -	      inx		; initialrun, x=0
    329  f000				  -	      cpx	#15
    330  f000				  -	      beq	nohighscoreforyou
    331  f000				  -	      ldy	#0
    332  f000				  -	      lda	HSRAMScores,x
    333  f000				  -	      cmp	(temp7),y	; first score digit
    334  f000				  -	      bcc	score2lineloopdonedel1x
    335  f000				  -	      bne	comparescoreadd2x
    336  f000				  -	      iny
    337  f000				  -	      inx
    338  f000				  -	      lda	HSRAMScores,x
    339  f000				  -	      cmp	(temp7),y
    340  f000				  -	      bcc	score2lineloopdonedel2x
    341  f000				  -	      bne	comparescoreadd1x
    342  f000				  -	      iny
    343  f000				  -	      inx
    344  f000				  -	      lda	(temp7),y
    345  f000				  -	      cmp	HSRAMScores,x
    346  f000				  -	      bcs	score2lineloopdonedel3x
    347  f000				  -	      jmp	comparescore2lineloop
    348  f000				  -nohighscoreforyou
    349  f000				  -	      lda	#$ff
    350  f000				  -	      sta	hsnewscoreline
    351  f000				  -	      sta	countdownseconds
    352  f000				  -	      jmp	donoscoreevaluation
    353  f000				  -score2lineloopdonedel3x
    354  f000				  -	      dex
    355  f000				  -score2lineloopdonedel2x
    356  f000				  -	      dex
    357  f000				  -score2lineloopdonedel1x
    358  f000				  -	      dex
    359  f000				  -
    360  f000				  -			; 0 1 2
    361  f000				  -			; 3 4 5
    362  f000				  -			; 6 7 8
    363  f000				  -			; 9 0 1
    364  f000				  -			; 2 3 4
    365  f000				  -
    366  f000				  -	      stx	temp9
    367  f000				  -	      cpx	#11
    368  f000				  -	      beq	postsortscoresuploop
    369  f000				  -	      ldx	#11
    370  f000				  -sortscoresuploop
    371  f000				  -	      lda	HSRAMScores,x
    372  f000				  -	      sta	HSRAMScores+3,x
    373  f000				  -	      lda	HSRAMInitials,x
    374  f000				  -	      sta	HSRAMInitials+3,x
    375  f000				  -	      dex
    376  f000				  -	      cpx	temp9
    377  f000				  -	      bne	sortscoresuploop
    378  f000				  -postsortscoresuploop
    379  f000				  -
    380  f000				  -			;stick the score and cleared initials in the slot...
    381  f000				  -	      inx
    382  f000				  -	      ldy	#0
    383  f000				  -	      sty	hsinitialhold
    384  f000				  -	      lda	(temp7),y
    385  f000				  -	      sta	HSRAMScores,x
    386  f000				  -	      iny
    387  f000				  -	      lda	(temp7),y
    388  f000				  -	      sta	HSRAMScores+1,x
    389  f000				  -	      iny
    390  f000				  -	      lda	(temp7),y
    391  f000				  -	      sta	HSRAMScores+2,x
    392  f000				  -	      lda	#0
    393  f000				  -	      sta	HSRAMInitials,x
    394  f000				  -	      lda	#29
    395  f000				  -	      sta	HSRAMInitials+1,x
    396  f000				  -	      sta	HSRAMInitials+2,x
    397  f000				  -
    398  f000				  -	      stx	hsinitialpos
    399  f000				  -
    400  f000				  -	      ifconst	vox_highscore
    401  f000				  -	      lda	<#vox_highscore
    402  f000				  -	      sta	speech_addr
    403  f000				  -	      lda	>#vox_highscore
    404  f000				  -	      sta	speech_addr+1
    405  f000				  -	      endif		; vox_highscore
    406  f000				  -	      ifconst	sfx_highscore
    407  f000				  -	      lda	<#sfx_highscore
    408  f000				  -	      sta	temp1
    409  f000				  -	      lda	>#sfx_highscore
    410  f000				  -	      sta	temp2
    411  f000				  -	      lda	#0
    412  f000				  -	      sta	temp3
    413  f000				  -	      jsr	schedulesfx
    414  f000				  -	      endif		; sfx_highscore
    415  f000				  -	      ifconst	songdatastart_song_highscore
    416  f000				  -	      lda	#<songchanneltable_song_highscore
    417  f000				  -	      sta	songpointerlo
    418  f000				  -	      lda	#>songchanneltable_song_highscore
    419  f000				  -	      sta	songpointerhi
    420  f000				  -	      lda	#73
    421  f000				  -	      sta	songtempo
    422  f000				  -	      jsr	setsongchannels
    423  f000				  -	      endif		; songdatastart_song_highscore
    424  f000				  -
    425  f000				  -
    426  f000				  -donoscoreevaluation
    427  f000				  -
    428  f000				  -	      lda	#(32+(32-SCORESIZE))	; palette=0*32 | 32-(width=6)
    429  f000				  -	      sta	temp3	; palette/width
    430  f000				  -	      lda	#(72+(4*(6-SCORESIZE)))
    431  f000				  -	      sta	temp4	; X
    432  f000				  -	      lda	#((HSSCOREY+6)/(WZONEHEIGHT/8))
    433  f000				  -	      sta	temp5	; Y
    434  f000				  -	      lda	#<HSRAMScores
    435  f000				  -	      sta	temp7	; score variable lo
    436  f000				  -	      lda	#>HSRAMScores
    437  f000				  -	      sta	temp8	; score variable hi
    438  f000				  -	      lda	#(hiscorefont_mode | %01100000)	; charactermode
    439  f000				  -	      sta	temp9
    440  f000				  -plothsscoresloop
    441  f000				  -	      lda	#<(hiscorefont+33)	; +33 to get to '0' character
    442  f000				  -	      sta	temp1	; charmaplo
    443  f000				  -	      lda	#>(hiscorefont+33)
    444  f000				  -	      sta	temp2	; charmaphi
    445  f000				  -	      lda	#6
    446  f000				  -	      sta	temp6
    447  f000				  -	      ifnconst	DOUBLEWIDE
    448  f000				  -	      jsr	plotvalue
    449  f000				  -	      else
    450  f000				  -	      jsr	plotvaluedw
    451  f000				  -	      endif
    452  f000				  -	      clc
    453  f000				  -	      lda	temp3
    454  f000				  -	      adc	#32
    455  f000				  -	      sta	temp3
    456  f000				  -	      inc	temp5
    457  f000				  -	      if	WZONEHEIGHT = 8
    458  f000				  -	      inc	temp5
    459  f000				  -	      endif
    460  f000				  -	      clc
    461  f000				  -	      lda	#3
    462  f000				  -	      adc	temp7
    463  f000				  -	      sta	temp7
    464  f000				  -	      cmp	#(<(HSRAMScores+15))
    465  f000				  -	      bcc	plothsscoresloop
    466  f000				  -plothsindex
    467  f000				  -	      lda	#32+31	; palette=0*32 | 32-(width=1)
    468  f000				  -	      sta	temp3	; palette/width
    469  f000				  -	      lda	#44
    470  f000				  -	      sta	temp4	; X
    471  f000				  -	      lda	#((HSSCOREY+6)/(WZONEHEIGHT/8))
    472  f000				  -	      sta	temp5	; Y
    473  f000				  -	      lda	#<hsgameslotnumbers
    474  f000				  -	      sta	temp7	; score variable lo
    475  f000				  -	      lda	#>hsgameslotnumbers
    476  f000				  -	      sta	temp8	; score variable hi
    477  f000				  -	      lda	#(hiscorefont_mode | %01100000)	; charactermode
    478  f000				  -	      sta	temp9
    479  f000				  -plothsindexloop
    480  f000				  -	      lda	#<(hiscorefont+33)
    481  f000				  -	      sta	temp1	; charmaplo
    482  f000				  -	      lda	#>(hiscorefont+33)
    483  f000				  -	      sta	temp2	; charmaphi
    484  f000				  -	      lda	#1
    485  f000				  -	      sta	temp6	; number of characters
    486  f000				  -	      ifnconst	DOUBLEWIDE
    487  f000				  -	      jsr	plotvalue
    488  f000				  -	      else
    489  f000				  -	      jsr	plotvaluedw
    490  f000				  -	      endif
    491  f000				  -	      clc
    492  f000				  -	      lda	temp3
    493  f000				  -	      adc	#32
    494  f000				  -	      sta	temp3
    495  f000				  -	      inc	temp5
    496  f000				  -	      if	WZONEHEIGHT = 8
    497  f000				  -	      inc	temp5
    498  f000				  -	      endif
    499  f000				  -	      inc	temp7
    500  f000				  -	      lda	temp7
    501  f000				  -	      cmp	#(<(hsgameslotnumbers+5))
    502  f000				  -	      bcc	plothsindexloop
    503  f000				  -
    504  f000				  -	      jsr	savescreen
    505  f000				  -	      ifnconst	HSSECONDS
    506  f000				  -	      lda	#6
    507  f000				  -	      else
    508  f000				  -	      lda	#HSSECONDS
    509  f000				  -	      endif
    510  f000				  -
    511  f000				  -	      sta	countdownseconds
    512  f000				  -
    513  f000				  -keepdisplayinghs
    514  f000				  -	      jsr	restorescreen
    515  f000				  -
    516  f000				  -	      jsr	setuphsinpt1
    517  f000				  -
    518  f000				  -	      lda	hsnewscoreline
    519  f000				  -	      bpl	carryonkeepdisplayinghs
    520  f000				  -	      jmp	skipenterscorecontrol
    521  f000				  -carryonkeepdisplayinghs
    522  f000				  -
    523  f000				  -
    524  f000				  -	      ifnconst	HSSECONDS
    525  f000				  -	      lda	#6
    526  f000				  -	      else
    527  f000				  -	      lda	#HSSECONDS
    528  f000				  -	      endif
    529  f000				  -
    530  f000				  -	      sta	countdownseconds
    531  f000				  -
    532  f000				  -			;plot the "cursor" initial sprite...
    533  f000				  -	      lda	hsinitialhold
    534  f000				  -
    535  f000				  -	      sta	temp1
    536  f000				  -	      lda	#>(hiscorefont+32)
    537  f000				  -	      sta	temp2
    538  f000				  -	      lda	#31	; palette=0*32 | 32-(width=1)
    539  f000				  -	      sta	temp3	; palette/width
    540  f000				  -	      lda	hscursorx
    541  f000				  -	      asl
    542  f000				  -	      asl
    543  f000				  -	      clc
    544  f000				  -	      adc	#104
    545  f000				  -	      sta	temp4	; X
    546  f000				  -	      lda	hsnewscoreline
    547  f000				  -	      asl
    548  f000				  -	      asl
    549  f000				  -	      asl
    550  f000				  -	      asl
    551  f000				  -	      adc	#((3*16)+HSCURSORY)
    552  f000				  -	      sta	temp5	; Y
    553  f000				  -	      lda	#%01000000
    554  f000				  -	      sta	temp6
    555  f000				  -	      jsr	plotsprite
    556  f000				  -
    557  f000				  -	      ldx	hscursorx
    558  f000				  -	      ldy	hsdisplaymode
    559  f000				  -	      ifnconst	.HSup
    560  f000				  -	      lda	SWCHA
    561  f000				  -	      cpy	#3
    562  f000				  -	      bne	hsskipadjustjoystick1
    563  f000				  -	      asl
    564  f000				  -	      asl
    565  f000				  -	      asl
    566  f000				  -	      asl
    567  f000				  -hsskipadjustjoystick1
    568  f000				  -	      sta	hsswcha
    569  f000				  -	      else		; there are user-defined routines!
    570  f000				  -	      jsr	.HSdown
    571  f000				  -	      lda	hsreturn	; b0
    572  f000				  -	      asl
    573  f000				  -	      pha
    574  f000				  -	      jsr	.HSup
    575  f000				  -	      pla
    576  f000				  -	      ora	hsreturn
    577  f000				  -	      asl
    578  f000				  -	      asl
    579  f000				  -	      asl
    580  f000				  -	      asl
    581  f000				  -	      eor	#$FF
    582  f000				  -	      sta	hsswcha
    583  f000				  -	      endif
    584  f000				  -	      lda	SWCHB
    585  f000				  -	      and	#%00000010
    586  f000				  -	      bne	hsskipselectswitch
    587  f000				  -	      lda	#%00010000
    588  f000				  -	      sta	hsswcha
    589  f000				  -	      bne	hsdodebouncecheck
    590  f000				  -hsskipselectswitch
    591  f000				  -	      lda	hsswcha
    592  f000				  -	      and	#%00110000
    593  f000				  -	      cmp	#%00110000
    594  f000				  -	      beq	hsjoystickskipped
    595  f000				  -hsdodebouncecheck
    596  f000				  -	      lda	hsjoydebounce
    597  f000				  -	      beq	hsdontdebounce
    598  f000				  -	      jmp	hspostjoystick
    599  f000				  -hsdontdebounce
    600  f000				  -	      ldx	#1	; small tick sound
    601  f000				  -	      jsr	playhssfx
    602  f000				  -	      lda	hsswcha
    603  f000				  -	      and	#%00110000
    604  f000				  -	      ldx	hscursorx
    605  f000				  -	      cmp	#%00100000	; check down
    606  f000				  -	      bne	hsjoycheckup
    607  f000				  -	      ldy	hsinitialhold
    608  f000				  -	      cpx	#0
    609  f000				  -	      bne	skipavoid31_1
    610  f000				  -	      cpy	#0	; if we're about to change to the <- char (#31) then double-decrement to skip over it
    611  f000				  -	      bne	skipavoid31_1
    612  f000				  -	      dey
    613  f000				  -skipavoid31_1
    614  f000				  -	      dey
    615  f000				  -	      jmp	hssetdebounce
    616  f000				  -hsjoycheckup
    617  f000				  -	      cmp	#%00010000	; check up
    618  f000				  -	      bne	hsjoystickskipped
    619  f000				  -	      ldy	hsinitialhold
    620  f000				  -	      cpx	#0
    621  f000				  -	      bne	skipavoid31_2
    622  f000				  -	      cpy	#30	; if we're about to change to the <- char (#31) then double-increment to skip over it
    623  f000				  -	      bne	skipavoid31_2
    624  f000				  -	      iny
    625  f000				  -skipavoid31_2
    626  f000				  -	      iny
    627  f000				  -hssetdebounce
    628  f000				  -	      tya
    629  f000				  -	      and	#31
    630  f000				  -	      sta	hsinitialhold
    631  f000				  -	      lda	#15
    632  f000				  -	      sta	hsjoydebounce
    633  f000				  -	      bne	hspostjoystick
    634  f000				  -hsjoystickskipped
    635  f000				  -			; check the fire button only when the stick isn't engaged
    636  f000				  -	      lda	hsinpt1
    637  f000				  -	      bpl	hsbuttonskipped
    638  f000				  -	      lda	hsjoydebounce
    639  f000				  -	      bne	hspostjoystick
    640  f000				  -hsfiredontdebounce
    641  f000				  -	      lda	hsinitialhold
    642  f000				  -	      cmp	#31
    643  f000				  -	      beq	hsmovecursorback
    644  f000				  -	      inc	hscursorx
    645  f000				  -	      inc	hsinitialpos
    646  f000				  -	      lda	hscursorx
    647  f000				  -	      cmp	#3
    648  f000				  -	      bne	skiphsentryisdone
    649  f000				  -	      lda	#0
    650  f000				  -	      sta	framecounter
    651  f000				  -	      lda	#$ff
    652  f000				  -	      sta	hsnewscoreline
    653  f000				  -	      dec	hsinitialpos
    654  f000				  -	      bne	skiphsentryisdone
    655  f000				  -hsmovecursorback
    656  f000				  -	      lda	hscursorx
    657  f000				  -	      beq	skiphsmovecursorback
    658  f000				  -	      lda	#29
    659  f000				  -	      ldx	hsinitialpos
    660  f000				  -	      sta	HSRAMInitials,x
    661  f000				  -	      dec	hsinitialpos
    662  f000				  -	      dec	hscursorx
    663  f000				  -	      dex
    664  f000				  -	      lda	HSRAMInitials,x
    665  f000				  -	      sta	hsinitialhold
    666  f000				  -skiphsmovecursorback
    667  f000				  -skiphsentryisdone
    668  f000				  -	      ldx	#0
    669  f000				  -	      jsr	playhssfx
    670  f000				  -	      lda	#20
    671  f000				  -	      sta	hsjoydebounce
    672  f000				  -	      bne	hspostjoystick
    673  f000				  -
    674  f000				  -hsbuttonskipped
    675  f000				  -	      lda	#0
    676  f000				  -	      sta	hsjoydebounce
    677  f000				  -hspostjoystick
    678  f000				  -
    679  f000				  -	      ldx	hsinitialpos
    680  f000				  -	      lda	hsinitialhold
    681  f000				  -	      sta	HSRAMInitials,x
    682  f000				  -
    683  f000				  -	      jmp	skiphschasecolors
    684  f000				  -
    685  f000				  -skipenterscorecontrol
    686  f000				  -	      jsr	hschasecolors
    687  f000				  -	      jsr	setuphsinpt1
    688  f000				  -	      lda	hsjoydebounce
    689  f000				  -	      bne	skiphschasecolors
    690  f000				  -	      lda	hsinpt1
    691  f000				  -	      bmi	returnfromhs
    692  f000				  -skiphschasecolors
    693  f000				  -
    694  f000				  -	      jsr	drawscreen
    695  f000				  -
    696  f000				  -	      lda	countdownseconds
    697  f000				  -	      beq	returnfromhs
    698  f000				  -	      jmp	keepdisplayinghs
    699  f000				  -returnfromhs
    700  f000				  -
    701  f000				  -	      ifconst	songdatastart_song_highscore
    702  f000				  -	      lda	hsdisplaymode
    703  f000				  -	      beq	skipclearHSCsong
    704  f000				  -	      lda	#0
    705  f000				  -	      sta	songtempo
    706  f000				  -skipclearHSCsong
    707  f000				  -	      endif
    708  f000				  -	      jsr	drawwait
    709  f000				  -	      jsr	clearscreen
    710  f000				  -	      lda	#0
    711  f000				  -	      ldy	#7
    712  f000				  -	      jsr	blacken320colors
    713  f000				  -	      lda	ssCTRL
    714  f000				  -	      sta	sCTRL
    715  f000				  -	      lda	ssCHARBASE
    716  f000				  -	      sta	sCHARBASE
    717  f000				  -	      rts
    718  f000				  -
    719  f000				  -setuphsinpt1
    720  f000				  -	      lda	#$ff
    721  f000				  -	      sta	hsinpt1
    722  f000				  -	      lda	hsjoydebounce
    723  f000				  -	      beq	skipdebounceadjust
    724  f000				  -	      dec	hsjoydebounce
    725  f000				  -	      bne	skipstorefirebuttonstatus
    726  f000				  -skipdebounceadjust
    727  f000				  -	      lda	SWCHB
    728  f000				  -	      and	#%00000001
    729  f000				  -	      bne	hscheckresetover
    730  f000				  -	      lda	#$ff
    731  f000				  -	      sta	hsinpt1
    732  f000				  -	      rts
    733  f000				  -hscheckresetover
    734  f000				  -	      ifnconst	.HSup
    735  f000				  -	      ldx	hsdisplaymode
    736  f000				  -	      cpx	#3
    737  f000				  -	      bne	hsskipadjustjoyfire1
    738  f000				  -	      lda	sINPT3
    739  f000				  -	      jmp	hsskipadjustjoyfire1done
    740  f000				  -hsskipadjustjoyfire1
    741  f000				  -	      lda	sINPT1
    742  f000				  -hsskipadjustjoyfire1done
    743  f000				  -	      sta	hsinpt1
    744  f000				  -	      else		; there are user-defined routines!
    745  f000				  -	      jsr	.HSselect
    746  f000				  -	      lda	hsreturn
    747  f000				  -	      ror		; carry
    748  f000				  -	      ror		; b7
    749  f000				  -	      sta	hsinpt1
    750  f000				  -	      endif	.HSup
    751  f000				  -skipstorefirebuttonstatus
    752  f000				  -	      rts
    753  f000				  -
    754  f000				  -blacken320colors
    755  f000				  -	      ldy	#7
    756  f000				  -blacken320colorsloop
    757  f000				  -	      sta	P0C2,y
    758  f000				  -	      dey
    759  f000				  -	      bpl	blacken320colorsloop
    760  f000				  -	      rts
    761  f000				  -
    762  f000				  -hschasecolors
    763  f000				  -	      lda	framecounter
    764  f000				  -	      and	#3
    765  f000				  -	      bne	hschasecolorsreturn
    766  f000				  -	      inc	hscolorchaseindex
    767  f000				  -	      lda	hscolorchaseindex
    768  f000				  -
    769  f000				  -	      sta	P5C2
    770  f000				  -	      sbc	#$02
    771  f000				  -	      sta	P4C2
    772  f000				  -	      sbc	#$02
    773  f000				  -	      sta	P3C2
    774  f000				  -	      sbc	#$02
    775  f000				  -	      sta	P2C2
    776  f000				  -	      sbc	#$02
    777  f000				  -	      sta	P1C2
    778  f000				  -hschasecolorsreturn
    779  f000				  -	      rts
    780  f000				  -
    781  f000				  -playhssfx
    782  f000				  -	      lda	hssfx_lo,x
    783  f000				  -	      sta	temp1
    784  f000				  -	      lda	hssfx_hi,x
    785  f000				  -	      sta	temp2
    786  f000				  -	      lda	#0
    787  f000				  -	      sta	temp3
    788  f000				  -	      jmp	schedulesfx
    789  f000				  -
    790  f000				  -hssfx_lo
    791  f000				  -	      .byte	<sfx_hsletterpositionchange, <sfx_hslettertick
    792  f000				  -hssfx_hi
    793  f000				  -	      .byte	>sfx_hsletterpositionchange, >sfx_hslettertick
    794  f000				  -
    795  f000				  -sfx_hsletterpositionchange
    796  f000				  -	      .byte	$10,$18,$00
    797  f000				  -	      .byte	$02,$06,$08
    798  f000				  -	      .byte	$02,$06,$04
    799  f000				  -	      .byte	$00,$00,$00
    800  f000				  -sfx_hslettertick
    801  f000				  -	      .byte	$10,$18,$00
    802  f000				  -	      .byte	$00,$00,$0a
    803  f000				  -	      .byte	$00,$00,$00
    804  f000				  -
    805  f000				  -highscorelabeladjust1
    806  f000				  -	      .byte	(80-(14*2)-(SCORESIZE*2)),(80-(16*2)-(SCORESIZE*2)),(80-(16*2)-(SCORESIZE*2)),(80-(16*2)-(SCORESIZE*2))
    807  f000				  -highscorelabeladjust2
    808  f000				  -	      .byte	(80+(14*2)-(SCORESIZE*2)),(80+(16*2)-(SCORESIZE*2)),(80+(16*2)-(SCORESIZE*2)),(80+(16*2)-(SCORESIZE*2))
    809  f000				  -
    810  f000				  -scorevarlo
    811  f000				  -	      .byte	<(score0+((6-SCORESIZE)/2)),<(score0+((6-SCORESIZE)/2)),<(score1+((6-SCORESIZE)/2)),<(score1+((6-SCORESIZE)/2))
    812  f000				  -scorevarhi
    813  f000				  -	      .byte	>(score0+((6-SCORESIZE)/2)),>(score0+((6-SCORESIZE)/2)),>(score1+((6-SCORESIZE)/2)),>(score1+((6-SCORESIZE)/2))
    814  f000				  -
    815  f000				  -	      endif		; !isBANKSETBANK
    816  f000				  -
    817  f000				  -	      ifnconst	HSNOLEVELNAMES
    818  f000				  -	      ifnconst	isBANKSETBANK
    819  f000				  -highscoredifficultytextlo
    820  f000				  -	      .byte	<easylevelname, <mediumlevelname, <hardlevelname, <expertlevelname
    821  f000				  -highscoredifficultytexthi
    822  f000				  -	      .byte	>easylevelname, >mediumlevelname, >hardlevelname, >expertlevelname
    823  f000				  -	      endif		; !isBANKSETBANK
    824  f000				  -
    825  f000				  -	      ifnconst	HSCUSTOMLEVELNAMES
    826  f000				  -	      ifnconst	isBANKSETBANK
    827  f000				  -highscoredifficultytextlen
    828  f000				  -	      .byte	22, 30, 26, 24
    829  f000				  -	      endif		; !isBANKSETBANK
    830  f000				  -
    831  f000				  -	      ifconst	HSCHARSHERE
    832  f000				  -
    833  f000				  -easylevelname
    834  f000				  -	      .byte	$04,$00,$12,$18,$1d,$0b,$04,$15,$04,$0b,$1d,$07,$08,$06,$07,$1d,$12,$02,$0e,$11,$04,$12
    835  f000				  -mediumlevelname
    836  f000				  -	      .byte	$08,$0d,$13,$04,$11,$0c,$04,$03,$08,$00,$13,$04,$1d,$0b,$04,$15,$04,$0b,$1d,$07,$08,$06,$07,$1d,$12,$02,$0e,$11,$04,$12
    837  f000				  -hardlevelname
    838  f000				  -	      .byte	$00,$03,$15,$00,$0d,$02,$04,$03,$1d,$0b,$04,$15,$04,$0b,$1d,$07,$08,$06,$07,$1d,$12,$02,$0e,$11,$04,$12
    839  f000				  -expertlevelname
    840  f000				  -	      .byte	$04,$17,$0f,$04,$11,$13,$1d,$0b,$04,$15,$04,$0b,$1d,$07,$08,$06,$07,$1d,$12,$02,$0e,$11,$04,$12
    841  f000				  -	      endif		; HSCHARSHERE
    842  f000				  -	      else		; HSCUSTOMLEVELNAMES
    843  f000				  -	      include	"7800hsgamediffnames.asm"
    844  f000				  -	      endif		; HSCUSTOMLEVELNAMES
    845  f000				  -	      else		; HSNOLEVELNAMES
    846  f000				  -	      ifconst	HSCHARSHERE
    847  f000				  -HSHIGHSCOREStext
    848  f000				  -	      .byte	$07,$08,$06,$07,$1d,$12,$02,$0e,$11,$04,$12
    849  f000				  -	      endif		; HSCHARSHERE
    850  f000				  -	      endif		; HSNOLEVELNAMES
    851  f000				  -
    852  f000				  -	      ifnconst	isBANKSETBANK
    853  f000				  -highscorelabeltextlo
    854  f000				  -	      .byte	<player0label, <player1label, <player2label, <player2label
    855  f000				  -highscorelabeltexthi
    856  f000				  -	      .byte	>player0label, >player1label, >player2label, >player2label
    857  f000				  -	      endif		; !isBANKSETBANK
    858  f000				  -
    859  f000				  -	      ifconst	HSCHARSHERE
    860  f000				  -player0label
    861  f000				  -	      .byte	$0f,$0b,$00,$18,$04,$11,$1d,$12,$02,$0e,$11,$04,$1a,$1d,$1d
    862  f000				  -
    863  f000				  -player1label
    864  f000				  -	      .byte	$0f,$0b,$00,$18,$04,$11,$1d,$22,$1d,$12,$02,$0e,$11,$04,$1a
    865  f000				  -
    866  f000				  -player2label
    867  f000				  -	      .byte	$0f,$0b,$00,$18,$04,$11,$1d,$23,$1d,$12,$02,$0e,$11,$04,$1a
    868  f000				  -	      endif		; HSCHARSHERE
    869  f000				  -
    870  f000				  -
    871  f000				  -	      ifconst	HSGAMENAMELEN
    872  f000				  -	      ifconst	HSCHARSHERE
    873  f000				  -HSGAMENAMEtable
    874  f000				  -	      include	"7800hsgamename.asm"
    875  f000				  -	      endif		; HSCHARSHERE
    876  f000				  -	      endif		; HSGAMENAMELEN
    877  f000				  -	      ifconst	HSGAMERANKS
    878  f000				  -	      include	"7800hsgameranks.asm"
    879  f000				  -	      ifconst	HSCHARSHERE
    880  f000				  -highscoreranklabel
    881  f000				  -	      .byte	$11,$00,$0d,$0a,$1a
    882  f000				  -	      endif		; HSCHARSHERE
    883  f000				  -	      endif		; HSGAMERANKS
    884  f000				  -
    885  f000				  -			;ensure our table doesn't wrap a page...
    886  f000				  -	      if	((<*)>251)
    887  f000				  -	      align	256
    888  f000				  -	      endif
    889  f000				  -hsgameslotnumbers
    890  f000				  -	      .byte	33,34,35,36,37
    891  f000				  -	      endif		; hiscorefont
    892  f000				  -
    893  f000				  -
    894  f000				  -	      ifnconst	isBANKSETBANK
    895  f000				  -loaddifficultytable
    896  f000				  -	      lda	gamedifficulty
    897  f000				  -	      and	#$03	; ensure the user hasn't selected an invalid difficulty
    898  f000				  -	      sta	gamedifficulty
    899  f000				  -	      cmp	hsdifficulty	; check game difficulty is the same as RAM table
    900  f000				  -	      bne	loaddifficultytablecontinue1
    901  f000				  -	      rts		; this high score difficulty table is already loaded
    902  f000				  -loaddifficultytablecontinue1
    903  f000				  -	      lda	gamedifficulty
    904  f000				  -	      sta	hsdifficulty
    905  f000				  -			;we need to check the device for the table
    906  f000				  -	      lda	hsdevice
    907  f000				  -	      bne	loaddifficultytablecontinue2
    908  f000				  -			; there's no save device. clear out this table.
    909  f000				  -	      jmp	cleardifficultytablemem
    910  f000				  -loaddifficultytablecontinue2
    911  f000				  -	      lda	hsdevice
    912  f000				  -	      and	#1
    913  f000				  -	      beq	memdeviceisntHSC
    914  f000				  -	      jmp	loaddifficultytableHSC
    915  f000				  -memdeviceisntHSC
    916  f000				  -	      jmp	loaddifficultytableAVOX
    917  f000				  -
    918  f000				  -savedifficultytable
    919  f000				  -			;*** we need to check which device we should use...
    920  f000				  -	      lda	hsdevice
    921  f000				  -	      bne	savedifficultytablerealdevice
    922  f000				  -	      rts		; its a ram device
    923  f000				  -savedifficultytablerealdevice
    924  f000				  -	      and	#1
    925  f000				  -	      beq	savememdeviceisntHSC
    926  f000				  -	      jmp	savedifficultytableHSC
    927  f000				  -savememdeviceisntHSC
    928  f000				  -	      jmp	savedifficultytableAVOX
    929  f000				  -
    930  f000				  -savedifficultytableAVOX
    931  f000				  -			; the load call already setup the memory structure and atarivox memory location
    932  f000				  -	      jsr	savealoadedHSCtablecontinue
    933  f000				  -savedifficultytableAVOXskipconvert
    934  f000				  -	      lda	#HSIDHI
    935  f000				  -	      sta	eeprombuffer
    936  f000				  -	      lda	#HSIDLO
    937  f000				  -	      sta	eeprombuffer+1
    938  f000				  -	      lda	hsdifficulty
    939  f000				  -	      sta	eeprombuffer+2
    940  f000				  -	      lda	#32
    941  f000				  -	      jsr	AVoxWriteBytes
    942  f000				  -	      rts
    943  f000				  -
    944  f000				  -savedifficultytableHSC
    945  f000				  -			;we always load a table before reaching here, so the
    946  f000				  -			;memory structures from the load should be intact...
    947  f000				  -	      ldy	hsgameslot
    948  f000				  -	      bpl	savealoadedHSCtable
    949  f000				  -	      rts
    950  f000				  -savealoadedHSCtable
    951  f000				  -	      lda	HSCGameDifficulty,y
    952  f000				  -	      cmp	#$7F
    953  f000				  -	      bne	savealoadedHSCtablecontinue
    954  f000				  -	      jsr	initializeHSCtableentry
    955  f000				  -savealoadedHSCtablecontinue
    956  f000				  -			;convert our RAM table to HSC format and write it out...
    957  f000				  -	      ldy	#0
    958  f000				  -	      ldx	#0
    959  f000				  -savedifficultytableScores
    960  f000				  -
    961  f000				  -	      lda	HSRAMInitials,x
    962  f000				  -	      sta	temp3
    963  f000				  -	      lda	HSRAMInitials+1,x
    964  f000				  -	      sta	temp4
    965  f000				  -	      lda	HSRAMInitials+2,x
    966  f000				  -	      sta	temp5
    967  f000				  -	      jsr	encodeHSCInitials	; takes 3 byte initials from temp3,4,5 and stores 2 byte initials in temp1,2
    968  f000				  -
    969  f000				  -	      lda	temp1
    970  f000				  -	      sta	(HSGameTableLo),y
    971  f000				  -	      iny
    972  f000				  -	      lda	temp2
    973  f000				  -	      sta	(HSGameTableLo),y
    974  f000				  -	      iny
    975  f000				  -
    976  f000				  -	      lda	HSRAMScores,x
    977  f000				  -	      sta	(HSGameTableLo),y
    978  f000				  -	      iny
    979  f000				  -	      lda	HSRAMScores+1,x
    980  f000				  -	      sta	(HSGameTableLo),y
    981  f000				  -	      iny
    982  f000				  -	      lda	HSRAMScores+2,x
    983  f000				  -	      sta	(HSGameTableLo),y
    984  f000				  -	      iny
    985  f000				  -	      inx
    986  f000				  -	      inx
    987  f000				  -	      inx		; +3
    988  f000				  -	      cpx	#15
    989  f000				  -	      bne	savedifficultytableScores
    990  f000				  -	      rts
    991  f000				  -
    992  f000				  -loaddifficultytableHSC
    993  f000				  -			; routine responsible for loading the difficulty table from HSC
    994  f000				  -	      jsr	findindexHSC
    995  f000				  -	      ldy	hsgameslot
    996  f000				  -	      lda	HSCGameDifficulty,y
    997  f000				  -	      cmp	#$7F
    998  f000				  -	      bne	loaddifficultytableHSCcontinue
    999  f000				  -			;there was an error. use a new RAM table instead...
   1000  f000				  -	      jsr	initializeHSCtableentry
   1001  f000				  -	      jmp	cleardifficultytablemem
   1002  f000				  -loaddifficultytableHSCcontinue
   1003  f000				  -			; parse the data into the HS memory...
   1004  f000				  -	      ldy	#0
   1005  f000				  -	      ldx	#0
   1006  f000				  -loaddifficultytableScores
   1007  f000				  -	      lda	(HSGameTableLo),y
   1008  f000				  -	      sta	temp1
   1009  f000				  -	      iny
   1010  f000				  -	      lda	(HSGameTableLo),y
   1011  f000				  -	      sta	temp2
   1012  f000				  -	      jsr	decodeHSCInitials	; takes 2 byte initials from temp1,2 and stores 3 byte initials in temp3,4,5
   1013  f000				  -	      iny
   1014  f000				  -	      lda	(HSGameTableLo),y
   1015  f000				  -	      sta	HSRAMScores,x
   1016  f000				  -	      lda	temp3
   1017  f000				  -	      sta	HSRAMInitials,x
   1018  f000				  -	      inx
   1019  f000				  -	      iny
   1020  f000				  -	      lda	(HSGameTableLo),y
   1021  f000				  -	      sta	HSRAMScores,x
   1022  f000				  -	      lda	temp4
   1023  f000				  -	      sta	HSRAMInitials,x
   1024  f000				  -	      inx
   1025  f000				  -	      iny
   1026  f000				  -	      lda	(HSGameTableLo),y
   1027  f000				  -	      sta	HSRAMScores,x
   1028  f000				  -	      lda	temp5
   1029  f000				  -	      sta	HSRAMInitials,x
   1030  f000				  -	      inx
   1031  f000				  -	      iny
   1032  f000				  -	      cpx	#15
   1033  f000				  -	      bne	loaddifficultytableScores
   1034  f000				  -	      rts
   1035  f000				  -
   1036  f000				  -decodeHSCInitials
   1037  f000				  -			; takes 2 byte initials from temp1,2 and stores 3 byte initials in temp3,4,5
   1038  f000				  -			; 2 bytes are packed in the form: 22211111 22_33333
   1039  f000				  -	      lda	#0
   1040  f000				  -	      sta	temp4
   1041  f000				  -	      lda	temp1
   1042  f000				  -	      and	#%00011111
   1043  f000				  -	      sta	temp3
   1044  f000				  -
   1045  f000				  -	      lda	temp2
   1046  f000				  -	      and	#%00011111
   1047  f000				  -	      sta	temp5
   1048  f000				  -
   1049  f000				  -	      lda	temp1
   1050  f000				  -	      asl
   1051  f000				  -	      rol	temp4
   1052  f000				  -	      asl
   1053  f000				  -	      rol	temp4
   1054  f000				  -	      asl
   1055  f000				  -	      rol	temp4
   1056  f000				  -	      lda	temp2
   1057  f000				  -	      asl
   1058  f000				  -	      rol	temp4
   1059  f000				  -	      asl
   1060  f000				  -	      rol	temp4
   1061  f000				  -	      rts
   1062  f000				  -encodeHSCInitials
   1063  f000				  -			; takes 3 byte initials from temp3,4,5 and stores 2 byte initials in temp1,2
   1064  f000				  -			; 2 bytes are packed in the form: 22211111 22_33333
   1065  f000				  -			; start with packing temp1...
   1066  f000				  -	      lda	temp4
   1067  f000				  -	      and	#%00011100
   1068  f000				  -	      sta	temp1
   1069  f000				  -	      asl	temp1
   1070  f000				  -	      asl	temp1
   1071  f000				  -	      asl	temp1
   1072  f000				  -	      lda	temp3
   1073  f000				  -	      and	#%00011111
   1074  f000				  -	      ora	temp1
   1075  f000				  -	      sta	temp1
   1076  f000				  -			; ...temp1 is now packed, on to temp2...
   1077  f000				  -	      lda	temp5
   1078  f000				  -	      asl
   1079  f000				  -	      asl
   1080  f000				  -	      ror	temp4
   1081  f000				  -	      ror
   1082  f000				  -	      ror	temp4
   1083  f000				  -	      ror
   1084  f000				  -	      sta	temp2
   1085  f000				  -	      rts
   1086  f000				  -
   1087  f000				  -findindexHSCerror
   1088  f000				  -			;the HSC is stuffed. return the bad slot flag
   1089  f000				  -	      ldy	#$ff
   1090  f000				  -	      sty	hsgameslot
   1091  f000				  -	      rts
   1092  f000				  -
   1093  f000				  -findindexHSC
   1094  f000				  -HSCGameID1 =	$1029
   1095  f000				  -HSCGameID2 =	$106E
   1096  f000				  -HSCGameDifficulty =	$10B3
   1097  f000				  -HSCGameIndex =	$10F8
   1098  f000				  -			; routine responsible for finding the game index from HSC
   1099  f000				  -			; call with x=0 to create a new table if none exist, call with x=$ff to avoid creating new tables
   1100  f000				  -			; the HS loading routine will use x=$ff, the HS saving routine will use x=0
   1101  f000				  -	      ldy	#69	; start +1 to account for the dey
   1102  f000				  -findindexHSCloop
   1103  f000				  -	      dey
   1104  f000				  -	      bmi	findindexHSCerror
   1105  f000				  -	      lda	HSCGameDifficulty,y
   1106  f000				  -	      cmp	#$7F
   1107  f000				  -	      beq	findourindexHSC
   1108  f000				  -	      cmp	gamedifficulty
   1109  f000				  -	      bne	findindexHSCloop
   1110  f000				  -	      lda	HSCGameID1,y
   1111  f000				  -	      cmp	#HSIDHI
   1112  f000				  -	      bne	findindexHSCloop
   1113  f000				  -	      lda	HSCGameID2,y
   1114  f000				  -	      cmp	#HSIDLO
   1115  f000				  -	      bne	findindexHSCloop
   1116  f000				  -findourindexHSC
   1117  f000				  -			; if we're here we found our index in the table
   1118  f000				  -			; or we found the first empty one
   1119  f000				  -	      sty	hsgameslot
   1120  f000				  -	      jsr	setupHSCGamepointer	; setup the pointer to the HS Table for this game...
   1121  f000				  -	      rts
   1122  f000				  -
   1123  f000				  -
   1124  f000				  -initializeHSCtableentry
   1125  f000				  -	      ldy	hsgameslot
   1126  f000				  -			; we need to make a new entry...
   1127  f000				  -	      lda	#HSIDHI
   1128  f000				  -	      sta	HSCGameID1,y
   1129  f000				  -	      lda	#HSIDLO
   1130  f000				  -	      sta	HSCGameID2,y
   1131  f000				  -	      lda	gamedifficulty
   1132  f000				  -	      sta	HSCGameDifficulty,y
   1133  f000				  -	      ldx	#0
   1134  f000				  -fixHSDGameDifficultylistLoop
   1135  f000				  -	      inx
   1136  f000				  -	      txa
   1137  f000				  -	      sta	HSCGameIndex,y
   1138  f000				  -	      iny
   1139  f000				  -	      cpy	#69
   1140  f000				  -	      bne	fixHSDGameDifficultylistLoop
   1141  f000				  -	      rts
   1142  f000				  -
   1143  f000				  -setupHSCGamepointer
   1144  f000				  -			; this routines sets (HSGameTableLo) pointing to the game's HS table
   1145  f000				  -	      lda	#$17
   1146  f000				  -	      sta	HSGameTableHi
   1147  f000				  -	      lda	#$FA
   1148  f000				  -	      sta	HSGameTableLo
   1149  f000				  -setupHSCGamepointerLoop
   1150  f000				  -	      lda	HSGameTableLo
   1151  f000				  -	      sec
   1152  f000				  -	      sbc	#25
   1153  f000				  -	      sta	HSGameTableLo
   1154  f000				  -	      lda	HSGameTableHi
   1155  f000				  -	      sbc	#0
   1156  f000				  -	      sta	HSGameTableHi
   1157  f000				  -	      iny
   1158  f000				  -	      cpy	#69
   1159  f000				  -	      bne	setupHSCGamepointerLoop
   1160  f000				  -	      rts
   1161  f000				  -
   1162  f000				  -loaddifficultytableAVOX
   1163  f000				  -			; routine responsible for loading the difficulty table from Avox
   1164  f000				  -			; we reuse HSC routines to format data to/from our Avox RAM buffer...
   1165  f000				  -	      lda	#>(eeprombuffer+3)
   1166  f000				  -	      sta	HSGameTableHi
   1167  f000				  -	      lda	#<(eeprombuffer+3)
   1168  f000				  -	      sta	HSGameTableLo
   1169  f000				  -
   1170  f000				  -			; the start location in EEPROM, subtract 32...
   1171  f000				  -	      lda	#$5F
   1172  f000				  -	      sta	HSVoxHi
   1173  f000				  -	      lda	#$E0
   1174  f000				  -	      sta	HSVoxLo
   1175  f000				  -	      lda	#0
   1176  f000				  -	      sta	temp1
   1177  f000				  -loaddifficultytableAVOXloop
   1178  f000				  -	      inc	temp1
   1179  f000				  -	      beq	loaddifficultytableAVOXfull
   1180  f000				  -	      clc
   1181  f000				  -	      lda	HSVoxLo
   1182  f000				  -	      adc	#32
   1183  f000				  -	      sta	HSVoxLo
   1184  f000				  -	      lda	HSVoxHi
   1185  f000				  -	      adc	#0
   1186  f000				  -	      sta	HSVoxHi
   1187  f000				  -	      lda	#3
   1188  f000				  -	      jsr	AVoxReadBytes	; read in 3 bytes, ID1,ID2,Difficulty
   1189  f000				  -	      lda	eeprombuffer
   1190  f000				  -	      cmp	#$FF
   1191  f000				  -	      beq	loaddifficultytableAVOXempty
   1192  f000				  -	      cmp	#HSIDHI
   1193  f000				  -	      bne	loaddifficultytableAVOXloop
   1194  f000				  -	      lda	eeprombuffer+1
   1195  f000				  -	      cmp	#HSIDLO
   1196  f000				  -	      bne	loaddifficultytableAVOXloop
   1197  f000				  -	      lda	eeprombuffer+2
   1198  f000				  -	      cmp	gamedifficulty
   1199  f000				  -	      bne	loaddifficultytableAVOXloop
   1200  f000				  -loaddifficultytableAVOXdone
   1201  f000				  -	      lda	#32
   1202  f000				  -	      jsr	AVoxReadBytes
   1203  f000				  -	      jsr	loaddifficultytableHSCcontinue
   1204  f000				  -	      rts
   1205  f000				  -loaddifficultytableAVOXfull
   1206  f000				  -	      lda	#0
   1207  f000				  -	      sta	hsdevice	; looks like all 255 entries are taken... disable it.
   1208  f000				  -loaddifficultytableAVOXempty
   1209  f000				  -	      jmp	cleardifficultytablemem
   1210  f000				  -	      rts
   1211  f000				  -
   1212  f000				  -cleardifficultytablemem
   1213  f000				  -	      ldy	#29
   1214  f000				  -	      lda	#0
   1215  f000				  -cleardifficultytablememloop
   1216  f000				  -	      sta	HSRAMTable,y
   1217  f000				  -	      dey
   1218  f000				  -	      bpl	cleardifficultytablememloop
   1219  f000				  -	      rts
   1220  f000				  -hiscoremoduleend
   1221  f000				  -
   1222  f000				  -	      ifconst	DOUBLEWIDE
   1223  f000				  -plotvaluedw
   1224  f000				  -plotdigitcount =	temp6
   1225  f000				  -	      lda	#0
   1226  f000				  -	      tay
   1227  f000				  -	      ldx	valbufend
   1228  f000				  -
   1229  f000				  -	      lda	plotdigitcount
   1230  f000				  -	      and	#1
   1231  f000				  -	      beq	pvnibble2chardw
   1232  f000				  -	      lda	#0
   1233  f000				  -	      sta	VALBUFFER,x	; just in case we skip this digit
   1234  f000				  -	      beq	pvnibble2char_skipnibbledw
   1235  f000				  -
   1236  f000				  -pvnibble2chardw
   1237  f000				  -			; high nibble...
   1238  f000				  -	      lda	(temp7),y
   1239  f000				  -	      and	#$f0
   1240  f000				  -	      lsr
   1241  f000				  -	      lsr
   1242  f000				  -	      lsr
   1243  f000				  -	      lsr
   1244  f000				  -
   1245  f000				  -	      clc
   1246  f000				  -	      adc	temp1	; add the offset to character graphics to our value
   1247  f000				  -	      sta	VALBUFFER,x
   1248  f000				  -	      inx
   1249  f000				  -	      dec	plotdigitcount
   1250  f000				  -pvnibble2char_skipnibbledw
   1251  f000				  -			; low nibble...
   1252  f000				  -	      lda	(temp7),y
   1253  f000				  -	      and	#$0f
   1254  f000				  -	      clc
   1255  f000				  -	      adc	temp1	; add the offset to character graphics to our value
   1256  f000				  -	      sta	VALBUFFER,x
   1257  f000				  -	      inx
   1258  f000				  -	      iny
   1259  f000				  -
   1260  f000				  -	      dec	plotdigitcount
   1261  f000				  -	      bne	pvnibble2chardw
   1262  f000				  -			;point to the start of our valuebuffer
   1263  f000				  -	      clc
   1264  f000				  -	      lda	#<VALBUFFER
   1265  f000				  -	      adc	valbufend
   1266  f000				  -	      sta	temp1
   1267  f000				  -	      lda	#>VALBUFFER
   1268  f000				  -	      adc	#0
   1269  f000				  -	      sta	temp2
   1270  f000				  -
   1271  f000				  -			;advance valbufend to the end of our value buffer
   1272  f000				  -	      stx	valbufend
   1273  f000				  -
   1274  f000				  -	      ifnconst	plotvalueonscreen
   1275  f000				  -	      jmp	plotcharacters
   1276  f000				  -	      else
   1277  f000				  -	      jmp	plotcharacterslive
   1278  f000				  -	      endif
   1279  f000				  -	      endif		; DOUBLEWIDE
   1280  f000				  -
   1281  f000				  -hiscoreend
   1282  f000				  -	      echo	" (hiscore module is using ",[(hiscoreend-hiscorestart)]d," bytes)"
   1283  f000				  -	      endif		; !isBANKSETBANK
   1284  f000					      endif		; HSSUPPORT
   1285  f000
------- FILE c:\Users\steve\OneDrive\Desktop\2018dev\7800\7800basic\projects\demo1\lesson2_2.78b.asm
   1405  f000					      endif
   1406  f000					      ifnconst	included.fourbitfade.asm
------- FILE fourbitfade.asm LEVEL 2 PASS 3
      0  f000					      include	fourbitfade.asm
      1  f000							; ** fourbit fade, which is useful for audio levels and brightness fades
      2  f000							; ** input:  A=value to fade, fourbitfadevalue=global fade value
      3  f000							; **	      N.B. the global fade value is in the upper nibble. i.e. $Fx-0x
      4  f000							; ** output: A=faded value in lo nibble. orig top nibble is preserved,
      5  f000							; **	      other registers are preserved
      6  f000
      7  f000				  -	      ifconst	FOURBITFADE
      8  f000				  -
      9  f000				  -			; non-interrupt routine
     10  f000				  -
     11  f000				  -fourbitfade
     12  f000				  -	      sty	fourbittemp1
     13  f000				  -	      pha
     14  f000				  -	      and	#$0F
     15  f000				  -	      ora	fourbitfadevalue
     16  f000				  -	      tay
     17  f000				  -	      pla
     18  f000				  -	      and	#$F0
     19  f000				  -	      ora	fourbitfadelut,y
     20  f000				  -	      ldy	fourbittemp1	; restore Y
     21  f000				  -	      rts
     22  f000				  -
     23  f000				  -			; interrupt routine
     24  f000				  -
     25  f000				  -fourbitfadeint
     26  f000				  -	      sty	fourbittemp1int
     27  f000				  -	      pha
     28  f000				  -	      and	#$0F
     29  f000				  -	      ora	fourbitfadevalueint
     30  f000				  -	      tay
     31  f000				  -	      pla
     32  f000				  -	      and	#$F0
     33  f000				  -	      ora	fourbitfadelut,y
     34  f000				  -	      ldy	fourbittemp1int	; restore Y
     35  f000				  -	      rts
     36  f000				  -
     37  f000				  -fourbitfadelut
     38  f000				  -	      .byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     39  f000				  -	      .byte	$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$01,$01,$01
     40  f000				  -	      .byte	$00,$00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$02,$02,$02,$02,$02
     41  f000				  -	      .byte	$00,$00,$00,$00,$01,$01,$01,$01,$02,$02,$02,$02,$03,$03,$03,$03
     42  f000				  -	      .byte	$00,$00,$00,$00,$01,$01,$01,$02,$02,$02,$03,$03,$03,$04,$04,$04
     43  f000				  -	      .byte	$00,$00,$00,$01,$01,$01,$02,$02,$03,$03,$03,$04,$04,$04,$05,$05
     44  f000				  -	      .byte	$00,$00,$00,$01,$01,$02,$02,$03,$03,$03,$04,$04,$05,$05,$06,$06
     45  f000				  -	      .byte	$00,$00,$01,$01,$02,$02,$03,$03,$04,$04,$05,$05,$06,$06,$07,$07
     46  f000				  -	      .byte	$00,$00,$01,$01,$02,$02,$03,$03,$04,$05,$05,$06,$06,$07,$07,$08
     47  f000				  -	      .byte	$00,$00,$01,$01,$02,$03,$03,$04,$05,$05,$06,$06,$07,$08,$08,$09
     48  f000				  -	      .byte	$00,$00,$01,$02,$02,$03,$04,$04,$05,$06,$06,$07,$08,$08,$09,$0a
     49  f000				  -	      .byte	$00,$00,$01,$02,$03,$03,$04,$05,$06,$06,$07,$08,$09,$09,$0a,$0b
     50  f000				  -	      .byte	$00,$00,$01,$02,$03,$04,$04,$05,$06,$07,$08,$08,$09,$0a,$0b,$0c
     51  f000				  -	      .byte	$00,$00,$01,$02,$03,$04,$05,$06,$07,$07,$08,$09,$0a,$0b,$0c,$0d
     52  f000				  -	      .byte	$00,$00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e
     53  f000				  -	      .byte	$00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f
     54  f000				  -
     55  f000				  -fourbitfadeend
     56  f000				  -
     57  f000				  -	      echo	"  (fourbitfade module is using ",[(fourbitfadeend-fourbitfade)]d," bytes)"
     58  f000				  -
     59  f000					      endif
------- FILE c:\Users\steve\OneDrive\Desktop\2018dev\7800\7800basic\projects\demo1\lesson2_2.78b.asm
   1408  f000					      endif
   1409  f000							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1410  f000
   1411  f000							;standard routimes needed for pretty much all games
   1412  f000
   1413  f000							; some definitions used with "set debug color"
   1414  f000		       00 91	   DEBUGCALC  =	$91
   1415  f000		       00 41	   DEBUGWASTE =	$41
   1416  f000		       00 c1	   DEBUGDRAW  =	$C1
   1417  f000
   1418  f000							;NMI and IRQ handlers
   1419  f000				   NMI
   1420  f000							;VISIBLEOVER is 255 while the screen is drawn, and 0 right after the visible screen is done.
   1421  f000		       48		      pha		; save A
   1422  f001		       d8		      cld
   1423  f002		       a5 4d		      lda	visibleover
   1424  f004		       49 ff		      eor	#255
   1425  f006		       85 4d		      sta	visibleover
   1426  f008				  -	      ifconst	DEBUGINTERRUPT
   1427  f008				  -	      and	#$93
   1428  f008				  -	      sta	BACKGRND
   1429  f008					      endif
   1430  f008		       8a		      txa		; save X
   1431  f009		       48		      pha
   1432  f00a		       98		      tya		; save Y
   1433  f00b		       48		      pha
   1434  f00c		       ce b2 01 	      dec	interruptindex
   1435  f00f		       d0 03		      bne	skipreallyoffvisible
   1436  f011		       4c 6b f0 	      jmp	reallyoffvisible
   1437  f014				   skipreallyoffvisible
   1438  f014		       a5 4d		      lda	visibleover
   1439  f016		       d0 03		      bne	carryontopscreenroutine
   1440  f018				  -	      ifconst	.bottomscreenroutine
   1441  f018				  -	      lda	interrupthold
   1442  f018				  -	      beq	skipbottomroutine
   1443  f018				  -	      jsr	.bottomscreenroutine
   1444  f018				  -skipbottomroutine
   1445  f018					      endif
   1446  f018		       4c 79 f0 	      jmp	NMIexit
   1447  f01b				   carryontopscreenroutine
   1448  f01b				  -	      ifconst	.topscreenroutine
   1449  f01b				  -	      lda	interrupthold
   1450  f01b				  -	      beq	skiptoproutine
   1451  f01b				  -	      jsr	.topscreenroutine
   1452  f01b				  -skiptoproutine
   1453  f01b					      endif
   1454  f01b					      ifnconst	CANARYOFF
   1455  f01b		       ad c1 01 	      lda	canary
   1456  f01e		       f0 07		      beq	skipcanarytriggered
   1457  f020		       a9 45		      lda	#$45
   1458  f022		       85 20		      sta	BACKGRND
   1459  f024		       4c 63 f0 	      jmp	skipbrkolorset	; common crash dump routine, if available
   1460  f027				   skipcanarytriggered
   1461  f027					      endif
   1462  f027
   1463  f027		       ee 3e 21 	      inc	frameslost	; this is balanced with a "dec frameslost" when drawscreen is called.
   1464  f02a
   1465  f02a							; ** Other important routines that need to regularly run, and can run onscreen.
   1466  f02a							; ** Atarivox can't go here, because Maria might interrupt it while it's bit-banging.
   1467  f02a
   1468  f02a				  -	      ifconst	LONGCONTROLLERREAD
   1469  f02a				  -longcontrollerreads		; ** controllers that take a lot of time to read. We use much of the visible screen here.
   1470  f02a				  -	      ldy	port1control
   1471  f02a				  -	      lda	longreadtype,y
   1472  f02a				  -	      beq	LLRET1
   1473  f02a				  -	      tay
   1474  f02a				  -	      lda	longreadroutinehiP1,y
   1475  f02a				  -	      sta	inttemp4
   1476  f02a				  -	      lda	longreadroutineloP1,y
   1477  f02a				  -	      sta	inttemp3
   1478  f02a				  -	      jmp	(inttemp3)
   1479  f02a				  -LLRET1
   1480  f02a				  -	      ldy	port0control
   1481  f02a				  -	      lda	longreadtype,y
   1482  f02a				  -	      beq	LLRET0
   1483  f02a				  -	      tay
   1484  f02a				  -	      lda	longreadroutinehiP0,y
   1485  f02a				  -	      sta	inttemp4
   1486  f02a				  -	      lda	longreadroutineloP0,y
   1487  f02a				  -	      sta	inttemp3
   1488  f02a				  -	      jmp	(inttemp3)
   1489  f02a				  -LLRET0
   1490  f02a				  -
   1491  f02a				  -
   1492  f02a				  -	      ifconst	PADDLERANGE
   1493  f02a				  -TIMEVAL    =	PADDLERANGE
   1494  f02a				  -	      else
   1495  f02a				  -TIMEVAL    =	160
   1496  f02a				  -	      endif
   1497  f02a				  -TIMEOFFSET =	10
   1498  f02a				  -
   1499  f02a					      endif		; LONGCONTROLLERREAD
   1500  f02a
   1501  f02a
   1502  f02a		       20 e7 f1 	      jsr	servicesfxchannels
   1503  f02d				  -	      ifconst	MUSICTRACKER
   1504  f02d				  -	      jsr	servicesong
   1505  f02d					      endif		; MUSICTRACKER
   1506  f02d				  -	      ifconst	RMT
   1507  f02d				  -	      lda	rasterpause
   1508  f02d				  -	      beq	skiprasterupdate
   1509  f02d				  -	      jsr	RASTERMUSICTRACKER+3
   1510  f02d				  -skiprasterupdate
   1511  f02d				  -RMT_Iend
   1512  f02d					      endif
   1513  f02d
   1514  f02d		       ee a4 01 	      inc	framecounter
   1515  f030		       ad a4 01 	      lda	framecounter
   1516  f033		       29 3f		      and	#63
   1517  f035		       d0 08		      bne	skipcountdownseconds
   1518  f037		       ad a5 01 	      lda	countdownseconds
   1519  f03a		       f0 03		      beq	skipcountdownseconds
   1520  f03c		       ce a5 01 	      dec	countdownseconds
   1521  f03f				   skipcountdownseconds
   1522  f03f
   1523  f03f		       a2 01		      ldx	#1
   1524  f041				   buttonreadloop
   1525  f041		       8a		      txa
   1526  f042		       48		      pha
   1527  f043		       bc b7 01 	      ldy	port0control,x
   1528  f046		       b9 c4 f1 	      lda	buttonhandlerlo,y
   1529  f049		       85 da		      sta	inttemp3
   1530  f04b		       b9 b8 f1 	      lda	buttonhandlerhi,y
   1531  f04e		       85 db		      sta	inttemp4
   1532  f050		       05 da		      ora	inttemp3
   1533  f052		       f0 03		      beq	buttonreadloopreturn
   1534  f054		       6c da 00 	      jmp	(inttemp3)
   1535  f057				   buttonreadloopreturn
   1536  f057		       68		      pla
   1537  f058		       aa		      tax
   1538  f059		       ca		      dex
   1539  f05a		       10 e5		      bpl	buttonreadloop
   1540  f05c
   1541  f05c							;ifconst KEYPADSUPPORT
   1542  f05c							;  jsr keypadrowselect
   1543  f05c							;endif ; KEYPADSUPPORT
   1544  f05c
   1545  f05c
   1546  f05c				  -	      ifconst	DOUBLEBUFFER
   1547  f05c				  -	      lda	doublebufferminimumframeindex
   1548  f05c				  -	      beq	skipdoublebufferminimumframeindexadjust
   1549  f05c				  -	      dec	doublebufferminimumframeindex
   1550  f05c				  -skipdoublebufferminimumframeindexadjust
   1551  f05c					      endif
   1552  f05c
   1553  f05c		       4c 79 f0 	      jmp	NMIexit
   1554  f05f
   1555  f05f				   IRQ			; the only source of non-nmi interrupt should be the BRK opcode.
   1556  f05f					      ifnconst	BREAKPROTECTOFF
   1557  f05f		       a9 1a		      lda	#$1A
   1558  f061		       85 20		      sta	BACKGRND
   1559  f063				   skipbrkolorset
   1560  f063				   skipbrkdetected
   1561  f063		       a9 60		      lda	#$60
   1562  f065		       8d 07 21 	      sta	sCTRL
   1563  f068		       85 3c		      sta	CTRL
   1564  f06a					      ifnconst	hiscorefont
   1565  f06a		       02		      .byte.b	$02	; KIL/JAM
   1566  f06b				  -	      else		; hiscorefont is present
   1567  f06b				  -	      ifconst	CRASHDUMP
   1568  f06b				  -	      bit	MSTAT
   1569  f06b				  -	      bpl	skipbrkdetected	; wait for vblank to ensure we're clear of NMI
   1570  f06b				  -
   1571  f06b				  -	      ifconst	dumpbankswitch
   1572  f06b				  -	      lda	dumpbankswitch
   1573  f06b				  -	      pha
   1574  f06b				  -	      endif
   1575  f06b				  -
   1576  f06b				  -			; bankswitch if needed, to get to the hiscore font
   1577  f06b				  -	      ifconst	bankswitchmode
   1578  f06b				  -	      ifconst	included.hiscore.asm.bank
   1579  f06b				  -	      ifconst	MCPDEVCART
   1580  f06b				  -	      lda	#($18 | included.hiscore.asm.bank)
   1581  f06b				  -	      sta	$3000
   1582  f06b				  -	      else
   1583  f06b				  -	      lda	#(included.hiscore.asm.bank)
   1584  f06b				  -	      sta	$8000
   1585  f06b				  -	      endif
   1586  f06b				  -	      endif		; included.hiscore.asm.bank
   1587  f06b				  -	      endif		; bankswitchmode
   1588  f06b				  -
   1589  f06b				  -	      ifconst	DOUBLEBUFFER
   1590  f06b				  -			;turn off double-buffering, if on...
   1591  f06b				  -	      lda	#>DLLMEM
   1592  f06b				  -	      sta	DPPH
   1593  f06b				  -	      lda	#<DLLMEM
   1594  f06b				  -	      sta	DPPL
   1595  f06b				  -	      endif
   1596  f06b				  -
   1597  f06b				  -	      lda	#$00
   1598  f06b				  -	      sta	P0C2
   1599  f06b				  -
   1600  f06b				  -			;update the second-from-top DL...
   1601  f06b				  -	      ldy	#8
   1602  f06b				  -NMIupdatetopDL
   1603  f06b				  -	      lda	show2700,y
   1604  f06b				  -	      sta	ZONE1ADDRESS,y
   1605  f06b				  -	      dey
   1606  f06b				  -	      bpl	NMIupdatetopDL
   1607  f06b				  -
   1608  f06b				  -			; the hiscore font is present, so we try to output the stack
   1609  f06b				  -	      ldy	#0
   1610  f06b				  -copystackloop
   1611  f06b				  -	      pla
   1612  f06b				  -	      pha
   1613  f06b				  -	      lsr
   1614  f06b				  -	      lsr
   1615  f06b				  -	      lsr
   1616  f06b				  -	      lsr
   1617  f06b				  -	      tax
   1618  f06b				  -	      lda	hiscorehexlut,x
   1619  f06b				  -	      sta	$2700,y
   1620  f06b				  -	      iny
   1621  f06b				  -
   1622  f06b				  -	      pla
   1623  f06b				  -	      and	#$0F
   1624  f06b				  -	      tax
   1625  f06b				  -	      lda	hiscorehexlut,x
   1626  f06b				  -	      sta	$2700,y
   1627  f06b				  -	      iny
   1628  f06b				  -
   1629  f06b				  -	      lda	#27	; period
   1630  f06b				  -	      sta	$2700,y
   1631  f06b				  -	      iny
   1632  f06b				  -
   1633  f06b				  -	      cpy	#30
   1634  f06b				  -	      bne	copystackloop
   1635  f06b				  -
   1636  f06b				  -	      lda	#>hiscorefont
   1637  f06b				  -	      sta	CHARBASE
   1638  f06b				  -	      sta	sCHARBASE
   1639  f06b				  -	      lda	#%01000011	;Enable DMA, mode=320A
   1640  f06b				  -	      sta	CTRL
   1641  f06b				  -	      sta	sCTRL
   1642  f06b				  -	      .byte	$02	; KIL/JAM
   1643  f06b				  -hiscorehexlut
   1644  f06b				  -			;	  0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
   1645  f06b				  -	      .byte	33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 0, 1, 2, 3, 4, 5
   1646  f06b				  -show2700
   1647  f06b				  -			;	 lo   mode	   hi	width=29  x   EODL
   1648  f06b				  -	      .byte	$00, %01100000, $27, 3, 20, 0,0,0
   1649  f06b				  -	      else		; CRASHDUMP
   1650  f06b				  -	      .byte	$02	; KIL/JAM
   1651  f06b				  -	      endif		; crashdump
   1652  f06b					      endif		; hiscorefont
   1653  f06b				  -	      else
   1654  f06b				  -	      RTI
   1655  f06b					      endif
   1656  f06b
   1657  f06b				  -	      ifconst	LONGCONTROLLERREAD
   1658  f06b				  -
   1659  f06b				  -longreadtype
   1660  f06b				  -	      .byte	0, 0, 0, 1	; NONE     PROLINE   LIGHTGUN	PADDLE
   1661  f06b				  -	      .byte	2, 0, 3, 0	; TRKBALL  VCSSTICK  DRIVING	KEYPAD
   1662  f06b				  -	      .byte	3, 3, 0, 0	; STMOUSE  AMOUSE    ATARIVOX	SNES
   1663  f06b				  -
   1664  f06b				  -longreadroutineloP0
   1665  f06b				  -	      .byte	<LLRET0	;  0 = no routine
   1666  f06b				  -	      .byte	<paddleport0update	;  1 = paddle
   1667  f06b				  -	      .byte	<trakball0update	;  2 = trakball
   1668  f06b				  -	      .byte	<mouse0update	;  3 = mouse
   1669  f06b				  -
   1670  f06b				  -longreadroutinehiP0
   1671  f06b				  -	      .byte	>LLRET0	;  0 = no routine
   1672  f06b				  -	      .byte	>paddleport0update	;  1 = paddle
   1673  f06b				  -	      .byte	>trakball0update	;  2 = trackball
   1674  f06b				  -	      .byte	>mouse0update	;  3 = mouse
   1675  f06b				  -
   1676  f06b				  -longreadroutineloP1
   1677  f06b				  -	      .byte	<LLRET1	;  0 = no routine
   1678  f06b				  -	      .byte	<paddleport1update	;  1 = paddle
   1679  f06b				  -	      .byte	<trakball1update	;  2 = trakball
   1680  f06b				  -	      .byte	<mouse1update	;  3 = mouse
   1681  f06b				  -
   1682  f06b				  -longreadroutinehiP1
   1683  f06b				  -	      .byte	>LLRET1	;  0 = no routine
   1684  f06b				  -	      .byte	>paddleport1update	;  1 = paddle
   1685  f06b				  -	      .byte	>trakball1update	;  2 = trackball
   1686  f06b				  -	      .byte	>mouse1update	;  3 = mouse
   1687  f06b				  -
   1688  f06b				  -
   1689  f06b				  -SETTIM64T
   1690  f06b				  -	      bne	skipdefaulttime
   1691  f06b				  -	      ifnconst	PADDLESMOOTHINGOFF
   1692  f06b				  -	      lda	#(TIMEVAL+TIMEOFFSET+1)
   1693  f06b				  -	      else
   1694  f06b				  -	      lda	#(TIMEVAL+TIMEOFFSET)
   1695  f06b				  -	      endif
   1696  f06b				  -skipdefaulttime
   1697  f06b				  -	      tay
   1698  f06b				  -	      dey
   1699  f06b				  -.setTIM64Tloop
   1700  f06b				  -	      sta	TIM64T
   1701  f06b				  -	      cpy	INTIM
   1702  f06b				  -	      bne	.setTIM64Tloop
   1703  f06b				  -	      rts
   1704  f06b					      endif		; LONGCONTROLLERREAD
   1705  f06b
   1706  f06b				   reallyoffvisible
   1707  f06b		       85 24		      sta	WSYNC
   1708  f06d
   1709  f06d		       a9 00		      lda	#0
   1710  f06f		       85 4d		      sta	visibleover
   1711  f071				  -	      ifconst	DEBUGINTERRUPT
   1712  f071				  -	      sta	BACKGRND
   1713  f071					      endif
   1714  f071
   1715  f071		       a9 03		      lda	#3
   1716  f073		       8d b2 01 	      sta	interruptindex
   1717  f076
   1718  f076		       20 59 f1 	      jsr	uninterruptableroutines
   1719  f079
   1720  f079				  -	      ifconst	.userinterrupt
   1721  f079				  -	      lda	interrupthold
   1722  f079				  -	      beq	skipuserintroutine
   1723  f079				  -	      jsr	.userinterrupt
   1724  f079				  -skipuserintroutine
   1725  f079					      endif
   1726  f079
   1727  f079				  -	      ifconst	KEYPADSUPPORT
   1728  f079				  -	      jsr	keypadcolumnread
   1729  f079				  -	      jsr	keypadrowselect
   1730  f079					      endif
   1731  f079
   1732  f079				   NMIexit
   1733  f079		       68		      pla
   1734  f07a		       a8		      tay
   1735  f07b		       68		      pla
   1736  f07c		       aa		      tax
   1737  f07d		       68		      pla
   1738  f07e		       40		      RTI
   1739  f07f
   1740  f07f				   clearscreen
   1741  f07f		       a2 0b		      ldx	#(WZONECOUNT-1)
   1742  f081		       a9 00		      lda	#0
   1743  f083				   clearscreenloop
   1744  f083		       95 65		      sta	dlend,x
   1745  f085		       ca		      dex
   1746  f086		       10 fb		      bpl	clearscreenloop
   1747  f088		       a9 00		      lda	#0
   1748  f08a		       8d ad 01 	      sta	valbufend	; clear the bcd value buffer
   1749  f08d		       8d ae 01 	      sta	valbufendsave
   1750  f090		       60		      rts
   1751  f091
   1752  f091				   restorescreen
   1753  f091		       a2 0b		      ldx	#(WZONECOUNT-1)
   1754  f093		       a9 00		      lda	#0
   1755  f095				   restorescreenloop
   1756  f095		       b5 82		      lda	dlendsave,x
   1757  f097		       95 65		      sta	dlend,x
   1758  f099		       ca		      dex
   1759  f09a		       10 f9		      bpl	restorescreenloop
   1760  f09c		       ad ae 01 	      lda	valbufendsave
   1761  f09f		       8d ad 01 	      sta	valbufend
   1762  f0a2		       60		      rts
   1763  f0a3
   1764  f0a3				   savescreen
   1765  f0a3		       a2 0b		      ldx	#(WZONECOUNT-1)
   1766  f0a5				   savescreenloop
   1767  f0a5		       b5 65		      lda	dlend,x
   1768  f0a7		       95 82		      sta	dlendsave,x
   1769  f0a9		       ca		      dex
   1770  f0aa		       10 f9		      bpl	savescreenloop
   1771  f0ac		       ad ad 01 	      lda	valbufend
   1772  f0af		       8d ae 01 	      sta	valbufendsave
   1773  f0b2				  -	      ifconst	DOUBLEBUFFER
   1774  f0b2				  -	      lda	doublebufferstate
   1775  f0b2				  -	      beq	savescreenrts
   1776  f0b2				  -	      lda	#1
   1777  f0b2				  -	      sta	doublebufferbufferdirty
   1778  f0b2				  -savescreenrts
   1779  f0b2					      endif		; DOUBLEBUFFER
   1780  f0b2		       60		      rts
   1781  f0b3
   1782  f0b3				   drawscreen
   1783  f0b3
   1784  f0b3				  -	      ifconst	interrupthold
   1785  f0b3				  -	      lda	#$FF
   1786  f0b3				  -	      sta	interrupthold	; if the user called drawscreen, we're ready for interrupts
   1787  f0b3					      endif
   1788  f0b3
   1789  f0b3		       a9 00		      lda	#0
   1790  f0b5		       85 42		      sta	temp1	; not B&W if we're here...
   1791  f0b7
   1792  f0b7				   drawscreenwait
   1793  f0b7		       a5 4d		      lda	visibleover
   1794  f0b9		       d0 fc		      bne	drawscreenwait	; make sure the visible screen isn't being drawn
   1795  f0bb
   1796  f0bb							;restore some registers in case the game changed them mid-screen...
   1797  f0bb		       ad 07 21 	      lda	sCTRL
   1798  f0be		       05 42		      ora	temp1
   1799  f0c0		       85 3c		      sta	CTRL
   1800  f0c2		       ad 0b 21 	      lda	sCHARBASE
   1801  f0c5		       85 34		      sta	CHARBASE
   1802  f0c7
   1803  f0c7							;ensure all of the display list is terminated...
   1804  f0c7		       20 3f f1 	      jsr	terminatedisplaylist
   1805  f0ca
   1806  f0ca					      ifnconst	pauseroutineoff
   1807  f0ca		       20 d5 f0 	      jsr	pauseroutine
   1808  f0cd					      endif		; pauseroutineoff
   1809  f0cd
   1810  f0cd							; Make sure the visible screen has *started* before we exit. That way we can rely on drawscreen
   1811  f0cd							; delaying a full frame, but still allowing time for basic calculations.
   1812  f0cd				   visiblescreenstartedwait
   1813  f0cd		       a5 4d		      lda	visibleover
   1814  f0cf		       f0 fc		      beq	visiblescreenstartedwait
   1815  f0d1				   visiblescreenstartedwaitdone
   1816  f0d1		       ce 3e 21 	      dec	frameslost	; ; this gets balanced with an "inc frameslost" by an NMI at the top of the screen
   1817  f0d4		       60		      rts
   1818  f0d5
   1819  f0d5					      ifnconst	pauseroutineoff
   1820  f0d5							; check to see if pause was pressed and released
   1821  f0d5				   pauseroutine
   1822  f0d5		       ad b3 01 	      lda	pausedisable
   1823  f0d8		       d0 55		      bne	leavepauseroutine
   1824  f0da		       a9 08		      lda	#8
   1825  f0dc		       2c 82 02 	      bit	SWCHB
   1826  f0df		       f0 30		      beq	pausepressed
   1827  f0e1
   1828  f0e1					      ifnconst	SOFTPAUSEOFF
   1829  f0e1					      ifnconst	SOFTRESETASPAUSEOFF
   1830  f0e1					      ifnconst	MOUSESUPPORT
   1831  f0e1					      ifnconst	TRAKBALLSUPPORT
   1832  f0e1		       ad b7 01 	      lda	port0control
   1833  f0e4		       c9 0b		      cmp	#11
   1834  f0e6		       d0 07		      bne	skipsoftpause
   1835  f0e8		       ad 80 02 	      lda	SWCHA	; then check the soft "RESET" joysick code...
   1836  f0eb		       29 70		      and	#%01110000	; _LDU
   1837  f0ed		       f0 22		      beq	pausepressed
   1838  f0ef				   skipsoftpause
   1839  f0ef					      endif
   1840  f0ef					      endif
   1841  f0ef					      endif
   1842  f0ef					      endif
   1843  f0ef				  -	      ifconst	SNES0PAUSE
   1844  f0ef				  -	      lda	port0control
   1845  f0ef				  -	      cmp	#11
   1846  f0ef				  -	      bne	skipsnes0pause
   1847  f0ef				  -	      lda	snesdetected0
   1848  f0ef				  -	      beq	skipsnes0pause
   1849  f0ef				  -	      lda	snes2atari0hi
   1850  f0ef				  -	      and	#%00010000
   1851  f0ef				  -	      beq	pausepressed
   1852  f0ef				  -skipsnes0pause
   1853  f0ef					      endif
   1854  f0ef				  -	      ifconst	SNES1PAUSE
   1855  f0ef				  -
   1856  f0ef				  -	      lda	port1control
   1857  f0ef				  -	      cmp	#11
   1858  f0ef				  -	      bne	skipsnes1pause
   1859  f0ef				  -	      lda	snesdetected1
   1860  f0ef				  -	      beq	skipsnes1pause
   1861  f0ef				  -	      lda	snes2atari1hi
   1862  f0ef				  -	      and	#%00010000
   1863  f0ef				  -	      beq	pausepressed
   1864  f0ef				  -skipsnes1pause
   1865  f0ef					      endif
   1866  f0ef				  -	      ifconst	SNESNPAUSE
   1867  f0ef				  -	      ldx	snesport
   1868  f0ef				  -	      lda	port0control,x
   1869  f0ef				  -	      cmp	#11
   1870  f0ef				  -	      bne	skipsnesNpause
   1871  f0ef				  -	      lda	snesdetected0,x
   1872  f0ef				  -	      beq	skipsnesNpause
   1873  f0ef				  -	      lda	snes2atari0hi,x
   1874  f0ef				  -	      and	#%00010000
   1875  f0ef				  -	      beq	pausepressed
   1876  f0ef				  -skipsnesNpause
   1877  f0ef					      endif
   1878  f0ef
   1879  f0ef							;pause isn't pressed
   1880  f0ef		       a9 00		      lda	#0
   1881  f0f1		       8d ac 01 	      sta	pausebuttonflag	; clear pause hold state in case its set
   1882  f0f4
   1883  f0f4							;check if we're in an already paused state
   1884  f0f4		       ad 00 21 	      lda	pausestate
   1885  f0f7		       f0 36		      beq	leavepauseroutine	; nope, leave
   1886  f0f9
   1887  f0f9		       c9 01		      cmp	#1	; last frame was the start of pausing
   1888  f0fb		       f0 2b		      beq	enterpausestate2	; move from state 1 to 2
   1889  f0fd
   1890  f0fd		       c9 02		      cmp	#2
   1891  f0ff		       f0 34		      beq	carryonpausing
   1892  f101
   1893  f101							;pausestate must be >2, which means we're ending an unpause 
   1894  f101		       a9 00		      lda	#0
   1895  f103		       8d ac 01 	      sta	pausebuttonflag
   1896  f106		       8d 00 21 	      sta	pausestate
   1897  f109		       ad 07 21 	      lda	sCTRL
   1898  f10c		       85 3c		      sta	CTRL
   1899  f10e		       4c 2f f1 	      jmp	leavepauseroutine
   1900  f111
   1901  f111				   pausepressed
   1902  f111							;pause is pressed
   1903  f111		       ad ac 01 	      lda	pausebuttonflag
   1904  f114		       c9 ff		      cmp	#$ff
   1905  f116		       f0 1d		      beq	carryonpausing
   1906  f118
   1907  f118							;its a new press, increment the state
   1908  f118		       ee 00 21 	      inc	pausestate
   1909  f11b
   1910  f11b							;silence volume at the start and end of pausing
   1911  f11b		       a9 00		      lda	#0
   1912  f11d		       85 19		      sta	AUDV0
   1913  f11f		       85 1a		      sta	AUDV1
   1914  f121
   1915  f121				  -	      ifconst	pokeysupport
   1916  f121				  -	      ldy	#7
   1917  f121				  -pausesilencepokeyaudioloop
   1918  f121				  -	      sta	(pokeybase),y
   1919  f121				  -	      dey
   1920  f121				  -	      bpl	pausesilencepokeyaudioloop
   1921  f121					      endif		; pokeysupport
   1922  f121
   1923  f121		       a9 ff		      lda	#$ff
   1924  f123		       8d ac 01 	      sta	pausebuttonflag
   1925  f126		       d0 0d		      bne	carryonpausing
   1926  f128
   1927  f128				   enterpausestate2
   1928  f128		       a9 02		      lda	#2
   1929  f12a		       8d 00 21 	      sta	pausestate
   1930  f12d		       d0 06		      bne	carryonpausing
   1931  f12f				   leavepauseroutine
   1932  f12f		       ad 07 21 	      lda	sCTRL
   1933  f132		       85 3c		      sta	CTRL
   1934  f134		       60		      rts
   1935  f135				   carryonpausing
   1936  f135				  -	      ifconst	.pause
   1937  f135				  -	      jsr	.pause
   1938  f135					      endif		; .pause
   1939  f135		       ad 07 21 	      lda	sCTRL
   1940  f138		       09 80		      ora	#%10000000	; turn off colorburst during pause...
   1941  f13a		       85 3c		      sta	CTRL
   1942  f13c		       4c d5 f0 	      jmp	pauseroutine
   1943  f13f					      endif		; pauseroutineoff
   1944  f13f
   1945  f13f
   1946  f13f				  -	      ifconst	DOUBLEBUFFER
   1947  f13f				  -skipterminatedisplaylistreturn
   1948  f13f				  -	      rts
   1949  f13f					      endif		; DOUBLEBUFFER
   1950  f13f				   terminatedisplaylist
   1951  f13f				  -	      ifconst	DOUBLEBUFFER
   1952  f13f				  -	      lda	doublebufferstate
   1953  f13f				  -	      bne	skipterminatedisplaylistreturn	; double-buffering runs it's own DL termination code
   1954  f13f					      endif		; DOUBLEBUFFER
   1955  f13f				   terminatedisplaybuffer
   1956  f13f							;add DL end entry on each DL
   1957  f13f		       a2 0b		      ldx	#(WZONECOUNT-1)
   1958  f141				   dlendloop
   1959  f141		       bd e9 f5 	      lda	DLPOINTL,x
   1960  f144				  -	      ifconst	DOUBLEBUFFER
   1961  f144				  -	      clc
   1962  f144				  -	      adc	doublebufferdloffset
   1963  f144					      endif		; DOUBLEBUFFER
   1964  f144		       85 63		      sta	dlpnt
   1965  f146		       bd dd f5 	      lda	DLPOINTH,x
   1966  f149				  -	      ifconst	DOUBLEBUFFER
   1967  f149				  -	      adc	#0
   1968  f149					      endif		; DOUBLEBUFFER
   1969  f149		       85 64		      sta	dlpnt+1
   1970  f14b		       b4 65		      ldy	dlend,x
   1971  f14d		       a9 00		      lda	#$00
   1972  f14f				   dlendmoreloops
   1973  f14f		       c8		      iny
   1974  f150		       91 63		      sta	(dlpnt),y
   1975  f152				  -	      ifconst	FRAMESKIPGLITCHFIXWEAK
   1976  f152				  -	      cpy	#DLLASTOBJ+1
   1977  f152				  -	      beq	dlendthiszonedone
   1978  f152				  -	      iny
   1979  f152				  -	      iny
   1980  f152				  -	      iny
   1981  f152				  -	      iny
   1982  f152				  -	      iny
   1983  f152				  -	      sta	(dlpnt),y
   1984  f152				  -dlendthiszonedone
   1985  f152					      endif	FRAMESKIPGLITCHFIXWEAK
   1986  f152				  -	      ifconst	FRAMESKIPGLITCHFIX
   1987  f152				  -	      iny
   1988  f152				  -	      iny
   1989  f152				  -	      iny
   1990  f152				  -	      iny
   1991  f152				  -	      cpy	#DLLASTOBJ-1
   1992  f152				  -	      bcc	dlendmoreloops
   1993  f152					      endif		; FRAMESKIPGLITCHFIX
   1994  f152		       ca		      dex
   1995  f153		       10 ec		      bpl	dlendloop
   1996  f155
   1997  f155					      ifnconst	pauseroutineoff
   1998  f155		       20 d5 f0 	      jsr	pauseroutine
   1999  f158					      endif		; pauseroutineoff
   2000  f158		       60		      rts
   2001  f159
   2002  f159				   uninterruptableroutines
   2003  f159							; this is for routines that must happen off the visible screen, each frame.
   2004  f159
   2005  f159				  -	      ifconst	AVOXVOICE
   2006  f159				  -	      jsr	serviceatarivoxqueue
   2007  f159					      endif
   2008  f159
   2009  f159		       a9 00		      lda	#0
   2010  f15b		       8d b6 01 	      sta	palfastframe
   2011  f15e		       ad 09 21 	      lda	paldetected
   2012  f161		       f0 10		      beq	skippalframeadjusting
   2013  f163							; ** PAL console is detected. we increment palframes to accurately count 5 frames,
   2014  f163		       ae b5 01 	      ldx	palframes
   2015  f166		       e8		      inx
   2016  f167		       e0 05		      cpx	#5
   2017  f169		       d0 05		      bne	palframeskipdone
   2018  f16b		       ee b6 01 	      inc	palfastframe
   2019  f16e		       a2 00		      ldx	#0
   2020  f170				   palframeskipdone
   2021  f170		       8e b5 01 	      stx	palframes
   2022  f173				   skippalframeadjusting
   2023  f173
   2024  f173				  -	      ifconst	MUSICTRACKER
   2025  f173				  -			; We normally run the servicesong routine from the top-screen interrupt, but if it
   2026  f173				  -			; happens to interrupt the scheduling of a sound effect in the game code, we skip it.
   2027  f173				  -			; If that happens, we try again here. Chances are very small we'll run into the same
   2028  f173				  -			; problem twice, and if we do, we just drop a musical note or two.
   2029  f173				  -	      lda	sfxschedulemissed
   2030  f173				  -	      beq	servicesongwasnotmissed
   2031  f173				  -	      jsr	servicesong
   2032  f173				  -servicesongwasnotmissed
   2033  f173					      endif		; MUSICTRACKER
   2034  f173
   2035  f173				  -	      ifconst	RMT
   2036  f173				  -	      lda	palfastframe
   2037  f173				  -	      beq	skiprasterupdate2
   2038  f173				  -	      lda	rasterpause
   2039  f173				  -	      beq	skiprasterupdate2
   2040  f173				  -	      jsr	RASTERMUSICTRACKER+3
   2041  f173				  -skiprasterupdate2
   2042  f173					      endif
   2043  f173
   2044  f173
   2045  f173		       60		      rts
   2046  f174
   2047  f174				   serviceatarivoxqueue
   2048  f174				  -	      ifconst	AVOXVOICE
   2049  f174				  -	      lda	voxlock
   2050  f174				  -	      bne	skipvoxprocessing	; the vox is in the middle of speech address update
   2051  f174				  -skipvoxqueuesizedec
   2052  f174				  -	      jmp	processavoxvoice
   2053  f174				  -skipvoxprocessing
   2054  f174				  -	      rts
   2055  f174				  -
   2056  f174				  -processavoxvoice
   2057  f174				  -	      ifconst	HSSUPPORT
   2058  f174				  -			; ** we skip speech if hi-score is on and no vox was detected
   2059  f174				  -			; ** this is to avoid later collision with snes pads.
   2060  f174				  -	      lda	hsdevice
   2061  f174				  -	      and	#2
   2062  f174				  -	      beq	processavoxvoicereturn
   2063  f174				  -	      endif		; HSSUPPORT
   2064  f174				  -	      lda	avoxenable
   2065  f174				  -	      bne	avoxfixport
   2066  f174				  -	      SPKOUT	tempavox
   2067  f174				  -	      rts
   2068  f174				  -avoxfixport
   2069  f174				  -	      lda	#0	; restore the port to all bits as inputs...
   2070  f174				  -	      sta	CTLSWA
   2071  f174				  -	      rts
   2072  f174				  -silenceavoxvoice
   2073  f174				  -	      SPEAK	avoxsilentdata
   2074  f174				  -processavoxvoicereturn
   2075  f174				  -	      rts
   2076  f174				  -avoxsilentdata
   2077  f174				  -	      .byte	31,255
   2078  f174					      else
   2079  f174		       60		      rts
   2080  f175					      endif		; AVOXVOICE
   2081  f175
   2082  f175				   joybuttonhandler
   2083  f175		       8a		      txa
   2084  f176		       0a		      asl
   2085  f177		       a8		      tay
   2086  f178		       b9 08 00 	      lda	INPT0,y
   2087  f17b		       4a		      lsr
   2088  f17c		       9d 02 21 	      sta	sINPT1,x
   2089  f17f		       b9 09 00 	      lda	INPT1,y
   2090  f182		       29 80		      and	#%10000000
   2091  f184		       1d 02 21 	      ora	sINPT1,x
   2092  f187		       9d 02 21 	      sta	sINPT1,x
   2093  f18a
   2094  f18a		       b5 0c		      lda	INPT4,x
   2095  f18c		       30 19		      bmi	.skip1bjoyfirecheck
   2096  f18e							;one button joystick is down
   2097  f18e		       49 80		      eor	#%10000000
   2098  f190		       9d 02 21 	      sta	sINPT1,x
   2099  f193
   2100  f193		       ad b1 01 	      lda	joybuttonmode
   2101  f196		       3d aa f1 	      and	twobuttonmask,x
   2102  f199		       f0 0c		      beq	.skip1bjoyfirecheck
   2103  f19b		       ad b1 01 	      lda	joybuttonmode
   2104  f19e		       1d aa f1 	      ora	twobuttonmask,x
   2105  f1a1		       8d b1 01 	      sta	joybuttonmode
   2106  f1a4		       8d 82 02 	      sta	SWCHB
   2107  f1a7				   .skip1bjoyfirecheck
   2108  f1a7		       4c 57 f0 	      jmp	buttonreadloopreturn
   2109  f1aa
   2110  f1aa				   twobuttonmask
   2111  f1aa		       04 10		      .byte.b	%00000100,%00010000
   2112  f1ac
   2113  f1ac				  -	      ifconst	SNES2ATARISUPPORT
   2114  f1ac				  -
   2115  f1ac				  -SNES_CLOCK_PORT_BIT
   2116  f1ac				  -	      .byte	$10,$01
   2117  f1ac				  -SNES_CTLSWA_MASK
   2118  f1ac				  -	      .byte	$30,$03
   2119  f1ac				  -SNES_CTLSWA_SIGNAL
   2120  f1ac				  -	      .byte	$C0,$0C
   2121  f1ac				  -SWCHA_DIRMASK
   2122  f1ac				  -	      .byte	$F0,$0F
   2123  f1ac				  -SWCHA_INVDIRMASK
   2124  f1ac				  -	      .byte	$0F,$F0
   2125  f1ac				  -
   2126  f1ac				  -			; Probe each port for SNES, and see if autodetection succeeds anywhere.
   2127  f1ac				  -SNES_AUTODETECT
   2128  f1ac				  -	      ifconst	HSSUPPORT
   2129  f1ac				  -			; ** an atarivox might be plugged in, so we skip scanning the second
   2130  f1ac				  -			; ** port for a snes if vox was detected...
   2131  f1ac				  -	      lda	hsdevice	; b1 high means atarivox/savekey was detected
   2132  f1ac				  -	      lsr
   2133  f1ac				  -	      and	#1
   2134  f1ac				  -	      eor	#1
   2135  f1ac				  -	      tax
   2136  f1ac				  -	      else
   2137  f1ac				  -	      ldx	#1
   2138  f1ac				  -	      endif		; HSSUPPORT
   2139  f1ac				  -
   2140  f1ac				  -SNES_AUTODETECT_LOOP
   2141  f1ac				  -	      lda	#1	; proline
   2142  f1ac				  -	      sta	port0control,x
   2143  f1ac				  -	      jsr	setportforinput
   2144  f1ac				  -	      jsr	setonebuttonmode
   2145  f1ac				  -	      jsr	SNES_READ
   2146  f1ac				  -	      lda	snesdetected0,x
   2147  f1ac				  -	      bne	SNES_AUTODETECT_FOUND
   2148  f1ac				  -			; detection failed
   2149  f1ac				  -	      jsr	setportforinput
   2150  f1ac				  -	      jsr	settwobuttonmode
   2151  f1ac				  -	      dex
   2152  f1ac				  -	      bpl	SNES_AUTODETECT_LOOP
   2153  f1ac				  -	      rts
   2154  f1ac				  -SNES_AUTODETECT_FOUND
   2155  f1ac				  -	      lda	#11	; formally set the snes controller
   2156  f1ac				  -	      sta	port0control,x
   2157  f1ac				  -	      stx	snesport
   2158  f1ac				  -	      rts
   2159  f1ac					      endif		; SNES2ATARISUPPORT
   2160  f1ac
   2161  f1ac				   snes2atarihandler
   2162  f1ac				  -	      ifconst	SNES2ATARISUPPORT
   2163  f1ac				  -SNES2ATARI
   2164  f1ac				  -	      jsr	SNES_READ
   2165  f1ac				  -	      jmp	buttonreadloopreturn
   2166  f1ac				  -
   2167  f1ac				  -SNES_READ
   2168  f1ac				  -			; x=0 for left port, x=1 for right
   2169  f1ac				  -
   2170  f1ac				  -			; Start by checking if any port directions are pressed. 
   2171  f1ac				  -			; Abort the autodetect for this port if so, as snes2atari doesn't ground any 
   2172  f1ac				  -			; direction pins. if directions are pressed and the port is changed to output,
   2173  f1ac				  -			; that means the output is direct-shorted, and nobody seems to know if riot's
   2174  f1ac				  -			; output mode has current protection.
   2175  f1ac				  -
   2176  f1ac				  -	      lda	SWCHA
   2177  f1ac				  -	      ora	SWCHA_INVDIRMASK,x
   2178  f1ac				  -	      eor	SWCHA_DIRMASK,x
   2179  f1ac				  -	      bne	SNES_READ_cont1
   2180  f1ac				  -	      jmp	SNES_ABORT
   2181  f1ac				  -SNES_READ_cont1
   2182  f1ac				  -
   2183  f1ac				  -	      lda	port0control,x
   2184  f1ac				  -	      cmp	#11	; snes
   2185  f1ac				  -	      bne	snes2atari_signal_go	; if this is a first auto-detection read, go ahead and signal
   2186  f1ac				  -	      lda	snesdetected0,x
   2187  f1ac				  -	      bne	snes2atari_signal_skip	; if snes was available in previous frames, skip signalling
   2188  f1ac				  -snes2atari_signal_go
   2189  f1ac				  -	      jsr	SNES2ATARI_SIGNAL
   2190  f1ac				  -snes2atari_signal_skip
   2191  f1ac				  -
   2192  f1ac				  -			;lda SNES_CTLSWA_MASK,x
   2193  f1ac				  -
   2194  f1ac				  -	      lda	CTLSWA
   2195  f1ac				  -	      and	SWCHA_INVDIRMASK,x	; preserve othr nibble
   2196  f1ac				  -	      ora	SNES_CTLSWA_MASK,x
   2197  f1ac				  -	      sta	CTLSWA	; enable pins UP/DOWN to work as outputs
   2198  f1ac				  -
   2199  f1ac				  -	      lda	SWCHA
   2200  f1ac				  -	      and	SWCHA_INVDIRMASK,x	; preserve othr nibble
   2201  f1ac				  -	      ora	SNES_CTLSWA_MASK,x
   2202  f1ac				  -
   2203  f1ac				  -	      sta	SWCHA	; latch+clock high
   2204  f1ac				  -	      nop
   2205  f1ac				  -	      nop
   2206  f1ac				  -	      nop
   2207  f1ac				  -	      nop
   2208  f1ac				  -	      nop
   2209  f1ac				  -	      nop
   2210  f1ac				  -	      nop
   2211  f1ac				  -	      lda	SWCHA
   2212  f1ac				  -	      and	SWCHA_INVDIRMASK,x	; preserve othr nibble
   2213  f1ac				  -	      sta	SWCHA	; latch and clock low
   2214  f1ac				  -	      ldy	#16	; 16 bits 
   2215  f1ac				  -SNES2ATARILOOP
   2216  f1ac				  -	      rol	INPT4,x	; sample data into carry
   2217  f1ac				  -	      lda	SWCHA
   2218  f1ac				  -	      and	SWCHA_INVDIRMASK,x	; preserve othr nibble
   2219  f1ac				  -	      ora	SNES_CLOCK_PORT_BIT,x
   2220  f1ac				  -	      sta	SWCHA	; clock low
   2221  f1ac				  -	      rol	snes2atari0lo,x
   2222  f1ac				  -	      rol	snes2atari0hi,x
   2223  f1ac				  -	      lda	SWCHA
   2224  f1ac				  -	      and	SWCHA_INVDIRMASK,x	; preserve othr nibble
   2225  f1ac				  -	      sta	SWCHA	; latch and clock low
   2226  f1ac				  -	      dey		; next bit
   2227  f1ac				  -	      bne	SNES2ATARILOOP
   2228  f1ac				  -	      rol	INPT4,x	; 17th bit should be lo if controller is there.
   2229  f1ac				  -	      rol		; 17th snes bit into A low bit
   2230  f1ac				  -	      eor	snes2atari0lo,x	; 16th bit should be hi if controller is there.
   2231  f1ac				  -	      and	#1
   2232  f1ac				  -	      sta	snesdetected0,x
   2233  f1ac				  -	      beq	SNES_STOP_CLOCK	; if snes isn't detected, leave port in default state
   2234  f1ac				  -	      stx	snesport	; snesport keeps the index of the latest autodetected controller
   2235  f1ac				  -	      lda	SWCHA
   2236  f1ac				  -	      and	SWCHA_INVDIRMASK,x	; preserve othr nibble
   2237  f1ac				  -	      ora	SNES_CLOCK_PORT_BIT,x
   2238  f1ac				  -SNES_STOP_CLOCK
   2239  f1ac				  -	      sta	SWCHA	; clock low
   2240  f1ac				  -	      lda	CTLSWA
   2241  f1ac				  -	      and	SWCHA_INVDIRMASK,x	; preserve othr nibble
   2242  f1ac				  -	      ora	SNES_CLOCK_PORT_BIT,x
   2243  f1ac				  -	      sta	CTLSWA	; set port bits to input avoid conflict with other drivers
   2244  f1ac				  -	      rts
   2245  f1ac				  -SNES_ABORT
   2246  f1ac				  -	      sta	snesdetected0,x
   2247  f1ac				  -	      rts
   2248  f1ac				  -SNES2ATARI_SIGNAL
   2249  f1ac				  -			; signal to SNES2ATARI++ that we want SNES mode...
   2250  f1ac				  -	      lda	CTLSWA
   2251  f1ac				  -	      and	SWCHA_INVDIRMASK,x	; preserve othr nibble
   2252  f1ac				  -	      ora	SNES_CTLSWA_SIGNAL,x
   2253  f1ac				  -	      sta	CTLSWA
   2254  f1ac				  -	      lda	CTLSWA
   2255  f1ac				  -	      and	SWCHA_INVDIRMASK,x	; preserve othr nibble
   2256  f1ac				  -	      sta	SWCHA
   2257  f1ac				  -	      ldy	#0
   2258  f1ac				  -SNES_SIGNAL_LOOP
   2259  f1ac				  -	      dey
   2260  f1ac				  -	      bne	SNES_SIGNAL_LOOP
   2261  f1ac				  -	      lda	SWCHA
   2262  f1ac				  -	      ora	SWCHA_DIRMASK,x
   2263  f1ac				  -	      sta	SWCHA
   2264  f1ac				  -	      rts
   2265  f1ac					      endif
   2266  f1ac
   2267  f1ac				   gunbuttonhandler		; outside of the conditional, so our button handler LUT is valid
   2268  f1ac				  -	      ifconst	LIGHTGUNSUPPORT
   2269  f1ac				  -	      cpx	#0
   2270  f1ac				  -	      bne	secondportgunhandler
   2271  f1ac				  -firstportgunhandler
   2272  f1ac				  -	      lda	SWCHA
   2273  f1ac				  -	      asl
   2274  f1ac				  -	      asl
   2275  f1ac				  -	      asl		; shift D4 to D7
   2276  f1ac				  -	      and	#%10000000
   2277  f1ac				  -	      eor	#%10000000
   2278  f1ac				  -	      sta	sINPT1
   2279  f1ac				  -	      jmp	buttonreadloopreturn
   2280  f1ac				  -secondportgunhandler
   2281  f1ac				  -	      lda	SWCHA
   2282  f1ac				  -	      lsr		; shift D0 into carry
   2283  f1ac				  -	      lsr		; shift carry into D7
   2284  f1ac				  -	      and	#%10000000
   2285  f1ac				  -	      eor	#%10000000
   2286  f1ac				  -	      sta	sINPT3
   2287  f1ac				  -	      jmp	buttonreadloopreturn
   2288  f1ac					      endif		; LIGHTGUNSUPPORT
   2289  f1ac
   2290  f1ac				   controlsusing2buttoncode
   2291  f1ac		       00		      .byte.b	0	; 00=no controller plugged in
   2292  f1ad		       01		      .byte.b	1	; 01=proline joystick
   2293  f1ae		       00		      .byte.b	0	; 02=lightgun
   2294  f1af		       00		      .byte.b	0	; 03=paddle
   2295  f1b0		       01		      .byte.b	1	; 04=trakball
   2296  f1b1		       01		      .byte.b	1	; 05=vcs joystick
   2297  f1b2		       01		      .byte.b	1	; 06=driving control
   2298  f1b3		       00		      .byte.b	0	; 07=keypad control
   2299  f1b4		       00		      .byte.b	0	; 08=st mouse/cx80
   2300  f1b5		       00		      .byte.b	0	; 09=amiga mouse
   2301  f1b6		       01		      .byte.b	1	; 10=atarivox
   2302  f1b7		       00		      .byte.b	0	; 11=snes2atari
   2303  f1b8
   2304  f1b8				   buttonhandlerhi
   2305  f1b8		       00		      .byte.b	0	; 00=no controller plugged in
   2306  f1b9		       f1		      .byte.b	>joybuttonhandler	; 01=proline joystick
   2307  f1ba		       f1		      .byte.b	>gunbuttonhandler	; 02=lightgun
   2308  f1bb		       f5		      .byte.b	>paddlebuttonhandler	; 03=paddle
   2309  f1bc		       f1		      .byte.b	>joybuttonhandler	; 04=trakball
   2310  f1bd		       f1		      .byte.b	>joybuttonhandler	; 05=vcs joystick
   2311  f1be		       f1		      .byte.b	>joybuttonhandler	; 06=driving control
   2312  f1bf		       00		      .byte.b	0	; 07=keypad
   2313  f1c0		       f5		      .byte.b	>mousebuttonhandler	; 08=st mouse
   2314  f1c1		       f5		      .byte.b	>mousebuttonhandler	; 09=amiga mouse
   2315  f1c2		       f1		      .byte.b	>joybuttonhandler	; 10=atarivox
   2316  f1c3		       f1		      .byte.b	>snes2atarihandler	; 11=snes
   2317  f1c4				   buttonhandlerlo
   2318  f1c4		       00		      .byte.b	0	; 00=no controller plugged in
   2319  f1c5		       75		      .byte.b	<joybuttonhandler	; 01=proline joystick
   2320  f1c6		       ac		      .byte.b	<gunbuttonhandler	; 02=lightgun 
   2321  f1c7		       26		      .byte.b	<paddlebuttonhandler	; 03=paddle
   2322  f1c8		       75		      .byte.b	<joybuttonhandler	; 04=trakball
   2323  f1c9		       75		      .byte.b	<joybuttonhandler	; 05=vcs joystick
   2324  f1ca		       75		      .byte.b	<joybuttonhandler	; 06=driving control
   2325  f1cb		       00		      .byte.b	0	; 07=keypad
   2326  f1cc		       26		      .byte.b	<mousebuttonhandler	; 08=st mouse
   2327  f1cd		       26		      .byte.b	<mousebuttonhandler	; 09=amiga mouse
   2328  f1ce		       75		      .byte.b	<joybuttonhandler	; 10=atarivox
   2329  f1cf		       ac		      .byte.b	<snes2atarihandler	; 11=snes
   2330  f1d0
   2331  f1d0				   drawwait
   2332  f1d0		       24 4d		      bit	visibleover	; 255 if screen is being drawn, 0 when not.
   2333  f1d2		       30 fc		      bmi	drawwait	; make sure the visible screen isn't being drawn
   2334  f1d4		       60		      rts
   2335  f1d5
   2336  f1d5				   drawoverwait
   2337  f1d5		       24 4d		      bit	visibleover	; 255 if screen is being drawn, 0 when not.
   2338  f1d7		       10 fc		      bpl	drawoverwait	; make sure the visible screen is being drawn
   2339  f1d9		       60		      rts
   2340  f1da
   2341  f1da
   2342  f1da				   mutetia
   2343  f1da		       a9 00		      lda	#0
   2344  f1dc		       a2 03		      ldx	#3
   2345  f1de				   mutetialoop
   2346  f1de		       95 4e		      sta	sfx1pointlo,x
   2347  f1e0		       95 17		      sta	AUDF0,x
   2348  f1e2		       ca		      dex
   2349  f1e3		       10 f9		      bpl	mutetialoop
   2350  f1e5		       60		      rts
   2351  f1e6
   2352  f1e6				   servicesfxchannelsdone
   2353  f1e6					      ifnconst	pokeysupport
   2354  f1e6		       60		      rts
   2355  f1e7				  -	      else
   2356  f1e7				  -	      jmp	checkpokeyplaying
   2357  f1e7					      endif
   2358  f1e7				   servicesfxchannels
   2359  f1e7		       a2 ff		      ldx	#255
   2360  f1e9				   servicesfxchannelsloop
   2361  f1e9		       e8		      inx
   2362  f1ea					      ifnconst	TIASFXMONO
   2363  f1ea		       e0 02		      cpx	#2
   2364  f1ec				  -	      else
   2365  f1ec				  -	      cpx	#1
   2366  f1ec					      endif
   2367  f1ec		       f0 f8		      beq	servicesfxchannelsdone
   2368  f1ee
   2369  f1ee		       a5 de		      lda	sfxschedulelock	; =1 if locked
   2370  f1f0		       d0 f4		      bne	servicesfxchannelsdone	; exit if a pointer may be mid-way change
   2371  f1f2
   2372  f1f2		       b5 4e		      lda	sfx1pointlo,x
   2373  f1f4		       85 dc		      sta	inttemp5
   2374  f1f6		       15 50		      ora	sfx1pointhi,x
   2375  f1f8		       f0 ef		      beq	servicesfxchannelsloop
   2376  f1fa		       b5 50		      lda	sfx1pointhi,x
   2377  f1fc		       85 dd		      sta	inttemp6
   2378  f1fe
   2379  f1fe		       b5 58		      lda	sfx1tick,x
   2380  f200		       f0 05		      beq	servicesfx_cont1	; this chunk is over, load the next!
   2381  f202		       d6 58		      dec	sfx1tick,x	; frame countdown is non-zero, subtract one
   2382  f204		       4c e9 f1 	      jmp	servicesfxchannelsloop
   2383  f207				   servicesfx_cont1
   2384  f207
   2385  f207		       a0 01		      ldy	#1	; check to see if they're changing the frame countdown
   2386  f209		       b1 dc		      lda	(inttemp5),y
   2387  f20b		       c9 10		      cmp	#$10
   2388  f20d		       d0 1b		      bne	servicesfx_cont1a
   2389  f20f		       a0 02		      ldy	#2
   2390  f211		       b1 dc		      lda	(inttemp5),y
   2391  f213		       95 56		      sta	sfx1frames,x	; change the frame countdown
   2392  f215		       a9 00		      lda	#0
   2393  f217		       95 58		      sta	sfx1tick,x
   2394  f219							; advance the sound pointer by 3...
   2395  f219		       b5 4e		      lda	sfx1pointlo,x
   2396  f21b		       18		      clc
   2397  f21c		       69 03		      adc	#3
   2398  f21e		       95 4e		      sta	sfx1pointlo,x
   2399  f220		       b5 50		      lda	sfx1pointhi,x
   2400  f222		       69 00		      adc	#0
   2401  f224		       95 50		      sta	sfx1pointhi,x
   2402  f226							; and then fetch another sample for this channel...
   2403  f226		       ca		      dex
   2404  f227		       4c e9 f1 	      jmp	servicesfxchannelsloop
   2405  f22a				   servicesfx_cont1a
   2406  f22a
   2407  f22a		       b5 56		      lda	sfx1frames,x	; set the frame countdown for this sound chunk
   2408  f22c		       95 58		      sta	sfx1tick,x
   2409  f22e
   2410  f22e		       b5 52		      lda	sfx1priority,x	; decrease the sound's priority if its non-zero
   2411  f230		       f0 02		      beq	servicesfx_cont2
   2412  f232		       d6 52		      dec	sfx1priority,x
   2413  f234				   servicesfx_cont2
   2414  f234
   2415  f234		       a0 00		      ldy	#0	; play the sound
   2416  f236		       b1 dc		      lda	(inttemp5),y
   2417  f238		       85 d8		      sta	inttemp1
   2418  f23a
   2419  f23a				  -	      ifconst	MUSICTRACKER
   2420  f23a				  -	      lda	sfx1notedata,x
   2421  f23a				  -	      beq	exitmusictracker	; exit if this isn't a pitched instrument
   2422  f23a				  -	      ldy	#0
   2423  f23a				  -	      sty	inttemp2
   2424  f23a				  -	      clc
   2425  f23a				  -	      adc	(inttemp5),y
   2426  f23a				  -	      asl		; x2
   2427  f23a				  -	      tay
   2428  f23a				  -	      lda	tiatrackeroctavenotes,y
   2429  f23a				  -	      sta	AUDC0,x
   2430  f23a				  -	      iny
   2431  f23a				  -	      lda	tiatrackeroctavenotes,y
   2432  f23a				  -	      sta	AUDF0,x
   2433  f23a				  -	      ldy	#1
   2434  f23a				  -	      jmp	sfxvolumeentrypt
   2435  f23a				  -exitmusictracker
   2436  f23a				  -	      lda	inttemp1
   2437  f23a					      endif		; MUSICTRACKER
   2438  f23a
   2439  f23a		       18		      clc
   2440  f23b		       75 54		      adc	sfx1poffset,x	; take into account any pitch modification
   2441  f23d		       95 17		      sta	AUDF0,x
   2442  f23f		       c8		      iny
   2443  f240		       b1 dc		      lda	(inttemp5),y
   2444  f242		       95 15		      sta	AUDC0,x
   2445  f244		       85 d9		      sta	inttemp2
   2446  f246		       c8		      iny
   2447  f247				   sfxvolumeentrypt
   2448  f247				  -	      ifconst	TIAVOLUME
   2449  f247				  -	      lda	tiavolume
   2450  f247				  -	      asl
   2451  f247				  -	      asl
   2452  f247				  -	      asl
   2453  f247				  -	      asl
   2454  f247				  -	      sta	fourbitfadevalueint
   2455  f247					      endif		; TIAVOLUME
   2456  f247		       b1 dc		      lda	(inttemp5),y
   2457  f249				  -	      ifconst	TIAVOLUME
   2458  f249				  -	      jsr	fourbitfadeint
   2459  f249					      endif		; TIAVOLUME
   2460  f249		       95 19		      sta	AUDV0,x
   2461  f24b		       c9 10		      cmp	#$10
   2462  f24d		       b0 19		      bcs	sfxsoundloop	; AUDV0>$0F means the sound is looped while priority is active
   2463  f24f
   2464  f24f		       05 d9		      ora	inttemp2
   2465  f251		       05 d8		      ora	inttemp1	; check if F|C|V=0
   2466  f253		       f0 23		      beq	zerosfx	; if so, we're at the end of the sound.
   2467  f255
   2468  f255				   advancesfxpointer
   2469  f255							; advance the pointer to the next sound chunk
   2470  f255		       c8		      iny
   2471  f256		       84 da		      sty	inttemp3
   2472  f258		       18		      clc
   2473  f259		       b5 4e		      lda	sfx1pointlo,x
   2474  f25b		       65 da		      adc	inttemp3
   2475  f25d		       95 4e		      sta	sfx1pointlo,x
   2476  f25f		       b5 50		      lda	sfx1pointhi,x
   2477  f261		       69 00		      adc	#0
   2478  f263		       95 50		      sta	sfx1pointhi,x
   2479  f265		       4c e9 f1 	      jmp	servicesfxchannelsloop
   2480  f268
   2481  f268				   sfxsoundloop
   2482  f268		       48		      pha
   2483  f269		       b5 52		      lda	sfx1priority,x
   2484  f26b		       d0 04		      bne	sfxsoundloop_carryon
   2485  f26d		       68		      pla		; fix the stack before we go
   2486  f26e		       4c 55 f2 	      jmp	advancesfxpointer
   2487  f271				   sfxsoundloop_carryon
   2488  f271		       68		      pla
   2489  f272		       29 f0		      and	#$F0
   2490  f274		       4a		      lsr
   2491  f275		       4a		      lsr
   2492  f276		       4a		      lsr
   2493  f277		       4a		      lsr
   2494  f278
   2495  f278				   zerosfx
   2496  f278		       95 4e		      sta	sfx1pointlo,x
   2497  f27a		       95 50		      sta	sfx1pointhi,x
   2498  f27c		       95 52		      sta	sfx1priority,x
   2499  f27e		       4c e9 f1 	      jmp	servicesfxchannelsloop
   2500  f281
   2501  f281
   2502  f281				   schedulesfx
   2503  f281							; called with sfxinstrumentlo=<data sfxinstrumenthi=>data sfxpitchoffset=pitch-offset sfxnoteindex=note index
   2504  f281		       a0 00		      ldy	#0
   2505  f283		       b1 e0		      lda	(sfxinstrumentlo),y
   2506  f285				  -	      ifconst	pokeysupport
   2507  f285				  -	      cmp	#$20	; POKEY?
   2508  f285				  -	      bne	scheduletiasfx
   2509  f285				  -	      jmp	schedulepokeysfx
   2510  f285					      endif
   2511  f285				   scheduletiasfx
   2512  f285							;cmp #$10 ; TIA?
   2513  f285							;beq continuescheduletiasfx
   2514  f285							; rts ; unhandled!!! 
   2515  f285				   continuescheduletiasfx
   2516  f285					      ifnconst	TIASFXMONO
   2517  f285		       a5 4e		      lda	sfx1pointlo
   2518  f287		       05 50		      ora	sfx1pointhi
   2519  f289		       f0 13		      beq	schedulesfx1	;if channel 1 is idle, use it
   2520  f28b		       a5 4f		      lda	sfx2pointlo
   2521  f28d		       05 51		      ora	sfx2pointhi
   2522  f28f		       f0 11		      beq	schedulesfx2	;if channel 2 is idle, use it
   2523  f291							; Both channels are scheduled. 
   2524  f291		       a0 01		      ldy	#1
   2525  f293		       b1 e0		      lda	(sfxinstrumentlo),y
   2526  f295		       d0 01		      bne	interruptsfx
   2527  f297		       60		      rts		; the new sound has 0 priority and both channels are busy. Skip playing it.
   2528  f298				   interruptsfx
   2529  f298							;Compare which active sound has a lower priority. We'll interrupt the lower one.
   2530  f298		       a5 52		      lda	sfx1priority
   2531  f29a		       c5 53		      cmp	sfx2priority
   2532  f29c		       b0 04		      bcs	schedulesfx2
   2533  f29e					      endif		; !TIASFXMONO
   2534  f29e
   2535  f29e				   schedulesfx1
   2536  f29e		       a2 00		      ldx	#0	; channel 1
   2537  f2a0					      ifnconst	TIASFXMONO
   2538  f2a0		       f0 02		      beq	skipschedulesfx2
   2539  f2a2				   schedulesfx2
   2540  f2a2		       a2 01		      ldx	#1	; channel 2
   2541  f2a4				   skipschedulesfx2
   2542  f2a4					      endif		; !TIASFXMONO
   2543  f2a4
   2544  f2a4				  -	      ifconst	MUSICTRACKER
   2545  f2a4				  -	      lda	sfxnoteindex
   2546  f2a4				  -	      bpl	skipdrumkitoverride
   2547  f2a4				  -	      and	#$7F	; subtract 128
   2548  f2a4				  -	      sec
   2549  f2a4				  -	      sbc	#4	; drums start at 132, i.e. octave 10
   2550  f2a4				  -	      asl
   2551  f2a4				  -	      tay
   2552  f2a4				  -	      lda	tiadrumkitdefinition,y
   2553  f2a4				  -	      sta	sfxinstrumentlo
   2554  f2a4				  -	      iny
   2555  f2a4				  -	      lda	tiadrumkitdefinition,y
   2556  f2a4				  -	      sta	sfxinstrumenthi
   2557  f2a4				  -	      lda	#0
   2558  f2a4				  -	      sta	sfxnoteindex	; and tell the driver it's a non-pitched instrument
   2559  f2a4				  -skipdrumkitoverride
   2560  f2a4					      endif		; MUSICTRACKER
   2561  f2a4		       a0 01		      ldy	#1	; get priority and sound-resolution (in frames)
   2562  f2a6		       b1 e0		      lda	(sfxinstrumentlo),y
   2563  f2a8		       95 52		      sta	sfx1priority,x
   2564  f2aa		       c8		      iny
   2565  f2ab		       b1 e0		      lda	(sfxinstrumentlo),y
   2566  f2ad		       95 56		      sta	sfx1frames,x
   2567  f2af		       a5 e0		      lda	sfxinstrumentlo
   2568  f2b1		       18		      clc
   2569  f2b2		       69 03		      adc	#3
   2570  f2b4		       95 4e		      sta	sfx1pointlo,x
   2571  f2b6		       a5 e1		      lda	sfxinstrumenthi
   2572  f2b8		       69 00		      adc	#0
   2573  f2ba		       95 50		      sta	sfx1pointhi,x
   2574  f2bc		       a5 e2		      lda	sfxpitchoffset
   2575  f2be		       95 54		      sta	sfx1poffset,x
   2576  f2c0		       a9 00		      lda	#0
   2577  f2c2		       95 58		      sta	sfx1tick,x
   2578  f2c4		       a5 e3		      lda	sfxnoteindex
   2579  f2c6		       95 cd		      sta	sfx1notedata,x
   2580  f2c8		       60		      rts
   2581  f2c9
   2582  f2c9				   plotsprite
   2583  f2c9					      ifnconst	NODRAWWAIT
   2584  f2c9				  -	      ifconst	DOUBLEBUFFER
   2585  f2c9				  -	      lda	doublebufferstate
   2586  f2c9				  -	      bne	skipplotspritewait
   2587  f2c9					      endif		; DOUBLEBUFFER
   2588  f2c9				  -	      ifconst	DEBUGWAITCOLOR
   2589  f2c9				  -	      lda	#$41
   2590  f2c9				  -	      sta	BACKGRND
   2591  f2c9					      endif
   2592  f2c9				   plotspritewait
   2593  f2c9		       a5 4d		      lda	visibleover
   2594  f2cb		       d0 fc		      bne	plotspritewait
   2595  f2cd				   skipplotspritewait
   2596  f2cd				  -	      ifconst	DEBUGWAITCOLOR
   2597  f2cd				  -	      lda	#$0
   2598  f2cd				  -	      sta	BACKGRND
   2599  f2cd					      endif
   2600  f2cd					      endif
   2601  f2cd
   2602  f2cd							;arguments: 
   2603  f2cd							; temp1=lo graphicdata 
   2604  f2cd							; temp2=hi graphicdata 
   2605  f2cd							; temp3=palette | width byte
   2606  f2cd							; temp4=x
   2607  f2cd							; temp5=y
   2608  f2cd							; temp6=mode
   2609  f2cd		       a5 46		      lda	temp5	;Y position
   2610  f2cf		       4a		      lsr		; 2 - Divide by 8 or 16
   2611  f2d0		       4a		      lsr		; 2
   2612  f2d1		       4a		      lsr		; 2
   2613  f2d2					      if	WZONEHEIGHT = 16
   2614  f2d2		       4a		      lsr		; 2
   2615  f2d3					      endif
   2616  f2d3
   2617  f2d3		       aa		      tax
   2618  f2d4
   2619  f2d4					      ifnconst	NOLIMITCHECKING
   2620  f2d4
   2621  f2d4							; the next block allows for vertical masking, and ensures we don't overwrite non-DL memory
   2622  f2d4
   2623  f2d4		       c9 0c		      cmp	#WZONECOUNT
   2624  f2d6
   2625  f2d6		       90 0a		      bcc	continueplotsprite1	; the sprite is fully on-screen, so carry on...
   2626  f2d8							; otherwise, check to see if the bottom half is in zone 0...
   2627  f2d8
   2628  f2d8					      if	WZONEHEIGHT = 16
   2629  f2d8		       c9 0f		      cmp	#15
   2630  f2da				  -	      else
   2631  f2da				  -	      cmp	#31
   2632  f2da					      endif
   2633  f2da
   2634  f2da		       d0 05		      bne	exitplotsprite1
   2635  f2dc		       a2 00		      ldx	#0
   2636  f2de		       4c 17 f3 	      jmp	continueplotsprite2
   2637  f2e1				   exitplotsprite1
   2638  f2e1		       60		      rts
   2639  f2e2
   2640  f2e2				   continueplotsprite1
   2641  f2e2					      endif
   2642  f2e2
   2643  f2e2		       bd e9 f5 	      lda	DLPOINTL,x	;Get pointer to DL that this sprite starts in
   2644  f2e5				  -	      ifconst	DOUBLEBUFFER
   2645  f2e5				  -	      clc
   2646  f2e5				  -	      adc	doublebufferdloffset
   2647  f2e5					      endif		; DOUBLEBUFFER
   2648  f2e5		       85 63		      sta	dlpnt
   2649  f2e7		       bd dd f5 	      lda	DLPOINTH,x
   2650  f2ea				  -	      ifconst	DOUBLEBUFFER
   2651  f2ea				  -	      adc	#0
   2652  f2ea					      endif		; DOUBLEBUFFER
   2653  f2ea		       85 64		      sta	dlpnt+1
   2654  f2ec
   2655  f2ec							;Create DL entry for upper part of sprite
   2656  f2ec
   2657  f2ec		       b4 65		      ldy	dlend,x	;Get the index to the end of this DL
   2658  f2ee
   2659  f2ee				  -	      ifconst	CHECKOVERWRITE
   2660  f2ee				  -	      cpy	#DLLASTOBJ
   2661  f2ee				  -	      beq	checkcontinueplotsprite2
   2662  f2ee				  -continueplotsprite1a
   2663  f2ee					      endif
   2664  f2ee
   2665  f2ee		       a5 42		      lda	temp1	; graphic data, lo byte
   2666  f2f0		       91 63		      sta	(dlpnt),y	;Low byte of data address
   2667  f2f2
   2668  f2f2					      ifnconst	ATOMICSPRITEUPDATE
   2669  f2f2		       c8		      iny
   2670  f2f3		       a5 47		      lda	temp6
   2671  f2f5		       91 63		      sta	(dlpnt),y
   2672  f2f7				  -	      else
   2673  f2f7				  -	      iny
   2674  f2f7				  -	      sty	temp8
   2675  f2f7					      endif
   2676  f2f7
   2677  f2f7		       c8		      iny
   2678  f2f8
   2679  f2f8		       a5 46		      lda	temp5	;Y position
   2680  f2fa		       29 0f		      and	#(WZONEHEIGHT - 1)
   2681  f2fc		       c9 01		      cmp	#1	; clear carry if our sprite is just in this zone
   2682  f2fe		       05 43		      ora	temp2	; graphic data, hi byte
   2683  f300		       91 63		      sta	(dlpnt),y
   2684  f302
   2685  f302
   2686  f302		       c8		      iny
   2687  f303		       a5 44		      lda	temp3	;palette|width
   2688  f305		       91 63		      sta	(dlpnt),y
   2689  f307
   2690  f307		       c8		      iny
   2691  f308		       a5 45		      lda	temp4	;Horizontal position
   2692  f30a		       91 63		      sta	(dlpnt),y
   2693  f30c
   2694  f30c		       c8		      iny
   2695  f30d		       94 65		      sty	dlend,x
   2696  f30f
   2697  f30f				  -	      ifconst	ALWAYSTERMINATE
   2698  f30f				  -	      iny
   2699  f30f				  -	      lda	#0
   2700  f30f				  -	      sta	(dlpnt),y
   2701  f30f					      endif
   2702  f30f
   2703  f30f				  -	      ifconst	ATOMICSPRITEUPDATE
   2704  f30f				  -	      ldy	temp8
   2705  f30f				  -	      lda	temp6
   2706  f30f				  -	      sta	(dlpnt),y
   2707  f30f					      endif
   2708  f30f
   2709  f30f				   checkcontinueplotsprite2
   2710  f30f
   2711  f30f		       90 33		      bcc	doneSPDL	;branch if the sprite was fully in the last zone
   2712  f311
   2713  f311							;Create DL entry for lower part of sprite
   2714  f311
   2715  f311		       e8		      inx		;Next region
   2716  f312
   2717  f312					      ifnconst	NOLIMITCHECKING
   2718  f312		       e0 0c		      cpx	#WZONECOUNT
   2719  f314
   2720  f314		       90 01		      bcc	continueplotsprite2	; the second half of the sprite is fully on-screen, so carry on...
   2721  f316		       60		      rts
   2722  f317				   continueplotsprite2
   2723  f317					      endif
   2724  f317
   2725  f317		       bd e9 f5 	      lda	DLPOINTL,x	;Get pointer to next DL
   2726  f31a				  -	      ifconst	DOUBLEBUFFER
   2727  f31a				  -	      clc
   2728  f31a				  -	      adc	doublebufferdloffset
   2729  f31a					      endif		; DOUBLEBUFFER
   2730  f31a		       85 63		      sta	dlpnt
   2731  f31c		       bd dd f5 	      lda	DLPOINTH,x
   2732  f31f				  -	      ifconst	DOUBLEBUFFER
   2733  f31f				  -	      adc	#0
   2734  f31f					      endif		; DOUBLEBUFFER
   2735  f31f		       85 64		      sta	dlpnt+1
   2736  f321		       b4 65		      ldy	dlend,x	;Get the index to the end of this DL
   2737  f323
   2738  f323				  -	      ifconst	CHECKOVERWRITE
   2739  f323				  -	      cpy	#DLLASTOBJ
   2740  f323				  -	      bne	continueplotsprite2a
   2741  f323				  -	      rts
   2742  f323				  -continueplotsprite2a
   2743  f323					      endif
   2744  f323
   2745  f323		       a5 42		      lda	temp1	; graphic data, lo byte
   2746  f325		       91 63		      sta	(dlpnt),y
   2747  f327
   2748  f327					      ifnconst	ATOMICSPRITEUPDATE
   2749  f327		       c8		      iny
   2750  f328		       a5 47		      lda	temp6
   2751  f32a		       91 63		      sta	(dlpnt),y
   2752  f32c				  -	      else
   2753  f32c				  -	      iny
   2754  f32c				  -	      sty	temp8
   2755  f32c					      endif
   2756  f32c
   2757  f32c		       c8		      iny
   2758  f32d
   2759  f32d		       a5 46		      lda	temp5	;Y position
   2760  f32f		       0b 0f		      anc	#(WZONEHEIGHT - 1)	; undocumented. A=A&IMM, then move bit 7 into carry
   2761  f331		       05 43		      ora	temp2	; graphic data, hi byte
   2762  f333		       e9 0f		      sbc	#(WZONEHEIGHT-1)	; start at the DMA hole. -1 because carry is clear
   2763  f335		       91 63		      sta	(dlpnt),y
   2764  f337
   2765  f337		       c8		      iny
   2766  f338
   2767  f338		       a5 44		      lda	temp3	;palette|width
   2768  f33a		       91 63		      sta	(dlpnt),y
   2769  f33c
   2770  f33c		       c8		      iny
   2771  f33d
   2772  f33d		       a5 45		      lda	temp4	;Horizontal position
   2773  f33f		       91 63		      sta	(dlpnt),y
   2774  f341
   2775  f341		       c8		      iny
   2776  f342		       94 65		      sty	dlend,x
   2777  f344
   2778  f344				  -	      ifconst	ALWAYSTERMINATE
   2779  f344				  -	      iny
   2780  f344				  -	      lda	#0
   2781  f344				  -	      sta	(dlpnt),y
   2782  f344					      endif
   2783  f344
   2784  f344				  -	      ifconst	ATOMICSPRITEUPDATE
   2785  f344				  -	      ldy	temp8
   2786  f344				  -	      lda	temp6
   2787  f344				  -	      sta	(dlpnt),y
   2788  f344					      endif
   2789  f344
   2790  f344				   doneSPDL
   2791  f344		       60		      rts
   2792  f345
   2793  f345
   2794  f345				   lockzonex
   2795  f345				  -	      ifconst	ZONELOCKS
   2796  f345				  -	      ldy	dlend,x
   2797  f345				  -	      cpy	#DLLASTOBJ
   2798  f345				  -	      beq	lockzonexreturn	; the zone is either stuffed or locked. abort!
   2799  f345				  -	      lda	DLPOINTL,x
   2800  f345				  -	      ifconst	DOUBLEBUFFER
   2801  f345				  -	      clc
   2802  f345				  -	      adc	doublebufferdloffset
   2803  f345				  -	      endif		; DOUBLEBUFFER
   2804  f345				  -	      sta	dlpnt
   2805  f345				  -	      lda	DLPOINTH,x
   2806  f345				  -	      ifconst	DOUBLEBUFFER
   2807  f345				  -	      adc	#0
   2808  f345				  -	      endif		; DOUBLEBUFFER
   2809  f345				  -	      sta	dlpnt+1
   2810  f345				  -	      iny
   2811  f345				  -	      lda	#0
   2812  f345				  -	      sta	(dlpnt),y
   2813  f345				  -	      dey
   2814  f345				  -	      tya
   2815  f345				  -	      ldy	#(DLLASTOBJ-1)
   2816  f345				  -	      sta	(dlpnt),y
   2817  f345				  -	      iny
   2818  f345				  -	      sty	dlend,x
   2819  f345				  -lockzonexreturn
   2820  f345				  -	      rts
   2821  f345					      endif		; ZONELOCKS
   2822  f345				   unlockzonex
   2823  f345				  -	      ifconst	ZONELOCKS
   2824  f345				  -	      ldy	dlend,x
   2825  f345				  -	      cpy	#DLLASTOBJ
   2826  f345				  -	      bne	unlockzonexreturn	; if the zone isn't stuffed, it's not locked. abort!
   2827  f345				  -	      lda	DLPOINTL,x
   2828  f345				  -	      ifconst	DOUBLEBUFFER
   2829  f345				  -	      clc
   2830  f345				  -	      adc	doublebufferdloffset
   2831  f345				  -	      endif		; DOUBLEBUFFER
   2832  f345				  -	      sta	dlpnt
   2833  f345				  -	      lda	DLPOINTH,x
   2834  f345				  -	      ifconst	DOUBLEBUFFER
   2835  f345				  -	      adc	#0
   2836  f345				  -	      endif		; DOUBLEBUFFER
   2837  f345				  -	      sta	dlpnt+1
   2838  f345				  -	      dey
   2839  f345				  -			;ldy #(DLLASTOBJ-1)
   2840  f345				  -	      lda	(dlpnt),y
   2841  f345				  -	      tay
   2842  f345				  -	      sty	dlend,x
   2843  f345				  -unlockzonexreturn
   2844  f345					      endif		; ZONELOCKS
   2845  f345		       60		      rts
   2846  f346
   2847  f346				   plotcharloop
   2848  f346							; ** read from a data indirectly pointed to from temp8,temp9
   2849  f346							; ** format is: lo_data, hi_data, palette|width, x, y
   2850  f346							; ** format ends with lo_data | hi_data = 0
   2851  f346
   2852  f346				  -	      ifconst	DOUBLEBUFFER
   2853  f346				  -	      lda	doublebufferstate
   2854  f346				  -	      bne	skipplotcharloopwait
   2855  f346					      endif		; DOUBLEBUFFER
   2856  f346				  -	      ifconst	DEBUGWAITCOLOR
   2857  f346				  -	      lda	#$61
   2858  f346				  -	      sta	BACKGRND
   2859  f346					      endif
   2860  f346				   plotcharloopwait
   2861  f346		       a5 4d		      lda	visibleover
   2862  f348		       d0 fc		      bne	plotcharloopwait
   2863  f34a				  -	      ifconst	DEBUGWAITCOLOR
   2864  f34a				  -	      lda	#0
   2865  f34a				  -	      sta	BACKGRND
   2866  f34a					      endif
   2867  f34a				   skipplotcharloopwait
   2868  f34a				   plotcharlooploop
   2869  f34a		       a0 00		      ldy	#0
   2870  f34c		       b1 49		      lda	(temp8),y
   2871  f34e		       85 42		      sta	temp1
   2872  f350		       c8		      iny
   2873  f351		       b1 49		      lda	(temp8),y
   2874  f353		       85 43		      sta	temp2
   2875  f355		       05 42		      ora	temp1
   2876  f357		       d0 01		      bne	plotcharloopcontinue
   2877  f359							;the pointer=0, so return
   2878  f359		       60		      rts
   2879  f35a				   plotcharloopcontinue
   2880  f35a		       c8		      iny
   2881  f35b		       b1 49		      lda	(temp8),y
   2882  f35d		       85 44		      sta	temp3
   2883  f35f		       c8		      iny
   2884  f360		       b1 49		      lda	(temp8),y
   2885  f362		       85 45		      sta	temp4
   2886  f364		       c8		      iny
   2887  f365		       b1 49		      lda	(temp8),y
   2888  f367							;sta temp5 ; not needed with our late entry.
   2889  f367		       20 80 f3 	      jsr	plotcharactersskipentry
   2890  f36a		       a5 49		      lda	temp8
   2891  f36c		       18		      clc
   2892  f36d		       69 05		      adc	#5
   2893  f36f		       85 49		      sta	temp8
   2894  f371		       a5 4a		      lda	temp9
   2895  f373		       69 00		      adc	#0
   2896  f375		       85 4a		      sta	temp9
   2897  f377		       4c 4a f3 	      jmp	plotcharlooploop
   2898  f37a
   2899  f37a				   plotcharacters
   2900  f37a				  -	      ifconst	DOUBLEBUFFER
   2901  f37a				  -	      lda	doublebufferstate
   2902  f37a				  -	      bne	skipplotcharacterswait
   2903  f37a					      endif		; DOUBLEBUFFER
   2904  f37a				  -	      ifconst	DEBUGWAITCOLOR
   2905  f37a				  -	      lda	#$41
   2906  f37a				  -	      sta	BACKGRND
   2907  f37a					      endif
   2908  f37a				   plotcharacterswait
   2909  f37a		       a5 4d		      lda	visibleover
   2910  f37c		       d0 fc		      bne	plotcharacterswait
   2911  f37e				  -	      ifconst	DEBUGWAITCOLOR
   2912  f37e				  -	      sta	BACKGRND
   2913  f37e					      endif
   2914  f37e				   skipplotcharacterswait
   2915  f37e							;arguments: 
   2916  f37e							; temp1=lo charactermap
   2917  f37e							; temp2=hi charactermap
   2918  f37e							; temp3=palette | width byte
   2919  f37e							; temp4=x
   2920  f37e							; temp5=y
   2921  f37e
   2922  f37e		       a5 46		      lda	temp5	;Y position
   2923  f380
   2924  f380				   plotcharactersskipentry
   2925  f380
   2926  f380							;ifconst ZONEHEIGHT
   2927  f380							; if ZONEHEIGHT = 16
   2928  f380							; and #$0F
   2929  f380							; endif
   2930  f380							; if ZONEHEIGHT = 8
   2931  f380							; and #$1F
   2932  f380							; endif
   2933  f380							;else
   2934  f380							; and #$0F
   2935  f380							;endif
   2936  f380
   2937  f380		       aa		      tax
   2938  f381		       bd e9 f5 	      lda	DLPOINTL,x	;Get pointer to DL that the characters are in
   2939  f384				  -	      ifconst	DOUBLEBUFFER
   2940  f384				  -	      clc
   2941  f384				  -	      adc	doublebufferdloffset
   2942  f384					      endif		; DOUBLEBUFFER
   2943  f384		       85 63		      sta	dlpnt
   2944  f386		       bd dd f5 	      lda	DLPOINTH,x
   2945  f389				  -	      ifconst	DOUBLEBUFFER
   2946  f389				  -	      adc	#0
   2947  f389					      endif		; DOUBLEBUFFER
   2948  f389		       85 64		      sta	dlpnt+1
   2949  f38b
   2950  f38b							;Create DL entry for the characters
   2951  f38b
   2952  f38b		       b4 65		      ldy	dlend,x	;Get the index to the end of this DL
   2953  f38d
   2954  f38d				  -	      ifconst	CHECKOVERWRITE
   2955  f38d				  -	      cpy	#DLLASTOBJ
   2956  f38d				  -	      bne	continueplotcharacters
   2957  f38d				  -	      rts
   2958  f38d				  -continueplotcharacters
   2959  f38d					      endif
   2960  f38d
   2961  f38d		       a5 42		      lda	temp1	; character map data, lo byte
   2962  f38f		       91 63		      sta	(dlpnt),y	;(1) store low address
   2963  f391
   2964  f391		       c8		      iny
   2965  f392		       ad 06 21 	      lda	charactermode
   2966  f395		       91 63		      sta	(dlpnt),y	;(2) store mode
   2967  f397
   2968  f397		       c8		      iny
   2969  f398		       a5 43		      lda	temp2	; character map, hi byte
   2970  f39a		       91 63		      sta	(dlpnt),y	;(3) store high address
   2971  f39c
   2972  f39c		       c8		      iny
   2973  f39d		       a5 44		      lda	temp3	;palette|width
   2974  f39f		       91 63		      sta	(dlpnt),y	;(4) store palette|width
   2975  f3a1
   2976  f3a1		       c8		      iny
   2977  f3a2		       a5 45		      lda	temp4	;Horizontal position
   2978  f3a4		       91 63		      sta	(dlpnt),y	;(5) store horizontal position
   2979  f3a6
   2980  f3a6		       c8		      iny
   2981  f3a7		       94 65		      sty	dlend,x	; save display list end byte
   2982  f3a9		       60		      rts
   2983  f3aa
   2984  f3aa
   2985  f3aa					      ifconst	plotvalueonscreen
   2986  f3aa				   plotcharacterslive
   2987  f3aa							; a version of plotcharacters that draws live and minimally disrupts the screen...
   2988  f3aa
   2989  f3aa							;arguments: 
   2990  f3aa							; temp1=lo charactermap
   2991  f3aa							; temp2=hi charactermap
   2992  f3aa							; temp3=palette | width byte
   2993  f3aa							; temp4=x
   2994  f3aa							; temp5=y
   2995  f3aa
   2996  f3aa		       a5 46		      lda	temp5	;Y position
   2997  f3ac
   2998  f3ac		       aa		      tax
   2999  f3ad		       bd e9 f5 	      lda	DLPOINTL,x	;Get pointer to DL that the characters are in
   3000  f3b0				  -	      ifconst	DOUBLEBUFFER
   3001  f3b0				  -	      clc
   3002  f3b0				  -	      adc	doublebufferdloffset
   3003  f3b0					      endif		; DOUBLEBUFFER
   3004  f3b0		       85 63		      sta	dlpnt
   3005  f3b2		       bd dd f5 	      lda	DLPOINTH,x
   3006  f3b5				  -	      ifconst	DOUBLEBUFFER
   3007  f3b5				  -	      adc	#0
   3008  f3b5					      endif		; DOUBLEBUFFER
   3009  f3b5		       85 64		      sta	dlpnt+1
   3010  f3b7
   3011  f3b7							;Create DL entry for the characters
   3012  f3b7
   3013  f3b7		       b4 65		      ldy	dlend,x	;Get the index to the end of this DL
   3014  f3b9
   3015  f3b9				  -	      ifconst	CHECKOVERWRITE
   3016  f3b9				  -	      cpy	#DLLASTOBJ
   3017  f3b9				  -	      bne	continueplotcharacterslive
   3018  f3b9				  -	      rts
   3019  f3b9				  -continueplotcharacterslive
   3020  f3b9					      endif
   3021  f3b9
   3022  f3b9		       a5 42		      lda	temp1	; character map data, lo byte
   3023  f3bb		       91 63		      sta	(dlpnt),y	;(1) store low address
   3024  f3bd
   3025  f3bd		       c8		      iny
   3026  f3be							; we don't add the second byte yet, since the charmap could briefly
   3027  f3be							; render without a proper character map address, width, or position.
   3028  f3be		       ad 06 21 	      lda	charactermode
   3029  f3c1		       91 63		      sta	(dlpnt),y	;(2) store mode
   3030  f3c3
   3031  f3c3		       c8		      iny
   3032  f3c4		       a5 43		      lda	temp2	; character map, hi byte
   3033  f3c6		       91 63		      sta	(dlpnt),y	;(3) store high address
   3034  f3c8
   3035  f3c8		       c8		      iny
   3036  f3c9		       a5 44		      lda	temp3	;palette|width
   3037  f3cb		       91 63		      sta	(dlpnt),y	;(4) store palette|width
   3038  f3cd
   3039  f3cd		       c8		      iny
   3040  f3ce		       a5 45		      lda	temp4	;Horizontal position
   3041  f3d0		       91 63		      sta	(dlpnt),y	;(5) store horizontal position
   3042  f3d2
   3043  f3d2		       c8		      iny
   3044  f3d3		       94 65		      sty	dlend,x	; save display list end byte
   3045  f3d5
   3046  f3d5		       60		      rts
   3047  f3d6					      endif		;plotcharacterslive
   3048  f3d6
   3049  f3d6				  -	      ifconst	USED_PLOTVALUE
   3050  f3d6				  -plotvalue
   3051  f3d6				  -			; calling 7800basic command:
   3052  f3d6				  -			; plotvalue digit_gfx palette variable/data number_of_digits screen_x screen_y
   3053  f3d6				  -			; ...displays the variable as BCD digits
   3054  f3d6				  -			;
   3055  f3d6				  -			; asm sub arguments: 
   3056  f3d6				  -			; temp1=lo charactermap
   3057  f3d6				  -			; temp2=hi charactermap
   3058  f3d6				  -			; temp3=palette | width byte
   3059  f3d6				  -			; temp4=x
   3060  f3d6				  -			; temp5=y
   3061  f3d6				  -			; temp6=number of digits
   3062  f3d6				  -			; temp7=lo variable
   3063  f3d6				  -			; temp8=hi variable
   3064  f3d6				  -			; temp9=character mode
   3065  f3d6				  -
   3066  f3d6				  -plotdigitcount =	temp6
   3067  f3d6				  -
   3068  f3d6				  -	      ifconst	ZONELOCKS
   3069  f3d6				  -	      ldx	temp5
   3070  f3d6				  -	      ldy	dlend,x
   3071  f3d6				  -	      cpy	#DLLASTOBJ
   3072  f3d6				  -	      bne	carryonplotvalue
   3073  f3d6				  -	      rts
   3074  f3d6				  -carryonplotvalue
   3075  f3d6				  -	      endif
   3076  f3d6				  -
   3077  f3d6				  -	      lda	#0
   3078  f3d6				  -	      tay
   3079  f3d6				  -	      ldx	valbufend
   3080  f3d6				  -
   3081  f3d6				  -	      lda	plotdigitcount
   3082  f3d6				  -	      and	#1
   3083  f3d6				  -	      beq	pvnibble2char
   3084  f3d6				  -	      lda	#0
   3085  f3d6				  -	      sta	VALBUFFER,x	; just in case we skip this digit
   3086  f3d6				  -	      beq	pvnibble2char_skipnibble
   3087  f3d6				  -
   3088  f3d6				  -pvnibble2char
   3089  f3d6				  -			; high nibble...
   3090  f3d6				  -	      lda	(temp7),y
   3091  f3d6				  -	      and	#$f0
   3092  f3d6				  -	      lsr
   3093  f3d6				  -	      lsr
   3094  f3d6				  -	      lsr
   3095  f3d6				  -	      ifnconst	DOUBLEWIDE	; multiply value by 2 for double-width
   3096  f3d6				  -	      lsr
   3097  f3d6				  -	      endif
   3098  f3d6				  -
   3099  f3d6				  -	      clc
   3100  f3d6				  -	      adc	temp1	; add the offset to character graphics to our value
   3101  f3d6				  -	      sta	VALBUFFER,x
   3102  f3d6				  -	      inx
   3103  f3d6				  -	      dec	plotdigitcount
   3104  f3d6				  -
   3105  f3d6				  -pvnibble2char_skipnibble
   3106  f3d6				  -			; low nibble...
   3107  f3d6				  -	      lda	(temp7),y
   3108  f3d6				  -	      and	#$0f
   3109  f3d6				  -	      ifconst	DOUBLEWIDE	; multiply value by 2 for double-width
   3110  f3d6				  -	      asl
   3111  f3d6				  -	      endif
   3112  f3d6				  -	      clc
   3113  f3d6				  -	      adc	temp1	; add the offset to character graphics to our value
   3114  f3d6				  -	      sta	VALBUFFER,x
   3115  f3d6				  -	      inx
   3116  f3d6				  -	      iny
   3117  f3d6				  -
   3118  f3d6				  -	      dec	plotdigitcount
   3119  f3d6				  -	      bne	pvnibble2char
   3120  f3d6				  -
   3121  f3d6				  -			;point to the start of our valuebuffer
   3122  f3d6				  -	      clc
   3123  f3d6				  -	      lda	#<VALBUFFER
   3124  f3d6				  -	      adc	valbufend
   3125  f3d6				  -	      sta	temp1
   3126  f3d6				  -	      lda	#>VALBUFFER
   3127  f3d6				  -	      adc	#0
   3128  f3d6				  -	      sta	temp2
   3129  f3d6				  -
   3130  f3d6				  -			;advance valbufend to the end of our value buffer
   3131  f3d6				  -	      stx	valbufend
   3132  f3d6				  -
   3133  f3d6				  -	      ifnconst	plotvalueonscreen
   3134  f3d6				  -	      jmp	plotcharacters
   3135  f3d6				  -	      else
   3136  f3d6				  -	      jmp	plotcharacterslive
   3137  f3d6				  -	      endif
   3138  f3d6				  -
   3139  f3d6					      endif		; USED_PLOTVALUE
   3140  f3d6
   3141  f3d6
   3142  f3d6				  -	      ifconst	USED_PLOTVALUEEXTRA
   3143  f3d6				  -plotdigitcount =	temp6
   3144  f3d6				  -plotvalueextra
   3145  f3d6				  -			; calling 7800basic command:
   3146  f3d6				  -			; plotvalue digit_gfx palette variable/data number_of_digits screen_x screen_y
   3147  f3d6				  -			; ...displays the variable as BCD digits
   3148  f3d6				  -			;
   3149  f3d6				  -			; asm sub arguments: 
   3150  f3d6				  -			; temp1=lo charactermap
   3151  f3d6				  -			; temp2=hi charactermap
   3152  f3d6				  -			; temp3=palette | width byte
   3153  f3d6				  -			; temp4=x
   3154  f3d6				  -			; temp5=y
   3155  f3d6				  -			; temp6=number of digits
   3156  f3d6				  -			; temp7=lo variable
   3157  f3d6				  -			; temp8=hi variable
   3158  f3d6				  -
   3159  f3d6				  -	      lda	#0
   3160  f3d6				  -	      tay
   3161  f3d6				  -	      ldx	valbufend
   3162  f3d6				  -	      ifnconst	plotvalueonscreen
   3163  f3d6				  -	      sta	VALBUFFER,x
   3164  f3d6				  -	      endif
   3165  f3d6				  -
   3166  f3d6				  -	      lda	plotdigitcount
   3167  f3d6				  -	      and	#1
   3168  f3d6				  -
   3169  f3d6				  -	      bne	pvnibble2char_skipnibbleextra
   3170  f3d6				  -
   3171  f3d6				  -pvnibble2charextra
   3172  f3d6				  -			; high nibble...
   3173  f3d6				  -	      lda	(temp7),y
   3174  f3d6				  -	      and	#$f0
   3175  f3d6				  -	      lsr
   3176  f3d6				  -	      lsr
   3177  f3d6				  -	      ifnconst	DOUBLEWIDE	; multiply value by 2 for double-width
   3178  f3d6				  -	      lsr
   3179  f3d6				  -	      endif
   3180  f3d6				  -	      clc
   3181  f3d6				  -	      adc	temp1	; add the offset to character graphics to our value
   3182  f3d6				  -	      sta	VALBUFFER,x
   3183  f3d6				  -	      inx
   3184  f3d6				  -
   3185  f3d6				  -			; second half of the digit
   3186  f3d6				  -	      clc
   3187  f3d6				  -	      adc	#1
   3188  f3d6				  -	      sta	VALBUFFER,x
   3189  f3d6				  -	      inx
   3190  f3d6				  -
   3191  f3d6				  -pvnibble2char_skipnibbleextra
   3192  f3d6				  -			; low nibble...
   3193  f3d6				  -	      lda	(temp7),y
   3194  f3d6				  -	      and	#$0f
   3195  f3d6				  -	      ifconst	DOUBLEWIDE	; multiply value by 2 for double-width
   3196  f3d6				  -	      asl
   3197  f3d6				  -	      endif
   3198  f3d6				  -	      asl
   3199  f3d6				  -
   3200  f3d6				  -	      clc
   3201  f3d6				  -	      adc	temp1	; add the offset to character graphics to our value
   3202  f3d6				  -	      sta	VALBUFFER,x
   3203  f3d6				  -	      inx
   3204  f3d6				  -
   3205  f3d6				  -	      clc
   3206  f3d6				  -	      adc	#1
   3207  f3d6				  -	      sta	VALBUFFER,x
   3208  f3d6				  -	      inx
   3209  f3d6				  -	      iny
   3210  f3d6				  -
   3211  f3d6				  -	      dec	plotdigitcount
   3212  f3d6				  -	      bne	pvnibble2charextra
   3213  f3d6				  -
   3214  f3d6				  -			;point to the start of our valuebuffer
   3215  f3d6				  -	      clc
   3216  f3d6				  -	      lda	#<VALBUFFER
   3217  f3d6				  -	      adc	valbufend
   3218  f3d6				  -	      sta	temp1
   3219  f3d6				  -	      lda	#>VALBUFFER
   3220  f3d6				  -	      adc	#0
   3221  f3d6				  -	      sta	temp2
   3222  f3d6				  -
   3223  f3d6				  -			;advance valbufend to the end of our value buffer
   3224  f3d6				  -	      stx	valbufend
   3225  f3d6				  -
   3226  f3d6				  -	      ifnconst	plotvalueonscreen
   3227  f3d6				  -	      jmp	plotcharacters
   3228  f3d6				  -	      else
   3229  f3d6				  -	      jmp	plotcharacterslive
   3230  f3d6				  -	      endif
   3231  f3d6					      endif		; USED_PLOTVALUEEXTRA
   3232  f3d6
   3233  f3d6				   boxcollision
   3234  f3d6				  -	      ifconst	BOXCOLLISION
   3235  f3d6				  -			; the worst case cycle-time for the code below is 43 cycles.
   3236  f3d6				  -			; unfortunately, prior to getting here we've burned 44 cycles in argument setup. eep!
   3237  f3d6				  -
   3238  f3d6				  -			;__boxx1 = accumulator
   3239  f3d6				  -			;__boxy1 = y
   3240  f3d6				  -__boxw1    =	temp3
   3241  f3d6				  -__boxh1    =	temp4
   3242  f3d6				  -
   3243  f3d6				  -__boxx2    =	temp5
   3244  f3d6				  -__boxy2    =	temp6
   3245  f3d6				  -__boxw2    =	temp7
   3246  f3d6				  -__boxh2    =	temp8
   3247  f3d6				  -
   3248  f3d6				  -DoXCollisionCheck
   3249  f3d6				  -			;lda __boxx1 ; skipped. already in the accumulator
   3250  f3d6				  -	      cmp	__boxx2	;3
   3251  f3d6				  -	      bcs	X1isbiggerthanX2	;2/3
   3252  f3d6				  -X2isbiggerthanX1
   3253  f3d6				  -			; carry is clear
   3254  f3d6				  -	      adc	__boxw1	;3
   3255  f3d6				  -	      cmp	__boxx2	;3
   3256  f3d6				  -	      bcs	DoYCollisionCheck	;3/2
   3257  f3d6				  -	      rts		;6 - carry clear, no collision
   3258  f3d6				  -X1isbiggerthanX2
   3259  f3d6				  -	      clc		;2
   3260  f3d6				  -	      sbc	__boxw2	;3
   3261  f3d6				  -	      cmp	__boxx2	;3
   3262  f3d6				  -	      bcs	noboxcollision	;3/2
   3263  f3d6				  -DoYCollisionCheck
   3264  f3d6				  -	      tya		; 2 ; use to be "lda __boxy1"
   3265  f3d6				  -	      cmp	__boxy2	;3
   3266  f3d6				  -	      bcs	Y1isbiggerthanY2	;3/2
   3267  f3d6				  -Y2isbiggerthanY1
   3268  f3d6				  -			; carry is clear
   3269  f3d6				  -	      adc	__boxh1	;3
   3270  f3d6				  -	      cmp	__boxy2	;3
   3271  f3d6				  -	      rts		;6 
   3272  f3d6				  -Y1isbiggerthanY2
   3273  f3d6				  -	      clc		;2
   3274  f3d6				  -	      sbc	__boxh2	;3
   3275  f3d6				  -	      cmp	__boxy2	;3
   3276  f3d6				  -	      bcs	noboxcollision	;3/2
   3277  f3d6				  -yesboxcollision
   3278  f3d6				  -	      sec		;2
   3279  f3d6				  -	      rts		;6
   3280  f3d6				  -noboxcollision
   3281  f3d6				  -	      clc		;2
   3282  f3d6				  -	      rts		;6
   3283  f3d6					      endif		; BOXCOLLISION
   3284  f3d6
   3285  f3d6				   randomize
   3286  f3d6		       a5 40		      lda	rand
   3287  f3d8		       4a		      lsr
   3288  f3d9		       26 41		      rol	rand16
   3289  f3db		       90 02		      bcc	noeor
   3290  f3dd		       49 b4		      eor	#$B4
   3291  f3df				   noeor
   3292  f3df		       85 40		      sta	rand
   3293  f3e1		       45 41		      eor	rand16
   3294  f3e3		       60		      rts
   3295  f3e4
   3296  f3e4							; *** bcd conversion routine courtesy Omegamatrix
   3297  f3e4							; *** http://atariage.com/forums/blog/563/entry-10832-hex-to-bcd-conversion-0-99/
   3298  f3e4				   converttobcd
   3299  f3e4							;value to convert is in the accumulator
   3300  f3e4		       85 42		      sta	temp1
   3301  f3e6		       4a		      lsr
   3302  f3e7		       65 42		      adc	temp1
   3303  f3e9		       6a		      ror
   3304  f3ea		       4a		      lsr
   3305  f3eb		       4a		      lsr
   3306  f3ec		       65 42		      adc	temp1
   3307  f3ee		       6a		      ror
   3308  f3ef		       65 42		      adc	temp1
   3309  f3f1		       6a		      ror
   3310  f3f2		       4a		      lsr
   3311  f3f3		       29 3c		      and	#$3C
   3312  f3f5		       85 43		      sta	temp2
   3313  f3f7		       4a		      lsr
   3314  f3f8		       65 43		      adc	temp2
   3315  f3fa		       65 42		      adc	temp1
   3316  f3fc		       60		      rts		; return the result in the accumulator
   3317  f3fd
   3318  f3fd							; Y and A contain multiplicands, result in A
   3319  f3fd				   mul8
   3320  f3fd		       84 42		      sty	temp1
   3321  f3ff		       85 43		      sta	temp2
   3322  f401		       a9 00		      lda	#0
   3323  f403				   reptmul8
   3324  f403		       46 43		      lsr	temp2
   3325  f405		       90 03		      bcc	skipmul8
   3326  f407		       18		      clc
   3327  f408		       65 42		      adc	temp1
   3328  f40a							;bcs donemul8 might save cycles?
   3329  f40a				   skipmul8
   3330  f40a							;beq donemul8 might save cycles?
   3331  f40a		       06 42		      asl	temp1
   3332  f40c		       d0 f5		      bne	reptmul8
   3333  f40e				   donemul8
   3334  f40e		       60		      rts
   3335  f40f
   3336  f40f				   div8
   3337  f40f							; A=numerator Y=denominator, result in A
   3338  f40f		       c0 02		      cpy	#2
   3339  f411		       90 0a		      bcc	div8end+1	;div by 0 = bad, div by 1=no calc needed, so bail out
   3340  f413		       84 42		      sty	temp1
   3341  f415		       a0 ff		      ldy	#$ff
   3342  f417				   div8loop
   3343  f417		       e5 42		      sbc	temp1
   3344  f419		       c8		      iny
   3345  f41a		       b0 fb		      bcs	div8loop
   3346  f41c				   div8end
   3347  f41c		       98		      tya
   3348  f41d							; result in A
   3349  f41d		       60		      rts
   3350  f41e
   3351  f41e							; Y and A contain multiplicands, result in temp2,A=low, temp1=high
   3352  f41e				   mul16
   3353  f41e		       84 42		      sty	temp1
   3354  f420		       85 43		      sta	temp2
   3355  f422
   3356  f422		       a9 00		      lda	#0
   3357  f424		       a2 08		      ldx	#8
   3358  f426		       46 42		      lsr	temp1
   3359  f428				   mul16_1
   3360  f428		       90 03		      bcc	mul16_2
   3361  f42a		       18		      clc
   3362  f42b		       65 43		      adc	temp2
   3363  f42d				   mul16_2
   3364  f42d		       6a		      ror
   3365  f42e		       66 42		      ror	temp1
   3366  f430		       ca		      dex
   3367  f431		       d0 f5		      bne	mul16_1
   3368  f433		       85 43		      sta	temp2
   3369  f435		       60		      rts
   3370  f436
   3371  f436							; div int/int
   3372  f436							; numerator in A, denom in temp1
   3373  f436							; returns with quotient in A, remainder in temp1
   3374  f436				   div16
   3375  f436		       85 43		      sta	temp2
   3376  f438		       84 42		      sty	temp1
   3377  f43a		       a9 00		      lda	#0
   3378  f43c		       a2 08		      ldx	#8
   3379  f43e		       06 43		      asl	temp2
   3380  f440				   div16_1
   3381  f440		       2a		      rol
   3382  f441		       c5 42		      cmp	temp1
   3383  f443		       90 02		      bcc	div16_2
   3384  f445		       e5 42		      sbc	temp1
   3385  f447				   div16_2
   3386  f447		       26 43		      rol	temp2
   3387  f449		       ca		      dex
   3388  f44a		       d0 f4		      bne	div16_1
   3389  f44c		       85 42		      sta	temp1
   3390  f44e		       a5 43		      lda	temp2
   3391  f450		       60		      rts
   3392  f451
   3393  f451				  -	      ifconst	bankswitchmode
   3394  f451				  -BS_jsr
   3395  f451				  -	      ifconst	dumpbankswitch
   3396  f451				  -	      sta	dumpbankswitch
   3397  f451				  -	      endif
   3398  f451				  -	      ifconst	MCPDEVCART
   3399  f451				  -	      ora	#$18
   3400  f451				  -	      sta	$3000
   3401  f451				  -	      else
   3402  f451				  -	      sta	$8000
   3403  f451				  -	      endif
   3404  f451				  -	      pla
   3405  f451				  -	      tax
   3406  f451				  -	      pla
   3407  f451				  -	      rts
   3408  f451				  -
   3409  f451				  -BS_return
   3410  f451				  -	      pla		; bankswitch bank
   3411  f451				  -	      ifconst	dumpbankswitch
   3412  f451				  -	      sta	dumpbankswitch
   3413  f451				  -	      endif
   3414  f451				  -	      ifconst	BANKRAM
   3415  f451				  -	      sta	currentbank
   3416  f451				  -	      ora	currentrambank
   3417  f451				  -	      endif
   3418  f451				  -	      ifconst	MCPDEVCART
   3419  f451				  -	      ora	#$18
   3420  f451				  -	      sta	$3000
   3421  f451				  -	      else
   3422  f451				  -	      sta	$8000
   3423  f451				  -	      endif
   3424  f451				  -	      pla		; bankswitch $0 flag
   3425  f451				  -	      rts
   3426  f451					      endif
   3427  f451
   3428  f451				   checkselectswitch
   3429  f451		       ad 82 02 	      lda	SWCHB	; first check the real select switch...
   3430  f454		       29 02		      and	#%00000010
   3431  f456					      ifnconst	SOFTPAUSEOFF
   3432  f456					      ifnconst	MOUSESUPPORT
   3433  f456					      ifnconst	TRAKBALLSUPPORT
   3434  f456		       f0 0f		      beq	checkselectswitchreturn	; switch is pressed
   3435  f458		       ad b7 01 	      lda	port0control
   3436  f45b		       c9 0b		      cmp	#11
   3437  f45d		       d0 03		      bne	checkselectsoftswitch
   3438  f45f		       a9 ff		      lda	#$ff
   3439  f461		       60		      rts
   3440  f462				   checkselectsoftswitch
   3441  f462		       ad 80 02 	      lda	SWCHA	; then check the soft "select" joysick code...
   3442  f465		       29 b0		      and	#%10110000	; R_DU
   3443  f467					      endif		; TRAKBALLSUPPORT
   3444  f467					      endif		; MOUSESUPPORT
   3445  f467					      endif		; SOFTPAUSEOFF
   3446  f467				   checkselectswitchreturn
   3447  f467		       60		      rts
   3448  f468
   3449  f468				   checkresetswitch
   3450  f468		       ad 82 02 	      lda	SWCHB	; first check the real reset switch...
   3451  f46b		       29 01		      and	#%00000001
   3452  f46d					      ifnconst	SOFTPAUSEOFF
   3453  f46d					      ifnconst	MOUSESUPPORT
   3454  f46d					      ifnconst	TRAKBALLSUPPORT
   3455  f46d		       f0 0f		      beq	checkresetswitchreturn	; switch is pressed
   3456  f46f		       ad b7 01 	      lda	port0control
   3457  f472		       c9 0b		      cmp	#11
   3458  f474		       d0 03		      bne	checkresetsoftswitch
   3459  f476		       a9 ff		      lda	#$ff
   3460  f478		       60		      rts
   3461  f479				   checkresetsoftswitch
   3462  f479		       ad 80 02 	      lda	SWCHA	; then check the soft "reset" joysick code...
   3463  f47c		       29 70		      and	#%01110000	; _LDU
   3464  f47e					      endif		; TRAKBALLSUPPORT
   3465  f47e					      endif		; MOUSESUPPORT
   3466  f47e					      endif		; SOFTPAUSEOFF
   3467  f47e				   checkresetswitchreturn
   3468  f47e		       60		      rts
   3469  f47f
   3470  f47f				  -	      ifconst	FINESCROLLENABLED
   3471  f47f				  -finescrolldlls
   3472  f47f				  -	      ldx	temp1	; first DLL index x3
   3473  f47f				  -	      lda	DLLMEM,x
   3474  f47f				  -	      and	#%11110000
   3475  f47f				  -	      ora	finescrolly
   3476  f47f				  -	      sta	DLLMEM,x
   3477  f47f				  -
   3478  f47f				  -	      ldx	temp2	; last DLL index x3
   3479  f47f				  -	      lda	DLLMEM,x
   3480  f47f				  -	      and	#%11110000
   3481  f47f				  -	      ora	finescrolly
   3482  f47f				  -	      eor	#(WZONEHEIGHT-1)
   3483  f47f				  -	      sta	DLLMEM,x
   3484  f47f				  -	      rts
   3485  f47f					      endif		; FINESCROLLENABLED
   3486  f47f
   3487  f47f				  -	      ifconst	USED_ADJUSTVISIBLE
   3488  f47f				  -adjustvisible
   3489  f47f				  -			; called with temp1=first visible zone *3, temp2=last visible zone *3
   3490  f47f				  -	      jsr	waitforvblankstart	; ensure vblank just started
   3491  f47f				  -	      ldx	visibleDLLstart
   3492  f47f				  -findfirstinterrupt
   3493  f47f				  -	      lda	DLLMEM,x
   3494  f47f				  -	      bmi	foundfirstinterrupt
   3495  f47f				  -	      inx
   3496  f47f				  -	      inx
   3497  f47f				  -	      inx
   3498  f47f				  -	      bne	findfirstinterrupt
   3499  f47f				  -foundfirstinterrupt
   3500  f47f				  -	      and	#%01111111	; clear the interrupt bit
   3501  f47f				  -	      sta	DLLMEM,x
   3502  f47f				  -	      ifconst	DOUBLEBUFFER
   3503  f47f				  -	      sta	DLLMEM+DBOFFSET,x
   3504  f47f				  -	      endif		; DOUBLEBUFFER
   3505  f47f				  -	      ldx	overscanDLLstart
   3506  f47f				  -findlastinterrupt
   3507  f47f				  -	      lda	DLLMEM,x
   3508  f47f				  -	      bmi	foundlastinterrupt
   3509  f47f				  -	      dex
   3510  f47f				  -	      dex
   3511  f47f				  -	      dex
   3512  f47f				  -	      bne	findlastinterrupt
   3513  f47f				  -foundlastinterrupt
   3514  f47f				  -	      and	#%01111111	; clear the interrupt bit
   3515  f47f				  -	      sta	DLLMEM,x
   3516  f47f				  -	      ifconst	DOUBLEBUFFER
   3517  f47f				  -	      sta	DLLMEM+DBOFFSET,x
   3518  f47f				  -	      endif		; DOUBLEBUFFER
   3519  f47f				  -			;now we need to set the new interrupts
   3520  f47f				  -	      clc
   3521  f47f				  -	      lda	temp1
   3522  f47f				  -	      adc	visibleDLLstart
   3523  f47f				  -	      tax
   3524  f47f				  -	      lda	DLLMEM,x
   3525  f47f				  -	      ora	#%10000000
   3526  f47f				  -	      sta	DLLMEM,x
   3527  f47f				  -	      ifconst	DOUBLEBUFFER
   3528  f47f				  -	      sta	DLLMEM+DBOFFSET,x
   3529  f47f				  -	      endif		; DOUBLEBUFFER
   3530  f47f				  -	      clc
   3531  f47f				  -	      lda	temp2
   3532  f47f				  -	      adc	visibleDLLstart
   3533  f47f				  -	      tax
   3534  f47f				  -	      lda	DLLMEM,x
   3535  f47f				  -	      ora	#%10000000
   3536  f47f				  -	      sta	DLLMEM,x
   3537  f47f				  -	      ifconst	DOUBLEBUFFER
   3538  f47f				  -	      sta	DLLMEM+DBOFFSET,x
   3539  f47f				  -	      endif		; DOUBLEBUFFER
   3540  f47f				  -	      jsr	vblankresync
   3541  f47f				  -	      rts
   3542  f47f					      endif		; USED_ADJUSTVISIBLE
   3543  f47f
   3544  f47f				   vblankresync
   3545  f47f		       20 1d f5 	      jsr	waitforvblankstart	; ensure vblank just started
   3546  f482		       a9 00		      lda	#0
   3547  f484		       85 4d		      sta	visibleover
   3548  f486		       a9 03		      lda	#3
   3549  f488		       8d b2 01 	      sta	interruptindex
   3550  f48b		       60		      rts
   3551  f48c
   3552  f48c				   createallgamedlls
   3553  f48c		       a2 00		      ldx	#0
   3554  f48e		       a9 19		      lda	#NVLINES
   3555  f490		       ac 09 21 	      ldy	paldetected
   3556  f493		       f0 03		      beq	skipcreatePALpadding
   3557  f495		       18		      clc
   3558  f496		       69 15		      adc	#21
   3559  f498				   skipcreatePALpadding
   3560  f498		       20 cd f4 	      jsr	createnonvisibledlls
   3561  f49b		       8e 3c 21 	      stx	visibleDLLstart
   3562  f49e		       20 fe f4 	      jsr	createvisiblezones
   3563  f4a1		       8e 3d 21 	      stx	overscanDLLstart
   3564  f4a4				   createallgamedllscontinue
   3565  f4a4		       a9 50		      lda	#(NVLINES+55)	; extras for PAL
   3566  f4a6		       20 cd f4 	      jsr	createnonvisibledlls
   3567  f4a9
   3568  f4a9		       ae 3c 21 	      ldx	visibleDLLstart
   3569  f4ac		       bd 00 18 	      lda	DLLMEM,x
   3570  f4af		       09 80		      ora	#%10000000	; NMI 1 - start of visible screen
   3571  f4b1		       9d 00 18 	      sta	DLLMEM,x
   3572  f4b4				  -	      ifconst	DOUBLEBUFFER
   3573  f4b4				  -	      sta	DLLMEM+DBOFFSET,x
   3574  f4b4					      endif		; DOUBLEBUFFER
   3575  f4b4
   3576  f4b4		       ae 3d 21 	      ldx	overscanDLLstart
   3577  f4b7		       bd 00 18 	      lda	DLLMEM,x
   3578  f4ba		       09 83		      ora	#%10000011	; NMI 2 - end of visible screen
   3579  f4bc		       29 f3		      and	#%11110011	; change this to a 1-line DLL, so there's time enough for the "deeper overscan" DLL
   3580  f4be		       9d 00 18 	      sta	DLLMEM,x
   3581  f4c1				  -	      ifconst	DOUBLEBUFFER
   3582  f4c1				  -	      sta	DLLMEM+DBOFFSET,x
   3583  f4c1					      endif		; DOUBLEBUFFER
   3584  f4c1
   3585  f4c1		       e8		      inx
   3586  f4c2		       e8		      inx
   3587  f4c3		       e8		      inx
   3588  f4c4
   3589  f4c4		       bd 00 18 	      lda	DLLMEM,x
   3590  f4c7		       09 80		      ora	#%10000000	; NMI 3 - deeper overscan
   3591  f4c9		       9d 00 18 	      sta	DLLMEM,x
   3592  f4cc				  -	      ifconst	DOUBLEBUFFER
   3593  f4cc				  -	      sta	DLLMEM+DBOFFSET,x
   3594  f4cc					      endif		; DOUBLEBUFFER
   3595  f4cc
   3596  f4cc		       60		      rts
   3597  f4cd
   3598  f4cd				   createnonvisibledlls
   3599  f4cd		       85 42		      sta	temp1
   3600  f4cf		       4a		      lsr
   3601  f4d0		       4a		      lsr
   3602  f4d1		       4a		      lsr
   3603  f4d2		       4a		      lsr		; /16
   3604  f4d3		       f0 09		      beq	skipcreatenonvisibledlls1loop
   3605  f4d5		       a8		      tay
   3606  f4d6				   createnonvisibledlls1loop
   3607  f4d6		       a9 4f		      lda	#%01001111	;low nibble=16 lines, high nibble=Holey DMA
   3608  f4d8		       20 ed f4 	      jsr	createblankdllentry
   3609  f4db		       88		      dey
   3610  f4dc		       d0 f8		      bne	createnonvisibledlls1loop
   3611  f4de				   skipcreatenonvisibledlls1loop
   3612  f4de		       a5 42		      lda	temp1
   3613  f4e0		       29 0f		      and	#%00001111
   3614  f4e2		       f0 08		      beq	createnonvisibledllsreturn
   3615  f4e4		       38		      sec
   3616  f4e5		       e9 01		      sbc	#1
   3617  f4e7		       09 40		      ora	#%01000000
   3618  f4e9		       20 ed f4 	      jsr	createblankdllentry
   3619  f4ec				   createnonvisibledllsreturn
   3620  f4ec		       60		      rts
   3621  f4ed
   3622  f4ed				   createblankdllentry
   3623  f4ed		       9d 00 18 	      sta	DLLMEM,x
   3624  f4f0				  -	      ifconst	DOUBLEBUFFER
   3625  f4f0				  -	      sta	DLLMEM+DBOFFSET,x
   3626  f4f0					      endif		; DOUBLEBUFFER
   3627  f4f0		       e8		      inx
   3628  f4f1		       a9 21		      lda	#$21	; blank
   3629  f4f3		       9d 00 18 	      sta	DLLMEM,x
   3630  f4f6				  -	      ifconst	DOUBLEBUFFER
   3631  f4f6				  -	      sta	DLLMEM+DBOFFSET,x
   3632  f4f6					      endif		; DOUBLEBUFFER
   3633  f4f6		       e8		      inx
   3634  f4f7		       a9 00		      lda	#$00
   3635  f4f9		       9d 00 18 	      sta	DLLMEM,x
   3636  f4fc				  -	      ifconst	DOUBLEBUFFER
   3637  f4fc				  -	      sta	DLLMEM+DBOFFSET,x
   3638  f4fc					      endif		; DOUBLEBUFFER
   3639  f4fc		       e8		      inx
   3640  f4fd		       60		      rts
   3641  f4fe
   3642  f4fe				   createvisiblezones
   3643  f4fe		       a0 00		      ldy	#0
   3644  f500				   createvisiblezonesloop
   3645  f500		       b9 f5 f5 	      lda.w	DLHEIGHT,y
   3646  f503		       09 40		      ora	#(WZONEHEIGHT * 4)	; set Holey DMA for 8 or 16 tall zones
   3647  f505		       9d 00 18 	      sta	DLLMEM,x
   3648  f508				  -	      ifconst	DOUBLEBUFFER
   3649  f508				  -	      sta	DLLMEM+DBOFFSET,x
   3650  f508					      endif		; DOUBLEBUFFER
   3651  f508		       e8		      inx
   3652  f509		       b9 dd f5 	      lda	DLPOINTH,y
   3653  f50c				  -	      ifconst	BANKSET_DL_IN_CARTRAM
   3654  f50c				  -			; with bankset cart ram, we added $8000 to the DL address so plot functions would hit the write-address
   3655  f50c				  -			; but now we need to subtract that $8000 location to give Maria the normal address
   3656  f50c				  -	      sec
   3657  f50c				  -	      sbc	#$80
   3658  f50c					      endif		; BANKSET_DL_IN_CARTRAM
   3659  f50c		       9d 00 18 	      sta	DLLMEM,x
   3660  f50f				  -	      ifconst	DOUBLEBUFFER
   3661  f50f				  -	      sta	DLLMEM+DBOFFSET,x
   3662  f50f					      endif		; DOUBLEBUFFER
   3663  f50f		       e8		      inx
   3664  f510		       b9 e9 f5 	      lda	DLPOINTL,y
   3665  f513		       9d 00 18 	      sta	DLLMEM,x
   3666  f516				  -	      ifconst	DOUBLEBUFFER
   3667  f516				  -	      clc
   3668  f516				  -	      adc	#DOUBLEBUFFEROFFSET
   3669  f516				  -	      sta	DLLMEM+DBOFFSET,x
   3670  f516				  -	      bcc	skiphidoublebufferadjust	; dlls are big endian, so we need to fix the hi byte after-the-fact...
   3671  f516				  -	      inc	DLLMEM+DBOFFSET-1,x
   3672  f516				  -skiphidoublebufferadjust
   3673  f516					      endif		; DOUBLEBUFFER
   3674  f516		       e8		      inx
   3675  f517		       c8		      iny
   3676  f518		       c0 0c		      cpy	#WZONECOUNT
   3677  f51a		       d0 e4		      bne	createvisiblezonesloop
   3678  f51c		       60		      rts
   3679  f51d
   3680  f51d				   waitforvblankstart
   3681  f51d				   vblankendwait
   3682  f51d		       24 28		      BIT	MSTAT
   3683  f51f		       30 fc		      bmi	vblankendwait
   3684  f521				   vblankstartwait
   3685  f521		       24 28		      BIT	MSTAT
   3686  f523		       10 fc		      bpl	vblankstartwait
   3687  f525		       60		      rts
   3688  f526
   3689  f526				  -	      ifconst	DOUBLEBUFFER
   3690  f526				  -flipdisplaybufferreturn
   3691  f526				  -	      rts
   3692  f526				  -flipdisplaybuffer
   3693  f526				  -	      ifconst	interrupthold
   3694  f526				  -	      lda	#$FF
   3695  f526				  -	      sta	interrupthold
   3696  f526				  -	      endif
   3697  f526				  -	      lda	doublebufferstate
   3698  f526				  -	      beq	flipdisplaybufferreturn	; exit if we're not in double-buffer
   3699  f526				  -
   3700  f526				  -	      jsr	terminatedisplaybuffer	; terminate the working buffer before we flip
   3701  f526				  -
   3702  f526				  -	      lda	doublebufferstate
   3703  f526				  -	      lsr		; /2, so we'll see 0 or 1, rather than 1 or 3
   3704  f526				  -	      tax
   3705  f526				  -
   3706  f526				  -			; ensure we don't flip mid-display. otherwise the displayed DL will be the one the game is working on.
   3707  f526				  -
   3708  f526				  -flipdisplaybufferwait1
   3709  f526				  -	      lda	visibleover
   3710  f526				  -	      beq	flipdisplaybufferwait1
   3711  f526				  -
   3712  f526				  -flipdisplaybufferwait
   3713  f526				  -	      lda	visibleover
   3714  f526				  -	      bne	flipdisplaybufferwait
   3715  f526				  -
   3716  f526				  -	      lda	doublebufferminimumframetarget
   3717  f526				  -	      beq	skipminimumframecode
   3718  f526				  -	      lda	doublebufferminimumframeindex
   3719  f526				  -	      bne	flipdisplaybufferwait1
   3720  f526				  -	      lda	doublebufferminimumframetarget
   3721  f526				  -	      sta	doublebufferminimumframeindex
   3722  f526				  -skipminimumframecode
   3723  f526				  -
   3724  f526				  -	      lda	DLLMEMLutHi,x
   3725  f526				  -	      sta	DPPH
   3726  f526				  -	      lda	DLLMEMLutLo,x
   3727  f526				  -	      sta	DPPL
   3728  f526				  -
   3729  f526				  -	      lda	NewPageflipstate,x
   3730  f526				  -	      sta	doublebufferstate
   3731  f526				  -	      lda	NewPageflipoffset,x
   3732  f526				  -	      sta	doublebufferdloffset
   3733  f526				  -
   3734  f526				  -	      ifnconst	BANKSET_DL_IN_CARTRAM
   3735  f526				  -	      lda	doublebufferbufferdirty
   3736  f526				  -	      beq	flipdisplaybufferreturn
   3737  f526				  -
   3738  f526				  -			; The doublebuffer buffer is dirty, so the game code must have issued a savescreen recently.
   3739  f526				  -			; To make savescreen work with the new working buffer, we need to copy over the saved objects
   3740  f526				  -			; from the displayed buffer to the working buffer...
   3741  f526				  -
   3742  f526				  -	      lda	doublebufferdloffset
   3743  f526				  -	      eor	#DOUBLEBUFFEROFFSET
   3744  f526				  -	      sta	temp6	; make temp6 the anti-doublebufferdloffset variable
   3745  f526				  -
   3746  f526				  -	      ldx	#(WZONECOUNT-1)
   3747  f526				  -copybufferzoneloop
   3748  f526				  -
   3749  f526				  -	      lda	DLPOINTL,x
   3750  f526				  -	      clc
   3751  f526				  -	      adc	doublebufferdloffset
   3752  f526				  -	      sta	temp1
   3753  f526				  -	      lda	DLPOINTH,x
   3754  f526				  -	      adc	#0
   3755  f526				  -	      sta	temp2
   3756  f526				  -
   3757  f526				  -	      lda	DLPOINTL,x
   3758  f526				  -	      clc
   3759  f526				  -	      adc	temp6
   3760  f526				  -	      sta	temp3
   3761  f526				  -	      lda	DLPOINTH,x
   3762  f526				  -	      adc	#0
   3763  f526				  -	      sta	temp4
   3764  f526				  -
   3765  f526				  -	      lda	dlendsave,x
   3766  f526				  -	      tay
   3767  f526				  -copybuffercharsloop
   3768  f526				  -	      lda	(temp3),y
   3769  f526				  -	      sta	(temp1),y
   3770  f526				  -	      dey
   3771  f526				  -	      bpl	copybuffercharsloop
   3772  f526				  -	      dex
   3773  f526				  -	      bpl	copybufferzoneloop
   3774  f526				  -	      lda	#0
   3775  f526				  -	      sta	doublebufferbufferdirty
   3776  f526				  -	      endif		; ! BANKSET_DL_IN_CARTRAM
   3777  f526				  -	      rts
   3778  f526				  -
   3779  f526				  -doublebufferoff
   3780  f526				  -	      lda	#1
   3781  f526				  -	      sta	doublebufferstate
   3782  f526				  -	      jsr	flipdisplaybuffer
   3783  f526				  -	      lda	#0
   3784  f526				  -	      sta	doublebufferstate
   3785  f526				  -	      sta	doublebufferdloffset
   3786  f526				  -	      rts
   3787  f526				  -
   3788  f526				  -DLLMEMLutLo
   3789  f526				  -	      .byte	<DLLMEM,<(DLLMEM+DBOFFSET)
   3790  f526				  -DLLMEMLutHi
   3791  f526				  -	      .byte	>DLLMEM,>(DLLMEM+DBOFFSET)
   3792  f526				  -NewPageflipstate
   3793  f526				  -	      .byte	3,1
   3794  f526				  -NewPageflipoffset
   3795  f526				  -	      .byte	DOUBLEBUFFEROFFSET,0
   3796  f526				  -
   3797  f526					      endif		; DOUBLEBUFFER
   3798  f526
   3799  f526				  -	      ifconst	MOUSESUPPORT
   3800  f526				  -
   3801  f526				  -rotationalcompare
   3802  f526				  -			; old =   00	  01	  10	 11
   3803  f526				  -	      .byte	$00, $01, $ff, $00	; new=00
   3804  f526				  -	      .byte	$ff, $00, $00, $01	; new=01
   3805  f526				  -	      .byte	$01, $00, $00, $ff	; new=10
   3806  f526				  -	      .byte	$00, $ff, $01, $00	; new=11
   3807  f526				  -
   3808  f526				  -			;  0000YyXx st mouse
   3809  f526				  -
   3810  f526				  -			;  0000xyXY amiga mouse
   3811  f526				  -
   3812  f526				  -	      ifconst	MOUSEXONLY
   3813  f526				  -amigatoataribits		; swap bits 1 and 4...
   3814  f526				  -	      .byte	%0000, %0000, %0010, %0010
   3815  f526				  -	      .byte	%0000, %0000, %0010, %0010
   3816  f526				  -	      .byte	%0001, %0001, %0011, %0011
   3817  f526				  -	      .byte	%0001, %0001, %0011, %0011
   3818  f526				  -
   3819  f526				  -			; null change bits
   3820  f526				  -	      .byte	%0000, %0001, %0010, %0011
   3821  f526				  -	      .byte	%0000, %0001, %0010, %0011
   3822  f526				  -	      .byte	%0000, %0001, %0010, %0011
   3823  f526				  -	      .byte	%0000, %0001, %0010, %0011
   3824  f526				  -
   3825  f526				  -	      else		; !MOUSEXONLY
   3826  f526				  -
   3827  f526				  -amigatoataribits		; swap bits 1 and 4...
   3828  f526				  -	      .byte	%0000, %1000, %0010, %1010
   3829  f526				  -	      .byte	%0100, %1100, %0110, %1110
   3830  f526				  -	      .byte	%0001, %1001, %0011, %1011
   3831  f526				  -	      .byte	%0101, %1101, %0111, %1111
   3832  f526				  -			; null change bits
   3833  f526				  -	      .byte	%0000, %0001, %0010, %0011
   3834  f526				  -	      .byte	%0100, %0101, %0110, %0111
   3835  f526				  -	      .byte	%1000, %1001, %1010, %1011
   3836  f526				  -	      .byte	%1100, %1101, %1110, %1111
   3837  f526				  -	      endif		; !MOUSEXONLY
   3838  f526				  -
   3839  f526					      endif		; MOUSESUPPORT
   3840  f526
   3841  f526				   mouse0update
   3842  f526				  -	      ifconst	MOUSE0SUPPORT
   3843  f526				  -
   3844  f526				  -mousetableselect =	inttemp2
   3845  f526				  -mousexdelta =	inttemp3
   3846  f526				  -mouseydelta =	inttemp4
   3847  f526				  -lastSWCHA  =	inttemp6
   3848  f526				  -
   3849  f526				  -			;  0000YyXx st mouse
   3850  f526				  -			;  0000xyXY amiga mouse
   3851  f526				  -
   3852  f526				  -	      lda	#$ff
   3853  f526				  -	      sta	lastSWCHA
   3854  f526				  -
   3855  f526				  -	      ldy	port0control
   3856  f526				  -
   3857  f526				  -	      lda	#%00010000
   3858  f526				  -	      cpy	#9	; AMIGA?
   3859  f526				  -	      bne	skipamigabitsfix0
   3860  f526				  -	      lda	#0
   3861  f526				  -skipamigabitsfix0
   3862  f526				  -	      sta	mousetableselect
   3863  f526				  -	      ifconst	DRIVINGBOOST
   3864  f526				  -	      cpy	#6	; DRIVING?
   3865  f526				  -	      bne	skipdriving0setup
   3866  f526				  -			; swap mousex0 and mousey0. mousex seen by the 7800basic program
   3867  f526				  -			; trails the actual mousex0, so we can smoothly interpolate toward
   3868  f526				  -			; the actual position. This actual position is stored in mousey0 
   3869  f526				  -			; after the driver has run.
   3870  f526				  -	      ldx	mousex0
   3871  f526				  -	      lda	mousey0
   3872  f526				  -	      stx	mousey0
   3873  f526				  -	      sta	mousex0
   3874  f526				  -skipdriving0setup
   3875  f526				  -	      endif		; DRIVINGBOOST
   3876  f526				  -
   3877  f526				  -	      lda	#0
   3878  f526				  -	      sta	mousexdelta
   3879  f526				  -	      sta	mouseydelta
   3880  f526				  -
   3881  f526				  -	      ifnconst	MOUSETIME
   3882  f526				  -	      ifnconst	MOUSEXONLY
   3883  f526				  -	      lda	#180	; minimum for x+y
   3884  f526				  -	      else
   3885  f526				  -	      lda	#100	; minimum for just x
   3886  f526				  -	      endif
   3887  f526				  -	      else
   3888  f526				  -	      lda	#MOUSETIME
   3889  f526				  -	      endif
   3890  f526				  -	      jsr	SETTIM64T	; INTIM is in Y
   3891  f526				  -
   3892  f526				  -mouse0updateloop
   3893  f526				  -	      lda	SWCHA
   3894  f526				  -	      asr	#%11110000	; Undocumented. A = A & #IMM, then LSR A.
   3895  f526				  -	      cmp	lastSWCHA
   3896  f526				  -	      beq	mouse0loopcondition
   3897  f526				  -	      sta	lastSWCHA
   3898  f526				  -	      lsr
   3899  f526				  -	      lsr
   3900  f526				  -	      lsr
   3901  f526				  -
   3902  f526				  -	      ora	mousetableselect	; atari/amiga decoding table selection
   3903  f526				  -
   3904  f526				  -			; st mice encode on different bits/joystick-lines than amiga mice...
   3905  f526				  -			;  0000YyXx st mouse
   3906  f526				  -			;  0000xyXY amiga mouse
   3907  f526				  -			; ...so can shuffle the amiga bits to reuse the st driver.
   3908  f526				  -	      tay
   3909  f526				  -	      lax	amigatoataribits,y
   3910  f526				  -
   3911  f526				  -	      ifnconst	MOUSEXONLY
   3912  f526				  -			; first the Y...
   3913  f526				  -	      and	#%00001100
   3914  f526				  -	      ora	mousecodey0
   3915  f526				  -	      tay
   3916  f526				  -	      lda	rotationalcompare,y
   3917  f526				  -	      clc
   3918  f526				  -	      adc	mouseydelta
   3919  f526				  -	      sta	mouseydelta
   3920  f526				  -	      tya
   3921  f526				  -	      lsr
   3922  f526				  -	      lsr
   3923  f526				  -	      sta	mousecodey0
   3924  f526				  -	      txa
   3925  f526				  -			; ...then the X...
   3926  f526				  -	      and	#%00000011
   3927  f526				  -	      tax
   3928  f526				  -	      endif		; !MOUSEXONLY
   3929  f526				  -
   3930  f526				  -	      asl
   3931  f526				  -	      asl
   3932  f526				  -	      ora	mousecodex0
   3933  f526				  -	      tay
   3934  f526				  -	      lda	rotationalcompare,y
   3935  f526				  -	      adc	mousexdelta	; carry was clear by previous ASL
   3936  f526				  -	      sta	mousexdelta
   3937  f526				  -	      stx	mousecodex0
   3938  f526				  -mouse0loopcondition
   3939  f526				  -	      lda	TIMINT
   3940  f526				  -	      bpl	mouse0updateloop
   3941  f526				  -
   3942  f526				  -			; *** adapt to selected device resolution. 
   3943  f526				  -	      ldx	port0control
   3944  f526				  -
   3945  f526				  -	      ifconst	PRECISIONMOUSING
   3946  f526				  -	      ldy	port0resolution
   3947  f526				  -	      bne	mouse0halveddone
   3948  f526				  -	      cpx	#6	; half-resolution is no good for driving wheels
   3949  f526				  -	      beq	mouse0halveddone
   3950  f526				  -			; resolution=0 is half mouse resolution, necessary for precision 
   3951  f526				  -			; mousing on a 160x240 screen with a 1000 dpi mouse.
   3952  f526				  -
   3953  f526				  -	      lda	mousexdelta
   3954  f526				  -	      cmp	#$80
   3955  f526				  -	      ror		; do a signed divide by 2.
   3956  f526				  -	      clc
   3957  f526				  -	      adc	mousex0
   3958  f526				  -	      sta	mousex0
   3959  f526				  -	      ifnconst	MOUSEXONLY
   3960  f526				  -	      lda	mouseydelta
   3961  f526				  -	      clc
   3962  f526				  -	      adc	mousey0
   3963  f526				  -	      sta	mousey0
   3964  f526				  -	      endif
   3965  f526				  -			; at half resolution we just exit after updating x and y
   3966  f526				  -	      jmp	LLRET0
   3967  f526				  -mouse0halveddone
   3968  f526				  -	      endif		; PRECISIONMOUSING
   3969  f526				  -
   3970  f526				  -	      ifnconst	MOUSEXONLY
   3971  f526				  -	      asl	mouseydelta	; *2 because Y resolution is finer
   3972  f526				  -	      ldy	port0resolution
   3973  f526				  -	      dey
   3974  f526				  -	      lda	#0
   3975  f526				  -mousey0resolutionfix
   3976  f526				  -	      clc
   3977  f526				  -	      adc	mouseydelta
   3978  f526				  -	      dey
   3979  f526				  -	      bpl	mousey0resolutionfix
   3980  f526				  -	      clc
   3981  f526				  -	      adc	mousey0
   3982  f526				  -	      sta	mousey0
   3983  f526				  -	      endif		; MOUSEXONLY
   3984  f526				  -
   3985  f526				  -	      ldy	port0resolution
   3986  f526				  -	      dey
   3987  f526				  -	      lda	#0
   3988  f526				  -mousex0resolutionfix
   3989  f526				  -	      clc
   3990  f526				  -	      adc	mousexdelta
   3991  f526				  -	      dey
   3992  f526				  -	      bpl	mousex0resolutionfix
   3993  f526				  -	      ifnconst	DRIVINGBOOST
   3994  f526				  -	      clc
   3995  f526				  -	      adc	mousex0
   3996  f526				  -	      sta	mousex0
   3997  f526				  -	      else
   3998  f526				  -	      cpx	#6
   3999  f526				  -	      beq	carryonmouse0boost
   4000  f526				  -	      clc
   4001  f526				  -	      adc	mousex0
   4002  f526				  -	      sta	mousex0
   4003  f526				  -	      jmp	LLRET0
   4004  f526				  -carryonmouse0boost
   4005  f526				  -	      sta	mousexdelta
   4006  f526				  -	      clc
   4007  f526				  -	      adc	mousecodey0
   4008  f526				  -	      sta	mousecodey0
   4009  f526				  -	      clc
   4010  f526				  -	      adc	mousex0
   4011  f526				  -	      tay		; save the target X
   4012  f526				  -	      adc	mousey0	; average in the smoothly-trailing X
   4013  f526				  -	      ror
   4014  f526				  -	      sta	mousex0	; mousex0 now has the smoothly trailing X
   4015  f526				  -	      sty	mousey0	; and mousey0 has the the target X
   4016  f526				  -
   4017  f526				  -			; check to see if the coordinate wrapped. If so, undo the averaging code.
   4018  f526				  -			; A has mousex0, the smoothly trailing X
   4019  f526				  -	      sbc	mousey0	; less the target X
   4020  f526				  -	      bpl	skipabsolutedrive0
   4021  f526				  -	      eor	#$ff
   4022  f526				  -skipabsolutedrive0
   4023  f526				  -	      cmp	#64	; just an unreasonably large change
   4024  f526				  -	      bcc	skipdrivewrapfix0
   4025  f526				  -	      sty	mousex0	; if X wrapped, we catch the trailing X up to the target X
   4026  f526				  -skipdrivewrapfix0
   4027  f526				  -
   4028  f526				  -			; get rid of the tweening if the distance travelled was very small
   4029  f526				  -	      lda	mousexdelta
   4030  f526				  -	      cmp	port0resolution
   4031  f526				  -	      bcs	skipbetweenfix0
   4032  f526				  -	      lda	mousex0
   4033  f526				  -	      sta	mousey0
   4034  f526				  -skipbetweenfix0
   4035  f526				  -
   4036  f526				  -drivingboostreductioncheck0
   4037  f526				  -			; The below code amounts to mousecodey0=mousecodey0-(mousecodey0/8)
   4038  f526				  -			; +ve mousecodey0 is converted to -ve to do the calculation, and then
   4039  f526				  -			; negated again because truncation during BCD math results in 
   4040  f526				  -			; differing magnitudes, depending if the value is  +ve or -ve.
   4041  f526				  -driving0fix
   4042  f526				  -	      lax	mousecodey0
   4043  f526				  -	      cmp	#$80
   4044  f526				  -	      bcs	driving0skipnegate1
   4045  f526				  -	      eor	#$FF
   4046  f526				  -	      adc	#1
   4047  f526				  -	      sta	mousecodey0
   4048  f526				  -driving0skipnegate1
   4049  f526				  -	      cmp	#$80
   4050  f526				  -	      ror
   4051  f526				  -	      cmp	#$80
   4052  f526				  -	      ror
   4053  f526				  -	      cmp	#$80
   4054  f526				  -	      ror
   4055  f526				  -	      sta	inttemp1
   4056  f526				  -	      lda	mousecodey0
   4057  f526				  -	      sec
   4058  f526				  -	      sbc	inttemp1
   4059  f526				  -	      cpx	#$80
   4060  f526				  -	      bcs	driving0skipnegate2
   4061  f526				  -	      eor	#$FF
   4062  f526				  -	      adc	#1
   4063  f526				  -driving0skipnegate2
   4064  f526				  -	      sta	mousecodey0
   4065  f526				  -drivingboostdone0
   4066  f526				  -	      endif		; DRIVINGBOOST
   4067  f526				  -
   4068  f526				  -	      jmp	LLRET0
   4069  f526				  -
   4070  f526					      endif		; MOUSE0SUPPORT
   4071  f526
   4072  f526				   mouse1update
   4073  f526				  -	      ifconst	MOUSE1SUPPORT
   4074  f526				  -
   4075  f526				  -mousetableselect =	inttemp2
   4076  f526				  -mousexdelta =	inttemp3
   4077  f526				  -mouseydelta =	inttemp4
   4078  f526				  -lastSWCHA  =	inttemp6
   4079  f526				  -
   4080  f526				  -			;  0000YyXx st mouse
   4081  f526				  -			;  0000xyXY amiga mouse
   4082  f526				  -
   4083  f526				  -	      lda	#$ff
   4084  f526				  -	      sta	lastSWCHA
   4085  f526				  -
   4086  f526				  -	      ldy	port1control
   4087  f526				  -
   4088  f526				  -	      lda	#%00010000
   4089  f526				  -	      cpy	#9	; AMIGA?
   4090  f526				  -	      bne	skipamigabitsfix1
   4091  f526				  -	      lda	#0
   4092  f526				  -skipamigabitsfix1
   4093  f526				  -	      sta	mousetableselect
   4094  f526				  -	      ifconst	DRIVINGBOOST
   4095  f526				  -	      cpy	#6	; DRIVING?
   4096  f526				  -	      bne	skipdriving1setup
   4097  f526				  -			; swap mousex1 and mousey1. mousex seen by the 7800basic program
   4098  f526				  -			; trails the actual mousex1, so we can smoothly interpolate toward
   4099  f526				  -			; the actual position. This actual position is stored in mousey1 
   4100  f526				  -			; after the driver has run.
   4101  f526				  -	      ldx	mousex1
   4102  f526				  -	      lda	mousey1
   4103  f526				  -	      stx	mousey1
   4104  f526				  -	      sta	mousex1
   4105  f526				  -skipdriving1setup
   4106  f526				  -	      endif		; DRIVINGBOOST
   4107  f526				  -
   4108  f526				  -	      lda	#0
   4109  f526				  -	      sta	mousexdelta
   4110  f526				  -	      sta	mouseydelta
   4111  f526				  -
   4112  f526				  -	      ifnconst	MOUSETIME
   4113  f526				  -	      ifnconst	MOUSEXONLY
   4114  f526				  -	      lda	#180	; minimum for x+y
   4115  f526				  -	      else
   4116  f526				  -	      lda	#100	; minimum for just x
   4117  f526				  -	      endif
   4118  f526				  -	      else
   4119  f526				  -	      lda	#MOUSETIME
   4120  f526				  -	      endif
   4121  f526				  -	      jsr	SETTIM64T	; INTIM is in Y
   4122  f526				  -
   4123  f526				  -mouse1updateloop
   4124  f526				  -	      lda	SWCHA
   4125  f526				  -	      and	#%00001111
   4126  f526				  -	      cmp	lastSWCHA
   4127  f526				  -	      beq	mouse1loopcondition
   4128  f526				  -	      sta	lastSWCHA
   4129  f526				  -
   4130  f526				  -	      ora	mousetableselect	; atari/amiga decoding table selection
   4131  f526				  -
   4132  f526				  -			; st mice encode on different bits/joystick-lines than amiga mice...
   4133  f526				  -			;  0000YyXx st mouse
   4134  f526				  -			;  0000xyXY amiga mouse
   4135  f526				  -			; ...so can shuffle the amiga bits to reuse the st driver.
   4136  f526				  -	      tay
   4137  f526				  -	      lax	amigatoataribits,y
   4138  f526				  -
   4139  f526				  -	      ifnconst	MOUSEXONLY
   4140  f526				  -			; first the Y...
   4141  f526				  -	      and	#%00001100
   4142  f526				  -	      ora	mousecodey1
   4143  f526				  -	      tay
   4144  f526				  -	      lda	rotationalcompare,y
   4145  f526				  -	      clc
   4146  f526				  -	      adc	mouseydelta
   4147  f526				  -	      sta	mouseydelta
   4148  f526				  -	      tya
   4149  f526				  -	      lsr
   4150  f526				  -	      lsr
   4151  f526				  -	      sta	mousecodey1
   4152  f526				  -	      txa
   4153  f526				  -			; ...then the X...
   4154  f526				  -	      and	#%00000011
   4155  f526				  -	      tax
   4156  f526				  -	      endif		; !MOUSEXONLY
   4157  f526				  -
   4158  f526				  -	      asl
   4159  f526				  -	      asl
   4160  f526				  -	      ora	mousecodex1
   4161  f526				  -	      tay
   4162  f526				  -	      lda	rotationalcompare,y
   4163  f526				  -	      adc	mousexdelta	; carry was clear by previous ASL
   4164  f526				  -	      sta	mousexdelta
   4165  f526				  -	      stx	mousecodex1
   4166  f526				  -mouse1loopcondition
   4167  f526				  -	      lda	TIMINT
   4168  f526				  -	      bpl	mouse1updateloop
   4169  f526				  -
   4170  f526				  -			; *** adapt to selected device resolution. 
   4171  f526				  -	      ldx	port1control
   4172  f526				  -
   4173  f526				  -	      ifconst	PRECISIONMOUSING
   4174  f526				  -	      ldy	port1resolution
   4175  f526				  -	      bne	mouse1halveddone
   4176  f526				  -	      cpx	#6	; half-resolution is no good for driving wheels
   4177  f526				  -	      beq	mouse1halveddone
   4178  f526				  -			; resolution=0 is half mouse resolution, necessary for precision 
   4179  f526				  -			; mousing on a 160x240 screen with a 1000 dpi mouse.
   4180  f526				  -
   4181  f526				  -	      lda	mousexdelta
   4182  f526				  -	      cmp	#$80
   4183  f526				  -	      ror		; do a signed divide by 2.
   4184  f526				  -	      clc
   4185  f526				  -	      adc	mousex1
   4186  f526				  -	      sta	mousex1
   4187  f526				  -	      ifnconst	MOUSEXONLY
   4188  f526				  -	      lda	mouseydelta
   4189  f526				  -	      clc
   4190  f526				  -	      adc	mousey1
   4191  f526				  -	      sta	mousey1
   4192  f526				  -	      endif
   4193  f526				  -			; at half resolution we just exit after updating x and y
   4194  f526				  -	      jmp	LLRET1
   4195  f526				  -mouse1halveddone
   4196  f526				  -	      endif		; PRECISIONMOUSING
   4197  f526				  -
   4198  f526				  -	      ifnconst	MOUSEXONLY
   4199  f526				  -	      asl	mouseydelta	; *2 because Y resolution is finer
   4200  f526				  -	      ldy	port1resolution
   4201  f526				  -	      dey
   4202  f526				  -	      lda	#0
   4203  f526				  -mousey1resolutionfix
   4204  f526				  -	      clc
   4205  f526				  -	      adc	mouseydelta
   4206  f526				  -	      dey
   4207  f526				  -	      bpl	mousey1resolutionfix
   4208  f526				  -	      clc
   4209  f526				  -	      adc	mousey1
   4210  f526				  -	      sta	mousey1
   4211  f526				  -	      endif		; MOUSEXONLY
   4212  f526				  -
   4213  f526				  -	      ldy	port1resolution
   4214  f526				  -	      dey
   4215  f526				  -	      lda	#0
   4216  f526				  -mousex1resolutionfix
   4217  f526				  -	      clc
   4218  f526				  -	      adc	mousexdelta
   4219  f526				  -	      dey
   4220  f526				  -	      bpl	mousex1resolutionfix
   4221  f526				  -	      ifnconst	DRIVINGBOOST
   4222  f526				  -	      clc
   4223  f526				  -	      adc	mousex1
   4224  f526				  -	      sta	mousex1
   4225  f526				  -	      else
   4226  f526				  -	      cpx	#6
   4227  f526				  -	      beq	carryonmouse1boost
   4228  f526				  -	      clc
   4229  f526				  -	      adc	mousex1
   4230  f526				  -	      sta	mousex1
   4231  f526				  -	      jmp	LLRET1
   4232  f526				  -carryonmouse1boost
   4233  f526				  -	      sta	mousexdelta
   4234  f526				  -	      clc
   4235  f526				  -	      adc	mousecodey1
   4236  f526				  -	      sta	mousecodey1
   4237  f526				  -	      clc
   4238  f526				  -	      adc	mousex1
   4239  f526				  -	      tay		; save the target X
   4240  f526				  -	      adc	mousey1	; average in the smoothly-trailing X
   4241  f526				  -	      ror
   4242  f526				  -	      sta	mousex1	; mousex0 now has the smoothly trailing X
   4243  f526				  -	      sty	mousey1	; and mousey0 has the the target X
   4244  f526				  -
   4245  f526				  -			; check to see if the coordinate wrapped. If so, undo the averaging code.
   4246  f526				  -			; A has mousex1, the smoothly trailing X
   4247  f526				  -	      sbc	mousey1	; less the target X
   4248  f526				  -	      bpl	skipabsolutedrive1
   4249  f526				  -	      eor	#$ff
   4250  f526				  -skipabsolutedrive1
   4251  f526				  -	      cmp	#64	; just an unreasonably large change
   4252  f526				  -	      bcc	skipdrivewrapfix1
   4253  f526				  -	      sty	mousex1	; if X wrapped, we catch the trailing X up to the target X
   4254  f526				  -skipdrivewrapfix1
   4255  f526				  -
   4256  f526				  -			; get rid of the tweening if the distance travelled was very small
   4257  f526				  -	      lda	mousexdelta
   4258  f526				  -	      cmp	port1resolution
   4259  f526				  -	      bcs	skipbetweenfix1
   4260  f526				  -	      lda	mousex1
   4261  f526				  -	      sta	mousey1
   4262  f526				  -skipbetweenfix1
   4263  f526				  -
   4264  f526				  -drivingboostreductioncheck1
   4265  f526				  -			; The below code amounts to mousecodey0=mousecodey0-(mousecodey0/8)
   4266  f526				  -			; +ve mousecodey0 is converted to -ve to do the calculation, and then
   4267  f526				  -			; negated again because truncation during BCD math results in 
   4268  f526				  -			; differing magnitudes, depending if the value is  +ve or -ve.
   4269  f526				  -driving1fix
   4270  f526				  -	      lax	mousecodey1
   4271  f526				  -	      cmp	#$80
   4272  f526				  -	      bcs	driving0skipnegate1
   4273  f526				  -	      eor	#$FF
   4274  f526				  -	      adc	#1
   4275  f526				  -	      sta	mousecodey1
   4276  f526				  -driving0skipnegate1
   4277  f526				  -	      cmp	#$80
   4278  f526				  -	      ror
   4279  f526				  -	      cmp	#$80
   4280  f526				  -	      ror
   4281  f526				  -	      cmp	#$80
   4282  f526				  -	      ror
   4283  f526				  -	      sta	inttemp1
   4284  f526				  -	      lda	mousecodey1
   4285  f526				  -	      sec
   4286  f526				  -	      sbc	inttemp1
   4287  f526				  -	      cpx	#$80
   4288  f526				  -	      bcs	driving1skipnegate2
   4289  f526				  -	      eor	#$FF
   4290  f526				  -	      adc	#1
   4291  f526				  -driving1skipnegate2
   4292  f526				  -	      sta	mousecodey1
   4293  f526				  -drivingboostdone1
   4294  f526				  -	      endif		; DRIVINGBOOST
   4295  f526				  -
   4296  f526				  -	      jmp	LLRET1
   4297  f526				  -
   4298  f526					      endif		; MOUSE1SUPPORT
   4299  f526
   4300  f526
   4301  f526				   trakball0update
   4302  f526				  -	      ifconst	TRAKBALL0SUPPORT
   4303  f526				  -	      ifnconst	TRAKTIME
   4304  f526				  -	      ifnconst	TRAKXONLY
   4305  f526				  -	      lda	#180	; minimum for x+y
   4306  f526				  -	      else		;  !TRAKXONLY
   4307  f526				  -	      lda	#100	; minimum for just x
   4308  f526				  -	      endif		; !TRAKXONLY
   4309  f526				  -	      else		; !TRAKTIME
   4310  f526				  -	      lda	#TRAKTIME
   4311  f526				  -	      endif		; !TRAKTIME
   4312  f526				  -	      jsr	SETTIM64T	; INTIM is in Y
   4313  f526				  -	      ldx	#0
   4314  f526				  -	      ifnconst	TRAKXONLY
   4315  f526				  -	      ldy	#0
   4316  f526				  -	      endif		;  TRAKXONLY
   4317  f526				  -trakball0updateloop
   4318  f526				  -	      lda	SWCHA
   4319  f526				  -	      and	#%00110000
   4320  f526				  -	      cmp	trakballcodex0
   4321  f526				  -	      sta	trakballcodex0
   4322  f526				  -	      beq	trakball0movementXdone
   4323  f526				  -	      and	#%00010000
   4324  f526				  -	      beq	trakball0negativeX
   4325  f526				  -trakball0positiveX
   4326  f526				  -			;(2 from beq)
   4327  f526				  -	      inx		; 2
   4328  f526				  -	      jmp	trakball0movementXdone	; 3
   4329  f526				  -trakball0negativeX
   4330  f526				  -			;(3 from beq)
   4331  f526				  -	      dex		; 2
   4332  f526				  -	      nop		; 2
   4333  f526				  -trakball0movementXdone
   4334  f526				  -
   4335  f526				  -	      ifnconst	TRAKXONLY
   4336  f526				  -	      lda	SWCHA
   4337  f526				  -	      and	#%11000000
   4338  f526				  -	      cmp	trakballcodey0
   4339  f526				  -	      sta	trakballcodey0
   4340  f526				  -	      beq	trakball0movementYdone
   4341  f526				  -	      and	#%01000000
   4342  f526				  -	      beq	trakball0negativeY
   4343  f526				  -trakball0positiveY
   4344  f526				  -			;(2 from beq)
   4345  f526				  -	      iny		; 2
   4346  f526				  -	      jmp	trakball0movementYdone	; 3
   4347  f526				  -trakball0negativeY
   4348  f526				  -			;(3 from beq)
   4349  f526				  -	      dey		; 2
   4350  f526				  -	      nop		; 2
   4351  f526				  -trakball0movementYdone
   4352  f526				  -	      endif		; !TRAKXONLY
   4353  f526				  -
   4354  f526				  -	      lda	TIMINT
   4355  f526				  -	      bpl	trakball0updateloop
   4356  f526				  -	      lda	#0
   4357  f526				  -	      cpx	#0
   4358  f526				  -	      beq	trakball0skipXadjust
   4359  f526				  -	      clc
   4360  f526				  -trakball0Xloop
   4361  f526				  -	      adc	port0resolution
   4362  f526				  -	      dex
   4363  f526				  -	      bne	trakball0Xloop
   4364  f526				  -	      clc
   4365  f526				  -	      adc	trakballx0
   4366  f526				  -	      sta	trakballx0
   4367  f526				  -trakball0skipXadjust
   4368  f526				  -	      ifnconst	TRAKXONLY
   4369  f526				  -	      lda	#0
   4370  f526				  -	      cpy	#0
   4371  f526				  -	      beq	trakball0skipYadjust
   4372  f526				  -	      clc
   4373  f526				  -trakball0yloop
   4374  f526				  -	      adc	port0resolution
   4375  f526				  -	      dey
   4376  f526				  -	      bne	trakball0yloop
   4377  f526				  -	      clc
   4378  f526				  -	      adc	trakbally0
   4379  f526				  -	      sta	trakbally0
   4380  f526				  -trakball0skipYadjust
   4381  f526				  -	      endif		; !TRAKXONLY
   4382  f526				  -
   4383  f526				  -	      jmp	LLRET0
   4384  f526					      endif
   4385  f526
   4386  f526
   4387  f526
   4388  f526				   trakball1update
   4389  f526				  -	      ifconst	TRAKBALL1SUPPORT
   4390  f526				  -	      ifnconst	TRAKTIME
   4391  f526				  -	      ifnconst	TRAKXONLY
   4392  f526				  -	      lda	#180	; minimum for x+y
   4393  f526				  -	      else		;  !TRAKXONLY
   4394  f526				  -	      lda	#100	; minimum for just x
   4395  f526				  -	      endif		; !TRAKXONLY
   4396  f526				  -	      else		; !TRAKTIME
   4397  f526				  -	      lda	#TRAKTIME
   4398  f526				  -	      endif		; !TRAKTIME
   4399  f526				  -	      jsr	SETTIM64T	; INTIM is in Y
   4400  f526				  -	      ldx	#0
   4401  f526				  -	      ifnconst	TRAKXONLY
   4402  f526				  -	      ldy	#0
   4403  f526				  -	      endif		;  TRAKXONLY
   4404  f526				  -trakball1updateloop
   4405  f526				  -	      lda	SWCHA
   4406  f526				  -	      and	#%00000011
   4407  f526				  -	      cmp	trakballcodex1
   4408  f526				  -	      sta	trakballcodex1
   4409  f526				  -	      beq	trakball1movementXdone
   4410  f526				  -	      and	#%00000001
   4411  f526				  -	      beq	trakball1negativeX
   4412  f526				  -trakball1positiveX
   4413  f526				  -			;(2 from beq)
   4414  f526				  -	      inx		; 2
   4415  f526				  -	      jmp	trakball1movementXdone	; 3
   4416  f526				  -trakball1negativeX
   4417  f526				  -			;(3 from beq)
   4418  f526				  -	      dex		; 2
   4419  f526				  -	      nop		; 2
   4420  f526				  -trakball1movementXdone
   4421  f526				  -
   4422  f526				  -	      ifnconst	TRAKXONLY
   4423  f526				  -	      lda	SWCHA
   4424  f526				  -	      and	#%00001100
   4425  f526				  -	      cmp	trakballcodey1
   4426  f526				  -	      sta	trakballcodey1
   4427  f526				  -	      beq	trakball1movementYdone
   4428  f526				  -	      and	#%00000100
   4429  f526				  -	      beq	trakball1negativeY
   4430  f526				  -trakball1positiveY
   4431  f526				  -			;(2 from beq)
   4432  f526				  -	      iny		; 2
   4433  f526				  -	      jmp	trakball1movementYdone	; 3
   4434  f526				  -trakball1negativeY
   4435  f526				  -			;(3 from beq)
   4436  f526				  -	      dey		; 2
   4437  f526				  -	      nop		; 2
   4438  f526				  -trakball1movementYdone
   4439  f526				  -	      endif		; !TRAKXONLY
   4440  f526				  -
   4441  f526				  -	      lda	TIMINT
   4442  f526				  -	      bpl	trakball1updateloop
   4443  f526				  -	      lda	#0
   4444  f526				  -	      cpx	#0
   4445  f526				  -	      beq	trakball1skipXadjust
   4446  f526				  -	      clc
   4447  f526				  -trakball1Xloop
   4448  f526				  -	      adc	port1resolution
   4449  f526				  -	      dex
   4450  f526				  -	      bne	trakball1Xloop
   4451  f526				  -	      clc
   4452  f526				  -	      adc	trakballx1
   4453  f526				  -	      sta	trakballx1
   4454  f526				  -trakball1skipXadjust
   4455  f526				  -	      ifnconst	TRAKXONLY
   4456  f526				  -	      lda	#0
   4457  f526				  -	      cpy	#0
   4458  f526				  -	      beq	trakball1skipYadjust
   4459  f526				  -	      clc
   4460  f526				  -trakball1yloop
   4461  f526				  -	      adc	port1resolution
   4462  f526				  -	      dey
   4463  f526				  -	      bne	trakball1yloop
   4464  f526				  -	      clc
   4465  f526				  -	      adc	trakbally1
   4466  f526				  -	      sta	trakbally1
   4467  f526				  -trakball1skipYadjust
   4468  f526				  -	      endif		; !TRAKXONLY
   4469  f526				  -
   4470  f526				  -	      jmp	LLRET1
   4471  f526					      endif
   4472  f526
   4473  f526
   4474  f526				   paddleport0update
   4475  f526				  -	      ifconst	PADDLE0SUPPORT
   4476  f526				  -	      lda	#6
   4477  f526				  -	      sta	VBLANK	; start charging the paddle caps
   4478  f526				  -	      lda	#0	; use PADDLE timing
   4479  f526				  -	      jsr	SETTIM64T	; INTIM is in Y
   4480  f526				  -
   4481  f526				  -paddleport0updateloop
   4482  f526				  -	      lda	INPT0
   4483  f526				  -	      bmi	skippaddle0setposition
   4484  f526				  -	      sty	paddleposition0
   4485  f526				  -skippaddle0setposition
   4486  f526				  -	      ifconst	TWOPADDLESUPPORT
   4487  f526				  -	      lda	INPT1
   4488  f526				  -	      bmi	skippaddle1setposition
   4489  f526				  -	      sty	paddleposition1
   4490  f526				  -skippaddle1setposition
   4491  f526				  -	      endif
   4492  f526				  -	      ldy	INTIM
   4493  f526				  -	      cpy	#TIMEOFFSET
   4494  f526				  -	      bcs	paddleport0updateloop
   4495  f526				  -
   4496  f526				  -	      lda	#%10000110
   4497  f526				  -	      sta	VBLANK	; dump paddles to ground... this may not be great for genesis controllers
   4498  f526				  -	      sec
   4499  f526				  -	      lda	paddleposition0
   4500  f526				  -	      sbc	#TIMEOFFSET
   4501  f526				  -	      ifconst	PADDLESCALEX2
   4502  f526				  -	      asl
   4503  f526				  -	      endif
   4504  f526				  -
   4505  f526				  -	      ifnconst	PADDLESMOOTHINGOFF
   4506  f526				  -	      clc
   4507  f526				  -	      adc	paddleprevious0
   4508  f526				  -	      ror
   4509  f526				  -	      sta	paddleprevious0
   4510  f526				  -	      endif
   4511  f526				  -
   4512  f526				  -	      sta	paddleposition0
   4513  f526				  -
   4514  f526				  -	      ifconst	TWOPADDLESUPPORT
   4515  f526				  -	      sec
   4516  f526				  -	      lda	paddleposition1
   4517  f526				  -	      sbc	#TIMEOFFSET
   4518  f526				  -	      ifconst	PADDLESCALEX2
   4519  f526				  -	      asl
   4520  f526				  -	      endif
   4521  f526				  -
   4522  f526				  -	      ifnconst	PADDLESMOOTHINGOFF
   4523  f526				  -	      clc
   4524  f526				  -	      adc	paddleprevious1
   4525  f526				  -	      ror
   4526  f526				  -	      sta	paddleprevious1
   4527  f526				  -	      endif
   4528  f526				  -	      sta	paddleposition1
   4529  f526				  -	      endif		; TWOPADDLESUPPORT
   4530  f526				  -
   4531  f526				  -	      jmp	LLRET0
   4532  f526					      endif
   4533  f526
   4534  f526				   paddleport1update
   4535  f526				  -	      ifconst	PADDLE1SUPPORT
   4536  f526				  -	      lda	#6
   4537  f526				  -	      sta	VBLANK	; start charging the paddle caps
   4538  f526				  -
   4539  f526				  -	      lda	#0	; use PADDLE timing
   4540  f526				  -	      jsr	SETTIM64T	; INTIM is in Y
   4541  f526				  -
   4542  f526				  -paddleport1updateloop
   4543  f526				  -	      lda	INPT2
   4544  f526				  -	      bmi	skippaddle2setposition
   4545  f526				  -	      sty	paddleposition2
   4546  f526				  -skippaddle2setposition
   4547  f526				  -	      ifconst	TWOPADDLESUPPORT
   4548  f526				  -	      lda	INPT3
   4549  f526				  -	      bmi	skippaddle3setposition
   4550  f526				  -	      sty	paddleposition3
   4551  f526				  -skippaddle3setposition
   4552  f526				  -	      endif
   4553  f526				  -	      ldy	INTIM
   4554  f526				  -	      cpy	#TIMEOFFSET
   4555  f526				  -	      bcs	paddleport1updateloop
   4556  f526				  -
   4557  f526				  -	      lda	#%10000110
   4558  f526				  -	      sta	VBLANK	; dump paddles to ground... this may not be great for genesis controllers
   4559  f526				  -	      sec
   4560  f526				  -	      lda	paddleposition2
   4561  f526				  -	      sbc	#TIMEOFFSET
   4562  f526				  -	      ifconst	PADDLESCALEX2
   4563  f526				  -	      asl
   4564  f526				  -	      endif
   4565  f526				  -
   4566  f526				  -	      ifnconst	PADDLESMOOTHINGOFF
   4567  f526				  -	      clc
   4568  f526				  -	      adc	paddleprevious2
   4569  f526				  -	      ror
   4570  f526				  -	      sta	paddleprevious2
   4571  f526				  -	      endif
   4572  f526				  -
   4573  f526				  -	      sta	paddleposition2
   4574  f526				  -
   4575  f526				  -	      ifconst	TWOPADDLESUPPORT
   4576  f526				  -	      sec
   4577  f526				  -	      lda	paddleposition3
   4578  f526				  -	      sbc	#TIMEOFFSET
   4579  f526				  -	      ifconst	PADDLESCALEX2
   4580  f526				  -	      asl
   4581  f526				  -	      endif
   4582  f526				  -
   4583  f526				  -	      ifnconst	PADDLESMOOTHINGOFF
   4584  f526				  -	      clc
   4585  f526				  -	      adc	paddleprevious3
   4586  f526				  -	      ror
   4587  f526				  -	      sta	paddleprevious3
   4588  f526				  -	      endif
   4589  f526				  -	      sta	paddleposition3
   4590  f526				  -	      endif		; TWOPADDLESUPPORT
   4591  f526				  -
   4592  f526				  -	      jmp	LLRET1
   4593  f526					      endif
   4594  f526
   4595  f526
   4596  f526				   paddlebuttonhandler		; outside of conditional, for button-handler LUT
   4597  f526				  -	      ifconst	PADDLESUPPORT
   4598  f526				  -			; x=0|1 for port, rather than paddle #. 
   4599  f526				  -			; Only the first paddle button will integrate into "joy0fire" testing. If the
   4600  f526				  -			; game wants to support 2 paddles, up to the game to instead test the 
   4601  f526				  -			; joystick right+left directions instead.
   4602  f526				  -	      lda	SWCHA	; top of nibble is first paddle button
   4603  f526				  -	      cpx	#0	; port 0?
   4604  f526				  -	      beq	skippaddleport2shift
   4605  f526				  -	      asl		; shift second port to upper nibble
   4606  f526				  -	      asl
   4607  f526				  -	      asl
   4608  f526				  -	      asl
   4609  f526				  -skippaddleport2shift
   4610  f526				  -	      and	#%10000000
   4611  f526				  -	      eor	#%10000000	; invert
   4612  f526				  -	      sta	sINPT1,x
   4613  f526				  -	      jmp	buttonreadloopreturn
   4614  f526					      endif		; PADDLESUPPORT
   4615  f526
   4616  f526				   mousebuttonhandler		; outside of conditional, for button-handler LUT
   4617  f526				  -	      ifconst	MOUSESUPPORT
   4618  f526				  -			; stick the mouse buttons in the correct shadow register...
   4619  f526				  -	      txa
   4620  f526				  -	      asl
   4621  f526				  -	      tay		; y=x*2
   4622  f526				  -	      lda	INPT4,x
   4623  f526				  -	      eor	#%10000000
   4624  f526				  -	      lsr
   4625  f526				  -	      sta	sINPT1,x
   4626  f526				  -
   4627  f526				  -	      lda	INPT1,y
   4628  f526				  -	      and	#%10000000
   4629  f526				  -	      eor	#%10000000
   4630  f526				  -	      ora	sINPT1,x
   4631  f526				  -	      sta	sINPT1,x
   4632  f526				  -	      jmp	buttonreadloopreturn
   4633  f526					      endif		; MOUSESUPPORT
   4634  f526
   4635  f526				  -	      ifconst	KEYPADSUPPORT
   4636  f526				  -			; ** select keypad rows 0 to 3 over 4 frames...
   4637  f526				  -keypadrowselect
   4638  f526				  -	      inc	keypadcounter
   4639  f526				  -	      ldy	#0
   4640  f526				  -	      lda	port0control
   4641  f526				  -	      cmp	#7
   4642  f526				  -	      bne	skipport0val
   4643  f526				  -	      iny		; y=y+1
   4644  f526				  -skipport0val
   4645  f526				  -	      lda	port1control
   4646  f526				  -	      cmp	#7
   4647  f526				  -	      bne	skipport1val
   4648  f526				  -	      iny
   4649  f526				  -	      iny		; y=y+2
   4650  f526				  -skipport1val
   4651  f526				  -	      cpy	#0
   4652  f526				  -	      beq	exitkeypadrowselect
   4653  f526				  -	      lda	keyrowdirectionmask,y
   4654  f526				  -	      sta	CTLSWA
   4655  f526				  -	      tya
   4656  f526				  -	      asl
   4657  f526				  -	      asl
   4658  f526				  -	      sta	inttemp1
   4659  f526				  -	      lda	keypadcounter
   4660  f526				  -	      and	#3
   4661  f526				  -	      ora	inttemp1
   4662  f526				  -	      tax
   4663  f526				  -	      lda	keyrowselectvalue,x
   4664  f526				  -	      sta	SWCHA
   4665  f526				  -exitkeypadrowselect
   4666  f526				  -	      rts
   4667  f526				  -
   4668  f526				  -keyrowdirectionmask
   4669  f526				  -	      .byte	#%00000000	; 0 : port0=input  port1=input
   4670  f526				  -	      .byte	#%11110000	; 1 : port0=output port1=input
   4671  f526				  -	      .byte	#%00001111	; 2 : port0=input  port1=output
   4672  f526				  -	      .byte	#%11111111	; 3 : port0=output port1=output
   4673  f526				  -
   4674  f526				  -keyrowselectvalue
   4675  f526				  -	      .byte	#%00000000, #%00000000, #%00000000, #%00000000	; no row selected, all pins high, always
   4676  f526				  -	      .byte	#%11100000, #%11010000, #%10110000, #%01110000	; p0 keypad in
   4677  f526				  -	      .byte	#%00001110, #%00001101, #%00001011, #%00000111	; p1 keypad in
   4678  f526				  -	      .byte	#%11101110, #%11011101, #%10111011, #%01110111	; p0+p1 keypads in
   4679  f526					      endif		;  KEYPADSUPPORT
   4680  f526
   4681  f526				  -	      ifconst	KEYPADSUPPORT
   4682  f526				  -			; TODO - split into compile-time KEYPAD0SUPPORT and KEYPAD1SUPPORT
   4683  f526				  -keypadcolumnread
   4684  f526				  -	      lda	port0control
   4685  f526				  -	      cmp	#7
   4686  f526				  -	      bne	skipkeypadcolumnread0
   4687  f526				  -	      lda	keypadcounter
   4688  f526				  -	      and	#3
   4689  f526				  -	      asl		; x2 because keypad variables are interleaved
   4690  f526				  -	      tax
   4691  f526				  -	      lda	#0
   4692  f526				  -	      sta	keypadmatrix0a,x
   4693  f526				  -	      lda	INPT0
   4694  f526				  -	      cmp	#$80
   4695  f526				  -	      rol	keypadmatrix0a,x
   4696  f526				  -	      lda	INPT1
   4697  f526				  -	      cmp	#$80
   4698  f526				  -	      rol	keypadmatrix0a,x
   4699  f526				  -	      lda	INPT4
   4700  f526				  -	      cmp	#$80
   4701  f526				  -	      rol	keypadmatrix0a,x
   4702  f526				  -	      lda	keypadmatrix0a,x
   4703  f526				  -	      eor	#%00000111
   4704  f526				  -	      sta	keypadmatrix0a,x
   4705  f526				  -skipkeypadcolumnread0
   4706  f526				  -
   4707  f526				  -	      lda	port1control
   4708  f526				  -	      cmp	#7
   4709  f526				  -	      bne	skipkeypadcolumnread1
   4710  f526				  -	      lda	keypadcounter
   4711  f526				  -	      and	#3
   4712  f526				  -	      asl		; x2 because keypad variables are interleaved
   4713  f526				  -	      tax
   4714  f526				  -	      lda	#0
   4715  f526				  -	      sta	keypadmatrix1a,x
   4716  f526				  -	      rol	keypadmatrix1a,x
   4717  f526				  -	      lda	INPT2
   4718  f526				  -	      cmp	#$80
   4719  f526				  -	      rol	keypadmatrix1a,x
   4720  f526				  -	      lda	INPT3
   4721  f526				  -	      cmp	#$80
   4722  f526				  -	      rol	keypadmatrix1a,x
   4723  f526				  -	      lda	INPT5
   4724  f526				  -	      cmp	#$80
   4725  f526				  -	      rol	keypadmatrix1a,x
   4726  f526				  -	      lda	keypadmatrix1a,x
   4727  f526				  -	      eor	#%00000111
   4728  f526				  -	      sta	keypadmatrix1a,x
   4729  f526				  -skipkeypadcolumnread1
   4730  f526				  -	      rts
   4731  f526					      endif		; KEYPADSUPPORT
   4732  f526
   4733  f526				   setportforinput
   4734  f526		       a5 e4		      lda	CTLSWAs
   4735  f528		       3d 31 f5 	      and	allpinsinputlut,x
   4736  f52b		       85 e4		      sta	CTLSWAs
   4737  f52d		       8d 81 02 	      sta	CTLSWA
   4738  f530		       60		      rts
   4739  f531
   4740  f531				   allpinsinputlut
   4741  f531		       0f f0		      .byte.b	$0F, $F0
   4742  f533
   4743  f533				   setonebuttonmode
   4744  f533		       a9 06		      lda	#6	; in case we're in unlocked-bios mode
   4745  f535		       85 01		      sta	VBLANK	; if we were on paddles, the line is grounded out.
   4746  f537		       a9 14		      lda	#$14
   4747  f539		       8d 83 02 	      sta	CTLSWB	; set both 2-button disable bits to writable
   4748  f53c		       a5 e5		      lda	CTLSWBs
   4749  f53e		       1d 47 f5 	      ora	thisjoy2buttonbit,x
   4750  f541		       85 e5		      sta	CTLSWBs
   4751  f543		       8d 82 02 	      sta	SWCHB	; turn off the 2-button disable bits
   4752  f546		       60		      rts
   4753  f547
   4754  f547				   thisjoy2buttonbit
   4755  f547		       04 10		      .byte.b	$04, $10
   4756  f549
   4757  f549				   settwobuttonmode
   4758  f549		       a9 06		      lda	#6	; in case we're in unlocked-bios mode
   4759  f54b		       85 01		      sta	VBLANK	; if we were on paddles, the line is grounded out.
   4760  f54d		       a9 14		      lda	#$14
   4761  f54f		       8d 83 02 	      sta	CTLSWB	; set both 2-button disable bits to writable
   4762  f552		       a5 e5		      lda	CTLSWBs
   4763  f554		       3d 5d f5 	      and	thisjoy2buttonmask,x
   4764  f557		       85 e5		      sta	CTLSWBs
   4765  f559		       8d 82 02 	      sta	SWCHB
   4766  f55c		       60		      rts
   4767  f55d
   4768  f55d				   thisjoy2buttonmask
   4769  f55d		       fb ef		      .byte.b	$fb, $ef
   4770  f55f
   4771  f55f							; Provided under the CC0 license. See the included LICENSE.txt for details.
   4772  f55f
   4773  f55f				   START
   4774  f55f				   start
   4775  f55f
   4776  f55f							;******** more or less the Atari recommended startup procedure
   4777  f55f
   4778  f55f		       78		      sei
   4779  f560		       d8		      cld
   4780  f561
   4781  f561					      ifnconst	NOTIALOCK
   4782  f561		       a9 07		      lda	#$07
   4783  f563				  -	      else
   4784  f563				  -	      lda	#$06
   4785  f563					      endif
   4786  f563		       85 01		      sta	INPTCTRL	;lock 7800 into 7800 mode
   4787  f565		       a9 7f		      lda	#$7F
   4788  f567		       85 3c		      sta	CTRL	;disable DMA
   4789  f569		       a9 00		      lda	#$00
   4790  f56b		       85 38		      sta	OFFSET
   4791  f56d					      ifnconst	NOTIALOCK
   4792  f56d		       85 01		      sta	INPTCTRL
   4793  f56f		       85 20		      sta	BACKGRND	; black default, in case a flash cart is using something else
   4794  f571					      endif
   4795  f571		       a2 ff		      ldx	#$FF
   4796  f573		       9a		      txs
   4797  f574
   4798  f574							;************** Clear Memory
   4799  f574
   4800  f574							; ** Clear 1800-27FF, pg0+pg1 memory.
   4801  f574				   ClearMemPages
   4802  f574		       a9 00		      lda	#0
   4803  f576		       a8		      tay		; y=0
   4804  f577		       85 80		      sta	$80
   4805  f579		       a2 18		      ldx	#$18
   4806  f57b				   ClearMemPagesLoop
   4807  f57b		       86 81		      stx	$81	; needed for when we step on ZP memory
   4808  f57d		       91 80		      sta	($80),y	;Store data
   4809  f57f		       c8		      iny		;Next byte
   4810  f580		       d0 f9		      bne	ClearMemPagesLoop
   4811  f582		       e8		      inx
   4812  f583		       e0 28		      cpx	#$28
   4813  f585		       d0 f4		      bne	ClearMemPagesLoop
   4814  f587		       85 81		      sta	$81
   4815  f589
   4816  f589							;seed random number with hopefully-random timer value
   4817  f589		       a9 01		      lda	#1
   4818  f58b		       0d 84 02 	      ora	INTIM
   4819  f58e		       85 40		      sta	rand
   4820  f590
   4821  f590							; detect the console type...
   4822  f590				   pndetectvblankstart
   4823  f590		       a5 28		      lda	MSTAT
   4824  f592		       10 fc		      bpl	pndetectvblankstart	; if we're not in VBLANK, wait for it to start 
   4825  f594				   pndetectvblankover
   4826  f594		       a5 28		      lda	MSTAT
   4827  f596		       30 fc		      bmi	pndetectvblankover	;  then wait for it to be over
   4828  f598		       a0 00		      ldy	#$00
   4829  f59a		       a2 00		      ldx	#$00
   4830  f59c				   pndetectvblankhappening
   4831  f59c		       a5 28		      lda	MSTAT
   4832  f59e		       30 07		      bmi	pndetectinvblank	;  if VBLANK starts, exit our counting loop 
   4833  f5a0		       85 24		      sta	WSYNC
   4834  f5a2		       85 24		      sta	WSYNC
   4835  f5a4		       e8		      inx
   4836  f5a5		       d0 f5		      bne	pndetectvblankhappening
   4837  f5a7				   pndetectinvblank
   4838  f5a7		       e0 7d		      cpx	#125
   4839  f5a9		       90 02		      bcc	pndetecispal
   4840  f5ab		       a0 01		      ldy	#$01
   4841  f5ad				   pndetecispal
   4842  f5ad		       8c 09 21 	      sty	paldetected
   4843  f5b0
   4844  f5b0		       20 8c f4 	      jsr	createallgamedlls
   4845  f5b3
   4846  f5b3		       a9 18		      lda	#>DLLMEM
   4847  f5b5		       85 2c		      sta	DPPH
   4848  f5b7		       a9 00		      lda	#<DLLMEM
   4849  f5b9		       85 30		      sta	DPPL
   4850  f5bb
   4851  f5bb				  -	      ifconst	pokeysupport
   4852  f5bb				  -			; pokey support is compiled in, so try to detect it...
   4853  f5bb				  -	      jsr	detectpokeylocation
   4854  f5bb					      endif
   4855  f5bb
   4856  f5bb		       a9 01		      lda	#1	; default for port 0 and 1 is a regular joystick
   4857  f5bd		       8d b7 01 	      sta	port0control
   4858  f5c0		       8d b8 01 	      sta	port1control
   4859  f5c3
   4860  f5c3							;Setup port A to read mode
   4861  f5c3							;lda #$00
   4862  f5c3							;sta SWCHA
   4863  f5c3							;sta CTLSWA
   4864  f5c3
   4865  f5c3				  -	      ifconst	HSSUPPORT
   4866  f5c3				  -	      ifconst	bankswitchmode
   4867  f5c3				  -	      ifconst	included.hiscore.asm.bank
   4868  f5c3				  -	      ifconst	MCPDEVCART
   4869  f5c3				  -	      lda	#($18 | included.hiscore.asm.bank)
   4870  f5c3				  -	      ifconst	dumpbankswitch
   4871  f5c3				  -	      sta	dumpbankswitch
   4872  f5c3				  -	      endif
   4873  f5c3				  -	      sta	$3000
   4874  f5c3				  -	      else
   4875  f5c3				  -	      lda	#(included.hiscore.asm.bank)
   4876  f5c3				  -	      ifconst	dumpbankswitch
   4877  f5c3				  -	      sta	dumpbankswitch
   4878  f5c3				  -	      endif
   4879  f5c3				  -	      sta	$8000
   4880  f5c3				  -	      endif
   4881  f5c3				  -	      endif		; included.hiscore.asm.bank
   4882  f5c3				  -	      endif		; bankswitchmode
   4883  f5c3				  -			; try to detect HSC
   4884  f5c3				  -	      jsr	detecthsc
   4885  f5c3				  -	      and	#1
   4886  f5c3				  -	      sta	hsdevice
   4887  f5c3				  -skipHSCdetect
   4888  f5c3				  -			; try to detect AtariVox eeprom
   4889  f5c3				  -	      jsr	detectatarivoxeeprom
   4890  f5c3				  -	      and	#2
   4891  f5c3				  -	      ora	hsdevice
   4892  f5c3				  -	      cmp	#3
   4893  f5c3				  -	      bne	storeAinhsdevice
   4894  f5c3				  -			; For now, we tie break by giving HSC priority over AtariVox.
   4895  f5c3				  -			; Later we should check each device's priority byte if set, instead, 
   4896  f5c3				  -	      lda	#2
   4897  f5c3				  -storeAinhsdevice
   4898  f5c3				  -	      sta	hsdevice
   4899  f5c3				  -	      lda	#$ff
   4900  f5c3				  -	      sta	hsdifficulty
   4901  f5c3				  -	      sta	hsgameslot
   4902  f5c3				  -	      sta	hsnewscoreline
   4903  f5c3					      endif		; HSSUPPORT
   4904  f5c3
   4905  f5c3				  -	      ifconst	AVOXVOICE
   4906  f5c3				  -	      jsr	silenceavoxvoice
   4907  f5c3					      endif
   4908  f5c3
   4909  f5c3				  -	      ifconst	RMT
   4910  f5c3				  -	      ifconst	RMTVOLUME
   4911  f5c3				  -	      lda	#$F0	; default to full RMT volume
   4912  f5c3				  -	      sta	rmtvolume
   4913  f5c3				  -	      ifconst	TIAVOLUME
   4914  f5c3				  -	      sta	tiavolume
   4915  f5c3				  -	      endif		; TIAVOLUME
   4916  f5c3				  -	      endif		; RMTVOLUME
   4917  f5c3					      else		; !RMT
   4918  f5c3				  -	      ifconst	TIAVOLUME
   4919  f5c3				  -	      lda	#$F0	; default to full TIA volume
   4920  f5c3				  -	      sta	tiavolume
   4921  f5c3					      endif		; TIAVOLUME
   4922  f5c3					      endif		; RMT
   4923  f5c3
   4924  f5c3				  -	      ifconst	bankswitchmode
   4925  f5c3				  -			; we need to switch to the first bank as a default. this needs to
   4926  f5c3				  -			; happen before DMA, in case there's a topscreenroutine in bank 0
   4927  f5c3				  -	      ifconst	MCPDEVCART
   4928  f5c3				  -	      lda	#$18	; xxx11nnn - switch to bank 0
   4929  f5c3				  -	      ifconst	dumpbankswitch
   4930  f5c3				  -	      sta	dumpbankswitch
   4931  f5c3				  -	      endif
   4932  f5c3				  -	      sta	$3000
   4933  f5c3				  -	      else
   4934  f5c3				  -	      lda	#0
   4935  f5c3				  -	      ifconst	dumpbankswitch
   4936  f5c3				  -	      sta	dumpbankswitch
   4937  f5c3				  -	      endif
   4938  f5c3				  -	      sta	$8000
   4939  f5c3				  -	      endif
   4940  f5c3					      endif
   4941  f5c3
   4942  f5c3							; CTRL 76543210
   4943  f5c3							; 7 colorburst kill
   4944  f5c3							; 6,5 dma ctrl 2=normal DMA, 3=no DMA
   4945  f5c3							; 4 character width 1=2 byte chars, 0=1 byte chars
   4946  f5c3							; 3 border control 0=background color border, 1=black border
   4947  f5c3							; 2 kangaroo mode 0=transparency, 1=kangaroo
   4948  f5c3							; 1,0 read mode 0=160x2/160x4 1=N/A 2=320B/320D 3=320A/320C
   4949  f5c3
   4950  f5c3				  -	      ifconst	DOUBLEWIDE
   4951  f5c3				  -	      lda	#%01010000	;Enable DMA, mode=160x2/160x4, 2x character width
   4952  f5c3					      else
   4953  f5c3		       a9 40		      lda	#%01000000	;Enable DMA, mode=160x2/160x4
   4954  f5c5					      endif
   4955  f5c5
   4956  f5c5		       20 1d f5 	      jsr	waitforvblankstart	; give the some vblank time to minimally update the display
   4957  f5c8
   4958  f5c8		       85 3c		      sta	CTRL
   4959  f5ca		       8d 07 21 	      sta	sCTRL
   4960  f5cd
   4961  f5cd		       20 7f f4 	      jsr	vblankresync
   4962  f5d0
   4963  f5d0		       a2 01		      ldx	#1
   4964  f5d2		       20 49 f5 	      jsr	settwobuttonmode
   4965  f5d5		       a2 00		      ldx	#0
   4966  f5d7		       20 49 f5 	      jsr	settwobuttonmode
   4967  f5da
   4968  f5da					      ifnconst	.altgamestart
   4969  f5da		       4c 00 80 	      jmp	game
   4970  f5dd				  -	      else
   4971  f5dd				  -	      jmp	.altgamestart
   4972  f5dd					      endif
   4973  f5dd
   4974  f5dd							; Provided under the CC0 license. See the included LICENSE.txt for details.
   4975  f5dd
   4976  f5dd							;************** Setup DLL entries
   4977  f5dd
   4978  f5dd							; setup some working definitions, to avoid ifnconst mess elsewhere...
   4979  f5dd					      ifnconst	SCREENHEIGHT
   4980  f5dd		       00 c0	   WSCREENHEIGHT =	192
   4981  f5dd				  -	      else
   4982  f5dd				  -WSCREENHEIGHT =	SCREENHEIGHT
   4983  f5dd					      endif
   4984  f5dd
   4985  f5dd				  -	      ifnconst	ZONEHEIGHT
   4986  f5dd				  -WZONEHEIGHT =	16
   4987  f5dd					      else
   4988  f5dd		       00 10	   WZONEHEIGHT =	ZONEHEIGHT
   4989  f5dd					      endif
   4990  f5dd
   4991  f5dd					      ifnconst	ZONECOUNT
   4992  f5dd		       00 0c	   WZONECOUNT =	(WSCREENHEIGHT/WZONEHEIGHT)
   4993  f5dd				  -	      else
   4994  f5dd				  -WZONECOUNT =	ZONECOUNT
   4995  f5dd					      endif
   4996  f5dd
   4997  f5dd							; top of the frame, non-visible lines. this is based on NTSC,
   4998  f5dd							; but we add in extra NV lines at the end of the display to ensure
   4999  f5dd							; our PAL friends can play the game without it crashing.
   5000  f5dd		       00 19	   NVLINES    =	((243-WSCREENHEIGHT)/2)
   5001  f5dd
   5002  f5dd					      ifnconst	DLMEMSTART
   5003  f5dd					      ifnconst	DOUBLEBUFFER
   5004  f5dd		       18 80	   WDLMEMSTART =	$1880
   5005  f5dd				  -	      else
   5006  f5dd				  -WDLMEMSTART =	$18E0
   5007  f5dd					      endif		; DOUBLEBUFFER
   5008  f5dd				  -	      else
   5009  f5dd				  -WDLMEMSTART =	DLMEMSTART
   5010  f5dd					      endif
   5011  f5dd
   5012  f5dd					      ifnconst	DLMEMEND
   5013  f5dd				  -	      ifconst	EXTRADLMEMORY
   5014  f5dd				  -WDLMEMEND  =	$23FF
   5015  f5dd					      else
   5016  f5dd		       1f ff	   WDLMEMEND  =	$1FFF
   5017  f5dd					      endif
   5018  f5dd				  -	      else
   5019  f5dd				  -WDLMEMEND  =	DLMEMEND
   5020  f5dd					      endif
   5021  f5dd
   5022  f5dd
   5023  f5dd		       07 80	   WMEMSIZE   =	(WDLMEMEND-WDLMEMSTART+1)
   5024  f5dd
   5025  f5dd					      ifnconst	DOUBLEBUFFER
   5026  f5dd		       00 9b	   DLLASTOBJ  =	((((WMEMSIZE/WZONECOUNT)-2)/5)*5)	; -2 to always ensure we have 1x double-byte terminator
   5027  f5dd				  -	      else
   5028  f5dd				  -DLLASTOBJ  =	((((WMEMSIZE/WZONECOUNT)-4)/10)*5)	; -4 to always ensure we have 2x double-byte terminators
   5029  f5dd					      endif
   5030  f5dd
   5031  f5dd		       00 9d	   TDOUBLEBUFFEROFFSET =	(DLLASTOBJ+2)	; offset between DL buffers. ie. half the real DL
   5032  f5dd				  -	      if	TDOUBLEBUFFEROFFSET > 255
   5033  f5dd				  -DOUBLEBUFFEROFFSET =	255
   5034  f5dd					      else
   5035  f5dd		       00 9d	   DOUBLEBUFFEROFFSET =	(DLLASTOBJ+2)
   5036  f5dd					      endif
   5037  f5dd
   5038  f5dd				  -	      ifconst	EXTRADLMEMORY
   5039  f5dd				  -SECONDDLHALFSTART SET	$2300
   5040  f5dd					      endif
   5041  f5dd
   5042  f5dd				   DLPOINTH
   5043  f5dd				   DLINDEX    SET	0
   5044  f5dd					      REPEAT	WZONECOUNT
   5045  f5dd				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5046  f5dd				  -	      ifconst	EXTRADLMEMORY
   5047  f5dd				  -	      if	TMPMEMADDRESS > $1FFF
   5048  f5dd				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5049  f5dd				  -	      else
   5050  f5dd				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5051  f5dd				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5052  f5dd				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   5053  f5dd				  -	      endif
   5054  f5dd				  -	      endif		; TMPMEMADDRESS > $1FFF
   5055  f5dd					      endif		; EXTRADLMEMORY
   5056  f5dd							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   5057  f5dd		       18		      .byte.b	>TMPMEMADDRESS
   5058  f5dd				   DLINDEX    SET	DLINDEX + 1
   5044  f5dd					      REPEND
   5045  f5dd				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5046  f5de				  -	      ifconst	EXTRADLMEMORY
   5047  f5de				  -	      if	TMPMEMADDRESS > $1FFF
   5048  f5de				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5049  f5de				  -	      else
   5050  f5de				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5051  f5de				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5052  f5de				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   5053  f5de				  -	      endif
   5054  f5de				  -	      endif		; TMPMEMADDRESS > $1FFF
   5055  f5de					      endif		; EXTRADLMEMORY
   5056  f5de							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   5057  f5de		       19		      .byte.b	>TMPMEMADDRESS
   5058  f5de				   DLINDEX    SET	DLINDEX + 1
   5044  f5de					      REPEND
   5045  f5de				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5046  f5df				  -	      ifconst	EXTRADLMEMORY
   5047  f5df				  -	      if	TMPMEMADDRESS > $1FFF
   5048  f5df				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5049  f5df				  -	      else
   5050  f5df				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5051  f5df				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5052  f5df				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   5053  f5df				  -	      endif
   5054  f5df				  -	      endif		; TMPMEMADDRESS > $1FFF
   5055  f5df					      endif		; EXTRADLMEMORY
   5056  f5df							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   5057  f5df		       19		      .byte.b	>TMPMEMADDRESS
   5058  f5df				   DLINDEX    SET	DLINDEX + 1
   5044  f5df					      REPEND
   5045  f5df				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5046  f5e0				  -	      ifconst	EXTRADLMEMORY
   5047  f5e0				  -	      if	TMPMEMADDRESS > $1FFF
   5048  f5e0				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5049  f5e0				  -	      else
   5050  f5e0				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5051  f5e0				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5052  f5e0				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   5053  f5e0				  -	      endif
   5054  f5e0				  -	      endif		; TMPMEMADDRESS > $1FFF
   5055  f5e0					      endif		; EXTRADLMEMORY
   5056  f5e0							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   5057  f5e0		       1a		      .byte.b	>TMPMEMADDRESS
   5058  f5e0				   DLINDEX    SET	DLINDEX + 1
   5044  f5e0					      REPEND
   5045  f5e0				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5046  f5e1				  -	      ifconst	EXTRADLMEMORY
   5047  f5e1				  -	      if	TMPMEMADDRESS > $1FFF
   5048  f5e1				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5049  f5e1				  -	      else
   5050  f5e1				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5051  f5e1				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5052  f5e1				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   5053  f5e1				  -	      endif
   5054  f5e1				  -	      endif		; TMPMEMADDRESS > $1FFF
   5055  f5e1					      endif		; EXTRADLMEMORY
   5056  f5e1							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   5057  f5e1		       1b		      .byte.b	>TMPMEMADDRESS
   5058  f5e1				   DLINDEX    SET	DLINDEX + 1
   5044  f5e1					      REPEND
   5045  f5e1				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5046  f5e2				  -	      ifconst	EXTRADLMEMORY
   5047  f5e2				  -	      if	TMPMEMADDRESS > $1FFF
   5048  f5e2				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5049  f5e2				  -	      else
   5050  f5e2				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5051  f5e2				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5052  f5e2				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   5053  f5e2				  -	      endif
   5054  f5e2				  -	      endif		; TMPMEMADDRESS > $1FFF
   5055  f5e2					      endif		; EXTRADLMEMORY
   5056  f5e2							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   5057  f5e2		       1b		      .byte.b	>TMPMEMADDRESS
   5058  f5e2				   DLINDEX    SET	DLINDEX + 1
   5044  f5e2					      REPEND
   5045  f5e2				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5046  f5e3				  -	      ifconst	EXTRADLMEMORY
   5047  f5e3				  -	      if	TMPMEMADDRESS > $1FFF
   5048  f5e3				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5049  f5e3				  -	      else
   5050  f5e3				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5051  f5e3				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5052  f5e3				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   5053  f5e3				  -	      endif
   5054  f5e3				  -	      endif		; TMPMEMADDRESS > $1FFF
   5055  f5e3					      endif		; EXTRADLMEMORY
   5056  f5e3							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   5057  f5e3		       1c		      .byte.b	>TMPMEMADDRESS
   5058  f5e3				   DLINDEX    SET	DLINDEX + 1
   5044  f5e3					      REPEND
   5045  f5e3				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5046  f5e4				  -	      ifconst	EXTRADLMEMORY
   5047  f5e4				  -	      if	TMPMEMADDRESS > $1FFF
   5048  f5e4				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5049  f5e4				  -	      else
   5050  f5e4				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5051  f5e4				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5052  f5e4				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   5053  f5e4				  -	      endif
   5054  f5e4				  -	      endif		; TMPMEMADDRESS > $1FFF
   5055  f5e4					      endif		; EXTRADLMEMORY
   5056  f5e4							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   5057  f5e4		       1c		      .byte.b	>TMPMEMADDRESS
   5058  f5e4				   DLINDEX    SET	DLINDEX + 1
   5044  f5e4					      REPEND
   5045  f5e4				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5046  f5e5				  -	      ifconst	EXTRADLMEMORY
   5047  f5e5				  -	      if	TMPMEMADDRESS > $1FFF
   5048  f5e5				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5049  f5e5				  -	      else
   5050  f5e5				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5051  f5e5				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5052  f5e5				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   5053  f5e5				  -	      endif
   5054  f5e5				  -	      endif		; TMPMEMADDRESS > $1FFF
   5055  f5e5					      endif		; EXTRADLMEMORY
   5056  f5e5							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   5057  f5e5		       1d		      .byte.b	>TMPMEMADDRESS
   5058  f5e5				   DLINDEX    SET	DLINDEX + 1
   5044  f5e5					      REPEND
   5045  f5e5				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5046  f5e6				  -	      ifconst	EXTRADLMEMORY
   5047  f5e6				  -	      if	TMPMEMADDRESS > $1FFF
   5048  f5e6				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5049  f5e6				  -	      else
   5050  f5e6				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5051  f5e6				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5052  f5e6				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   5053  f5e6				  -	      endif
   5054  f5e6				  -	      endif		; TMPMEMADDRESS > $1FFF
   5055  f5e6					      endif		; EXTRADLMEMORY
   5056  f5e6							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   5057  f5e6		       1e		      .byte.b	>TMPMEMADDRESS
   5058  f5e6				   DLINDEX    SET	DLINDEX + 1
   5044  f5e6					      REPEND
   5045  f5e6				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5046  f5e7				  -	      ifconst	EXTRADLMEMORY
   5047  f5e7				  -	      if	TMPMEMADDRESS > $1FFF
   5048  f5e7				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5049  f5e7				  -	      else
   5050  f5e7				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5051  f5e7				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5052  f5e7				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   5053  f5e7				  -	      endif
   5054  f5e7				  -	      endif		; TMPMEMADDRESS > $1FFF
   5055  f5e7					      endif		; EXTRADLMEMORY
   5056  f5e7							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   5057  f5e7		       1e		      .byte.b	>TMPMEMADDRESS
   5058  f5e7				   DLINDEX    SET	DLINDEX + 1
   5044  f5e7					      REPEND
   5045  f5e7				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5046  f5e8				  -	      ifconst	EXTRADLMEMORY
   5047  f5e8				  -	      if	TMPMEMADDRESS > $1FFF
   5048  f5e8				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5049  f5e8				  -	      else
   5050  f5e8				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5051  f5e8				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5052  f5e8				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   5053  f5e8				  -	      endif
   5054  f5e8				  -	      endif		; TMPMEMADDRESS > $1FFF
   5055  f5e8					      endif		; EXTRADLMEMORY
   5056  f5e8							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   5057  f5e8		       1f		      .byte.b	>TMPMEMADDRESS
   5058  f5e8				   DLINDEX    SET	DLINDEX + 1
   5059  f5e9					      REPEND
   5060  f5e9
   5061  f5e9				  -	      ifconst	EXTRADLMEMORY
   5062  f5e9				  -	      echo	"   ",[SECONDDLHALFSTART],"to",[$27FF],"was claimed as extra DL memory."
   5063  f5e9					      endif
   5064  f5e9
   5065  f5e9
   5066  f5e9				   DLPOINTL
   5067  f5e9				   DLINDEX    SET	0
   5068  f5e9					      REPEAT	WZONECOUNT
   5069  f5e9				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5070  f5e9				  -	      ifconst	EXTRADLMEMORY
   5071  f5e9				  -	      if	TMPMEMADDRESS > $1FFF
   5072  f5e9				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5073  f5e9				  -	      else
   5074  f5e9				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5075  f5e9				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5076  f5e9				  -	      endif
   5077  f5e9				  -	      endif		; TMPMEMADDRESS > $1FFF
   5078  f5e9					      endif		; EXTRADLMEMORY
   5079  f5e9		       80		      .byte.b	<TMPMEMADDRESS
   5080  f5e9				   DLINDEX    SET	DLINDEX + 1
   5068  f5e9					      REPEND
   5069  f5e9				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5070  f5ea				  -	      ifconst	EXTRADLMEMORY
   5071  f5ea				  -	      if	TMPMEMADDRESS > $1FFF
   5072  f5ea				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5073  f5ea				  -	      else
   5074  f5ea				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5075  f5ea				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5076  f5ea				  -	      endif
   5077  f5ea				  -	      endif		; TMPMEMADDRESS > $1FFF
   5078  f5ea					      endif		; EXTRADLMEMORY
   5079  f5ea		       20		      .byte.b	<TMPMEMADDRESS
   5080  f5ea				   DLINDEX    SET	DLINDEX + 1
   5068  f5ea					      REPEND
   5069  f5ea				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5070  f5eb				  -	      ifconst	EXTRADLMEMORY
   5071  f5eb				  -	      if	TMPMEMADDRESS > $1FFF
   5072  f5eb				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5073  f5eb				  -	      else
   5074  f5eb				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5075  f5eb				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5076  f5eb				  -	      endif
   5077  f5eb				  -	      endif		; TMPMEMADDRESS > $1FFF
   5078  f5eb					      endif		; EXTRADLMEMORY
   5079  f5eb		       c0		      .byte.b	<TMPMEMADDRESS
   5080  f5eb				   DLINDEX    SET	DLINDEX + 1
   5068  f5eb					      REPEND
   5069  f5eb				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5070  f5ec				  -	      ifconst	EXTRADLMEMORY
   5071  f5ec				  -	      if	TMPMEMADDRESS > $1FFF
   5072  f5ec				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5073  f5ec				  -	      else
   5074  f5ec				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5075  f5ec				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5076  f5ec				  -	      endif
   5077  f5ec				  -	      endif		; TMPMEMADDRESS > $1FFF
   5078  f5ec					      endif		; EXTRADLMEMORY
   5079  f5ec		       60		      .byte.b	<TMPMEMADDRESS
   5080  f5ec				   DLINDEX    SET	DLINDEX + 1
   5068  f5ec					      REPEND
   5069  f5ec				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5070  f5ed				  -	      ifconst	EXTRADLMEMORY
   5071  f5ed				  -	      if	TMPMEMADDRESS > $1FFF
   5072  f5ed				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5073  f5ed				  -	      else
   5074  f5ed				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5075  f5ed				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5076  f5ed				  -	      endif
   5077  f5ed				  -	      endif		; TMPMEMADDRESS > $1FFF
   5078  f5ed					      endif		; EXTRADLMEMORY
   5079  f5ed		       00		      .byte.b	<TMPMEMADDRESS
   5080  f5ed				   DLINDEX    SET	DLINDEX + 1
   5068  f5ed					      REPEND
   5069  f5ed				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5070  f5ee				  -	      ifconst	EXTRADLMEMORY
   5071  f5ee				  -	      if	TMPMEMADDRESS > $1FFF
   5072  f5ee				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5073  f5ee				  -	      else
   5074  f5ee				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5075  f5ee				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5076  f5ee				  -	      endif
   5077  f5ee				  -	      endif		; TMPMEMADDRESS > $1FFF
   5078  f5ee					      endif		; EXTRADLMEMORY
   5079  f5ee		       a0		      .byte.b	<TMPMEMADDRESS
   5080  f5ee				   DLINDEX    SET	DLINDEX + 1
   5068  f5ee					      REPEND
   5069  f5ee				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5070  f5ef				  -	      ifconst	EXTRADLMEMORY
   5071  f5ef				  -	      if	TMPMEMADDRESS > $1FFF
   5072  f5ef				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5073  f5ef				  -	      else
   5074  f5ef				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5075  f5ef				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5076  f5ef				  -	      endif
   5077  f5ef				  -	      endif		; TMPMEMADDRESS > $1FFF
   5078  f5ef					      endif		; EXTRADLMEMORY
   5079  f5ef		       40		      .byte.b	<TMPMEMADDRESS
   5080  f5ef				   DLINDEX    SET	DLINDEX + 1
   5068  f5ef					      REPEND
   5069  f5ef				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5070  f5f0				  -	      ifconst	EXTRADLMEMORY
   5071  f5f0				  -	      if	TMPMEMADDRESS > $1FFF
   5072  f5f0				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5073  f5f0				  -	      else
   5074  f5f0				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5075  f5f0				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5076  f5f0				  -	      endif
   5077  f5f0				  -	      endif		; TMPMEMADDRESS > $1FFF
   5078  f5f0					      endif		; EXTRADLMEMORY
   5079  f5f0		       e0		      .byte.b	<TMPMEMADDRESS
   5080  f5f0				   DLINDEX    SET	DLINDEX + 1
   5068  f5f0					      REPEND
   5069  f5f0				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5070  f5f1				  -	      ifconst	EXTRADLMEMORY
   5071  f5f1				  -	      if	TMPMEMADDRESS > $1FFF
   5072  f5f1				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5073  f5f1				  -	      else
   5074  f5f1				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5075  f5f1				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5076  f5f1				  -	      endif
   5077  f5f1				  -	      endif		; TMPMEMADDRESS > $1FFF
   5078  f5f1					      endif		; EXTRADLMEMORY
   5079  f5f1		       80		      .byte.b	<TMPMEMADDRESS
   5080  f5f1				   DLINDEX    SET	DLINDEX + 1
   5068  f5f1					      REPEND
   5069  f5f1				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5070  f5f2				  -	      ifconst	EXTRADLMEMORY
   5071  f5f2				  -	      if	TMPMEMADDRESS > $1FFF
   5072  f5f2				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5073  f5f2				  -	      else
   5074  f5f2				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5075  f5f2				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5076  f5f2				  -	      endif
   5077  f5f2				  -	      endif		; TMPMEMADDRESS > $1FFF
   5078  f5f2					      endif		; EXTRADLMEMORY
   5079  f5f2		       20		      .byte.b	<TMPMEMADDRESS
   5080  f5f2				   DLINDEX    SET	DLINDEX + 1
   5068  f5f2					      REPEND
   5069  f5f2				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5070  f5f3				  -	      ifconst	EXTRADLMEMORY
   5071  f5f3				  -	      if	TMPMEMADDRESS > $1FFF
   5072  f5f3				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5073  f5f3				  -	      else
   5074  f5f3				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5075  f5f3				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5076  f5f3				  -	      endif
   5077  f5f3				  -	      endif		; TMPMEMADDRESS > $1FFF
   5078  f5f3					      endif		; EXTRADLMEMORY
   5079  f5f3		       c0		      .byte.b	<TMPMEMADDRESS
   5080  f5f3				   DLINDEX    SET	DLINDEX + 1
   5068  f5f3					      REPEND
   5069  f5f3				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5070  f5f4				  -	      ifconst	EXTRADLMEMORY
   5071  f5f4				  -	      if	TMPMEMADDRESS > $1FFF
   5072  f5f4				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5073  f5f4				  -	      else
   5074  f5f4				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5075  f5f4				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5076  f5f4				  -	      endif
   5077  f5f4				  -	      endif		; TMPMEMADDRESS > $1FFF
   5078  f5f4					      endif		; EXTRADLMEMORY
   5079  f5f4		       60		      .byte.b	<TMPMEMADDRESS
   5080  f5f4				   DLINDEX    SET	DLINDEX + 1
   5081  f5f5					      REPEND
   5082  f5f5
   5083  f5f5
   5084  f5f5				   DLINDEX    SET	0
   5085  f5f5					      REPEAT	WZONECOUNT
   5086  f5f5				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5087  f5f5				  -	      ifconst	EXTRADLMEMORY
   5088  f5f5				  -	      if	TMPMEMADDRESS > $1FFF
   5089  f5f5				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5090  f5f5				  -	      else
   5091  f5f5				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5092  f5f5				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5093  f5f5				  -	      endif
   5094  f5f5				  -	      endif		; TMPMEMADDRESS > $1FFF
   5095  f5f5					      endif		; EXTRADLMEMORY
   5096  f5f5
   5097  f5f5		       18 80	   ZONE0ADDRESS =	TMPMEMADDRESS
   5098  f5f5
   5099  f5f5				   DLINDEX    SET	DLINDEX + 1
   5085  f5f5					      REPEND
   5086  f5f5				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5087  f5f5				  -	      ifconst	EXTRADLMEMORY
   5088  f5f5				  -	      if	TMPMEMADDRESS > $1FFF
   5089  f5f5				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5090  f5f5				  -	      else
   5091  f5f5				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5092  f5f5				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5093  f5f5				  -	      endif
   5094  f5f5				  -	      endif		; TMPMEMADDRESS > $1FFF
   5095  f5f5					      endif		; EXTRADLMEMORY
   5096  f5f5
   5097  f5f5		       19 20	   ZONE1ADDRESS =	TMPMEMADDRESS
   5098  f5f5
   5099  f5f5				   DLINDEX    SET	DLINDEX + 1
   5085  f5f5					      REPEND
   5086  f5f5				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5087  f5f5				  -	      ifconst	EXTRADLMEMORY
   5088  f5f5				  -	      if	TMPMEMADDRESS > $1FFF
   5089  f5f5				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5090  f5f5				  -	      else
   5091  f5f5				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5092  f5f5				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5093  f5f5				  -	      endif
   5094  f5f5				  -	      endif		; TMPMEMADDRESS > $1FFF
   5095  f5f5					      endif		; EXTRADLMEMORY
   5096  f5f5
   5097  f5f5		       19 c0	   ZONE2ADDRESS =	TMPMEMADDRESS
   5098  f5f5
   5099  f5f5				   DLINDEX    SET	DLINDEX + 1
   5085  f5f5					      REPEND
   5086  f5f5				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5087  f5f5				  -	      ifconst	EXTRADLMEMORY
   5088  f5f5				  -	      if	TMPMEMADDRESS > $1FFF
   5089  f5f5				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5090  f5f5				  -	      else
   5091  f5f5				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5092  f5f5				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5093  f5f5				  -	      endif
   5094  f5f5				  -	      endif		; TMPMEMADDRESS > $1FFF
   5095  f5f5					      endif		; EXTRADLMEMORY
   5096  f5f5
   5097  f5f5		       1a 60	   ZONE3ADDRESS =	TMPMEMADDRESS
   5098  f5f5
   5099  f5f5				   DLINDEX    SET	DLINDEX + 1
   5085  f5f5					      REPEND
   5086  f5f5				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5087  f5f5				  -	      ifconst	EXTRADLMEMORY
   5088  f5f5				  -	      if	TMPMEMADDRESS > $1FFF
   5089  f5f5				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5090  f5f5				  -	      else
   5091  f5f5				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5092  f5f5				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5093  f5f5				  -	      endif
   5094  f5f5				  -	      endif		; TMPMEMADDRESS > $1FFF
   5095  f5f5					      endif		; EXTRADLMEMORY
   5096  f5f5
   5097  f5f5		       1b 00	   ZONE4ADDRESS =	TMPMEMADDRESS
   5098  f5f5
   5099  f5f5				   DLINDEX    SET	DLINDEX + 1
   5085  f5f5					      REPEND
   5086  f5f5				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5087  f5f5				  -	      ifconst	EXTRADLMEMORY
   5088  f5f5				  -	      if	TMPMEMADDRESS > $1FFF
   5089  f5f5				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5090  f5f5				  -	      else
   5091  f5f5				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5092  f5f5				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5093  f5f5				  -	      endif
   5094  f5f5				  -	      endif		; TMPMEMADDRESS > $1FFF
   5095  f5f5					      endif		; EXTRADLMEMORY
   5096  f5f5
   5097  f5f5		       1b a0	   ZONE5ADDRESS =	TMPMEMADDRESS
   5098  f5f5
   5099  f5f5				   DLINDEX    SET	DLINDEX + 1
   5085  f5f5					      REPEND
   5086  f5f5				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5087  f5f5				  -	      ifconst	EXTRADLMEMORY
   5088  f5f5				  -	      if	TMPMEMADDRESS > $1FFF
   5089  f5f5				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5090  f5f5				  -	      else
   5091  f5f5				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5092  f5f5				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5093  f5f5				  -	      endif
   5094  f5f5				  -	      endif		; TMPMEMADDRESS > $1FFF
   5095  f5f5					      endif		; EXTRADLMEMORY
   5096  f5f5
   5097  f5f5		       1c 40	   ZONE6ADDRESS =	TMPMEMADDRESS
   5098  f5f5
   5099  f5f5				   DLINDEX    SET	DLINDEX + 1
   5085  f5f5					      REPEND
   5086  f5f5				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5087  f5f5				  -	      ifconst	EXTRADLMEMORY
   5088  f5f5				  -	      if	TMPMEMADDRESS > $1FFF
   5089  f5f5				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5090  f5f5				  -	      else
   5091  f5f5				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5092  f5f5				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5093  f5f5				  -	      endif
   5094  f5f5				  -	      endif		; TMPMEMADDRESS > $1FFF
   5095  f5f5					      endif		; EXTRADLMEMORY
   5096  f5f5
   5097  f5f5		       1c e0	   ZONE7ADDRESS =	TMPMEMADDRESS
   5098  f5f5
   5099  f5f5				   DLINDEX    SET	DLINDEX + 1
   5085  f5f5					      REPEND
   5086  f5f5				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5087  f5f5				  -	      ifconst	EXTRADLMEMORY
   5088  f5f5				  -	      if	TMPMEMADDRESS > $1FFF
   5089  f5f5				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5090  f5f5				  -	      else
   5091  f5f5				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5092  f5f5				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5093  f5f5				  -	      endif
   5094  f5f5				  -	      endif		; TMPMEMADDRESS > $1FFF
   5095  f5f5					      endif		; EXTRADLMEMORY
   5096  f5f5
   5097  f5f5		       1d 80	   ZONE8ADDRESS =	TMPMEMADDRESS
   5098  f5f5
   5099  f5f5				   DLINDEX    SET	DLINDEX + 1
   5085  f5f5					      REPEND
   5086  f5f5				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5087  f5f5				  -	      ifconst	EXTRADLMEMORY
   5088  f5f5				  -	      if	TMPMEMADDRESS > $1FFF
   5089  f5f5				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5090  f5f5				  -	      else
   5091  f5f5				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5092  f5f5				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5093  f5f5				  -	      endif
   5094  f5f5				  -	      endif		; TMPMEMADDRESS > $1FFF
   5095  f5f5					      endif		; EXTRADLMEMORY
   5096  f5f5
   5097  f5f5		       1e 20	   ZONE9ADDRESS =	TMPMEMADDRESS
   5098  f5f5
   5099  f5f5				   DLINDEX    SET	DLINDEX + 1
   5085  f5f5					      REPEND
   5086  f5f5				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5087  f5f5				  -	      ifconst	EXTRADLMEMORY
   5088  f5f5				  -	      if	TMPMEMADDRESS > $1FFF
   5089  f5f5				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5090  f5f5				  -	      else
   5091  f5f5				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5092  f5f5				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5093  f5f5				  -	      endif
   5094  f5f5				  -	      endif		; TMPMEMADDRESS > $1FFF
   5095  f5f5					      endif		; EXTRADLMEMORY
   5096  f5f5
   5097  f5f5		       1e c0	   ZONE10ADDRESS =	TMPMEMADDRESS
   5098  f5f5
   5099  f5f5				   DLINDEX    SET	DLINDEX + 1
   5085  f5f5					      REPEND
   5086  f5f5				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5087  f5f5				  -	      ifconst	EXTRADLMEMORY
   5088  f5f5				  -	      if	TMPMEMADDRESS > $1FFF
   5089  f5f5				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5090  f5f5				  -	      else
   5091  f5f5				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5092  f5f5				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5093  f5f5				  -	      endif
   5094  f5f5				  -	      endif		; TMPMEMADDRESS > $1FFF
   5095  f5f5					      endif		; EXTRADLMEMORY
   5096  f5f5
   5097  f5f5		       1f 60	   ZONE11ADDRESS =	TMPMEMADDRESS
   5098  f5f5
   5099  f5f5				   DLINDEX    SET	DLINDEX + 1
   5100  f5f5					      REPEND
   5101  f5f5
   5102  f5f5
     $1880 to $1fff used as zone memory, allowing 31 display objects per zone.
   5103  f5f5					      echo	"   ",[WDLMEMSTART],"to",[WDLMEMEND],"used as zone memory, allowing",[(DLLASTOBJ/5)]d,"display objects per zone."
   5104  f5f5
   5105  f5f5				   DLHEIGHT
   5106  f5f5					      REPEAT	WZONECOUNT
   5107  f5f5		       0f		      .byte.b	(WZONEHEIGHT-1)
   5106  f5f5					      REPEND
   5107  f5f6		       0f		      .byte.b	(WZONEHEIGHT-1)
   5106  f5f6					      REPEND
   5107  f5f7		       0f		      .byte.b	(WZONEHEIGHT-1)
   5106  f5f7					      REPEND
   5107  f5f8		       0f		      .byte.b	(WZONEHEIGHT-1)
   5106  f5f8					      REPEND
   5107  f5f9		       0f		      .byte.b	(WZONEHEIGHT-1)
   5106  f5f9					      REPEND
   5107  f5fa		       0f		      .byte.b	(WZONEHEIGHT-1)
   5106  f5fa					      REPEND
   5107  f5fb		       0f		      .byte.b	(WZONEHEIGHT-1)
   5106  f5fb					      REPEND
   5107  f5fc		       0f		      .byte.b	(WZONEHEIGHT-1)
   5106  f5fc					      REPEND
   5107  f5fd		       0f		      .byte.b	(WZONEHEIGHT-1)
   5106  f5fd					      REPEND
   5107  f5fe		       0f		      .byte.b	(WZONEHEIGHT-1)
   5106  f5fe					      REPEND
   5107  f5ff		       0f		      .byte.b	(WZONEHEIGHT-1)
   5106  f5ff					      REPEND
   5107  f600		       0f		      .byte.b	(WZONEHEIGHT-1)
   5108  f601					      REPEND
   5109  f601
   5110  f601							; Provided under the CC0 license. See the included LICENSE.txt for details.
   5111  f601
   5112  f601							; a simple guard, than ensures the 7800basic code hasn't
   5113  f601							; spilled into the encryption area...
     2429 bytes left in the 7800basic reserved area.
   5114  f601					      echo	"   ",($FF7E-*)d,"bytes left in the 7800basic reserved area."
   5115  f601				  -	      if	(*>$FF7D)
   5116  f601				  -	      ERR		; abort the assembly
   5117  f601					      endif
   5118  f601							; Provided under the CC0 license. See the included LICENSE.txt for details.
   5119  f601
   5120  f601				  -	      ifconst	DEV
   5121  f601				  -	      ifnconst	ZONEHEIGHT
   5122  f601				  -	      echo	"* the 4k 7800basic area has",[($FF7E - *)]d,"bytes free."
   5123  f601				  -	      else
   5124  f601				  -	      if	ZONEHEIGHT = 8
   5125  f601				  -	      echo	"* the 4k 7800basic area has",[($FF7E - *)]d,"bytes free."
   5126  f601				  -	      else
   5127  f601				  -	      echo	"* the 4k 7800basic area has",[($FF7E - *)]d,"bytes free."
   5128  f601				  -	      endif
   5129  f601				  -	      endif
   5130  f601					      endif
   5131  f601
   5132  f601				  -	      if	START_OF_ROM = .
   5133  f601				  -	      .byte	0
   5134  f601					      endif
   5135  f601				   START_OF_ROM SET	0
   5136  f601
   5137  f601							; FF7E/FF7F contains the 7800basic crc checksum word
   5138  f601
   5139  f601							; FF80 - FFF7 contains the 7800 encryption key 
   5140  f601
   5141  f601					      ifnconst	bankswitchmode
   5142  fff8					      ORG	$FFF8
   5143  fff8				  -	      else
   5144  fff8				  -	      ifconst	ROM128K
   5145  fff8				  -	      ORG	$27FF8
   5146  fff8				  -	      RORG	$FFF8
   5147  fff8				  -	      endif
   5148  fff8				  -	      ifconst	ROM144K
   5149  fff8				  -	      ORG	$27FF8
   5150  fff8				  -	      RORG	$FFF8
   5151  fff8				  -	      endif
   5152  fff8				  -	      ifconst	ROM256K
   5153  fff8				  -	      ORG	$47FF8
   5154  fff8				  -	      RORG	$FFF8
   5155  fff8				  -	      endif
   5156  fff8				  -	      ifconst	ROM272K
   5157  fff8				  -	      ORG	$47FF8
   5158  fff8				  -	      RORG	$FFF8
   5159  fff8				  -	      endif
   5160  fff8				  -	      ifconst	ROM512K
   5161  fff8				  -	      ORG	$87FF8
   5162  fff8				  -	      RORG	$FFF8
   5163  fff8				  -	      endif
   5164  fff8				  -	      ifconst	ROM528K
   5165  fff8				  -	      ORG	$87FF8
   5166  fff8				  -	      RORG	$FFF8
   5167  fff8				  -	      endif
   5168  fff8					      endif
   5169  fff8
   5170  fff8
   5171  fff8		       ff		      .byte.b	$FF	; region verification. $FF=all regions
   5172  fff9		       f7		      .byte.b	$F7	; high nibble:  encryption check from $N000 to $FF7F. we only hash the last 4k for faster boot.
   5173  fffa							; low nibble :  N=7 atari rainbow start, N=3 no atari rainbow
   5174  fffa
   5175  fffa							;Vectors
   5176  fffa		       00 f0		      .word.w	NMI
   5177  fffc		       5f f5		      .word.w	START
   5178  fffe		       5f f0		      .word.w	IRQ
   5179  10000
