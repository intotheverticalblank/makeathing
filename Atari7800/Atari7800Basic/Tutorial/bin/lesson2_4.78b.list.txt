------- FILE c:\Users\steve\OneDrive\Desktop\2018dev\7800\7800basic\projects\demo1\lesson2_4.78b.asm LEVEL 1 PASS 3
      1  10000 ????						; MACRO.H
      2  10000 ????
      3  10000 ????						; Based on the 2600 macro.h file.
      4  10000 ????						; Macros irrelevant to the 7800 have been removed, and the sleep macro 
      5  10000 ????						; has been adapted to give accurate results on the 7800.
      6  10000 ????
      7  10000 ????						; Version 1.0 2019/12/11 (based on the 2600 Version 1.05, 13/NOVEMBER/2003)
      8  10000 ????
      9  10000 ????						; Available macros...
     10  10000 ????						;   SLEEP n		 - sleep for n cycles
     11  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     12  10000 ????
     13  10000 ????						;-------------------------------------------------------------------------------
     14  10000 ????						; SLEEP duration
     15  10000 ????						; Original author: Thomas Jentzsch
     16  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     17  10000 ????						; useful for code where precise timing is required.
     18  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     19  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     20  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     21  10000 ????
     22  10000 ????				       MAC	sleep
     23  10000 ????			    .CYCLES    SET	{1}
     24  10000 ????
     25  10000 ????				       IF	.CYCLES < 2
     26  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     27  10000 ????				       ERR
     28  10000 ????				       ENDIF
     29  10000 ????
     30  10000 ????				       IF	.CYCLES & 1
     31  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     32  10000 ????				       nop	$80
     33  10000 ????				       ELSE
     34  10000 ????				       bit	$80
     35  10000 ????				       ENDIF
     36  10000 ????			    .CYCLES    SET	.CYCLES - 3
     37  10000 ????				       ENDIF
     38  10000 ????
     39  10000 ????				       REPEAT	.CYCLES / 2
     40  10000 ????				       nop
     41  10000 ????				       REPEND
     42  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     43  10000 ????
     44  10000 ????
     45  10000 ????						;-------------------------------------------------------------------------------
     46  10000 ????						; FRACSLEEP duration
     47  10000 ????						; Based on Thomas Jentzsch's SLEEP macro, but takes cycles*2 to allow for
     48  10000 ????						; 7800 based 0.5 cycle sleep.
     49  10000 ????
     50  10000 ????				       MAC	fracsleep
     51  10000 ????			    .CYCLES    SET	{1}
     52  10000 ????
     53  10000 ????				       IF	.CYCLES < 4
     54  10000 ????				       ECHO	"MACRO ERROR: 'FRACSLEEP': Duration must be > 4"
     55  10000 ????				       ERR
     56  10000 ????				       ENDIF
     57  10000 ????				       IF	.CYCLES = 5
     58  10000 ????				       ECHO	"MACRO ERROR: 'FRACSLEEP': Duration = 5 is impossible"
     59  10000 ????				       ERR
     60  10000 ????				       ENDIF
     61  10000 ????
     62  10000 ????				       IF	.CYCLES & 1
     63  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     64  10000 ????				       nop	$0	; TIA access is 3.5 cycles
     65  10000 ????				       ELSE
     66  10000 ????				       bit	$0	; TIA access is 3.5 cycles
     67  10000 ????				       ENDIF
     68  10000 ????			    .CYCLES    SET	.CYCLES - 7
     69  10000 ????				       ENDIF
     70  10000 ????
     71  10000 ????				       IF	.CYCLES & 2
     72  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     73  10000 ????				       nop	$80
     74  10000 ????				       ELSE
     75  10000 ????				       bit	$80
     76  10000 ????				       ENDIF
     77  10000 ????			    .CYCLES    SET	.CYCLES - 6
     78  10000 ????				       ENDIF
     79  10000 ????
     80  10000 ????				       REPEAT	.CYCLES / 4
     81  10000 ????				       nop
     82  10000 ????				       REPEND
     83  10000 ????				       ENDM		;usage: FRACSLEEP n (n>1)
     84  10000 ????
     85  10000 ????
     86  10000 ????						;-------------------------------------------------------
     87  10000 ????						; SET_POINTER
     88  10000 ????						; Original author: Manuel Rotschkar
     89  10000 ????						;
     90  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
     91  10000 ????						;
     92  10000 ????						; Usage: SET_POINTER pointer, address
     93  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
     94  10000 ????						;
     95  10000 ????						; Note: Alters the accumulator, NZ flags
     96  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
     97  10000 ????						; IN 2: absolute address
     98  10000 ????
     99  10000 ????				       MAC	set_pointer
    100  10000 ????			    .POINTER   SET	{1}
    101  10000 ????			    .ADDRESS   SET	{2}
    102  10000 ????
    103  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    104  10000 ????				       STA	.POINTER	; Store in pointer
    105  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    106  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    107  10000 ????
    108  10000 ????				       ENDM
    109  10000 ????
    110  10000 ????						; EOF
    111  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
    112  10000 ????
    113  10000 ????						; 7800MACRO.H
    114  10000 ????
    115  10000 ????						;-------------------------------------------------------
    116  10000 ????						; BOXCOLLISIONCHECK
    117  10000 ????						; author: Mike Saarna
    118  10000 ????						;
    119  10000 ????						; A general bounding box collision check. compares 2 rectangles of differing size
    120  10000 ????						; and shape for overlap. Carry is set for collision detected, clear for none.
    121  10000 ????						; 
    122  10000 ????						; Usage: BOXCOLLISIONCHECK x1var,y1var,w1var,h1var,x2var,y2var,w2var,h2var
    123  10000 ????						;
    124  10000 ????
    125  10000 ????				       MAC	boxcollisioncheck
    126  10000 ????			    .boxx1     SET	{1}
    127  10000 ????			    .boxy1     SET	{2}
    128  10000 ????			    .boxw1     SET	{3}
    129  10000 ????			    .boxh1     SET	{4}
    130  10000 ????			    .boxx2     SET	{5}
    131  10000 ????			    .boxy2     SET	{6}
    132  10000 ????			    .boxw2     SET	{7}
    133  10000 ????			    .boxh2     SET	{8}
    134  10000 ????
    135  10000 ????			    .DoXCollisionCheck
    136  10000 ????				       lda	.boxx1	;3
    137  10000 ????				       cmp	.boxx2	;2
    138  10000 ????				       bcs	.X1isbiggerthanX2	;2/3
    139  10000 ????			    .X2isbiggerthanX1
    140  10000 ????				       adc	#.boxw1	;2
    141  10000 ????				       cmp	.boxx2	;3
    142  10000 ????				       bcs	.DoYCollisionCheck	;3/2
    143  10000 ????				       bcc	.noboxcollision	;3
    144  10000 ????			    .X1isbiggerthanX2
    145  10000 ????				       clc		;2
    146  10000 ????				       sbc	#.boxw2	;2
    147  10000 ????				       cmp	.boxx2	;3
    148  10000 ????				       bcs	.noboxcollision	;3/2
    149  10000 ????			    .DoYCollisionCheck
    150  10000 ????				       lda	.boxy1	;3
    151  10000 ????				       cmp	.boxy2	;3
    152  10000 ????				       bcs	.Y1isbiggerthanY2	;3/2
    153  10000 ????			    .Y2isbiggerthanY1
    154  10000 ????				       adc	#.boxh1	;2
    155  10000 ????				       cmp	.boxy2	;3
    156  10000 ????				       jmp	.checkdone	;6 
    157  10000 ????			    .Y1isbiggerthanY2
    158  10000 ????				       clc		;2
    159  10000 ????				       sbc	#.boxh2	;2
    160  10000 ????				       cmp	.boxy2	;3
    161  10000 ????				       bcs	.noboxcollision	;3/2
    162  10000 ????			    .boxcollision
    163  10000 ????				       sec		;2
    164  10000 ????				       .byte	$24	; hardcoded "BIT [clc opcode]", used to skip over the following clc
    165  10000 ????			    .noboxcollision
    166  10000 ????				       clc		;2
    167  10000 ????			    .checkdone
    168  10000 ????
    169  10000 ????				       ENDM
    170  10000 ????
    171  10000 ????						; QBOXCOLLISIONCHECK
    172  10000 ????						; author: unknown
    173  10000 ????						;
    174  10000 ????						; A general bounding box collision check. compares 2 rectangles of differing size
    175  10000 ????						; and shape for overlap. Carry is CLEAR for collision detected, SET for none.
    176  10000 ????						; 
    177  10000 ????						; Usage: QBOXCOLLISIONCHECK x1var,y1var,w1var,h1var,x2var,y2var,w2var,h2var
    178  10000 ????						;
    179  10000 ????				       MAC	qboxcollisioncheck
    180  10000 ????			    .boxx1     SET	{1}
    181  10000 ????			    .boxy1     SET	{2}
    182  10000 ????			    .boxw1     SET	{3}
    183  10000 ????			    .boxh1     SET	{4}
    184  10000 ????			    .boxx2     SET	{5}
    185  10000 ????			    .boxy2     SET	{6}
    186  10000 ????			    .boxw2     SET	{7}
    187  10000 ????			    .boxh2     SET	{8}
    188  10000 ????
    189  10000 ????				       lda	.boxx2
    190  10000 ????				       clc
    191  10000 ????				       adc	#.boxw2
    192  10000 ????				       sbc	.boxx1
    193  10000 ????				       cmp	#.boxw1+.boxw2-1
    194  10000 ????				       bcs	.qboxcollisiondone
    195  10000 ????						;if we're here, carry is clear
    196  10000 ????				       lda	.boxy2
    197  10000 ????				       adc	#.boxh2
    198  10000 ????				       sbc	.boxy1
    199  10000 ????				       cmp	#.boxh1+.boxh2-1
    200  10000 ????			    .qboxcollisiondone
    201  10000 ????				       rol		; temp for testing - invert carry...
    202  10000 ????				       eor	#1
    203  10000 ????				       ror
    204  10000 ????				       ENDM
    205  10000 ????
    206  10000 ????
    207  10000 ????				       MAC	median3
    208  10000 ????
    209  10000 ????						; A median filter (for smoothing paddle jitter)
    210  10000 ????						;   this macro takes the current paddle value, compares it to historic
    211  10000 ????						;   values, and replaces the current paddle value with the median.
    212  10000 ????						; 
    213  10000 ????						; called as:  MEDIAN3 STORAGE CURRENT
    214  10000 ????						;    where STORAGE points to 3 consecutive bytes of memory. The first 2
    215  10000 ????						;	  must be dedicated to this MEDIAN filter. The last 1 is a temp.
    216  10000 ????						;    where CURRENT is memory holding the new value you wish to compare to
    217  10000 ????						;	  the previous values, and update with the median value.
    218  10000 ????						;
    219  10000 ????						; returns: CURRENT (modified to contain median value)
    220  10000 ????						;
    221  10000 ????						; author: Mike Saarna (aka RevEng)
    222  10000 ????
    223  10000 ????			    .MedianBytes SET	{1}
    224  10000 ????			    .NewValue  SET	{2}
    225  10000 ????
    226  10000 ????				       lda	#0
    227  10000 ????				       ldy	.NewValue
    228  10000 ????				       sty	.MedianBytes+2	; put the new value in the most "recent" slot
    229  10000 ????
    230  10000 ????						; build an index from relative size comparisons between our 3 values.
    231  10000 ????				       cpy	.MedianBytes
    232  10000 ????				       rol
    233  10000 ????				       cpy	.MedianBytes+1
    234  10000 ????				       rol
    235  10000 ????				       ldy	.MedianBytes
    236  10000 ????				       cpy	.MedianBytes+1
    237  10000 ????				       rol
    238  10000 ????				       tay
    239  10000 ????
    240  10000 ????				       ldx	MedianOrderLUT,y	; convert the size-comparison index to an index to the median value
    241  10000 ????				       lda	.MedianBytes,x
    242  10000 ????				       sta	.NewValue	; we replace the new value memory with the median value
    243  10000 ????
    244  10000 ????						; then shift values from "newer" bytes to "older" bytes, leaving the 
    245  10000 ????						; newest byte (.MedianBytes+2) empty for next time.
    246  10000 ????				       lda	.MedianBytes+1
    247  10000 ????				       sta	.MedianBytes
    248  10000 ????				       lda	.MedianBytes+2
    249  10000 ????				       sta	.MedianBytes+1
    250  10000 ????				       ifnconst	MedianOrderLUT
    251  10000 ????				       jmp	MedianOrderLUTend
    252  10000 ????			    MedianOrderLUT		; converts our "comparison index" to an index to the median value
    253  10000 ????				       .byte	0	; 0  B2 < B0 < B1
    254  10000 ????				       .byte	1	; 1  B2 < B1 < B0
    255  10000 ????				       .byte	2	; 2   impossible 
    256  10000 ????				       .byte	2	; 3  B1 < B2 < B0
    257  10000 ????				       .byte	2	; 4  B0 < B2 < B1
    258  10000 ????				       .byte	2	; 5   impossible 
    259  10000 ????				       .byte	1	; 6  B0 < B1 < B2
    260  10000 ????				       .byte	0	; 7  B1 < B0 < B2
    261  10000 ????			    MedianOrderLUTend
    262  10000 ????				       endif
    263  10000 ????				       ENDM
    264  10000 ????
    265  10000 ????				       MAC	plotsprite
    266  10000 ????
    267  10000 ????						; A macro version of the plotsprite command. 
    268  10000 ????						; This trades off rom space for speed.
    269  10000 ????						; It also doesn't check if the visible screen is displayed or not.
    270  10000 ????						; It has no training wheels. It is all rusty sharp edges.
    271  10000 ????
    272  10000 ????			    .GFXLabel  SET	{1}
    273  10000 ????			    .Palette   SET	{2}	; constant
    274  10000 ????			    .SpriteX   SET	{3}	; variable
    275  10000 ????			    .SpriteY   SET	{4}	; variable
    276  10000 ????			    .ByteOffset SET	{5}	; variable 
    277  10000 ????
    278  10000 ????				       lda	.SpriteY
    279  10000 ????				       lsr
    280  10000 ????				       lsr
    281  10000 ????				       asr	#%11111110	; ensure carry is clear
    282  10000 ????				       if	WZONEHEIGHT = 16
    283  10000 ????				       asr	#%11111110	; ensure carry is clear
    284  10000 ????				       endif
    285  10000 ????
    286  10000 ????				       tax
    287  10000 ????
    288  10000 ????				       lda	DLPOINTL,x	; setup DL pointer for this zone
    289  10000 ????				       sta	dlpnt
    290  10000 ????				       lda	DLPOINTH,x	; setup DL pointer for this zone
    291  10000 ????				       sta	dlpnt+1
    292  10000 ????
    293  10000 ????				       ldy	dlend,x	; find the next new object position in this zone
    294  10000 ????
    295  10000 ????				       lda	.ByteOffset
    296  10000 ????				       if	{1}_width = 2
    297  10000 ????				       asl
    298  10000 ????				       endif
    299  10000 ????				       if	{1}_width = 3
    300  10000 ????				       asl
    301  10000 ????				       adc	.ByteOffset
    302  10000 ????				       endif
    303  10000 ????				       if	{1}_width = 4
    304  10000 ????				       asl
    305  10000 ????				       asl
    306  10000 ????				       endif
    307  10000 ????				       if	{1}_width = 5
    308  10000 ????				       asl
    309  10000 ????				       asl
    310  10000 ????				       adc	.ByteOffset
    311  10000 ????				       endif
    312  10000 ????				       if	{1}_width = 6
    313  10000 ????				       asl
    314  10000 ????				       adc	.ByteOffset
    315  10000 ????				       asl
    316  10000 ????				       endif
    317  10000 ????				       if	{1}_width = 7
    318  10000 ????				       asl
    319  10000 ????				       adc	.ByteOffset
    320  10000 ????				       asl
    321  10000 ????				       adc	.ByteOffset
    322  10000 ????				       endif
    323  10000 ????				       if	{1}_width = 8
    324  10000 ????				       asl
    325  10000 ????				       asl
    326  10000 ????				       asl
    327  10000 ????				       endif
    328  10000 ????				       if	{1}_width = 9
    329  10000 ????				       asl
    330  10000 ????				       asl
    331  10000 ????				       asl
    332  10000 ????				       adc	.ByteOffset
    333  10000 ????				       endif
    334  10000 ????				       if	{1}_width = 10
    335  10000 ????				       asl
    336  10000 ????				       asl
    337  10000 ????				       adc	.ByteOffset
    338  10000 ????				       asl
    339  10000 ????				       endif
    340  10000 ????				       if	{1}_width = 11
    341  10000 ????				       asl
    342  10000 ????				       asl
    343  10000 ????				       adc	.ByteOffset
    344  10000 ????				       asl
    345  10000 ????				       adc	.ByteOffset
    346  10000 ????				       endif
    347  10000 ????				       if	{1}_width = 12
    348  10000 ????				       asl
    349  10000 ????				       adc	.ByteOffset
    350  10000 ????				       asl
    351  10000 ????				       asl
    352  10000 ????				       endif
    353  10000 ????				       if	{1}_width = 13
    354  10000 ????				       asl
    355  10000 ????				       adc	.ByteOffset
    356  10000 ????				       asl
    357  10000 ????				       asl
    358  10000 ????				       adc	.ByteOffset
    359  10000 ????				       endif
    360  10000 ????				       if	{1}_width = 14
    361  10000 ????				       asl
    362  10000 ????				       adc	.ByteOffset
    363  10000 ????				       asl
    364  10000 ????				       adc	.ByteOffset
    365  10000 ????				       asl
    366  10000 ????				       endif
    367  10000 ????
    368  10000 ????				       adc	#<.GFXLabel	; carry is clear via previous asl or asr
    369  10000 ????				       sta	(dlpnt),y	; #1 - low byte object address
    370  10000 ????
    371  10000 ????				       iny
    372  10000 ????
    373  10000 ????				       lda	#({1}_mode | %01000000)
    374  10000 ????				       sta	(dlpnt),y	; #2 - graphics mode , indirect
    375  10000 ????
    376  10000 ????				       iny
    377  10000 ????
    378  10000 ????				       lda	.SpriteY
    379  10000 ????				       and	#(WZONEHEIGHT - 1)
    380  10000 ????				       cmp	#1	; clear carry if our sprite is just in this zone
    381  10000 ????				       ora	#>.GFXLabel
    382  10000 ????				       sta	(dlpnt),y	; #3 - hi byte object address
    383  10000 ????
    384  10000 ????				       iny
    385  10000 ????
    386  10000 ????				       lda	#({1}_width_twoscompliment | (.Palette * 32))
    387  10000 ????				       sta	(dlpnt),y	; #4 - palette|width
    388  10000 ????
    389  10000 ????				       iny
    390  10000 ????
    391  10000 ????				       lda	.SpriteX
    392  10000 ????				       sta	(dlpnt),y	; #5 - x object position
    393  10000 ????
    394  10000 ????				       iny
    395  10000 ????				       sty	dlend,x
    396  10000 ????
    397  10000 ????				       ifconst	ALWAYSTERMINATE
    398  10000 ????				       iny
    399  10000 ????				       lda	#0
    400  10000 ????				       sta	(dlpnt),y
    401  10000 ????				       endif
    402  10000 ????
    403  10000 ????				       bcc	.PLOTSPRITEend
    404  10000 ????
    405  10000 ????				       inx		; next zone
    406  10000 ????
    407  10000 ????				       lda	DLPOINTL,x	; setup DL pointer for this zone
    408  10000 ????				       sta	dlpnt
    409  10000 ????				       lda	DLPOINTH,x	; setup DL pointer for this zone
    410  10000 ????				       sta	dlpnt+1
    411  10000 ????
    412  10000 ????				       ldy	dlend,x	; find the next new object position in this zone
    413  10000 ????
    414  10000 ????				       lda	.ByteOffset
    415  10000 ????				       if	{1}_width = 1
    416  10000 ????				       clc
    417  10000 ????				       endif
    418  10000 ????				       if	{1}_width = 2
    419  10000 ????				       asl		; carry clear
    420  10000 ????				       endif
    421  10000 ????				       if	{1}_width = 3
    422  10000 ????				       asl		; carry clear
    423  10000 ????				       adc	.ByteOffset
    424  10000 ????				       endif
    425  10000 ????				       if	{1}_width = 4
    426  10000 ????				       asl		; carry clear
    427  10000 ????				       asl
    428  10000 ????				       endif
    429  10000 ????				       if	{1}_width = 5
    430  10000 ????				       asl		; carry clear
    431  10000 ????				       asl
    432  10000 ????				       adc	.ByteOffset
    433  10000 ????				       endif
    434  10000 ????				       if	{1}_width = 6
    435  10000 ????				       asl		; carry clear
    436  10000 ????				       adc	.ByteOffset
    437  10000 ????				       asl
    438  10000 ????				       endif
    439  10000 ????				       if	{1}_width = 7
    440  10000 ????				       asl		; carry clear
    441  10000 ????				       adc	.ByteOffset
    442  10000 ????				       asl
    443  10000 ????				       endif
    444  10000 ????				       if	{1}_width = 8
    445  10000 ????				       asl		; carry clear
    446  10000 ????				       asl
    447  10000 ????				       asl
    448  10000 ????				       endif
    449  10000 ????				       if	{1}_width = 9
    450  10000 ????				       asl		; carry clear
    451  10000 ????				       asl
    452  10000 ????				       asl
    453  10000 ????				       adc	.ByteOffset
    454  10000 ????				       endif
    455  10000 ????				       if	{1}_width = 10
    456  10000 ????				       asl		; carry clear
    457  10000 ????				       asl
    458  10000 ????				       adc	.ByteOffset
    459  10000 ????				       asl
    460  10000 ????				       endif
    461  10000 ????				       if	{1}_width = 11
    462  10000 ????				       asl		; carry clear
    463  10000 ????				       asl
    464  10000 ????				       adc	.ByteOffset
    465  10000 ????				       asl
    466  10000 ????				       adc	.ByteOffset
    467  10000 ????				       endif
    468  10000 ????				       if	{1}_width = 12
    469  10000 ????				       asl		; carry clear
    470  10000 ????				       adc	.ByteOffset
    471  10000 ????				       asl
    472  10000 ????				       asl
    473  10000 ????				       endif
    474  10000 ????				       if	{1}_width = 13
    475  10000 ????				       asl		; carry clear
    476  10000 ????				       adc	.ByteOffset
    477  10000 ????				       asl
    478  10000 ????				       asl
    479  10000 ????				       adc	.ByteOffset
    480  10000 ????				       endif
    481  10000 ????				       if	{1}_width = 14
    482  10000 ????				       asl		; carry clear
    483  10000 ????				       adc	.ByteOffset
    484  10000 ????				       asl
    485  10000 ????				       adc	.ByteOffset
    486  10000 ????				       asl
    487  10000 ????				       endif
    488  10000 ????
    489  10000 ????				       adc	#<.GFXLabel
    490  10000 ????				       sta	(dlpnt),y	; #1 - low byte object address
    491  10000 ????
    492  10000 ????				       iny
    493  10000 ????
    494  10000 ????				       lda	#({1}_mode | %01000000)
    495  10000 ????				       sta	(dlpnt),y	; #2 - graphics mode , indirect
    496  10000 ????
    497  10000 ????				       iny
    498  10000 ????
    499  10000 ????				       lda	.SpriteY
    500  10000 ????				       and	#(WZONEHEIGHT - 1)
    501  10000 ????				       ora	#>(.GFXLabel - (WZONEHEIGHT * 256))	; start in the dma hole
    502  10000 ????				       sta	(dlpnt),y	; #3 - hi byte object address
    503  10000 ????
    504  10000 ????				       iny
    505  10000 ????
    506  10000 ????				       lda	#({1}_width_twoscompliment | (.Palette * 32))
    507  10000 ????				       sta	(dlpnt),y	; #4 - palette|width
    508  10000 ????
    509  10000 ????				       iny
    510  10000 ????
    511  10000 ????				       lda	.SpriteX
    512  10000 ????				       sta	(dlpnt),y	; #5 - x object position
    513  10000 ????
    514  10000 ????				       iny
    515  10000 ????				       sty	dlend,x
    516  10000 ????
    517  10000 ????				       ifconst	ALWAYSTERMINATE
    518  10000 ????				       iny
    519  10000 ????				       lda	#0
    520  10000 ????				       sta	(dlpnt),y
    521  10000 ????				       endif
    522  10000 ????
    523  10000 ????			    .PLOTSPRITEend
    524  10000 ????				       ENDM
    525  10000 ????
    526  10000 ????				       MAC	sizeof
    527  10000 ????
    528  10000 ????						; echo's the size difference between the current address and the
    529  10000 ????						; a label that was passed as an argument. This is a quick way to
    530  10000 ????						; determine the size of a structure.
    531  10000 ????
    532  10000 ????			    .NAME      SETSTR	{1}
    533  10000 ????				       echo	" The Size of",.NAME,"is:",[* - {1}]d,[* - {2}]d,"bytes."
    534  10000 ????				       ENDM
    535  10000 ????
    536  10000 ????						;
    537  10000 ????						; speakjet.inc
    538  10000 ????						;
    539  10000 ????						;
    540  10000 ????						; AtariVox Speech Synth Driver
    541  10000 ????						;
    542  10000 ????						; By Alex Herbert, 2004
    543  10000 ????						;
    544  10000 ????
    545  10000 ????
    546  10000 ????
    547  10000 ????
    548  10000 ????						; Constants
    549  10000 ????
    550  10000 ????
    551  10000 ????		00 01	    SERIAL_OUTMASK equ	$01
    552  10000 ????		00 02	    SERIAL_RDYMASK equ	$02
    553  10000 ????
    554  10000 ????
    555  10000 ????
    556  10000 ????						; Macros
    557  10000 ????
    558  10000 ????				       mac	spkout
    559  10000 ????
    560  10000 ????						; check buffer-full status
    561  10000 ????				       lda	SWCHA
    562  10000 ????				       and	#SERIAL_RDYMASK
    563  10000 ????				       beq	.speech_done
    564  10000 ????
    565  10000 ????						; get next speech byte
    566  10000 ????				       ldy	#$00
    567  10000 ????				       lda	(speech_addr),y
    568  10000 ????
    569  10000 ????						; invert data and check for end of string
    570  10000 ????				       eor	#$ff
    571  10000 ????						;sta BACKGRND ; debug - uncomment to flash the background color with vox data
    572  10000 ????				       beq	.speech_done
    573  10000 ????				       sta	{1}
    574  10000 ????
    575  10000 ????						; increment speech pointer
    576  10000 ????				       inc	speech_addr
    577  10000 ????				       bne	.incaddr_skip
    578  10000 ????				       inc	speech_addr+1
    579  10000 ????			    .incaddr_skip
    580  10000 ????
    581  10000 ????						; output byte as serial data
    582  10000 ????
    583  10000 ????				       sec		; start bit
    584  10000 ????			    .byteout_loop
    585  10000 ????						; put carry flag into bit 0 of SWACNT, preserving other bits
    586  10000 ????				       lda	SWACNT	; 4
    587  10000 ????				       and	#$fe	; 2 6
    588  10000 ????				       adc	#$00	; 2 8
    589  10000 ????				       sta	SWACNT	; 4 12
    590  10000 ????
    591  10000 ????						; 10 bits sent? (1 start bit, 8 data bits, 1 stop bit)
    592  10000 ????				       cpy	#$09	; 2 14
    593  10000 ????				       beq	.speech_done	; 2 16
    594  10000 ????				       iny		; 2 18
    595  10000 ????
    596  10000 ????						; the 7800 is 1.5x faster than the 2600. Waste more cycles here
    597  10000 ????						; to match the original baud rate...
    598  10000 ????						;ldx	  #$07 ; 2600
    599  10000 ????				       ldx	#$0D
    600  10000 ????
    601  10000 ????			    .delay_loop
    602  10000 ????				       dex		; 
    603  10000 ????				       bne	.delay_loop	; 36 54
    604  10000 ????
    605  10000 ????						; shift next data bit into carry
    606  10000 ????				       lsr	{1}	; 5 59
    607  10000 ????
    608  10000 ????						; and loop (branch always taken)
    609  10000 ????				       bpl	.byteout_loop	; 3 62 cycles for loop
    610  10000 ????
    611  10000 ????			    .speech_done
    612  10000 ????
    613  10000 ????				       endm
    614  10000 ????
    615  10000 ????
    616  10000 ????				       mac	speak
    617  10000 ????
    618  10000 ????				       lda	#<{1}
    619  10000 ????				       sta	speech_addr
    620  10000 ????				       lda	#>{1}
    621  10000 ????				       sta	speech_addr+1
    622  10000 ????
    623  10000 ????				       endm
    624  10000 ????
    625  10000 ????
    626  10000 ????
    627  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
    628  10000 ????
    629  10000 ????				       processor	6502
    630  10000 ????
------- FILE 7800basic.h LEVEL 2 PASS 3
      0  10000 ????				       include	"7800basic.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE 7800.h LEVEL 3 PASS 3
      0  10000 ????				       include	"7800.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; 7800.h
      4  10000 ????						; Version 1.0, 2019/12/13
      5  10000 ????
      6  10000 ????						; This file defines hardware registers and memory mapping for the
      7  10000 ????						; Atari 7800. It is distributed as a companion machine-specific support package
      8  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
      9  10000 ????						; available at https://github.com/dasm-assembler/dasm
     10  10000 ????
     11  10000 ????
     12  10000 ????						; ******************** 7800 Hardware Addresses ***************************
     13  10000 ????						;
     14  10000 ????						;	 MEMORY MAP USAGE OF THE 7800
     15  10000 ????						;
     16  10000 ????						;	  00 -   1F	TIA REGISTERS
     17  10000 ????						;	  20 -   3F	MARIA REGISTERS
     18  10000 ????						;	  40 -   FF	RAM block 0 (zero page)
     19  10000 ????						;	 100 -  11F	TIA   (mirror of 0000-001f)
     20  10000 ????						;	 120 -  13F	MARIA (mirror of 0020-003f)
     21  10000 ????						;	 140 -  1FF	RAM block 1 (stack)
     22  10000 ????						;	 200 -  21F	TIA   (mirror of 0000-001f)
     23  10000 ????						;	 220 -  23F	MARIA (mirror of 0020-003f)
     24  10000 ????						;	 240 -  27F	???
     25  10000 ????						;	 280 -  2FF	RIOT I/O ports and timers
     26  10000 ????						;	 300 -  31F	TIA   (mirror of 0000-001f)
     27  10000 ????						;	 320 -  33F	MARIA (mirror of 0020-003f)
     28  10000 ????						;	 340 -  3FF	???
     29  10000 ????						;	 400 -  47F	unused address space
     30  10000 ????						;	 480 -  4FF	RIOT RAM
     31  10000 ????						;	 500 -  57F	unused address space
     32  10000 ????						;	 580 -  5FF	RIOT RAM (mirror of 0480-04ff)
     33  10000 ????						;	 600 - 17FF	unused address space
     34  10000 ????						;	1800 - 203F	RAM
     35  10000 ????						;	2040 - 20FF	RAM block 0 (mirror of 0000-001f)
     36  10000 ????						;	2100 - 213F	RAM
     37  10000 ????						;	2140 - 21FF	RAM block 1 (mirror of 0140-01ff)
     38  10000 ????						;	2200 - 27FF	RAM
     39  10000 ????						;	2800 - 2FFF	unavailable to external devices (bios bus-conflict)
     40  10000 ????						;	3000 - 3FFF	unused address space
     41  10000 ????						;	4000 - FF7F	potential cartridge address space
     42  10000 ????						;	FF80 - FFF9	RESERVED FOR ENCRYPTION
     43  10000 ????						;	FFFA - FFFF	6502 VECTORS
     44  10000 ????
     45  10000 ????
     46  10000 ????						;****** 00-1F ********* TIA REGISTERS ******************
     47  10000 ????
     48  10000 ????		00 01	    INPTCTRL   =	$01	;Input control. In same address space as TIA. write-only
     49  10000 ????		00 01	    VBLANK     =	$01	;VBLANK. D7=1:dump paddle caps to ground.     write-only
     50  10000 ????		00 02	    _WSYNC     =	$02	;Wait for HSync			       write-only
     51  10000 ????		00 03	    _RSYNC     =	$03	;Reset HSync				       write-only
     52  10000 ????		00 08	    INPT0      =	$08	;Paddle Control Input 0		       read-only
     53  10000 ????		00 09	    INPT1      =	$09	;Paddle Control Input 1		       read-only
     54  10000 ????		00 0a	    INPT2      =	$0A	;Paddle Control Input 2		       read-only
     55  10000 ????		00 0b	    INPT3      =	$0B	;Paddle Control Input 3		       read-only
     56  10000 ????
     57  10000 ????						; ** some common alternate names for INPT0/1/2/3
     58  10000 ????		00 08	    INPT4B     =	$08	;Joystick 0 Fire 1			       read-only
     59  10000 ????		00 09	    INPT4A     =	$09	;Joystick 0 Fire 1			       read-only
     60  10000 ????		00 0a	    INPT5B     =	$0A	;Joystick 1 Fire 0			       read-only
     61  10000 ????		00 0b	    INPT5A     =	$0B	;Joystick 1 Fire 1			       read-only
     62  10000 ????		00 08	    INPT4R     =	$08	;Joystick 0 Fire 1			       read-only
     63  10000 ????		00 09	    INPT4L     =	$09	;Joystick 0 Fire 1			       read-only
     64  10000 ????		00 0a	    INPT5R     =	$0A	;Joystick 1 Fire 0			       read-only
     65  10000 ????		00 0b	    INPT5L     =	$0B	;Joystick 1 Fire 1			       read-only
     66  10000 ????
     67  10000 ????		00 0c	    INPT4      =	$0C	;Player 0 Fire Button Input		       read-only
     68  10000 ????		00 0d	    INPT5      =	$0D	;Player 1 Fire Button Input		       read-only
     69  10000 ????
     70  10000 ????		00 15	    AUDC0      =	$15	;Audio Control Channel   0		       write-only
     71  10000 ????		00 16	    AUDC1      =	$16	;Audio Control Channel   1		       write-only
     72  10000 ????		00 17	    AUDF0      =	$17	;Audio Frequency Channel 0		       write-only
     73  10000 ????		00 18	    AUDF1      =	$18	;Audio Frequency Channel 1		       write-only
     74  10000 ????		00 19	    AUDV0      =	$19	;Audio Volume Channel	  0		       write-only
     75  10000 ????		00 1a	    AUDV1      =	$1A	;Audio Volume Channel	  1		       write-only
     76  10000 ????
     77  10000 ????						;****** 20-3F ********* MARIA REGISTERS ***************
     78  10000 ????
     79  10000 ????		00 20	    BACKGRND   =	$20	;Background Color			       write-only
     80  10000 ????		00 21	    P0C1       =	$21	;Palette 0 - Color 1			       write-only
     81  10000 ????		00 22	    P0C2       =	$22	;Palette 0 - Color 2			       write-only
     82  10000 ????		00 23	    P0C3       =	$23	;Palette 0 - Color 3			       write-only
     83  10000 ????		00 24	    WSYNC      =	$24	;Wait For Sync 			       write-only
     84  10000 ????		00 25	    P1C1       =	$25	;Palette 1 - Color 1			       write-only
     85  10000 ????		00 26	    P1C2       =	$26	;Palette 1 - Color 2			       write-only
     86  10000 ????		00 27	    P1C3       =	$27	;Palette 1 - Color 3			       write-only
     87  10000 ????		00 28	    MSTAT      =	$28	;Maria Status				       read-only
     88  10000 ????		00 29	    P2C1       =	$29	;Palette 2 - Color 1			       write-only
     89  10000 ????		00 2a	    P2C2       =	$2A	;Palette 2 - Color 2			       write-only
     90  10000 ????		00 2b	    P2C3       =	$2B	;Palette 2 - Color 3			       write-only
     91  10000 ????		00 2c	    DPPH       =	$2C	;Display List List Pointer High	       write-only
     92  10000 ????		00 2d	    P3C1       =	$2D	;Palette 3 - Color 1			       write-only
     93  10000 ????		00 2e	    P3C2       =	$2E	;Palette 3 - Color 2			       write-only
     94  10000 ????		00 2f	    P3C3       =	$2F	;Palette 3 - Color 3			       write-only
     95  10000 ????		00 30	    DPPL       =	$30	;Display List List Pointer Low 	       write-only
     96  10000 ????		00 31	    P4C1       =	$31	;Palette 4 - Color 1			       write-only
     97  10000 ????		00 32	    P4C2       =	$32	;Palette 4 - Color 2			       write-only
     98  10000 ????		00 33	    P4C3       =	$33	;Palette 4 - Color 3			       write-only
     99  10000 ????		00 34	    CHARBASE   =	$34	;Character Base Address		       write-only
    100  10000 ????		00 34	    CHBASE     =	$34	;Character Base Address		       write-only
    101  10000 ????		00 35	    P5C1       =	$35	;Palette 5 - Color 1			       write-only
    102  10000 ????		00 36	    P5C2       =	$36	;Palette 5 - Color 2			       write-only
    103  10000 ????		00 37	    P5C3       =	$37	;Palette 5 - Color 3			       write-only
    104  10000 ????		00 38	    OFFSET     =	$38	;Unused - Store zero here		       write-only
    105  10000 ????		00 39	    P6C1       =	$39	;Palette 6 - Color 1			       write-only
    106  10000 ????		00 3a	    P6C2       =	$3A	;Palette 6 - Color 2			       write-only
    107  10000 ????		00 3b	    P6C3       =	$3B	;Palette 6 - Color 3			       write-only
    108  10000 ????		00 3c	    CTRL       =	$3C	;Maria Control Register		       write-only
    109  10000 ????		00 3d	    P7C1       =	$3D	;Palette 7 - Color 1			       write-only
    110  10000 ????		00 3e	    P7C2       =	$3E	;Palette 7 - Color 2			       write-only
    111  10000 ????		00 3f	    P7C3       =	$3F	;Palette 7 - Color 3			       write-only
    112  10000 ????
    113  10000 ????
    114  10000 ????						;****** 280-2FF ******* PIA PORTS AND TIMERS ************
    115  10000 ????
    116  10000 ????		02 80	    SWCHA      =	$280	;P0+P1 Joystick Directional Input	       read-write
    117  10000 ????		02 81	    CTLSWA     =	$281	;I/O Control for SCHWA 		       read-write
    118  10000 ????		02 81	    SWACNT     =	$281	;VCS name for above			       read-write
    119  10000 ????		02 82	    SWCHB      =	$282	;Console Switches			       read-write
    120  10000 ????		02 83	    CTLSWB     =	$283	;I/O Control for SCHWB 		       read-write
    121  10000 ????		02 83	    SWBCNT     =	$283	;VCS name for above			       read-write
    122  10000 ????
    123  10000 ????		02 84	    INTIM      =	$284	;Interval Timer Read			       read-only
    124  10000 ????		02 94	    TIM1T      =	$294	;Set 1    CLK Interval (838   nsec/interval)  write-only
    125  10000 ????		02 95	    TIMINT     =	$295	;Interval Timer Interrupt		       read-only
    126  10000 ????		02 95	    TIM8T      =	$295	;Set 8    CLK Interval (6.7   usec/interval)  write-only
    127  10000 ????		02 96	    TIM64T     =	$296	;Set 64   CLK Interval (63.6  usec/interval)  write-only
    128  10000 ????		02 97	    T1024T     =	$297	;Set 1024 CLK Interval (858.2 usec/interval)  write-only
    129  10000 ????		02 9e	    TIM64TI    =	$29E	;Interrupt timer 64T			       write-only
    130  10000 ????
    131  10000 ????						;XM
    132  10000 ????		04 70	    XCTRL      =	$470	; 7=YM2151 6=RAM@6k 5=RAM@4k 4=pokey@450 3=hsc 2=cart 1=RoF_bank1 0=RoF_bank2
    133  10000 ????		04 70	    XCTRL1     =	$470
    134  10000 ????		04 78	    XCTRL2     =	$478
    135  10000 ????		04 7c	    XCTRL3     =	$47c
    136  10000 ????		04 71	    XCTRL4     =	$471
    137  10000 ????		04 72	    XCTRL5     =	$472
    138  10000 ????
    139  10000 ????						; Pokey register relative locations, since its base may be different
    140  10000 ????						; depending on the hardware.
    141  10000 ????		00 00	    PAUDF0     =	$0	; extra audio channels and frequencies
    142  10000 ????		00 01	    PAUDC0     =	$1
    143  10000 ????		00 02	    PAUDF1     =	$2
    144  10000 ????		00 03	    PAUDC1     =	$3
    145  10000 ????		00 04	    PAUDF2     =	$4
    146  10000 ????		00 05	    PAUDC2     =	$5
    147  10000 ????		00 06	    PAUDF3     =	$6
    148  10000 ????		00 07	    PAUDC3     =	$7
    149  10000 ????		00 08	    PAUDCTL    =	$8	; Audio Control
    150  10000 ????		00 09	    PSTIMER    =	$9
    151  10000 ????		00 0a	    PRANDOM    =	$A	; 17 bit polycounter pseudo random
    152  10000 ????		00 0f	    PSKCTL     =	$F	; Serial Port control
------- FILE 7800basic.h
------- FILE 7800basic_variable_redefs.h LEVEL 3 PASS 3
      0  10000 ????				       include	"7800basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 00	    player4_mode =	$00
      4  10000 ????		00 1c	    player4_width_twoscompliment =	$1c
      5  10000 ????		00 04	    player4_width =	$04
      6  10000 ????		00 00	    player3_mode =	$00
      7  10000 ????		00 1c	    player3_width_twoscompliment =	$1c
      8  10000 ????		00 04	    player3_width =	$04
      9  10000 ????		00 00	    player2_mode =	$00
     10  10000 ????		00 1c	    player2_width_twoscompliment =	$1c
     11  10000 ????		00 04	    player2_width =	$04
     12  10000 ????		00 00	    player1_mode =	$00
     13  10000 ????		00 1c	    player1_width_twoscompliment =	$1c
     14  10000 ????		00 04	    player1_width =	$04
     15  10000 ????		00 00	    font_mode  =	$00
     16  10000 ????		00 0b	    font_width_twoscompliment =	$0b
     17  10000 ????		00 35	    font_width =	$35
     18  10000 ????		01 48	    playerAnimWait =	var8
     19  10000 ????
     20  10000 ????		01 47	    playerAnimFrame =	var7
     21  10000 ????
     22  10000 ????		01 46	    playerY    =	var6
     23  10000 ????
     24  10000 ????		01 45	    playerX    =	var5
     25  10000 ????
     26  10000 ????		01 44	    score      =	var4
     27  10000 ????
     28  10000 ????		01 43	    lives      =	var3
     29  10000 ????
     30  10000 ????		01 42	    wait       =	var2
     31  10000 ????
     32  10000 ????		01 41	    bgColor    =	var1
     33  10000 ????
     34  10000 ????		00 00	    player4_color3 =	0
     35  10000 ????		00 44	    player4_color2 =	$44
     36  10000 ????		00 0d	    player4_color1 =	$0d
     37  10000 ????		00 00	    player4_color0 =	$00
     38  10000 ????		00 07	    player3_color3 =	$07
     39  10000 ????		00 44	    player3_color2 =	$44
     40  10000 ????		00 0d	    player3_color1 =	$0d
     41  10000 ????		00 00	    player3_color0 =	$00
     42  10000 ????		00 07	    player2_color3 =	$07
     43  10000 ????		00 44	    player2_color2 =	$44
     44  10000 ????		00 0d	    player2_color1 =	$0d
     45  10000 ????		00 00	    player2_color0 =	$00
     46  10000 ????		00 07	    player1_color3 =	$07
     47  10000 ????		00 44	    player1_color2 =	$44
     48  10000 ????		00 0d	    player1_color1 =	$0d
     49  10000 ????		00 00	    player1_color0 =	$00
     50  10000 ????		00 0f	    font_color1 =	$0f
     51  10000 ????		00 00	    font_color0 =	$00
     52  10000 ????		00 01	    DOUBLEBUFFER =	1
     53  10000 ????		00 01	    ROM32K     =	1
     54  10000 ????		00 01	    plotvalueonscreen =	1
     55  10000 ????		00 10	    ZONEHEIGHT =	16
------- FILE 7800basic.h
      6  10000 ????
      7  10000 ????						;************ 7800 overall RAM map **************
      8  10000 ????
      9  10000 ????						;	   40-FF	 zero page RAM
     10  10000 ????						;	  140-1FF	 RAM (stack)
     11  10000 ????						;	 1800-203F	 RAM
     12  10000 ????						;	 2100-213F	 RAM
     13  10000 ????						;	 2200-27FF	 RAM
     14  10000 ????
     15  10000 ????						;************ 7800basic RAM usage map **************
     16  10000 ????
     17  10000 ????						;	   40-FF	 numerous defines, listed below
     18  10000 ????						;	  140-1FF	 RAM (stack)
     19  10000 ????
     20  10000 ????						;	 1800-187F	 DLL  (1800-18DF with page flipping enabled)
     21  10000 ????						;	 1880-1FFF	 DLs  (18E0-1FFF with page flipping enabled)
     22  10000 ????
     23  10000 ????						;	 2000-203F	 Reserved
     24  10000 ????						;	 2100-213F	 Reserved
     25  10000 ????						;	 2200-27FF	 Free
     26  10000 ????
     27  10000 ????		1f e0	    eeprombuffer =	$1FE0
     28  10000 ????		18 00	    DLLMEM     =	$1800
     29  10000 ????		00 70	    DBOFFSET   =	$70	; $E0 length DL is /2 for double-buffering
     30  10000 ????
     31  10000 ????			   -	       ifconst	PLOTVALUEPAGE
     32  10000 ????			   -VALBUFFER  =	(PLOTVALUEPAGE*256)
     33  10000 ????				       else
     34  10000 ????		20 00	    VALBUFFER  =	$2000	; to $203F  ** never let VALBUFFER straddle pages
     35  10000 ????				       endif
     36  10000 ????
     37  10000 ????
     38  10000 ????		21 00	    pausestate =	$2100
     39  10000 ????		21 01	    dlzero     =	$2101	; zero to force end of $2100 DL, which we use in vblank and overscan
     40  10000 ????		21 02	    sINPT1     =	$2102	; save register for joy button joy0
     41  10000 ????		21 03	    sINPT3     =	$2103	; save register for joy button joy1
     42  10000 ????		21 04	    currentbank =	$2104
     43  10000 ????
     44  10000 ????		21 05	    currentrambank =	$2105
     45  10000 ????		21 06	    charactermode =	$2106
     46  10000 ????		21 07	    sCTRL      =	$2107
     47  10000 ????		21 08	    pokeydetected =	$2108
     48  10000 ????		21 09	    paldetected =	$2109
     49  10000 ????		21 0a	    avoxdetected =	$210A
     50  10000 ????		21 0b	    sCHARBASE  =	$210B	; save register for CHARBASE
     51  10000 ????
     52  10000 ????		21 0c	    hsdevice   =	$210C
     53  10000 ????		21 0d	    hsdifficulty =	$210D
     54  10000 ????		21 0e	    hserror    =	$210E
     55  10000 ????		21 0f	    hsgameslot =	$210F
     56  10000 ????		21 10	    hsnewscoreline =	$2110
     57  10000 ????		21 11	    hsnewscorerank =	$2111
     58  10000 ????		21 12	    HSRAMTable =	$2112	; to $212F (30 bytes) Format: III*5, SSS*5
     59  10000 ????		21 12	    HSRAMInitials =	$2112	; see above
     60  10000 ????		21 21	    HSRAMScores =	$2121	; see above
     61  10000 ????
     62  10000 ????		21 31	    ssCTRL     =	$2131
     63  10000 ????		21 32	    ssCHARBASE =	$2132
     64  10000 ????		21 33	    hsdisplaymode =	$2133
     65  10000 ????		21 34	    gamedifficulty =	$2134
     66  10000 ????		21 35	    hsinitialpos =	$2135
     67  10000 ????		21 36	    hsinitialhold =	$2136
     68  10000 ????		21 37	    hscursorx  =	$2137
     69  10000 ????		21 38	    hsjoydebounce =	$2138
     70  10000 ????		21 39	    hsswcha    =	$2139
     71  10000 ????		21 3a	    hsinpt1    =	$213A
     72  10000 ????		21 3b	    hscolorchaseindex =	$213B
     73  10000 ????		21 3c	    visibleDLLstart =	$213C
     74  10000 ????		21 3d	    overscanDLLstart =	$213D
     75  10000 ????		21 3e	    frameslost =	$213E
     76  10000 ????		21 3f	    hsreturn   =	$213F
     77  10000 ????
     78  10000 ????
     79  10000 ????		00 40	    rand       =	$40
     80  10000 ????		00 41	    rand16     =	$41
     81  10000 ????		00 42	    temp1      =	$42
     82  10000 ????		00 43	    temp2      =	$43
     83  10000 ????		00 44	    temp3      =	$44
     84  10000 ????		00 45	    temp4      =	$45
     85  10000 ????		00 46	    temp5      =	$46
     86  10000 ????		00 47	    temp6      =	$47
     87  10000 ????		00 48	    temp7      =	$48
     88  10000 ????		00 49	    temp8      =	$49
     89  10000 ????		00 4a	    temp9      =	$4a
     90  10000 ????
     91  10000 ????		00 4b	    pokeybase  =	$4b
     92  10000 ????		00 4b	    pokeybaselo =	$4b
     93  10000 ????		00 4c	    pokeybasehi =	$4c
     94  10000 ????
     95  10000 ????		00 4d	    visibleover =	$4d
     96  10000 ????
     97  10000 ????		00 4e	    sfx1pointlo =	$4e
     98  10000 ????		00 4f	    sfx2pointlo =	$4f
     99  10000 ????		00 50	    sfx1pointhi =	$50
    100  10000 ????		00 51	    sfx2pointhi =	$51
    101  10000 ????
    102  10000 ????		00 52	    sfx1priority =	$52
    103  10000 ????		00 53	    sfx2priority =	$53
    104  10000 ????		00 54	    sfx1poffset =	$54
    105  10000 ????		00 55	    sfx2poffset =	$55
    106  10000 ????
    107  10000 ????		00 56	    sfx1frames =	$56
    108  10000 ????		00 57	    sfx2frames =	$57
    109  10000 ????		00 58	    sfx1tick   =	$58
    110  10000 ????		00 59	    sfx2tick   =	$59
    111  10000 ????
    112  10000 ????		00 5a	    tempmath   =	$5a
    113  10000 ????
    114  10000 ????		00 5b	    pokey1pointlo =	$5b
    115  10000 ????		00 5c	    pokey1pointhi =	$5c
    116  10000 ????		00 5d	    pokey2pointlo =	$5d
    117  10000 ????		00 5e	    pokey2pointhi =	$5e
    118  10000 ????		00 5f	    pokey3pointlo =	$5f
    119  10000 ????		00 60	    pokey3pointhi =	$60
    120  10000 ????		00 61	    pokey4pointlo =	$61
    121  10000 ????		00 62	    pokey4pointhi =	$62
    122  10000 ????
    123  10000 ????		00 63	    dlpnt      =	$63	; to $64
    124  10000 ????		00 65	    dlend      =	$65	; to $81 - for 28 possible visible dll entries
    125  10000 ????		00 82	    dlendsave  =	$82	; to $9e - for 28 possible visible dll entries
    126  10000 ????
    127  10000 ????		00 9f	    speech_addr =	$9f
    128  10000 ????		00 a0	    speech_addr_hi =	$a0
    129  10000 ????
    130  10000 ????		00 a1	    HSGameTableLo =	$a1
    131  10000 ????		00 a2	    HSGameTableHi =	$a2
    132  10000 ????		00 a3	    HSVoxHi    =	$a3
    133  10000 ????		00 a4	    HSVoxLo    =	$a4
    134  10000 ????
    135  10000 ????						;channel pointers
    136  10000 ????
    137  10000 ????		00 a5	    songchannel1layer1lo =	$a5
    138  10000 ????		00 a6	    songchannel2layer1lo =	$a6
    139  10000 ????		00 a7	    songchannel3layer1lo =	$a7
    140  10000 ????		00 a8	    songchannel4layer1lo =	$a8
    141  10000 ????
    142  10000 ????		00 a9	    songchannel1layer2lo =	$a9
    143  10000 ????		00 aa	    songchannel2layer2lo =	$aA
    144  10000 ????		00 ab	    songchannel3layer2lo =	$aB
    145  10000 ????		00 ac	    songchannel4layer2lo =	$aC
    146  10000 ????
    147  10000 ????		00 ad	    songchannel1layer3lo =	$aD
    148  10000 ????		00 ae	    songchannel2layer3lo =	$aE
    149  10000 ????		00 af	    songchannel3layer3lo =	$aF
    150  10000 ????		00 b0	    songchannel4layer3lo =	$b0
    151  10000 ????
    152  10000 ????		00 b1	    songchannel1layer1hi =	$b1
    153  10000 ????		00 b2	    songchannel2layer1hi =	$b2
    154  10000 ????		00 b3	    songchannel3layer1hi =	$b3
    155  10000 ????		00 b4	    songchannel4layer1hi =	$b4
    156  10000 ????
    157  10000 ????		00 b5	    songchannel1layer2hi =	$b5
    158  10000 ????		00 b6	    songchannel2layer2hi =	$b6
    159  10000 ????		00 b7	    songchannel3layer2hi =	$b7
    160  10000 ????		00 b8	    songchannel4layer2hi =	$b8
    161  10000 ????
    162  10000 ????		00 b9	    songchannel1layer3hi =	$b9
    163  10000 ????		00 ba	    songchannel2layer3hi =	$bA
    164  10000 ????		00 bb	    songchannel3layer3hi =	$bB
    165  10000 ????		00 bc	    songchannel4layer3hi =	$bC
    166  10000 ????
    167  10000 ????		00 bd	    songdatalo =	$bd
    168  10000 ????		00 be	    songdatahi =	$be
    169  10000 ????
    170  10000 ????		00 bf	    inactivechannelcount =	$bf
    171  10000 ????
    172  10000 ????		00 c0	    songchannel1transpose =	$c0
    173  10000 ????		00 c1	    songchannel2transpose =	$c1
    174  10000 ????		00 c2	    songchannel3transpose =	$c2
    175  10000 ????		00 c3	    songchannel4transpose =	$c3
    176  10000 ????
    177  10000 ????		00 c4	    songstackindex =	$c4
    178  10000 ????
    179  10000 ????		00 c5	    songchannel1instrumentlo =	$c5
    180  10000 ????		00 c6	    songchannel2instrumentlo =	$c6
    181  10000 ????		00 c7	    songchannel3instrumentlo =	$c7
    182  10000 ????		00 c8	    songchannel4instrumentlo =	$c8
    183  10000 ????
    184  10000 ????		00 c9	    songchannel1instrumenthi =	$c9
    185  10000 ????		00 ca	    songchannel2instrumenthi =	$ca
    186  10000 ????		00 cb	    songchannel3instrumenthi =	$cb
    187  10000 ????		00 cc	    songchannel4instrumenthi =	$cc
    188  10000 ????
    189  10000 ????		00 cd	    sfx1notedata =	$cd
    190  10000 ????		00 ce	    sfx2notedata =	$ce
    191  10000 ????
    192  10000 ????		00 cf	    songloops  =	$cf
    193  10000 ????
    194  10000 ????		00 d0	    songpointerlo =	$D0
    195  10000 ????		00 d1	    songpointerhi =	$D1
    196  10000 ????
    197  10000 ????		00 d2	    voxlock    =	$D2
    198  10000 ????		00 d3	    voxqueuesize =	$D3
    199  10000 ????
    200  10000 ????		00 d4	    vblankroutines =	$D4
    201  10000 ????
    202  10000 ????		00 d5	    doublebufferstate =	$D5
    203  10000 ????		00 d6	    doublebufferdloffset =	$D6
    204  10000 ????		00 d7	    doublebufferbufferdirty =	$D7
    205  10000 ????
    206  10000 ????		00 d8	    inttemp1   =	$D8
    207  10000 ????		00 d9	    inttemp2   =	$D9
    208  10000 ????		00 da	    inttemp3   =	$DA
    209  10000 ????		00 db	    inttemp4   =	$DB
    210  10000 ????		00 dc	    inttemp5   =	$DC
    211  10000 ????		00 dd	    inttemp6   =	$DD
    212  10000 ????
    213  10000 ????		00 de	    sfxschedulelock =	$DE
    214  10000 ????		00 df	    sfxschedulemissed =	$DF
    215  10000 ????		00 e0	    sfxinstrumentlo =	$E0
    216  10000 ????		00 e1	    sfxinstrumenthi =	$E1
    217  10000 ????		00 e2	    sfxpitchoffset =	$E2
    218  10000 ????		00 e3	    sfxnoteindex =	$E3
    219  10000 ????
    220  10000 ????		00 e4	    CTLSWAs    =	$E4
    221  10000 ????		00 e5	    CTLSWBs    =	$E5
    222  10000 ????
    223  10000 ????		00 e6	    A	       =	$e6
    224  10000 ????		00 e6	    a	       =	$e6
    225  10000 ????		00 e7	    B	       =	$e7
    226  10000 ????		00 e7	    b	       =	$e7
    227  10000 ????		00 e8	    C	       =	$e8
    228  10000 ????		00 e8	    c	       =	$e8
    229  10000 ????		00 e9	    D	       =	$e9
    230  10000 ????		00 e9	    d	       =	$e9
    231  10000 ????		00 ea	    E	       =	$ea
    232  10000 ????		00 ea	    e	       =	$ea
    233  10000 ????		00 eb	    F	       =	$eb
    234  10000 ????		00 eb	    f	       =	$eb
    235  10000 ????		00 ec	    G	       =	$ec
    236  10000 ????		00 ec	    g	       =	$ec
    237  10000 ????		00 ed	    H	       =	$ed
    238  10000 ????		00 ed	    h	       =	$ed
    239  10000 ????		00 ee	    I	       =	$ee
    240  10000 ????		00 ee	    i	       =	$ee
    241  10000 ????		00 ef	    J	       =	$ef
    242  10000 ????		00 ef	    j	       =	$ef
    243  10000 ????		00 f0	    K	       =	$f0
    244  10000 ????		00 f0	    k	       =	$f0
    245  10000 ????		00 f1	    L	       =	$f1
    246  10000 ????		00 f1	    l	       =	$f1
    247  10000 ????		00 f2	    M	       =	$f2
    248  10000 ????		00 f2	    m	       =	$f2
    249  10000 ????		00 f3	    N	       =	$f3
    250  10000 ????		00 f3	    n	       =	$f3
    251  10000 ????		00 f4	    O	       =	$f4
    252  10000 ????		00 f4	    o	       =	$f4
    253  10000 ????		00 f5	    P	       =	$f5
    254  10000 ????		00 f5	    p	       =	$f5
    255  10000 ????		00 f6	    Q	       =	$f6
    256  10000 ????		00 f6	    q	       =	$f6
    257  10000 ????		00 f7	    R	       =	$f7
    258  10000 ????		00 f7	    r	       =	$f7
    259  10000 ????		00 f8	    S	       =	$f8
    260  10000 ????		00 f8	    s	       =	$f8
    261  10000 ????		00 f9	    T	       =	$f9
    262  10000 ????		00 f9	    t	       =	$f9
    263  10000 ????		00 fa	    U	       =	$fa
    264  10000 ????		00 fa	    u	       =	$fa
    265  10000 ????		00 fb	    V	       =	$fb
    266  10000 ????		00 fb	    v	       =	$fb
    267  10000 ????		00 fc	    W	       =	$fc
    268  10000 ????		00 fc	    w	       =	$fc
    269  10000 ????		00 fd	    X	       =	$fd
    270  10000 ????		00 fd	    x	       =	$fd
    271  10000 ????		00 fe	    Y	       =	$fe
    272  10000 ????		00 fe	    y	       =	$fe
    273  10000 ????		00 ff	    Z	       =	$ff
    274  10000 ????		00 ff	    z	       =	$ff
    275  10000 ????
    276  10000 ????						; var0-var99 variables use the top of the stack
    277  10000 ????		01 40	    var0       =	$140
    278  10000 ????		01 41	    var1       =	$141
    279  10000 ????		01 42	    var2       =	$142
    280  10000 ????		01 43	    var3       =	$143
    281  10000 ????		01 44	    var4       =	$144
    282  10000 ????		01 45	    var5       =	$145
    283  10000 ????		01 46	    var6       =	$146
    284  10000 ????		01 47	    var7       =	$147
    285  10000 ????		01 48	    var8       =	$148
    286  10000 ????		01 49	    var9       =	$149
    287  10000 ????		01 4a	    var10      =	$14a
    288  10000 ????		01 4b	    var11      =	$14b
    289  10000 ????		01 4c	    var12      =	$14c
    290  10000 ????		01 4d	    var13      =	$14d
    291  10000 ????		01 4e	    var14      =	$14e
    292  10000 ????		01 4f	    var15      =	$14f
    293  10000 ????		01 50	    var16      =	$150
    294  10000 ????		01 51	    var17      =	$151
    295  10000 ????		01 52	    var18      =	$152
    296  10000 ????		01 53	    var19      =	$153
    297  10000 ????		01 54	    var20      =	$154
    298  10000 ????		01 55	    var21      =	$155
    299  10000 ????		01 56	    var22      =	$156
    300  10000 ????		01 57	    var23      =	$157
    301  10000 ????		01 58	    var24      =	$158
    302  10000 ????		01 59	    var25      =	$159
    303  10000 ????		01 5a	    var26      =	$15a
    304  10000 ????		01 5b	    var27      =	$15b
    305  10000 ????		01 5c	    var28      =	$15c
    306  10000 ????		01 5d	    var29      =	$15d
    307  10000 ????		01 5e	    var30      =	$15e
    308  10000 ????		01 5f	    var31      =	$15f
    309  10000 ????		01 60	    var32      =	$160
    310  10000 ????		01 61	    var33      =	$161
    311  10000 ????		01 62	    var34      =	$162
    312  10000 ????		01 63	    var35      =	$163
    313  10000 ????		01 64	    var36      =	$164
    314  10000 ????		01 65	    var37      =	$165
    315  10000 ????		01 66	    var38      =	$166
    316  10000 ????		01 67	    var39      =	$167
    317  10000 ????		01 68	    var40      =	$168
    318  10000 ????		01 69	    var41      =	$169
    319  10000 ????		01 6a	    var42      =	$16a
    320  10000 ????		01 6b	    var43      =	$16b
    321  10000 ????		01 6c	    var44      =	$16c
    322  10000 ????		01 6d	    var45      =	$16d
    323  10000 ????		01 6e	    var46      =	$16e
    324  10000 ????		01 6f	    var47      =	$16f
    325  10000 ????		01 70	    var48      =	$170
    326  10000 ????		01 71	    var49      =	$171
    327  10000 ????		01 72	    var50      =	$172
    328  10000 ????		01 73	    var51      =	$173
    329  10000 ????		01 74	    var52      =	$174
    330  10000 ????		01 75	    var53      =	$175
    331  10000 ????		01 76	    var54      =	$176
    332  10000 ????		01 77	    var55      =	$177
    333  10000 ????		01 78	    var56      =	$178
    334  10000 ????		01 79	    var57      =	$179
    335  10000 ????		01 7a	    var58      =	$17a
    336  10000 ????		01 7b	    var59      =	$17b
    337  10000 ????		01 7c	    var60      =	$17c
    338  10000 ????		01 7d	    var61      =	$17d
    339  10000 ????		01 7e	    var62      =	$17e
    340  10000 ????		01 7f	    var63      =	$17f
    341  10000 ????		01 80	    var64      =	$180
    342  10000 ????		01 81	    var65      =	$181
    343  10000 ????		01 82	    var66      =	$182
    344  10000 ????		01 83	    var67      =	$183
    345  10000 ????		01 84	    var68      =	$184
    346  10000 ????		01 85	    var69      =	$185
    347  10000 ????		01 86	    var70      =	$186
    348  10000 ????		01 87	    var71      =	$187
    349  10000 ????		01 88	    var72      =	$188
    350  10000 ????		01 89	    var73      =	$189
    351  10000 ????		01 8a	    var74      =	$18a
    352  10000 ????		01 8b	    var75      =	$18b
    353  10000 ????		01 8c	    var76      =	$18c
    354  10000 ????		01 8d	    var77      =	$18d
    355  10000 ????		01 8e	    var78      =	$18e
    356  10000 ????		01 8f	    var79      =	$18f
    357  10000 ????		01 90	    var80      =	$190
    358  10000 ????		01 91	    var81      =	$191
    359  10000 ????		01 92	    var82      =	$192
    360  10000 ????		01 93	    var83      =	$193
    361  10000 ????		01 94	    var84      =	$194
    362  10000 ????		01 95	    var85      =	$195
    363  10000 ????		01 96	    var86      =	$196
    364  10000 ????		01 97	    var87      =	$197
    365  10000 ????		01 98	    var88      =	$198
    366  10000 ????		01 99	    var89      =	$199
    367  10000 ????		01 9a	    var90      =	$19a
    368  10000 ????		01 9b	    var91      =	$19b
    369  10000 ????		01 9c	    var92      =	$19c
    370  10000 ????		01 9d	    var93      =	$19d
    371  10000 ????		01 9e	    var94      =	$19e
    372  10000 ????		01 9f	    var95      =	$19f
    373  10000 ????		01 a0	    var96      =	$1a0
    374  10000 ????		01 a1	    var97      =	$1a1
    375  10000 ????		01 a2	    var98      =	$1a2
    376  10000 ????		01 a3	    var99      =	$1a3
    377  10000 ????
    378 U01c4 ????				      SEG.U	"7800basicRAM"
    379 U01a4					      ORG	$1A4
    380 U01a4
    381 U01a4							; MAX allocation locations are in comments...
    382 U01a4		       00	   framecounter DS	1	; $1A4
    383 U01a5		       00	   countdownseconds DS	1	; $1A5
    384 U01a6		       00 00 00    score0     DS	3	; $1A6 $1A7 $1A8
    385 U01a9		       00 00 00    score1     DS	3	; $1A9 $1AA $1AB
    386 U01ac		       00	   pausebuttonflag DS	1	; $1AC
    387 U01ad		       00	   valbufend  DS	1	; $1AD
    388 U01ae		       00	   valbufendsave DS	1	; $1AE
    389 U01af		       00	   finescrollx DS	1	; $1AF
    390 U01b0		       00	   finescrolly DS	1	; $1B0
    391 U01b1		       00	   joybuttonmode DS	1	; $1B1 ; track joysticks that were changed to one-button mode
    392 U01b2		       00	   interruptindex DS	1	; $1B2
    393 U01b3
    394 U01b3					      ifconst	DOUBLEBUFFER
    395 U01b3		       00	   doublebufferminimumframetarget DS	1	; $1B3
    396 U01b4		       00	   doublebufferminimumframeindex DS	1	; $1B4
    397 U01b5					      endif
    398 U01b5
    399 U01b5		       00	   pausedisable DS	1	; $1B5
    400 U01b6		       00	   XCTRL1s    DS	1	; $1B6
    401 U01b7
    402 U01b7				  -	      ifconst	AVOXVOICE
    403 U01b7				  -avoxenable DS	1	; $1B7
    404 U01b7				  -tempavox   DS	1	; $1B8
    405 U01b7					      endif
    406 U01b7
    407 U01b7				  -	      ifconst	MUSICTRACKER
    408 U01b7				  -songtempo  DS	1	; $1B9
    409 U01b7				  -songtick   DS	1	; $1BA
    410 U01b7				  -
    411 U01b7				  -songchannel1layer1loops DS	1	; $1BB
    412 U01b7				  -songchannel2layer1loops DS	1	; $1BC
    413 U01b7				  -songchannel3layer1loops DS	1	; $1BD
    414 U01b7				  -songchannel4layer1loops DS	1	; $1BE
    415 U01b7				  -
    416 U01b7				  -songchannel1layer2loops DS	1	; $1BF
    417 U01b7				  -songchannel2layer2loops DS	1	; $1C0
    418 U01b7				  -songchannel3layer2loops DS	1	; $1C1
    419 U01b7				  -songchannel4layer2loops DS	1	; $1C2
    420 U01b7				  -
    421 U01b7				  -songchannel1layer3loops DS	1	; $1C3
    422 U01b7				  -songchannel2layer3loops DS	1	; $1C4
    423 U01b7				  -songchannel3layer3loops DS	1	; $1C5
    424 U01b7				  -songchannel4layer3loops DS	1	; $1C6
    425 U01b7				  -
    426 U01b7				  -songchannel1busywait DS	1	; $1C7
    427 U01b7				  -songchannel2busywait DS	1	; $1C8
    428 U01b7				  -songchannel3busywait DS	1	; $1C9
    429 U01b7				  -songchannel4busywait DS	1	; $1CA
    430 U01b7				  -
    431 U01b7				  -songchannel1stackdepth DS	1	; $1CB
    432 U01b7				  -songchannel2stackdepth DS	1	; $1CC
    433 U01b7				  -songchannel3stackdepth DS	1	; $1CD
    434 U01b7				  -songchannel4stackdepth DS	1	; $1CE
    435 U01b7					      endif
    436 U01b7
    437 U01b7		       00	   palframes  DS	1	; $1CF
    438 U01b8		       00	   palfastframe DS	1	; $1D0
    439 U01b9
    440 U01b9				  -	      ifconst	MOUSESUPPORT
    441 U01b9				  -port0resolution DS	1	; $1D1
    442 U01b9				  -port1resolution DS	1	; $1D2
    443 U01b9					      else
    444 U01b9				  -	      ifconst	TRAKBALLSUPPORT
    445 U01b9				  -port0resolution DS	1	; $1D1
    446 U01b9				  -port1resolution DS	1	; $1D2
    447 U01b9					      endif
    448 U01b9					      endif
    449 U01b9
    450 U01b9		       00	   port0control DS	1	; $1D3
    451 U01ba		       00	   port1control DS	1	; $1D4
    452 U01bb
    453 U01bb							; port#control values...
    454 U01bb							;	1 = proline
    455 U01bb							;	2 = lightgun
    456 U01bb							;	3 = paddle
    457 U01bb							;	4 = trakball
    458 U01bb							;	5 = vcs joystick
    459 U01bb							;	6 = driving
    460 U01bb							;	7 = keypad
    461 U01bb							;	8 = st mouse/cx80
    462 U01bb							;	9 = amiga mouse
    463 U01bb							;     10 = atarivox
    464 U01bb
    465 U01bb							; controller 0 data...
    466 U01bb		       00	   paddleposition0 DS	1	; $1D5
    467 U01bb		       01 bb	   keypadmatrix0a =	paddleposition0
    468 U01bb		       01 bb	   drivingposition0 =	paddleposition0
    469 U01bb		       01 bb	   trakballx0 =	paddleposition0
    470 U01bb		       01 bb	   mousex0    =	paddleposition0
    471 U01bb		       01 bb	   lighttgunx0 =	paddleposition0
    472 U01bb		       01 bb	   snes2atari0lo =	paddleposition0
    473 U01bc
    474 U01bc							; controller 1 data...
    475 U01bc		       00	   paddleposition2 DS	1	; $1D6
    476 U01bc		       01 bc	   keypadmatrix1a =	paddleposition2
    477 U01bc		       01 bc	   drivingposition1 =	paddleposition2
    478 U01bc		       01 bc	   trakballx1 =	paddleposition2
    479 U01bc		       01 bc	   mousex1    =	paddleposition2
    480 U01bc		       01 bc	   lightgunx1 =	paddleposition2
    481 U01bc		       01 bc	   snes2atari1lo =	paddleposition2
    482 U01bd
    483 U01bd							; controller 0 altdata...
    484 U01bd		       00	   paddleposition1 DS	1	; $1D7
    485 U01bd		       01 bd	   keypadmatrix0b =	paddleposition1
    486 U01bd		       01 bd	   trakbally0 =	paddleposition1
    487 U01bd		       01 bd	   mousey0    =	paddleposition1
    488 U01bd		       01 bd	   lightguny0 =	paddleposition1
    489 U01bd		       01 bd	   snes2atari0hi =	paddleposition1
    490 U01be
    491 U01be							; controller 1 altdata...
    492 U01be		       00	   paddleposition3 DS	1	; $1D8
    493 U01be		       01 be	   keypadmatrix1b =	paddleposition3
    494 U01be		       01 be	   trakbally1 =	paddleposition3
    495 U01be		       01 be	   mousey1    =	paddleposition3
    496 U01be		       01 be	   lightguny1 =	paddleposition3
    497 U01be		       01 be	   snes2atari1hi =	paddleposition3
    498 U01bf
    499 U01bf							; controller state save. for trakball state+dir codes, rotary position codes
    500 U01bf		       00	   controller0statesave DS	1	; $1D9
    501 U01bf		       01 bf	   paddleprevious0 =	controller0statesave
    502 U01bf		       01 bf	   mousecodex0 =	controller0statesave
    503 U01bf		       01 bf	   trakballcodex0 =	controller0statesave
    504 U01bf		       01 bf	   keypadmatrix0c =	controller0statesave
    505 U01bf		       01 bf	   snesdetected0 =	controller0statesave
    506 U01c0
    507 U01c0		       00	   controller1statesave DS	1	; $1DA
    508 U01c0		       01 c0	   paddleprevious2 =	controller1statesave
    509 U01c0		       01 c0	   mousecodex1 =	controller1statesave
    510 U01c0		       01 c0	   trakballcodex1 =	controller1statesave
    511 U01c0		       01 c0	   keypadmatrix1c =	controller1statesave
    512 U01c0		       01 c0	   snesdetected1 =	controller1statesave
    513 U01c1
    514 U01c1		       00	   paddleprevious1 DS	1	; $1DB
    515 U01c1		       01 c1	   keypadmatrix0d =	paddleprevious1
    516 U01c1		       01 c1	   mousecodey0 =	paddleprevious1
    517 U01c1		       01 c1	   trakballcodey0 =	paddleprevious1
    518 U01c2
    519 U01c2		       00	   paddleprevious3 DS	1	; $1DC
    520 U01c2		       01 c2	   keypadmatrix1d =	paddleprevious3
    521 U01c2		       01 c2	   mousecodey1 =	paddleprevious3
    522 U01c2		       01 c2	   trakballcodey1 =	paddleprevious3
    523 U01c3
    524 U01c3				  -	      ifconst	pokeysupport
    525 U01c3				  -pokey1frames DS	1	; $1DD
    526 U01c3				  -pokey1tick DS	1	; $1DE
    527 U01c3				  -pokey2frames DS	1	; $1DF
    528 U01c3				  -pokey2tick DS	1	; $1E0
    529 U01c3				  -pokey3frames DS	1	; $1E1
    530 U01c3				  -pokey3tick DS	1	; $1E2
    531 U01c3				  -pokey4frames DS	1	; $1E3
    532 U01c3				  -pokey4tick DS	1	; $1E4
    533 U01c3				  -pokey1priority DS	1	; $1E5
    534 U01c3				  -pokey1offset DS	1	; $1E6
    535 U01c3				  -pokey2priority DS	1	; $1E7
    536 U01c3				  -pokey2offset DS	1	; $1E8
    537 U01c3				  -pokey3priority DS	1	; $1E9
    538 U01c3				  -pokey3offset DS	1	; $1EA
    539 U01c3				  -pokey4priority DS	1	; $1EB
    540 U01c3				  -pokey4offset DS	1	; $1EC
    541 U01c3					      endif
    542 U01c3
    543 U01c3				  -	      ifconst	pokeykeysupport
    544 U01c3				  -pokeylastkeycode DS	1
    545 U01c3				  -pokeykeycode DS	1
    546 U01c3				  -pokeykeydebounce DS	1
    547 U01c3					      endif
    548 U01c3
    549 U01c3				  -	      ifconst	RMT
    550 U01c3				  -rasterpause DS	1
    551 U01c3					      endif		; RMT
    552 U01c3				  -	      ifconst	RMTVOLUME
    553 U01c3				  -rmtvolume  DS	1
    554 U01c3					      endif		; RMTVOLUME
    555 U01c3				  -	      ifconst	TIAVOLUME
    556 U01c3				  -tiavolume  DS	1
    557 U01c3					      endif		; TIAVOLUME
    558 U01c3
    559 U01c3				  -	      ifconst	FOURBITFADE
    560 U01c3				  -fourbittemp1 DS	1
    561 U01c3				  -fourbitfadevalue DS	1
    562 U01c3				  -fourbittemp1int DS	1
    563 U01c3				  -fourbitfadevalueint DS	1
    564 U01c3					      endif		; FOURBITFADE
    565 U01c3
    566 U01c3				  -	      ifconst	SNES2ATARISUPPORT
    567 U01c3				  -snesport   DS	1
    568 U01c3					      endif
    569 U01c3
    570 U01c3				  -	      ifconst	KEYPADSUPPORT
    571 U01c3				  -keypadcounter DS	1
    572 U01c3					      endif
    573 U01c3
    574 U01c3							; see if we need an interrupthold byte...
    575 U01c3				   INTERRUPTNEEDED SET	0
    576 U01c3				  -	      ifconst	.topscreenroutine
    577 U01c3				  -INTERRUPTNEEDED SET	1
    578 U01c3					      endif
    579 U01c3				  -	      ifconst	.bottomscreenroutine
    580 U01c3				  -INTERRUPTNEEDED SET	1
    581 U01c3					      endif
    582 U01c3				  -	      ifconst	.userinterrupt
    583 U01c3				  -INTERRUPTNEEDED SET	1
    584 U01c3					      endif
    585 U01c3				  -	      if	INTERRUPTNEEDED = 1
    586 U01c3				  -interrupthold DS	1	; $1ED
    587 U01c3					      endif
    588 U01c3
    589 U01c3					      ifnconst	CANARYOFF
    590 U01c3		       00	   canary     DS	1	; $1EF
    591 U01c4					      endif
    592 U01c4
    593 U01c4
    594 U01c4					      ifnconst	bankswitchmode
   stack allowance: 29 nested subroutines.
    595 U01c4					      echo	"  stack allowance:",[($1FF - .)/2]d,"nested subroutines."
    596 U01c4				  -	      else
    597 U01c4				  -	      echo	"  stack allowance:",[($1FF - .)/3]d,"nested subroutines."
    598 U01c4					      endif
    599 U01c4					      ifnconst	CANARYOFF
   the canary is situated at: $1c3
    600 U01c4					      echo	"  the canary is situated at:",[canary]
    601 U01c4				  -	      else
    602 U01c4				  -	      echo	"  the canary is disabled."
    603 U01c4					      endif
    604 U01c4
    605 U01c4							; $1EE - $1FF reserved for stack
    606 U01c4
    607  10000 ????				       SEG	"GAME"
    608  10000 ????
------- FILE c:\Users\steve\OneDrive\Desktop\2018dev\7800\7800basic\projects\demo1\lesson2_4.78b.asm
------- FILE 7800basic_variable_redefs.h LEVEL 2 PASS 3
      0  10000 ????				       include	"7800basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 00	    player4_mode =	$00
      4  10000 ????		00 1c	    player4_width_twoscompliment =	$1c
      5  10000 ????		00 04	    player4_width =	$04
      6  10000 ????		00 00	    player3_mode =	$00
      7  10000 ????		00 1c	    player3_width_twoscompliment =	$1c
      8  10000 ????		00 04	    player3_width =	$04
      9  10000 ????		00 00	    player2_mode =	$00
     10  10000 ????		00 1c	    player2_width_twoscompliment =	$1c
     11  10000 ????		00 04	    player2_width =	$04
     12  10000 ????		00 00	    player1_mode =	$00
     13  10000 ????		00 1c	    player1_width_twoscompliment =	$1c
     14  10000 ????		00 04	    player1_width =	$04
     15  10000 ????		00 00	    font_mode  =	$00
     16  10000 ????		00 0b	    font_width_twoscompliment =	$0b
     17  10000 ????		00 35	    font_width =	$35
     18  10000 ????		01 48	    playerAnimWait =	var8
     19  10000 ????
     20  10000 ????		01 47	    playerAnimFrame =	var7
     21  10000 ????
     22  10000 ????		01 46	    playerY    =	var6
     23  10000 ????
     24  10000 ????		01 45	    playerX    =	var5
     25  10000 ????
     26  10000 ????		01 44	    score      =	var4
     27  10000 ????
     28  10000 ????		01 43	    lives      =	var3
     29  10000 ????
     30  10000 ????		01 42	    wait       =	var2
     31  10000 ????
     32  10000 ????		01 41	    bgColor    =	var1
     33  10000 ????
     34  10000 ????		00 00	    player4_color3 =	0
     35  10000 ????		00 44	    player4_color2 =	$44
     36  10000 ????		00 0d	    player4_color1 =	$0d
     37  10000 ????		00 00	    player4_color0 =	$00
     38  10000 ????		00 07	    player3_color3 =	$07
     39  10000 ????		00 44	    player3_color2 =	$44
     40  10000 ????		00 0d	    player3_color1 =	$0d
     41  10000 ????		00 00	    player3_color0 =	$00
     42  10000 ????		00 07	    player2_color3 =	$07
     43  10000 ????		00 44	    player2_color2 =	$44
     44  10000 ????		00 0d	    player2_color1 =	$0d
     45  10000 ????		00 00	    player2_color0 =	$00
     46  10000 ????		00 07	    player1_color3 =	$07
     47  10000 ????		00 44	    player1_color2 =	$44
     48  10000 ????		00 0d	    player1_color1 =	$0d
     49  10000 ????		00 00	    player1_color0 =	$00
     50  10000 ????		00 0f	    font_color1 =	$0f
     51  10000 ????		00 00	    font_color0 =	$00
     52  10000 ????		00 01	    DOUBLEBUFFER =	1
     53  10000 ????		00 01	    ROM32K     =	1
     54  10000 ????		00 01	    plotvalueonscreen =	1
     55  10000 ????		00 10	    ZONEHEIGHT =	16
------- FILE c:\Users\steve\OneDrive\Desktop\2018dev\7800\7800basic\projects\demo1\lesson2_4.78b.asm
    633  10000 ????
    634  10000 ????						; BEADHEADER... disabled for now
    635  10000 ????						; A BEAD header gets automatically incorportated into the ROM header. 
    636  10000 ????						; For more BEAD executable info, check out the spec...
    637  10000 ????						; http://7800.8bitdev.org/index.php/The_Atari_7800_BEAD_Execuable_Specification
    638  10000 ????
    639  10000 ????		00 01	    GAMEDESCRIPTIONSET =	1
    640  10000 ????		4e 61 6d 65 GAMEDESCRIPTION =	"Test Name"
    641  10000 ????
    642  10000 ????
    643  10000 ????		00 40	    BDHSC      =	%01000000
    644  10000 ????		00 20	    BDYM       =	%00100000
    645  10000 ????		00 10	    BDPOKEY    =	%00010000
    646  10000 ????		00 08	    BDROF      =	%00001000
    647  10000 ????		00 00	    BD16K      =	%00000000
    648  10000 ????		00 01	    BD32K      =	%00000001
    649  10000 ????		00 02	    BD48K      =	%00000010
    650  10000 ????		00 05	    BD1800     =	%00000101
    651  10000 ????		00 06	    BD4000     =	%00000110
    652  10000 ????
    653  10000 ????			   -	       ifconst	BEADHEADER
    654  10000 ????			   -BEADHARDWARE SET	0
    655  10000 ????			   -	       ifconst	ROM16K
    656  10000 ????			   -BEADHARDWARE SET	(BEADHARDWARE|BD16K)
    657  10000 ????			   -	       endif
    658  10000 ????			   -	       ifconst	ROM32K
    659  10000 ????			   -BEADHARDWARE SET	(BEADHARDWARE|BD32K)
    660  10000 ????			   -	       endif
    661  10000 ????			   -	       ifconst	ROM48K
    662  10000 ????			   -BEADHARDWARE SET	(BEADHARDWARE|BD48K)
    663  10000 ????			   -	       endif
    664  10000 ????			   -	       ifconst	pokeysupport
    665  10000 ????			   -BEADHARDWARE SET	(BEADHARDWARE|BDPOKEY)
    666  10000 ????			   -	       endif
    667  10000 ????			   -	       ifconst	HSSUPPORT
    668  10000 ????			   -BEADHARDWARE SET	(BEADHARDWARE|BDHSC)
    669  10000 ????			   -	       endif
    670  10000 ????				       endif
    671  10000 ????
    672  10000 ????						;start address of cart...
    673  10000 ????
    674  10000 ????			    BANK_WAS_SET SET	0
    675  10000 ????
    676  10000 ????			   -	       ifconst	ROM8K
    677  10000 ????			   -	       ORG	$E000,0
    678  10000 ????			   -BANK_WAS_SET SET	1
    679  10000 ????				       endif		; ROM8K
    680  10000 ????
    681  10000 ????			   -	       ifconst	ROM16K
    682  10000 ????			   -	       ORG	$C000,0
    683  10000 ????			   -BANK_WAS_SET SET	1
    684  10000 ????			   -	       ifconst	BEADHEADER
    685  10000 ????			   -	       .byte	$BE,$AD,BEADHARDWARE
    686  10000 ????			   -	       ifconst	GAMEDESCRIPTION
    687  10000 ????			   -	       CLC
    688  10000 ????			   -	       BCC	_SKIPDESCRIPTION
    689  10000 ????			   -	       .byte	GAMEDESCRIPTION,0
    690  10000 ????			   -_SKIPDESCRIPTION
    691  10000 ????			   -	       endif		; GAMEDESCRIPTION
    692  10000 ????			   -	       jmp	($FFFC)
    693  10000 ????			   -	       endif		; BEADHEADER
    694  10000 ????				       endif		; ROM16K
    695  10000 ????
    696  10000 ????				       ifconst	ROM32K
    697  8000					      ORG	$8000,0
    698  8000				   BANK_WAS_SET SET	1
    699  8000				  -	      ifconst	BEADHEADER
    700  8000				  -	      .byte	$BE,$AD,BEADHARDWARE
    701  8000				  -	      ifconst	GAMEDESCRIPTION
    702  8000				  -	      CLC
    703  8000				  -	      BCC	_SKIPDESCRIPTION
    704  8000				  -	      .byte	GAMEDESCRIPTION,0
    705  8000				  -_SKIPDESCRIPTION
    706  8000				  -	      endif		; GAMEDESCRIPTION
    707  8000				  -	      jmp	($FFFC)
    708  8000					      endif		; BEADHEADER
    709  8000					      endif		; ROM32K
    710  8000
    711  8000				  -	      ifconst	ROM48K
    712  8000				  -	      ORG	$4000,0
    713  8000				  -BANK_WAS_SET SET	1
    714  8000				  -	      ifconst	BEADHEADER
    715  8000				  -	      .byte	$BE,$AD,BEADHARDWARE
    716  8000				  -	      ifconst	GAMEDESCRIPTIONSET
    717  8000				  -	      CLC
    718  8000				  -	      BCC	_SKIPDESCRIPTION
    719  8000				  -	      .byte	GAMEDESCRIPTION,0
    720  8000				  -_SKIPDESCRIPTION
    721  8000				  -	      endif		; GAMEDESCRIPTIONSET
    722  8000				  -	      jmp	($FFFC)
    723  8000				  -	      endif		; BEADHEADER
    724  8000					      endif		; ROM48K
    725  8000
    726  8000				  -	      ifconst	ROM52K
    727  8000				  -BANK_WAS_SET SET	1
    728  8000				  -	      ORG	$3000,0
    729  8000					      endif		; ROM52K
    730  8000
    731  8000				  -	      ifconst	bankswitchmode
    732  8000				  -	      ifconst	ROMAT4K
    733  8000				  -BANK_WAS_SET SET	1
    734  8000				  -	      ORG	$4000,0
    735  8000				  -	      RORG	$4000
    736  8000				  -	      else		; ROMAT4K
    737  8000				  -BANK_WAS_SET SET	1
    738  8000				  -	      ORG	$8000,0
    739  8000				  -	      RORG	$8000
    740  8000				  -	      endif
    741  8000					      endif
    742  8000
    743  8000				  -	      if	BANK_WAS_SET = 0
    744  8000				  -	      ORG	$8000,0	; default is 32K
    745  8000					      endif
    746  8000
    747  8000				   START_OF_ROM SET	.
    748  8000							;7800basic v0.24 Mar  2 2023 18:16:13
    749  8000				   SPACEOVERFLOW SET	0
    750  8000				   game
    751  8000				   .L00 		;;  set zoneheight 16
    752  8000
    753  8000				   .L01 		;;  displaymode 160A
    754  8000
    755  8000		       a9 40		      lda	#%01000000	;Enable DMA, mode=160x2/160x4
    756  8002		       85 3c		      sta	CTRL
    757  8004
    758  8004		       8d 07 21 	      sta	sCTRL
    759  8007
    760  8007				   .L02 		;;  set plotvalueonscreen on
    761  8007
    762  8007				   .L03 		;;  set romsize 32k
    763  8007
    764  8007				   .L04 		;;  doublebuffer on
    765  8007
    766  8007		       a9 01		      lda	#1
    767  8009		       85 d5		      sta	doublebufferstate
    768  800b				   .
    769  800b							;; 
    770  800b
    771  800b				   .L05 		;;  incgraphic font.png 160A 
    772  800b
    773  800b				   .L06 		;;  characterset font
    774  800b
    775  800b		       a9 e0		      lda	#>font
    776  800d		       8d 0b 21 	      sta	sCHARBASE
    777  8010
    778  8010		       85 34		      sta	CHARBASE
    779  8012		       a9 60		      lda	#(font_mode | %01100000)
    780  8014		       8d 06 21 	      sta	charactermode
    781  8017
    782  8017				   .L07 		;;  alphachars '0123456789abcdefghijklmnopqrstuvwxyz>`?!/.,-_()[]&AB '
    783  8017
    784  8017				   .
    785  8017							;; 
    786  8017
    787  8017				   .L08 		;;  rem sprites
    788  8017
    789  8017				   .L09 		;;  incgraphic images/player1.png 160A 0 1 3 2
    790  8017
    791  8017				   .L010		;;  incgraphic images/player2.png 160A 0 1 3 2
    792  8017
    793  8017				   .L011		;;  incgraphic images/player3.png 160A 0 1 3 2
    794  8017
    795  8017				   .L012		;;  incgraphic images/player4.png 160A 0 1 3 2
    796  8017
    797  8017				   .
    798  8017							;; 
    799  8017
    800  8017				   .L013		;;  rem pallette 0 text
    801  8017
    802  8017				   .L014		;;  P0C1 = $0F
    803  8017
    804  8017		       a9 0f		      LDA	#$0F
    805  8019		       85 21		      STA	P0C1
    806  801b				   .L015		;;  P0C2 = $0C
    807  801b
    808  801b		       a9 0c		      LDA	#$0C
    809  801d		       85 22		      STA	P0C2
    810  801f				   .L016		;;  P0C3 = $0A
    811  801f
    812  801f		       a9 0a		      LDA	#$0A
    813  8021		       85 23		      STA	P0C3
    814  8023				   .
    815  8023							;; 
    816  8023
    817  8023				   .L017		;;  rem pallette 1 player
    818  8023
    819  8023				   .L018		;;  P1C1  =  $0D
    820  8023
    821  8023		       a9 0d		      LDA	#$0D
    822  8025		       85 25		      STA	P1C1
    823  8027				   .L019		;;  P1C2  =  $08
    824  8027
    825  8027		       a9 08		      LDA	#$08
    826  8029		       85 26		      STA	P1C2
    827  802b				   .L020		;;  P1C3  =  $33
    828  802b
    829  802b		       a9 33		      LDA	#$33
    830  802d		       85 27		      STA	P1C3
    831  802f				   .
    832  802f							;; 
    833  802f
    834  802f				   .L021		;;  BACKGRND = $00
    835  802f
    836  802f		       a9 00		      LDA	#$00
    837  8031		       85 20		      STA	BACKGRND
    838  8033				   .
    839  8033							;; 
    840  8033
    841  8033				   .L022		;;  dim bgColor  =  var1
    842  8033
    843  8033				   .L023		;;  dim wait  =  var2
    844  8033
    845  8033				   .L024		;;  dim lives	=  var3
    846  8033
    847  8033				   .L025		;;  dim score	=  var4
    848  8033
    849  8033				   .L026		;;  dim playerX  = var5
    850  8033
    851  8033				   .L027		;;  dim playerY  =  var6
    852  8033
    853  8033				   .L028		;;  dim playerAnimFrame  =  var7
    854  8033
    855  8033				   .L029		;;  dim playerAnimWait  =  var8
    856  8033
    857  8033				   .
    858  8033							;; 
    859  8033
    860  8033				   .L030		;;  bgColor  =  0
    861  8033
    862  8033		       a9 00		      LDA	#0
    863  8035		       8d 41 01 	      STA	bgColor
    864  8038				   .L031		;;  wait  =  0
    865  8038
    866  8038		       a9 00		      LDA	#0
    867  803a		       8d 42 01 	      STA	wait
    868  803d				   .L032		;;  lives  =  0
    869  803d
    870  803d		       a9 00		      LDA	#0
    871  803f		       8d 43 01 	      STA	lives
    872  8042				   .L033		;;  score  =  0
    873  8042
    874  8042		       a9 00		      LDA	#0
    875  8044		       8d 44 01 	      STA	score
    876  8047				   .L034		;;  playerY  =  0
    877  8047
    878  8047		       a9 00		      LDA	#0
    879  8049		       8d 46 01 	      STA	playerY
    880  804c				   .L035		;;  playerX  =  0
    881  804c
    882  804c		       a9 00		      LDA	#0
    883  804e		       8d 45 01 	      STA	playerX
    884  8051				   .L036		;;  playerAnimFrame  =  0
    885  8051
    886  8051		       a9 00		      LDA	#0
    887  8053		       8d 47 01 	      STA	playerAnimFrame
    888  8056				   .L037		;;  playerAnimWait  =	0
    889  8056
    890  8056		       a9 00		      LDA	#0
    891  8058		       8d 48 01 	      STA	playerAnimWait
    892  805b				   .
    893  805b							;; 
    894  805b
    895  805b				   ._titleLoop
    896  805b							;; _titleLoop
    897  805b
    898  805b				   .L038		;;  clearscreen
    899  805b
    900  805b		       20 87 f0 	      jsr	clearscreen
    901  805e				   .L039		;;  wait  =  wait  +  1
    902  805e
    903  805e		       ad 42 01 	      LDA	wait
    904  8061		       18		      CLC
    905  8062		       69 01		      ADC	#1
    906  8064		       8d 42 01 	      STA	wait
    907  8067				   .L040		;;  if wait  >  10 then wait  =  0  :	bgColor  =  bgColor  +	1
    908  8067
    909  8067		       a9 0a		      LDA	#10
    910  8069		       cd 42 01 	      CMP	wait
    911  806c		       b0 0e		      BCS	.skipL040
    912  806e				   .condpart0
    913  806e		       a9 00		      LDA	#0
    914  8070		       8d 42 01 	      STA	wait
    915  8073		       ad 41 01 	      LDA	bgColor
    916  8076		       18		      CLC
    917  8077		       69 01		      ADC	#1
    918  8079		       8d 41 01 	      STA	bgColor
    919  807c				   .skipL040
    920  807c				   .L041		;;  if bgColor  >  127 then bgColor  =  0
    921  807c
    922  807c		       a9 7f		      LDA	#127
    923  807e		       cd 41 01 	      CMP	bgColor
    924  8081		       b0 05		      BCS	.skipL041
    925  8083				   .condpart1
    926  8083		       a9 00		      LDA	#0
    927  8085		       8d 41 01 	      STA	bgColor
    928  8088				   .skipL041
    929  8088				   .L042		;;  BACKGRND  =  bgColor
    930  8088
    931  8088		       ad 41 01 	      LDA	bgColor
    932  808b		       85 20		      STA	BACKGRND
    933  808d				   .
    934  808d							;; 
    935  808d
    936  808d				   .L043		;;  plotchars 'u.a.p.' 0 68 5
    937  808d
    938  808d		       4c 96 80 	      JMP	skipalphadata0
    939  8090				   alphadata0
    940  8090		       1e		      .byte.b	(<font + $1e)
    941  8091		       29		      .byte.b	(<font + $29)
    942  8092		       0a		      .byte.b	(<font + $0a)
    943  8093		       29		      .byte.b	(<font + $29)
    944  8094		       19		      .byte.b	(<font + $19)
    945  8095		       29		      .byte.b	(<font + $29)
    946  8096				   skipalphadata0
    947  8096		       a9 90		      lda	#<alphadata0
    948  8098		       85 42		      sta	temp1
    949  809a
    950  809a		       a9 80		      lda	#>alphadata0
    951  809c		       85 43		      sta	temp2
    952  809e
    953  809e		       a9 1a		      lda	#26	; width in two's complement
    954  80a0		       09 00		      ora	#0	; palette left shifted 5 bits
    955  80a2		       85 44		      sta	temp3
    956  80a4		       a9 44		      lda	#68
    957  80a6		       85 45		      sta	temp4
    958  80a8
    959  80a8		       a9 05		      lda	#5
    960  80aa
    961  80aa		       85 46		      sta	temp5
    962  80ac
    963  80ac		       20 a6 f3 	      jsr	plotcharacters
    964  80af				   .L044		;;  if joy0fire0  ||  joy0fire1 then goto _initGame
    965  80af
    966  80af		       2c 02 21 	      bit	sINPT1
    967  80b2		       50 03		      BVC	.skipL044
    968  80b4				   .condpart2
    969  80b4		       4c bc 80 	      jmp	.condpart3
    970  80b7				   .skipL044
    971  80b7		       2c 02 21 	      bit	sINPT1
    972  80ba		       10 03		      BPL	.skip0OR
    973  80bc				   .condpart3
    974  80bc		       4c c5 80 	      jmp	._initGame
    975  80bf
    976  80bf				   .skip0OR
    977  80bf				   .
    978  80bf							;; 
    979  80bf
    980  80bf				   .L045		;;  drawscreen
    981  80bf
    982  80bf		       20 c3 f0 	      jsr	drawscreen
    983  80c2				   .
    984  80c2							;; 
    985  80c2
    986  80c2				   .L046		;;  goto _titleLoop
    987  80c2
    988  80c2		       4c 5b 80 	      jmp	._titleLoop
    989  80c5
    990  80c5				   .
    991  80c5							;; 
    992  80c5
    993  80c5				   ._initGame
    994  80c5							;; _initGame
    995  80c5
    996  80c5				   .L047		;;  lives  =  3
    997  80c5
    998  80c5		       a9 03		      LDA	#3
    999  80c7		       8d 43 01 	      STA	lives
   1000  80ca				   .L048		;;  score  =  0
   1001  80ca
   1002  80ca		       a9 00		      LDA	#0
   1003  80cc		       8d 44 01 	      STA	score
   1004  80cf				   .L049		;;  BACKGRND = $00
   1005  80cf
   1006  80cf		       a9 00		      LDA	#$00
   1007  80d1		       85 20		      STA	BACKGRND
   1008  80d3				   .L050		;;  playerX  =  70
   1009  80d3
   1010  80d3		       a9 46		      LDA	#70
   1011  80d5		       8d 45 01 	      STA	playerX
   1012  80d8				   .L051		;;  playerY  =  90
   1013  80d8
   1014  80d8		       a9 5a		      LDA	#90
   1015  80da		       8d 46 01 	      STA	playerY
   1016  80dd				   .L052		;;  playerAnimFrame  =  0
   1017  80dd
   1018  80dd		       a9 00		      LDA	#0
   1019  80df		       8d 47 01 	      STA	playerAnimFrame
   1020  80e2				   .L053		;;  playerAnimWait  =	0
   1021  80e2
   1022  80e2		       a9 00		      LDA	#0
   1023  80e4		       8d 48 01 	      STA	playerAnimWait
   1024  80e7				   .
   1025  80e7							;; 
   1026  80e7
   1027  80e7				   ._gameLoop
   1028  80e7							;; _gameLoop
   1029  80e7
   1030  80e7				   .
   1031  80e7							;; 
   1032  80e7
   1033  80e7				   .L054		;;  clearscreen
   1034  80e7
   1035  80e7		       20 87 f0 	      jsr	clearscreen
   1036  80ea				   .
   1037  80ea							;; 
   1038  80ea
   1039  80ea				   .L055		;;  rem plotchars 'game'  0 68 5
   1040  80ea
   1041  80ea				   .L056		;;  plotsprite player1 1 playerX playerY playerAnimFrame
   1042  80ea
   1043  80ea		       a9 35		      lda	#<player1
   1044  80ec		       a0 04		      ldy	#player1_width
   1045  80ee		       18		      clc
   1046  80ef		       f0 06		      beq	plotspritewidthskip1
   1047  80f1				   plotspritewidthloop1
   1048  80f1		       6d 47 01 	      adc	playerAnimFrame
   1049  80f4		       88		      dey
   1050  80f5		       d0 fa		      bne	plotspritewidthloop1
   1051  80f7				   plotspritewidthskip1
   1052  80f7		       85 42		      sta	temp1
   1053  80f9
   1054  80f9		       a9 e0		      lda	#>player1
   1055  80fb		       85 43		      sta	temp2
   1056  80fd
   1057  80fd		       a9 3c		      lda	#(32|player1_width_twoscompliment)
   1058  80ff		       85 44		      sta	temp3
   1059  8101
   1060  8101		       ad 45 01 	      lda	playerX
   1061  8104		       85 45		      sta	temp4
   1062  8106
   1063  8106		       ad 46 01 	      lda	playerY
   1064  8109		       85 46		      sta	temp5
   1065  810b
   1066  810b		       a9 40		      lda	#(player1_mode|%01000000)
   1067  810d		       85 47		      sta	temp6
   1068  810f
   1069  810f		       20 e3 f2 	      jsr	plotsprite
   1070  8112				   .L057		;;  playerAnimWait  =	playerAnimWait	+ 1
   1071  8112
   1072  8112		       ad 48 01 	      LDA	playerAnimWait
   1073  8115		       18		      CLC
   1074  8116		       69 01		      ADC	#1
   1075  8118		       8d 48 01 	      STA	playerAnimWait
   1076  811b				   .L058		;;  if playerAnimWait	>  2 then playerAnimFrame  =  playerAnimFrame  +  1  :	playerAnimWait	=  0
   1077  811b
   1078  811b		       a9 02		      LDA	#2
   1079  811d		       cd 48 01 	      CMP	playerAnimWait
   1080  8120		       b0 0e		      BCS	.skipL058
   1081  8122				   .condpart4
   1082  8122		       ad 47 01 	      LDA	playerAnimFrame
   1083  8125		       18		      CLC
   1084  8126		       69 01		      ADC	#1
   1085  8128		       8d 47 01 	      STA	playerAnimFrame
   1086  812b		       a9 00		      LDA	#0
   1087  812d		       8d 48 01 	      STA	playerAnimWait
   1088  8130				   .skipL058
   1089  8130				   .L059		;;  if playerAnimFrame  >  3 then playerAnimFrame  =  0
   1090  8130
   1091  8130		       a9 03		      LDA	#3
   1092  8132		       cd 47 01 	      CMP	playerAnimFrame
   1093  8135		       b0 05		      BCS	.skipL059
   1094  8137				   .condpart5
   1095  8137		       a9 00		      LDA	#0
   1096  8139		       8d 47 01 	      STA	playerAnimFrame
   1097  813c				   .skipL059
   1098  813c				   .
   1099  813c							;; 
   1100  813c
   1101  813c				   .L060		;;  doublebuffer flip 2
   1102  813c
   1103  813c		       20 84 f5 	      jsr	flipdisplaybuffer
   1104  813f		       a9 02		      lda	#2
   1105  8141		       8d b3 01 	      sta	doublebufferminimumframetarget
   1106  8144				   .
   1107  8144							;; 
   1108  8144
   1109  8144				   .L061		;;  goto _gameLoop
   1110  8144		       4c e7 80 	      jmp	._gameLoop
   1111  8144				   DMAHOLEEND0 SET	.
   1112  8147				   gameend
   1113  8147				   DMAHOLEEND0 SET	.
   24249 bytes of ROM space left in the main area.
   1114  8147					      echo	" ",[($E000 - gameend)]d , "bytes of ROM space left in the main area."
   1115  8147				  -	      if	($E000 - gameend) < 0
   1116  8147				  -SPACEOVERFLOW SET	(SPACEOVERFLOW+1)
   1117  8147					      endif
   1118  8147				  -	      if	START_OF_ROM = .	; avoid dasm empty start-rom truncation.
   1119  8147				  -	      .byte	0
   1120  8147					      endif
   1121  8147				   START_OF_ROM SET	0	; scuttle so we always fail subsequent banks
   1122  8147
   1123  e000					      ORG	$E000,0	; *************
   1124  e000
   1125  e000		       e0 00	   font       =	$E000
   1126  e000
   1127  e000				   font
   1128  e000		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000000000000000000000000000
   1129  e020		       00 00 00 00*	      HEX	000000000000000000000000000000000000000000
   1130  e020		       e0 35	   player1    =	$E035
   1131  e035
   1132  e035				   player1
   1133  e035		       00 00 00 00	      HEX	00000000
   1134  e035		       e0 39	   player2    =	$E039
   1135  e039
   1136  e039				   player2
   1137  e039		       00 00 00 00	      HEX	00000000
   1138  e039		       e0 3d	   player3    =	$E03D
   1139  e03d
   1140  e03d				   player3
   1141  e03d		       00 00 00 00	      HEX	00000000
   1142  e03d		       e0 41	   player4    =	$E041
   1143  e041
   1144  e041				   player4
   1145  e041		       00 00 00 00	      HEX	00000000
   1146  e045
   1147  e100					      ORG	$E100,0	; *************
   1148  e100
   1149  e100							;font
   1150  e100		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000000000000000000000000000
   1151  e120		       00 00 00 00*	      HEX	000000000000000000000000000000000000000000
   1152  e135							;player1
   1153  e135		       00 00 00 00	      HEX	00000000
   1154  e139							;player2
   1155  e139		       00 00 00 00	      HEX	00000000
   1156  e13d							;player3
   1157  e13d		       00 00 00 00	      HEX	00000000
   1158  e141							;player4
   1159  e141		       00 00 00 00	      HEX	00000000
   1160  e145
   1161  e200					      ORG	$E200,0	; *************
   1162  e200
   1163  e200							;font
   1164  e200		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000000000000000000000000000
   1165  e220		       00 00 00 00*	      HEX	000000000000000000000000000000000000000000
   1166  e235							;player1
   1167  e235		       00 00 00 00	      HEX	00000000
   1168  e239							;player2
   1169  e239		       00 00 00 00	      HEX	00000000
   1170  e23d							;player3
   1171  e23d		       00 00 00 00	      HEX	00000000
   1172  e241							;player4
   1173  e241		       00 00 00 00	      HEX	00000000
   1174  e245
   1175  e300					      ORG	$E300,0	; *************
   1176  e300
   1177  e300							;font
   1178  e300		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000000000000000000000000000
   1179  e320		       00 00 00 00*	      HEX	000000000000000000000000000000000000000000
   1180  e335							;player1
   1181  e335		       00 00 00 00	      HEX	00000000
   1182  e339							;player2
   1183  e339		       00 00 00 00	      HEX	00000000
   1184  e33d							;player3
   1185  e33d		       00 00 00 00	      HEX	00000000
   1186  e341							;player4
   1187  e341		       00 00 00 00	      HEX	00000000
   1188  e345
   1189  e400					      ORG	$E400,0	; *************
   1190  e400
   1191  e400							;font
   1192  e400		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000000000000000000000000000
   1193  e420		       00 00 00 00*	      HEX	000000000000000000000000000000000000000000
   1194  e435							;player1
   1195  e435		       00 00 00 00	      HEX	00000000
   1196  e439							;player2
   1197  e439		       00 00 00 00	      HEX	00000000
   1198  e43d							;player3
   1199  e43d		       00 00 00 00	      HEX	00000000
   1200  e441							;player4
   1201  e441		       00 00 00 00	      HEX	00000000
   1202  e445
   1203  e500					      ORG	$E500,0	; *************
   1204  e500
   1205  e500							;font
   1206  e500		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000000000000000000000000000
   1207  e520		       00 00 00 00*	      HEX	000000000000000000000000000000000000000000
   1208  e535							;player1
   1209  e535		       00 00 00 00	      HEX	00000000
   1210  e539							;player2
   1211  e539		       00 00 00 00	      HEX	00000000
   1212  e53d							;player3
   1213  e53d		       00 00 00 00	      HEX	00000000
   1214  e541							;player4
   1215  e541		       00 00 00 00	      HEX	00000000
   1216  e545
   1217  e600					      ORG	$E600,0	; *************
   1218  e600
   1219  e600							;font
   1220  e600		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000000000000000000000000000
   1221  e620		       00 00 00 00*	      HEX	000000000000000000000000000000000000000000
   1222  e635							;player1
   1223  e635		       00 00 00 00	      HEX	00000000
   1224  e639							;player2
   1225  e639		       00 00 00 00	      HEX	00000000
   1226  e63d							;player3
   1227  e63d		       00 00 00 00	      HEX	00000000
   1228  e641							;player4
   1229  e641		       00 00 00 00	      HEX	00000000
   1230  e645
   1231  e700					      ORG	$E700,0	; *************
   1232  e700
   1233  e700							;font
   1234  e700		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000000000000000000000000000
   1235  e720		       00 00 00 00*	      HEX	000000000000000000000000000000000000000000
   1236  e735							;player1
   1237  e735		       0f 57 d4 00	      HEX	0f57d400
   1238  e739							;player2
   1239  e739		       07 d5 f4 00	      HEX	07d5f400
   1240  e73d							;player3
   1241  e73d		       05 f5 7c 00	      HEX	05f57c00
   1242  e741							;player4
   1243  e741		       0d 7d 5c 00	      HEX	0d7d5c00
   1244  e745
   1245  e800					      ORG	$E800,0	; *************
   1246  e800
   1247  e800							;font
   1248  e800		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000000000000000000000000000
   1249  e820		       00 00 00 00*	      HEX	000000000000000000004000540000000000000000
   1250  e835							;player1
   1251  e835		       15 55 55 00	      HEX	15555500
   1252  e839							;player2
   1253  e839		       15 55 55 00	      HEX	15555500
   1254  e83d							;player3
   1255  e83d		       15 55 55 00	      HEX	15555500
   1256  e841							;player4
   1257  e841		       15 55 55 00	      HEX	15555500
   1258  e845
   1259  e900					      ORG	$E900,0	; *************
   1260  e900
   1261  e900							;font
   1262  e900		       54 54 54 54*	      HEX	5454545404545410545444505450544054445454445444445440044454105410
   1263  e920		       44 44 10 54*	      HEX	444410544000101040101000000440545414154000
   1264  e935							;player1
   1265  e935		       55 55 55 40	      HEX	55555540
   1266  e939							;player2
   1267  e939		       55 55 55 40	      HEX	55555540
   1268  e93d							;player3
   1269  e93d		       55 55 55 40	      HEX	55555540
   1270  e941							;player4
   1271  e941		       55 55 55 40	      HEX	55555540
   1272  e945
   1273  ea00					      ORG	$EA00,0	; *************
   1274  ea00
   1275  ea00							;font
   1276  ea00		       44 10 40 04*	      HEX	4410400404444410440444444044404044441044444044444440504404104454
   1277  ea20		       54 44 10 40*	      HEX	544410405000000040000000001010400441401000
   1278  ea35							;player1
   1279  ea35		       00 00 00 00	      HEX	00000000
   1280  ea39							;player2
   1281  ea39		       00 00 00 00	      HEX	00000000
   1282  ea3d							;player3
   1283  ea3d		       a8 2a 0a 80	      HEX	a82a0a80
   1284  ea41							;player4
   1285  ea41		       00 00 00 00	      HEX	00000000
   1286  ea45
   1287  eb00					      ORG	$EB00,0	; *************
   1288  eb00
   1289  eb00							;font
   1290  eb00		       44 10 40 04*	      HEX	4410400404044410440454444044404044441004504044444454445004104444
   1291  eb20		       54 54 10 40*	      HEX	545410405400101010000000004004400441451000
   1292  eb35							;player1
   1293  eb35		       ff ff ff c0	      HEX	ffffffc0
   1294  eb39							;player2
   1295  eb39		       ab ea fa 80	      HEX	abeafa80
   1296  eb3d							;player3
   1297  eb3d		       ff ff ff c0	      HEX	ffffffc0
   1298  eb41							;player4
   1299  eb41		       ff ff ff c0	      HEX	ffffffc0
   1300  eb45
   1301  ec00					      ORG	$EC00,0	; *************
   1302  ec00
   1303  ec00							;font
   1304  ec00		       44 10 54 14*	      HEX	4410541454045410545444504044505044541004504054444444444454104444
   1305  ec20		       44 10 10 50*	      HEX	441010505500101010000054004004400414441000
   1306  ec35							;player1
   1307  ec35		       a8 2a 0a 80	      HEX	a82a0a80
   1308  ec39							;player2
   1309  ec39		       00 00 00 00	      HEX	00000000
   1310  ec3d							;player3
   1311  ec3d		       00 00 00 00	      HEX	00000000
   1312  ec41							;player4
   1313  ec41		       00 00 00 00	      HEX	00000000
   1314  ec45
   1315  ed00					      ORG	$ED00,0	; *************
   1316  ed00
   1317  ed00							;font
   1318  ed00		       44 10 04 04*	      HEX	4410040444544004444444444044404040441004444054444444444440104444
   1319  ed20		       44 54 44 14*	      HEX	445444145400041010000000004004400444451000
   1320  ed35							;player1
   1321  ed35		       55 55 55 40	      HEX	55555540
   1322  ed39							;player2
   1323  ed39		       55 55 55 40	      HEX	55555540
   1324  ed3d							;player3
   1325  ed3d		       55 55 55 40	      HEX	55555540
   1326  ed41							;player4
   1327  ed41		       55 55 55 40	      HEX	55555540
   1328  ed45
   1329  ee00					      ORG	$EE00,0	; *************
   1330  ee00
   1331  ee00							;font
   1332  ee00		       44 50 04 04*	      HEX	4450040444404044444444444044404040441004444054444444444440104444
   1333  ee20		       44 44 44 04*	      HEX	444444045044441004000000001010400444401000
   1334  ee35							;player1
   1335  ee35		       15 55 55 00	      HEX	15555500
   1336  ee39							;player2
   1337  ee39		       15 55 55 00	      HEX	15555500
   1338  ee3d							;player3
   1339  ee3d		       15 55 55 00	      HEX	15555500
   1340  ee41							;player4
   1341  ee41		       15 55 55 00	      HEX	15555500
   1342  ee45
   1343  ef00					      ORG	$EF00,0	; *************
   1344  ef00
   1345  ef00							;font
   1346  ef00		       54 10 54 54*	      HEX	5410545444545454545454505450545454445404444044545454545454544444
   1347  ef20		       44 44 44 54*	      HEX	444444544044541004000000000440545410154000
   1348  ef35							;player1
   1349  ef35		       05 f5 7c 00	      HEX	05f57c00
   1350  ef39							;player2
   1351  ef39		       07 d5 f4 00	      HEX	07d5f400
   1352  ef3d							;player3
   1353  ef3d		       0f 57 d4 00	      HEX	0f57d400
   1354  ef41							;player4
   1355  ef41		       0d 5f 5c 00	      HEX	0d5f5c00
   1356  ef45				  -	      if	SPACEOVERFLOW > 0
   1357  ef45				  -	      echo	""
   1358  ef45				  -	      echo	"######## ERROR: space overflow detected in",[SPACEOVERFLOW]d,"areas."
   1359  ef45				  -	      echo	"######## look above for areas with negative ROM space left."
   1360  ef45				  -	      echo	"######## Aborting assembly."
   1361  ef45				  -	      ERR
   1362  ef45					      endif
   1363  ef45
   1364  ef45
   1365  ef45							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1366  ef45
   1367  ef45					      ifnconst	bankswitchmode
   1368  ef45					      if	( * < $f000 )
   1369  f000					      ORG	$F000
   1370  f000					      endif
   1371  f000				  -	      else
   1372  f000				  -	      ifconst	ROM128K
   1373  f000				  -	      if	( * < $f000 )
   1374  f000				  -	      ORG	$27000
   1375  f000				  -	      RORG	$F000
   1376  f000				  -	      endif
   1377  f000				  -	      endif
   1378  f000				  -	      ifconst	ROM144K
   1379  f000				  -	      if	( * < $f000 )
   1380  f000				  -	      ORG	$27000
   1381  f000				  -	      RORG	$F000
   1382  f000				  -	      endif
   1383  f000				  -	      endif
   1384  f000				  -	      ifconst	ROM256K
   1385  f000				  -	      if	( * < $f000 )
   1386  f000				  -	      ORG	$47000
   1387  f000				  -	      RORG	$F000
   1388  f000				  -	      endif
   1389  f000				  -	      endif
   1390  f000				  -	      ifconst	ROM272K
   1391  f000				  -	      if	( * < $f000 )
   1392  f000				  -	      ORG	$47000
   1393  f000				  -	      RORG	$F000
   1394  f000				  -	      endif
   1395  f000				  -	      endif
   1396  f000				  -	      ifconst	ROM512K
   1397  f000				  -	      if	( * < $f000 )
   1398  f000				  -	      ORG	$87000
   1399  f000				  -	      RORG	$F000
   1400  f000				  -	      endif
   1401  f000				  -	      endif
   1402  f000				  -	      ifconst	ROM528K
   1403  f000				  -	      if	( * < $f000 )
   1404  f000				  -	      ORG	$87000
   1405  f000				  -	      RORG	$F000
   1406  f000				  -	      endif
   1407  f000				  -	      endif
   1408  f000					      endif
   1409  f000
   1410  f000							; all of these "modules" have conditional clauses in them, so even though
   1411  f000							; they're always included here, they don't take up rom unless the user
   1412  f000							; explicitly enables support for the feature.
   1413  f000
   1414  f000					      ifnconst	included.rmtplayer.asm
------- FILE rmtplayer.asm LEVEL 2 PASS 3
      0  f000					      include	rmtplayer.asm	; requires page alignment, so go first
      1  f000				  -	      ifconst	RMT
      2  f000				  -
      3  f000				  -rmtmodulestart
      4  f000				  -
      5  f000				  -			;*
      6  f000				  -			;* Raster Music Tracker, RMT Atari routine version 1.20030223
      7  f000				  -			;* (c) Radek Sterba, Raster/C.P.U., 2002 - 2003
      8  f000				  -			;* http://raster.atari.org
      9  f000				  -			;*
     10  f000				  -			;* Some small changes to allow using this code with DASM cross assembler and
     11  f000				  -			;* to compile for cartridge based systems, like the Atari 5200 or Atari 7800,
     12  f000				  -			;* by Eckhard Stolberg ( http://home.arcor.de/estolberg/ ).
     13  f000				  -			;*
     14  f000				  -			;* Warnings:
     15  f000				  -			;*
     16  f000				  -			;* 1. RMT player routine needs 19 itself reserved bytes in zero page (no accessed
     17  f000				  -			;*    from any other routines) as well as cca 1KB of memory before the "PLAYER"
     18  f000				  -			;*    address for frequency tables and functionary variables. It's:
     19  f000				  -			;*	  a) from PLAYER-$400 to PLAYER for stereo RMTplayer
     20  f000				  -			;*    b) from PLAYER-$380 to PLAYER for mono RMTplayer
     21  f000				  -			;*
     22  f000				  -			;* note: This has been changed for 5200 & 7800 compatibility. Now PLAYER points
     23  f000				  -			;*	  to the start of the frequency tables. The player routines follows after
     24  f000				  -			;*	  that. The variables are now independent and can be located with
     25  f000				  -			;*	  PLAYER_VAR_RAM and PLAYER_ZP_RAM (see below):
     26  f000				  -			;*
     27  f000				  -			;* 2. RMT player routine MUST (!!!) be compiled from the begin of the memory page.
     28  f000				  -			;*    i.e. "PLAYER" address can be $..00 only!
     29  f000				  -			;*
     30  f000				  -			;* 3. Because of RMTplayer provides a lot of effects, it spent a lot of CPU time.
     31  f000				  -			;*
     32  f000				  -			;*
     33  f000				  -			;* Define the following equates here or in your main code file.
     34  f000				  -			;* Set the values according to the system you compile for.
     35  f000				  -			;*
     36  f000				  -
     37  f000				  -POKEY_BASE equ	pokeyaddress
     38  f000				  -PLAYER_ZP_RAM equ	songchannel1layer1lo	; player routine needs 19 bytes of zero page RAM
     39  f000				  -PLAYER_VAR_RAM equ	RMTRAM	;variables in main RAM - 173 bytes mono - 337 stereo
     40  f000				  -ROM_BASED  equ	1	;using a ROM based system - no self modifying code
     41  f000				  -STEREO8T   equ	0	;0 => compile RMTplayer for mono 4 tracks
     42  f000				  -			;				    ;1 => compile RMTplayer for stereo 8 tracks
     43  f000				  -
     44  f000				  -rmt_ispeed equ	PLAYER_ZP_RAM+19
     45  f000				  -rmt_intcount equ	PLAYER_ZP_RAM+20
     46  f000				  -
     47  f000				  -			;*
     48  f000				  -
     49  f000				  -	      IF	STEREO8T
     50  f000				  -TRACKS     equ	8
     51  f000				  -	      ELSE
     52  f000				  -TRACKS     equ	4
     53  f000				  -	      EIF
     54  f000				  -
     55  f000				  -			;*
     56  f000				  -			;* RMT FEATures definitions
     57  f000				  -			;* For optimizations of RMT player routine to concrete RMT modul only!
     58  f000				  -			;* --------BEGIN--------
     59  f000				  -FEAT_COMMAND1 equ	1	;* cca 8 bytes
     60  f000				  -FEAT_COMMAND2 equ	1	;* cca 20 bytes (+save 1 address in zero page) and quicker whole RMT routine
     61  f000				  -FEAT_COMMAND3 equ	1	;* cca 12 bytes
     62  f000				  -FEAT_COMMAND4 equ	1	;* cca 15 bytes
     63  f000				  -FEAT_COMMAND5 equ	1	;* cca 67 bytes
     64  f000				  -FEAT_COMMAND6 equ	1	;* cca 15 bytes
     65  f000				  -			;* COMMAND7 SETNOTE (i.e. command 7 with parameter != $80)
     66  f000				  -FEAT_COMMAND7SETNOTE equ	1	;* cca 12 bytes
     67  f000				  -			;* COMMAND7 VOLUMEONLY (i.e. command 7 with parameter == $80)
     68  f000				  -FEAT_COMMAND7VOLUMEONLY equ	1	;* cca 74 bytes
     69  f000				  -			;* PORTAMENTO
     70  f000				  -FEAT_PORTAMENTO equ	1	;* cca 138 bytes and quicker whole RMT routine
     71  f000				  -			;* FILTER
     72  f000				  -FEAT_FILTER equ	1	;* cca 179 bytes and quicker whole RMT routine
     73  f000				  -FEAT_FILTERG0L equ	1	;* (cca 38 bytes for each)
     74  f000				  -FEAT_FILTERG1L equ	1
     75  f000				  -FEAT_FILTERG0R equ	1
     76  f000				  -FEAT_FILTERG1R equ	1
     77  f000				  -			;* BASS16B (i.e. distortion value 6)
     78  f000				  -FEAT_BASS16 equ	1	;* cca 194 bytes +128bytes freq table and quicker whole RMT routine
     79  f000				  -FEAT_BASS16G1L equ	1	;* (cca 47 bytes for each)
     80  f000				  -FEAT_BASS16G3L equ	1
     81  f000				  -FEAT_BASS16G1R equ	1
     82  f000				  -FEAT_BASS16G3R equ	1
     83  f000				  -			;* VOLUME ONLY for particular generators
     84  f000				  -FEAT_VOLUMEONLYG0L equ	1	;* (cca 7 bytes for each)
     85  f000				  -FEAT_VOLUMEONLYG2L equ	1
     86  f000				  -FEAT_VOLUMEONLYG3L equ	1
     87  f000				  -FEAT_VOLUMEONLYG0R equ	1
     88  f000				  -FEAT_VOLUMEONLYG2R equ	1
     89  f000				  -FEAT_VOLUMEONLYG3R equ	1
     90  f000				  -			;* TABLE TYPE (i.e. TABLETYPE=1)
     91  f000				  -FEAT_TABLETYPE equ	1	;* cca 53 bytes and quicker whole RMT routine
     92  f000				  -			;* TABLE MODE (i.e. TABLEMODE=1)
     93  f000				  -FEAT_TABLEMODE equ	1	;* cca 16 bytes and quicker whole RMT routine
     94  f000				  -			;* AUDCTLMANUALSET (i.e. any MANUAL AUDCTL setting to nonzero value)
     95  f000				  -FEAT_AUDCTLMANUALSET equ	1	;* cca 27 bytes and quicker whole RMT routine
     96  f000				  -			;* --------END--------
     97  f000				  -			;*
     98  f000				  -			;*
     99  f000				  -			;* RMT ZeroPage addresses
    100  f000				  -
    101  f000				  -MEMLOC     SET	PLAYER_ZP_RAM
    102  f000				  -p_tis      =	MEMLOC
    103  f000				  -p_instrstable =	MEMLOC
    104  f000				  -MEMLOC     SET	(MEMLOC+2)
    105  f000				  -p_trackslbstable =	MEMLOC
    106  f000				  -MEMLOC     SET	(MEMLOC+2)
    107  f000				  -p_trackshbstable =	MEMLOC
    108  f000				  -MEMLOC     SET	(MEMLOC+2)
    109  f000				  -p_song     =	MEMLOC
    110  f000				  -MEMLOC     SET	(MEMLOC+2)
    111  f000				  -
    112  f000				  -_ns	      =	MEMLOC
    113  f000				  -MEMLOC     SET	(MEMLOC+2)
    114  f000				  -_nr	      =	MEMLOC
    115  f000				  -MEMLOC     SET	(MEMLOC+2)
    116  f000				  -_nt	      =	MEMLOC
    117  f000				  -MEMLOC     SET	(MEMLOC+2)
    118  f000				  -
    119  f000				  -rmtreg1    =	MEMLOC
    120  f000				  -MEMLOC     SET	(MEMLOC+1)
    121  f000				  -rmtreg2    =	MEMLOC
    122  f000				  -MEMLOC     SET	(MEMLOC+1)
    123  f000				  -rmtreg3    =	MEMLOC
    124  f000				  -MEMLOC     SET	(MEMLOC+1)
    125  f000				  -_tmp       =	MEMLOC
    126  f000				  -MEMLOC     SET	(MEMLOC+1)
    127  f000				  -	      IF	FEAT_COMMAND2
    128  f000				  -frqaddcmd2 =	MEMLOC
    129  f000				  -MEMLOC     SET	(MEMLOC+1)
    130  f000				  -	      EIF
    131  f000				  -
    132  f000				  -			;*
    133  f000				  -			;* Variables in main RAM used by player routine.
    134  f000				  -			;* 337 bytes for stereo - 173 bytes for mono
    135  f000				  -			;*
    136  f000				  -
    137  f000				  -MEMLOC     SET	PLAYER_VAR_RAM
    138  f000				  -track_variables =	MEMLOC
    139  f000				  -
    140  f000				  -trackn_db  =	MEMLOC
    141  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    142  f000				  -trackn_hb  =	MEMLOC
    143  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    144  f000				  -trackn_idx =	MEMLOC
    145  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    146  f000				  -trackn_pause =	MEMLOC
    147  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    148  f000				  -trackn_note =	MEMLOC
    149  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    150  f000				  -trackn_volume =	MEMLOC
    151  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    152  f000				  -trackn_distor =	MEMLOC
    153  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    154  f000				  -trackn_shiftfrq =	MEMLOC
    155  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    156  f000				  -
    157  f000				  -	      IF	FEAT_PORTAMENTO
    158  f000				  -trackn_portafrqc =	MEMLOC
    159  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    160  f000				  -trackn_portafrqa =	MEMLOC
    161  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    162  f000				  -trackn_portaspeed =	MEMLOC
    163  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    164  f000				  -trackn_portaspeeda =	MEMLOC
    165  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    166  f000				  -trackn_portadepth =	MEMLOC
    167  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    168  f000				  -	      EIF
    169  f000				  -
    170  f000				  -trackn_instrx2 =	MEMLOC
    171  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    172  f000				  -trackn_instrdb =	MEMLOC
    173  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    174  f000				  -trackn_instrhb =	MEMLOC
    175  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    176  f000				  -trackn_instridx =	MEMLOC
    177  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    178  f000				  -trackn_instrlen =	MEMLOC
    179  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    180  f000				  -trackn_instrlop =	MEMLOC
    181  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    182  f000				  -trackn_instrreachend =	MEMLOC
    183  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    184  f000				  -trackn_volumeslidedepth =	MEMLOC
    185  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    186  f000				  -trackn_volumeslidevalue =	MEMLOC
    187  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    188  f000				  -trackn_volumemin =	MEMLOC
    189  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    190  f000				  -trackn_effdelay =	MEMLOC
    191  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    192  f000				  -trackn_effvibratoa =	MEMLOC
    193  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    194  f000				  -trackn_effvibratobeg =	MEMLOC
    195  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    196  f000				  -trackn_effvibratoend =	MEMLOC
    197  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    198  f000				  -trackn_effshift =	MEMLOC
    199  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    200  f000				  -trackn_tabletypespeed =	MEMLOC
    201  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    202  f000				  -
    203  f000				  -	      IF	FEAT_TABLEMODE
    204  f000				  -trackn_tablemode =	MEMLOC
    205  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    206  f000				  -	      EIF
    207  f000				  -
    208  f000				  -trackn_tablenote =	MEMLOC
    209  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    210  f000				  -
    211  f000				  -trackn_tablea =	MEMLOC
    212  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    213  f000				  -trackn_tableend =	MEMLOC
    214  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    215  f000				  -trackn_tablelop =	MEMLOC
    216  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    217  f000				  -trackn_tablespeeda =	MEMLOC
    218  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    219  f000				  -trackn_command =	MEMLOC
    220  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    221  f000				  -
    222  f000				  -	      IF	FEAT_BASS16
    223  f000				  -trackn_outnote =	MEMLOC
    224  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    225  f000				  -	      EIF
    226  f000				  -	      IF	FEAT_FILTER
    227  f000				  -trackn_filter =	MEMLOC
    228  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    229  f000				  -	      EIF
    230  f000				  -
    231  f000				  -trackn_audf =	MEMLOC
    232  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    233  f000				  -trackn_audc =	MEMLOC
    234  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    235  f000				  -
    236  f000				  -	      IF	FEAT_AUDCTLMANUALSET
    237  f000				  -trackn_audctl =	MEMLOC
    238  f000				  -MEMLOC     SET	(MEMLOC+TRACKS)
    239  f000				  -	      EIF
    240  f000				  -
    241  f000				  -v_audctl   =	MEMLOC
    242  f000				  -MEMLOC     SET	(MEMLOC+1)
    243  f000				  -v_audctl2  =	MEMLOC
    244  f000				  -MEMLOC     SET	(MEMLOC+1)
    245  f000				  -v_speed    =	MEMLOC
    246  f000				  -MEMLOC     SET	(MEMLOC+1)
    247  f000				  -v_aspeed   =	MEMLOC
    248  f000				  -MEMLOC     SET	(MEMLOC+1)
    249  f000				  -v_bspeed   =	MEMLOC
    250  f000				  -MEMLOC     SET	(MEMLOC+1)
    251  f000				  -v_instrspeed =	MEMLOC
    252  f000				  -MEMLOC     SET	(MEMLOC+1)
    253  f000				  -v_ainstrspeed =	MEMLOC
    254  f000				  -MEMLOC     SET	(MEMLOC+1)
    255  f000				  -v_maxtracklen =	MEMLOC
    256  f000				  -MEMLOC     SET	(MEMLOC+1)
    257  f000				  -v_abeat    =	MEMLOC
    258  f000				  -MEMLOC     SET	(MEMLOC+1)
    259  f000				  -
    260  f000				  -track_endvariables =	MEMLOC
    261  f000				  -
    262  f000				  -			;*
    263  f000				  -			;* Data tables used by player routine.
    264  f000				  -			;*
    265  f000				  -	      ALIGN	256
    266  f000				  -PLAYER     =	.
    267  f000				  -
    268  f000				  -volumetab
    269  f000				  -	      dc.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    270  f000				  -	      dc.b	$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$01,$01,$01
    271  f000				  -	      dc.b	$00,$00,$00,$00,$01,$01,$01,$01,$01,$01,$01,$01,$02,$02,$02,$02
    272  f000				  -	      dc.b	$00,$00,$00,$01,$01,$01,$01,$01,$02,$02,$02,$02,$02,$03,$03,$03
    273  f000				  -	      dc.b	$00,$00,$01,$01,$01,$01,$02,$02,$02,$02,$03,$03,$03,$03,$04,$04
    274  f000				  -	      dc.b	$00,$00,$01,$01,$01,$02,$02,$02,$03,$03,$03,$04,$04,$04,$05,$05
    275  f000				  -	      dc.b	$00,$00,$01,$01,$02,$02,$02,$03,$03,$04,$04,$04,$05,$05,$06,$06
    276  f000				  -	      dc.b	$00,$00,$01,$01,$02,$02,$03,$03,$04,$04,$05,$05,$06,$06,$07,$07
    277  f000				  -	      dc.b	$00,$01,$01,$02,$02,$03,$03,$04,$04,$05,$05,$06,$06,$07,$07,$08
    278  f000				  -	      dc.b	$00,$01,$01,$02,$02,$03,$04,$04,$05,$05,$06,$07,$07,$08,$08,$09
    279  f000				  -	      dc.b	$00,$01,$01,$02,$03,$03,$04,$05,$05,$06,$07,$07,$08,$09,$09,$0A
    280  f000				  -	      dc.b	$00,$01,$01,$02,$03,$04,$04,$05,$06,$07,$07,$08,$09,$0A,$0A,$0B
    281  f000				  -	      dc.b	$00,$01,$02,$02,$03,$04,$05,$06,$06,$07,$08,$09,$0A,$0A,$0B,$0C
    282  f000				  -	      dc.b	$00,$01,$02,$03,$03,$04,$05,$06,$07,$08,$09,$0A,$0A,$0B,$0C,$0D
    283  f000				  -	      dc.b	$00,$01,$02,$03,$04,$05,$06,$07,$07,$08,$09,$0A,$0B,$0C,$0D,$0E
    284  f000				  -	      dc.b	$00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0A,$0B,$0C,$0D,$0E,$0F
    285  f000				  -
    286  f000				  -frqtab
    287  f000				  -			;	ERT [<frqtab]!=0	;* frqtab must begin at the memory page bound! (i.e. $..00 address)
    288  f000				  -frqtabbass1
    289  f000				  -	      dc.b	$BF,$B6,$AA,$A1,$98,$8F,$89,$80,$F2,$E6,$DA,$CE,$BF,$B6,$AA,$A1
    290  f000				  -	      dc.b	$98,$8F,$89,$80,$7A,$71,$6B,$65,$5F,$5C,$56,$50,$4D,$47,$44,$3E
    291  f000				  -	      dc.b	$3C,$38,$35,$32,$2F,$2D,$2A,$28,$25,$23,$21,$1F,$1D,$1C,$1A,$18
    292  f000				  -	      dc.b	$17,$16,$14,$13,$12,$11,$10,$0F,$0E,$0D,$0C,$0B,$0A,$09,$08,$07
    293  f000				  -frqtabbass2
    294  f000				  -	      dc.b	$FF,$F1,$E4,$D8,$CA,$C0,$B5,$AB,$A2,$99,$8E,$87,$7F,$79,$73,$70
    295  f000				  -	      dc.b	$66,$61,$5A,$55,$52,$4B,$48,$43,$3F,$3C,$39,$37,$33,$30,$2D,$2A
    296  f000				  -	      dc.b	$28,$25,$24,$21,$1F,$1E,$1C,$1B,$19,$17,$16,$15,$13,$12,$11,$10
    297  f000				  -	      dc.b	$0F,$0E,$0D,$0C,$0B,$0A,$09,$08,$07,$06,$05,$04,$03,$02,$01,$00
    298  f000				  -frqtabpure
    299  f000				  -	      dc.b	$F3,$E6,$D9,$CC,$C1,$B5,$AD,$A2,$99,$90,$88,$80,$79,$72,$6C,$66
    300  f000				  -	      dc.b	$60,$5B,$55,$51,$4C,$48,$44,$40,$3C,$39,$35,$32,$2F,$2D,$2A,$28
    301  f000				  -	      dc.b	$25,$23,$21,$1F,$1D,$1C,$1A,$18,$17,$16,$14,$13,$12,$11,$10,$0F
    302  f000				  -	      dc.b	$0E,$0D,$0C,$0B,$0A,$09,$08,$07,$06,$05,$04,$03,$02,$01,$00,$00
    303  f000				  -	      IF	FEAT_BASS16
    304  f000				  -frqtabbasshi
    305  f000				  -	      dc.b	$0D,$0D,$0C,$0B,$0B,$0A,$0A,$09,$08,$08,$07,$07,$07,$06,$06,$05
    306  f000				  -	      dc.b	$05,$05,$04,$04,$04,$04,$03,$03,$03,$03,$03,$02,$02,$02,$02,$02
    307  f000				  -	      dc.b	$02,$02,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00
    308  f000				  -	      dc.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    309  f000				  -	      EIF
    310  f000				  -
    311  f000				  -	      IF	FEAT_BASS16
    312  f000				  -frqtabbasslo
    313  f000				  -	      dc.b	$F2,$33,$96,$E2,$38,$8C,$00,$6A,$E8,$6A,$EF,$80,$08,$AE,$46,$E6
    314  f000				  -	      dc.b	$95,$41,$F6,$B0,$6E,$30,$F6,$BB,$84,$52,$22,$F4,$C8,$A0,$7A,$55
    315  f000				  -	      dc.b	$34,$14,$F5,$D8,$BD,$A4,$8D,$77,$60,$4E,$38,$27,$15,$06,$F7,$E8
    316  f000				  -	      dc.b	$DB,$CF,$C3,$B8,$AC,$A2,$9A,$90,$88,$7F,$78,$70,$6A,$64,$5E,$00
    317  f000				  -	      EIF
    318  f000				  -
    319  f000				  -	      IF	ROM_BASED
    320  f000				  -rts_tab    dc.w	cmd0-1,cmd1-1,cmd2-1,cmd3-1,cmd4-1,cmd5-1,cmd6-1,cmd7-1
    321  f000				  -	      EIF
    322  f000				  -INSTRPAR   equ	12
    323  f000				  -tabbeganddistor
    324  f000				  -	      dc.b	frqtabpure-frqtab,$00
    325  f000				  -	      dc.b	frqtabpure-frqtab,$20
    326  f000				  -	      dc.b	frqtabpure-frqtab,$40
    327  f000				  -	      dc.b	frqtabbass1-frqtab,$c0
    328  f000				  -	      dc.b	frqtabpure-frqtab,$80
    329  f000				  -	      dc.b	frqtabpure-frqtab,$a0
    330  f000				  -	      dc.b	frqtabbass1-frqtab,$c0
    331  f000				  -	      dc.b	frqtabbass2-frqtab,$c0
    332  f000				  -vibtabbeg  dc.b	0,vib1-vib0,vib2-vib0,vib3-vib0,vibx-vib0
    333  f000				  -vib0       dc.b	0
    334  f000				  -vib1       dc.b	1,-1,-1,1
    335  f000				  -vib2       dc.b	1,0,-1,-1,0,1
    336  f000				  -vib3       dc.b	1,1,0,-1,-1,-1,-1,0,1,1
    337  f000				  -vibx
    338  f000				  -emptytrack
    339  f000				  -	      dc.b	62,0
    340  f000				  -
    341  f000				  -			;*
    342  f000				  -			;* Set of RMT main vectors:
    343  f000				  -			;*
    344  f000				  -RASTERMUSICTRACKER
    345  f000				  -	      jmp	rmt_init
    346  f000				  -	      jmp	rmt_play
    347  f000				  -	      jmp	rmt_p3
    348  f000				  -	      jmp	rmt_silence
    349  f000				  -	      jmp	SetPokey
    350  f000				  -rmt_init
    351  f000				  -	      stx	_ns
    352  f000				  -	      sty	_ns+1
    353  f000				  -	      pha
    354  f000				  -	      IF	track_endvariables-track_variables>255
    355  f000				  -	      ldy	#0
    356  f000				  -	      tya
    357  f000				  -rmtri0     sta	track_variables,y
    358  f000				  -	      sta	track_endvariables-$100,y
    359  f000				  -	      iny
    360  f000				  -	      bne	rmtri0
    361  f000				  -	      ELSE
    362  f000				  -	      ldy	#track_endvariables-track_variables
    363  f000				  -	      lda	#0
    364  f000				  -rmtri0     sta	track_variables-1,y
    365  f000				  -	      dey
    366  f000				  -	      bne	rmtri0
    367  f000				  -	      EIF
    368  f000				  -	      ldy	#4
    369  f000				  -	      lda	(_ns),y
    370  f000				  -	      sta	v_maxtracklen
    371  f000				  -	      iny
    372  f000				  -	      lda	(_ns),y
    373  f000				  -	      sta	v_speed
    374  f000				  -	      iny
    375  f000				  -	      lda	(_ns),y
    376  f000				  -	      sta	v_instrspeed
    377  f000				  -	      sta	v_ainstrspeed
    378  f000				  -	      ldy	#8
    379  f000				  -rmtri1     lda	(_ns),y
    380  f000				  -	      sta	p_tis-8,y
    381  f000				  -	      iny
    382  f000				  -	      cpy	#8+8
    383  f000				  -	      bne	rmtri1
    384  f000				  -	      pla
    385  f000				  -	      pha
    386  f000				  -	      IF	STEREO8T
    387  f000				  -	      asl
    388  f000				  -	      asl
    389  f000				  -	      asl
    390  f000				  -	      clc
    391  f000				  -	      adc	p_song
    392  f000				  -	      sta	p_song
    393  f000				  -	      pla
    394  f000				  -	      and	#$e0
    395  f000				  -	      asl
    396  f000				  -	      rol
    397  f000				  -	      rol
    398  f000				  -	      rol
    399  f000				  -	      ELSE
    400  f000				  -	      asl
    401  f000				  -	      asl
    402  f000				  -	      clc
    403  f000				  -	      adc	p_song
    404  f000				  -	      sta	p_song
    405  f000				  -	      pla
    406  f000				  -	      and	#$c0
    407  f000				  -	      asl
    408  f000				  -	      rol
    409  f000				  -	      rol
    410  f000				  -	      EIF
    411  f000				  -	      adc	p_song+1
    412  f000				  -	      sta	p_song+1
    413  f000				  -	      jsr	GetSongLine
    414  f000				  -	      jsr	GetTrackLine
    415  f000				  -	      jsr	InitOfNewSetInstrumentsOnly
    416  f000				  -	      jsr	rmt_silence
    417  f000				  -	      lda	v_instrspeed
    418  f000				  -	      rts
    419  f000				  -rmt_silence
    420  f000				  -	      IF	STEREO8T
    421  f000				  -	      lda	#0
    422  f000				  -	      sta	POKEY_BASE+$08
    423  f000				  -	      sta	POKEY_BASE_S+$08
    424  f000				  -	      ldy	#3
    425  f000				  -	      sty	POKEY_BASE+$0f
    426  f000				  -	      sty	POKEY_BASE_S+$0f
    427  f000				  -	      ldy	#8
    428  f000				  -rmtsi1     sta	POKEY_BASE+$00,y
    429  f000				  -	      sta	POKEY_BASE_S+$00,y
    430  f000				  -	      dey
    431  f000				  -	      bpl	rmtsi1
    432  f000				  -	      ELSE
    433  f000				  -	      lda	#0
    434  f000				  -	      sta	POKEY_BASE+$08
    435  f000				  -	      ldy	#3
    436  f000				  -	      sty	POKEY_BASE+$0f
    437  f000				  -	      ldy	#8
    438  f000				  -rmtsi1     sta	POKEY_BASE+$00,y
    439  f000				  -	      dey
    440  f000				  -	      bpl	rmtsi1
    441  f000				  -	      EIF
    442  f000				  -	      rts
    443  f000				  -GetSongLine
    444  f000				  -	      ldx	#0
    445  f000				  -	      stx	v_abeat
    446  f000				  -rmtnn0
    447  f000				  -	      ldx	#0
    448  f000				  -rmtnn1     txa
    449  f000				  -	      tay
    450  f000				  -	      lda	(p_song),y
    451  f000				  -	      cmp	#$fe
    452  f000				  -	      bcs	rmtnn2
    453  f000				  -	      tay
    454  f000				  -	      lda	(p_trackslbstable),y
    455  f000				  -	      sta	trackn_db,x
    456  f000				  -	      lda	(p_trackshbstable),y
    457  f000				  -rmtnn1a    sta	trackn_hb,x
    458  f000				  -	      lda	#0
    459  f000				  -	      sta	trackn_idx,x
    460  f000				  -	      lda	#1
    461  f000				  -	      sta	trackn_pause,x
    462  f000				  -	      lda	#$80
    463  f000				  -	      sta	trackn_instrx2,x
    464  f000				  -	      inx
    465  f000				  -	      cpx	#TRACKS
    466  f000				  -	      bne	rmtnn1
    467  f000				  -	      lda	p_song
    468  f000				  -	      clc
    469  f000				  -	      adc	#TRACKS
    470  f000				  -	      sta	p_song
    471  f000				  -	      bcc	rmtnn1b
    472  f000				  -	      inc	p_song+1
    473  f000				  -rmtnn1b
    474  f000				  -	      rts
    475  f000				  -rmtnn2
    476  f000				  -	      beq	rmtnn3
    477  f000				  -rmtnn2a    lda	#<emptytrack
    478  f000				  -	      sta	trackn_db,x
    479  f000				  -	      lda	#>emptytrack
    480  f000				  -	      jmp	rmtnn1a
    481  f000				  -rmtnn3
    482  f000				  -	      ldy	#2
    483  f000				  -	      lda	(p_song),y
    484  f000				  -	      tax
    485  f000				  -	      iny
    486  f000				  -	      lda	(p_song),y
    487  f000				  -	      sta	p_song+1
    488  f000				  -	      stx	p_song
    489  f000				  -	      jmp	rmtnn0
    490  f000				  -GetTrackLine
    491  f000				  -rmtoo0
    492  f000				  -rmtoo0a
    493  f000				  -	      lda	v_speed
    494  f000				  -	      sta	v_bspeed
    495  f000				  -	      ldx	#0
    496  f000				  -rmtoo1
    497  f000				  -	      lda	trackn_pause,x
    498  f000				  -	      beq	rmtoo1x
    499  f000				  -	      dec	trackn_pause,x
    500  f000				  -	      bne	rmtoo1x
    501  f000				  -	      inc	trackn_pause,x
    502  f000				  -rmtoo1b
    503  f000				  -	      lda	trackn_db,x
    504  f000				  -	      sta	_ns
    505  f000				  -	      lda	trackn_hb,x
    506  f000				  -	      sta	_ns+1
    507  f000				  -rmtoo1i
    508  f000				  -	      ldy	trackn_idx,x
    509  f000				  -	      lda	(_ns),y
    510  f000				  -	      sta	rmtreg1
    511  f000				  -	      iny
    512  f000				  -	      lda	(_ns),y
    513  f000				  -	      sta	rmtreg2
    514  f000				  -	      iny
    515  f000				  -	      tya
    516  f000				  -	      sta	trackn_idx,x
    517  f000				  -	      lda	rmtreg1
    518  f000				  -	      and	#$3f
    519  f000				  -	      cmp	#61
    520  f000				  -	      beq	rmtoo1a
    521  f000				  -	      bcs	rmtoo2
    522  f000				  -	      sta	trackn_note,x
    523  f000				  -	      IF	FEAT_BASS16
    524  f000				  -	      sta	trackn_outnote,x
    525  f000				  -	      EIF
    526  f000				  -	      lda	rmtreg2
    527  f000				  -	      lsr
    528  f000				  -	      and	#$3f*2
    529  f000				  -	      sta	trackn_instrx2,x
    530  f000				  -rmtoo1a    lda	rmtreg2
    531  f000				  -	      lsr
    532  f000				  -	      ror	rmtreg1
    533  f000				  -	      lsr
    534  f000				  -	      ror	rmtreg1
    535  f000				  -	      lda	rmtreg1
    536  f000				  -	      and	#$f0
    537  f000				  -	      sta	trackn_volume,x
    538  f000				  -rmtoo1x
    539  f000				  -	      inx
    540  f000				  -	      cpx	#TRACKS
    541  f000				  -	      bne	rmtoo1
    542  f000				  -	      lda	v_bspeed
    543  f000				  -	      sta	v_speed
    544  f000				  -	      sta	v_aspeed
    545  f000				  -	      rts
    546  f000				  -rmtoo2
    547  f000				  -	      cmp	#63
    548  f000				  -	      beq	rmtoo63
    549  f000				  -	      lda	rmtreg1
    550  f000				  -	      and	#$c0
    551  f000				  -	      beq	rmtoo62_b
    552  f000				  -	      asl
    553  f000				  -	      rol
    554  f000				  -	      rol
    555  f000				  -	      sta	trackn_pause,x
    556  f000				  -	      dec	trackn_idx,x
    557  f000				  -	      jmp	rmtoo1x
    558  f000				  -rmtoo62_b
    559  f000				  -	      lda	rmtreg2
    560  f000				  -	      sta	trackn_pause,x
    561  f000				  -	      jmp	rmtoo1x
    562  f000				  -rmtoo63
    563  f000				  -	      lda	rmtreg1
    564  f000				  -	      bmi	rmtoo63_1X
    565  f000				  -	      lda	rmtreg2
    566  f000				  -	      sta	v_bspeed
    567  f000				  -	      jmp	rmtoo1i
    568  f000				  -rmtoo63_1X
    569  f000				  -	      cmp	#255
    570  f000				  -	      beq	rmtoo63_11
    571  f000				  -	      lda	rmtreg2
    572  f000				  -	      sta	trackn_idx,x
    573  f000				  -	      jmp	rmtoo1i
    574  f000				  -rmtoo63_11
    575  f000				  -	      jsr	GetSongLine
    576  f000				  -	      jmp	rmtoo0
    577  f000				  -InitOfNewSetInstrumentsOnly
    578  f000				  -	      ldx	#0
    579  f000				  -p2x1       ldy	trackn_instrx2,x
    580  f000				  -	      bmi	p2x2
    581  f000				  -	      jsr	SetUpInstrumentY2
    582  f000				  -	      lda	#$80
    583  f000				  -	      sta	trackn_instrx2,x
    584  f000				  -p2x2
    585  f000				  -	      inx
    586  f000				  -	      cpx	#TRACKS
    587  f000				  -	      bne	p2x1
    588  f000				  -	      rts
    589  f000				  -rmt_play
    590  f000				  -rmt_p0
    591  f000				  -	      jsr	SetPokey
    592  f000				  -rmt_p1
    593  f000				  -	      dec	v_ainstrspeed
    594  f000				  -	      beq	rmtp1a
    595  f000				  -	      jmp	rmt_p3
    596  f000				  -rmtp1a
    597  f000				  -	      lda	v_instrspeed
    598  f000				  -	      sta	v_ainstrspeed
    599  f000				  -rmt_p2
    600  f000				  -	      dec	v_aspeed
    601  f000				  -	      bne	rmt_p3
    602  f000				  -	      inc	v_abeat
    603  f000				  -	      lda	v_abeat
    604  f000				  -	      cmp	v_maxtracklen
    605  f000				  -	      bne	rmtp2o2
    606  f000				  -	      jsr	GetSongLine
    607  f000				  -rmtp2o2
    608  f000				  -	      jsr	GetTrackLine
    609  f000				  -	      jmp	rmt_p2X
    610  f000				  -go_ppnext  jmp	ppnext
    611  f000				  -rmt_p2X
    612  f000				  -	      jsr	InitOfNewSetInstrumentsOnly
    613  f000				  -rmt_p3
    614  f000				  -	      lda	#>frqtab
    615  f000				  -	      sta	_nr+1
    616  f000				  -	      ldx	#0
    617  f000				  -rmtpp1
    618  f000				  -	      lda	trackn_instrhb,x
    619  f000				  -	      beq	go_ppnext
    620  f000				  -	      sta	_ns+1
    621  f000				  -	      lda	trackn_instrdb,x
    622  f000				  -	      sta	_ns
    623  f000				  -	      ldy	trackn_instridx,x
    624  f000				  -	      lda	(_ns),y
    625  f000				  -	      sta	rmtreg1
    626  f000				  -	      iny
    627  f000				  -	      lda	(_ns),y
    628  f000				  -	      sta	rmtreg2
    629  f000				  -	      iny
    630  f000				  -	      lda	(_ns),y
    631  f000				  -	      sta	rmtreg3
    632  f000				  -	      iny
    633  f000				  -	      tya
    634  f000				  -	      cmp	trackn_instrlen,x
    635  f000				  -	      bcc	rmtpp2
    636  f000				  -	      beq	rmtpp2
    637  f000				  -	      lda	#$80
    638  f000				  -	      sta	trackn_instrreachend,x
    639  f000				  -rmtpp1b
    640  f000				  -	      lda	trackn_instrlop,x
    641  f000				  -rmtpp2     sta	trackn_instridx,x
    642  f000				  -	      lda	rmtreg1
    643  f000				  -	      IF	STEREO8T
    644  f000				  -	      cpx	#4
    645  f000				  -	      bcc	rmtpp2s
    646  f000				  -	      lsr
    647  f000				  -	      lsr
    648  f000				  -	      lsr
    649  f000				  -	      lsr
    650  f000				  -rmtpp2s
    651  f000				  -	      EIF
    652  f000				  -	      and	#$0f
    653  f000				  -	      ora	trackn_volume,x
    654  f000				  -	      tay
    655  f000				  -	      lda	volumetab,y
    656  f000				  -	      pha
    657  f000				  -	      lda	rmtreg2
    658  f000				  -	      and	#$0e
    659  f000				  -	      tay
    660  f000				  -	      lda	tabbeganddistor,y
    661  f000				  -	      sta	_nr
    662  f000				  -	      pla
    663  f000				  -	      ora	tabbeganddistor+1,y
    664  f000				  -	      sta	trackn_audc,x
    665  f000				  -	      jmp	InstrumentsEffects
    666  f000				  -returnfromInstrumentsEffects
    667  f000				  -	      IF	FEAT_COMMAND2
    668  f000				  -	      lda	#0
    669  f000				  -	      sta	frqaddcmd2
    670  f000				  -	      EIF
    671  f000				  -	      lda	rmtreg2
    672  f000				  -	      sta	trackn_command,x
    673  f000				  -	      and	#$70
    674  f000				  -	      lsr
    675  f000				  -	      lsr
    676  f000				  -	      IF	ROM_BASED
    677  f000				  -	      lsr
    678  f000				  -	      tay
    679  f000				  -	      lda	rts_tab+1,y
    680  f000				  -	      pha
    681  f000				  -	      lda	rts_tab,y
    682  f000				  -	      pha
    683  f000				  -	      rts
    684  f000				  -	      ELSE
    685  f000				  -	      sta	jmx+1
    686  f000				  -jmx	      bcc	*
    687  f000				  -	      jmp	cmd0
    688  f000				  -	      nop
    689  f000				  -	      jmp	cmd1
    690  f000				  -	      nop
    691  f000				  -	      jmp	cmd2
    692  f000				  -	      nop
    693  f000				  -	      jmp	cmd3
    694  f000				  -	      nop
    695  f000				  -	      jmp	cmd4
    696  f000				  -	      nop
    697  f000				  -	      jmp	cmd5
    698  f000				  -	      nop
    699  f000				  -	      jmp	cmd6
    700  f000				  -	      nop
    701  f000				  -	      jmp	cmd7
    702  f000				  -	      EIF
    703  f000				  -cmd0
    704  f000				  -	      lda	trackn_note,x
    705  f000				  -	      clc
    706  f000				  -	      adc	rmtreg3
    707  f000				  -cmd0a
    708  f000				  -	      IF	FEAT_TABLETYPE
    709  f000				  -	      ldy	trackn_tabletypespeed,x
    710  f000				  -	      bmi	cmd0b
    711  f000				  -	      EIF
    712  f000				  -	      clc
    713  f000				  -	      adc	trackn_tablenote,x
    714  f000				  -	      cmp	#61
    715  f000				  -	      bcc	cmd0a1
    716  f000				  -	      lda	#0
    717  f000				  -	      sta	trackn_audc,x
    718  f000				  -	      lda	#63
    719  f000				  -cmd0a1
    720  f000				  -	      IF	FEAT_BASS16
    721  f000				  -	      sta	trackn_outnote,x
    722  f000				  -	      EIF
    723  f000				  -	      tay
    724  f000				  -	      lda	(_nr),y
    725  f000				  -	      clc
    726  f000				  -	      adc	trackn_shiftfrq,x
    727  f000				  -	      IF	FEAT_COMMAND2
    728  f000				  -	      clc
    729  f000				  -	      adc	frqaddcmd2
    730  f000				  -	      EIF
    731  f000				  -	      sta	trackn_audf,x
    732  f000				  -	      jmp	rmtpp9
    733  f000				  -	      IF	FEAT_TABLETYPE
    734  f000				  -cmd0b
    735  f000				  -	      cmp	#61
    736  f000				  -	      bcc	cmd0b1
    737  f000				  -	      lda	#0
    738  f000				  -	      sta	trackn_audc,x
    739  f000				  -	      lda	#63
    740  f000				  -cmd0b1
    741  f000				  -	      tay
    742  f000				  -	      lda	trackn_shiftfrq,x
    743  f000				  -	      clc
    744  f000				  -	      adc	trackn_tablenote,x
    745  f000				  -	      clc
    746  f000				  -	      adc	(_nr),y
    747  f000				  -	      IF	FEAT_COMMAND2
    748  f000				  -	      clc
    749  f000				  -	      adc	frqaddcmd2
    750  f000				  -	      EIF
    751  f000				  -	      sta	trackn_audf,x
    752  f000				  -	      jmp	rmtpp9
    753  f000				  -	      EIF
    754  f000				  -cmd1
    755  f000				  -	      IF	FEAT_COMMAND1
    756  f000				  -	      lda	rmtreg3
    757  f000				  -	      sta	trackn_audf,x
    758  f000				  -	      jmp	rmtpp9
    759  f000				  -	      EIF
    760  f000				  -cmd2
    761  f000				  -	      IF	FEAT_COMMAND2
    762  f000				  -	      lda	rmtreg3
    763  f000				  -	      sta	frqaddcmd2
    764  f000				  -	      lda	trackn_note,x
    765  f000				  -	      jmp	cmd0a
    766  f000				  -	      EIF
    767  f000				  -cmd3
    768  f000				  -	      IF	FEAT_COMMAND3
    769  f000				  -	      lda	trackn_note,x
    770  f000				  -	      clc
    771  f000				  -	      adc	rmtreg3
    772  f000				  -	      sta	trackn_note,x
    773  f000				  -	      jmp	cmd0a
    774  f000				  -	      EIF
    775  f000				  -cmd4
    776  f000				  -	      IF	FEAT_COMMAND4
    777  f000				  -	      lda	trackn_shiftfrq,x
    778  f000				  -	      clc
    779  f000				  -	      adc	rmtreg3
    780  f000				  -	      sta	trackn_shiftfrq,x
    781  f000				  -	      lda	trackn_note,x
    782  f000				  -	      jmp	cmd0a
    783  f000				  -	      EIF
    784  f000				  -cmd5
    785  f000				  -	      IF	FEAT_COMMAND5&&FEAT_PORTAMENTO
    786  f000				  -	      IF	FEAT_TABLETYPE
    787  f000				  -	      lda	trackn_tabletypespeed,x
    788  f000				  -	      bpl	cmd5a1
    789  f000				  -	      ldy	trackn_note,x
    790  f000				  -	      lda	(_nr),y
    791  f000				  -	      clc
    792  f000				  -	      adc	trackn_tablenote,x
    793  f000				  -	      jmp	cmd5ax
    794  f000				  -	      EIF
    795  f000				  -cmd5a1
    796  f000				  -	      lda	trackn_note,x
    797  f000				  -	      clc
    798  f000				  -	      adc	trackn_tablenote,x
    799  f000				  -	      cmp	#61
    800  f000				  -	      bcc	cmd5a2
    801  f000				  -	      lda	#63
    802  f000				  -cmd5a2
    803  f000				  -	      tay
    804  f000				  -	      lda	(_nr),y
    805  f000				  -cmd5ax
    806  f000				  -	      sta	trackn_portafrqc,x
    807  f000				  -	      ldy	rmtreg3
    808  f000				  -	      bne	cmd5a
    809  f000				  -	      sta	trackn_portafrqa,x
    810  f000				  -cmd5a
    811  f000				  -	      tya
    812  f000				  -	      lsr
    813  f000				  -	      lsr
    814  f000				  -	      lsr
    815  f000				  -	      lsr
    816  f000				  -	      sta	trackn_portaspeed,x
    817  f000				  -	      sta	trackn_portaspeeda,x
    818  f000				  -	      lda	rmtreg3
    819  f000				  -	      and	#$0f
    820  f000				  -	      sta	trackn_portadepth,x
    821  f000				  -	      lda	trackn_note,x
    822  f000				  -	      jmp	cmd0a
    823  f000				  -	      ELSE
    824  f000				  -	      IF	FEAT_COMMAND5
    825  f000				  -	      jmp	rmtpp9
    826  f000				  -	      EIF
    827  f000				  -	      EIF
    828  f000				  -cmd6
    829  f000				  -	      IF	FEAT_COMMAND6&&FEAT_FILTER
    830  f000				  -	      lda	rmtreg3
    831  f000				  -	      clc
    832  f000				  -	      adc	trackn_filter,x
    833  f000				  -	      sta	trackn_filter,x
    834  f000				  -	      lda	trackn_note,x
    835  f000				  -	      jmp	cmd0a
    836  f000				  -	      ELSE
    837  f000				  -	      IF	FEAT_COMMAND6
    838  f000				  -	      jmp	rmtpp9
    839  f000				  -	      EIF
    840  f000				  -	      EIF
    841  f000				  -cmd7
    842  f000				  -	      IF	FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY
    843  f000				  -	      IF	FEAT_COMMAND7SETNOTE
    844  f000				  -	      lda	rmtreg3
    845  f000				  -	      IF	FEAT_COMMAND7VOLUMEONLY
    846  f000				  -	      cmp	#$80
    847  f000				  -	      beq	cmd7a
    848  f000				  -	      EIF
    849  f000				  -	      sta	trackn_note,x
    850  f000				  -	      jmp	cmd0a
    851  f000				  -	      EIF
    852  f000				  -	      IF	FEAT_COMMAND7VOLUMEONLY
    853  f000				  -cmd7a
    854  f000				  -	      lda	trackn_audc,x
    855  f000				  -	      ora	#$f0
    856  f000				  -	      sta	trackn_audc,x
    857  f000				  -	      lda	trackn_note,x
    858  f000				  -	      jmp	cmd0a
    859  f000				  -	      EIF
    860  f000				  -	      EIF
    861  f000				  -rmtpp9
    862  f000				  -	      IF	FEAT_PORTAMENTO
    863  f000				  -	      lda	trackn_portaspeeda,x
    864  f000				  -	      beq	rmtpp10
    865  f000				  -	      sec
    866  f000				  -	      sbc	#1
    867  f000				  -	      sta	trackn_portaspeeda,x
    868  f000				  -	      bne	rmtpp10
    869  f000				  -	      lda	trackn_portaspeed,x
    870  f000				  -	      sta	trackn_portaspeeda,x
    871  f000				  -	      lda	trackn_portafrqa,x
    872  f000				  -	      cmp	trackn_portafrqc,x
    873  f000				  -	      beq	rmtpp10
    874  f000				  -	      bcs	pps1
    875  f000				  -	      adc	trackn_portadepth,x
    876  f000				  -	      bcs	pps8
    877  f000				  -	      cmp	trackn_portafrqc,x
    878  f000				  -	      bcs	pps8
    879  f000				  -	      jmp	pps9
    880  f000				  -pps1
    881  f000				  -	      sbc	trackn_portadepth,x
    882  f000				  -	      bcc	pps8
    883  f000				  -	      cmp	trackn_portafrqc,x
    884  f000				  -	      bcs	pps9
    885  f000				  -pps8
    886  f000				  -	      lda	trackn_portafrqc,x
    887  f000				  -pps9
    888  f000				  -	      sta	trackn_portafrqa,x
    889  f000				  -rmtpp10
    890  f000				  -	      lda	rmtreg2
    891  f000				  -	      and	#$01
    892  f000				  -	      beq	rmtpp11
    893  f000				  -	      lda	trackn_portafrqa,x
    894  f000				  -	      clc
    895  f000				  -	      adc	trackn_shiftfrq,x
    896  f000				  -	      sta	trackn_audf,x
    897  f000				  -rmtpp11
    898  f000				  -	      EIF
    899  f000				  -ppnext
    900  f000				  -	      inx
    901  f000				  -	      cpx	#TRACKS
    902  f000				  -	      beq	rmt_p4
    903  f000				  -	      jmp	rmtpp1
    904  f000				  -rmt_p4
    905  f000				  -	      IF	FEAT_AUDCTLMANUALSET
    906  f000				  -	      ldx	#3
    907  f000				  -	      lda	#0
    908  f000				  -qq0	      ora	trackn_audctl,x
    909  f000				  -	      dex
    910  f000				  -	      bpl	qq0
    911  f000				  -	      sta	v_audctl
    912  f000				  -qq1
    913  f000				  -	      ldx	v_audctl
    914  f000				  -	      ELSE
    915  f000				  -	      ldx	#0
    916  f000				  -	      stx	v_audctl
    917  f000				  -	      EIF
    918  f000				  -	      IF	FEAT_FILTER
    919  f000				  -	      IF	FEAT_FILTERG0L
    920  f000				  -	      lda	trackn_command+0
    921  f000				  -	      bpl	qq2
    922  f000				  -	      lda	trackn_audc+0
    923  f000				  -	      and	#$0f
    924  f000				  -	      beq	qq2
    925  f000				  -	      lda	trackn_audf+0
    926  f000				  -	      clc
    927  f000				  -	      adc	trackn_filter+0
    928  f000				  -	      sta	trackn_audf+2
    929  f000				  -	      IF	FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG2L
    930  f000				  -	      lda	trackn_audc+2
    931  f000				  -	      and	#$10
    932  f000				  -	      bne	qq1a
    933  f000				  -	      EIF
    934  f000				  -	      lda	#0
    935  f000				  -	      sta	trackn_audc+2
    936  f000				  -qq1a
    937  f000				  -	      txa
    938  f000				  -	      ora	#4
    939  f000				  -	      tax
    940  f000				  -	      EIF
    941  f000				  -qq2
    942  f000				  -	      IF	FEAT_FILTERG1L
    943  f000				  -	      lda	trackn_command+1
    944  f000				  -	      bpl	qq3
    945  f000				  -	      lda	trackn_audc+1
    946  f000				  -	      and	#$0f
    947  f000				  -	      beq	qq3
    948  f000				  -	      lda	trackn_audf+1
    949  f000				  -	      clc
    950  f000				  -	      adc	trackn_filter+1
    951  f000				  -	      sta	trackn_audf+3
    952  f000				  -	      IF	FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG3L
    953  f000				  -	      lda	trackn_audc+3
    954  f000				  -	      and	#$10
    955  f000				  -	      bne	qq2a
    956  f000				  -	      EIF
    957  f000				  -	      lda	#0
    958  f000				  -	      sta	trackn_audc+3
    959  f000				  -qq2a
    960  f000				  -	      txa
    961  f000				  -	      ora	#2
    962  f000				  -	      tax
    963  f000				  -	      EIF
    964  f000				  -qq3
    965  f000				  -	      IF	FEAT_FILTERG0L||FEAT_FILTERG1L
    966  f000				  -	      cpx	v_audctl
    967  f000				  -	      bne	qq5
    968  f000				  -	      EIF
    969  f000				  -	      EIF
    970  f000				  -	      IF	FEAT_BASS16
    971  f000				  -	      IF	FEAT_BASS16G1L
    972  f000				  -	      lda	trackn_command+1
    973  f000				  -	      and	#$0e
    974  f000				  -	      cmp	#6
    975  f000				  -	      bne	qq4
    976  f000				  -	      lda	trackn_audc+1
    977  f000				  -	      and	#$0f
    978  f000				  -	      beq	qq4
    979  f000				  -	      ldy	trackn_outnote+1
    980  f000				  -	      lda	frqtabbasslo,y
    981  f000				  -	      sta	trackn_audf+0
    982  f000				  -	      lda	frqtabbasshi,y
    983  f000				  -	      sta	trackn_audf+1
    984  f000				  -	      IF	FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG0L
    985  f000				  -	      lda	trackn_audc+0
    986  f000				  -	      and	#$10
    987  f000				  -	      bne	qq3a
    988  f000				  -	      EIF
    989  f000				  -	      lda	#0
    990  f000				  -	      sta	trackn_audc+0
    991  f000				  -qq3a
    992  f000				  -	      txa
    993  f000				  -	      ora	#$50
    994  f000				  -	      tax
    995  f000				  -	      EIF
    996  f000				  -qq4
    997  f000				  -	      IF	FEAT_BASS16G3L
    998  f000				  -	      lda	trackn_command+3
    999  f000				  -	      and	#$0e
   1000  f000				  -	      cmp	#6
   1001  f000				  -	      bne	qq5
   1002  f000				  -	      lda	trackn_audc+3
   1003  f000				  -	      and	#$0f
   1004  f000				  -	      beq	qq5
   1005  f000				  -	      ldy	trackn_outnote+3
   1006  f000				  -	      lda	frqtabbasslo,y
   1007  f000				  -	      sta	trackn_audf+2
   1008  f000				  -	      lda	frqtabbasshi,y
   1009  f000				  -	      sta	trackn_audf+3
   1010  f000				  -	      IF	FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG2L
   1011  f000				  -	      lda	trackn_audc+2
   1012  f000				  -	      and	#$10
   1013  f000				  -	      bne	qq4a
   1014  f000				  -	      EIF
   1015  f000				  -	      lda	#0
   1016  f000				  -	      sta	trackn_audc+2
   1017  f000				  -qq4a
   1018  f000				  -	      txa
   1019  f000				  -	      ora	#$28
   1020  f000				  -	      tax
   1021  f000				  -	      EIF
   1022  f000				  -	      EIF
   1023  f000				  -qq5
   1024  f000				  -	      stx	v_audctl
   1025  f000				  -	      IF	STEREO8T
   1026  f000				  -	      IF	FEAT_AUDCTLMANUALSET
   1027  f000				  -	      ldx	#3
   1028  f000				  -	      lda	#0
   1029  f000				  -qs0	      ora	trackn_audctl+4,x
   1030  f000				  -	      dex
   1031  f000				  -	      bpl	qs0
   1032  f000				  -	      sta	v_audctl2
   1033  f000				  -qs1
   1034  f000				  -	      ldx	v_audctl2
   1035  f000				  -	      ELSE
   1036  f000				  -	      ldx	#0
   1037  f000				  -	      stx	v_audctl2
   1038  f000				  -	      EIF
   1039  f000				  -	      IF	FEAT_FILTER
   1040  f000				  -	      IF	FEAT_FILTERG0R
   1041  f000				  -	      lda	trackn_command+0+4
   1042  f000				  -	      bpl	qs2
   1043  f000				  -	      lda	trackn_audc+0+4
   1044  f000				  -	      and	#$0f
   1045  f000				  -	      beq	qs2
   1046  f000				  -	      lda	trackn_audf+0+4
   1047  f000				  -	      clc
   1048  f000				  -	      adc	trackn_filter+0+4
   1049  f000				  -	      sta	trackn_audf+2+4
   1050  f000				  -	      IF	FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG2R
   1051  f000				  -	      lda	trackn_audc+2+4
   1052  f000				  -	      and	#$10
   1053  f000				  -	      bne	qs1a
   1054  f000				  -	      EIF
   1055  f000				  -	      lda	#0
   1056  f000				  -	      sta	trackn_audc+2+4
   1057  f000				  -qs1a
   1058  f000				  -	      txa
   1059  f000				  -	      ora	#4
   1060  f000				  -	      tax
   1061  f000				  -	      EIF
   1062  f000				  -qs2
   1063  f000				  -	      IF	FEAT_FILTERG1R
   1064  f000				  -	      lda	trackn_command+1+4
   1065  f000				  -	      bpl	qs3
   1066  f000				  -	      lda	trackn_audc+1+4
   1067  f000				  -	      and	#$0f
   1068  f000				  -	      beq	qs3
   1069  f000				  -	      lda	trackn_audf+1+4
   1070  f000				  -	      clc
   1071  f000				  -	      adc	trackn_filter+1+4
   1072  f000				  -	      sta	trackn_audf+3+4
   1073  f000				  -	      IF	FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG3R
   1074  f000				  -	      lda	trackn_audc+3+4
   1075  f000				  -	      and	#$10
   1076  f000				  -	      bne	qs2a
   1077  f000				  -	      EIF
   1078  f000				  -	      lda	#0
   1079  f000				  -	      sta	trackn_audc+3+4
   1080  f000				  -qs2a
   1081  f000				  -	      txa
   1082  f000				  -	      ora	#2
   1083  f000				  -	      tax
   1084  f000				  -	      EIF
   1085  f000				  -qs3
   1086  f000				  -	      IF	FEAT_FILTERG0R||FEAT_FILTERG1R
   1087  f000				  -	      cpx	v_audctl2
   1088  f000				  -	      bne	qs5
   1089  f000				  -	      EIF
   1090  f000				  -	      EIF
   1091  f000				  -	      IF	FEAT_BASS16
   1092  f000				  -	      IF	FEAT_BASS16G1R
   1093  f000				  -	      lda	trackn_command+1+4
   1094  f000				  -	      and	#$0e
   1095  f000				  -	      cmp	#6
   1096  f000				  -	      bne	qs4
   1097  f000				  -	      lda	trackn_audc+1+4
   1098  f000				  -	      and	#$0f
   1099  f000				  -	      beq	qs4
   1100  f000				  -	      ldy	trackn_outnote+1+4
   1101  f000				  -	      lda	frqtabbasslo,y
   1102  f000				  -	      sta	trackn_audf+0+4
   1103  f000				  -	      lda	frqtabbasshi,y
   1104  f000				  -	      sta	trackn_audf+1+4
   1105  f000				  -	      IF	FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG0R
   1106  f000				  -	      lda	trackn_audc+0+4
   1107  f000				  -	      and	#$10
   1108  f000				  -	      bne	qs3a
   1109  f000				  -	      EIF
   1110  f000				  -	      lda	#0
   1111  f000				  -	      sta	trackn_audc+0+4
   1112  f000				  -qs3a
   1113  f000				  -	      txa
   1114  f000				  -	      ora	#$50
   1115  f000				  -	      tax
   1116  f000				  -	      EIF
   1117  f000				  -qs4
   1118  f000				  -	      IF	FEAT_BASS16G3R
   1119  f000				  -	      lda	trackn_command+3+4
   1120  f000				  -	      and	#$0e
   1121  f000				  -	      cmp	#6
   1122  f000				  -	      bne	qs5
   1123  f000				  -	      lda	trackn_audc+3+4
   1124  f000				  -	      and	#$0f
   1125  f000				  -	      beq	qs5
   1126  f000				  -	      ldy	trackn_outnote+3+4
   1127  f000				  -	      lda	frqtabbasslo,y
   1128  f000				  -	      sta	trackn_audf+2+4
   1129  f000				  -	      lda	frqtabbasshi,y
   1130  f000				  -	      sta	trackn_audf+3+4
   1131  f000				  -	      IF	FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG2R
   1132  f000				  -	      lda	trackn_audc+2+4
   1133  f000				  -	      and	#$10
   1134  f000				  -	      bne	qs4a
   1135  f000				  -	      EIF
   1136  f000				  -	      lda	#0
   1137  f000				  -	      sta	trackn_audc+2+4
   1138  f000				  -qs4a
   1139  f000				  -	      txa
   1140  f000				  -	      ora	#$28
   1141  f000				  -	      tax
   1142  f000				  -	      EIF
   1143  f000				  -	      EIF
   1144  f000				  -qs5
   1145  f000				  -	      stx	v_audctl2
   1146  f000				  -	      EIF
   1147  f000				  -rmt_p5
   1148  f000				  -	      lda	v_ainstrspeed
   1149  f000				  -	      rts
   1150  f000				  -SetPokey
   1151  f000				  -	      IF	STEREO8T
   1152  f000				  -	      ldy	v_audctl2
   1153  f000				  -	      lda	trackn_audf+0+4
   1154  f000				  -	      ldx	trackn_audf+0
   1155  f000				  -	      sta	POKEY_BASE_S+$00
   1156  f000				  -	      stx	POKEY_BASE+$00
   1157  f000				  -	      lda	trackn_audc+0+4
   1158  f000				  -	      ldx	trackn_audc+0
   1159  f000				  -	      sta	POKEY_BASE_S+$01
   1160  f000				  -	      stx	POKEY_BASE+$01
   1161  f000				  -	      lda	trackn_audf+1+4
   1162  f000				  -	      ldx	trackn_audf+1
   1163  f000				  -	      sta	POKEY_BASE_S+$02
   1164  f000				  -	      stx	POKEY_BASE+$02
   1165  f000				  -	      lda	trackn_audc+1+4
   1166  f000				  -	      ldx	trackn_audc+1
   1167  f000				  -	      sta	POKEY_BASE_S+$03
   1168  f000				  -	      stx	POKEY_BASE+$03
   1169  f000				  -	      lda	trackn_audf+2+4
   1170  f000				  -	      ldx	trackn_audf+2
   1171  f000				  -	      sta	POKEY_BASE_S+$04
   1172  f000				  -	      stx	POKEY_BASE+$04
   1173  f000				  -	      lda	trackn_audc+2+4
   1174  f000				  -	      ldx	trackn_audc+2
   1175  f000				  -	      sta	POKEY_BASE_S+$05
   1176  f000				  -	      stx	POKEY_BASE+$05
   1177  f000				  -	      lda	trackn_audf+3+4
   1178  f000				  -	      ldx	trackn_audf+3
   1179  f000				  -	      sta	POKEY_BASE_S+$06
   1180  f000				  -	      stx	POKEY_BASE+$06
   1181  f000				  -	      lda	trackn_audc+3+4
   1182  f000				  -	      ldx	trackn_audc+3
   1183  f000				  -	      sta	POKEY_BASE_S+$07
   1184  f000				  -	      stx	POKEY_BASE+$07
   1185  f000				  -	      lda	v_audctl
   1186  f000				  -	      sty	POKEY_BASE_S+$08
   1187  f000				  -	      sta	POKEY_BASE+$08
   1188  f000				  -	      ELSE
   1189  f000				  -
   1190  f000				  -	      ifconst	RMTVOLUME
   1191  f000				  -	      lda	rmtvolume
   1192  f000				  -	      sta	fourbitfadevalueint
   1193  f000				  -	      endif
   1194  f000				  -	      ldy	v_audctl
   1195  f000				  -	      ldx	trackn_audf+0
   1196  f000				  -	      lda	trackn_audc+0
   1197  f000				  -	      ifconst	RMTVOLUME
   1198  f000				  -	      jsr	fourbitfadeint
   1199  f000				  -	      endif
   1200  f000				  -	      stx	POKEY_BASE+$00+0
   1201  f000				  -	      stx	POKEY_BASE+$00+0
   1202  f000				  -	      sta	POKEY_BASE+$01+0
   1203  f000				  -	      sta	POKEY_BASE+$01+0
   1204  f000				  -
   1205  f000				  -	      ldx	trackn_audf+1
   1206  f000				  -	      lda	trackn_audc+1
   1207  f000				  -	      ifconst	RMTVOLUME
   1208  f000				  -	      jsr	fourbitfadeint
   1209  f000				  -	      endif
   1210  f000				  -	      stx	POKEY_BASE+$00+2
   1211  f000				  -	      stx	POKEY_BASE+$00+2
   1212  f000				  -	      sta	POKEY_BASE+$01+2
   1213  f000				  -	      sta	POKEY_BASE+$01+2
   1214  f000				  -
   1215  f000				  -	      ldx	trackn_audf+2
   1216  f000				  -	      lda	trackn_audc+2
   1217  f000				  -	      ifconst	RMTVOLUME
   1218  f000				  -	      jsr	fourbitfadeint
   1219  f000				  -	      endif
   1220  f000				  -	      stx	POKEY_BASE+$00+4
   1221  f000				  -	      stx	POKEY_BASE+$00+4
   1222  f000				  -	      sta	POKEY_BASE+$01+4
   1223  f000				  -	      sta	POKEY_BASE+$01+4
   1224  f000				  -
   1225  f000				  -	      ldx	trackn_audf+3
   1226  f000				  -	      lda	trackn_audc+3
   1227  f000				  -	      ifconst	RMTVOLUME
   1228  f000				  -	      jsr	fourbitfadeint
   1229  f000				  -	      endif
   1230  f000				  -	      stx	POKEY_BASE+$00+6
   1231  f000				  -	      stx	POKEY_BASE+$00+6
   1232  f000				  -	      sta	POKEY_BASE+$01+6
   1233  f000				  -	      sta	POKEY_BASE+$01+6
   1234  f000				  -
   1235  f000				  -	      sty	POKEY_BASE+$08
   1236  f000				  -	      sty	POKEY_BASE+$08
   1237  f000				  -
   1238  f000				  -	      EIF
   1239  f000				  -	      rts
   1240  f000				  -SetUpInstrumentY2
   1241  f000				  -	      lda	(p_instrstable),y
   1242  f000				  -	      sta	trackn_instrdb,x
   1243  f000				  -	      sta	_nt
   1244  f000				  -	      iny
   1245  f000				  -	      lda	(p_instrstable),y
   1246  f000				  -	      sta	trackn_instrhb,x
   1247  f000				  -	      sta	_nt+1
   1248  f000				  -	      ldy	#0
   1249  f000				  -	      lda	(_nt),y
   1250  f000				  -	      sta	trackn_tableend,x
   1251  f000				  -	      clc
   1252  f000				  -	      adc	#1
   1253  f000				  -	      sta	trackn_instridx,x
   1254  f000				  -	      iny
   1255  f000				  -	      lda	(_nt),y
   1256  f000				  -	      sta	trackn_tablelop,x
   1257  f000				  -	      iny
   1258  f000				  -	      lda	(_nt),y
   1259  f000				  -	      sta	trackn_instrlen,x
   1260  f000				  -	      iny
   1261  f000				  -	      lda	(_nt),y
   1262  f000				  -	      sta	trackn_instrlop,x
   1263  f000				  -	      iny
   1264  f000				  -	      lda	(_nt),y
   1265  f000				  -	      sta	trackn_tabletypespeed,x
   1266  f000				  -	      IF	FEAT_TABLETYPE||FEAT_TABLEMODE
   1267  f000				  -	      and	#$3f
   1268  f000				  -	      EIF
   1269  f000				  -	      sta	trackn_tablespeeda,x
   1270  f000				  -	      IF	FEAT_TABLEMODE
   1271  f000				  -	      lda	(_nt),y
   1272  f000				  -	      and	#$40
   1273  f000				  -	      sta	trackn_tablemode,x
   1274  f000				  -	      EIF
   1275  f000				  -	      iny
   1276  f000				  -	      IF	FEAT_AUDCTLMANUALSET
   1277  f000				  -	      lda	(_nt),y
   1278  f000				  -	      sta	trackn_audctl,x
   1279  f000				  -	      EIF
   1280  f000				  -	      iny
   1281  f000				  -	      lda	(_nt),y
   1282  f000				  -	      sta	trackn_volumeslidedepth,x
   1283  f000				  -	      iny
   1284  f000				  -	      lda	(_nt),y
   1285  f000				  -	      sta	trackn_volumemin,x
   1286  f000				  -	      iny
   1287  f000				  -	      lda	(_nt),y
   1288  f000				  -	      sta	trackn_effdelay,x
   1289  f000				  -	      iny
   1290  f000				  -	      lda	(_nt),y
   1291  f000				  -	      tay
   1292  f000				  -	      lda	vibtabbeg,y
   1293  f000				  -	      sta	trackn_effvibratoa,x
   1294  f000				  -	      sta	trackn_effvibratobeg,x
   1295  f000				  -	      lda	vibtabbeg+1,y
   1296  f000				  -	      sta	trackn_effvibratoend,x
   1297  f000				  -	      ldy	#10
   1298  f000				  -	      lda	(_nt),y
   1299  f000				  -	      sta	trackn_effshift,x
   1300  f000				  -	      lda	#128
   1301  f000				  -	      sta	trackn_volumeslidevalue,x
   1302  f000				  -	      lda	#0
   1303  f000				  -	      sta	trackn_instrreachend,x
   1304  f000				  -	      sta	trackn_shiftfrq,x
   1305  f000				  -	      lda	#INSTRPAR
   1306  f000				  -	      sta	trackn_tablea,x
   1307  f000				  -	      tay
   1308  f000				  -	      lda	(_nt),y
   1309  f000				  -	      sta	trackn_tablenote,x
   1310  f000				  -	      IF	FEAT_FILTER
   1311  f000				  -	      lda	#1
   1312  f000				  -	      sta	trackn_filter,x
   1313  f000				  -	      EIF
   1314  f000				  -	      rts
   1315  f000				  -InstrumentsEffects
   1316  f000				  -	      lda	trackn_effdelay,x
   1317  f000				  -	      beq	ei2
   1318  f000				  -	      tay
   1319  f000				  -	      dey
   1320  f000				  -	      bne	ei1
   1321  f000				  -	      lda	trackn_shiftfrq,x
   1322  f000				  -	      clc
   1323  f000				  -	      adc	trackn_effshift,x
   1324  f000				  -	      clc
   1325  f000				  -	      ldy	trackn_effvibratoa,x
   1326  f000				  -	      adc	vib0,y
   1327  f000				  -	      sta	trackn_shiftfrq,x
   1328  f000				  -	      iny
   1329  f000				  -	      tya
   1330  f000				  -	      cmp	trackn_effvibratoend,x
   1331  f000				  -	      bne	ei1a
   1332  f000				  -	      lda	trackn_effvibratobeg,x
   1333  f000				  -ei1a
   1334  f000				  -	      sta	trackn_effvibratoa,x
   1335  f000				  -	      jmp	ei2
   1336  f000				  -ei1
   1337  f000				  -	      tya
   1338  f000				  -	      sta	trackn_effdelay,x
   1339  f000				  -ei2
   1340  f000				  -	      lda	trackn_tableend,x
   1341  f000				  -	      cmp	#INSTRPAR
   1342  f000				  -	      beq	ei3
   1343  f000				  -	      lda	trackn_tablespeeda,x
   1344  f000				  -	      bpl	ei2f
   1345  f000				  -ei2c
   1346  f000				  -	      lda	trackn_tablea,x
   1347  f000				  -	      clc
   1348  f000				  -	      adc	#1
   1349  f000				  -	      cmp	trackn_tableend,x
   1350  f000				  -	      bcc	ei2a
   1351  f000				  -	      beq	ei2a
   1352  f000				  -	      lda	trackn_tablelop,x
   1353  f000				  -ei2a
   1354  f000				  -	      sta	trackn_tablea,x
   1355  f000				  -	      lda	trackn_instrdb,x
   1356  f000				  -	      sta	_nt
   1357  f000				  -	      lda	trackn_instrhb,x
   1358  f000				  -	      sta	_nt+1
   1359  f000				  -	      ldy	trackn_tablea,x
   1360  f000				  -	      lda	(_nt),y
   1361  f000				  -	      IF	FEAT_TABLEMODE
   1362  f000				  -	      ldy	trackn_tablemode,x
   1363  f000				  -	      beq	ei2e
   1364  f000				  -	      clc
   1365  f000				  -	      adc	trackn_tablenote,x
   1366  f000				  -ei2e
   1367  f000				  -	      EIF
   1368  f000				  -	      sta	trackn_tablenote,x
   1369  f000				  -	      lda	trackn_tabletypespeed,x
   1370  f000				  -	      IF	FEAT_TABLETYPE||FEAT_TABLEMODE
   1371  f000				  -	      and	#$3f
   1372  f000				  -	      EIF
   1373  f000				  -ei2f
   1374  f000				  -	      sec
   1375  f000				  -	      sbc	#1
   1376  f000				  -	      sta	trackn_tablespeeda,x
   1377  f000				  -ei3
   1378  f000				  -	      lda	trackn_instrreachend,x
   1379  f000				  -	      bpl	ei4
   1380  f000				  -	      lda	trackn_volume,x
   1381  f000				  -	      beq	ei4
   1382  f000				  -	      cmp	trackn_volumemin,x
   1383  f000				  -	      beq	ei4
   1384  f000				  -	      bcc	ei4
   1385  f000				  -	      tay
   1386  f000				  -	      lda	trackn_volumeslidevalue,x
   1387  f000				  -	      clc
   1388  f000				  -	      adc	trackn_volumeslidedepth,x
   1389  f000				  -	      sta	trackn_volumeslidevalue,x
   1390  f000				  -	      bcc	ei4
   1391  f000				  -	      tya
   1392  f000				  -	      sbc	#16
   1393  f000				  -	      sta	trackn_volume,x
   1394  f000				  -ei4
   1395  f000				  -	      jmp	returnfromInstrumentsEffects
   1396  f000				  -
   1397  f000				  -rmtmoduleend
   1398  f000				  -	      echo	"  (rmtplayer module is using ",[(rmtmoduleend-rmtmodulestart)]d," bytes of rom)"
   1399  f000				  -	      echo	"  (rmtplayer module is using ",[(MEMLOC-RMTRAM-1)]d," bytes of ram)"
   1400  f000				  -
   1401  f000					      endif		; RMT
------- FILE c:\Users\steve\OneDrive\Desktop\2018dev\7800\7800basic\projects\demo1\lesson2_4.78b.asm
   1416  f000					      endif
   1417  f000					      ifnconst	included.7800vox.asm
------- FILE 7800vox.asm LEVEL 2 PASS 3
      0  f000					      include	7800vox.asm
      1  f000							; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  f000
      3  f000							; AtariVox 7800basic wrapper
      4  f000
      5  f000							; to be called with
      6  f000							; A=# of bytes
      7  f000							;
      8  f000
      9  f000				  -	      ifconst	HSSUPPORT
     10  f000				  -
     11  f000				  -_7800voxstart
     12  f000				  -
     13  f000				  -AVoxReadBytes
     14  f000				  -	      sta	temp8
     15  f000				  -	      jsr	i2c_startwrite
     16  f000				  -	      bcs	eeprom_error
     17  f000				  -
     18  f000				  -	      lda	HSVoxHi
     19  f000				  -	      jsr	i2c_txbyte
     20  f000				  -	      lda	HSVoxLo
     21  f000				  -	      jsr	i2c_txbyte
     22  f000				  -	      jsr	i2c_stopwrite
     23  f000				  -
     24  f000				  -	      jsr	i2c_startread
     25  f000				  -
     26  f000				  -	      ldx	#0
     27  f000				  -AVoxReadBytesLoop
     28  f000				  -	      jsr	i2c_rxbyte
     29  f000				  -	      sta	eeprombuffer,x
     30  f000				  -	      inx
     31  f000				  -	      cpx	temp8
     32  f000				  -	      bne	AVoxReadBytesLoop
     33  f000				  -	      jsr	i2c_stopread
     34  f000				  -	      lda	#0
     35  f000				  -	      rts
     36  f000				  -
     37  f000				  -			; to be called with
     38  f000				  -			; A=# of bytes
     39  f000				  -			;
     40  f000				  -
     41  f000				  -AVoxWriteBytes
     42  f000				  -	      sta	temp8
     43  f000				  -	      jsr	i2c_startwrite
     44  f000				  -	      bcs	eeprom_error
     45  f000				  -
     46  f000				  -	      lda	HSVoxHi
     47  f000				  -	      jsr	i2c_txbyte
     48  f000				  -	      lda	HSVoxLo
     49  f000				  -	      jsr	i2c_txbyte
     50  f000				  -
     51  f000				  -	      ldx	#$00
     52  f000				  -AVoxWriteBytesLoop
     53  f000				  -	      lda	eeprombuffer,x
     54  f000				  -	      jsr	i2c_txbyte
     55  f000				  -	      inx
     56  f000				  -	      cpx	temp8
     57  f000				  -	      bne	AVoxWriteBytesLoop
     58  f000				  -	      jsr	i2c_stopwrite
     59  f000				  -
     60  f000				  -	      lda	#0
     61  f000				  -	      rts
     62  f000				  -
     63  f000				  -eeprom_error
     64  f000				  -	      lda	#$ff
     65  f000				  -	      rts
     66  f000				  -
     67  f000				  -AVoxDetect
     68  f000				  -
     69  f000				  -	      jsr	i2c_startwrite
     70  f000				  -	      bcs	eeprom_error
     71  f000				  -	      lda	#$30
     72  f000				  -	      jsr	i2c_txbyte
     73  f000				  -	      lda	#$00
     74  f000				  -	      jsr	i2c_txbyte
     75  f000				  -	      jsr	i2c_stopwrite
     76  f000				  -	      rts
     77  f000				  -
     78  f000				  -	      include	"i2c7800.inc"
     79  f000				  -	      I2C_SUBS	temp9
     80  f000				  -
     81  f000				  -_7800voxend
     82  f000				  -
     83  f000				  -	      echo	"  (7800vox module is using ",[(_7800voxend-_7800voxstart)]d," bytes)"
     84  f000				  -
     85  f000					      endif
     86  f000
------- FILE c:\Users\steve\OneDrive\Desktop\2018dev\7800\7800basic\projects\demo1\lesson2_4.78b.asm
   1419  f000					      endif
   1420  f000					      ifnconst	included.pokeysound.asm
------- FILE pokeysound.asm LEVEL 2 PASS 3
      0  f000					      include	pokeysound.asm
      1  f000							; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  f000
      3  f000
      4  f000				  -	      ifconst	pokeysupport
      5  f000				  -
      6  f000				  -pokeysoundmodulestart
      7  f000				  -
      8  f000				  -mutepokey
      9  f000				  -	      lda	#0
     10  f000				  -	      ldy	#7
     11  f000				  -mutepokeyloop
     12  f000				  -	      sta	pokey1pointlo,y
     13  f000				  -	      sta	(pokeybaselo),y
     14  f000				  -	      dey
     15  f000				  -	      bpl	mutepokeyloop
     16  f000				  -	      rts
     17  f000				  -
     18  f000				  -checkpokeyplaying
     19  f000				  -	      ldx	#6
     20  f000				  -checkpokeyplayingloop
     21  f000				  -	      lda	pokey1pointlo,x
     22  f000				  -	      ora	pokey1pointhi,x
     23  f000				  -	      beq	pokeychannelinactive
     24  f000				  -	      jsr	playpokeysfxA	; x=channel*2
     25  f000				  -pokeychannelinactive
     26  f000				  -	      dex
     27  f000				  -	      dex
     28  f000				  -	      bpl	checkpokeyplayingloop
     29  f000				  -	      rts
     30  f000				  -
     31  f000				  -playpokeysfxA
     32  f000				  -	      txa
     33  f000				  -	      tay
     34  f000				  -	      lda	pokey1tick,x
     35  f000				  -	      beq	playpokeysfxAcont
     36  f000				  -	      sec
     37  f000				  -	      sbc	#1
     38  f000				  -	      sta	pokey1tick,x	; sound resolution is >1 frame, and we're mid-tock...
     39  f000				  -	      rts
     40  f000				  -
     41  f000				  -playpokeysfxAcont
     42  f000				  -	      lda	pokey1frames,x	; set the frame countdown for this sound chunk
     43  f000				  -	      sta	pokey1tick,x
     44  f000				  -
     45  f000				  -	      lda	pokey1priority,x	; decrease the sound's priority if its non-zero
     46  f000				  -	      beq	playpokeysfxAcont2
     47  f000				  -	      sec
     48  f000				  -	      sbc	#1
     49  f000				  -	      sta	pokey1priority,x
     50  f000				  -playpokeysfxAcont2
     51  f000				  -
     52  f000				  -			; *** FREQUENCY
     53  f000				  -	      lda	(pokey1pointlo,x)
     54  f000				  -	      sta	inttemp1
     55  f000				  -	      clc
     56  f000				  -	      adc	pokey1offset,x	; take into account any pitch modification
     57  f000				  -	      sta	(pokeybaselo),y	; PAUDF0,0
     58  f000				  -
     59  f000				  -			;advance the data pointer +1
     60  f000				  -	      inc	pokey1pointlo,x
     61  f000				  -	      bne	skippokeyhiinc1
     62  f000				  -	      inc	pokey1pointhi,x
     63  f000				  -skippokeyhiinc1
     64  f000				  -
     65  f000				  -			; *** WAVE
     66  f000				  -	      lda	(pokey1pointlo,x)
     67  f000				  -	      asl
     68  f000				  -	      asl
     69  f000				  -	      asl
     70  f000				  -	      asl		; x16
     71  f000				  -
     72  f000				  -			;advance the data pointer +1
     73  f000				  -	      inc	pokey1pointlo,x
     74  f000				  -	      bne	skippokeyhiinc2
     75  f000				  -	      inc	pokey1pointhi,x
     76  f000				  -skippokeyhiinc2
     77  f000				  -
     78  f000				  -	      ora	(pokey1pointlo,x)
     79  f000				  -	      iny
     80  f000				  -	      sta	(pokeybaselo),y
     81  f000				  -
     82  f000				  -	      ora	inttemp1	; check if F|C|V=0
     83  f000				  -	      beq	zeropokeypoint	; if so, we're at the end of the sound.
     84  f000				  -
     85  f000				  -			; advance the pointer +1, on to the next sound chunk
     86  f000				  -	      inc	pokey1pointlo,x
     87  f000				  -	      bne	skippokeyhiinc3
     88  f000				  -	      inc	pokey1pointhi,x
     89  f000				  -skippokeyhiinc3
     90  f000				  -	      rts
     91  f000				  -
     92  f000				  -zeropokeypoint
     93  f000				  -	      sta	pokey1pointlo,x
     94  f000				  -	      sta	pokey1pointhi,x
     95  f000				  -	      sta	pokey1priority,x
     96  f000				  -	      rts
     97  f000				  -
     98  f000				  -schedulepokeysfx
     99  f000				  -	      ldx	#6
    100  f000				  -schedulepokeysfxloop
    101  f000				  -	      lda	pokey1pointlo,x
    102  f000				  -	      ora	pokey1pointhi,x
    103  f000				  -	      bne	schedulespokeysearch
    104  f000				  -	      jmp	schedulepokeyX	; we found an unused channel, so use it...
    105  f000				  -schedulespokeysearch
    106  f000				  -	      dex
    107  f000				  -	      dex
    108  f000				  -	      bpl	schedulepokeysfxloop
    109  f000				  -
    110  f000				  -			; if we're here, all 4 channels are presently playing a sound...
    111  f000				  -	      ldy	#1
    112  f000				  -	      lda	(sfxinstrumentlo),y	; peek at the priority of this sfx...
    113  f000				  -	      bne	schedulepokeysfxcont1
    114  f000				  -	      rts		; ...and skip it if it's 0 priority
    115  f000				  -schedulepokeysfxcont1
    116  f000				  -
    117  f000				  -			; figure out which current sound has the lowest priority...
    118  f000				  -	      lda	#0
    119  f000				  -	      sta	temp8
    120  f000				  -	      lda	pokey1priority
    121  f000				  -	      sta	temp9
    122  f000				  -	      ldx	#6
    123  f000				  -findlowprioritypokeyloop
    124  f000				  -	      lda	pokey1priority,x
    125  f000				  -	      cmp	temp9
    126  f000				  -	      bcs	findlowprioritypokeyloopcontinue
    127  f000				  -	      sta	temp9
    128  f000				  -	      stx	temp8
    129  f000				  -findlowprioritypokeyloopcontinue
    130  f000				  -	      dex
    131  f000				  -	      dex
    132  f000				  -	      bne	findlowprioritypokeyloop
    133  f000				  -	      ldx	temp8	; the low priority channel we'll interrupt
    134  f000				  -
    135  f000				  -schedulepokeyX
    136  f000				  -			;called with X=2*pokey channel to play on...
    137  f000				  -	      ldy	#1	; get priority and sound-resolution (in frames)
    138  f000				  -	      lda	(sfxinstrumentlo),y
    139  f000				  -	      sta	pokey1priority,x
    140  f000				  -	      iny
    141  f000				  -	      lda	(sfxinstrumentlo),y
    142  f000				  -	      sta	pokey1frames,x
    143  f000				  -
    144  f000				  -	      lda	sfxinstrumentlo
    145  f000				  -	      clc
    146  f000				  -	      adc	#3
    147  f000				  -	      sta	pokey1pointlo,x
    148  f000				  -	      lda	sfxinstrumenthi
    149  f000				  -	      adc	#0
    150  f000				  -	      sta	pokey1pointhi,x
    151  f000				  -	      lda	sfxpitchoffset
    152  f000				  -	      sta	pokey1offset,x
    153  f000				  -	      lda	#0
    154  f000				  -	      sta	pokey1tick,x
    155  f000				  -	      rts
    156  f000				  -
    157  f000				  -			; pokey detection routine. we check for pokey in the XBOARD/XM location,
    158  f000				  -			; and the standard $4000 location.
    159  f000				  -			; if pokey the pokey is present, this routine will reset it.
    160  f000				  -	      ifconst	pokeyaddress
    161  f000				  -detectpokeylocation
    162  f000				  -	      lda	#<pokeyaddress
    163  f000				  -	      sta	pokeybaselo
    164  f000				  -	      lda	#>pokeyaddress
    165  f000				  -	      sta	pokeybasehi
    166  f000				  -	      lda	#$ff
    167  f000				  -	      sta	pokeydetected
    168  f000				  -
    169  f000				  -	      if	pokeyaddress = $450
    170  f000				  -	      lda	XCTRL1s
    171  f000				  -	      ora	#%00010100
    172  f000				  -	      sta	XCTRL1s
    173  f000				  -	      sta	XCTRL1
    174  f000				  -	      endif
    175  f000				  -
    176  f000				  -
    177  f000				  -	      lda	#0
    178  f000				  -	      ldy	#15
    179  f000				  -clearpokeyloop
    180  f000				  -	      sta	(pokeybase),y
    181  f000				  -	      dey
    182  f000				  -	      bpl	clearpokeyloop
    183  f000				  -			; take pokey out of reset...
    184  f000				  -	      ldy	#PSKCTL
    185  f000				  -	      lda	#3
    186  f000				  -	      sta	(pokeybase),y
    187  f000				  -	      ldy	#PAUDCTL
    188  f000				  -	      lda	#0
    189  f000				  -	      sta	(pokeybase),y
    190  f000				  -	      rts
    191  f000				  -	      else		; !pokeyaddress
    192  f000				  -detectpokeylocation
    193  f000				  -			;XBoard/XM...
    194  f000				  -	      ldx	#2
    195  f000				  -detectpokeyloop
    196  f000				  -	      lda	XCTRL1s
    197  f000				  -	      ora	#%00010100
    198  f000				  -	      and	POKEYXMMASK,x
    199  f000				  -	      sta	XCTRL1s
    200  f000				  -	      sta	XCTRL1
    201  f000				  -
    202  f000				  -	      lda	POKEYCHECKLO,x
    203  f000				  -	      sta	pokeybaselo
    204  f000				  -	      lda	POKEYCHECKHI,x
    205  f000				  -	      sta	pokeybasehi
    206  f000				  -	      jsr	checkforpokey
    207  f000				  -	      lda	pokeydetected
    208  f000				  -	      beq	foundpokeychip
    209  f000				  -	      dex
    210  f000				  -	      bpl	detectpokeyloop
    211  f000				  -foundpokeychip
    212  f000				  -	      eor	#$ff	; invert state for 7800basic if...then test
    213  f000				  -	      sta	pokeydetected
    214  f000				  -	      rts
    215  f000				  -
    216  f000				  -POKEYXMMASK
    217  f000				  -			;     XM POKEY on    XM POKEY off   XM POKEY off
    218  f000				  -	      .byte	%11111111, %11101111, %11101111
    219  f000				  -
    220  f000				  -POKEYCHECKLO
    221  f000				  -	      .byte	<$0450, <$0450, <$4000
    222  f000				  -POKEYCHECKHI
    223  f000				  -	      .byte	>$0450, >$0450, >$4000
    224  f000				  -
    225  f000				  -checkforpokey
    226  f000				  -	      ldy	#$0f
    227  f000				  -	      lda	#$00
    228  f000				  -	      sta	pokeydetected	; start off by assuming pokey will be detected
    229  f000				  -resetpokeyregistersloop
    230  f000				  -	      sta	(pokeybase),y
    231  f000				  -	      dey
    232  f000				  -	      bpl	resetpokeyregistersloop
    233  f000				  -
    234  f000				  -	      ldy	#PAUDCTL
    235  f000				  -	      sta	(pokeybase),y
    236  f000				  -	      ldy	#PSKCTL
    237  f000				  -	      sta	(pokeybase),y
    238  f000				  -
    239  f000				  -			; let the dust settle...
    240  f000				  -	      nop
    241  f000				  -	      nop
    242  f000				  -	      nop
    243  f000				  -
    244  f000				  -	      lda	#4
    245  f000				  -	      sta	temp9
    246  f000				  -pokeycheckloop1
    247  f000				  -			; we're in reset, so the RANDOM register should read $ff...
    248  f000				  -	      ldy	#PRANDOM
    249  f000				  -	      lda	(pokeybase),y
    250  f000				  -	      cmp	#$ff
    251  f000				  -	      bne	nopokeydetected
    252  f000				  -	      dec	temp9
    253  f000				  -	      bne	pokeycheckloop1
    254  f000				  -
    255  f000				  -			; take pokey out of reset...
    256  f000				  -	      ldy	#PSKCTL
    257  f000				  -	      lda	#3
    258  f000				  -	      sta	(pokeybase),y
    259  f000				  -	      ldy	#PAUDCTL
    260  f000				  -	      lda	#0
    261  f000				  -	      sta	(pokeybase),y
    262  f000				  -
    263  f000				  -			; let the dust settle again...
    264  f000				  -	      nop
    265  f000				  -	      nop
    266  f000				  -	      nop
    267  f000				  -
    268  f000				  -	      lda	#4
    269  f000				  -	      sta	temp9
    270  f000				  -pokeycheckloop2
    271  f000				  -			; we're out of reset, so RANDOM should read non-$ff...
    272  f000				  -	      ldy	#PRANDOM
    273  f000				  -	      lda	(pokeybase),y
    274  f000				  -	      cmp	#$ff
    275  f000				  -	      beq	skippokeycheckreturn
    276  f000				  -	      rts
    277  f000				  -skippokeycheckreturn
    278  f000				  -	      dec	temp9
    279  f000				  -	      bne	pokeycheckloop2
    280  f000				  -nopokeydetected
    281  f000				  -	      dec	pokeydetected	; pokeydetected=#$ff
    282  f000				  -	      rts
    283  f000				  -
    284  f000				  -	      endif		; !pokeyaddress
    285  f000				  -
    286  f000				  -pokeysoundmoduleend
    287  f000				  -
    288  f000				  -	      echo	"  (pokeysound module is using ",[(pokeysoundmoduleend-pokeysoundmodulestart)]d," bytes)"
    289  f000				  -
    290  f000					      endif
------- FILE c:\Users\steve\OneDrive\Desktop\2018dev\7800\7800basic\projects\demo1\lesson2_4.78b.asm
   1422  f000					      endif
   1423  f000					      ifnconst	included.tracker.asm
------- FILE tracker.asm LEVEL 2 PASS 3
      0  f000					      include	tracker.asm
      1  f000							; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  f000
      3  f000
      4  f000				  -	      ifconst	MUSICTRACKER
      5  f000				  -
      6  f000				  -trackerstart
      7  f000				  -
      8  f000				  -			; ** songtempo lists how many 256ths of a frame a 16th note lasts
      9  f000				  -			; ** the player operates on a 16th note grid.
     10  f000				  -
     11  f000				  -servicesongover
     12  f000				  -	      rts
     13  f000				  -servicesong
     14  f000				  -	      lda	songtempo
     15  f000				  -	      beq	servicesongover	; ** if song is off/paused then return
     16  f000				  -servicesongcontinue
     17  f000				  -	      lda	sfxschedulelock
     18  f000				  -	      sta	sfxschedulemissed
     19  f000				  -	      bne	servicesongover
     20  f000				  -	      lda	songtempo
     21  f000				  -	      clc
     22  f000				  -	      adc	songtick	; add songtempo to songtick until it rolls over
     23  f000				  -	      sta	songtick	; this is how we break away from 50/60Hz timing.
     24  f000				  -	      bcc	servicesongover
     25  f000				  -			; ** if we're here a new 16th note has passed
     26  f000				  -			; ** check if a new note is due on any of the 4 channels
     27  f000				  -servicesongredo
     28  f000				  -	      ldx	#3
     29  f000				  -checkchannelloop
     30  f000				  -	      dec	songchannel1busywait,x
     31  f000				  -	      bpl	carryoncheckingchannel
     32  f000				  -	      txa
     33  f000				  -	      pha		; save X for the loop
     34  f000				  -	      jsr	processsongdata
     35  f000				  -	      pla		; restore X for the loop
     36  f000				  -	      tax
     37  f000				  -carryoncheckingchannel
     38  f000				  -	      dex
     39  f000				  -	      bpl	checkchannelloop
     40  f000				  -	      lda	inactivechannelcount
     41  f000				  -	      cmp	#15
     42  f000				  -	      bne	skipstopsong
     43  f000				  -	      lda	songloops
     44  f000				  -	      bne	doasongloop
     45  f000				  -			;lda #0
     46  f000				  -	      sta	songtempo	; all channels are done. stop the song
     47  f000				  -	      rts
     48  f000				  -doasongloop
     49  f000				  -	      bmi	skipsongloopadjust
     50  f000				  -	      dec	songloops
     51  f000				  -skipsongloopadjust
     52  f000				  -	      jsr	setsongchannels
     53  f000				  -	      jmp	servicesongredo
     54  f000				  -skipstopsong
     55  f000				  -	      rts
     56  f000				  -
     57  f000				  -processsongdata
     58  f000				  -			; channel needs processing
     59  f000				  -			; X=channel #
     60  f000				  -
     61  f000				  -	      txa
     62  f000				  -	      clc
     63  f000				  -	      adc	songchannel1stackdepth,x	; stack depth value will be 0, 4, or 8
     64  f000				  -	      tay
     65  f000				  -
     66  f000				  -
     67  f000				  -			; ** indirect x is cumbersome with mult-byte commands.
     68  f000				  -			; ** setup a pointer to the song data for indirect y addressing.
     69  f000				  -	      lda	songchannel1layer1lo,y
     70  f000				  -	      sta	songdatalo
     71  f000				  -	      lda	songchannel1layer1hi,y
     72  f000				  -	      sta	songdatahi
     73  f000				  -	      ora	songdatalo
     74  f000				  -	      bne	channelhasdata
     75  f000				  -			;channel data is pointing at $0000
     76  f000				  -	      lda	#$7F
     77  f000				  -	      sta	songchannel1busywait,x	; skip a bunch of notes
     78  f000				  -setchannelcountbits
     79  f000				  -	      lda	channel2bits,x
     80  f000				  -	      ora	inactivechannelcount
     81  f000				  -	      sta	inactivechannelcount
     82  f000				  -	      rts
     83  f000				  -channelhasdata
     84  f000				  -
     85  f000				  -	      sty	songstackindex
     86  f000				  -	      ldy	#0
     87  f000				  -	      lda	(songdatalo),y	; ** load in the next byte of song data, so we can decode it
     88  f000				  -	      cmp	#$ff
     89  f000				  -	      bne	carryoncheckingdatatype	; ** $ff=pattern end marker
     90  f000				  -	      jmp	handlechannelEOD
     91  f000				  -
     92  f000				  -carryoncheckingdatatype
     93  f000				  -	      and	#$F0
     94  f000				  -	      cmp	#$C0
     95  f000				  -	      beq	handlechannelrest	; 0000XXXX=rest
     96  f000				  -	      cmp	#$F0
     97  f000				  -	      beq	handlemultibytecommand
     98  f000				  -	      cmp	#$D0
     99  f000				  -	      beq	handlesemiup
    100  f000				  -	      cmp	#$E0
    101  f000				  -	      beq	handlesemidown
    102  f000				  -handlenotedata
    103  f000				  -			; ** TODO: note playing is a terrible choice for fall-through
    104  f000				  -
    105  f000				  -			; ** its simple note data, prepare arguments for schedulesfx
    106  f000				  -
    107  f000				  -			; ** set the note length
    108  f000				  -	      lda	(songdatalo),y
    109  f000				  -	      and	#$0F
    110  f000				  -	      sta	songchannel1busywait,x
    111  f000				  -
    112  f000				  -			; ** load the instrument
    113  f000				  -	      lda	songchannel1instrumentlo,x
    114  f000				  -	      sta	sfxinstrumentlo
    115  f000				  -	      lda	songchannel1instrumenthi,x
    116  f000				  -	      sta	sfxinstrumenthi
    117  f000				  -
    118  f000				  -			; ** get the note, and transpose
    119  f000				  -	      lda	(songdatalo),y
    120  f000				  -	      lsr
    121  f000				  -	      lsr
    122  f000				  -	      lsr
    123  f000				  -	      lsr
    124  f000				  -	      clc
    125  f000				  -	      adc	songchannel1transpose,x	; ** add it to the transpose index
    126  f000				  -			; ** its up the respective SFX scheduler to handle and save the note data
    127  f000				  -	      sta	sfxnoteindex
    128  f000				  -
    129  f000				  -	      lda	#0
    130  f000				  -	      sta	sfxpitchoffset
    131  f000				  -
    132  f000				  -	      jsr	schedulesfx
    133  f000				  -
    134  f000				  -	      jmp	advancethesongpointer1byte	; advance to the next data byte and exit
    135  f000				  -
    136  f000				  -handlechannelrest
    137  f000				  -			; ** set the note length
    138  f000				  -	      lda	(songdatalo),y
    139  f000				  -	      and	#$0F
    140  f000				  -	      sta	songchannel1busywait,x
    141  f000				  -	      jmp	advancethesongpointer1byte	; advance to the next data byte and exit
    142  f000				  -
    143  f000				  -handlesemiup
    144  f000				  -	      lda	(songdatalo),y	; ** reload the song data, so we can get at the lower nibble
    145  f000				  -	      and	#$0f	; ** since we need to mask the nibble of the subtracted value,
    146  f000				  -	      clc
    147  f000				  -handlesemidownentry
    148  f000				  -	      adc	songchannel1transpose,x	; ** add it to the transpose index
    149  f000				  -	      sta	songchannel1transpose,x
    150  f000				  -	      jsr	advancethesongpointer1byte
    151  f000				  -	      jmp	processsongdata	; semi doesn't have note length, so process the next data byte...
    152  f000				  -
    153  f000				  -handlesemidown
    154  f000				  -	      lda	(songdatalo),y	; ** reload the song data, so we can get at the lower nibble
    155  f000				  -	      and	#$0f	; ** since we need to mask the nibble of the subtracted value,
    156  f000				  -	      eor	#$ff	; ** its easier if we negate it, and then add it instead.
    157  f000				  -	      sec
    158  f000				  -	      jmp	handlesemidownentry
    159  f000				  -
    160  f000				  -handlemultibytecommand
    161  f000				  -	      lda	(songdatalo),y	; ** reload the song data, so we can get at the lower nibble
    162  f000				  -	      and	#$0f	; ** since we need to mask the nibble of the subtracted value,
    163  f000				  -	      cmp	#$08	; ** load new instrument?
    164  f000				  -	      bne	nothandleinstrumentchange
    165  f000				  -handleinstrumentchange
    166  f000				  -	      iny
    167  f000				  -	      lda	(songdatalo),y
    168  f000				  -	      sta	songchannel1instrumentlo,x
    169  f000				  -	      iny
    170  f000				  -	      lda	(songdatalo),y
    171  f000				  -	      sta	songchannel1instrumenthi,x
    172  f000				  -	      lda	#3
    173  f000				  -	      jsr	advancethesongpointerNbytes	; advance 3 bytes
    174  f000				  -	      jmp	processsongdata
    175  f000				  -
    176  f000				  -nothandleinstrumentchange
    177  f000				  -	      cmp	#$09	; ** absolute tempo change?
    178  f000				  -	      bne	nothandletempochange
    179  f000				  -	      lda	#0
    180  f000				  -	      sta	songtempo
    181  f000				  -handlerelativetempochange
    182  f000				  -	      iny
    183  f000				  -	      lda	(songdatalo),y
    184  f000				  -	      clc
    185  f000				  -	      adc	songtempo
    186  f000				  -	      sta	songtempo
    187  f000				  -	      lda	#2
    188  f000				  -	      jsr	advancethesongpointerNbytes	; advance 2 bytes
    189  f000				  -	      jmp	processsongdata
    190  f000				  -
    191  f000				  -nothandletempochange
    192  f000				  -	      cmp	#$0A	; ** relative tempo change?:
    193  f000				  -	      beq	handlerelativetempochange
    194  f000				  -	      cmp	#$0B	; ** octave/semi change?
    195  f000				  -	      beq	handleoctavesemichange
    196  f000				  -handlepatterndata
    197  f000				  -			; ** if we're here its a pattern/loop "subroutine"
    198  f000				  -			; ** move the channel's "stack" pointer and populate the new stack level
    199  f000				  -
    200  f000				  -	      lda	#4
    201  f000				  -	      clc
    202  f000				  -	      adc	songchannel1stackdepth,x
    203  f000				  -	      sta	songchannel1stackdepth,x	; stack depth value will be 0, 4, or 8
    204  f000				  -
    205  f000				  -	      stx	inttemp6	; about to invalidate x. save it.
    206  f000				  -	      lda	songstackindex
    207  f000				  -	      adc	#4
    208  f000				  -	      tax
    209  f000				  -
    210  f000				  -	      lda	(songdatalo),y
    211  f000				  -	      and	#$7
    212  f000				  -	      sta	songchannel1layer1loops,x
    213  f000				  -	      iny
    214  f000				  -	      lda	(songdatalo),y
    215  f000				  -	      sta	songchannel1layer1lo,x
    216  f000				  -	      iny
    217  f000				  -	      lda	(songdatalo),y
    218  f000				  -	      sta	songchannel1layer1hi,x
    219  f000				  -
    220  f000				  -	      ldx	inttemp6	; restore x with the channel #
    221  f000				  -
    222  f000				  -			; ** advance will operate on the old stack level, since we didn't store the updated songstackindex...
    223  f000				  -	      lda	#3
    224  f000				  -	      jsr	advancethesongpointerNbytes	; advance 3 bytes
    225  f000				  -
    226  f000				  -			; ** ...but the new stack level will be correctly picked up when we process the next byte.
    227  f000				  -	      jmp	processsongdata
    228  f000				  -
    229  f000				  -handlechannelEOD
    230  f000				  -			; ** check if there are loops remaining on the pattern
    231  f000				  -	      stx	inttemp6
    232  f000				  -	      ldx	songstackindex
    233  f000				  -	      dec	songchannel1layer1loops,x
    234  f000				  -	      bmi	handlechannelEODnoloop
    235  f000				  -			; ** loops are remaining. set the pattern pointer to the pattern start, which is contained after the EOD
    236  f000				  -	      iny
    237  f000				  -	      lda	(songdatalo),y
    238  f000				  -	      sta	songchannel1layer1lo,x
    239  f000				  -	      iny
    240  f000				  -	      lda	(songdatalo),y
    241  f000				  -	      sta	songchannel1layer1hi,x
    242  f000				  -	      ldx	inttemp6
    243  f000				  -	      jmp	processsongdata	; EOD handling doesn't have note length, so process the next data byte...
    244  f000				  -
    245  f000				  -handlechannelEODnoloop
    246  f000				  -			; this pattern/loop is done playing. "pop" the stack
    247  f000				  -	      ldx	inttemp6
    248  f000				  -	      lda	songchannel1stackdepth,x
    249  f000				  -	      beq	handlerootchannelEOD
    250  f000				  -	      sec
    251  f000				  -	      sbc	#4
    252  f000				  -	      sta	songchannel1stackdepth,x
    253  f000				  -	      jmp	processsongdata	; EOD handling doesn't have note length, so process the next data byte...
    254  f000				  -
    255  f000				  -handlerootchannelEOD
    256  f000				  -			; this channel is done. point it to $ff data so we no longer process this channel.
    257  f000				  -	      lda	#0
    258  f000				  -	      sta	songchannel1layer1lo,x
    259  f000				  -	      sta	songchannel1layer1hi,x
    260  f000				  -	      sta	songchannel1busywait,x
    261  f000				  -	      jmp	setchannelcountbits
    262  f000				  -	      rts
    263  f000				  -
    264  f000				  -nothandlepatternchange
    265  f000				  -handleoctavesemichange
    266  f000				  -	      iny
    267  f000				  -	      lda	(songdatalo),y
    268  f000				  -	      sta	songchannel1transpose,x
    269  f000				  -	      lda	#2
    270  f000				  -	      jsr	advancethesongpointerNbytes	; advance 2 bytes
    271  f000				  -	      jmp	processsongdata
    272  f000				  -
    273  f000				  -advancethesongpointer1byte
    274  f000				  -	      txa
    275  f000				  -	      ldx	songstackindex
    276  f000				  -	      inc	songchannel1layer1lo,x
    277  f000				  -	      bne	skiphiadvancethesongpointer1byte
    278  f000				  -	      inc	songchannel1layer1hi,x
    279  f000				  -skiphiadvancethesongpointer1byte
    280  f000				  -	      tax
    281  f000				  -	      rts
    282  f000				  -
    283  f000				  -advancethesongpointerNbytes
    284  f000				  -			; entered with A=# of byte to advance
    285  f000				  -	      stx	inttemp6
    286  f000				  -	      ldx	songstackindex
    287  f000				  -	      clc
    288  f000				  -	      adc	songchannel1layer1lo,x
    289  f000				  -	      sta	songchannel1layer1lo,x
    290  f000				  -	      lda	#0
    291  f000				  -	      adc	songchannel1layer1hi,x
    292  f000				  -	      sta	songchannel1layer1hi,x
    293  f000				  -	      ldx	inttemp6
    294  f000				  -	      rts
    295  f000				  -
    296  f000				  -clearsongmemory
    297  f000				  -	      lda	#0
    298  f000				  -	      ldx	#(songchannel4instrumenthi-songchannel1layer1lo)
    299  f000				  -clearsongmemoryloop1
    300  f000				  -	      sta	songchannel1layer1lo,x
    301  f000				  -	      dex
    302  f000				  -	      bpl	clearsongmemoryloop1
    303  f000				  -
    304  f000				  -	      ldx	#(songchannel4stackdepth-songchannel1layer1loops)
    305  f000				  -clearsongmemoryloop2
    306  f000				  -	      sta	songchannel1layer1loops,x
    307  f000				  -	      dex
    308  f000				  -	      bpl	clearsongmemoryloop2
    309  f000				  -
    310  f000				  -	      lda	#$ff
    311  f000				  -	      ldx	#3
    312  f000				  -clearsongmemoryloop3
    313  f000				  -	      sta	songchannel1busywait,x
    314  f000				  -	      dex
    315  f000				  -	      bpl	clearsongmemoryloop3
    316  f000				  -	      rts
    317  f000				  -
    318  f000				  -setsongchannels
    319  f000				  -	      jsr	clearsongmemory
    320  f000				  -	      ldy	#7
    321  f000				  -	      ldx	#3
    322  f000				  -setsongchannelsloop
    323  f000				  -	      lda	(songpointerlo),y
    324  f000				  -	      sta	songchannel1layer1hi,x
    325  f000				  -	      dey
    326  f000				  -	      lda	(songpointerlo),y
    327  f000				  -	      sta	songchannel1layer1lo,x
    328  f000				  -	      dex
    329  f000				  -	      dey
    330  f000				  -	      bpl	setsongchannelsloop
    331  f000				  -	      rts
    332  f000				  -
    333  f000				  -channel2bits
    334  f000				  -	      .byte	1,2,4,8
    335  f000				  -
    336  f000				  -tiatrackeroctavenotes
    337  f000				  -	      ifconst	BUZZBASS
    338  f000				  -LOWC       =	15
    339  f000				  -	      else
    340  f000				  -LOWC       =	14
    341  f000				  -	      endif
    342  f000				  -			; ****** ELECTRONIC (0 to 11)
    343  f000				  -	      .byte	LOWC,20	; c0	 16.1Hz
    344  f000				  -	      .byte	LOWC,18	; c#0
    345  f000				  -	      .byte	LOWC,17	; d0
    346  f000				  -	      .byte	LOWC,16	; d#0
    347  f000				  -	      .byte	LOWC,15	; e0
    348  f000				  -	      .byte	LOWC,14	; f0  (very off)
    349  f000				  -	      .byte	LOWC,14	; f#0
    350  f000				  -	      .byte	LOWC,13	; g0
    351  f000				  -	      .byte	LOWC,12	; g#0
    352  f000				  -	      .byte	LOWC,11	; a0
    353  f000				  -	      .byte	LOWC,11	; a#0 (very off)
    354  f000				  -	      .byte	LOWC,10	; b0	 30.7Hz
    355  f000				  -
    356  f000				  -			; ****** SLIGHTLY BUZZY (12 to 23)
    357  f000				  -	      .byte	6,30	; c1	 32.7Hz
    358  f000				  -	      .byte	6,28	; c#1
    359  f000				  -	      .byte	6,27	; d1
    360  f000				  -	      .byte	6,25	; d#1
    361  f000				  -	      .byte	6,24	; e1
    362  f000				  -	      .byte	6,22	; f1
    363  f000				  -	      .byte	6,21	; f#1
    364  f000				  -	      .byte	6,20	; g1
    365  f000				  -	      .byte	6,18	; g#1
    366  f000				  -	      .byte	6,17	; a1
    367  f000				  -	      .byte	6,16	; a#1
    368  f000				  -	      .byte	6,15	; b1	 63.4Hz
    369  f000				  -
    370  f000				  -			; ****** BUZZY (24 to 39)
    371  f000				  -	      .byte	1,31	; c2	 65.5
    372  f000				  -	      .byte	1,30	; c#2	 67.6
    373  f000				  -	      .byte	1,27	; d2	 72.3
    374  f000				  -	      .byte	1,26	; d#2	 77.6
    375  f000				  -	      .byte	1,24	; e2
    376  f000				  -	      .byte	1,23	; f2
    377  f000				  -	      .byte	1,22	; f#2
    378  f000				  -	      .byte	1,20	; g2
    379  f000				  -	      .byte	1,19	; g#2
    380  f000				  -	      .byte	1,18	; a2
    381  f000				  -	      .byte	1,17	; a#2
    382  f000				  -	      .byte	1,16	; b2
    383  f000				  -	      .byte	1,15	; c3	126.8Hz
    384  f000				  -	      .byte	1,14	; c#3
    385  f000				  -	      .byte	1,13	; d3	149.7Hz
    386  f000				  -	      .byte	1,12	; d#3	161.2Hz (very off)
    387  f000				  -			; ****** PURE (40 to 71) - best key is A3 Major
    388  f000				  -	      .byte	12,31	; e3	163.8Hz
    389  f000				  -	      .byte	12,29	; f3
    390  f000				  -	      .byte	12,28	; f#3
    391  f000				  -	      .byte	12,26	; g3
    392  f000				  -	      .byte	12,24	; g#3
    393  f000				  -	      .byte	12,23	; a3  songs in key of A benefit from Perceptual Tuning
    394  f000				  -	      .byte	12,22	; a#3
    395  f000				  -	      .byte	12,20	; b3
    396  f000				  -	      .byte	12,19	; c4  (middle C)
    397  f000				  -	      .byte	12,18	; c#4
    398  f000				  -	      .byte	12,17	; d4
    399  f000				  -	      .byte	12,16	; d#4
    400  f000				  -	      .byte	12,15	; e4
    401  f000				  -	      .byte	12,14	; f4
    402  f000				  -	      .byte	12,13	; f#4
    403  f000				  -	      .byte	12,12	; g4  (very off)
    404  f000				  -	      .byte	12,12	; g#4
    405  f000				  -	      .byte	12,11	; a4
    406  f000				  -	      .byte	12,10	; a#4
    407  f000				  -	      .byte	4,31	; b4
    408  f000				  -	      .byte	4,29	; c5
    409  f000				  -	      .byte	4,28	; c#5
    410  f000				  -	      .byte	4,26	; d5
    411  f000				  -	      .byte	4,24	; d#5
    412  f000				  -	      .byte	4,23	; e5
    413  f000				  -	      .byte	4,22	; f5
    414  f000				  -	      .byte	4,20	; f#5
    415  f000				  -	      .byte	4,19	; g5
    416  f000				  -	      .byte	4,18	; g#5
    417  f000				  -	      .byte	4,17	; a5
    418  f000				  -	      .byte	4,16	; a#5
    419  f000				  -	      .byte	4,15	; b5
    420  f000				  -
    421  f000				  -			; ****** TUNED WIND (72 to 83)
    422  f000				  -	      .byte	8,30	; c
    423  f000				  -	      .byte	8,28	; c#
    424  f000				  -	      .byte	8,27	; d
    425  f000				  -	      .byte	8,25	; d#
    426  f000				  -	      .byte	8,24	; e
    427  f000				  -	      .byte	8,22	; f
    428  f000				  -	      .byte	8,21	; f#
    429  f000				  -	      .byte	8,20	; g
    430  f000				  -	      .byte	8,18	; g#
    431  f000				  -	      .byte	8,17	; a
    432  f000				  -	      .byte	8,16	; a#
    433  f000				  -	      .byte	8,15	; b
    434  f000				  -
    435  f000				  -	      include	"tiadrumkit.asm"
    436  f000				  -
    437  f000				  -trackerend
    438  f000				  -
    439  f000				  -	      echo	"  (tracker module is using ",[(trackerend-trackerstart)]d," bytes)"
    440  f000				  -
    441  f000					      endif		;MUSICTRACKER
------- FILE c:\Users\steve\OneDrive\Desktop\2018dev\7800\7800basic\projects\demo1\lesson2_4.78b.asm
   1425  f000					      endif
   1426  f000					      ifnconst	included.hiscore.asm
------- FILE hiscore.asm LEVEL 2 PASS 3
      0  f000					      include	hiscore.asm
      1  f000							; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  f000
      3  f000				  -	      ifconst	HSSUPPORT
      4  f000				  -
      5  f000				  -	      ifconst	BANKSETROM
      6  f000				  -	      ifconst	isBANKSETBANK
      7  f000				  -HSCHARSHERE =	1
      8  f000				  -	      endif
      9  f000				  -	      else		; !BANKSETROM so embed the character strings
     10  f000				  -HSCHARSHERE =	1
     11  f000				  -	      endif
     12  f000				  -
     13  f000				  -	      ifnconst	isBANKSETBANK
     14  f000				  -hiscorestart
     15  f000				  -
     16  f000				  -detectatarivoxeeprom
     17  f000				  -hiscoremodulestart
     18  f000				  -			; do a test to see if atarivox eeprom can be accessed, and save results
     19  f000				  -	      jsr	AVoxDetect
     20  f000				  -	      eor	#$ff	; invert for easy 7800basic if...then logic
     21  f000				  -	      sta	avoxdetected
     22  f000				  -	      lda	#$0
     23  f000				  -	      sta	SWACNT
     24  f000				  -	      lda	avoxdetected
     25  f000				  -	      rts
     26  f000				  -
     27  f000				  -detecthsc
     28  f000				  -			; check for the HSC ROM signature...
     29  f000				  -	      lda	XCTRL1s
     30  f000				  -	      ora	#%00001100
     31  f000				  -	      sta	XCTRL1s
     32  f000				  -	      sta	XCTRL1
     33  f000				  -	      lda	$3900
     34  f000				  -	      eor	#$C6
     35  f000				  -	      bne	detecthscfail
     36  f000				  -	      lda	$3904
     37  f000				  -	      eor	#$FE
     38  f000				  -	      bne	detecthscfail
     39  f000				  -			; check if it's initialized...
     40  f000				  -	      ldy	#0
     41  f000				  -	      lda	#$ff
     42  f000				  -checkhscinit
     43  f000				  -	      and	$1000,y
     44  f000				  -	      dey
     45  f000				  -	      bpl	checkhscinit
     46  f000				  -	      cmp	#$ff
     47  f000				  -	      bne	hscisalreadyinit
     48  f000				  -			; if we're here, we need to do a minimal HSC init...
     49  f000				  -	      ldy	#$28
     50  f000				  -hscinitloop1
     51  f000				  -	      lda	hscheader,y
     52  f000				  -	      sta	$1000,y
     53  f000				  -	      dey
     54  f000				  -	      bpl	hscinitloop1
     55  f000				  -	      ldy	#$89
     56  f000				  -	      lda	#$7F
     57  f000				  -hscinitloop2
     58  f000				  -	      sta	$10B3,y
     59  f000				  -	      dey
     60  f000				  -	      cpy	#$ff
     61  f000				  -	      bne	hscinitloop2
     62  f000				  -hscisalreadyinit
     63  f000				  -	      lda	#$ff
     64  f000				  -	      rts
     65  f000				  -hscheader
     66  f000				  -	      .byte	$00,$00,$68,$83,$AA,$55,$9C,$FF,$07,$12,$02,$1F,$00,$00,$00,$00
     67  f000				  -	      .byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     68  f000				  -	      .byte	$00,$00,$00,$00,$00,$00,$00,$00,$03
     69  f000				  -detecthscfail
     70  f000				  -	      lda	XCTRL1s
     71  f000				  -	      and	#%11110111
     72  f000				  -	      sta	XCTRL1s
     73  f000				  -	      lda	#0
     74  f000				  -	      rts
     75  f000				  -	      endif		; isBANKSETBANK
     76  f000				  -
     77  f000				  -	      ifnconst	hiscorefont
     78  f000				  -	      echo	""
     79  f000				  -	      echo	"WARNING: High score support is enabled, but the hiscorefont.png was"
     80  f000				  -	      echo	" NOT imported with incgraphic. The high score display code"
     81  f000				  -	      echo	" has been omitted from this build."
     82  f000				  -	      echo	""
     83  f000				  -	      else		; hiscorefont
     84  f000				  -	      ifnconst	isBANKSETBANK
     85  f000				  -hscdrawscreen
     86  f000				  -
     87  f000				  -			; we use 20 lines on a 24 line display
     88  f000				  -			; HSSCOREY to dynamically centers based on
     89  f000				  -			;HSSCOREY = 0
     90  f000				  -HSSCOREY   =	((WZONECOUNT*WZONEHEIGHT/8)-22)/2
     91  f000				  -HSCURSORY  =	((HSSCOREY/(WZONEHEIGHT/8))*WZONEHEIGHT)
     92  f000				  -
     93  f000				  -	      ifconst	HSSCORESIZE
     94  f000				  -SCORESIZE  =	HSSCORESIZE
     95  f000				  -	      else
     96  f000				  -SCORESIZE  =	6
     97  f000				  -	      endif
     98  f000				  -
     99  f000				  -			;save shadow registers for later return...
    100  f000				  -	      lda	sCTRL
    101  f000				  -	      sta	ssCTRL
    102  f000				  -	      lda	sCHARBASE
    103  f000				  -	      sta	ssCHARBASE
    104  f000				  -	      lda	#$60
    105  f000				  -	      sta	charactermode
    106  f000				  -	      jsr	drawwait
    107  f000				  -	      jsr	blacken320colors
    108  f000				  -	      jsr	clearscreen
    109  f000				  -
    110  f000				  -			;set the character base to the HSC font
    111  f000				  -	      lda	#>hiscorefont
    112  f000				  -	      sta	CHARBASE
    113  f000				  -	      sta	sCHARBASE
    114  f000				  -	      lda	#%01000011	;Enable DMA, mode=320A
    115  f000				  -	      sta	CTRL
    116  f000				  -	      sta	sCTRL
    117  f000				  -
    118  f000				  -	      lda	#60
    119  f000				  -	      sta	hsjoydebounce
    120  f000				  -
    121  f000				  -	      lda	#0
    122  f000				  -	      sta	hscursorx
    123  f000				  -	      sta	framecounter
    124  f000				  -	      ifnconst	HSCOLORCHASESTART
    125  f000				  -	      lda	#$8D	; default is blue. why not?
    126  f000				  -	      else
    127  f000				  -	      lda	#HSCOLORCHASESTART
    128  f000				  -	      endif
    129  f000				  -	      sta	hscolorchaseindex
    130  f000				  -
    131  f000				  -	      lda	#$0F
    132  f000				  -	      sta	P0C2	; base text is white
    133  f000				  -
    134  f000				  -	      jsr	hschasecolors
    135  f000				  -			; ** plot all of the initials
    136  f000				  -	      lda	#<HSRAMInitials
    137  f000				  -	      sta	temp1	; charmaplo
    138  f000				  -	      lda	#>HSRAMInitials
    139  f000				  -	      sta	temp2	; charmaphi
    140  f000				  -	      lda	#32+29	; palette=0-29 | 32-(width=3)
    141  f000				  -	      sta	temp3	; palette/width
    142  f000				  -	      lda	#104
    143  f000				  -	      sta	temp4	; X
    144  f000				  -	      lda	#((HSSCOREY+6)/(WZONEHEIGHT/8))
    145  f000				  -	      sta	temp5	; Y
    146  f000				  -plothsinitialsloop
    147  f000				  -	      jsr	plotcharacters
    148  f000				  -	      clc
    149  f000				  -	      lda	temp3
    150  f000				  -	      adc	#32
    151  f000				  -	      sta	temp3
    152  f000				  -	      inc	temp5
    153  f000				  -	      if	WZONEHEIGHT = 8
    154  f000				  -	      inc	temp5
    155  f000				  -	      endif
    156  f000				  -	      clc
    157  f000				  -	      lda	#3
    158  f000				  -	      adc	temp1
    159  f000				  -	      sta	temp1
    160  f000				  -	      cmp	#(<(HSRAMInitials+15))
    161  f000				  -	      bcc	plothsinitialsloop
    162  f000				  -
    163  f000				  -	      ifconst	HSGAMENAMELEN
    164  f000				  -			;plot the game name...
    165  f000				  -	      lda	#<HSGAMENAMEtable
    166  f000				  -	      sta	temp1	; charmaplo
    167  f000				  -	      lda	#>HSGAMENAMEtable
    168  f000				  -	      sta	temp2	; charmaphi
    169  f000				  -	      lda	#(32-HSGAMENAMELEN)	; palette=0*29 | 32-(width=3)
    170  f000				  -	      sta	temp3	; palette/width
    171  f000				  -	      lda	#(80-(HSGAMENAMELEN*2))
    172  f000				  -	      sta	temp4	; X
    173  f000				  -	      lda	#((HSSCOREY+0)/(WZONEHEIGHT/8))
    174  f000				  -	      sta	temp5	; Y
    175  f000				  -	      jsr	plotcharacters
    176  f000				  -	      endif		; HSGAMENAMELEN
    177  f000				  -
    178  f000				  -			;plot "difficulty"...
    179  f000				  -	      ldy	gamedifficulty
    180  f000				  -	      ifnconst	HSNOLEVELNAMES
    181  f000				  -	      lda	highscoredifficultytextlo,y
    182  f000				  -	      sta	temp1
    183  f000				  -	      lda	highscoredifficultytexthi,y
    184  f000				  -	      sta	temp2
    185  f000				  -	      sec
    186  f000				  -	      lda	#32
    187  f000				  -	      sbc	highscoredifficultytextlen,y
    188  f000				  -	      sta	temp3	; palette/width
    189  f000				  -	      sec
    190  f000				  -	      lda	#40
    191  f000				  -	      sbc	highscoredifficultytextlen,y
    192  f000				  -	      asl
    193  f000				  -	      sta	temp4	; X
    194  f000				  -	      else
    195  f000				  -	      lda	#<HSHIGHSCOREStext
    196  f000				  -	      sta	temp1	; charmaplo
    197  f000				  -	      lda	#>HSHIGHSCOREStext
    198  f000				  -	      sta	temp2	; charmaphi
    199  f000				  -	      lda	#(32-11)	; palette=0*29 | 32-(width=3)
    200  f000				  -	      sta	temp3	; palette/width
    201  f000				  -	      lda	#(80-(11*2))
    202  f000				  -	      sta	temp4	; X
    203  f000				  -	      endif		; HSNOLEVELNAMES
    204  f000				  -
    205  f000				  -	      lda	#((HSSCOREY+2)/(WZONEHEIGHT/8))
    206  f000				  -	      sta	temp5	; Y
    207  f000				  -	      jsr	plotcharacters
    208  f000				  -	      ldy	hsdisplaymode	; 0=attact mode, 1=player eval, 2=player 1 eval, 3=player 2 player eval, 4=player 2 player evel (joy1)
    209  f000				  -	      bne	carronwithscoreevaluation
    210  f000				  -	      jmp	donoscoreevaluation
    211  f000				  -carronwithscoreevaluation
    212  f000				  -	      dey
    213  f000				  -	      lda	highscorelabeltextlo,y
    214  f000				  -	      sta	temp1
    215  f000				  -	      lda	highscorelabeltexthi,y
    216  f000				  -	      sta	temp2
    217  f000				  -	      sec
    218  f000				  -	      lda	#(32-15)	; palette=0*29 | 32-(width=3)
    219  f000				  -	      sta	temp3	; palette/width
    220  f000				  -	      lda	highscorelabeladjust1,y
    221  f000				  -	      sta	temp4	; X
    222  f000				  -	      lda	#((HSSCOREY+18)/(WZONEHEIGHT/8))
    223  f000				  -	      sta	temp5	; Y
    224  f000				  -	      jsr	plotcharacters
    225  f000				  -
    226  f000				  -	      ldy	hsdisplaymode	; 0=attact mode, 1=player eval, 2=player 1 eval, 3=player 2 player eval, 4=player 2 player evel (joy1)
    227  f000				  -	      dey
    228  f000				  -			;plot the current player score...
    229  f000				  -	      lda	#(32-SCORESIZE)	; palette=0*32
    230  f000				  -	      sta	temp3	; palette/width
    231  f000				  -	      lda	highscorelabeladjust2,y
    232  f000				  -	      sta	temp4	; X
    233  f000				  -	      lda	#((HSSCOREY+18)/(WZONEHEIGHT/8))
    234  f000				  -	      sta	temp5	; Y
    235  f000				  -
    236  f000				  -	      lda	scorevarlo,y
    237  f000				  -	      sta	temp7	; score variable lo
    238  f000				  -	      lda	scorevarhi,y
    239  f000				  -	      sta	temp8	; score variable hi
    240  f000				  -
    241  f000				  -	      lda	#(hiscorefont_mode | %01100000)	; charactermode
    242  f000				  -	      sta	temp9
    243  f000				  -
    244  f000				  -	      lda	#<(hiscorefont+33)	; +33 to get to '0' character
    245  f000				  -	      sta	temp1	; charmaplo
    246  f000				  -	      lda	#>(hiscorefont+33)
    247  f000				  -	      sta	temp2	; charmaphi
    248  f000				  -	      lda	#SCORESIZE
    249  f000				  -	      sta	temp6
    250  f000				  -	      ifnconst	DOUBLEWIDE
    251  f000				  -	      jsr	plotvalue
    252  f000				  -	      else
    253  f000				  -	      jsr	plotvaluedw
    254  f000				  -	      endif
    255  f000				  -
    256  f000				  -USED_PLOTVALUE =	1	; ensure that plotvalue gets compiled in
    257  f000				  -
    258  f000				  -	      ifconst	HSGAMERANKS
    259  f000				  -
    260  f000				  -	      ldx	#$ff	; start at 0 after the inx...
    261  f000				  -comparescore2rankloop
    262  f000				  -	      inx
    263  f000				  -	      ldy	#0
    264  f000				  -	      lda	rankvalue_0,x
    265  f000				  -	      cmp	(temp7),y
    266  f000				  -	      bcc	score2rankloopdone
    267  f000				  -	      bne	comparescore2rankloop
    268  f000				  -	      iny
    269  f000				  -	      lda	rankvalue_1,x
    270  f000				  -	      cmp	(temp7),y
    271  f000				  -	      bcc	score2rankloopdone
    272  f000				  -	      bne	comparescore2rankloop
    273  f000				  -	      iny
    274  f000				  -	      lda	(temp7),y
    275  f000				  -	      cmp	rankvalue_2,x
    276  f000				  -	      bcs	score2rankloopdone
    277  f000				  -	      jmp	comparescore2rankloop
    278  f000				  -score2rankloopdone
    279  f000				  -	      stx	hsnewscorerank
    280  f000				  -
    281  f000				  -	      lda	ranklabello,x
    282  f000				  -	      sta	temp1
    283  f000				  -	      lda	ranklabelhi,x
    284  f000				  -	      sta	temp2
    285  f000				  -	      sec
    286  f000				  -	      lda	#32	; palette=0*29 | 32-(width=3)
    287  f000				  -	      sbc	ranklabellengths,x
    288  f000				  -	      sta	temp3	; palette/width
    289  f000				  -	      sec
    290  f000				  -	      lda	#(40+6)
    291  f000				  -	      sbc	ranklabellengths,x
    292  f000				  -	      asl
    293  f000				  -	      sta	temp4	; X
    294  f000				  -	      lda	#((HSSCOREY+20)/(WZONEHEIGHT/8))
    295  f000				  -	      sta	temp5	; Y
    296  f000				  -	      jsr	plotcharacters
    297  f000				  -
    298  f000				  -	      ldx	hsnewscorerank
    299  f000				  -
    300  f000				  -	      lda	#<highscoreranklabel
    301  f000				  -	      sta	temp1
    302  f000				  -	      lda	#>highscoreranklabel
    303  f000				  -	      sta	temp2
    304  f000				  -
    305  f000				  -	      lda	#(32-5)	; palette=0*29 | 32-(width=3)
    306  f000				  -	      sta	temp3	; palette/width
    307  f000				  -	      lda	#(40-6)
    308  f000				  -	      sec
    309  f000				  -	      sbc	ranklabellengths,x
    310  f000				  -	      asl
    311  f000				  -	      sta	temp4	; X
    312  f000				  -	      lda	#((HSSCOREY+20)/(WZONEHEIGHT/8))
    313  f000				  -	      sta	temp5	; Y
    314  f000				  -	      jsr	plotcharacters
    315  f000				  -	      endif		; HSGAMERANKS
    316  f000				  -
    317  f000				  -
    318  f000				  -			; ** which line did this player beat?
    319  f000				  -	      lda	#$ff
    320  f000				  -	      sta	hsnewscoreline
    321  f000				  -	      ldx	#$fd
    322  f000				  -comparescoreadd2x
    323  f000				  -	      inx
    324  f000				  -comparescoreadd1x
    325  f000				  -	      inx
    326  f000				  -comparescore2lineloop
    327  f000				  -	      inc	hsnewscoreline
    328  f000				  -	      inx		; initialrun, x=0
    329  f000				  -	      cpx	#15
    330  f000				  -	      beq	nohighscoreforyou
    331  f000				  -	      ldy	#0
    332  f000				  -	      lda	HSRAMScores,x
    333  f000				  -	      cmp	(temp7),y	; first score digit
    334  f000				  -	      bcc	score2lineloopdonedel1x
    335  f000				  -	      bne	comparescoreadd2x
    336  f000				  -	      iny
    337  f000				  -	      inx
    338  f000				  -	      lda	HSRAMScores,x
    339  f000				  -	      cmp	(temp7),y
    340  f000				  -	      bcc	score2lineloopdonedel2x
    341  f000				  -	      bne	comparescoreadd1x
    342  f000				  -	      iny
    343  f000				  -	      inx
    344  f000				  -	      lda	(temp7),y
    345  f000				  -	      cmp	HSRAMScores,x
    346  f000				  -	      bcs	score2lineloopdonedel3x
    347  f000				  -	      jmp	comparescore2lineloop
    348  f000				  -nohighscoreforyou
    349  f000				  -	      lda	#$ff
    350  f000				  -	      sta	hsnewscoreline
    351  f000				  -	      sta	countdownseconds
    352  f000				  -	      jmp	donoscoreevaluation
    353  f000				  -score2lineloopdonedel3x
    354  f000				  -	      dex
    355  f000				  -score2lineloopdonedel2x
    356  f000				  -	      dex
    357  f000				  -score2lineloopdonedel1x
    358  f000				  -	      dex
    359  f000				  -
    360  f000				  -			; 0 1 2
    361  f000				  -			; 3 4 5
    362  f000				  -			; 6 7 8
    363  f000				  -			; 9 0 1
    364  f000				  -			; 2 3 4
    365  f000				  -
    366  f000				  -	      stx	temp9
    367  f000				  -	      cpx	#11
    368  f000				  -	      beq	postsortscoresuploop
    369  f000				  -	      ldx	#11
    370  f000				  -sortscoresuploop
    371  f000				  -	      lda	HSRAMScores,x
    372  f000				  -	      sta	HSRAMScores+3,x
    373  f000				  -	      lda	HSRAMInitials,x
    374  f000				  -	      sta	HSRAMInitials+3,x
    375  f000				  -	      dex
    376  f000				  -	      cpx	temp9
    377  f000				  -	      bne	sortscoresuploop
    378  f000				  -postsortscoresuploop
    379  f000				  -
    380  f000				  -			;stick the score and cleared initials in the slot...
    381  f000				  -	      inx
    382  f000				  -	      ldy	#0
    383  f000				  -	      sty	hsinitialhold
    384  f000				  -	      lda	(temp7),y
    385  f000				  -	      sta	HSRAMScores,x
    386  f000				  -	      iny
    387  f000				  -	      lda	(temp7),y
    388  f000				  -	      sta	HSRAMScores+1,x
    389  f000				  -	      iny
    390  f000				  -	      lda	(temp7),y
    391  f000				  -	      sta	HSRAMScores+2,x
    392  f000				  -	      lda	#0
    393  f000				  -	      sta	HSRAMInitials,x
    394  f000				  -	      lda	#29
    395  f000				  -	      sta	HSRAMInitials+1,x
    396  f000				  -	      sta	HSRAMInitials+2,x
    397  f000				  -
    398  f000				  -	      stx	hsinitialpos
    399  f000				  -
    400  f000				  -	      ifconst	vox_highscore
    401  f000				  -	      lda	<#vox_highscore
    402  f000				  -	      sta	speech_addr
    403  f000				  -	      lda	>#vox_highscore
    404  f000				  -	      sta	speech_addr+1
    405  f000				  -	      endif		; vox_highscore
    406  f000				  -	      ifconst	sfx_highscore
    407  f000				  -	      lda	<#sfx_highscore
    408  f000				  -	      sta	temp1
    409  f000				  -	      lda	>#sfx_highscore
    410  f000				  -	      sta	temp2
    411  f000				  -	      lda	#0
    412  f000				  -	      sta	temp3
    413  f000				  -	      jsr	schedulesfx
    414  f000				  -	      endif		; sfx_highscore
    415  f000				  -	      ifconst	songdatastart_song_highscore
    416  f000				  -	      lda	#<songchanneltable_song_highscore
    417  f000				  -	      sta	songpointerlo
    418  f000				  -	      lda	#>songchanneltable_song_highscore
    419  f000				  -	      sta	songpointerhi
    420  f000				  -	      lda	#73
    421  f000				  -	      sta	songtempo
    422  f000				  -	      jsr	setsongchannels
    423  f000				  -	      endif		; songdatastart_song_highscore
    424  f000				  -
    425  f000				  -
    426  f000				  -donoscoreevaluation
    427  f000				  -
    428  f000				  -	      lda	#(32+(32-SCORESIZE))	; palette=0*32 | 32-(width=6)
    429  f000				  -	      sta	temp3	; palette/width
    430  f000				  -	      lda	#(72+(4*(6-SCORESIZE)))
    431  f000				  -	      sta	temp4	; X
    432  f000				  -	      lda	#((HSSCOREY+6)/(WZONEHEIGHT/8))
    433  f000				  -	      sta	temp5	; Y
    434  f000				  -	      lda	#<HSRAMScores
    435  f000				  -	      sta	temp7	; score variable lo
    436  f000				  -	      lda	#>HSRAMScores
    437  f000				  -	      sta	temp8	; score variable hi
    438  f000				  -	      lda	#(hiscorefont_mode | %01100000)	; charactermode
    439  f000				  -	      sta	temp9
    440  f000				  -plothsscoresloop
    441  f000				  -	      lda	#<(hiscorefont+33)	; +33 to get to '0' character
    442  f000				  -	      sta	temp1	; charmaplo
    443  f000				  -	      lda	#>(hiscorefont+33)
    444  f000				  -	      sta	temp2	; charmaphi
    445  f000				  -	      lda	#6
    446  f000				  -	      sta	temp6
    447  f000				  -	      ifnconst	DOUBLEWIDE
    448  f000				  -	      jsr	plotvalue
    449  f000				  -	      else
    450  f000				  -	      jsr	plotvaluedw
    451  f000				  -	      endif
    452  f000				  -	      clc
    453  f000				  -	      lda	temp3
    454  f000				  -	      adc	#32
    455  f000				  -	      sta	temp3
    456  f000				  -	      inc	temp5
    457  f000				  -	      if	WZONEHEIGHT = 8
    458  f000				  -	      inc	temp5
    459  f000				  -	      endif
    460  f000				  -	      clc
    461  f000				  -	      lda	#3
    462  f000				  -	      adc	temp7
    463  f000				  -	      sta	temp7
    464  f000				  -	      cmp	#(<(HSRAMScores+15))
    465  f000				  -	      bcc	plothsscoresloop
    466  f000				  -plothsindex
    467  f000				  -	      lda	#32+31	; palette=0*32 | 32-(width=1)
    468  f000				  -	      sta	temp3	; palette/width
    469  f000				  -	      lda	#44
    470  f000				  -	      sta	temp4	; X
    471  f000				  -	      lda	#((HSSCOREY+6)/(WZONEHEIGHT/8))
    472  f000				  -	      sta	temp5	; Y
    473  f000				  -	      lda	#<hsgameslotnumbers
    474  f000				  -	      sta	temp7	; score variable lo
    475  f000				  -	      lda	#>hsgameslotnumbers
    476  f000				  -	      sta	temp8	; score variable hi
    477  f000				  -	      lda	#(hiscorefont_mode | %01100000)	; charactermode
    478  f000				  -	      sta	temp9
    479  f000				  -plothsindexloop
    480  f000				  -	      lda	#<(hiscorefont+33)
    481  f000				  -	      sta	temp1	; charmaplo
    482  f000				  -	      lda	#>(hiscorefont+33)
    483  f000				  -	      sta	temp2	; charmaphi
    484  f000				  -	      lda	#1
    485  f000				  -	      sta	temp6	; number of characters
    486  f000				  -	      ifnconst	DOUBLEWIDE
    487  f000				  -	      jsr	plotvalue
    488  f000				  -	      else
    489  f000				  -	      jsr	plotvaluedw
    490  f000				  -	      endif
    491  f000				  -	      clc
    492  f000				  -	      lda	temp3
    493  f000				  -	      adc	#32
    494  f000				  -	      sta	temp3
    495  f000				  -	      inc	temp5
    496  f000				  -	      if	WZONEHEIGHT = 8
    497  f000				  -	      inc	temp5
    498  f000				  -	      endif
    499  f000				  -	      inc	temp7
    500  f000				  -	      lda	temp7
    501  f000				  -	      cmp	#(<(hsgameslotnumbers+5))
    502  f000				  -	      bcc	plothsindexloop
    503  f000				  -
    504  f000				  -	      jsr	savescreen
    505  f000				  -	      ifnconst	HSSECONDS
    506  f000				  -	      lda	#6
    507  f000				  -	      else
    508  f000				  -	      lda	#HSSECONDS
    509  f000				  -	      endif
    510  f000				  -
    511  f000				  -	      sta	countdownseconds
    512  f000				  -
    513  f000				  -keepdisplayinghs
    514  f000				  -	      jsr	restorescreen
    515  f000				  -
    516  f000				  -	      jsr	setuphsinpt1
    517  f000				  -
    518  f000				  -	      lda	hsnewscoreline
    519  f000				  -	      bpl	carryonkeepdisplayinghs
    520  f000				  -	      jmp	skipenterscorecontrol
    521  f000				  -carryonkeepdisplayinghs
    522  f000				  -
    523  f000				  -
    524  f000				  -	      ifnconst	HSSECONDS
    525  f000				  -	      lda	#6
    526  f000				  -	      else
    527  f000				  -	      lda	#HSSECONDS
    528  f000				  -	      endif
    529  f000				  -
    530  f000				  -	      sta	countdownseconds
    531  f000				  -
    532  f000				  -			;plot the "cursor" initial sprite...
    533  f000				  -	      lda	hsinitialhold
    534  f000				  -
    535  f000				  -	      sta	temp1
    536  f000				  -	      lda	#>(hiscorefont+32)
    537  f000				  -	      sta	temp2
    538  f000				  -	      lda	#31	; palette=0*32 | 32-(width=1)
    539  f000				  -	      sta	temp3	; palette/width
    540  f000				  -	      lda	hscursorx
    541  f000				  -	      asl
    542  f000				  -	      asl
    543  f000				  -	      clc
    544  f000				  -	      adc	#104
    545  f000				  -	      sta	temp4	; X
    546  f000				  -	      lda	hsnewscoreline
    547  f000				  -	      asl
    548  f000				  -	      asl
    549  f000				  -	      asl
    550  f000				  -	      asl
    551  f000				  -	      adc	#((3*16)+HSCURSORY)
    552  f000				  -	      sta	temp5	; Y
    553  f000				  -	      lda	#%01000000
    554  f000				  -	      sta	temp6
    555  f000				  -	      jsr	plotsprite
    556  f000				  -
    557  f000				  -	      ldx	hscursorx
    558  f000				  -	      ldy	hsdisplaymode
    559  f000				  -	      ifnconst	.HSup
    560  f000				  -	      lda	SWCHA
    561  f000				  -	      cpy	#3
    562  f000				  -	      bne	hsskipadjustjoystick1
    563  f000				  -	      asl
    564  f000				  -	      asl
    565  f000				  -	      asl
    566  f000				  -	      asl
    567  f000				  -hsskipadjustjoystick1
    568  f000				  -	      sta	hsswcha
    569  f000				  -	      else		; there are user-defined routines!
    570  f000				  -	      jsr	.HSdown
    571  f000				  -	      lda	hsreturn	; b0
    572  f000				  -	      asl
    573  f000				  -	      pha
    574  f000				  -	      jsr	.HSup
    575  f000				  -	      pla
    576  f000				  -	      ora	hsreturn
    577  f000				  -	      asl
    578  f000				  -	      asl
    579  f000				  -	      asl
    580  f000				  -	      asl
    581  f000				  -	      eor	#$FF
    582  f000				  -	      sta	hsswcha
    583  f000				  -	      endif
    584  f000				  -	      lda	SWCHB
    585  f000				  -	      and	#%00000010
    586  f000				  -	      bne	hsskipselectswitch
    587  f000				  -	      lda	#%00010000
    588  f000				  -	      sta	hsswcha
    589  f000				  -	      bne	hsdodebouncecheck
    590  f000				  -hsskipselectswitch
    591  f000				  -	      lda	hsswcha
    592  f000				  -	      and	#%00110000
    593  f000				  -	      cmp	#%00110000
    594  f000				  -	      beq	hsjoystickskipped
    595  f000				  -hsdodebouncecheck
    596  f000				  -	      lda	hsjoydebounce
    597  f000				  -	      beq	hsdontdebounce
    598  f000				  -	      jmp	hspostjoystick
    599  f000				  -hsdontdebounce
    600  f000				  -	      ldx	#1	; small tick sound
    601  f000				  -	      jsr	playhssfx
    602  f000				  -	      lda	hsswcha
    603  f000				  -	      and	#%00110000
    604  f000				  -	      ldx	hscursorx
    605  f000				  -	      cmp	#%00100000	; check down
    606  f000				  -	      bne	hsjoycheckup
    607  f000				  -	      ldy	hsinitialhold
    608  f000				  -	      cpx	#0
    609  f000				  -	      bne	skipavoid31_1
    610  f000				  -	      cpy	#0	; if we're about to change to the <- char (#31) then double-decrement to skip over it
    611  f000				  -	      bne	skipavoid31_1
    612  f000				  -	      dey
    613  f000				  -skipavoid31_1
    614  f000				  -	      dey
    615  f000				  -	      jmp	hssetdebounce
    616  f000				  -hsjoycheckup
    617  f000				  -	      cmp	#%00010000	; check up
    618  f000				  -	      bne	hsjoystickskipped
    619  f000				  -	      ldy	hsinitialhold
    620  f000				  -	      cpx	#0
    621  f000				  -	      bne	skipavoid31_2
    622  f000				  -	      cpy	#30	; if we're about to change to the <- char (#31) then double-increment to skip over it
    623  f000				  -	      bne	skipavoid31_2
    624  f000				  -	      iny
    625  f000				  -skipavoid31_2
    626  f000				  -	      iny
    627  f000				  -hssetdebounce
    628  f000				  -	      tya
    629  f000				  -	      and	#31
    630  f000				  -	      sta	hsinitialhold
    631  f000				  -	      lda	#15
    632  f000				  -	      sta	hsjoydebounce
    633  f000				  -	      bne	hspostjoystick
    634  f000				  -hsjoystickskipped
    635  f000				  -			; check the fire button only when the stick isn't engaged
    636  f000				  -	      lda	hsinpt1
    637  f000				  -	      bpl	hsbuttonskipped
    638  f000				  -	      lda	hsjoydebounce
    639  f000				  -	      bne	hspostjoystick
    640  f000				  -hsfiredontdebounce
    641  f000				  -	      lda	hsinitialhold
    642  f000				  -	      cmp	#31
    643  f000				  -	      beq	hsmovecursorback
    644  f000				  -	      inc	hscursorx
    645  f000				  -	      inc	hsinitialpos
    646  f000				  -	      lda	hscursorx
    647  f000				  -	      cmp	#3
    648  f000				  -	      bne	skiphsentryisdone
    649  f000				  -	      lda	#0
    650  f000				  -	      sta	framecounter
    651  f000				  -	      lda	#$ff
    652  f000				  -	      sta	hsnewscoreline
    653  f000				  -	      dec	hsinitialpos
    654  f000				  -	      bne	skiphsentryisdone
    655  f000				  -hsmovecursorback
    656  f000				  -	      lda	hscursorx
    657  f000				  -	      beq	skiphsmovecursorback
    658  f000				  -	      lda	#29
    659  f000				  -	      ldx	hsinitialpos
    660  f000				  -	      sta	HSRAMInitials,x
    661  f000				  -	      dec	hsinitialpos
    662  f000				  -	      dec	hscursorx
    663  f000				  -	      dex
    664  f000				  -	      lda	HSRAMInitials,x
    665  f000				  -	      sta	hsinitialhold
    666  f000				  -skiphsmovecursorback
    667  f000				  -skiphsentryisdone
    668  f000				  -	      ldx	#0
    669  f000				  -	      jsr	playhssfx
    670  f000				  -	      lda	#20
    671  f000				  -	      sta	hsjoydebounce
    672  f000				  -	      bne	hspostjoystick
    673  f000				  -
    674  f000				  -hsbuttonskipped
    675  f000				  -	      lda	#0
    676  f000				  -	      sta	hsjoydebounce
    677  f000				  -hspostjoystick
    678  f000				  -
    679  f000				  -	      ldx	hsinitialpos
    680  f000				  -	      lda	hsinitialhold
    681  f000				  -	      sta	HSRAMInitials,x
    682  f000				  -
    683  f000				  -	      jmp	skiphschasecolors
    684  f000				  -
    685  f000				  -skipenterscorecontrol
    686  f000				  -	      jsr	hschasecolors
    687  f000				  -	      jsr	setuphsinpt1
    688  f000				  -	      lda	hsjoydebounce
    689  f000				  -	      bne	skiphschasecolors
    690  f000				  -	      lda	hsinpt1
    691  f000				  -	      bmi	returnfromhs
    692  f000				  -skiphschasecolors
    693  f000				  -
    694  f000				  -	      jsr	drawscreen
    695  f000				  -
    696  f000				  -	      lda	countdownseconds
    697  f000				  -	      beq	returnfromhs
    698  f000				  -	      jmp	keepdisplayinghs
    699  f000				  -returnfromhs
    700  f000				  -
    701  f000				  -	      ifconst	songdatastart_song_highscore
    702  f000				  -	      lda	hsdisplaymode
    703  f000				  -	      beq	skipclearHSCsong
    704  f000				  -	      lda	#0
    705  f000				  -	      sta	songtempo
    706  f000				  -skipclearHSCsong
    707  f000				  -	      endif
    708  f000				  -	      jsr	drawwait
    709  f000				  -	      jsr	clearscreen
    710  f000				  -	      lda	#0
    711  f000				  -	      ldy	#7
    712  f000				  -	      jsr	blacken320colors
    713  f000				  -	      lda	ssCTRL
    714  f000				  -	      sta	sCTRL
    715  f000				  -	      lda	ssCHARBASE
    716  f000				  -	      sta	sCHARBASE
    717  f000				  -	      rts
    718  f000				  -
    719  f000				  -setuphsinpt1
    720  f000				  -	      lda	#$ff
    721  f000				  -	      sta	hsinpt1
    722  f000				  -	      lda	hsjoydebounce
    723  f000				  -	      beq	skipdebounceadjust
    724  f000				  -	      dec	hsjoydebounce
    725  f000				  -	      bne	skipstorefirebuttonstatus
    726  f000				  -skipdebounceadjust
    727  f000				  -	      lda	SWCHB
    728  f000				  -	      and	#%00000001
    729  f000				  -	      bne	hscheckresetover
    730  f000				  -	      lda	#$ff
    731  f000				  -	      sta	hsinpt1
    732  f000				  -	      rts
    733  f000				  -hscheckresetover
    734  f000				  -	      ifnconst	.HSup
    735  f000				  -	      ldx	hsdisplaymode
    736  f000				  -	      cpx	#3
    737  f000				  -	      bne	hsskipadjustjoyfire1
    738  f000				  -	      lda	sINPT3
    739  f000				  -	      jmp	hsskipadjustjoyfire1done
    740  f000				  -hsskipadjustjoyfire1
    741  f000				  -	      lda	sINPT1
    742  f000				  -hsskipadjustjoyfire1done
    743  f000				  -	      sta	hsinpt1
    744  f000				  -	      else		; there are user-defined routines!
    745  f000				  -	      jsr	.HSselect
    746  f000				  -	      lda	hsreturn
    747  f000				  -	      ror		; carry
    748  f000				  -	      ror		; b7
    749  f000				  -	      sta	hsinpt1
    750  f000				  -	      endif	.HSup
    751  f000				  -skipstorefirebuttonstatus
    752  f000				  -	      rts
    753  f000				  -
    754  f000				  -blacken320colors
    755  f000				  -	      ldy	#7
    756  f000				  -blacken320colorsloop
    757  f000				  -	      sta	P0C2,y
    758  f000				  -	      dey
    759  f000				  -	      bpl	blacken320colorsloop
    760  f000				  -	      rts
    761  f000				  -
    762  f000				  -hschasecolors
    763  f000				  -	      lda	framecounter
    764  f000				  -	      and	#3
    765  f000				  -	      bne	hschasecolorsreturn
    766  f000				  -	      inc	hscolorchaseindex
    767  f000				  -	      lda	hscolorchaseindex
    768  f000				  -
    769  f000				  -	      sta	P5C2
    770  f000				  -	      sbc	#$02
    771  f000				  -	      sta	P4C2
    772  f000				  -	      sbc	#$02
    773  f000				  -	      sta	P3C2
    774  f000				  -	      sbc	#$02
    775  f000				  -	      sta	P2C2
    776  f000				  -	      sbc	#$02
    777  f000				  -	      sta	P1C2
    778  f000				  -hschasecolorsreturn
    779  f000				  -	      rts
    780  f000				  -
    781  f000				  -playhssfx
    782  f000				  -	      lda	hssfx_lo,x
    783  f000				  -	      sta	temp1
    784  f000				  -	      lda	hssfx_hi,x
    785  f000				  -	      sta	temp2
    786  f000				  -	      lda	#0
    787  f000				  -	      sta	temp3
    788  f000				  -	      jmp	schedulesfx
    789  f000				  -
    790  f000				  -hssfx_lo
    791  f000				  -	      .byte	<sfx_hsletterpositionchange, <sfx_hslettertick
    792  f000				  -hssfx_hi
    793  f000				  -	      .byte	>sfx_hsletterpositionchange, >sfx_hslettertick
    794  f000				  -
    795  f000				  -sfx_hsletterpositionchange
    796  f000				  -	      .byte	$10,$18,$00
    797  f000				  -	      .byte	$02,$06,$08
    798  f000				  -	      .byte	$02,$06,$04
    799  f000				  -	      .byte	$00,$00,$00
    800  f000				  -sfx_hslettertick
    801  f000				  -	      .byte	$10,$18,$00
    802  f000				  -	      .byte	$00,$00,$0a
    803  f000				  -	      .byte	$00,$00,$00
    804  f000				  -
    805  f000				  -highscorelabeladjust1
    806  f000				  -	      .byte	(80-(14*2)-(SCORESIZE*2)),(80-(16*2)-(SCORESIZE*2)),(80-(16*2)-(SCORESIZE*2)),(80-(16*2)-(SCORESIZE*2))
    807  f000				  -highscorelabeladjust2
    808  f000				  -	      .byte	(80+(14*2)-(SCORESIZE*2)),(80+(16*2)-(SCORESIZE*2)),(80+(16*2)-(SCORESIZE*2)),(80+(16*2)-(SCORESIZE*2))
    809  f000				  -
    810  f000				  -scorevarlo
    811  f000				  -	      .byte	<(score0+((6-SCORESIZE)/2)),<(score0+((6-SCORESIZE)/2)),<(score1+((6-SCORESIZE)/2)),<(score1+((6-SCORESIZE)/2))
    812  f000				  -scorevarhi
    813  f000				  -	      .byte	>(score0+((6-SCORESIZE)/2)),>(score0+((6-SCORESIZE)/2)),>(score1+((6-SCORESIZE)/2)),>(score1+((6-SCORESIZE)/2))
    814  f000				  -
    815  f000				  -	      endif		; !isBANKSETBANK
    816  f000				  -
    817  f000				  -	      ifnconst	HSNOLEVELNAMES
    818  f000				  -	      ifnconst	isBANKSETBANK
    819  f000				  -highscoredifficultytextlo
    820  f000				  -	      .byte	<easylevelname, <mediumlevelname, <hardlevelname, <expertlevelname
    821  f000				  -highscoredifficultytexthi
    822  f000				  -	      .byte	>easylevelname, >mediumlevelname, >hardlevelname, >expertlevelname
    823  f000				  -	      endif		; !isBANKSETBANK
    824  f000				  -
    825  f000				  -	      ifnconst	HSCUSTOMLEVELNAMES
    826  f000				  -	      ifnconst	isBANKSETBANK
    827  f000				  -highscoredifficultytextlen
    828  f000				  -	      .byte	22, 30, 26, 24
    829  f000				  -	      endif		; !isBANKSETBANK
    830  f000				  -
    831  f000				  -	      ifconst	HSCHARSHERE
    832  f000				  -
    833  f000				  -easylevelname
    834  f000				  -	      .byte	$04,$00,$12,$18,$1d,$0b,$04,$15,$04,$0b,$1d,$07,$08,$06,$07,$1d,$12,$02,$0e,$11,$04,$12
    835  f000				  -mediumlevelname
    836  f000				  -	      .byte	$08,$0d,$13,$04,$11,$0c,$04,$03,$08,$00,$13,$04,$1d,$0b,$04,$15,$04,$0b,$1d,$07,$08,$06,$07,$1d,$12,$02,$0e,$11,$04,$12
    837  f000				  -hardlevelname
    838  f000				  -	      .byte	$00,$03,$15,$00,$0d,$02,$04,$03,$1d,$0b,$04,$15,$04,$0b,$1d,$07,$08,$06,$07,$1d,$12,$02,$0e,$11,$04,$12
    839  f000				  -expertlevelname
    840  f000				  -	      .byte	$04,$17,$0f,$04,$11,$13,$1d,$0b,$04,$15,$04,$0b,$1d,$07,$08,$06,$07,$1d,$12,$02,$0e,$11,$04,$12
    841  f000				  -	      endif		; HSCHARSHERE
    842  f000				  -	      else		; HSCUSTOMLEVELNAMES
    843  f000				  -	      include	"7800hsgamediffnames.asm"
    844  f000				  -	      endif		; HSCUSTOMLEVELNAMES
    845  f000				  -	      else		; HSNOLEVELNAMES
    846  f000				  -	      ifconst	HSCHARSHERE
    847  f000				  -HSHIGHSCOREStext
    848  f000				  -	      .byte	$07,$08,$06,$07,$1d,$12,$02,$0e,$11,$04,$12
    849  f000				  -	      endif		; HSCHARSHERE
    850  f000				  -	      endif		; HSNOLEVELNAMES
    851  f000				  -
    852  f000				  -	      ifnconst	isBANKSETBANK
    853  f000				  -highscorelabeltextlo
    854  f000				  -	      .byte	<player0label, <player1label, <player2label, <player2label
    855  f000				  -highscorelabeltexthi
    856  f000				  -	      .byte	>player0label, >player1label, >player2label, >player2label
    857  f000				  -	      endif		; !isBANKSETBANK
    858  f000				  -
    859  f000				  -	      ifconst	HSCHARSHERE
    860  f000				  -player0label
    861  f000				  -	      .byte	$0f,$0b,$00,$18,$04,$11,$1d,$12,$02,$0e,$11,$04,$1a,$1d,$1d
    862  f000				  -
    863  f000				  -player1label
    864  f000				  -	      .byte	$0f,$0b,$00,$18,$04,$11,$1d,$22,$1d,$12,$02,$0e,$11,$04,$1a
    865  f000				  -
    866  f000				  -player2label
    867  f000				  -	      .byte	$0f,$0b,$00,$18,$04,$11,$1d,$23,$1d,$12,$02,$0e,$11,$04,$1a
    868  f000				  -	      endif		; HSCHARSHERE
    869  f000				  -
    870  f000				  -
    871  f000				  -	      ifconst	HSGAMENAMELEN
    872  f000				  -	      ifconst	HSCHARSHERE
    873  f000				  -HSGAMENAMEtable
    874  f000				  -	      include	"7800hsgamename.asm"
    875  f000				  -	      endif		; HSCHARSHERE
    876  f000				  -	      endif		; HSGAMENAMELEN
    877  f000				  -	      ifconst	HSGAMERANKS
    878  f000				  -	      include	"7800hsgameranks.asm"
    879  f000				  -	      ifconst	HSCHARSHERE
    880  f000				  -highscoreranklabel
    881  f000				  -	      .byte	$11,$00,$0d,$0a,$1a
    882  f000				  -	      endif		; HSCHARSHERE
    883  f000				  -	      endif		; HSGAMERANKS
    884  f000				  -
    885  f000				  -			;ensure our table doesn't wrap a page...
    886  f000				  -	      if	((<*)>251)
    887  f000				  -	      align	256
    888  f000				  -	      endif
    889  f000				  -hsgameslotnumbers
    890  f000				  -	      .byte	33,34,35,36,37
    891  f000				  -	      endif		; hiscorefont
    892  f000				  -
    893  f000				  -
    894  f000				  -	      ifnconst	isBANKSETBANK
    895  f000				  -loaddifficultytable
    896  f000				  -	      lda	gamedifficulty
    897  f000				  -	      and	#$03	; ensure the user hasn't selected an invalid difficulty
    898  f000				  -	      sta	gamedifficulty
    899  f000				  -	      cmp	hsdifficulty	; check game difficulty is the same as RAM table
    900  f000				  -	      bne	loaddifficultytablecontinue1
    901  f000				  -	      rts		; this high score difficulty table is already loaded
    902  f000				  -loaddifficultytablecontinue1
    903  f000				  -	      lda	gamedifficulty
    904  f000				  -	      sta	hsdifficulty
    905  f000				  -			;we need to check the device for the table
    906  f000				  -	      lda	hsdevice
    907  f000				  -	      bne	loaddifficultytablecontinue2
    908  f000				  -			; there's no save device. clear out this table.
    909  f000				  -	      jmp	cleardifficultytablemem
    910  f000				  -loaddifficultytablecontinue2
    911  f000				  -	      lda	hsdevice
    912  f000				  -	      and	#1
    913  f000				  -	      beq	memdeviceisntHSC
    914  f000				  -	      jmp	loaddifficultytableHSC
    915  f000				  -memdeviceisntHSC
    916  f000				  -	      jmp	loaddifficultytableAVOX
    917  f000				  -
    918  f000				  -savedifficultytable
    919  f000				  -			;*** we need to check which device we should use...
    920  f000				  -	      lda	hsdevice
    921  f000				  -	      bne	savedifficultytablerealdevice
    922  f000				  -	      rts		; its a ram device
    923  f000				  -savedifficultytablerealdevice
    924  f000				  -	      and	#1
    925  f000				  -	      beq	savememdeviceisntHSC
    926  f000				  -	      jmp	savedifficultytableHSC
    927  f000				  -savememdeviceisntHSC
    928  f000				  -	      jmp	savedifficultytableAVOX
    929  f000				  -
    930  f000				  -savedifficultytableAVOX
    931  f000				  -			; the load call already setup the memory structure and atarivox memory location
    932  f000				  -	      jsr	savealoadedHSCtablecontinue
    933  f000				  -savedifficultytableAVOXskipconvert
    934  f000				  -	      lda	#HSIDHI
    935  f000				  -	      sta	eeprombuffer
    936  f000				  -	      lda	#HSIDLO
    937  f000				  -	      sta	eeprombuffer+1
    938  f000				  -	      lda	hsdifficulty
    939  f000				  -	      sta	eeprombuffer+2
    940  f000				  -	      lda	#32
    941  f000				  -	      jsr	AVoxWriteBytes
    942  f000				  -	      rts
    943  f000				  -
    944  f000				  -savedifficultytableHSC
    945  f000				  -			;we always load a table before reaching here, so the
    946  f000				  -			;memory structures from the load should be intact...
    947  f000				  -	      ldy	hsgameslot
    948  f000				  -	      bpl	savealoadedHSCtable
    949  f000				  -	      rts
    950  f000				  -savealoadedHSCtable
    951  f000				  -	      lda	HSCGameDifficulty,y
    952  f000				  -	      cmp	#$7F
    953  f000				  -	      bne	savealoadedHSCtablecontinue
    954  f000				  -	      jsr	initializeHSCtableentry
    955  f000				  -savealoadedHSCtablecontinue
    956  f000				  -			;convert our RAM table to HSC format and write it out...
    957  f000				  -	      ldy	#0
    958  f000				  -	      ldx	#0
    959  f000				  -savedifficultytableScores
    960  f000				  -
    961  f000				  -	      lda	HSRAMInitials,x
    962  f000				  -	      sta	temp3
    963  f000				  -	      lda	HSRAMInitials+1,x
    964  f000				  -	      sta	temp4
    965  f000				  -	      lda	HSRAMInitials+2,x
    966  f000				  -	      sta	temp5
    967  f000				  -	      jsr	encodeHSCInitials	; takes 3 byte initials from temp3,4,5 and stores 2 byte initials in temp1,2
    968  f000				  -
    969  f000				  -	      lda	temp1
    970  f000				  -	      sta	(HSGameTableLo),y
    971  f000				  -	      iny
    972  f000				  -	      lda	temp2
    973  f000				  -	      sta	(HSGameTableLo),y
    974  f000				  -	      iny
    975  f000				  -
    976  f000				  -	      lda	HSRAMScores,x
    977  f000				  -	      sta	(HSGameTableLo),y
    978  f000				  -	      iny
    979  f000				  -	      lda	HSRAMScores+1,x
    980  f000				  -	      sta	(HSGameTableLo),y
    981  f000				  -	      iny
    982  f000				  -	      lda	HSRAMScores+2,x
    983  f000				  -	      sta	(HSGameTableLo),y
    984  f000				  -	      iny
    985  f000				  -	      inx
    986  f000				  -	      inx
    987  f000				  -	      inx		; +3
    988  f000				  -	      cpx	#15
    989  f000				  -	      bne	savedifficultytableScores
    990  f000				  -	      rts
    991  f000				  -
    992  f000				  -loaddifficultytableHSC
    993  f000				  -			; routine responsible for loading the difficulty table from HSC
    994  f000				  -	      jsr	findindexHSC
    995  f000				  -	      ldy	hsgameslot
    996  f000				  -	      lda	HSCGameDifficulty,y
    997  f000				  -	      cmp	#$7F
    998  f000				  -	      bne	loaddifficultytableHSCcontinue
    999  f000				  -			;there was an error. use a new RAM table instead...
   1000  f000				  -	      jsr	initializeHSCtableentry
   1001  f000				  -	      jmp	cleardifficultytablemem
   1002  f000				  -loaddifficultytableHSCcontinue
   1003  f000				  -			; parse the data into the HS memory...
   1004  f000				  -	      ldy	#0
   1005  f000				  -	      ldx	#0
   1006  f000				  -loaddifficultytableScores
   1007  f000				  -	      lda	(HSGameTableLo),y
   1008  f000				  -	      sta	temp1
   1009  f000				  -	      iny
   1010  f000				  -	      lda	(HSGameTableLo),y
   1011  f000				  -	      sta	temp2
   1012  f000				  -	      jsr	decodeHSCInitials	; takes 2 byte initials from temp1,2 and stores 3 byte initials in temp3,4,5
   1013  f000				  -	      iny
   1014  f000				  -	      lda	(HSGameTableLo),y
   1015  f000				  -	      sta	HSRAMScores,x
   1016  f000				  -	      lda	temp3
   1017  f000				  -	      sta	HSRAMInitials,x
   1018  f000				  -	      inx
   1019  f000				  -	      iny
   1020  f000				  -	      lda	(HSGameTableLo),y
   1021  f000				  -	      sta	HSRAMScores,x
   1022  f000				  -	      lda	temp4
   1023  f000				  -	      sta	HSRAMInitials,x
   1024  f000				  -	      inx
   1025  f000				  -	      iny
   1026  f000				  -	      lda	(HSGameTableLo),y
   1027  f000				  -	      sta	HSRAMScores,x
   1028  f000				  -	      lda	temp5
   1029  f000				  -	      sta	HSRAMInitials,x
   1030  f000				  -	      inx
   1031  f000				  -	      iny
   1032  f000				  -	      cpx	#15
   1033  f000				  -	      bne	loaddifficultytableScores
   1034  f000				  -	      rts
   1035  f000				  -
   1036  f000				  -decodeHSCInitials
   1037  f000				  -			; takes 2 byte initials from temp1,2 and stores 3 byte initials in temp3,4,5
   1038  f000				  -			; 2 bytes are packed in the form: 22211111 22_33333
   1039  f000				  -	      lda	#0
   1040  f000				  -	      sta	temp4
   1041  f000				  -	      lda	temp1
   1042  f000				  -	      and	#%00011111
   1043  f000				  -	      sta	temp3
   1044  f000				  -
   1045  f000				  -	      lda	temp2
   1046  f000				  -	      and	#%00011111
   1047  f000				  -	      sta	temp5
   1048  f000				  -
   1049  f000				  -	      lda	temp1
   1050  f000				  -	      asl
   1051  f000				  -	      rol	temp4
   1052  f000				  -	      asl
   1053  f000				  -	      rol	temp4
   1054  f000				  -	      asl
   1055  f000				  -	      rol	temp4
   1056  f000				  -	      lda	temp2
   1057  f000				  -	      asl
   1058  f000				  -	      rol	temp4
   1059  f000				  -	      asl
   1060  f000				  -	      rol	temp4
   1061  f000				  -	      rts
   1062  f000				  -encodeHSCInitials
   1063  f000				  -			; takes 3 byte initials from temp3,4,5 and stores 2 byte initials in temp1,2
   1064  f000				  -			; 2 bytes are packed in the form: 22211111 22_33333
   1065  f000				  -			; start with packing temp1...
   1066  f000				  -	      lda	temp4
   1067  f000				  -	      and	#%00011100
   1068  f000				  -	      sta	temp1
   1069  f000				  -	      asl	temp1
   1070  f000				  -	      asl	temp1
   1071  f000				  -	      asl	temp1
   1072  f000				  -	      lda	temp3
   1073  f000				  -	      and	#%00011111
   1074  f000				  -	      ora	temp1
   1075  f000				  -	      sta	temp1
   1076  f000				  -			; ...temp1 is now packed, on to temp2...
   1077  f000				  -	      lda	temp5
   1078  f000				  -	      asl
   1079  f000				  -	      asl
   1080  f000				  -	      ror	temp4
   1081  f000				  -	      ror
   1082  f000				  -	      ror	temp4
   1083  f000				  -	      ror
   1084  f000				  -	      sta	temp2
   1085  f000				  -	      rts
   1086  f000				  -
   1087  f000				  -findindexHSCerror
   1088  f000				  -			;the HSC is stuffed. return the bad slot flag
   1089  f000				  -	      ldy	#$ff
   1090  f000				  -	      sty	hsgameslot
   1091  f000				  -	      rts
   1092  f000				  -
   1093  f000				  -findindexHSC
   1094  f000				  -HSCGameID1 =	$1029
   1095  f000				  -HSCGameID2 =	$106E
   1096  f000				  -HSCGameDifficulty =	$10B3
   1097  f000				  -HSCGameIndex =	$10F8
   1098  f000				  -			; routine responsible for finding the game index from HSC
   1099  f000				  -			; call with x=0 to create a new table if none exist, call with x=$ff to avoid creating new tables
   1100  f000				  -			; the HS loading routine will use x=$ff, the HS saving routine will use x=0
   1101  f000				  -	      ldy	#69	; start +1 to account for the dey
   1102  f000				  -findindexHSCloop
   1103  f000				  -	      dey
   1104  f000				  -	      bmi	findindexHSCerror
   1105  f000				  -	      lda	HSCGameDifficulty,y
   1106  f000				  -	      cmp	#$7F
   1107  f000				  -	      beq	findourindexHSC
   1108  f000				  -	      cmp	gamedifficulty
   1109  f000				  -	      bne	findindexHSCloop
   1110  f000				  -	      lda	HSCGameID1,y
   1111  f000				  -	      cmp	#HSIDHI
   1112  f000				  -	      bne	findindexHSCloop
   1113  f000				  -	      lda	HSCGameID2,y
   1114  f000				  -	      cmp	#HSIDLO
   1115  f000				  -	      bne	findindexHSCloop
   1116  f000				  -findourindexHSC
   1117  f000				  -			; if we're here we found our index in the table
   1118  f000				  -			; or we found the first empty one
   1119  f000				  -	      sty	hsgameslot
   1120  f000				  -	      jsr	setupHSCGamepointer	; setup the pointer to the HS Table for this game...
   1121  f000				  -	      rts
   1122  f000				  -
   1123  f000				  -
   1124  f000				  -initializeHSCtableentry
   1125  f000				  -	      ldy	hsgameslot
   1126  f000				  -			; we need to make a new entry...
   1127  f000				  -	      lda	#HSIDHI
   1128  f000				  -	      sta	HSCGameID1,y
   1129  f000				  -	      lda	#HSIDLO
   1130  f000				  -	      sta	HSCGameID2,y
   1131  f000				  -	      lda	gamedifficulty
   1132  f000				  -	      sta	HSCGameDifficulty,y
   1133  f000				  -	      ldx	#0
   1134  f000				  -fixHSDGameDifficultylistLoop
   1135  f000				  -	      inx
   1136  f000				  -	      txa
   1137  f000				  -	      sta	HSCGameIndex,y
   1138  f000				  -	      iny
   1139  f000				  -	      cpy	#69
   1140  f000				  -	      bne	fixHSDGameDifficultylistLoop
   1141  f000				  -	      rts
   1142  f000				  -
   1143  f000				  -setupHSCGamepointer
   1144  f000				  -			; this routines sets (HSGameTableLo) pointing to the game's HS table
   1145  f000				  -	      lda	#$17
   1146  f000				  -	      sta	HSGameTableHi
   1147  f000				  -	      lda	#$FA
   1148  f000				  -	      sta	HSGameTableLo
   1149  f000				  -setupHSCGamepointerLoop
   1150  f000				  -	      lda	HSGameTableLo
   1151  f000				  -	      sec
   1152  f000				  -	      sbc	#25
   1153  f000				  -	      sta	HSGameTableLo
   1154  f000				  -	      lda	HSGameTableHi
   1155  f000				  -	      sbc	#0
   1156  f000				  -	      sta	HSGameTableHi
   1157  f000				  -	      iny
   1158  f000				  -	      cpy	#69
   1159  f000				  -	      bne	setupHSCGamepointerLoop
   1160  f000				  -	      rts
   1161  f000				  -
   1162  f000				  -loaddifficultytableAVOX
   1163  f000				  -			; routine responsible for loading the difficulty table from Avox
   1164  f000				  -			; we reuse HSC routines to format data to/from our Avox RAM buffer...
   1165  f000				  -	      lda	#>(eeprombuffer+3)
   1166  f000				  -	      sta	HSGameTableHi
   1167  f000				  -	      lda	#<(eeprombuffer+3)
   1168  f000				  -	      sta	HSGameTableLo
   1169  f000				  -
   1170  f000				  -			; the start location in EEPROM, subtract 32...
   1171  f000				  -	      lda	#$5F
   1172  f000				  -	      sta	HSVoxHi
   1173  f000				  -	      lda	#$E0
   1174  f000				  -	      sta	HSVoxLo
   1175  f000				  -	      lda	#0
   1176  f000				  -	      sta	temp1
   1177  f000				  -loaddifficultytableAVOXloop
   1178  f000				  -	      inc	temp1
   1179  f000				  -	      beq	loaddifficultytableAVOXfull
   1180  f000				  -	      clc
   1181  f000				  -	      lda	HSVoxLo
   1182  f000				  -	      adc	#32
   1183  f000				  -	      sta	HSVoxLo
   1184  f000				  -	      lda	HSVoxHi
   1185  f000				  -	      adc	#0
   1186  f000				  -	      sta	HSVoxHi
   1187  f000				  -	      lda	#3
   1188  f000				  -	      jsr	AVoxReadBytes	; read in 3 bytes, ID1,ID2,Difficulty
   1189  f000				  -	      lda	eeprombuffer
   1190  f000				  -	      cmp	#$FF
   1191  f000				  -	      beq	loaddifficultytableAVOXempty
   1192  f000				  -	      cmp	#HSIDHI
   1193  f000				  -	      bne	loaddifficultytableAVOXloop
   1194  f000				  -	      lda	eeprombuffer+1
   1195  f000				  -	      cmp	#HSIDLO
   1196  f000				  -	      bne	loaddifficultytableAVOXloop
   1197  f000				  -	      lda	eeprombuffer+2
   1198  f000				  -	      cmp	gamedifficulty
   1199  f000				  -	      bne	loaddifficultytableAVOXloop
   1200  f000				  -loaddifficultytableAVOXdone
   1201  f000				  -	      lda	#32
   1202  f000				  -	      jsr	AVoxReadBytes
   1203  f000				  -	      jsr	loaddifficultytableHSCcontinue
   1204  f000				  -	      rts
   1205  f000				  -loaddifficultytableAVOXfull
   1206  f000				  -	      lda	#0
   1207  f000				  -	      sta	hsdevice	; looks like all 255 entries are taken... disable it.
   1208  f000				  -loaddifficultytableAVOXempty
   1209  f000				  -	      jmp	cleardifficultytablemem
   1210  f000				  -	      rts
   1211  f000				  -
   1212  f000				  -cleardifficultytablemem
   1213  f000				  -	      ldy	#29
   1214  f000				  -	      lda	#0
   1215  f000				  -cleardifficultytablememloop
   1216  f000				  -	      sta	HSRAMTable,y
   1217  f000				  -	      dey
   1218  f000				  -	      bpl	cleardifficultytablememloop
   1219  f000				  -	      rts
   1220  f000				  -hiscoremoduleend
   1221  f000				  -
   1222  f000				  -	      ifconst	DOUBLEWIDE
   1223  f000				  -plotvaluedw
   1224  f000				  -plotdigitcount =	temp6
   1225  f000				  -	      lda	#0
   1226  f000				  -	      tay
   1227  f000				  -	      ldx	valbufend
   1228  f000				  -
   1229  f000				  -	      lda	plotdigitcount
   1230  f000				  -	      and	#1
   1231  f000				  -	      beq	pvnibble2chardw
   1232  f000				  -	      lda	#0
   1233  f000				  -	      sta	VALBUFFER,x	; just in case we skip this digit
   1234  f000				  -	      beq	pvnibble2char_skipnibbledw
   1235  f000				  -
   1236  f000				  -pvnibble2chardw
   1237  f000				  -			; high nibble...
   1238  f000				  -	      lda	(temp7),y
   1239  f000				  -	      and	#$f0
   1240  f000				  -	      lsr
   1241  f000				  -	      lsr
   1242  f000				  -	      lsr
   1243  f000				  -	      lsr
   1244  f000				  -
   1245  f000				  -	      clc
   1246  f000				  -	      adc	temp1	; add the offset to character graphics to our value
   1247  f000				  -	      sta	VALBUFFER,x
   1248  f000				  -	      inx
   1249  f000				  -	      dec	plotdigitcount
   1250  f000				  -pvnibble2char_skipnibbledw
   1251  f000				  -			; low nibble...
   1252  f000				  -	      lda	(temp7),y
   1253  f000				  -	      and	#$0f
   1254  f000				  -	      clc
   1255  f000				  -	      adc	temp1	; add the offset to character graphics to our value
   1256  f000				  -	      sta	VALBUFFER,x
   1257  f000				  -	      inx
   1258  f000				  -	      iny
   1259  f000				  -
   1260  f000				  -	      dec	plotdigitcount
   1261  f000				  -	      bne	pvnibble2chardw
   1262  f000				  -			;point to the start of our valuebuffer
   1263  f000				  -	      clc
   1264  f000				  -	      lda	#<VALBUFFER
   1265  f000				  -	      adc	valbufend
   1266  f000				  -	      sta	temp1
   1267  f000				  -	      lda	#>VALBUFFER
   1268  f000				  -	      adc	#0
   1269  f000				  -	      sta	temp2
   1270  f000				  -
   1271  f000				  -			;advance valbufend to the end of our value buffer
   1272  f000				  -	      stx	valbufend
   1273  f000				  -
   1274  f000				  -	      ifnconst	plotvalueonscreen
   1275  f000				  -	      jmp	plotcharacters
   1276  f000				  -	      else
   1277  f000				  -	      jmp	plotcharacterslive
   1278  f000				  -	      endif
   1279  f000				  -	      endif		; DOUBLEWIDE
   1280  f000				  -
   1281  f000				  -hiscoreend
   1282  f000				  -	      echo	" (hiscore module is using ",[(hiscoreend-hiscorestart)]d," bytes)"
   1283  f000				  -	      endif		; !isBANKSETBANK
   1284  f000					      endif		; HSSUPPORT
   1285  f000
------- FILE c:\Users\steve\OneDrive\Desktop\2018dev\7800\7800basic\projects\demo1\lesson2_4.78b.asm
   1428  f000					      endif
   1429  f000					      ifnconst	included.fourbitfade.asm
------- FILE fourbitfade.asm LEVEL 2 PASS 3
      0  f000					      include	fourbitfade.asm
      1  f000							; ** fourbit fade, which is useful for audio levels and brightness fades
      2  f000							; ** input:  A=value to fade, fourbitfadevalue=global fade value
      3  f000							; **	      N.B. the global fade value is in the upper nibble. i.e. $Fx-0x
      4  f000							; ** output: A=faded value in lo nibble. orig top nibble is preserved,
      5  f000							; **	      other registers are preserved
      6  f000
      7  f000				  -	      ifconst	FOURBITFADE
      8  f000				  -
      9  f000				  -			; non-interrupt routine
     10  f000				  -
     11  f000				  -fourbitfade
     12  f000				  -	      sty	fourbittemp1
     13  f000				  -	      pha
     14  f000				  -	      and	#$0F
     15  f000				  -	      ora	fourbitfadevalue
     16  f000				  -	      tay
     17  f000				  -	      pla
     18  f000				  -	      and	#$F0
     19  f000				  -	      ora	fourbitfadelut,y
     20  f000				  -	      ldy	fourbittemp1	; restore Y
     21  f000				  -	      rts
     22  f000				  -
     23  f000				  -			; interrupt routine
     24  f000				  -
     25  f000				  -fourbitfadeint
     26  f000				  -	      sty	fourbittemp1int
     27  f000				  -	      pha
     28  f000				  -	      and	#$0F
     29  f000				  -	      ora	fourbitfadevalueint
     30  f000				  -	      tay
     31  f000				  -	      pla
     32  f000				  -	      and	#$F0
     33  f000				  -	      ora	fourbitfadelut,y
     34  f000				  -	      ldy	fourbittemp1int	; restore Y
     35  f000				  -	      rts
     36  f000				  -
     37  f000				  -fourbitfadelut
     38  f000				  -	      .byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     39  f000				  -	      .byte	$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$01,$01,$01
     40  f000				  -	      .byte	$00,$00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$02,$02,$02,$02,$02
     41  f000				  -	      .byte	$00,$00,$00,$00,$01,$01,$01,$01,$02,$02,$02,$02,$03,$03,$03,$03
     42  f000				  -	      .byte	$00,$00,$00,$00,$01,$01,$01,$02,$02,$02,$03,$03,$03,$04,$04,$04
     43  f000				  -	      .byte	$00,$00,$00,$01,$01,$01,$02,$02,$03,$03,$03,$04,$04,$04,$05,$05
     44  f000				  -	      .byte	$00,$00,$00,$01,$01,$02,$02,$03,$03,$03,$04,$04,$05,$05,$06,$06
     45  f000				  -	      .byte	$00,$00,$01,$01,$02,$02,$03,$03,$04,$04,$05,$05,$06,$06,$07,$07
     46  f000				  -	      .byte	$00,$00,$01,$01,$02,$02,$03,$03,$04,$05,$05,$06,$06,$07,$07,$08
     47  f000				  -	      .byte	$00,$00,$01,$01,$02,$03,$03,$04,$05,$05,$06,$06,$07,$08,$08,$09
     48  f000				  -	      .byte	$00,$00,$01,$02,$02,$03,$04,$04,$05,$06,$06,$07,$08,$08,$09,$0a
     49  f000				  -	      .byte	$00,$00,$01,$02,$03,$03,$04,$05,$06,$06,$07,$08,$09,$09,$0a,$0b
     50  f000				  -	      .byte	$00,$00,$01,$02,$03,$04,$04,$05,$06,$07,$08,$08,$09,$0a,$0b,$0c
     51  f000				  -	      .byte	$00,$00,$01,$02,$03,$04,$05,$06,$07,$07,$08,$09,$0a,$0b,$0c,$0d
     52  f000				  -	      .byte	$00,$00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e
     53  f000				  -	      .byte	$00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f
     54  f000				  -
     55  f000				  -fourbitfadeend
     56  f000				  -
     57  f000				  -	      echo	"  (fourbitfade module is using ",[(fourbitfadeend-fourbitfade)]d," bytes)"
     58  f000				  -
     59  f000					      endif
------- FILE c:\Users\steve\OneDrive\Desktop\2018dev\7800\7800basic\projects\demo1\lesson2_4.78b.asm
   1431  f000					      endif
   1432  f000							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1433  f000
   1434  f000							;standard routimes needed for pretty much all games
   1435  f000
   1436  f000							; some definitions used with "set debug color"
   1437  f000		       00 91	   DEBUGCALC  =	$91
   1438  f000		       00 41	   DEBUGWASTE =	$41
   1439  f000		       00 c1	   DEBUGDRAW  =	$C1
   1440  f000
   1441  f000							;NMI and IRQ handlers
   1442  f000				   NMI
   1443  f000							;VISIBLEOVER is 255 while the screen is drawn, and 0 right after the visible screen is done.
   1444  f000		       48		      pha		; save A
   1445  f001		       d8		      cld
   1446  f002		       a5 4d		      lda	visibleover
   1447  f004		       49 ff		      eor	#255
   1448  f006		       85 4d		      sta	visibleover
   1449  f008				  -	      ifconst	DEBUGINTERRUPT
   1450  f008				  -	      and	#$93
   1451  f008				  -	      sta	BACKGRND
   1452  f008					      endif
   1453  f008		       8a		      txa		; save X
   1454  f009		       48		      pha
   1455  f00a		       98		      tya		; save Y
   1456  f00b		       48		      pha
   1457  f00c		       ce b2 01 	      dec	interruptindex
   1458  f00f		       d0 03		      bne	skipreallyoffvisible
   1459  f011		       4c 73 f0 	      jmp	reallyoffvisible
   1460  f014				   skipreallyoffvisible
   1461  f014		       a5 4d		      lda	visibleover
   1462  f016		       d0 03		      bne	carryontopscreenroutine
   1463  f018				  -	      ifconst	.bottomscreenroutine
   1464  f018				  -	      lda	interrupthold
   1465  f018				  -	      beq	skipbottomroutine
   1466  f018				  -	      jsr	.bottomscreenroutine
   1467  f018				  -skipbottomroutine
   1468  f018					      endif
   1469  f018		       4c 81 f0 	      jmp	NMIexit
   1470  f01b				   carryontopscreenroutine
   1471  f01b				  -	      ifconst	.topscreenroutine
   1472  f01b				  -	      lda	interrupthold
   1473  f01b				  -	      beq	skiptoproutine
   1474  f01b				  -	      jsr	.topscreenroutine
   1475  f01b				  -skiptoproutine
   1476  f01b					      endif
   1477  f01b					      ifnconst	CANARYOFF
   1478  f01b		       ad c3 01 	      lda	canary
   1479  f01e		       f0 07		      beq	skipcanarytriggered
   1480  f020		       a9 45		      lda	#$45
   1481  f022		       85 20		      sta	BACKGRND
   1482  f024		       4c 6b f0 	      jmp	skipbrkolorset	; common crash dump routine, if available
   1483  f027				   skipcanarytriggered
   1484  f027					      endif
   1485  f027
   1486  f027		       ee 3e 21 	      inc	frameslost	; this is balanced with a "dec frameslost" when drawscreen is called.
   1487  f02a
   1488  f02a							; ** Other important routines that need to regularly run, and can run onscreen.
   1489  f02a							; ** Atarivox can't go here, because Maria might interrupt it while it's bit-banging.
   1490  f02a
   1491  f02a				  -	      ifconst	LONGCONTROLLERREAD
   1492  f02a				  -longcontrollerreads		; ** controllers that take a lot of time to read. We use much of the visible screen here.
   1493  f02a				  -	      ldy	port1control
   1494  f02a				  -	      lda	longreadtype,y
   1495  f02a				  -	      beq	LLRET1
   1496  f02a				  -	      tay
   1497  f02a				  -	      lda	longreadroutinehiP1,y
   1498  f02a				  -	      sta	inttemp4
   1499  f02a				  -	      lda	longreadroutineloP1,y
   1500  f02a				  -	      sta	inttemp3
   1501  f02a				  -	      jmp	(inttemp3)
   1502  f02a				  -LLRET1
   1503  f02a				  -	      ldy	port0control
   1504  f02a				  -	      lda	longreadtype,y
   1505  f02a				  -	      beq	LLRET0
   1506  f02a				  -	      tay
   1507  f02a				  -	      lda	longreadroutinehiP0,y
   1508  f02a				  -	      sta	inttemp4
   1509  f02a				  -	      lda	longreadroutineloP0,y
   1510  f02a				  -	      sta	inttemp3
   1511  f02a				  -	      jmp	(inttemp3)
   1512  f02a				  -LLRET0
   1513  f02a				  -
   1514  f02a				  -
   1515  f02a				  -	      ifconst	PADDLERANGE
   1516  f02a				  -TIMEVAL    =	PADDLERANGE
   1517  f02a				  -	      else
   1518  f02a				  -TIMEVAL    =	160
   1519  f02a				  -	      endif
   1520  f02a				  -TIMEOFFSET =	10
   1521  f02a				  -
   1522  f02a					      endif		; LONGCONTROLLERREAD
   1523  f02a
   1524  f02a
   1525  f02a		       20 01 f2 	      jsr	servicesfxchannels
   1526  f02d				  -	      ifconst	MUSICTRACKER
   1527  f02d				  -	      jsr	servicesong
   1528  f02d					      endif		; MUSICTRACKER
   1529  f02d				  -	      ifconst	RMT
   1530  f02d				  -	      lda	rasterpause
   1531  f02d				  -	      beq	skiprasterupdate
   1532  f02d				  -	      jsr	RASTERMUSICTRACKER+3
   1533  f02d				  -skiprasterupdate
   1534  f02d				  -RMT_Iend
   1535  f02d					      endif
   1536  f02d
   1537  f02d		       ee a4 01 	      inc	framecounter
   1538  f030		       ad a4 01 	      lda	framecounter
   1539  f033		       29 3f		      and	#63
   1540  f035		       d0 08		      bne	skipcountdownseconds
   1541  f037		       ad a5 01 	      lda	countdownseconds
   1542  f03a		       f0 03		      beq	skipcountdownseconds
   1543  f03c		       ce a5 01 	      dec	countdownseconds
   1544  f03f				   skipcountdownseconds
   1545  f03f
   1546  f03f		       a2 01		      ldx	#1
   1547  f041				   buttonreadloop
   1548  f041		       8a		      txa
   1549  f042		       48		      pha
   1550  f043		       bc b9 01 	      ldy	port0control,x
   1551  f046		       b9 de f1 	      lda	buttonhandlerlo,y
   1552  f049		       85 da		      sta	inttemp3
   1553  f04b		       b9 d2 f1 	      lda	buttonhandlerhi,y
   1554  f04e		       85 db		      sta	inttemp4
   1555  f050		       05 da		      ora	inttemp3
   1556  f052		       f0 03		      beq	buttonreadloopreturn
   1557  f054		       6c da 00 	      jmp	(inttemp3)
   1558  f057				   buttonreadloopreturn
   1559  f057		       68		      pla
   1560  f058		       aa		      tax
   1561  f059		       ca		      dex
   1562  f05a		       10 e5		      bpl	buttonreadloop
   1563  f05c
   1564  f05c							;ifconst KEYPADSUPPORT
   1565  f05c							;  jsr keypadrowselect
   1566  f05c							;endif ; KEYPADSUPPORT
   1567  f05c
   1568  f05c
   1569  f05c					      ifconst	DOUBLEBUFFER
   1570  f05c		       ad b4 01 	      lda	doublebufferminimumframeindex
   1571  f05f		       f0 03		      beq	skipdoublebufferminimumframeindexadjust
   1572  f061		       ce b4 01 	      dec	doublebufferminimumframeindex
   1573  f064				   skipdoublebufferminimumframeindexadjust
   1574  f064					      endif
   1575  f064
   1576  f064		       4c 81 f0 	      jmp	NMIexit
   1577  f067
   1578  f067				   IRQ			; the only source of non-nmi interrupt should be the BRK opcode.
   1579  f067					      ifnconst	BREAKPROTECTOFF
   1580  f067		       a9 1a		      lda	#$1A
   1581  f069		       85 20		      sta	BACKGRND
   1582  f06b				   skipbrkolorset
   1583  f06b				   skipbrkdetected
   1584  f06b		       a9 60		      lda	#$60
   1585  f06d		       8d 07 21 	      sta	sCTRL
   1586  f070		       85 3c		      sta	CTRL
   1587  f072					      ifnconst	hiscorefont
   1588  f072		       02		      .byte.b	$02	; KIL/JAM
   1589  f073				  -	      else		; hiscorefont is present
   1590  f073				  -	      ifconst	CRASHDUMP
   1591  f073				  -	      bit	MSTAT
   1592  f073				  -	      bpl	skipbrkdetected	; wait for vblank to ensure we're clear of NMI
   1593  f073				  -
   1594  f073				  -	      ifconst	dumpbankswitch
   1595  f073				  -	      lda	dumpbankswitch
   1596  f073				  -	      pha
   1597  f073				  -	      endif
   1598  f073				  -
   1599  f073				  -			; bankswitch if needed, to get to the hiscore font
   1600  f073				  -	      ifconst	bankswitchmode
   1601  f073				  -	      ifconst	included.hiscore.asm.bank
   1602  f073				  -	      ifconst	MCPDEVCART
   1603  f073				  -	      lda	#($18 | included.hiscore.asm.bank)
   1604  f073				  -	      sta	$3000
   1605  f073				  -	      else
   1606  f073				  -	      lda	#(included.hiscore.asm.bank)
   1607  f073				  -	      sta	$8000
   1608  f073				  -	      endif
   1609  f073				  -	      endif		; included.hiscore.asm.bank
   1610  f073				  -	      endif		; bankswitchmode
   1611  f073				  -
   1612  f073				  -	      ifconst	DOUBLEBUFFER
   1613  f073				  -			;turn off double-buffering, if on...
   1614  f073				  -	      lda	#>DLLMEM
   1615  f073				  -	      sta	DPPH
   1616  f073				  -	      lda	#<DLLMEM
   1617  f073				  -	      sta	DPPL
   1618  f073				  -	      endif
   1619  f073				  -
   1620  f073				  -	      lda	#$00
   1621  f073				  -	      sta	P0C2
   1622  f073				  -
   1623  f073				  -			;update the second-from-top DL...
   1624  f073				  -	      ldy	#8
   1625  f073				  -NMIupdatetopDL
   1626  f073				  -	      lda	show2700,y
   1627  f073				  -	      sta	ZONE1ADDRESS,y
   1628  f073				  -	      dey
   1629  f073				  -	      bpl	NMIupdatetopDL
   1630  f073				  -
   1631  f073				  -			; the hiscore font is present, so we try to output the stack
   1632  f073				  -	      ldy	#0
   1633  f073				  -copystackloop
   1634  f073				  -	      pla
   1635  f073				  -	      pha
   1636  f073				  -	      lsr
   1637  f073				  -	      lsr
   1638  f073				  -	      lsr
   1639  f073				  -	      lsr
   1640  f073				  -	      tax
   1641  f073				  -	      lda	hiscorehexlut,x
   1642  f073				  -	      sta	$2700,y
   1643  f073				  -	      iny
   1644  f073				  -
   1645  f073				  -	      pla
   1646  f073				  -	      and	#$0F
   1647  f073				  -	      tax
   1648  f073				  -	      lda	hiscorehexlut,x
   1649  f073				  -	      sta	$2700,y
   1650  f073				  -	      iny
   1651  f073				  -
   1652  f073				  -	      lda	#27	; period
   1653  f073				  -	      sta	$2700,y
   1654  f073				  -	      iny
   1655  f073				  -
   1656  f073				  -	      cpy	#30
   1657  f073				  -	      bne	copystackloop
   1658  f073				  -
   1659  f073				  -	      lda	#>hiscorefont
   1660  f073				  -	      sta	CHARBASE
   1661  f073				  -	      sta	sCHARBASE
   1662  f073				  -	      lda	#%01000011	;Enable DMA, mode=320A
   1663  f073				  -	      sta	CTRL
   1664  f073				  -	      sta	sCTRL
   1665  f073				  -	      .byte	$02	; KIL/JAM
   1666  f073				  -hiscorehexlut
   1667  f073				  -			;	  0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
   1668  f073				  -	      .byte	33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 0, 1, 2, 3, 4, 5
   1669  f073				  -show2700
   1670  f073				  -			;	 lo   mode	   hi	width=29  x   EODL
   1671  f073				  -	      .byte	$00, %01100000, $27, 3, 20, 0,0,0
   1672  f073				  -	      else		; CRASHDUMP
   1673  f073				  -	      .byte	$02	; KIL/JAM
   1674  f073				  -	      endif		; crashdump
   1675  f073					      endif		; hiscorefont
   1676  f073				  -	      else
   1677  f073				  -	      RTI
   1678  f073					      endif
   1679  f073
   1680  f073				  -	      ifconst	LONGCONTROLLERREAD
   1681  f073				  -
   1682  f073				  -longreadtype
   1683  f073				  -	      .byte	0, 0, 0, 1	; NONE     PROLINE   LIGHTGUN	PADDLE
   1684  f073				  -	      .byte	2, 0, 3, 0	; TRKBALL  VCSSTICK  DRIVING	KEYPAD
   1685  f073				  -	      .byte	3, 3, 0, 0	; STMOUSE  AMOUSE    ATARIVOX	SNES
   1686  f073				  -
   1687  f073				  -longreadroutineloP0
   1688  f073				  -	      .byte	<LLRET0	;  0 = no routine
   1689  f073				  -	      .byte	<paddleport0update	;  1 = paddle
   1690  f073				  -	      .byte	<trakball0update	;  2 = trakball
   1691  f073				  -	      .byte	<mouse0update	;  3 = mouse
   1692  f073				  -
   1693  f073				  -longreadroutinehiP0
   1694  f073				  -	      .byte	>LLRET0	;  0 = no routine
   1695  f073				  -	      .byte	>paddleport0update	;  1 = paddle
   1696  f073				  -	      .byte	>trakball0update	;  2 = trackball
   1697  f073				  -	      .byte	>mouse0update	;  3 = mouse
   1698  f073				  -
   1699  f073				  -longreadroutineloP1
   1700  f073				  -	      .byte	<LLRET1	;  0 = no routine
   1701  f073				  -	      .byte	<paddleport1update	;  1 = paddle
   1702  f073				  -	      .byte	<trakball1update	;  2 = trakball
   1703  f073				  -	      .byte	<mouse1update	;  3 = mouse
   1704  f073				  -
   1705  f073				  -longreadroutinehiP1
   1706  f073				  -	      .byte	>LLRET1	;  0 = no routine
   1707  f073				  -	      .byte	>paddleport1update	;  1 = paddle
   1708  f073				  -	      .byte	>trakball1update	;  2 = trackball
   1709  f073				  -	      .byte	>mouse1update	;  3 = mouse
   1710  f073				  -
   1711  f073				  -
   1712  f073				  -SETTIM64T
   1713  f073				  -	      bne	skipdefaulttime
   1714  f073				  -	      ifnconst	PADDLESMOOTHINGOFF
   1715  f073				  -	      lda	#(TIMEVAL+TIMEOFFSET+1)
   1716  f073				  -	      else
   1717  f073				  -	      lda	#(TIMEVAL+TIMEOFFSET)
   1718  f073				  -	      endif
   1719  f073				  -skipdefaulttime
   1720  f073				  -	      tay
   1721  f073				  -	      dey
   1722  f073				  -.setTIM64Tloop
   1723  f073				  -	      sta	TIM64T
   1724  f073				  -	      cpy	INTIM
   1725  f073				  -	      bne	.setTIM64Tloop
   1726  f073				  -	      rts
   1727  f073					      endif		; LONGCONTROLLERREAD
   1728  f073
   1729  f073				   reallyoffvisible
   1730  f073		       85 24		      sta	WSYNC
   1731  f075
   1732  f075		       a9 00		      lda	#0
   1733  f077		       85 4d		      sta	visibleover
   1734  f079				  -	      ifconst	DEBUGINTERRUPT
   1735  f079				  -	      sta	BACKGRND
   1736  f079					      endif
   1737  f079
   1738  f079		       a9 03		      lda	#3
   1739  f07b		       8d b2 01 	      sta	interruptindex
   1740  f07e
   1741  f07e		       20 73 f1 	      jsr	uninterruptableroutines
   1742  f081
   1743  f081				  -	      ifconst	.userinterrupt
   1744  f081				  -	      lda	interrupthold
   1745  f081				  -	      beq	skipuserintroutine
   1746  f081				  -	      jsr	.userinterrupt
   1747  f081				  -skipuserintroutine
   1748  f081					      endif
   1749  f081
   1750  f081				  -	      ifconst	KEYPADSUPPORT
   1751  f081				  -	      jsr	keypadcolumnread
   1752  f081				  -	      jsr	keypadrowselect
   1753  f081					      endif
   1754  f081
   1755  f081				   NMIexit
   1756  f081		       68		      pla
   1757  f082		       a8		      tay
   1758  f083		       68		      pla
   1759  f084		       aa		      tax
   1760  f085		       68		      pla
   1761  f086		       40		      RTI
   1762  f087
   1763  f087				   clearscreen
   1764  f087		       a2 0b		      ldx	#(WZONECOUNT-1)
   1765  f089		       a9 00		      lda	#0
   1766  f08b				   clearscreenloop
   1767  f08b		       95 65		      sta	dlend,x
   1768  f08d		       ca		      dex
   1769  f08e		       10 fb		      bpl	clearscreenloop
   1770  f090		       a9 00		      lda	#0
   1771  f092		       8d ad 01 	      sta	valbufend	; clear the bcd value buffer
   1772  f095		       8d ae 01 	      sta	valbufendsave
   1773  f098		       60		      rts
   1774  f099
   1775  f099				   restorescreen
   1776  f099		       a2 0b		      ldx	#(WZONECOUNT-1)
   1777  f09b		       a9 00		      lda	#0
   1778  f09d				   restorescreenloop
   1779  f09d		       b5 82		      lda	dlendsave,x
   1780  f09f		       95 65		      sta	dlend,x
   1781  f0a1		       ca		      dex
   1782  f0a2		       10 f9		      bpl	restorescreenloop
   1783  f0a4		       ad ae 01 	      lda	valbufendsave
   1784  f0a7		       8d ad 01 	      sta	valbufend
   1785  f0aa		       60		      rts
   1786  f0ab
   1787  f0ab				   savescreen
   1788  f0ab		       a2 0b		      ldx	#(WZONECOUNT-1)
   1789  f0ad				   savescreenloop
   1790  f0ad		       b5 65		      lda	dlend,x
   1791  f0af		       95 82		      sta	dlendsave,x
   1792  f0b1		       ca		      dex
   1793  f0b2		       10 f9		      bpl	savescreenloop
   1794  f0b4		       ad ad 01 	      lda	valbufend
   1795  f0b7		       8d ae 01 	      sta	valbufendsave
   1796  f0ba					      ifconst	DOUBLEBUFFER
   1797  f0ba		       a5 d5		      lda	doublebufferstate
   1798  f0bc		       f0 04		      beq	savescreenrts
   1799  f0be		       a9 01		      lda	#1
   1800  f0c0		       85 d7		      sta	doublebufferbufferdirty
   1801  f0c2				   savescreenrts
   1802  f0c2					      endif		; DOUBLEBUFFER
   1803  f0c2		       60		      rts
   1804  f0c3
   1805  f0c3				   drawscreen
   1806  f0c3
   1807  f0c3				  -	      ifconst	interrupthold
   1808  f0c3				  -	      lda	#$FF
   1809  f0c3				  -	      sta	interrupthold	; if the user called drawscreen, we're ready for interrupts
   1810  f0c3					      endif
   1811  f0c3
   1812  f0c3		       a9 00		      lda	#0
   1813  f0c5		       85 42		      sta	temp1	; not B&W if we're here...
   1814  f0c7
   1815  f0c7				   drawscreenwait
   1816  f0c7		       a5 4d		      lda	visibleover
   1817  f0c9		       d0 fc		      bne	drawscreenwait	; make sure the visible screen isn't being drawn
   1818  f0cb
   1819  f0cb							;restore some registers in case the game changed them mid-screen...
   1820  f0cb		       ad 07 21 	      lda	sCTRL
   1821  f0ce		       05 42		      ora	temp1
   1822  f0d0		       85 3c		      sta	CTRL
   1823  f0d2		       ad 0b 21 	      lda	sCHARBASE
   1824  f0d5		       85 34		      sta	CHARBASE
   1825  f0d7
   1826  f0d7							;ensure all of the display list is terminated...
   1827  f0d7		       20 50 f1 	      jsr	terminatedisplaylist
   1828  f0da
   1829  f0da					      ifnconst	pauseroutineoff
   1830  f0da		       20 e5 f0 	      jsr	pauseroutine
   1831  f0dd					      endif		; pauseroutineoff
   1832  f0dd
   1833  f0dd							; Make sure the visible screen has *started* before we exit. That way we can rely on drawscreen
   1834  f0dd							; delaying a full frame, but still allowing time for basic calculations.
   1835  f0dd				   visiblescreenstartedwait
   1836  f0dd		       a5 4d		      lda	visibleover
   1837  f0df		       f0 fc		      beq	visiblescreenstartedwait
   1838  f0e1				   visiblescreenstartedwaitdone
   1839  f0e1		       ce 3e 21 	      dec	frameslost	; ; this gets balanced with an "inc frameslost" by an NMI at the top of the screen
   1840  f0e4		       60		      rts
   1841  f0e5
   1842  f0e5					      ifnconst	pauseroutineoff
   1843  f0e5							; check to see if pause was pressed and released
   1844  f0e5				   pauseroutine
   1845  f0e5		       ad b5 01 	      lda	pausedisable
   1846  f0e8		       d0 55		      bne	leavepauseroutine
   1847  f0ea		       a9 08		      lda	#8
   1848  f0ec		       2c 82 02 	      bit	SWCHB
   1849  f0ef		       f0 30		      beq	pausepressed
   1850  f0f1
   1851  f0f1					      ifnconst	SOFTPAUSEOFF
   1852  f0f1					      ifnconst	SOFTRESETASPAUSEOFF
   1853  f0f1					      ifnconst	MOUSESUPPORT
   1854  f0f1					      ifnconst	TRAKBALLSUPPORT
   1855  f0f1		       ad b9 01 	      lda	port0control
   1856  f0f4		       c9 0b		      cmp	#11
   1857  f0f6		       d0 07		      bne	skipsoftpause
   1858  f0f8		       ad 80 02 	      lda	SWCHA	; then check the soft "RESET" joysick code...
   1859  f0fb		       29 70		      and	#%01110000	; _LDU
   1860  f0fd		       f0 22		      beq	pausepressed
   1861  f0ff				   skipsoftpause
   1862  f0ff					      endif
   1863  f0ff					      endif
   1864  f0ff					      endif
   1865  f0ff					      endif
   1866  f0ff				  -	      ifconst	SNES0PAUSE
   1867  f0ff				  -	      lda	port0control
   1868  f0ff				  -	      cmp	#11
   1869  f0ff				  -	      bne	skipsnes0pause
   1870  f0ff				  -	      lda	snesdetected0
   1871  f0ff				  -	      beq	skipsnes0pause
   1872  f0ff				  -	      lda	snes2atari0hi
   1873  f0ff				  -	      and	#%00010000
   1874  f0ff				  -	      beq	pausepressed
   1875  f0ff				  -skipsnes0pause
   1876  f0ff					      endif
   1877  f0ff				  -	      ifconst	SNES1PAUSE
   1878  f0ff				  -
   1879  f0ff				  -	      lda	port1control
   1880  f0ff				  -	      cmp	#11
   1881  f0ff				  -	      bne	skipsnes1pause
   1882  f0ff				  -	      lda	snesdetected1
   1883  f0ff				  -	      beq	skipsnes1pause
   1884  f0ff				  -	      lda	snes2atari1hi
   1885  f0ff				  -	      and	#%00010000
   1886  f0ff				  -	      beq	pausepressed
   1887  f0ff				  -skipsnes1pause
   1888  f0ff					      endif
   1889  f0ff				  -	      ifconst	SNESNPAUSE
   1890  f0ff				  -	      ldx	snesport
   1891  f0ff				  -	      lda	port0control,x
   1892  f0ff				  -	      cmp	#11
   1893  f0ff				  -	      bne	skipsnesNpause
   1894  f0ff				  -	      lda	snesdetected0,x
   1895  f0ff				  -	      beq	skipsnesNpause
   1896  f0ff				  -	      lda	snes2atari0hi,x
   1897  f0ff				  -	      and	#%00010000
   1898  f0ff				  -	      beq	pausepressed
   1899  f0ff				  -skipsnesNpause
   1900  f0ff					      endif
   1901  f0ff
   1902  f0ff							;pause isn't pressed
   1903  f0ff		       a9 00		      lda	#0
   1904  f101		       8d ac 01 	      sta	pausebuttonflag	; clear pause hold state in case its set
   1905  f104
   1906  f104							;check if we're in an already paused state
   1907  f104		       ad 00 21 	      lda	pausestate
   1908  f107		       f0 36		      beq	leavepauseroutine	; nope, leave
   1909  f109
   1910  f109		       c9 01		      cmp	#1	; last frame was the start of pausing
   1911  f10b		       f0 2b		      beq	enterpausestate2	; move from state 1 to 2
   1912  f10d
   1913  f10d		       c9 02		      cmp	#2
   1914  f10f		       f0 34		      beq	carryonpausing
   1915  f111
   1916  f111							;pausestate must be >2, which means we're ending an unpause 
   1917  f111		       a9 00		      lda	#0
   1918  f113		       8d ac 01 	      sta	pausebuttonflag
   1919  f116		       8d 00 21 	      sta	pausestate
   1920  f119		       ad 07 21 	      lda	sCTRL
   1921  f11c		       85 3c		      sta	CTRL
   1922  f11e		       4c 3f f1 	      jmp	leavepauseroutine
   1923  f121
   1924  f121				   pausepressed
   1925  f121							;pause is pressed
   1926  f121		       ad ac 01 	      lda	pausebuttonflag
   1927  f124		       c9 ff		      cmp	#$ff
   1928  f126		       f0 1d		      beq	carryonpausing
   1929  f128
   1930  f128							;its a new press, increment the state
   1931  f128		       ee 00 21 	      inc	pausestate
   1932  f12b
   1933  f12b							;silence volume at the start and end of pausing
   1934  f12b		       a9 00		      lda	#0
   1935  f12d		       85 19		      sta	AUDV0
   1936  f12f		       85 1a		      sta	AUDV1
   1937  f131
   1938  f131				  -	      ifconst	pokeysupport
   1939  f131				  -	      ldy	#7
   1940  f131				  -pausesilencepokeyaudioloop
   1941  f131				  -	      sta	(pokeybase),y
   1942  f131				  -	      dey
   1943  f131				  -	      bpl	pausesilencepokeyaudioloop
   1944  f131					      endif		; pokeysupport
   1945  f131
   1946  f131		       a9 ff		      lda	#$ff
   1947  f133		       8d ac 01 	      sta	pausebuttonflag
   1948  f136		       d0 0d		      bne	carryonpausing
   1949  f138
   1950  f138				   enterpausestate2
   1951  f138		       a9 02		      lda	#2
   1952  f13a		       8d 00 21 	      sta	pausestate
   1953  f13d		       d0 06		      bne	carryonpausing
   1954  f13f				   leavepauseroutine
   1955  f13f		       ad 07 21 	      lda	sCTRL
   1956  f142		       85 3c		      sta	CTRL
   1957  f144		       60		      rts
   1958  f145				   carryonpausing
   1959  f145				  -	      ifconst	.pause
   1960  f145				  -	      jsr	.pause
   1961  f145					      endif		; .pause
   1962  f145		       ad 07 21 	      lda	sCTRL
   1963  f148		       09 80		      ora	#%10000000	; turn off colorburst during pause...
   1964  f14a		       85 3c		      sta	CTRL
   1965  f14c		       4c e5 f0 	      jmp	pauseroutine
   1966  f14f					      endif		; pauseroutineoff
   1967  f14f
   1968  f14f
   1969  f14f					      ifconst	DOUBLEBUFFER
   1970  f14f				   skipterminatedisplaylistreturn
   1971  f14f		       60		      rts
   1972  f150					      endif		; DOUBLEBUFFER
   1973  f150				   terminatedisplaylist
   1974  f150					      ifconst	DOUBLEBUFFER
   1975  f150		       a5 d5		      lda	doublebufferstate
   1976  f152		       d0 fb		      bne	skipterminatedisplaylistreturn	; double-buffering runs it's own DL termination code
   1977  f154					      endif		; DOUBLEBUFFER
   1978  f154				   terminatedisplaybuffer
   1979  f154							;add DL end entry on each DL
   1980  f154		       a2 0b		      ldx	#(WZONECOUNT-1)
   1981  f156				   dlendloop
   1982  f156		       bd d0 f6 	      lda	DLPOINTL,x
   1983  f159					      ifconst	DOUBLEBUFFER
   1984  f159		       18		      clc
   1985  f15a		       65 d6		      adc	doublebufferdloffset
   1986  f15c					      endif		; DOUBLEBUFFER
   1987  f15c		       85 63		      sta	dlpnt
   1988  f15e		       bd c4 f6 	      lda	DLPOINTH,x
   1989  f161					      ifconst	DOUBLEBUFFER
   1990  f161		       69 00		      adc	#0
   1991  f163					      endif		; DOUBLEBUFFER
   1992  f163		       85 64		      sta	dlpnt+1
   1993  f165		       b4 65		      ldy	dlend,x
   1994  f167		       a9 00		      lda	#$00
   1995  f169				   dlendmoreloops
   1996  f169		       c8		      iny
   1997  f16a		       91 63		      sta	(dlpnt),y
   1998  f16c				  -	      ifconst	FRAMESKIPGLITCHFIXWEAK
   1999  f16c				  -	      cpy	#DLLASTOBJ+1
   2000  f16c				  -	      beq	dlendthiszonedone
   2001  f16c				  -	      iny
   2002  f16c				  -	      iny
   2003  f16c				  -	      iny
   2004  f16c				  -	      iny
   2005  f16c				  -	      iny
   2006  f16c				  -	      sta	(dlpnt),y
   2007  f16c				  -dlendthiszonedone
   2008  f16c					      endif	FRAMESKIPGLITCHFIXWEAK
   2009  f16c				  -	      ifconst	FRAMESKIPGLITCHFIX
   2010  f16c				  -	      iny
   2011  f16c				  -	      iny
   2012  f16c				  -	      iny
   2013  f16c				  -	      iny
   2014  f16c				  -	      cpy	#DLLASTOBJ-1
   2015  f16c				  -	      bcc	dlendmoreloops
   2016  f16c					      endif		; FRAMESKIPGLITCHFIX
   2017  f16c		       ca		      dex
   2018  f16d		       10 e7		      bpl	dlendloop
   2019  f16f
   2020  f16f					      ifnconst	pauseroutineoff
   2021  f16f		       20 e5 f0 	      jsr	pauseroutine
   2022  f172					      endif		; pauseroutineoff
   2023  f172		       60		      rts
   2024  f173
   2025  f173				   uninterruptableroutines
   2026  f173							; this is for routines that must happen off the visible screen, each frame.
   2027  f173
   2028  f173				  -	      ifconst	AVOXVOICE
   2029  f173				  -	      jsr	serviceatarivoxqueue
   2030  f173					      endif
   2031  f173
   2032  f173		       a9 00		      lda	#0
   2033  f175		       8d b8 01 	      sta	palfastframe
   2034  f178		       ad 09 21 	      lda	paldetected
   2035  f17b		       f0 10		      beq	skippalframeadjusting
   2036  f17d							; ** PAL console is detected. we increment palframes to accurately count 5 frames,
   2037  f17d		       ae b7 01 	      ldx	palframes
   2038  f180		       e8		      inx
   2039  f181		       e0 05		      cpx	#5
   2040  f183		       d0 05		      bne	palframeskipdone
   2041  f185		       ee b8 01 	      inc	palfastframe
   2042  f188		       a2 00		      ldx	#0
   2043  f18a				   palframeskipdone
   2044  f18a		       8e b7 01 	      stx	palframes
   2045  f18d				   skippalframeadjusting
   2046  f18d
   2047  f18d				  -	      ifconst	MUSICTRACKER
   2048  f18d				  -			; We normally run the servicesong routine from the top-screen interrupt, but if it
   2049  f18d				  -			; happens to interrupt the scheduling of a sound effect in the game code, we skip it.
   2050  f18d				  -			; If that happens, we try again here. Chances are very small we'll run into the same
   2051  f18d				  -			; problem twice, and if we do, we just drop a musical note or two.
   2052  f18d				  -	      lda	sfxschedulemissed
   2053  f18d				  -	      beq	servicesongwasnotmissed
   2054  f18d				  -	      jsr	servicesong
   2055  f18d				  -servicesongwasnotmissed
   2056  f18d					      endif		; MUSICTRACKER
   2057  f18d
   2058  f18d				  -	      ifconst	RMT
   2059  f18d				  -	      lda	palfastframe
   2060  f18d				  -	      beq	skiprasterupdate2
   2061  f18d				  -	      lda	rasterpause
   2062  f18d				  -	      beq	skiprasterupdate2
   2063  f18d				  -	      jsr	RASTERMUSICTRACKER+3
   2064  f18d				  -skiprasterupdate2
   2065  f18d					      endif
   2066  f18d
   2067  f18d
   2068  f18d		       60		      rts
   2069  f18e
   2070  f18e				   serviceatarivoxqueue
   2071  f18e				  -	      ifconst	AVOXVOICE
   2072  f18e				  -	      lda	voxlock
   2073  f18e				  -	      bne	skipvoxprocessing	; the vox is in the middle of speech address update
   2074  f18e				  -skipvoxqueuesizedec
   2075  f18e				  -	      jmp	processavoxvoice
   2076  f18e				  -skipvoxprocessing
   2077  f18e				  -	      rts
   2078  f18e				  -
   2079  f18e				  -processavoxvoice
   2080  f18e				  -	      ifconst	HSSUPPORT
   2081  f18e				  -			; ** we skip speech if hi-score is on and no vox was detected
   2082  f18e				  -			; ** this is to avoid later collision with snes pads.
   2083  f18e				  -	      lda	hsdevice
   2084  f18e				  -	      and	#2
   2085  f18e				  -	      beq	processavoxvoicereturn
   2086  f18e				  -	      endif		; HSSUPPORT
   2087  f18e				  -	      lda	avoxenable
   2088  f18e				  -	      bne	avoxfixport
   2089  f18e				  -	      SPKOUT	tempavox
   2090  f18e				  -	      rts
   2091  f18e				  -avoxfixport
   2092  f18e				  -	      lda	#0	; restore the port to all bits as inputs...
   2093  f18e				  -	      sta	CTLSWA
   2094  f18e				  -	      rts
   2095  f18e				  -silenceavoxvoice
   2096  f18e				  -	      SPEAK	avoxsilentdata
   2097  f18e				  -processavoxvoicereturn
   2098  f18e				  -	      rts
   2099  f18e				  -avoxsilentdata
   2100  f18e				  -	      .byte	31,255
   2101  f18e					      else
   2102  f18e		       60		      rts
   2103  f18f					      endif		; AVOXVOICE
   2104  f18f
   2105  f18f				   joybuttonhandler
   2106  f18f		       8a		      txa
   2107  f190		       0a		      asl
   2108  f191		       a8		      tay
   2109  f192		       b9 08 00 	      lda	INPT0,y
   2110  f195		       4a		      lsr
   2111  f196		       9d 02 21 	      sta	sINPT1,x
   2112  f199		       b9 09 00 	      lda	INPT1,y
   2113  f19c		       29 80		      and	#%10000000
   2114  f19e		       1d 02 21 	      ora	sINPT1,x
   2115  f1a1		       9d 02 21 	      sta	sINPT1,x
   2116  f1a4
   2117  f1a4		       b5 0c		      lda	INPT4,x
   2118  f1a6		       30 19		      bmi	.skip1bjoyfirecheck
   2119  f1a8							;one button joystick is down
   2120  f1a8		       49 80		      eor	#%10000000
   2121  f1aa		       9d 02 21 	      sta	sINPT1,x
   2122  f1ad
   2123  f1ad		       ad b1 01 	      lda	joybuttonmode
   2124  f1b0		       3d c4 f1 	      and	twobuttonmask,x
   2125  f1b3		       f0 0c		      beq	.skip1bjoyfirecheck
   2126  f1b5		       ad b1 01 	      lda	joybuttonmode
   2127  f1b8		       1d c4 f1 	      ora	twobuttonmask,x
   2128  f1bb		       8d b1 01 	      sta	joybuttonmode
   2129  f1be		       8d 82 02 	      sta	SWCHB
   2130  f1c1				   .skip1bjoyfirecheck
   2131  f1c1		       4c 57 f0 	      jmp	buttonreadloopreturn
   2132  f1c4
   2133  f1c4				   twobuttonmask
   2134  f1c4		       04 10		      .byte.b	%00000100,%00010000
   2135  f1c6
   2136  f1c6				  -	      ifconst	SNES2ATARISUPPORT
   2137  f1c6				  -
   2138  f1c6				  -SNES_CLOCK_PORT_BIT
   2139  f1c6				  -	      .byte	$10,$01
   2140  f1c6				  -SNES_CTLSWA_MASK
   2141  f1c6				  -	      .byte	$30,$03
   2142  f1c6				  -SNES_CTLSWA_SIGNAL
   2143  f1c6				  -	      .byte	$C0,$0C
   2144  f1c6				  -SWCHA_DIRMASK
   2145  f1c6				  -	      .byte	$F0,$0F
   2146  f1c6				  -SWCHA_INVDIRMASK
   2147  f1c6				  -	      .byte	$0F,$F0
   2148  f1c6				  -
   2149  f1c6				  -			; Probe each port for SNES, and see if autodetection succeeds anywhere.
   2150  f1c6				  -SNES_AUTODETECT
   2151  f1c6				  -	      ifconst	HSSUPPORT
   2152  f1c6				  -			; ** an atarivox might be plugged in, so we skip scanning the second
   2153  f1c6				  -			; ** port for a snes if vox was detected...
   2154  f1c6				  -	      lda	hsdevice	; b1 high means atarivox/savekey was detected
   2155  f1c6				  -	      lsr
   2156  f1c6				  -	      and	#1
   2157  f1c6				  -	      eor	#1
   2158  f1c6				  -	      tax
   2159  f1c6				  -	      else
   2160  f1c6				  -	      ldx	#1
   2161  f1c6				  -	      endif		; HSSUPPORT
   2162  f1c6				  -
   2163  f1c6				  -SNES_AUTODETECT_LOOP
   2164  f1c6				  -	      lda	#1	; proline
   2165  f1c6				  -	      sta	port0control,x
   2166  f1c6				  -	      jsr	setportforinput
   2167  f1c6				  -	      jsr	setonebuttonmode
   2168  f1c6				  -	      jsr	SNES_READ
   2169  f1c6				  -	      lda	snesdetected0,x
   2170  f1c6				  -	      bne	SNES_AUTODETECT_FOUND
   2171  f1c6				  -			; detection failed
   2172  f1c6				  -	      jsr	setportforinput
   2173  f1c6				  -	      jsr	settwobuttonmode
   2174  f1c6				  -	      dex
   2175  f1c6				  -	      bpl	SNES_AUTODETECT_LOOP
   2176  f1c6				  -	      rts
   2177  f1c6				  -SNES_AUTODETECT_FOUND
   2178  f1c6				  -	      lda	#11	; formally set the snes controller
   2179  f1c6				  -	      sta	port0control,x
   2180  f1c6				  -	      stx	snesport
   2181  f1c6				  -	      rts
   2182  f1c6					      endif		; SNES2ATARISUPPORT
   2183  f1c6
   2184  f1c6				   snes2atarihandler
   2185  f1c6				  -	      ifconst	SNES2ATARISUPPORT
   2186  f1c6				  -SNES2ATARI
   2187  f1c6				  -	      jsr	SNES_READ
   2188  f1c6				  -	      jmp	buttonreadloopreturn
   2189  f1c6				  -
   2190  f1c6				  -SNES_READ
   2191  f1c6				  -			; x=0 for left port, x=1 for right
   2192  f1c6				  -
   2193  f1c6				  -			; Start by checking if any port directions are pressed. 
   2194  f1c6				  -			; Abort the autodetect for this port if so, as snes2atari doesn't ground any 
   2195  f1c6				  -			; direction pins. if directions are pressed and the port is changed to output,
   2196  f1c6				  -			; that means the output is direct-shorted, and nobody seems to know if riot's
   2197  f1c6				  -			; output mode has current protection.
   2198  f1c6				  -
   2199  f1c6				  -	      lda	SWCHA
   2200  f1c6				  -	      ora	SWCHA_INVDIRMASK,x
   2201  f1c6				  -	      eor	SWCHA_DIRMASK,x
   2202  f1c6				  -	      bne	SNES_READ_cont1
   2203  f1c6				  -	      jmp	SNES_ABORT
   2204  f1c6				  -SNES_READ_cont1
   2205  f1c6				  -
   2206  f1c6				  -	      lda	port0control,x
   2207  f1c6				  -	      cmp	#11	; snes
   2208  f1c6				  -	      bne	snes2atari_signal_go	; if this is a first auto-detection read, go ahead and signal
   2209  f1c6				  -	      lda	snesdetected0,x
   2210  f1c6				  -	      bne	snes2atari_signal_skip	; if snes was available in previous frames, skip signalling
   2211  f1c6				  -snes2atari_signal_go
   2212  f1c6				  -	      jsr	SNES2ATARI_SIGNAL
   2213  f1c6				  -snes2atari_signal_skip
   2214  f1c6				  -
   2215  f1c6				  -			;lda SNES_CTLSWA_MASK,x
   2216  f1c6				  -
   2217  f1c6				  -	      lda	CTLSWA
   2218  f1c6				  -	      and	SWCHA_INVDIRMASK,x	; preserve othr nibble
   2219  f1c6				  -	      ora	SNES_CTLSWA_MASK,x
   2220  f1c6				  -	      sta	CTLSWA	; enable pins UP/DOWN to work as outputs
   2221  f1c6				  -
   2222  f1c6				  -	      lda	SWCHA
   2223  f1c6				  -	      and	SWCHA_INVDIRMASK,x	; preserve othr nibble
   2224  f1c6				  -	      ora	SNES_CTLSWA_MASK,x
   2225  f1c6				  -
   2226  f1c6				  -	      sta	SWCHA	; latch+clock high
   2227  f1c6				  -	      nop
   2228  f1c6				  -	      nop
   2229  f1c6				  -	      nop
   2230  f1c6				  -	      nop
   2231  f1c6				  -	      nop
   2232  f1c6				  -	      nop
   2233  f1c6				  -	      nop
   2234  f1c6				  -	      lda	SWCHA
   2235  f1c6				  -	      and	SWCHA_INVDIRMASK,x	; preserve othr nibble
   2236  f1c6				  -	      sta	SWCHA	; latch and clock low
   2237  f1c6				  -	      ldy	#16	; 16 bits 
   2238  f1c6				  -SNES2ATARILOOP
   2239  f1c6				  -	      rol	INPT4,x	; sample data into carry
   2240  f1c6				  -	      lda	SWCHA
   2241  f1c6				  -	      and	SWCHA_INVDIRMASK,x	; preserve othr nibble
   2242  f1c6				  -	      ora	SNES_CLOCK_PORT_BIT,x
   2243  f1c6				  -	      sta	SWCHA	; clock low
   2244  f1c6				  -	      rol	snes2atari0lo,x
   2245  f1c6				  -	      rol	snes2atari0hi,x
   2246  f1c6				  -	      lda	SWCHA
   2247  f1c6				  -	      and	SWCHA_INVDIRMASK,x	; preserve othr nibble
   2248  f1c6				  -	      sta	SWCHA	; latch and clock low
   2249  f1c6				  -	      dey		; next bit
   2250  f1c6				  -	      bne	SNES2ATARILOOP
   2251  f1c6				  -	      rol	INPT4,x	; 17th bit should be lo if controller is there.
   2252  f1c6				  -	      rol		; 17th snes bit into A low bit
   2253  f1c6				  -	      eor	snes2atari0lo,x	; 16th bit should be hi if controller is there.
   2254  f1c6				  -	      and	#1
   2255  f1c6				  -	      sta	snesdetected0,x
   2256  f1c6				  -	      beq	SNES_STOP_CLOCK	; if snes isn't detected, leave port in default state
   2257  f1c6				  -	      stx	snesport	; snesport keeps the index of the latest autodetected controller
   2258  f1c6				  -	      lda	SWCHA
   2259  f1c6				  -	      and	SWCHA_INVDIRMASK,x	; preserve othr nibble
   2260  f1c6				  -	      ora	SNES_CLOCK_PORT_BIT,x
   2261  f1c6				  -SNES_STOP_CLOCK
   2262  f1c6				  -	      sta	SWCHA	; clock low
   2263  f1c6				  -	      lda	CTLSWA
   2264  f1c6				  -	      and	SWCHA_INVDIRMASK,x	; preserve othr nibble
   2265  f1c6				  -	      ora	SNES_CLOCK_PORT_BIT,x
   2266  f1c6				  -	      sta	CTLSWA	; set port bits to input avoid conflict with other drivers
   2267  f1c6				  -	      rts
   2268  f1c6				  -SNES_ABORT
   2269  f1c6				  -	      sta	snesdetected0,x
   2270  f1c6				  -	      rts
   2271  f1c6				  -SNES2ATARI_SIGNAL
   2272  f1c6				  -			; signal to SNES2ATARI++ that we want SNES mode...
   2273  f1c6				  -	      lda	CTLSWA
   2274  f1c6				  -	      and	SWCHA_INVDIRMASK,x	; preserve othr nibble
   2275  f1c6				  -	      ora	SNES_CTLSWA_SIGNAL,x
   2276  f1c6				  -	      sta	CTLSWA
   2277  f1c6				  -	      lda	CTLSWA
   2278  f1c6				  -	      and	SWCHA_INVDIRMASK,x	; preserve othr nibble
   2279  f1c6				  -	      sta	SWCHA
   2280  f1c6				  -	      ldy	#0
   2281  f1c6				  -SNES_SIGNAL_LOOP
   2282  f1c6				  -	      dey
   2283  f1c6				  -	      bne	SNES_SIGNAL_LOOP
   2284  f1c6				  -	      lda	SWCHA
   2285  f1c6				  -	      ora	SWCHA_DIRMASK,x
   2286  f1c6				  -	      sta	SWCHA
   2287  f1c6				  -	      rts
   2288  f1c6					      endif
   2289  f1c6
   2290  f1c6				   gunbuttonhandler		; outside of the conditional, so our button handler LUT is valid
   2291  f1c6				  -	      ifconst	LIGHTGUNSUPPORT
   2292  f1c6				  -	      cpx	#0
   2293  f1c6				  -	      bne	secondportgunhandler
   2294  f1c6				  -firstportgunhandler
   2295  f1c6				  -	      lda	SWCHA
   2296  f1c6				  -	      asl
   2297  f1c6				  -	      asl
   2298  f1c6				  -	      asl		; shift D4 to D7
   2299  f1c6				  -	      and	#%10000000
   2300  f1c6				  -	      eor	#%10000000
   2301  f1c6				  -	      sta	sINPT1
   2302  f1c6				  -	      jmp	buttonreadloopreturn
   2303  f1c6				  -secondportgunhandler
   2304  f1c6				  -	      lda	SWCHA
   2305  f1c6				  -	      lsr		; shift D0 into carry
   2306  f1c6				  -	      lsr		; shift carry into D7
   2307  f1c6				  -	      and	#%10000000
   2308  f1c6				  -	      eor	#%10000000
   2309  f1c6				  -	      sta	sINPT3
   2310  f1c6				  -	      jmp	buttonreadloopreturn
   2311  f1c6					      endif		; LIGHTGUNSUPPORT
   2312  f1c6
   2313  f1c6				   controlsusing2buttoncode
   2314  f1c6		       00		      .byte.b	0	; 00=no controller plugged in
   2315  f1c7		       01		      .byte.b	1	; 01=proline joystick
   2316  f1c8		       00		      .byte.b	0	; 02=lightgun
   2317  f1c9		       00		      .byte.b	0	; 03=paddle
   2318  f1ca		       01		      .byte.b	1	; 04=trakball
   2319  f1cb		       01		      .byte.b	1	; 05=vcs joystick
   2320  f1cc		       01		      .byte.b	1	; 06=driving control
   2321  f1cd		       00		      .byte.b	0	; 07=keypad control
   2322  f1ce		       00		      .byte.b	0	; 08=st mouse/cx80
   2323  f1cf		       00		      .byte.b	0	; 09=amiga mouse
   2324  f1d0		       01		      .byte.b	1	; 10=atarivox
   2325  f1d1		       00		      .byte.b	0	; 11=snes2atari
   2326  f1d2
   2327  f1d2				   buttonhandlerhi
   2328  f1d2		       00		      .byte.b	0	; 00=no controller plugged in
   2329  f1d3		       f1		      .byte.b	>joybuttonhandler	; 01=proline joystick
   2330  f1d4		       f1		      .byte.b	>gunbuttonhandler	; 02=lightgun
   2331  f1d5		       f6		      .byte.b	>paddlebuttonhandler	; 03=paddle
   2332  f1d6		       f1		      .byte.b	>joybuttonhandler	; 04=trakball
   2333  f1d7		       f1		      .byte.b	>joybuttonhandler	; 05=vcs joystick
   2334  f1d8		       f1		      .byte.b	>joybuttonhandler	; 06=driving control
   2335  f1d9		       00		      .byte.b	0	; 07=keypad
   2336  f1da		       f6		      .byte.b	>mousebuttonhandler	; 08=st mouse
   2337  f1db		       f6		      .byte.b	>mousebuttonhandler	; 09=amiga mouse
   2338  f1dc		       f1		      .byte.b	>joybuttonhandler	; 10=atarivox
   2339  f1dd		       f1		      .byte.b	>snes2atarihandler	; 11=snes
   2340  f1de				   buttonhandlerlo
   2341  f1de		       00		      .byte.b	0	; 00=no controller plugged in
   2342  f1df		       8f		      .byte.b	<joybuttonhandler	; 01=proline joystick
   2343  f1e0		       c6		      .byte.b	<gunbuttonhandler	; 02=lightgun 
   2344  f1e1		       0d		      .byte.b	<paddlebuttonhandler	; 03=paddle
   2345  f1e2		       8f		      .byte.b	<joybuttonhandler	; 04=trakball
   2346  f1e3		       8f		      .byte.b	<joybuttonhandler	; 05=vcs joystick
   2347  f1e4		       8f		      .byte.b	<joybuttonhandler	; 06=driving control
   2348  f1e5		       00		      .byte.b	0	; 07=keypad
   2349  f1e6		       0d		      .byte.b	<mousebuttonhandler	; 08=st mouse
   2350  f1e7		       0d		      .byte.b	<mousebuttonhandler	; 09=amiga mouse
   2351  f1e8		       8f		      .byte.b	<joybuttonhandler	; 10=atarivox
   2352  f1e9		       c6		      .byte.b	<snes2atarihandler	; 11=snes
   2353  f1ea
   2354  f1ea				   drawwait
   2355  f1ea		       24 4d		      bit	visibleover	; 255 if screen is being drawn, 0 when not.
   2356  f1ec		       30 fc		      bmi	drawwait	; make sure the visible screen isn't being drawn
   2357  f1ee		       60		      rts
   2358  f1ef
   2359  f1ef				   drawoverwait
   2360  f1ef		       24 4d		      bit	visibleover	; 255 if screen is being drawn, 0 when not.
   2361  f1f1		       10 fc		      bpl	drawoverwait	; make sure the visible screen is being drawn
   2362  f1f3		       60		      rts
   2363  f1f4
   2364  f1f4
   2365  f1f4				   mutetia
   2366  f1f4		       a9 00		      lda	#0
   2367  f1f6		       a2 03		      ldx	#3
   2368  f1f8				   mutetialoop
   2369  f1f8		       95 4e		      sta	sfx1pointlo,x
   2370  f1fa		       95 17		      sta	AUDF0,x
   2371  f1fc		       ca		      dex
   2372  f1fd		       10 f9		      bpl	mutetialoop
   2373  f1ff		       60		      rts
   2374  f200
   2375  f200				   servicesfxchannelsdone
   2376  f200					      ifnconst	pokeysupport
   2377  f200		       60		      rts
   2378  f201				  -	      else
   2379  f201				  -	      jmp	checkpokeyplaying
   2380  f201					      endif
   2381  f201				   servicesfxchannels
   2382  f201		       a2 ff		      ldx	#255
   2383  f203				   servicesfxchannelsloop
   2384  f203		       e8		      inx
   2385  f204					      ifnconst	TIASFXMONO
   2386  f204		       e0 02		      cpx	#2
   2387  f206				  -	      else
   2388  f206				  -	      cpx	#1
   2389  f206					      endif
   2390  f206		       f0 f8		      beq	servicesfxchannelsdone
   2391  f208
   2392  f208		       a5 de		      lda	sfxschedulelock	; =1 if locked
   2393  f20a		       d0 f4		      bne	servicesfxchannelsdone	; exit if a pointer may be mid-way change
   2394  f20c
   2395  f20c		       b5 4e		      lda	sfx1pointlo,x
   2396  f20e		       85 dc		      sta	inttemp5
   2397  f210		       15 50		      ora	sfx1pointhi,x
   2398  f212		       f0 ef		      beq	servicesfxchannelsloop
   2399  f214		       b5 50		      lda	sfx1pointhi,x
   2400  f216		       85 dd		      sta	inttemp6
   2401  f218
   2402  f218		       b5 58		      lda	sfx1tick,x
   2403  f21a		       f0 05		      beq	servicesfx_cont1	; this chunk is over, load the next!
   2404  f21c		       d6 58		      dec	sfx1tick,x	; frame countdown is non-zero, subtract one
   2405  f21e		       4c 03 f2 	      jmp	servicesfxchannelsloop
   2406  f221				   servicesfx_cont1
   2407  f221
   2408  f221		       a0 01		      ldy	#1	; check to see if they're changing the frame countdown
   2409  f223		       b1 dc		      lda	(inttemp5),y
   2410  f225		       c9 10		      cmp	#$10
   2411  f227		       d0 1b		      bne	servicesfx_cont1a
   2412  f229		       a0 02		      ldy	#2
   2413  f22b		       b1 dc		      lda	(inttemp5),y
   2414  f22d		       95 56		      sta	sfx1frames,x	; change the frame countdown
   2415  f22f		       a9 00		      lda	#0
   2416  f231		       95 58		      sta	sfx1tick,x
   2417  f233							; advance the sound pointer by 3...
   2418  f233		       b5 4e		      lda	sfx1pointlo,x
   2419  f235		       18		      clc
   2420  f236		       69 03		      adc	#3
   2421  f238		       95 4e		      sta	sfx1pointlo,x
   2422  f23a		       b5 50		      lda	sfx1pointhi,x
   2423  f23c		       69 00		      adc	#0
   2424  f23e		       95 50		      sta	sfx1pointhi,x
   2425  f240							; and then fetch another sample for this channel...
   2426  f240		       ca		      dex
   2427  f241		       4c 03 f2 	      jmp	servicesfxchannelsloop
   2428  f244				   servicesfx_cont1a
   2429  f244
   2430  f244		       b5 56		      lda	sfx1frames,x	; set the frame countdown for this sound chunk
   2431  f246		       95 58		      sta	sfx1tick,x
   2432  f248
   2433  f248		       b5 52		      lda	sfx1priority,x	; decrease the sound's priority if its non-zero
   2434  f24a		       f0 02		      beq	servicesfx_cont2
   2435  f24c		       d6 52		      dec	sfx1priority,x
   2436  f24e				   servicesfx_cont2
   2437  f24e
   2438  f24e		       a0 00		      ldy	#0	; play the sound
   2439  f250		       b1 dc		      lda	(inttemp5),y
   2440  f252		       85 d8		      sta	inttemp1
   2441  f254
   2442  f254				  -	      ifconst	MUSICTRACKER
   2443  f254				  -	      lda	sfx1notedata,x
   2444  f254				  -	      beq	exitmusictracker	; exit if this isn't a pitched instrument
   2445  f254				  -	      ldy	#0
   2446  f254				  -	      sty	inttemp2
   2447  f254				  -	      clc
   2448  f254				  -	      adc	(inttemp5),y
   2449  f254				  -	      asl		; x2
   2450  f254				  -	      tay
   2451  f254				  -	      lda	tiatrackeroctavenotes,y
   2452  f254				  -	      sta	AUDC0,x
   2453  f254				  -	      iny
   2454  f254				  -	      lda	tiatrackeroctavenotes,y
   2455  f254				  -	      sta	AUDF0,x
   2456  f254				  -	      ldy	#1
   2457  f254				  -	      jmp	sfxvolumeentrypt
   2458  f254				  -exitmusictracker
   2459  f254				  -	      lda	inttemp1
   2460  f254					      endif		; MUSICTRACKER
   2461  f254
   2462  f254		       18		      clc
   2463  f255		       75 54		      adc	sfx1poffset,x	; take into account any pitch modification
   2464  f257		       95 17		      sta	AUDF0,x
   2465  f259		       c8		      iny
   2466  f25a		       b1 dc		      lda	(inttemp5),y
   2467  f25c		       95 15		      sta	AUDC0,x
   2468  f25e		       85 d9		      sta	inttemp2
   2469  f260		       c8		      iny
   2470  f261				   sfxvolumeentrypt
   2471  f261				  -	      ifconst	TIAVOLUME
   2472  f261				  -	      lda	tiavolume
   2473  f261				  -	      asl
   2474  f261				  -	      asl
   2475  f261				  -	      asl
   2476  f261				  -	      asl
   2477  f261				  -	      sta	fourbitfadevalueint
   2478  f261					      endif		; TIAVOLUME
   2479  f261		       b1 dc		      lda	(inttemp5),y
   2480  f263				  -	      ifconst	TIAVOLUME
   2481  f263				  -	      jsr	fourbitfadeint
   2482  f263					      endif		; TIAVOLUME
   2483  f263		       95 19		      sta	AUDV0,x
   2484  f265		       c9 10		      cmp	#$10
   2485  f267		       b0 19		      bcs	sfxsoundloop	; AUDV0>$0F means the sound is looped while priority is active
   2486  f269
   2487  f269		       05 d9		      ora	inttemp2
   2488  f26b		       05 d8		      ora	inttemp1	; check if F|C|V=0
   2489  f26d		       f0 23		      beq	zerosfx	; if so, we're at the end of the sound.
   2490  f26f
   2491  f26f				   advancesfxpointer
   2492  f26f							; advance the pointer to the next sound chunk
   2493  f26f		       c8		      iny
   2494  f270		       84 da		      sty	inttemp3
   2495  f272		       18		      clc
   2496  f273		       b5 4e		      lda	sfx1pointlo,x
   2497  f275		       65 da		      adc	inttemp3
   2498  f277		       95 4e		      sta	sfx1pointlo,x
   2499  f279		       b5 50		      lda	sfx1pointhi,x
   2500  f27b		       69 00		      adc	#0
   2501  f27d		       95 50		      sta	sfx1pointhi,x
   2502  f27f		       4c 03 f2 	      jmp	servicesfxchannelsloop
   2503  f282
   2504  f282				   sfxsoundloop
   2505  f282		       48		      pha
   2506  f283		       b5 52		      lda	sfx1priority,x
   2507  f285		       d0 04		      bne	sfxsoundloop_carryon
   2508  f287		       68		      pla		; fix the stack before we go
   2509  f288		       4c 6f f2 	      jmp	advancesfxpointer
   2510  f28b				   sfxsoundloop_carryon
   2511  f28b		       68		      pla
   2512  f28c		       29 f0		      and	#$F0
   2513  f28e		       4a		      lsr
   2514  f28f		       4a		      lsr
   2515  f290		       4a		      lsr
   2516  f291		       4a		      lsr
   2517  f292
   2518  f292				   zerosfx
   2519  f292		       95 4e		      sta	sfx1pointlo,x
   2520  f294		       95 50		      sta	sfx1pointhi,x
   2521  f296		       95 52		      sta	sfx1priority,x
   2522  f298		       4c 03 f2 	      jmp	servicesfxchannelsloop
   2523  f29b
   2524  f29b
   2525  f29b				   schedulesfx
   2526  f29b							; called with sfxinstrumentlo=<data sfxinstrumenthi=>data sfxpitchoffset=pitch-offset sfxnoteindex=note index
   2527  f29b		       a0 00		      ldy	#0
   2528  f29d		       b1 e0		      lda	(sfxinstrumentlo),y
   2529  f29f				  -	      ifconst	pokeysupport
   2530  f29f				  -	      cmp	#$20	; POKEY?
   2531  f29f				  -	      bne	scheduletiasfx
   2532  f29f				  -	      jmp	schedulepokeysfx
   2533  f29f					      endif
   2534  f29f				   scheduletiasfx
   2535  f29f							;cmp #$10 ; TIA?
   2536  f29f							;beq continuescheduletiasfx
   2537  f29f							; rts ; unhandled!!! 
   2538  f29f				   continuescheduletiasfx
   2539  f29f					      ifnconst	TIASFXMONO
   2540  f29f		       a5 4e		      lda	sfx1pointlo
   2541  f2a1		       05 50		      ora	sfx1pointhi
   2542  f2a3		       f0 13		      beq	schedulesfx1	;if channel 1 is idle, use it
   2543  f2a5		       a5 4f		      lda	sfx2pointlo
   2544  f2a7		       05 51		      ora	sfx2pointhi
   2545  f2a9		       f0 11		      beq	schedulesfx2	;if channel 2 is idle, use it
   2546  f2ab							; Both channels are scheduled. 
   2547  f2ab		       a0 01		      ldy	#1
   2548  f2ad		       b1 e0		      lda	(sfxinstrumentlo),y
   2549  f2af		       d0 01		      bne	interruptsfx
   2550  f2b1		       60		      rts		; the new sound has 0 priority and both channels are busy. Skip playing it.
   2551  f2b2				   interruptsfx
   2552  f2b2							;Compare which active sound has a lower priority. We'll interrupt the lower one.
   2553  f2b2		       a5 52		      lda	sfx1priority
   2554  f2b4		       c5 53		      cmp	sfx2priority
   2555  f2b6		       b0 04		      bcs	schedulesfx2
   2556  f2b8					      endif		; !TIASFXMONO
   2557  f2b8
   2558  f2b8				   schedulesfx1
   2559  f2b8		       a2 00		      ldx	#0	; channel 1
   2560  f2ba					      ifnconst	TIASFXMONO
   2561  f2ba		       f0 02		      beq	skipschedulesfx2
   2562  f2bc				   schedulesfx2
   2563  f2bc		       a2 01		      ldx	#1	; channel 2
   2564  f2be				   skipschedulesfx2
   2565  f2be					      endif		; !TIASFXMONO
   2566  f2be
   2567  f2be				  -	      ifconst	MUSICTRACKER
   2568  f2be				  -	      lda	sfxnoteindex
   2569  f2be				  -	      bpl	skipdrumkitoverride
   2570  f2be				  -	      and	#$7F	; subtract 128
   2571  f2be				  -	      sec
   2572  f2be				  -	      sbc	#4	; drums start at 132, i.e. octave 10
   2573  f2be				  -	      asl
   2574  f2be				  -	      tay
   2575  f2be				  -	      lda	tiadrumkitdefinition,y
   2576  f2be				  -	      sta	sfxinstrumentlo
   2577  f2be				  -	      iny
   2578  f2be				  -	      lda	tiadrumkitdefinition,y
   2579  f2be				  -	      sta	sfxinstrumenthi
   2580  f2be				  -	      lda	#0
   2581  f2be				  -	      sta	sfxnoteindex	; and tell the driver it's a non-pitched instrument
   2582  f2be				  -skipdrumkitoverride
   2583  f2be					      endif		; MUSICTRACKER
   2584  f2be		       a0 01		      ldy	#1	; get priority and sound-resolution (in frames)
   2585  f2c0		       b1 e0		      lda	(sfxinstrumentlo),y
   2586  f2c2		       95 52		      sta	sfx1priority,x
   2587  f2c4		       c8		      iny
   2588  f2c5		       b1 e0		      lda	(sfxinstrumentlo),y
   2589  f2c7		       95 56		      sta	sfx1frames,x
   2590  f2c9		       a5 e0		      lda	sfxinstrumentlo
   2591  f2cb		       18		      clc
   2592  f2cc		       69 03		      adc	#3
   2593  f2ce		       95 4e		      sta	sfx1pointlo,x
   2594  f2d0		       a5 e1		      lda	sfxinstrumenthi
   2595  f2d2		       69 00		      adc	#0
   2596  f2d4		       95 50		      sta	sfx1pointhi,x
   2597  f2d6		       a5 e2		      lda	sfxpitchoffset
   2598  f2d8		       95 54		      sta	sfx1poffset,x
   2599  f2da		       a9 00		      lda	#0
   2600  f2dc		       95 58		      sta	sfx1tick,x
   2601  f2de		       a5 e3		      lda	sfxnoteindex
   2602  f2e0		       95 cd		      sta	sfx1notedata,x
   2603  f2e2		       60		      rts
   2604  f2e3
   2605  f2e3				   plotsprite
   2606  f2e3					      ifnconst	NODRAWWAIT
   2607  f2e3					      ifconst	DOUBLEBUFFER
   2608  f2e3		       a5 d5		      lda	doublebufferstate
   2609  f2e5		       d0 04		      bne	skipplotspritewait
   2610  f2e7					      endif		; DOUBLEBUFFER
   2611  f2e7				  -	      ifconst	DEBUGWAITCOLOR
   2612  f2e7				  -	      lda	#$41
   2613  f2e7				  -	      sta	BACKGRND
   2614  f2e7					      endif
   2615  f2e7				   plotspritewait
   2616  f2e7		       a5 4d		      lda	visibleover
   2617  f2e9		       d0 fc		      bne	plotspritewait
   2618  f2eb				   skipplotspritewait
   2619  f2eb				  -	      ifconst	DEBUGWAITCOLOR
   2620  f2eb				  -	      lda	#$0
   2621  f2eb				  -	      sta	BACKGRND
   2622  f2eb					      endif
   2623  f2eb					      endif
   2624  f2eb
   2625  f2eb							;arguments: 
   2626  f2eb							; temp1=lo graphicdata 
   2627  f2eb							; temp2=hi graphicdata 
   2628  f2eb							; temp3=palette | width byte
   2629  f2eb							; temp4=x
   2630  f2eb							; temp5=y
   2631  f2eb							; temp6=mode
   2632  f2eb		       a5 46		      lda	temp5	;Y position
   2633  f2ed		       4a		      lsr		; 2 - Divide by 8 or 16
   2634  f2ee		       4a		      lsr		; 2
   2635  f2ef		       4a		      lsr		; 2
   2636  f2f0					      if	WZONEHEIGHT = 16
   2637  f2f0		       4a		      lsr		; 2
   2638  f2f1					      endif
   2639  f2f1
   2640  f2f1		       aa		      tax
   2641  f2f2
   2642  f2f2					      ifnconst	NOLIMITCHECKING
   2643  f2f2
   2644  f2f2							; the next block allows for vertical masking, and ensures we don't overwrite non-DL memory
   2645  f2f2
   2646  f2f2		       c9 0c		      cmp	#WZONECOUNT
   2647  f2f4
   2648  f2f4		       90 0a		      bcc	continueplotsprite1	; the sprite is fully on-screen, so carry on...
   2649  f2f6							; otherwise, check to see if the bottom half is in zone 0...
   2650  f2f6
   2651  f2f6					      if	WZONEHEIGHT = 16
   2652  f2f6		       c9 0f		      cmp	#15
   2653  f2f8				  -	      else
   2654  f2f8				  -	      cmp	#31
   2655  f2f8					      endif
   2656  f2f8
   2657  f2f8		       d0 05		      bne	exitplotsprite1
   2658  f2fa		       a2 00		      ldx	#0
   2659  f2fc		       4c 3a f3 	      jmp	continueplotsprite2
   2660  f2ff				   exitplotsprite1
   2661  f2ff		       60		      rts
   2662  f300
   2663  f300				   continueplotsprite1
   2664  f300					      endif
   2665  f300
   2666  f300		       bd d0 f6 	      lda	DLPOINTL,x	;Get pointer to DL that this sprite starts in
   2667  f303					      ifconst	DOUBLEBUFFER
   2668  f303		       18		      clc
   2669  f304		       65 d6		      adc	doublebufferdloffset
   2670  f306					      endif		; DOUBLEBUFFER
   2671  f306		       85 63		      sta	dlpnt
   2672  f308		       bd c4 f6 	      lda	DLPOINTH,x
   2673  f30b					      ifconst	DOUBLEBUFFER
   2674  f30b		       69 00		      adc	#0
   2675  f30d					      endif		; DOUBLEBUFFER
   2676  f30d		       85 64		      sta	dlpnt+1
   2677  f30f
   2678  f30f							;Create DL entry for upper part of sprite
   2679  f30f
   2680  f30f		       b4 65		      ldy	dlend,x	;Get the index to the end of this DL
   2681  f311
   2682  f311				  -	      ifconst	CHECKOVERWRITE
   2683  f311				  -	      cpy	#DLLASTOBJ
   2684  f311				  -	      beq	checkcontinueplotsprite2
   2685  f311				  -continueplotsprite1a
   2686  f311					      endif
   2687  f311
   2688  f311		       a5 42		      lda	temp1	; graphic data, lo byte
   2689  f313		       91 63		      sta	(dlpnt),y	;Low byte of data address
   2690  f315
   2691  f315					      ifnconst	ATOMICSPRITEUPDATE
   2692  f315		       c8		      iny
   2693  f316		       a5 47		      lda	temp6
   2694  f318		       91 63		      sta	(dlpnt),y
   2695  f31a				  -	      else
   2696  f31a				  -	      iny
   2697  f31a				  -	      sty	temp8
   2698  f31a					      endif
   2699  f31a
   2700  f31a		       c8		      iny
   2701  f31b
   2702  f31b		       a5 46		      lda	temp5	;Y position
   2703  f31d		       29 0f		      and	#(WZONEHEIGHT - 1)
   2704  f31f		       c9 01		      cmp	#1	; clear carry if our sprite is just in this zone
   2705  f321		       05 43		      ora	temp2	; graphic data, hi byte
   2706  f323		       91 63		      sta	(dlpnt),y
   2707  f325
   2708  f325
   2709  f325		       c8		      iny
   2710  f326		       a5 44		      lda	temp3	;palette|width
   2711  f328		       91 63		      sta	(dlpnt),y
   2712  f32a
   2713  f32a		       c8		      iny
   2714  f32b		       a5 45		      lda	temp4	;Horizontal position
   2715  f32d		       91 63		      sta	(dlpnt),y
   2716  f32f
   2717  f32f		       c8		      iny
   2718  f330		       94 65		      sty	dlend,x
   2719  f332
   2720  f332				  -	      ifconst	ALWAYSTERMINATE
   2721  f332				  -	      iny
   2722  f332				  -	      lda	#0
   2723  f332				  -	      sta	(dlpnt),y
   2724  f332					      endif
   2725  f332
   2726  f332				  -	      ifconst	ATOMICSPRITEUPDATE
   2727  f332				  -	      ldy	temp8
   2728  f332				  -	      lda	temp6
   2729  f332				  -	      sta	(dlpnt),y
   2730  f332					      endif
   2731  f332
   2732  f332				   checkcontinueplotsprite2
   2733  f332
   2734  f332		       90 38		      bcc	doneSPDL	;branch if the sprite was fully in the last zone
   2735  f334
   2736  f334							;Create DL entry for lower part of sprite
   2737  f334
   2738  f334		       e8		      inx		;Next region
   2739  f335
   2740  f335					      ifnconst	NOLIMITCHECKING
   2741  f335		       e0 0c		      cpx	#WZONECOUNT
   2742  f337
   2743  f337		       90 01		      bcc	continueplotsprite2	; the second half of the sprite is fully on-screen, so carry on...
   2744  f339		       60		      rts
   2745  f33a				   continueplotsprite2
   2746  f33a					      endif
   2747  f33a
   2748  f33a		       bd d0 f6 	      lda	DLPOINTL,x	;Get pointer to next DL
   2749  f33d					      ifconst	DOUBLEBUFFER
   2750  f33d		       18		      clc
   2751  f33e		       65 d6		      adc	doublebufferdloffset
   2752  f340					      endif		; DOUBLEBUFFER
   2753  f340		       85 63		      sta	dlpnt
   2754  f342		       bd c4 f6 	      lda	DLPOINTH,x
   2755  f345					      ifconst	DOUBLEBUFFER
   2756  f345		       69 00		      adc	#0
   2757  f347					      endif		; DOUBLEBUFFER
   2758  f347		       85 64		      sta	dlpnt+1
   2759  f349		       b4 65		      ldy	dlend,x	;Get the index to the end of this DL
   2760  f34b
   2761  f34b				  -	      ifconst	CHECKOVERWRITE
   2762  f34b				  -	      cpy	#DLLASTOBJ
   2763  f34b				  -	      bne	continueplotsprite2a
   2764  f34b				  -	      rts
   2765  f34b				  -continueplotsprite2a
   2766  f34b					      endif
   2767  f34b
   2768  f34b		       a5 42		      lda	temp1	; graphic data, lo byte
   2769  f34d		       91 63		      sta	(dlpnt),y
   2770  f34f
   2771  f34f					      ifnconst	ATOMICSPRITEUPDATE
   2772  f34f		       c8		      iny
   2773  f350		       a5 47		      lda	temp6
   2774  f352		       91 63		      sta	(dlpnt),y
   2775  f354				  -	      else
   2776  f354				  -	      iny
   2777  f354				  -	      sty	temp8
   2778  f354					      endif
   2779  f354
   2780  f354		       c8		      iny
   2781  f355
   2782  f355		       a5 46		      lda	temp5	;Y position
   2783  f357		       0b 0f		      anc	#(WZONEHEIGHT - 1)	; undocumented. A=A&IMM, then move bit 7 into carry
   2784  f359		       05 43		      ora	temp2	; graphic data, hi byte
   2785  f35b		       e9 0f		      sbc	#(WZONEHEIGHT-1)	; start at the DMA hole. -1 because carry is clear
   2786  f35d		       91 63		      sta	(dlpnt),y
   2787  f35f
   2788  f35f		       c8		      iny
   2789  f360
   2790  f360		       a5 44		      lda	temp3	;palette|width
   2791  f362		       91 63		      sta	(dlpnt),y
   2792  f364
   2793  f364		       c8		      iny
   2794  f365
   2795  f365		       a5 45		      lda	temp4	;Horizontal position
   2796  f367		       91 63		      sta	(dlpnt),y
   2797  f369
   2798  f369		       c8		      iny
   2799  f36a		       94 65		      sty	dlend,x
   2800  f36c
   2801  f36c				  -	      ifconst	ALWAYSTERMINATE
   2802  f36c				  -	      iny
   2803  f36c				  -	      lda	#0
   2804  f36c				  -	      sta	(dlpnt),y
   2805  f36c					      endif
   2806  f36c
   2807  f36c				  -	      ifconst	ATOMICSPRITEUPDATE
   2808  f36c				  -	      ldy	temp8
   2809  f36c				  -	      lda	temp6
   2810  f36c				  -	      sta	(dlpnt),y
   2811  f36c					      endif
   2812  f36c
   2813  f36c				   doneSPDL
   2814  f36c		       60		      rts
   2815  f36d
   2816  f36d
   2817  f36d				   lockzonex
   2818  f36d				  -	      ifconst	ZONELOCKS
   2819  f36d				  -	      ldy	dlend,x
   2820  f36d				  -	      cpy	#DLLASTOBJ
   2821  f36d				  -	      beq	lockzonexreturn	; the zone is either stuffed or locked. abort!
   2822  f36d				  -	      lda	DLPOINTL,x
   2823  f36d				  -	      ifconst	DOUBLEBUFFER
   2824  f36d				  -	      clc
   2825  f36d				  -	      adc	doublebufferdloffset
   2826  f36d				  -	      endif		; DOUBLEBUFFER
   2827  f36d				  -	      sta	dlpnt
   2828  f36d				  -	      lda	DLPOINTH,x
   2829  f36d				  -	      ifconst	DOUBLEBUFFER
   2830  f36d				  -	      adc	#0
   2831  f36d				  -	      endif		; DOUBLEBUFFER
   2832  f36d				  -	      sta	dlpnt+1
   2833  f36d				  -	      iny
   2834  f36d				  -	      lda	#0
   2835  f36d				  -	      sta	(dlpnt),y
   2836  f36d				  -	      dey
   2837  f36d				  -	      tya
   2838  f36d				  -	      ldy	#(DLLASTOBJ-1)
   2839  f36d				  -	      sta	(dlpnt),y
   2840  f36d				  -	      iny
   2841  f36d				  -	      sty	dlend,x
   2842  f36d				  -lockzonexreturn
   2843  f36d				  -	      rts
   2844  f36d					      endif		; ZONELOCKS
   2845  f36d				   unlockzonex
   2846  f36d				  -	      ifconst	ZONELOCKS
   2847  f36d				  -	      ldy	dlend,x
   2848  f36d				  -	      cpy	#DLLASTOBJ
   2849  f36d				  -	      bne	unlockzonexreturn	; if the zone isn't stuffed, it's not locked. abort!
   2850  f36d				  -	      lda	DLPOINTL,x
   2851  f36d				  -	      ifconst	DOUBLEBUFFER
   2852  f36d				  -	      clc
   2853  f36d				  -	      adc	doublebufferdloffset
   2854  f36d				  -	      endif		; DOUBLEBUFFER
   2855  f36d				  -	      sta	dlpnt
   2856  f36d				  -	      lda	DLPOINTH,x
   2857  f36d				  -	      ifconst	DOUBLEBUFFER
   2858  f36d				  -	      adc	#0
   2859  f36d				  -	      endif		; DOUBLEBUFFER
   2860  f36d				  -	      sta	dlpnt+1
   2861  f36d				  -	      dey
   2862  f36d				  -			;ldy #(DLLASTOBJ-1)
   2863  f36d				  -	      lda	(dlpnt),y
   2864  f36d				  -	      tay
   2865  f36d				  -	      sty	dlend,x
   2866  f36d				  -unlockzonexreturn
   2867  f36d					      endif		; ZONELOCKS
   2868  f36d		       60		      rts
   2869  f36e
   2870  f36e				   plotcharloop
   2871  f36e							; ** read from a data indirectly pointed to from temp8,temp9
   2872  f36e							; ** format is: lo_data, hi_data, palette|width, x, y
   2873  f36e							; ** format ends with lo_data | hi_data = 0
   2874  f36e
   2875  f36e					      ifconst	DOUBLEBUFFER
   2876  f36e		       a5 d5		      lda	doublebufferstate
   2877  f370		       d0 04		      bne	skipplotcharloopwait
   2878  f372					      endif		; DOUBLEBUFFER
   2879  f372				  -	      ifconst	DEBUGWAITCOLOR
   2880  f372				  -	      lda	#$61
   2881  f372				  -	      sta	BACKGRND
   2882  f372					      endif
   2883  f372				   plotcharloopwait
   2884  f372		       a5 4d		      lda	visibleover
   2885  f374		       d0 fc		      bne	plotcharloopwait
   2886  f376				  -	      ifconst	DEBUGWAITCOLOR
   2887  f376				  -	      lda	#0
   2888  f376				  -	      sta	BACKGRND
   2889  f376					      endif
   2890  f376				   skipplotcharloopwait
   2891  f376				   plotcharlooploop
   2892  f376		       a0 00		      ldy	#0
   2893  f378		       b1 49		      lda	(temp8),y
   2894  f37a		       85 42		      sta	temp1
   2895  f37c		       c8		      iny
   2896  f37d		       b1 49		      lda	(temp8),y
   2897  f37f		       85 43		      sta	temp2
   2898  f381		       05 42		      ora	temp1
   2899  f383		       d0 01		      bne	plotcharloopcontinue
   2900  f385							;the pointer=0, so return
   2901  f385		       60		      rts
   2902  f386				   plotcharloopcontinue
   2903  f386		       c8		      iny
   2904  f387		       b1 49		      lda	(temp8),y
   2905  f389		       85 44		      sta	temp3
   2906  f38b		       c8		      iny
   2907  f38c		       b1 49		      lda	(temp8),y
   2908  f38e		       85 45		      sta	temp4
   2909  f390		       c8		      iny
   2910  f391		       b1 49		      lda	(temp8),y
   2911  f393							;sta temp5 ; not needed with our late entry.
   2912  f393		       20 b0 f3 	      jsr	plotcharactersskipentry
   2913  f396		       a5 49		      lda	temp8
   2914  f398		       18		      clc
   2915  f399		       69 05		      adc	#5
   2916  f39b		       85 49		      sta	temp8
   2917  f39d		       a5 4a		      lda	temp9
   2918  f39f		       69 00		      adc	#0
   2919  f3a1		       85 4a		      sta	temp9
   2920  f3a3		       4c 76 f3 	      jmp	plotcharlooploop
   2921  f3a6
   2922  f3a6				   plotcharacters
   2923  f3a6					      ifconst	DOUBLEBUFFER
   2924  f3a6		       a5 d5		      lda	doublebufferstate
   2925  f3a8		       d0 04		      bne	skipplotcharacterswait
   2926  f3aa					      endif		; DOUBLEBUFFER
   2927  f3aa				  -	      ifconst	DEBUGWAITCOLOR
   2928  f3aa				  -	      lda	#$41
   2929  f3aa				  -	      sta	BACKGRND
   2930  f3aa					      endif
   2931  f3aa				   plotcharacterswait
   2932  f3aa		       a5 4d		      lda	visibleover
   2933  f3ac		       d0 fc		      bne	plotcharacterswait
   2934  f3ae				  -	      ifconst	DEBUGWAITCOLOR
   2935  f3ae				  -	      sta	BACKGRND
   2936  f3ae					      endif
   2937  f3ae				   skipplotcharacterswait
   2938  f3ae							;arguments: 
   2939  f3ae							; temp1=lo charactermap
   2940  f3ae							; temp2=hi charactermap
   2941  f3ae							; temp3=palette | width byte
   2942  f3ae							; temp4=x
   2943  f3ae							; temp5=y
   2944  f3ae
   2945  f3ae		       a5 46		      lda	temp5	;Y position
   2946  f3b0
   2947  f3b0				   plotcharactersskipentry
   2948  f3b0
   2949  f3b0							;ifconst ZONEHEIGHT
   2950  f3b0							; if ZONEHEIGHT = 16
   2951  f3b0							; and #$0F
   2952  f3b0							; endif
   2953  f3b0							; if ZONEHEIGHT = 8
   2954  f3b0							; and #$1F
   2955  f3b0							; endif
   2956  f3b0							;else
   2957  f3b0							; and #$0F
   2958  f3b0							;endif
   2959  f3b0
   2960  f3b0		       aa		      tax
   2961  f3b1		       bd d0 f6 	      lda	DLPOINTL,x	;Get pointer to DL that the characters are in
   2962  f3b4					      ifconst	DOUBLEBUFFER
   2963  f3b4		       18		      clc
   2964  f3b5		       65 d6		      adc	doublebufferdloffset
   2965  f3b7					      endif		; DOUBLEBUFFER
   2966  f3b7		       85 63		      sta	dlpnt
   2967  f3b9		       bd c4 f6 	      lda	DLPOINTH,x
   2968  f3bc					      ifconst	DOUBLEBUFFER
   2969  f3bc		       69 00		      adc	#0
   2970  f3be					      endif		; DOUBLEBUFFER
   2971  f3be		       85 64		      sta	dlpnt+1
   2972  f3c0
   2973  f3c0							;Create DL entry for the characters
   2974  f3c0
   2975  f3c0		       b4 65		      ldy	dlend,x	;Get the index to the end of this DL
   2976  f3c2
   2977  f3c2				  -	      ifconst	CHECKOVERWRITE
   2978  f3c2				  -	      cpy	#DLLASTOBJ
   2979  f3c2				  -	      bne	continueplotcharacters
   2980  f3c2				  -	      rts
   2981  f3c2				  -continueplotcharacters
   2982  f3c2					      endif
   2983  f3c2
   2984  f3c2		       a5 42		      lda	temp1	; character map data, lo byte
   2985  f3c4		       91 63		      sta	(dlpnt),y	;(1) store low address
   2986  f3c6
   2987  f3c6		       c8		      iny
   2988  f3c7		       ad 06 21 	      lda	charactermode
   2989  f3ca		       91 63		      sta	(dlpnt),y	;(2) store mode
   2990  f3cc
   2991  f3cc		       c8		      iny
   2992  f3cd		       a5 43		      lda	temp2	; character map, hi byte
   2993  f3cf		       91 63		      sta	(dlpnt),y	;(3) store high address
   2994  f3d1
   2995  f3d1		       c8		      iny
   2996  f3d2		       a5 44		      lda	temp3	;palette|width
   2997  f3d4		       91 63		      sta	(dlpnt),y	;(4) store palette|width
   2998  f3d6
   2999  f3d6		       c8		      iny
   3000  f3d7		       a5 45		      lda	temp4	;Horizontal position
   3001  f3d9		       91 63		      sta	(dlpnt),y	;(5) store horizontal position
   3002  f3db
   3003  f3db		       c8		      iny
   3004  f3dc		       94 65		      sty	dlend,x	; save display list end byte
   3005  f3de		       60		      rts
   3006  f3df
   3007  f3df
   3008  f3df					      ifconst	plotvalueonscreen
   3009  f3df				   plotcharacterslive
   3010  f3df							; a version of plotcharacters that draws live and minimally disrupts the screen...
   3011  f3df
   3012  f3df							;arguments: 
   3013  f3df							; temp1=lo charactermap
   3014  f3df							; temp2=hi charactermap
   3015  f3df							; temp3=palette | width byte
   3016  f3df							; temp4=x
   3017  f3df							; temp5=y
   3018  f3df
   3019  f3df		       a5 46		      lda	temp5	;Y position
   3020  f3e1
   3021  f3e1		       aa		      tax
   3022  f3e2		       bd d0 f6 	      lda	DLPOINTL,x	;Get pointer to DL that the characters are in
   3023  f3e5					      ifconst	DOUBLEBUFFER
   3024  f3e5		       18		      clc
   3025  f3e6		       65 d6		      adc	doublebufferdloffset
   3026  f3e8					      endif		; DOUBLEBUFFER
   3027  f3e8		       85 63		      sta	dlpnt
   3028  f3ea		       bd c4 f6 	      lda	DLPOINTH,x
   3029  f3ed					      ifconst	DOUBLEBUFFER
   3030  f3ed		       69 00		      adc	#0
   3031  f3ef					      endif		; DOUBLEBUFFER
   3032  f3ef		       85 64		      sta	dlpnt+1
   3033  f3f1
   3034  f3f1							;Create DL entry for the characters
   3035  f3f1
   3036  f3f1		       b4 65		      ldy	dlend,x	;Get the index to the end of this DL
   3037  f3f3
   3038  f3f3				  -	      ifconst	CHECKOVERWRITE
   3039  f3f3				  -	      cpy	#DLLASTOBJ
   3040  f3f3				  -	      bne	continueplotcharacterslive
   3041  f3f3				  -	      rts
   3042  f3f3				  -continueplotcharacterslive
   3043  f3f3					      endif
   3044  f3f3
   3045  f3f3		       a5 42		      lda	temp1	; character map data, lo byte
   3046  f3f5		       91 63		      sta	(dlpnt),y	;(1) store low address
   3047  f3f7
   3048  f3f7		       c8		      iny
   3049  f3f8							; we don't add the second byte yet, since the charmap could briefly
   3050  f3f8							; render without a proper character map address, width, or position.
   3051  f3f8		       ad 06 21 	      lda	charactermode
   3052  f3fb		       91 63		      sta	(dlpnt),y	;(2) store mode
   3053  f3fd
   3054  f3fd		       c8		      iny
   3055  f3fe		       a5 43		      lda	temp2	; character map, hi byte
   3056  f400		       91 63		      sta	(dlpnt),y	;(3) store high address
   3057  f402
   3058  f402		       c8		      iny
   3059  f403		       a5 44		      lda	temp3	;palette|width
   3060  f405		       91 63		      sta	(dlpnt),y	;(4) store palette|width
   3061  f407
   3062  f407		       c8		      iny
   3063  f408		       a5 45		      lda	temp4	;Horizontal position
   3064  f40a		       91 63		      sta	(dlpnt),y	;(5) store horizontal position
   3065  f40c
   3066  f40c		       c8		      iny
   3067  f40d		       94 65		      sty	dlend,x	; save display list end byte
   3068  f40f
   3069  f40f		       60		      rts
   3070  f410					      endif		;plotcharacterslive
   3071  f410
   3072  f410				  -	      ifconst	USED_PLOTVALUE
   3073  f410				  -plotvalue
   3074  f410				  -			; calling 7800basic command:
   3075  f410				  -			; plotvalue digit_gfx palette variable/data number_of_digits screen_x screen_y
   3076  f410				  -			; ...displays the variable as BCD digits
   3077  f410				  -			;
   3078  f410				  -			; asm sub arguments: 
   3079  f410				  -			; temp1=lo charactermap
   3080  f410				  -			; temp2=hi charactermap
   3081  f410				  -			; temp3=palette | width byte
   3082  f410				  -			; temp4=x
   3083  f410				  -			; temp5=y
   3084  f410				  -			; temp6=number of digits
   3085  f410				  -			; temp7=lo variable
   3086  f410				  -			; temp8=hi variable
   3087  f410				  -			; temp9=character mode
   3088  f410				  -
   3089  f410				  -plotdigitcount =	temp6
   3090  f410				  -
   3091  f410				  -	      ifconst	ZONELOCKS
   3092  f410				  -	      ldx	temp5
   3093  f410				  -	      ldy	dlend,x
   3094  f410				  -	      cpy	#DLLASTOBJ
   3095  f410				  -	      bne	carryonplotvalue
   3096  f410				  -	      rts
   3097  f410				  -carryonplotvalue
   3098  f410				  -	      endif
   3099  f410				  -
   3100  f410				  -	      lda	#0
   3101  f410				  -	      tay
   3102  f410				  -	      ldx	valbufend
   3103  f410				  -
   3104  f410				  -	      lda	plotdigitcount
   3105  f410				  -	      and	#1
   3106  f410				  -	      beq	pvnibble2char
   3107  f410				  -	      lda	#0
   3108  f410				  -	      sta	VALBUFFER,x	; just in case we skip this digit
   3109  f410				  -	      beq	pvnibble2char_skipnibble
   3110  f410				  -
   3111  f410				  -pvnibble2char
   3112  f410				  -			; high nibble...
   3113  f410				  -	      lda	(temp7),y
   3114  f410				  -	      and	#$f0
   3115  f410				  -	      lsr
   3116  f410				  -	      lsr
   3117  f410				  -	      lsr
   3118  f410				  -	      ifnconst	DOUBLEWIDE	; multiply value by 2 for double-width
   3119  f410				  -	      lsr
   3120  f410				  -	      endif
   3121  f410				  -
   3122  f410				  -	      clc
   3123  f410				  -	      adc	temp1	; add the offset to character graphics to our value
   3124  f410				  -	      sta	VALBUFFER,x
   3125  f410				  -	      inx
   3126  f410				  -	      dec	plotdigitcount
   3127  f410				  -
   3128  f410				  -pvnibble2char_skipnibble
   3129  f410				  -			; low nibble...
   3130  f410				  -	      lda	(temp7),y
   3131  f410				  -	      and	#$0f
   3132  f410				  -	      ifconst	DOUBLEWIDE	; multiply value by 2 for double-width
   3133  f410				  -	      asl
   3134  f410				  -	      endif
   3135  f410				  -	      clc
   3136  f410				  -	      adc	temp1	; add the offset to character graphics to our value
   3137  f410				  -	      sta	VALBUFFER,x
   3138  f410				  -	      inx
   3139  f410				  -	      iny
   3140  f410				  -
   3141  f410				  -	      dec	plotdigitcount
   3142  f410				  -	      bne	pvnibble2char
   3143  f410				  -
   3144  f410				  -			;point to the start of our valuebuffer
   3145  f410				  -	      clc
   3146  f410				  -	      lda	#<VALBUFFER
   3147  f410				  -	      adc	valbufend
   3148  f410				  -	      sta	temp1
   3149  f410				  -	      lda	#>VALBUFFER
   3150  f410				  -	      adc	#0
   3151  f410				  -	      sta	temp2
   3152  f410				  -
   3153  f410				  -			;advance valbufend to the end of our value buffer
   3154  f410				  -	      stx	valbufend
   3155  f410				  -
   3156  f410				  -	      ifnconst	plotvalueonscreen
   3157  f410				  -	      jmp	plotcharacters
   3158  f410				  -	      else
   3159  f410				  -	      jmp	plotcharacterslive
   3160  f410				  -	      endif
   3161  f410				  -
   3162  f410					      endif		; USED_PLOTVALUE
   3163  f410
   3164  f410
   3165  f410				  -	      ifconst	USED_PLOTVALUEEXTRA
   3166  f410				  -plotdigitcount =	temp6
   3167  f410				  -plotvalueextra
   3168  f410				  -			; calling 7800basic command:
   3169  f410				  -			; plotvalue digit_gfx palette variable/data number_of_digits screen_x screen_y
   3170  f410				  -			; ...displays the variable as BCD digits
   3171  f410				  -			;
   3172  f410				  -			; asm sub arguments: 
   3173  f410				  -			; temp1=lo charactermap
   3174  f410				  -			; temp2=hi charactermap
   3175  f410				  -			; temp3=palette | width byte
   3176  f410				  -			; temp4=x
   3177  f410				  -			; temp5=y
   3178  f410				  -			; temp6=number of digits
   3179  f410				  -			; temp7=lo variable
   3180  f410				  -			; temp8=hi variable
   3181  f410				  -
   3182  f410				  -	      lda	#0
   3183  f410				  -	      tay
   3184  f410				  -	      ldx	valbufend
   3185  f410				  -	      ifnconst	plotvalueonscreen
   3186  f410				  -	      sta	VALBUFFER,x
   3187  f410				  -	      endif
   3188  f410				  -
   3189  f410				  -	      lda	plotdigitcount
   3190  f410				  -	      and	#1
   3191  f410				  -
   3192  f410				  -	      bne	pvnibble2char_skipnibbleextra
   3193  f410				  -
   3194  f410				  -pvnibble2charextra
   3195  f410				  -			; high nibble...
   3196  f410				  -	      lda	(temp7),y
   3197  f410				  -	      and	#$f0
   3198  f410				  -	      lsr
   3199  f410				  -	      lsr
   3200  f410				  -	      ifnconst	DOUBLEWIDE	; multiply value by 2 for double-width
   3201  f410				  -	      lsr
   3202  f410				  -	      endif
   3203  f410				  -	      clc
   3204  f410				  -	      adc	temp1	; add the offset to character graphics to our value
   3205  f410				  -	      sta	VALBUFFER,x
   3206  f410				  -	      inx
   3207  f410				  -
   3208  f410				  -			; second half of the digit
   3209  f410				  -	      clc
   3210  f410				  -	      adc	#1
   3211  f410				  -	      sta	VALBUFFER,x
   3212  f410				  -	      inx
   3213  f410				  -
   3214  f410				  -pvnibble2char_skipnibbleextra
   3215  f410				  -			; low nibble...
   3216  f410				  -	      lda	(temp7),y
   3217  f410				  -	      and	#$0f
   3218  f410				  -	      ifconst	DOUBLEWIDE	; multiply value by 2 for double-width
   3219  f410				  -	      asl
   3220  f410				  -	      endif
   3221  f410				  -	      asl
   3222  f410				  -
   3223  f410				  -	      clc
   3224  f410				  -	      adc	temp1	; add the offset to character graphics to our value
   3225  f410				  -	      sta	VALBUFFER,x
   3226  f410				  -	      inx
   3227  f410				  -
   3228  f410				  -	      clc
   3229  f410				  -	      adc	#1
   3230  f410				  -	      sta	VALBUFFER,x
   3231  f410				  -	      inx
   3232  f410				  -	      iny
   3233  f410				  -
   3234  f410				  -	      dec	plotdigitcount
   3235  f410				  -	      bne	pvnibble2charextra
   3236  f410				  -
   3237  f410				  -			;point to the start of our valuebuffer
   3238  f410				  -	      clc
   3239  f410				  -	      lda	#<VALBUFFER
   3240  f410				  -	      adc	valbufend
   3241  f410				  -	      sta	temp1
   3242  f410				  -	      lda	#>VALBUFFER
   3243  f410				  -	      adc	#0
   3244  f410				  -	      sta	temp2
   3245  f410				  -
   3246  f410				  -			;advance valbufend to the end of our value buffer
   3247  f410				  -	      stx	valbufend
   3248  f410				  -
   3249  f410				  -	      ifnconst	plotvalueonscreen
   3250  f410				  -	      jmp	plotcharacters
   3251  f410				  -	      else
   3252  f410				  -	      jmp	plotcharacterslive
   3253  f410				  -	      endif
   3254  f410					      endif		; USED_PLOTVALUEEXTRA
   3255  f410
   3256  f410				   boxcollision
   3257  f410				  -	      ifconst	BOXCOLLISION
   3258  f410				  -			; the worst case cycle-time for the code below is 43 cycles.
   3259  f410				  -			; unfortunately, prior to getting here we've burned 44 cycles in argument setup. eep!
   3260  f410				  -
   3261  f410				  -			;__boxx1 = accumulator
   3262  f410				  -			;__boxy1 = y
   3263  f410				  -__boxw1    =	temp3
   3264  f410				  -__boxh1    =	temp4
   3265  f410				  -
   3266  f410				  -__boxx2    =	temp5
   3267  f410				  -__boxy2    =	temp6
   3268  f410				  -__boxw2    =	temp7
   3269  f410				  -__boxh2    =	temp8
   3270  f410				  -
   3271  f410				  -DoXCollisionCheck
   3272  f410				  -			;lda __boxx1 ; skipped. already in the accumulator
   3273  f410				  -	      cmp	__boxx2	;3
   3274  f410				  -	      bcs	X1isbiggerthanX2	;2/3
   3275  f410				  -X2isbiggerthanX1
   3276  f410				  -			; carry is clear
   3277  f410				  -	      adc	__boxw1	;3
   3278  f410				  -	      cmp	__boxx2	;3
   3279  f410				  -	      bcs	DoYCollisionCheck	;3/2
   3280  f410				  -	      rts		;6 - carry clear, no collision
   3281  f410				  -X1isbiggerthanX2
   3282  f410				  -	      clc		;2
   3283  f410				  -	      sbc	__boxw2	;3
   3284  f410				  -	      cmp	__boxx2	;3
   3285  f410				  -	      bcs	noboxcollision	;3/2
   3286  f410				  -DoYCollisionCheck
   3287  f410				  -	      tya		; 2 ; use to be "lda __boxy1"
   3288  f410				  -	      cmp	__boxy2	;3
   3289  f410				  -	      bcs	Y1isbiggerthanY2	;3/2
   3290  f410				  -Y2isbiggerthanY1
   3291  f410				  -			; carry is clear
   3292  f410				  -	      adc	__boxh1	;3
   3293  f410				  -	      cmp	__boxy2	;3
   3294  f410				  -	      rts		;6 
   3295  f410				  -Y1isbiggerthanY2
   3296  f410				  -	      clc		;2
   3297  f410				  -	      sbc	__boxh2	;3
   3298  f410				  -	      cmp	__boxy2	;3
   3299  f410				  -	      bcs	noboxcollision	;3/2
   3300  f410				  -yesboxcollision
   3301  f410				  -	      sec		;2
   3302  f410				  -	      rts		;6
   3303  f410				  -noboxcollision
   3304  f410				  -	      clc		;2
   3305  f410				  -	      rts		;6
   3306  f410					      endif		; BOXCOLLISION
   3307  f410
   3308  f410				   randomize
   3309  f410		       a5 40		      lda	rand
   3310  f412		       4a		      lsr
   3311  f413		       26 41		      rol	rand16
   3312  f415		       90 02		      bcc	noeor
   3313  f417		       49 b4		      eor	#$B4
   3314  f419				   noeor
   3315  f419		       85 40		      sta	rand
   3316  f41b		       45 41		      eor	rand16
   3317  f41d		       60		      rts
   3318  f41e
   3319  f41e							; *** bcd conversion routine courtesy Omegamatrix
   3320  f41e							; *** http://atariage.com/forums/blog/563/entry-10832-hex-to-bcd-conversion-0-99/
   3321  f41e				   converttobcd
   3322  f41e							;value to convert is in the accumulator
   3323  f41e		       85 42		      sta	temp1
   3324  f420		       4a		      lsr
   3325  f421		       65 42		      adc	temp1
   3326  f423		       6a		      ror
   3327  f424		       4a		      lsr
   3328  f425		       4a		      lsr
   3329  f426		       65 42		      adc	temp1
   3330  f428		       6a		      ror
   3331  f429		       65 42		      adc	temp1
   3332  f42b		       6a		      ror
   3333  f42c		       4a		      lsr
   3334  f42d		       29 3c		      and	#$3C
   3335  f42f		       85 43		      sta	temp2
   3336  f431		       4a		      lsr
   3337  f432		       65 43		      adc	temp2
   3338  f434		       65 42		      adc	temp1
   3339  f436		       60		      rts		; return the result in the accumulator
   3340  f437
   3341  f437							; Y and A contain multiplicands, result in A
   3342  f437				   mul8
   3343  f437		       84 42		      sty	temp1
   3344  f439		       85 43		      sta	temp2
   3345  f43b		       a9 00		      lda	#0
   3346  f43d				   reptmul8
   3347  f43d		       46 43		      lsr	temp2
   3348  f43f		       90 03		      bcc	skipmul8
   3349  f441		       18		      clc
   3350  f442		       65 42		      adc	temp1
   3351  f444							;bcs donemul8 might save cycles?
   3352  f444				   skipmul8
   3353  f444							;beq donemul8 might save cycles?
   3354  f444		       06 42		      asl	temp1
   3355  f446		       d0 f5		      bne	reptmul8
   3356  f448				   donemul8
   3357  f448		       60		      rts
   3358  f449
   3359  f449				   div8
   3360  f449							; A=numerator Y=denominator, result in A
   3361  f449		       c0 02		      cpy	#2
   3362  f44b		       90 0a		      bcc	div8end+1	;div by 0 = bad, div by 1=no calc needed, so bail out
   3363  f44d		       84 42		      sty	temp1
   3364  f44f		       a0 ff		      ldy	#$ff
   3365  f451				   div8loop
   3366  f451		       e5 42		      sbc	temp1
   3367  f453		       c8		      iny
   3368  f454		       b0 fb		      bcs	div8loop
   3369  f456				   div8end
   3370  f456		       98		      tya
   3371  f457							; result in A
   3372  f457		       60		      rts
   3373  f458
   3374  f458							; Y and A contain multiplicands, result in temp2,A=low, temp1=high
   3375  f458				   mul16
   3376  f458		       84 42		      sty	temp1
   3377  f45a		       85 43		      sta	temp2
   3378  f45c
   3379  f45c		       a9 00		      lda	#0
   3380  f45e		       a2 08		      ldx	#8
   3381  f460		       46 42		      lsr	temp1
   3382  f462				   mul16_1
   3383  f462		       90 03		      bcc	mul16_2
   3384  f464		       18		      clc
   3385  f465		       65 43		      adc	temp2
   3386  f467				   mul16_2
   3387  f467		       6a		      ror
   3388  f468		       66 42		      ror	temp1
   3389  f46a		       ca		      dex
   3390  f46b		       d0 f5		      bne	mul16_1
   3391  f46d		       85 43		      sta	temp2
   3392  f46f		       60		      rts
   3393  f470
   3394  f470							; div int/int
   3395  f470							; numerator in A, denom in temp1
   3396  f470							; returns with quotient in A, remainder in temp1
   3397  f470				   div16
   3398  f470		       85 43		      sta	temp2
   3399  f472		       84 42		      sty	temp1
   3400  f474		       a9 00		      lda	#0
   3401  f476		       a2 08		      ldx	#8
   3402  f478		       06 43		      asl	temp2
   3403  f47a				   div16_1
   3404  f47a		       2a		      rol
   3405  f47b		       c5 42		      cmp	temp1
   3406  f47d		       90 02		      bcc	div16_2
   3407  f47f		       e5 42		      sbc	temp1
   3408  f481				   div16_2
   3409  f481		       26 43		      rol	temp2
   3410  f483		       ca		      dex
   3411  f484		       d0 f4		      bne	div16_1
   3412  f486		       85 42		      sta	temp1
   3413  f488		       a5 43		      lda	temp2
   3414  f48a		       60		      rts
   3415  f48b
   3416  f48b				  -	      ifconst	bankswitchmode
   3417  f48b				  -BS_jsr
   3418  f48b				  -	      ifconst	dumpbankswitch
   3419  f48b				  -	      sta	dumpbankswitch
   3420  f48b				  -	      endif
   3421  f48b				  -	      ifconst	MCPDEVCART
   3422  f48b				  -	      ora	#$18
   3423  f48b				  -	      sta	$3000
   3424  f48b				  -	      else
   3425  f48b				  -	      sta	$8000
   3426  f48b				  -	      endif
   3427  f48b				  -	      pla
   3428  f48b				  -	      tax
   3429  f48b				  -	      pla
   3430  f48b				  -	      rts
   3431  f48b				  -
   3432  f48b				  -BS_return
   3433  f48b				  -	      pla		; bankswitch bank
   3434  f48b				  -	      ifconst	dumpbankswitch
   3435  f48b				  -	      sta	dumpbankswitch
   3436  f48b				  -	      endif
   3437  f48b				  -	      ifconst	BANKRAM
   3438  f48b				  -	      sta	currentbank
   3439  f48b				  -	      ora	currentrambank
   3440  f48b				  -	      endif
   3441  f48b				  -	      ifconst	MCPDEVCART
   3442  f48b				  -	      ora	#$18
   3443  f48b				  -	      sta	$3000
   3444  f48b				  -	      else
   3445  f48b				  -	      sta	$8000
   3446  f48b				  -	      endif
   3447  f48b				  -	      pla		; bankswitch $0 flag
   3448  f48b				  -	      rts
   3449  f48b					      endif
   3450  f48b
   3451  f48b				   checkselectswitch
   3452  f48b		       ad 82 02 	      lda	SWCHB	; first check the real select switch...
   3453  f48e		       29 02		      and	#%00000010
   3454  f490					      ifnconst	SOFTPAUSEOFF
   3455  f490					      ifnconst	MOUSESUPPORT
   3456  f490					      ifnconst	TRAKBALLSUPPORT
   3457  f490		       f0 0f		      beq	checkselectswitchreturn	; switch is pressed
   3458  f492		       ad b9 01 	      lda	port0control
   3459  f495		       c9 0b		      cmp	#11
   3460  f497		       d0 03		      bne	checkselectsoftswitch
   3461  f499		       a9 ff		      lda	#$ff
   3462  f49b		       60		      rts
   3463  f49c				   checkselectsoftswitch
   3464  f49c		       ad 80 02 	      lda	SWCHA	; then check the soft "select" joysick code...
   3465  f49f		       29 b0		      and	#%10110000	; R_DU
   3466  f4a1					      endif		; TRAKBALLSUPPORT
   3467  f4a1					      endif		; MOUSESUPPORT
   3468  f4a1					      endif		; SOFTPAUSEOFF
   3469  f4a1				   checkselectswitchreturn
   3470  f4a1		       60		      rts
   3471  f4a2
   3472  f4a2				   checkresetswitch
   3473  f4a2		       ad 82 02 	      lda	SWCHB	; first check the real reset switch...
   3474  f4a5		       29 01		      and	#%00000001
   3475  f4a7					      ifnconst	SOFTPAUSEOFF
   3476  f4a7					      ifnconst	MOUSESUPPORT
   3477  f4a7					      ifnconst	TRAKBALLSUPPORT
   3478  f4a7		       f0 0f		      beq	checkresetswitchreturn	; switch is pressed
   3479  f4a9		       ad b9 01 	      lda	port0control
   3480  f4ac		       c9 0b		      cmp	#11
   3481  f4ae		       d0 03		      bne	checkresetsoftswitch
   3482  f4b0		       a9 ff		      lda	#$ff
   3483  f4b2		       60		      rts
   3484  f4b3				   checkresetsoftswitch
   3485  f4b3		       ad 80 02 	      lda	SWCHA	; then check the soft "reset" joysick code...
   3486  f4b6		       29 70		      and	#%01110000	; _LDU
   3487  f4b8					      endif		; TRAKBALLSUPPORT
   3488  f4b8					      endif		; MOUSESUPPORT
   3489  f4b8					      endif		; SOFTPAUSEOFF
   3490  f4b8				   checkresetswitchreturn
   3491  f4b8		       60		      rts
   3492  f4b9
   3493  f4b9				  -	      ifconst	FINESCROLLENABLED
   3494  f4b9				  -finescrolldlls
   3495  f4b9				  -	      ldx	temp1	; first DLL index x3
   3496  f4b9				  -	      lda	DLLMEM,x
   3497  f4b9				  -	      and	#%11110000
   3498  f4b9				  -	      ora	finescrolly
   3499  f4b9				  -	      sta	DLLMEM,x
   3500  f4b9				  -
   3501  f4b9				  -	      ldx	temp2	; last DLL index x3
   3502  f4b9				  -	      lda	DLLMEM,x
   3503  f4b9				  -	      and	#%11110000
   3504  f4b9				  -	      ora	finescrolly
   3505  f4b9				  -	      eor	#(WZONEHEIGHT-1)
   3506  f4b9				  -	      sta	DLLMEM,x
   3507  f4b9				  -	      rts
   3508  f4b9					      endif		; FINESCROLLENABLED
   3509  f4b9
   3510  f4b9				  -	      ifconst	USED_ADJUSTVISIBLE
   3511  f4b9				  -adjustvisible
   3512  f4b9				  -			; called with temp1=first visible zone *3, temp2=last visible zone *3
   3513  f4b9				  -	      jsr	waitforvblankstart	; ensure vblank just started
   3514  f4b9				  -	      ldx	visibleDLLstart
   3515  f4b9				  -findfirstinterrupt
   3516  f4b9				  -	      lda	DLLMEM,x
   3517  f4b9				  -	      bmi	foundfirstinterrupt
   3518  f4b9				  -	      inx
   3519  f4b9				  -	      inx
   3520  f4b9				  -	      inx
   3521  f4b9				  -	      bne	findfirstinterrupt
   3522  f4b9				  -foundfirstinterrupt
   3523  f4b9				  -	      and	#%01111111	; clear the interrupt bit
   3524  f4b9				  -	      sta	DLLMEM,x
   3525  f4b9				  -	      ifconst	DOUBLEBUFFER
   3526  f4b9				  -	      sta	DLLMEM+DBOFFSET,x
   3527  f4b9				  -	      endif		; DOUBLEBUFFER
   3528  f4b9				  -	      ldx	overscanDLLstart
   3529  f4b9				  -findlastinterrupt
   3530  f4b9				  -	      lda	DLLMEM,x
   3531  f4b9				  -	      bmi	foundlastinterrupt
   3532  f4b9				  -	      dex
   3533  f4b9				  -	      dex
   3534  f4b9				  -	      dex
   3535  f4b9				  -	      bne	findlastinterrupt
   3536  f4b9				  -foundlastinterrupt
   3537  f4b9				  -	      and	#%01111111	; clear the interrupt bit
   3538  f4b9				  -	      sta	DLLMEM,x
   3539  f4b9				  -	      ifconst	DOUBLEBUFFER
   3540  f4b9				  -	      sta	DLLMEM+DBOFFSET,x
   3541  f4b9				  -	      endif		; DOUBLEBUFFER
   3542  f4b9				  -			;now we need to set the new interrupts
   3543  f4b9				  -	      clc
   3544  f4b9				  -	      lda	temp1
   3545  f4b9				  -	      adc	visibleDLLstart
   3546  f4b9				  -	      tax
   3547  f4b9				  -	      lda	DLLMEM,x
   3548  f4b9				  -	      ora	#%10000000
   3549  f4b9				  -	      sta	DLLMEM,x
   3550  f4b9				  -	      ifconst	DOUBLEBUFFER
   3551  f4b9				  -	      sta	DLLMEM+DBOFFSET,x
   3552  f4b9				  -	      endif		; DOUBLEBUFFER
   3553  f4b9				  -	      clc
   3554  f4b9				  -	      lda	temp2
   3555  f4b9				  -	      adc	visibleDLLstart
   3556  f4b9				  -	      tax
   3557  f4b9				  -	      lda	DLLMEM,x
   3558  f4b9				  -	      ora	#%10000000
   3559  f4b9				  -	      sta	DLLMEM,x
   3560  f4b9				  -	      ifconst	DOUBLEBUFFER
   3561  f4b9				  -	      sta	DLLMEM+DBOFFSET,x
   3562  f4b9				  -	      endif		; DOUBLEBUFFER
   3563  f4b9				  -	      jsr	vblankresync
   3564  f4b9				  -	      rts
   3565  f4b9					      endif		; USED_ADJUSTVISIBLE
   3566  f4b9
   3567  f4b9				   vblankresync
   3568  f4b9		       20 7a f5 	      jsr	waitforvblankstart	; ensure vblank just started
   3569  f4bc		       a9 00		      lda	#0
   3570  f4be		       85 4d		      sta	visibleover
   3571  f4c0		       a9 03		      lda	#3
   3572  f4c2		       8d b2 01 	      sta	interruptindex
   3573  f4c5		       60		      rts
   3574  f4c6
   3575  f4c6				   createallgamedlls
   3576  f4c6		       a2 00		      ldx	#0
   3577  f4c8		       a9 19		      lda	#NVLINES
   3578  f4ca		       ac 09 21 	      ldy	paldetected
   3579  f4cd		       f0 03		      beq	skipcreatePALpadding
   3580  f4cf		       18		      clc
   3581  f4d0		       69 15		      adc	#21
   3582  f4d2				   skipcreatePALpadding
   3583  f4d2		       20 10 f5 	      jsr	createnonvisibledlls
   3584  f4d5		       8e 3c 21 	      stx	visibleDLLstart
   3585  f4d8		       20 4a f5 	      jsr	createvisiblezones
   3586  f4db		       8e 3d 21 	      stx	overscanDLLstart
   3587  f4de				   createallgamedllscontinue
   3588  f4de		       a9 50		      lda	#(NVLINES+55)	; extras for PAL
   3589  f4e0		       20 10 f5 	      jsr	createnonvisibledlls
   3590  f4e3
   3591  f4e3		       ae 3c 21 	      ldx	visibleDLLstart
   3592  f4e6		       bd 00 18 	      lda	DLLMEM,x
   3593  f4e9		       09 80		      ora	#%10000000	; NMI 1 - start of visible screen
   3594  f4eb		       9d 00 18 	      sta	DLLMEM,x
   3595  f4ee					      ifconst	DOUBLEBUFFER
   3596  f4ee		       9d 70 18 	      sta	DLLMEM+DBOFFSET,x
   3597  f4f1					      endif		; DOUBLEBUFFER
   3598  f4f1
   3599  f4f1		       ae 3d 21 	      ldx	overscanDLLstart
   3600  f4f4		       bd 00 18 	      lda	DLLMEM,x
   3601  f4f7		       09 83		      ora	#%10000011	; NMI 2 - end of visible screen
   3602  f4f9		       29 f3		      and	#%11110011	; change this to a 1-line DLL, so there's time enough for the "deeper overscan" DLL
   3603  f4fb		       9d 00 18 	      sta	DLLMEM,x
   3604  f4fe					      ifconst	DOUBLEBUFFER
   3605  f4fe		       9d 70 18 	      sta	DLLMEM+DBOFFSET,x
   3606  f501					      endif		; DOUBLEBUFFER
   3607  f501
   3608  f501		       e8		      inx
   3609  f502		       e8		      inx
   3610  f503		       e8		      inx
   3611  f504
   3612  f504		       bd 00 18 	      lda	DLLMEM,x
   3613  f507		       09 80		      ora	#%10000000	; NMI 3 - deeper overscan
   3614  f509		       9d 00 18 	      sta	DLLMEM,x
   3615  f50c					      ifconst	DOUBLEBUFFER
   3616  f50c		       9d 70 18 	      sta	DLLMEM+DBOFFSET,x
   3617  f50f					      endif		; DOUBLEBUFFER
   3618  f50f
   3619  f50f		       60		      rts
   3620  f510
   3621  f510				   createnonvisibledlls
   3622  f510		       85 42		      sta	temp1
   3623  f512		       4a		      lsr
   3624  f513		       4a		      lsr
   3625  f514		       4a		      lsr
   3626  f515		       4a		      lsr		; /16
   3627  f516		       f0 09		      beq	skipcreatenonvisibledlls1loop
   3628  f518		       a8		      tay
   3629  f519				   createnonvisibledlls1loop
   3630  f519		       a9 4f		      lda	#%01001111	;low nibble=16 lines, high nibble=Holey DMA
   3631  f51b		       20 30 f5 	      jsr	createblankdllentry
   3632  f51e		       88		      dey
   3633  f51f		       d0 f8		      bne	createnonvisibledlls1loop
   3634  f521				   skipcreatenonvisibledlls1loop
   3635  f521		       a5 42		      lda	temp1
   3636  f523		       29 0f		      and	#%00001111
   3637  f525		       f0 08		      beq	createnonvisibledllsreturn
   3638  f527		       38		      sec
   3639  f528		       e9 01		      sbc	#1
   3640  f52a		       09 40		      ora	#%01000000
   3641  f52c		       20 30 f5 	      jsr	createblankdllentry
   3642  f52f				   createnonvisibledllsreturn
   3643  f52f		       60		      rts
   3644  f530
   3645  f530				   createblankdllentry
   3646  f530		       9d 00 18 	      sta	DLLMEM,x
   3647  f533					      ifconst	DOUBLEBUFFER
   3648  f533		       9d 70 18 	      sta	DLLMEM+DBOFFSET,x
   3649  f536					      endif		; DOUBLEBUFFER
   3650  f536		       e8		      inx
   3651  f537		       a9 21		      lda	#$21	; blank
   3652  f539		       9d 00 18 	      sta	DLLMEM,x
   3653  f53c					      ifconst	DOUBLEBUFFER
   3654  f53c		       9d 70 18 	      sta	DLLMEM+DBOFFSET,x
   3655  f53f					      endif		; DOUBLEBUFFER
   3656  f53f		       e8		      inx
   3657  f540		       a9 00		      lda	#$00
   3658  f542		       9d 00 18 	      sta	DLLMEM,x
   3659  f545					      ifconst	DOUBLEBUFFER
   3660  f545		       9d 70 18 	      sta	DLLMEM+DBOFFSET,x
   3661  f548					      endif		; DOUBLEBUFFER
   3662  f548		       e8		      inx
   3663  f549		       60		      rts
   3664  f54a
   3665  f54a				   createvisiblezones
   3666  f54a		       a0 00		      ldy	#0
   3667  f54c				   createvisiblezonesloop
   3668  f54c		       b9 dc f6 	      lda.w	DLHEIGHT,y
   3669  f54f		       09 40		      ora	#(WZONEHEIGHT * 4)	; set Holey DMA for 8 or 16 tall zones
   3670  f551		       9d 00 18 	      sta	DLLMEM,x
   3671  f554					      ifconst	DOUBLEBUFFER
   3672  f554		       9d 70 18 	      sta	DLLMEM+DBOFFSET,x
   3673  f557					      endif		; DOUBLEBUFFER
   3674  f557		       e8		      inx
   3675  f558		       b9 c4 f6 	      lda	DLPOINTH,y
   3676  f55b				  -	      ifconst	BANKSET_DL_IN_CARTRAM
   3677  f55b				  -			; with bankset cart ram, we added $8000 to the DL address so plot functions would hit the write-address
   3678  f55b				  -			; but now we need to subtract that $8000 location to give Maria the normal address
   3679  f55b				  -	      sec
   3680  f55b				  -	      sbc	#$80
   3681  f55b					      endif		; BANKSET_DL_IN_CARTRAM
   3682  f55b		       9d 00 18 	      sta	DLLMEM,x
   3683  f55e					      ifconst	DOUBLEBUFFER
   3684  f55e		       9d 70 18 	      sta	DLLMEM+DBOFFSET,x
   3685  f561					      endif		; DOUBLEBUFFER
   3686  f561		       e8		      inx
   3687  f562		       b9 d0 f6 	      lda	DLPOINTL,y
   3688  f565		       9d 00 18 	      sta	DLLMEM,x
   3689  f568					      ifconst	DOUBLEBUFFER
   3690  f568		       18		      clc
   3691  f569		       69 48		      adc	#DOUBLEBUFFEROFFSET
   3692  f56b		       9d 70 18 	      sta	DLLMEM+DBOFFSET,x
   3693  f56e		       90 03		      bcc	skiphidoublebufferadjust	; dlls are big endian, so we need to fix the hi byte after-the-fact...
   3694  f570		       fe 6f 18 	      inc	DLLMEM+DBOFFSET-1,x
   3695  f573				   skiphidoublebufferadjust
   3696  f573					      endif		; DOUBLEBUFFER
   3697  f573		       e8		      inx
   3698  f574		       c8		      iny
   3699  f575		       c0 0c		      cpy	#WZONECOUNT
   3700  f577		       d0 d3		      bne	createvisiblezonesloop
   3701  f579		       60		      rts
   3702  f57a
   3703  f57a				   waitforvblankstart
   3704  f57a				   vblankendwait
   3705  f57a		       24 28		      BIT	MSTAT
   3706  f57c		       30 fc		      bmi	vblankendwait
   3707  f57e				   vblankstartwait
   3708  f57e		       24 28		      BIT	MSTAT
   3709  f580		       10 fc		      bpl	vblankstartwait
   3710  f582		       60		      rts
   3711  f583
   3712  f583					      ifconst	DOUBLEBUFFER
   3713  f583				   flipdisplaybufferreturn
   3714  f583		       60		      rts
   3715  f584				   flipdisplaybuffer
   3716  f584				  -	      ifconst	interrupthold
   3717  f584				  -	      lda	#$FF
   3718  f584				  -	      sta	interrupthold
   3719  f584					      endif
   3720  f584		       a5 d5		      lda	doublebufferstate
   3721  f586		       f0 fb		      beq	flipdisplaybufferreturn	; exit if we're not in double-buffer
   3722  f588
   3723  f588		       20 54 f1 	      jsr	terminatedisplaybuffer	; terminate the working buffer before we flip
   3724  f58b
   3725  f58b		       a5 d5		      lda	doublebufferstate
   3726  f58d		       4a		      lsr		; /2, so we'll see 0 or 1, rather than 1 or 3
   3727  f58e		       aa		      tax
   3728  f58f
   3729  f58f							; ensure we don't flip mid-display. otherwise the displayed DL will be the one the game is working on.
   3730  f58f
   3731  f58f				   flipdisplaybufferwait1
   3732  f58f		       a5 4d		      lda	visibleover
   3733  f591		       f0 fc		      beq	flipdisplaybufferwait1
   3734  f593
   3735  f593				   flipdisplaybufferwait
   3736  f593		       a5 4d		      lda	visibleover
   3737  f595		       d0 fc		      bne	flipdisplaybufferwait
   3738  f597
   3739  f597		       ad b3 01 	      lda	doublebufferminimumframetarget
   3740  f59a		       f0 0b		      beq	skipminimumframecode
   3741  f59c		       ad b4 01 	      lda	doublebufferminimumframeindex
   3742  f59f		       d0 ee		      bne	flipdisplaybufferwait1
   3743  f5a1		       ad b3 01 	      lda	doublebufferminimumframetarget
   3744  f5a4		       8d b4 01 	      sta	doublebufferminimumframeindex
   3745  f5a7				   skipminimumframecode
   3746  f5a7
   3747  f5a7		       bd 07 f6 	      lda	DLLMEMLutHi,x
   3748  f5aa		       85 2c		      sta	DPPH
   3749  f5ac		       bd 05 f6 	      lda	DLLMEMLutLo,x
   3750  f5af		       85 30		      sta	DPPL
   3751  f5b1
   3752  f5b1		       bd 09 f6 	      lda	NewPageflipstate,x
   3753  f5b4		       85 d5		      sta	doublebufferstate
   3754  f5b6		       bd 0b f6 	      lda	NewPageflipoffset,x
   3755  f5b9		       85 d6		      sta	doublebufferdloffset
   3756  f5bb
   3757  f5bb					      ifnconst	BANKSET_DL_IN_CARTRAM
   3758  f5bb		       a5 d7		      lda	doublebufferbufferdirty
   3759  f5bd		       f0 c4		      beq	flipdisplaybufferreturn
   3760  f5bf
   3761  f5bf							; The doublebuffer buffer is dirty, so the game code must have issued a savescreen recently.
   3762  f5bf							; To make savescreen work with the new working buffer, we need to copy over the saved objects
   3763  f5bf							; from the displayed buffer to the working buffer...
   3764  f5bf
   3765  f5bf		       a5 d6		      lda	doublebufferdloffset
   3766  f5c1		       49 48		      eor	#DOUBLEBUFFEROFFSET
   3767  f5c3		       85 47		      sta	temp6	; make temp6 the anti-doublebufferdloffset variable
   3768  f5c5
   3769  f5c5		       a2 0b		      ldx	#(WZONECOUNT-1)
   3770  f5c7				   copybufferzoneloop
   3771  f5c7
   3772  f5c7		       bd d0 f6 	      lda	DLPOINTL,x
   3773  f5ca		       18		      clc
   3774  f5cb		       65 d6		      adc	doublebufferdloffset
   3775  f5cd		       85 42		      sta	temp1
   3776  f5cf		       bd c4 f6 	      lda	DLPOINTH,x
   3777  f5d2		       69 00		      adc	#0
   3778  f5d4		       85 43		      sta	temp2
   3779  f5d6
   3780  f5d6		       bd d0 f6 	      lda	DLPOINTL,x
   3781  f5d9		       18		      clc
   3782  f5da		       65 47		      adc	temp6
   3783  f5dc		       85 44		      sta	temp3
   3784  f5de		       bd c4 f6 	      lda	DLPOINTH,x
   3785  f5e1		       69 00		      adc	#0
   3786  f5e3		       85 45		      sta	temp4
   3787  f5e5
   3788  f5e5		       b5 82		      lda	dlendsave,x
   3789  f5e7		       a8		      tay
   3790  f5e8				   copybuffercharsloop
   3791  f5e8		       b1 44		      lda	(temp3),y
   3792  f5ea		       91 42		      sta	(temp1),y
   3793  f5ec		       88		      dey
   3794  f5ed		       10 f9		      bpl	copybuffercharsloop
   3795  f5ef		       ca		      dex
   3796  f5f0		       10 d5		      bpl	copybufferzoneloop
   3797  f5f2		       a9 00		      lda	#0
   3798  f5f4		       85 d7		      sta	doublebufferbufferdirty
   3799  f5f6					      endif		; ! BANKSET_DL_IN_CARTRAM
   3800  f5f6		       60		      rts
   3801  f5f7
   3802  f5f7				   doublebufferoff
   3803  f5f7		       a9 01		      lda	#1
   3804  f5f9		       85 d5		      sta	doublebufferstate
   3805  f5fb		       20 84 f5 	      jsr	flipdisplaybuffer
   3806  f5fe		       a9 00		      lda	#0
   3807  f600		       85 d5		      sta	doublebufferstate
   3808  f602		       85 d6		      sta	doublebufferdloffset
   3809  f604		       60		      rts
   3810  f605
   3811  f605				   DLLMEMLutLo
   3812  f605		       00 70		      .byte.b	<DLLMEM,<(DLLMEM+DBOFFSET)
   3813  f607				   DLLMEMLutHi
   3814  f607		       18 18		      .byte.b	>DLLMEM,>(DLLMEM+DBOFFSET)
   3815  f609				   NewPageflipstate
   3816  f609		       03 01		      .byte.b	3,1
   3817  f60b				   NewPageflipoffset
   3818  f60b		       48 00		      .byte.b	DOUBLEBUFFEROFFSET,0
   3819  f60d
   3820  f60d					      endif		; DOUBLEBUFFER
   3821  f60d
   3822  f60d				  -	      ifconst	MOUSESUPPORT
   3823  f60d				  -
   3824  f60d				  -rotationalcompare
   3825  f60d				  -			; old =   00	  01	  10	 11
   3826  f60d				  -	      .byte	$00, $01, $ff, $00	; new=00
   3827  f60d				  -	      .byte	$ff, $00, $00, $01	; new=01
   3828  f60d				  -	      .byte	$01, $00, $00, $ff	; new=10
   3829  f60d				  -	      .byte	$00, $ff, $01, $00	; new=11
   3830  f60d				  -
   3831  f60d				  -			;  0000YyXx st mouse
   3832  f60d				  -
   3833  f60d				  -			;  0000xyXY amiga mouse
   3834  f60d				  -
   3835  f60d				  -	      ifconst	MOUSEXONLY
   3836  f60d				  -amigatoataribits		; swap bits 1 and 4...
   3837  f60d				  -	      .byte	%0000, %0000, %0010, %0010
   3838  f60d				  -	      .byte	%0000, %0000, %0010, %0010
   3839  f60d				  -	      .byte	%0001, %0001, %0011, %0011
   3840  f60d				  -	      .byte	%0001, %0001, %0011, %0011
   3841  f60d				  -
   3842  f60d				  -			; null change bits
   3843  f60d				  -	      .byte	%0000, %0001, %0010, %0011
   3844  f60d				  -	      .byte	%0000, %0001, %0010, %0011
   3845  f60d				  -	      .byte	%0000, %0001, %0010, %0011
   3846  f60d				  -	      .byte	%0000, %0001, %0010, %0011
   3847  f60d				  -
   3848  f60d				  -	      else		; !MOUSEXONLY
   3849  f60d				  -
   3850  f60d				  -amigatoataribits		; swap bits 1 and 4...
   3851  f60d				  -	      .byte	%0000, %1000, %0010, %1010
   3852  f60d				  -	      .byte	%0100, %1100, %0110, %1110
   3853  f60d				  -	      .byte	%0001, %1001, %0011, %1011
   3854  f60d				  -	      .byte	%0101, %1101, %0111, %1111
   3855  f60d				  -			; null change bits
   3856  f60d				  -	      .byte	%0000, %0001, %0010, %0011
   3857  f60d				  -	      .byte	%0100, %0101, %0110, %0111
   3858  f60d				  -	      .byte	%1000, %1001, %1010, %1011
   3859  f60d				  -	      .byte	%1100, %1101, %1110, %1111
   3860  f60d				  -	      endif		; !MOUSEXONLY
   3861  f60d				  -
   3862  f60d					      endif		; MOUSESUPPORT
   3863  f60d
   3864  f60d				   mouse0update
   3865  f60d				  -	      ifconst	MOUSE0SUPPORT
   3866  f60d				  -
   3867  f60d				  -mousetableselect =	inttemp2
   3868  f60d				  -mousexdelta =	inttemp3
   3869  f60d				  -mouseydelta =	inttemp4
   3870  f60d				  -lastSWCHA  =	inttemp6
   3871  f60d				  -
   3872  f60d				  -			;  0000YyXx st mouse
   3873  f60d				  -			;  0000xyXY amiga mouse
   3874  f60d				  -
   3875  f60d				  -	      lda	#$ff
   3876  f60d				  -	      sta	lastSWCHA
   3877  f60d				  -
   3878  f60d				  -	      ldy	port0control
   3879  f60d				  -
   3880  f60d				  -	      lda	#%00010000
   3881  f60d				  -	      cpy	#9	; AMIGA?
   3882  f60d				  -	      bne	skipamigabitsfix0
   3883  f60d				  -	      lda	#0
   3884  f60d				  -skipamigabitsfix0
   3885  f60d				  -	      sta	mousetableselect
   3886  f60d				  -	      ifconst	DRIVINGBOOST
   3887  f60d				  -	      cpy	#6	; DRIVING?
   3888  f60d				  -	      bne	skipdriving0setup
   3889  f60d				  -			; swap mousex0 and mousey0. mousex seen by the 7800basic program
   3890  f60d				  -			; trails the actual mousex0, so we can smoothly interpolate toward
   3891  f60d				  -			; the actual position. This actual position is stored in mousey0 
   3892  f60d				  -			; after the driver has run.
   3893  f60d				  -	      ldx	mousex0
   3894  f60d				  -	      lda	mousey0
   3895  f60d				  -	      stx	mousey0
   3896  f60d				  -	      sta	mousex0
   3897  f60d				  -skipdriving0setup
   3898  f60d				  -	      endif		; DRIVINGBOOST
   3899  f60d				  -
   3900  f60d				  -	      lda	#0
   3901  f60d				  -	      sta	mousexdelta
   3902  f60d				  -	      sta	mouseydelta
   3903  f60d				  -
   3904  f60d				  -	      ifnconst	MOUSETIME
   3905  f60d				  -	      ifnconst	MOUSEXONLY
   3906  f60d				  -	      lda	#180	; minimum for x+y
   3907  f60d				  -	      else
   3908  f60d				  -	      lda	#100	; minimum for just x
   3909  f60d				  -	      endif
   3910  f60d				  -	      else
   3911  f60d				  -	      lda	#MOUSETIME
   3912  f60d				  -	      endif
   3913  f60d				  -	      jsr	SETTIM64T	; INTIM is in Y
   3914  f60d				  -
   3915  f60d				  -mouse0updateloop
   3916  f60d				  -	      lda	SWCHA
   3917  f60d				  -	      asr	#%11110000	; Undocumented. A = A & #IMM, then LSR A.
   3918  f60d				  -	      cmp	lastSWCHA
   3919  f60d				  -	      beq	mouse0loopcondition
   3920  f60d				  -	      sta	lastSWCHA
   3921  f60d				  -	      lsr
   3922  f60d				  -	      lsr
   3923  f60d				  -	      lsr
   3924  f60d				  -
   3925  f60d				  -	      ora	mousetableselect	; atari/amiga decoding table selection
   3926  f60d				  -
   3927  f60d				  -			; st mice encode on different bits/joystick-lines than amiga mice...
   3928  f60d				  -			;  0000YyXx st mouse
   3929  f60d				  -			;  0000xyXY amiga mouse
   3930  f60d				  -			; ...so can shuffle the amiga bits to reuse the st driver.
   3931  f60d				  -	      tay
   3932  f60d				  -	      lax	amigatoataribits,y
   3933  f60d				  -
   3934  f60d				  -	      ifnconst	MOUSEXONLY
   3935  f60d				  -			; first the Y...
   3936  f60d				  -	      and	#%00001100
   3937  f60d				  -	      ora	mousecodey0
   3938  f60d				  -	      tay
   3939  f60d				  -	      lda	rotationalcompare,y
   3940  f60d				  -	      clc
   3941  f60d				  -	      adc	mouseydelta
   3942  f60d				  -	      sta	mouseydelta
   3943  f60d				  -	      tya
   3944  f60d				  -	      lsr
   3945  f60d				  -	      lsr
   3946  f60d				  -	      sta	mousecodey0
   3947  f60d				  -	      txa
   3948  f60d				  -			; ...then the X...
   3949  f60d				  -	      and	#%00000011
   3950  f60d				  -	      tax
   3951  f60d				  -	      endif		; !MOUSEXONLY
   3952  f60d				  -
   3953  f60d				  -	      asl
   3954  f60d				  -	      asl
   3955  f60d				  -	      ora	mousecodex0
   3956  f60d				  -	      tay
   3957  f60d				  -	      lda	rotationalcompare,y
   3958  f60d				  -	      adc	mousexdelta	; carry was clear by previous ASL
   3959  f60d				  -	      sta	mousexdelta
   3960  f60d				  -	      stx	mousecodex0
   3961  f60d				  -mouse0loopcondition
   3962  f60d				  -	      lda	TIMINT
   3963  f60d				  -	      bpl	mouse0updateloop
   3964  f60d				  -
   3965  f60d				  -			; *** adapt to selected device resolution. 
   3966  f60d				  -	      ldx	port0control
   3967  f60d				  -
   3968  f60d				  -	      ifconst	PRECISIONMOUSING
   3969  f60d				  -	      ldy	port0resolution
   3970  f60d				  -	      bne	mouse0halveddone
   3971  f60d				  -	      cpx	#6	; half-resolution is no good for driving wheels
   3972  f60d				  -	      beq	mouse0halveddone
   3973  f60d				  -			; resolution=0 is half mouse resolution, necessary for precision 
   3974  f60d				  -			; mousing on a 160x240 screen with a 1000 dpi mouse.
   3975  f60d				  -
   3976  f60d				  -	      lda	mousexdelta
   3977  f60d				  -	      cmp	#$80
   3978  f60d				  -	      ror		; do a signed divide by 2.
   3979  f60d				  -	      clc
   3980  f60d				  -	      adc	mousex0
   3981  f60d				  -	      sta	mousex0
   3982  f60d				  -	      ifnconst	MOUSEXONLY
   3983  f60d				  -	      lda	mouseydelta
   3984  f60d				  -	      clc
   3985  f60d				  -	      adc	mousey0
   3986  f60d				  -	      sta	mousey0
   3987  f60d				  -	      endif
   3988  f60d				  -			; at half resolution we just exit after updating x and y
   3989  f60d				  -	      jmp	LLRET0
   3990  f60d				  -mouse0halveddone
   3991  f60d				  -	      endif		; PRECISIONMOUSING
   3992  f60d				  -
   3993  f60d				  -	      ifnconst	MOUSEXONLY
   3994  f60d				  -	      asl	mouseydelta	; *2 because Y resolution is finer
   3995  f60d				  -	      ldy	port0resolution
   3996  f60d				  -	      dey
   3997  f60d				  -	      lda	#0
   3998  f60d				  -mousey0resolutionfix
   3999  f60d				  -	      clc
   4000  f60d				  -	      adc	mouseydelta
   4001  f60d				  -	      dey
   4002  f60d				  -	      bpl	mousey0resolutionfix
   4003  f60d				  -	      clc
   4004  f60d				  -	      adc	mousey0
   4005  f60d				  -	      sta	mousey0
   4006  f60d				  -	      endif		; MOUSEXONLY
   4007  f60d				  -
   4008  f60d				  -	      ldy	port0resolution
   4009  f60d				  -	      dey
   4010  f60d				  -	      lda	#0
   4011  f60d				  -mousex0resolutionfix
   4012  f60d				  -	      clc
   4013  f60d				  -	      adc	mousexdelta
   4014  f60d				  -	      dey
   4015  f60d				  -	      bpl	mousex0resolutionfix
   4016  f60d				  -	      ifnconst	DRIVINGBOOST
   4017  f60d				  -	      clc
   4018  f60d				  -	      adc	mousex0
   4019  f60d				  -	      sta	mousex0
   4020  f60d				  -	      else
   4021  f60d				  -	      cpx	#6
   4022  f60d				  -	      beq	carryonmouse0boost
   4023  f60d				  -	      clc
   4024  f60d				  -	      adc	mousex0
   4025  f60d				  -	      sta	mousex0
   4026  f60d				  -	      jmp	LLRET0
   4027  f60d				  -carryonmouse0boost
   4028  f60d				  -	      sta	mousexdelta
   4029  f60d				  -	      clc
   4030  f60d				  -	      adc	mousecodey0
   4031  f60d				  -	      sta	mousecodey0
   4032  f60d				  -	      clc
   4033  f60d				  -	      adc	mousex0
   4034  f60d				  -	      tay		; save the target X
   4035  f60d				  -	      adc	mousey0	; average in the smoothly-trailing X
   4036  f60d				  -	      ror
   4037  f60d				  -	      sta	mousex0	; mousex0 now has the smoothly trailing X
   4038  f60d				  -	      sty	mousey0	; and mousey0 has the the target X
   4039  f60d				  -
   4040  f60d				  -			; check to see if the coordinate wrapped. If so, undo the averaging code.
   4041  f60d				  -			; A has mousex0, the smoothly trailing X
   4042  f60d				  -	      sbc	mousey0	; less the target X
   4043  f60d				  -	      bpl	skipabsolutedrive0
   4044  f60d				  -	      eor	#$ff
   4045  f60d				  -skipabsolutedrive0
   4046  f60d				  -	      cmp	#64	; just an unreasonably large change
   4047  f60d				  -	      bcc	skipdrivewrapfix0
   4048  f60d				  -	      sty	mousex0	; if X wrapped, we catch the trailing X up to the target X
   4049  f60d				  -skipdrivewrapfix0
   4050  f60d				  -
   4051  f60d				  -			; get rid of the tweening if the distance travelled was very small
   4052  f60d				  -	      lda	mousexdelta
   4053  f60d				  -	      cmp	port0resolution
   4054  f60d				  -	      bcs	skipbetweenfix0
   4055  f60d				  -	      lda	mousex0
   4056  f60d				  -	      sta	mousey0
   4057  f60d				  -skipbetweenfix0
   4058  f60d				  -
   4059  f60d				  -drivingboostreductioncheck0
   4060  f60d				  -			; The below code amounts to mousecodey0=mousecodey0-(mousecodey0/8)
   4061  f60d				  -			; +ve mousecodey0 is converted to -ve to do the calculation, and then
   4062  f60d				  -			; negated again because truncation during BCD math results in 
   4063  f60d				  -			; differing magnitudes, depending if the value is  +ve or -ve.
   4064  f60d				  -driving0fix
   4065  f60d				  -	      lax	mousecodey0
   4066  f60d				  -	      cmp	#$80
   4067  f60d				  -	      bcs	driving0skipnegate1
   4068  f60d				  -	      eor	#$FF
   4069  f60d				  -	      adc	#1
   4070  f60d				  -	      sta	mousecodey0
   4071  f60d				  -driving0skipnegate1
   4072  f60d				  -	      cmp	#$80
   4073  f60d				  -	      ror
   4074  f60d				  -	      cmp	#$80
   4075  f60d				  -	      ror
   4076  f60d				  -	      cmp	#$80
   4077  f60d				  -	      ror
   4078  f60d				  -	      sta	inttemp1
   4079  f60d				  -	      lda	mousecodey0
   4080  f60d				  -	      sec
   4081  f60d				  -	      sbc	inttemp1
   4082  f60d				  -	      cpx	#$80
   4083  f60d				  -	      bcs	driving0skipnegate2
   4084  f60d				  -	      eor	#$FF
   4085  f60d				  -	      adc	#1
   4086  f60d				  -driving0skipnegate2
   4087  f60d				  -	      sta	mousecodey0
   4088  f60d				  -drivingboostdone0
   4089  f60d				  -	      endif		; DRIVINGBOOST
   4090  f60d				  -
   4091  f60d				  -	      jmp	LLRET0
   4092  f60d				  -
   4093  f60d					      endif		; MOUSE0SUPPORT
   4094  f60d
   4095  f60d				   mouse1update
   4096  f60d				  -	      ifconst	MOUSE1SUPPORT
   4097  f60d				  -
   4098  f60d				  -mousetableselect =	inttemp2
   4099  f60d				  -mousexdelta =	inttemp3
   4100  f60d				  -mouseydelta =	inttemp4
   4101  f60d				  -lastSWCHA  =	inttemp6
   4102  f60d				  -
   4103  f60d				  -			;  0000YyXx st mouse
   4104  f60d				  -			;  0000xyXY amiga mouse
   4105  f60d				  -
   4106  f60d				  -	      lda	#$ff
   4107  f60d				  -	      sta	lastSWCHA
   4108  f60d				  -
   4109  f60d				  -	      ldy	port1control
   4110  f60d				  -
   4111  f60d				  -	      lda	#%00010000
   4112  f60d				  -	      cpy	#9	; AMIGA?
   4113  f60d				  -	      bne	skipamigabitsfix1
   4114  f60d				  -	      lda	#0
   4115  f60d				  -skipamigabitsfix1
   4116  f60d				  -	      sta	mousetableselect
   4117  f60d				  -	      ifconst	DRIVINGBOOST
   4118  f60d				  -	      cpy	#6	; DRIVING?
   4119  f60d				  -	      bne	skipdriving1setup
   4120  f60d				  -			; swap mousex1 and mousey1. mousex seen by the 7800basic program
   4121  f60d				  -			; trails the actual mousex1, so we can smoothly interpolate toward
   4122  f60d				  -			; the actual position. This actual position is stored in mousey1 
   4123  f60d				  -			; after the driver has run.
   4124  f60d				  -	      ldx	mousex1
   4125  f60d				  -	      lda	mousey1
   4126  f60d				  -	      stx	mousey1
   4127  f60d				  -	      sta	mousex1
   4128  f60d				  -skipdriving1setup
   4129  f60d				  -	      endif		; DRIVINGBOOST
   4130  f60d				  -
   4131  f60d				  -	      lda	#0
   4132  f60d				  -	      sta	mousexdelta
   4133  f60d				  -	      sta	mouseydelta
   4134  f60d				  -
   4135  f60d				  -	      ifnconst	MOUSETIME
   4136  f60d				  -	      ifnconst	MOUSEXONLY
   4137  f60d				  -	      lda	#180	; minimum for x+y
   4138  f60d				  -	      else
   4139  f60d				  -	      lda	#100	; minimum for just x
   4140  f60d				  -	      endif
   4141  f60d				  -	      else
   4142  f60d				  -	      lda	#MOUSETIME
   4143  f60d				  -	      endif
   4144  f60d				  -	      jsr	SETTIM64T	; INTIM is in Y
   4145  f60d				  -
   4146  f60d				  -mouse1updateloop
   4147  f60d				  -	      lda	SWCHA
   4148  f60d				  -	      and	#%00001111
   4149  f60d				  -	      cmp	lastSWCHA
   4150  f60d				  -	      beq	mouse1loopcondition
   4151  f60d				  -	      sta	lastSWCHA
   4152  f60d				  -
   4153  f60d				  -	      ora	mousetableselect	; atari/amiga decoding table selection
   4154  f60d				  -
   4155  f60d				  -			; st mice encode on different bits/joystick-lines than amiga mice...
   4156  f60d				  -			;  0000YyXx st mouse
   4157  f60d				  -			;  0000xyXY amiga mouse
   4158  f60d				  -			; ...so can shuffle the amiga bits to reuse the st driver.
   4159  f60d				  -	      tay
   4160  f60d				  -	      lax	amigatoataribits,y
   4161  f60d				  -
   4162  f60d				  -	      ifnconst	MOUSEXONLY
   4163  f60d				  -			; first the Y...
   4164  f60d				  -	      and	#%00001100
   4165  f60d				  -	      ora	mousecodey1
   4166  f60d				  -	      tay
   4167  f60d				  -	      lda	rotationalcompare,y
   4168  f60d				  -	      clc
   4169  f60d				  -	      adc	mouseydelta
   4170  f60d				  -	      sta	mouseydelta
   4171  f60d				  -	      tya
   4172  f60d				  -	      lsr
   4173  f60d				  -	      lsr
   4174  f60d				  -	      sta	mousecodey1
   4175  f60d				  -	      txa
   4176  f60d				  -			; ...then the X...
   4177  f60d				  -	      and	#%00000011
   4178  f60d				  -	      tax
   4179  f60d				  -	      endif		; !MOUSEXONLY
   4180  f60d				  -
   4181  f60d				  -	      asl
   4182  f60d				  -	      asl
   4183  f60d				  -	      ora	mousecodex1
   4184  f60d				  -	      tay
   4185  f60d				  -	      lda	rotationalcompare,y
   4186  f60d				  -	      adc	mousexdelta	; carry was clear by previous ASL
   4187  f60d				  -	      sta	mousexdelta
   4188  f60d				  -	      stx	mousecodex1
   4189  f60d				  -mouse1loopcondition
   4190  f60d				  -	      lda	TIMINT
   4191  f60d				  -	      bpl	mouse1updateloop
   4192  f60d				  -
   4193  f60d				  -			; *** adapt to selected device resolution. 
   4194  f60d				  -	      ldx	port1control
   4195  f60d				  -
   4196  f60d				  -	      ifconst	PRECISIONMOUSING
   4197  f60d				  -	      ldy	port1resolution
   4198  f60d				  -	      bne	mouse1halveddone
   4199  f60d				  -	      cpx	#6	; half-resolution is no good for driving wheels
   4200  f60d				  -	      beq	mouse1halveddone
   4201  f60d				  -			; resolution=0 is half mouse resolution, necessary for precision 
   4202  f60d				  -			; mousing on a 160x240 screen with a 1000 dpi mouse.
   4203  f60d				  -
   4204  f60d				  -	      lda	mousexdelta
   4205  f60d				  -	      cmp	#$80
   4206  f60d				  -	      ror		; do a signed divide by 2.
   4207  f60d				  -	      clc
   4208  f60d				  -	      adc	mousex1
   4209  f60d				  -	      sta	mousex1
   4210  f60d				  -	      ifnconst	MOUSEXONLY
   4211  f60d				  -	      lda	mouseydelta
   4212  f60d				  -	      clc
   4213  f60d				  -	      adc	mousey1
   4214  f60d				  -	      sta	mousey1
   4215  f60d				  -	      endif
   4216  f60d				  -			; at half resolution we just exit after updating x and y
   4217  f60d				  -	      jmp	LLRET1
   4218  f60d				  -mouse1halveddone
   4219  f60d				  -	      endif		; PRECISIONMOUSING
   4220  f60d				  -
   4221  f60d				  -	      ifnconst	MOUSEXONLY
   4222  f60d				  -	      asl	mouseydelta	; *2 because Y resolution is finer
   4223  f60d				  -	      ldy	port1resolution
   4224  f60d				  -	      dey
   4225  f60d				  -	      lda	#0
   4226  f60d				  -mousey1resolutionfix
   4227  f60d				  -	      clc
   4228  f60d				  -	      adc	mouseydelta
   4229  f60d				  -	      dey
   4230  f60d				  -	      bpl	mousey1resolutionfix
   4231  f60d				  -	      clc
   4232  f60d				  -	      adc	mousey1
   4233  f60d				  -	      sta	mousey1
   4234  f60d				  -	      endif		; MOUSEXONLY
   4235  f60d				  -
   4236  f60d				  -	      ldy	port1resolution
   4237  f60d				  -	      dey
   4238  f60d				  -	      lda	#0
   4239  f60d				  -mousex1resolutionfix
   4240  f60d				  -	      clc
   4241  f60d				  -	      adc	mousexdelta
   4242  f60d				  -	      dey
   4243  f60d				  -	      bpl	mousex1resolutionfix
   4244  f60d				  -	      ifnconst	DRIVINGBOOST
   4245  f60d				  -	      clc
   4246  f60d				  -	      adc	mousex1
   4247  f60d				  -	      sta	mousex1
   4248  f60d				  -	      else
   4249  f60d				  -	      cpx	#6
   4250  f60d				  -	      beq	carryonmouse1boost
   4251  f60d				  -	      clc
   4252  f60d				  -	      adc	mousex1
   4253  f60d				  -	      sta	mousex1
   4254  f60d				  -	      jmp	LLRET1
   4255  f60d				  -carryonmouse1boost
   4256  f60d				  -	      sta	mousexdelta
   4257  f60d				  -	      clc
   4258  f60d				  -	      adc	mousecodey1
   4259  f60d				  -	      sta	mousecodey1
   4260  f60d				  -	      clc
   4261  f60d				  -	      adc	mousex1
   4262  f60d				  -	      tay		; save the target X
   4263  f60d				  -	      adc	mousey1	; average in the smoothly-trailing X
   4264  f60d				  -	      ror
   4265  f60d				  -	      sta	mousex1	; mousex0 now has the smoothly trailing X
   4266  f60d				  -	      sty	mousey1	; and mousey0 has the the target X
   4267  f60d				  -
   4268  f60d				  -			; check to see if the coordinate wrapped. If so, undo the averaging code.
   4269  f60d				  -			; A has mousex1, the smoothly trailing X
   4270  f60d				  -	      sbc	mousey1	; less the target X
   4271  f60d				  -	      bpl	skipabsolutedrive1
   4272  f60d				  -	      eor	#$ff
   4273  f60d				  -skipabsolutedrive1
   4274  f60d				  -	      cmp	#64	; just an unreasonably large change
   4275  f60d				  -	      bcc	skipdrivewrapfix1
   4276  f60d				  -	      sty	mousex1	; if X wrapped, we catch the trailing X up to the target X
   4277  f60d				  -skipdrivewrapfix1
   4278  f60d				  -
   4279  f60d				  -			; get rid of the tweening if the distance travelled was very small
   4280  f60d				  -	      lda	mousexdelta
   4281  f60d				  -	      cmp	port1resolution
   4282  f60d				  -	      bcs	skipbetweenfix1
   4283  f60d				  -	      lda	mousex1
   4284  f60d				  -	      sta	mousey1
   4285  f60d				  -skipbetweenfix1
   4286  f60d				  -
   4287  f60d				  -drivingboostreductioncheck1
   4288  f60d				  -			; The below code amounts to mousecodey0=mousecodey0-(mousecodey0/8)
   4289  f60d				  -			; +ve mousecodey0 is converted to -ve to do the calculation, and then
   4290  f60d				  -			; negated again because truncation during BCD math results in 
   4291  f60d				  -			; differing magnitudes, depending if the value is  +ve or -ve.
   4292  f60d				  -driving1fix
   4293  f60d				  -	      lax	mousecodey1
   4294  f60d				  -	      cmp	#$80
   4295  f60d				  -	      bcs	driving0skipnegate1
   4296  f60d				  -	      eor	#$FF
   4297  f60d				  -	      adc	#1
   4298  f60d				  -	      sta	mousecodey1
   4299  f60d				  -driving0skipnegate1
   4300  f60d				  -	      cmp	#$80
   4301  f60d				  -	      ror
   4302  f60d				  -	      cmp	#$80
   4303  f60d				  -	      ror
   4304  f60d				  -	      cmp	#$80
   4305  f60d				  -	      ror
   4306  f60d				  -	      sta	inttemp1
   4307  f60d				  -	      lda	mousecodey1
   4308  f60d				  -	      sec
   4309  f60d				  -	      sbc	inttemp1
   4310  f60d				  -	      cpx	#$80
   4311  f60d				  -	      bcs	driving1skipnegate2
   4312  f60d				  -	      eor	#$FF
   4313  f60d				  -	      adc	#1
   4314  f60d				  -driving1skipnegate2
   4315  f60d				  -	      sta	mousecodey1
   4316  f60d				  -drivingboostdone1
   4317  f60d				  -	      endif		; DRIVINGBOOST
   4318  f60d				  -
   4319  f60d				  -	      jmp	LLRET1
   4320  f60d				  -
   4321  f60d					      endif		; MOUSE1SUPPORT
   4322  f60d
   4323  f60d
   4324  f60d				   trakball0update
   4325  f60d				  -	      ifconst	TRAKBALL0SUPPORT
   4326  f60d				  -	      ifnconst	TRAKTIME
   4327  f60d				  -	      ifnconst	TRAKXONLY
   4328  f60d				  -	      lda	#180	; minimum for x+y
   4329  f60d				  -	      else		;  !TRAKXONLY
   4330  f60d				  -	      lda	#100	; minimum for just x
   4331  f60d				  -	      endif		; !TRAKXONLY
   4332  f60d				  -	      else		; !TRAKTIME
   4333  f60d				  -	      lda	#TRAKTIME
   4334  f60d				  -	      endif		; !TRAKTIME
   4335  f60d				  -	      jsr	SETTIM64T	; INTIM is in Y
   4336  f60d				  -	      ldx	#0
   4337  f60d				  -	      ifnconst	TRAKXONLY
   4338  f60d				  -	      ldy	#0
   4339  f60d				  -	      endif		;  TRAKXONLY
   4340  f60d				  -trakball0updateloop
   4341  f60d				  -	      lda	SWCHA
   4342  f60d				  -	      and	#%00110000
   4343  f60d				  -	      cmp	trakballcodex0
   4344  f60d				  -	      sta	trakballcodex0
   4345  f60d				  -	      beq	trakball0movementXdone
   4346  f60d				  -	      and	#%00010000
   4347  f60d				  -	      beq	trakball0negativeX
   4348  f60d				  -trakball0positiveX
   4349  f60d				  -			;(2 from beq)
   4350  f60d				  -	      inx		; 2
   4351  f60d				  -	      jmp	trakball0movementXdone	; 3
   4352  f60d				  -trakball0negativeX
   4353  f60d				  -			;(3 from beq)
   4354  f60d				  -	      dex		; 2
   4355  f60d				  -	      nop		; 2
   4356  f60d				  -trakball0movementXdone
   4357  f60d				  -
   4358  f60d				  -	      ifnconst	TRAKXONLY
   4359  f60d				  -	      lda	SWCHA
   4360  f60d				  -	      and	#%11000000
   4361  f60d				  -	      cmp	trakballcodey0
   4362  f60d				  -	      sta	trakballcodey0
   4363  f60d				  -	      beq	trakball0movementYdone
   4364  f60d				  -	      and	#%01000000
   4365  f60d				  -	      beq	trakball0negativeY
   4366  f60d				  -trakball0positiveY
   4367  f60d				  -			;(2 from beq)
   4368  f60d				  -	      iny		; 2
   4369  f60d				  -	      jmp	trakball0movementYdone	; 3
   4370  f60d				  -trakball0negativeY
   4371  f60d				  -			;(3 from beq)
   4372  f60d				  -	      dey		; 2
   4373  f60d				  -	      nop		; 2
   4374  f60d				  -trakball0movementYdone
   4375  f60d				  -	      endif		; !TRAKXONLY
   4376  f60d				  -
   4377  f60d				  -	      lda	TIMINT
   4378  f60d				  -	      bpl	trakball0updateloop
   4379  f60d				  -	      lda	#0
   4380  f60d				  -	      cpx	#0
   4381  f60d				  -	      beq	trakball0skipXadjust
   4382  f60d				  -	      clc
   4383  f60d				  -trakball0Xloop
   4384  f60d				  -	      adc	port0resolution
   4385  f60d				  -	      dex
   4386  f60d				  -	      bne	trakball0Xloop
   4387  f60d				  -	      clc
   4388  f60d				  -	      adc	trakballx0
   4389  f60d				  -	      sta	trakballx0
   4390  f60d				  -trakball0skipXadjust
   4391  f60d				  -	      ifnconst	TRAKXONLY
   4392  f60d				  -	      lda	#0
   4393  f60d				  -	      cpy	#0
   4394  f60d				  -	      beq	trakball0skipYadjust
   4395  f60d				  -	      clc
   4396  f60d				  -trakball0yloop
   4397  f60d				  -	      adc	port0resolution
   4398  f60d				  -	      dey
   4399  f60d				  -	      bne	trakball0yloop
   4400  f60d				  -	      clc
   4401  f60d				  -	      adc	trakbally0
   4402  f60d				  -	      sta	trakbally0
   4403  f60d				  -trakball0skipYadjust
   4404  f60d				  -	      endif		; !TRAKXONLY
   4405  f60d				  -
   4406  f60d				  -	      jmp	LLRET0
   4407  f60d					      endif
   4408  f60d
   4409  f60d
   4410  f60d
   4411  f60d				   trakball1update
   4412  f60d				  -	      ifconst	TRAKBALL1SUPPORT
   4413  f60d				  -	      ifnconst	TRAKTIME
   4414  f60d				  -	      ifnconst	TRAKXONLY
   4415  f60d				  -	      lda	#180	; minimum for x+y
   4416  f60d				  -	      else		;  !TRAKXONLY
   4417  f60d				  -	      lda	#100	; minimum for just x
   4418  f60d				  -	      endif		; !TRAKXONLY
   4419  f60d				  -	      else		; !TRAKTIME
   4420  f60d				  -	      lda	#TRAKTIME
   4421  f60d				  -	      endif		; !TRAKTIME
   4422  f60d				  -	      jsr	SETTIM64T	; INTIM is in Y
   4423  f60d				  -	      ldx	#0
   4424  f60d				  -	      ifnconst	TRAKXONLY
   4425  f60d				  -	      ldy	#0
   4426  f60d				  -	      endif		;  TRAKXONLY
   4427  f60d				  -trakball1updateloop
   4428  f60d				  -	      lda	SWCHA
   4429  f60d				  -	      and	#%00000011
   4430  f60d				  -	      cmp	trakballcodex1
   4431  f60d				  -	      sta	trakballcodex1
   4432  f60d				  -	      beq	trakball1movementXdone
   4433  f60d				  -	      and	#%00000001
   4434  f60d				  -	      beq	trakball1negativeX
   4435  f60d				  -trakball1positiveX
   4436  f60d				  -			;(2 from beq)
   4437  f60d				  -	      inx		; 2
   4438  f60d				  -	      jmp	trakball1movementXdone	; 3
   4439  f60d				  -trakball1negativeX
   4440  f60d				  -			;(3 from beq)
   4441  f60d				  -	      dex		; 2
   4442  f60d				  -	      nop		; 2
   4443  f60d				  -trakball1movementXdone
   4444  f60d				  -
   4445  f60d				  -	      ifnconst	TRAKXONLY
   4446  f60d				  -	      lda	SWCHA
   4447  f60d				  -	      and	#%00001100
   4448  f60d				  -	      cmp	trakballcodey1
   4449  f60d				  -	      sta	trakballcodey1
   4450  f60d				  -	      beq	trakball1movementYdone
   4451  f60d				  -	      and	#%00000100
   4452  f60d				  -	      beq	trakball1negativeY
   4453  f60d				  -trakball1positiveY
   4454  f60d				  -			;(2 from beq)
   4455  f60d				  -	      iny		; 2
   4456  f60d				  -	      jmp	trakball1movementYdone	; 3
   4457  f60d				  -trakball1negativeY
   4458  f60d				  -			;(3 from beq)
   4459  f60d				  -	      dey		; 2
   4460  f60d				  -	      nop		; 2
   4461  f60d				  -trakball1movementYdone
   4462  f60d				  -	      endif		; !TRAKXONLY
   4463  f60d				  -
   4464  f60d				  -	      lda	TIMINT
   4465  f60d				  -	      bpl	trakball1updateloop
   4466  f60d				  -	      lda	#0
   4467  f60d				  -	      cpx	#0
   4468  f60d				  -	      beq	trakball1skipXadjust
   4469  f60d				  -	      clc
   4470  f60d				  -trakball1Xloop
   4471  f60d				  -	      adc	port1resolution
   4472  f60d				  -	      dex
   4473  f60d				  -	      bne	trakball1Xloop
   4474  f60d				  -	      clc
   4475  f60d				  -	      adc	trakballx1
   4476  f60d				  -	      sta	trakballx1
   4477  f60d				  -trakball1skipXadjust
   4478  f60d				  -	      ifnconst	TRAKXONLY
   4479  f60d				  -	      lda	#0
   4480  f60d				  -	      cpy	#0
   4481  f60d				  -	      beq	trakball1skipYadjust
   4482  f60d				  -	      clc
   4483  f60d				  -trakball1yloop
   4484  f60d				  -	      adc	port1resolution
   4485  f60d				  -	      dey
   4486  f60d				  -	      bne	trakball1yloop
   4487  f60d				  -	      clc
   4488  f60d				  -	      adc	trakbally1
   4489  f60d				  -	      sta	trakbally1
   4490  f60d				  -trakball1skipYadjust
   4491  f60d				  -	      endif		; !TRAKXONLY
   4492  f60d				  -
   4493  f60d				  -	      jmp	LLRET1
   4494  f60d					      endif
   4495  f60d
   4496  f60d
   4497  f60d				   paddleport0update
   4498  f60d				  -	      ifconst	PADDLE0SUPPORT
   4499  f60d				  -	      lda	#6
   4500  f60d				  -	      sta	VBLANK	; start charging the paddle caps
   4501  f60d				  -	      lda	#0	; use PADDLE timing
   4502  f60d				  -	      jsr	SETTIM64T	; INTIM is in Y
   4503  f60d				  -
   4504  f60d				  -paddleport0updateloop
   4505  f60d				  -	      lda	INPT0
   4506  f60d				  -	      bmi	skippaddle0setposition
   4507  f60d				  -	      sty	paddleposition0
   4508  f60d				  -skippaddle0setposition
   4509  f60d				  -	      ifconst	TWOPADDLESUPPORT
   4510  f60d				  -	      lda	INPT1
   4511  f60d				  -	      bmi	skippaddle1setposition
   4512  f60d				  -	      sty	paddleposition1
   4513  f60d				  -skippaddle1setposition
   4514  f60d				  -	      endif
   4515  f60d				  -	      ldy	INTIM
   4516  f60d				  -	      cpy	#TIMEOFFSET
   4517  f60d				  -	      bcs	paddleport0updateloop
   4518  f60d				  -
   4519  f60d				  -	      lda	#%10000110
   4520  f60d				  -	      sta	VBLANK	; dump paddles to ground... this may not be great for genesis controllers
   4521  f60d				  -	      sec
   4522  f60d				  -	      lda	paddleposition0
   4523  f60d				  -	      sbc	#TIMEOFFSET
   4524  f60d				  -	      ifconst	PADDLESCALEX2
   4525  f60d				  -	      asl
   4526  f60d				  -	      endif
   4527  f60d				  -
   4528  f60d				  -	      ifnconst	PADDLESMOOTHINGOFF
   4529  f60d				  -	      clc
   4530  f60d				  -	      adc	paddleprevious0
   4531  f60d				  -	      ror
   4532  f60d				  -	      sta	paddleprevious0
   4533  f60d				  -	      endif
   4534  f60d				  -
   4535  f60d				  -	      sta	paddleposition0
   4536  f60d				  -
   4537  f60d				  -	      ifconst	TWOPADDLESUPPORT
   4538  f60d				  -	      sec
   4539  f60d				  -	      lda	paddleposition1
   4540  f60d				  -	      sbc	#TIMEOFFSET
   4541  f60d				  -	      ifconst	PADDLESCALEX2
   4542  f60d				  -	      asl
   4543  f60d				  -	      endif
   4544  f60d				  -
   4545  f60d				  -	      ifnconst	PADDLESMOOTHINGOFF
   4546  f60d				  -	      clc
   4547  f60d				  -	      adc	paddleprevious1
   4548  f60d				  -	      ror
   4549  f60d				  -	      sta	paddleprevious1
   4550  f60d				  -	      endif
   4551  f60d				  -	      sta	paddleposition1
   4552  f60d				  -	      endif		; TWOPADDLESUPPORT
   4553  f60d				  -
   4554  f60d				  -	      jmp	LLRET0
   4555  f60d					      endif
   4556  f60d
   4557  f60d				   paddleport1update
   4558  f60d				  -	      ifconst	PADDLE1SUPPORT
   4559  f60d				  -	      lda	#6
   4560  f60d				  -	      sta	VBLANK	; start charging the paddle caps
   4561  f60d				  -
   4562  f60d				  -	      lda	#0	; use PADDLE timing
   4563  f60d				  -	      jsr	SETTIM64T	; INTIM is in Y
   4564  f60d				  -
   4565  f60d				  -paddleport1updateloop
   4566  f60d				  -	      lda	INPT2
   4567  f60d				  -	      bmi	skippaddle2setposition
   4568  f60d				  -	      sty	paddleposition2
   4569  f60d				  -skippaddle2setposition
   4570  f60d				  -	      ifconst	TWOPADDLESUPPORT
   4571  f60d				  -	      lda	INPT3
   4572  f60d				  -	      bmi	skippaddle3setposition
   4573  f60d				  -	      sty	paddleposition3
   4574  f60d				  -skippaddle3setposition
   4575  f60d				  -	      endif
   4576  f60d				  -	      ldy	INTIM
   4577  f60d				  -	      cpy	#TIMEOFFSET
   4578  f60d				  -	      bcs	paddleport1updateloop
   4579  f60d				  -
   4580  f60d				  -	      lda	#%10000110
   4581  f60d				  -	      sta	VBLANK	; dump paddles to ground... this may not be great for genesis controllers
   4582  f60d				  -	      sec
   4583  f60d				  -	      lda	paddleposition2
   4584  f60d				  -	      sbc	#TIMEOFFSET
   4585  f60d				  -	      ifconst	PADDLESCALEX2
   4586  f60d				  -	      asl
   4587  f60d				  -	      endif
   4588  f60d				  -
   4589  f60d				  -	      ifnconst	PADDLESMOOTHINGOFF
   4590  f60d				  -	      clc
   4591  f60d				  -	      adc	paddleprevious2
   4592  f60d				  -	      ror
   4593  f60d				  -	      sta	paddleprevious2
   4594  f60d				  -	      endif
   4595  f60d				  -
   4596  f60d				  -	      sta	paddleposition2
   4597  f60d				  -
   4598  f60d				  -	      ifconst	TWOPADDLESUPPORT
   4599  f60d				  -	      sec
   4600  f60d				  -	      lda	paddleposition3
   4601  f60d				  -	      sbc	#TIMEOFFSET
   4602  f60d				  -	      ifconst	PADDLESCALEX2
   4603  f60d				  -	      asl
   4604  f60d				  -	      endif
   4605  f60d				  -
   4606  f60d				  -	      ifnconst	PADDLESMOOTHINGOFF
   4607  f60d				  -	      clc
   4608  f60d				  -	      adc	paddleprevious3
   4609  f60d				  -	      ror
   4610  f60d				  -	      sta	paddleprevious3
   4611  f60d				  -	      endif
   4612  f60d				  -	      sta	paddleposition3
   4613  f60d				  -	      endif		; TWOPADDLESUPPORT
   4614  f60d				  -
   4615  f60d				  -	      jmp	LLRET1
   4616  f60d					      endif
   4617  f60d
   4618  f60d
   4619  f60d				   paddlebuttonhandler		; outside of conditional, for button-handler LUT
   4620  f60d				  -	      ifconst	PADDLESUPPORT
   4621  f60d				  -			; x=0|1 for port, rather than paddle #. 
   4622  f60d				  -			; Only the first paddle button will integrate into "joy0fire" testing. If the
   4623  f60d				  -			; game wants to support 2 paddles, up to the game to instead test the 
   4624  f60d				  -			; joystick right+left directions instead.
   4625  f60d				  -	      lda	SWCHA	; top of nibble is first paddle button
   4626  f60d				  -	      cpx	#0	; port 0?
   4627  f60d				  -	      beq	skippaddleport2shift
   4628  f60d				  -	      asl		; shift second port to upper nibble
   4629  f60d				  -	      asl
   4630  f60d				  -	      asl
   4631  f60d				  -	      asl
   4632  f60d				  -skippaddleport2shift
   4633  f60d				  -	      and	#%10000000
   4634  f60d				  -	      eor	#%10000000	; invert
   4635  f60d				  -	      sta	sINPT1,x
   4636  f60d				  -	      jmp	buttonreadloopreturn
   4637  f60d					      endif		; PADDLESUPPORT
   4638  f60d
   4639  f60d				   mousebuttonhandler		; outside of conditional, for button-handler LUT
   4640  f60d				  -	      ifconst	MOUSESUPPORT
   4641  f60d				  -			; stick the mouse buttons in the correct shadow register...
   4642  f60d				  -	      txa
   4643  f60d				  -	      asl
   4644  f60d				  -	      tay		; y=x*2
   4645  f60d				  -	      lda	INPT4,x
   4646  f60d				  -	      eor	#%10000000
   4647  f60d				  -	      lsr
   4648  f60d				  -	      sta	sINPT1,x
   4649  f60d				  -
   4650  f60d				  -	      lda	INPT1,y
   4651  f60d				  -	      and	#%10000000
   4652  f60d				  -	      eor	#%10000000
   4653  f60d				  -	      ora	sINPT1,x
   4654  f60d				  -	      sta	sINPT1,x
   4655  f60d				  -	      jmp	buttonreadloopreturn
   4656  f60d					      endif		; MOUSESUPPORT
   4657  f60d
   4658  f60d				  -	      ifconst	KEYPADSUPPORT
   4659  f60d				  -			; ** select keypad rows 0 to 3 over 4 frames...
   4660  f60d				  -keypadrowselect
   4661  f60d				  -	      inc	keypadcounter
   4662  f60d				  -	      ldy	#0
   4663  f60d				  -	      lda	port0control
   4664  f60d				  -	      cmp	#7
   4665  f60d				  -	      bne	skipport0val
   4666  f60d				  -	      iny		; y=y+1
   4667  f60d				  -skipport0val
   4668  f60d				  -	      lda	port1control
   4669  f60d				  -	      cmp	#7
   4670  f60d				  -	      bne	skipport1val
   4671  f60d				  -	      iny
   4672  f60d				  -	      iny		; y=y+2
   4673  f60d				  -skipport1val
   4674  f60d				  -	      cpy	#0
   4675  f60d				  -	      beq	exitkeypadrowselect
   4676  f60d				  -	      lda	keyrowdirectionmask,y
   4677  f60d				  -	      sta	CTLSWA
   4678  f60d				  -	      tya
   4679  f60d				  -	      asl
   4680  f60d				  -	      asl
   4681  f60d				  -	      sta	inttemp1
   4682  f60d				  -	      lda	keypadcounter
   4683  f60d				  -	      and	#3
   4684  f60d				  -	      ora	inttemp1
   4685  f60d				  -	      tax
   4686  f60d				  -	      lda	keyrowselectvalue,x
   4687  f60d				  -	      sta	SWCHA
   4688  f60d				  -exitkeypadrowselect
   4689  f60d				  -	      rts
   4690  f60d				  -
   4691  f60d				  -keyrowdirectionmask
   4692  f60d				  -	      .byte	#%00000000	; 0 : port0=input  port1=input
   4693  f60d				  -	      .byte	#%11110000	; 1 : port0=output port1=input
   4694  f60d				  -	      .byte	#%00001111	; 2 : port0=input  port1=output
   4695  f60d				  -	      .byte	#%11111111	; 3 : port0=output port1=output
   4696  f60d				  -
   4697  f60d				  -keyrowselectvalue
   4698  f60d				  -	      .byte	#%00000000, #%00000000, #%00000000, #%00000000	; no row selected, all pins high, always
   4699  f60d				  -	      .byte	#%11100000, #%11010000, #%10110000, #%01110000	; p0 keypad in
   4700  f60d				  -	      .byte	#%00001110, #%00001101, #%00001011, #%00000111	; p1 keypad in
   4701  f60d				  -	      .byte	#%11101110, #%11011101, #%10111011, #%01110111	; p0+p1 keypads in
   4702  f60d					      endif		;  KEYPADSUPPORT
   4703  f60d
   4704  f60d				  -	      ifconst	KEYPADSUPPORT
   4705  f60d				  -			; TODO - split into compile-time KEYPAD0SUPPORT and KEYPAD1SUPPORT
   4706  f60d				  -keypadcolumnread
   4707  f60d				  -	      lda	port0control
   4708  f60d				  -	      cmp	#7
   4709  f60d				  -	      bne	skipkeypadcolumnread0
   4710  f60d				  -	      lda	keypadcounter
   4711  f60d				  -	      and	#3
   4712  f60d				  -	      asl		; x2 because keypad variables are interleaved
   4713  f60d				  -	      tax
   4714  f60d				  -	      lda	#0
   4715  f60d				  -	      sta	keypadmatrix0a,x
   4716  f60d				  -	      lda	INPT0
   4717  f60d				  -	      cmp	#$80
   4718  f60d				  -	      rol	keypadmatrix0a,x
   4719  f60d				  -	      lda	INPT1
   4720  f60d				  -	      cmp	#$80
   4721  f60d				  -	      rol	keypadmatrix0a,x
   4722  f60d				  -	      lda	INPT4
   4723  f60d				  -	      cmp	#$80
   4724  f60d				  -	      rol	keypadmatrix0a,x
   4725  f60d				  -	      lda	keypadmatrix0a,x
   4726  f60d				  -	      eor	#%00000111
   4727  f60d				  -	      sta	keypadmatrix0a,x
   4728  f60d				  -skipkeypadcolumnread0
   4729  f60d				  -
   4730  f60d				  -	      lda	port1control
   4731  f60d				  -	      cmp	#7
   4732  f60d				  -	      bne	skipkeypadcolumnread1
   4733  f60d				  -	      lda	keypadcounter
   4734  f60d				  -	      and	#3
   4735  f60d				  -	      asl		; x2 because keypad variables are interleaved
   4736  f60d				  -	      tax
   4737  f60d				  -	      lda	#0
   4738  f60d				  -	      sta	keypadmatrix1a,x
   4739  f60d				  -	      rol	keypadmatrix1a,x
   4740  f60d				  -	      lda	INPT2
   4741  f60d				  -	      cmp	#$80
   4742  f60d				  -	      rol	keypadmatrix1a,x
   4743  f60d				  -	      lda	INPT3
   4744  f60d				  -	      cmp	#$80
   4745  f60d				  -	      rol	keypadmatrix1a,x
   4746  f60d				  -	      lda	INPT5
   4747  f60d				  -	      cmp	#$80
   4748  f60d				  -	      rol	keypadmatrix1a,x
   4749  f60d				  -	      lda	keypadmatrix1a,x
   4750  f60d				  -	      eor	#%00000111
   4751  f60d				  -	      sta	keypadmatrix1a,x
   4752  f60d				  -skipkeypadcolumnread1
   4753  f60d				  -	      rts
   4754  f60d					      endif		; KEYPADSUPPORT
   4755  f60d
   4756  f60d				   setportforinput
   4757  f60d		       a5 e4		      lda	CTLSWAs
   4758  f60f		       3d 18 f6 	      and	allpinsinputlut,x
   4759  f612		       85 e4		      sta	CTLSWAs
   4760  f614		       8d 81 02 	      sta	CTLSWA
   4761  f617		       60		      rts
   4762  f618
   4763  f618				   allpinsinputlut
   4764  f618		       0f f0		      .byte.b	$0F, $F0
   4765  f61a
   4766  f61a				   setonebuttonmode
   4767  f61a		       a9 06		      lda	#6	; in case we're in unlocked-bios mode
   4768  f61c		       85 01		      sta	VBLANK	; if we were on paddles, the line is grounded out.
   4769  f61e		       a9 14		      lda	#$14
   4770  f620		       8d 83 02 	      sta	CTLSWB	; set both 2-button disable bits to writable
   4771  f623		       a5 e5		      lda	CTLSWBs
   4772  f625		       1d 2e f6 	      ora	thisjoy2buttonbit,x
   4773  f628		       85 e5		      sta	CTLSWBs
   4774  f62a		       8d 82 02 	      sta	SWCHB	; turn off the 2-button disable bits
   4775  f62d		       60		      rts
   4776  f62e
   4777  f62e				   thisjoy2buttonbit
   4778  f62e		       04 10		      .byte.b	$04, $10
   4779  f630
   4780  f630				   settwobuttonmode
   4781  f630		       a9 06		      lda	#6	; in case we're in unlocked-bios mode
   4782  f632		       85 01		      sta	VBLANK	; if we were on paddles, the line is grounded out.
   4783  f634		       a9 14		      lda	#$14
   4784  f636		       8d 83 02 	      sta	CTLSWB	; set both 2-button disable bits to writable
   4785  f639		       a5 e5		      lda	CTLSWBs
   4786  f63b		       3d 44 f6 	      and	thisjoy2buttonmask,x
   4787  f63e		       85 e5		      sta	CTLSWBs
   4788  f640		       8d 82 02 	      sta	SWCHB
   4789  f643		       60		      rts
   4790  f644
   4791  f644				   thisjoy2buttonmask
   4792  f644		       fb ef		      .byte.b	$fb, $ef
   4793  f646
   4794  f646							; Provided under the CC0 license. See the included LICENSE.txt for details.
   4795  f646
   4796  f646				   START
   4797  f646				   start
   4798  f646
   4799  f646							;******** more or less the Atari recommended startup procedure
   4800  f646
   4801  f646		       78		      sei
   4802  f647		       d8		      cld
   4803  f648
   4804  f648					      ifnconst	NOTIALOCK
   4805  f648		       a9 07		      lda	#$07
   4806  f64a				  -	      else
   4807  f64a				  -	      lda	#$06
   4808  f64a					      endif
   4809  f64a		       85 01		      sta	INPTCTRL	;lock 7800 into 7800 mode
   4810  f64c		       a9 7f		      lda	#$7F
   4811  f64e		       85 3c		      sta	CTRL	;disable DMA
   4812  f650		       a9 00		      lda	#$00
   4813  f652		       85 38		      sta	OFFSET
   4814  f654					      ifnconst	NOTIALOCK
   4815  f654		       85 01		      sta	INPTCTRL
   4816  f656		       85 20		      sta	BACKGRND	; black default, in case a flash cart is using something else
   4817  f658					      endif
   4818  f658		       a2 ff		      ldx	#$FF
   4819  f65a		       9a		      txs
   4820  f65b
   4821  f65b							;************** Clear Memory
   4822  f65b
   4823  f65b							; ** Clear 1800-27FF, pg0+pg1 memory.
   4824  f65b				   ClearMemPages
   4825  f65b		       a9 00		      lda	#0
   4826  f65d		       a8		      tay		; y=0
   4827  f65e		       85 80		      sta	$80
   4828  f660		       a2 18		      ldx	#$18
   4829  f662				   ClearMemPagesLoop
   4830  f662		       86 81		      stx	$81	; needed for when we step on ZP memory
   4831  f664		       91 80		      sta	($80),y	;Store data
   4832  f666		       c8		      iny		;Next byte
   4833  f667		       d0 f9		      bne	ClearMemPagesLoop
   4834  f669		       e8		      inx
   4835  f66a		       e0 28		      cpx	#$28
   4836  f66c		       d0 f4		      bne	ClearMemPagesLoop
   4837  f66e		       85 81		      sta	$81
   4838  f670
   4839  f670							;seed random number with hopefully-random timer value
   4840  f670		       a9 01		      lda	#1
   4841  f672		       0d 84 02 	      ora	INTIM
   4842  f675		       85 40		      sta	rand
   4843  f677
   4844  f677							; detect the console type...
   4845  f677				   pndetectvblankstart
   4846  f677		       a5 28		      lda	MSTAT
   4847  f679		       10 fc		      bpl	pndetectvblankstart	; if we're not in VBLANK, wait for it to start 
   4848  f67b				   pndetectvblankover
   4849  f67b		       a5 28		      lda	MSTAT
   4850  f67d		       30 fc		      bmi	pndetectvblankover	;  then wait for it to be over
   4851  f67f		       a0 00		      ldy	#$00
   4852  f681		       a2 00		      ldx	#$00
   4853  f683				   pndetectvblankhappening
   4854  f683		       a5 28		      lda	MSTAT
   4855  f685		       30 07		      bmi	pndetectinvblank	;  if VBLANK starts, exit our counting loop 
   4856  f687		       85 24		      sta	WSYNC
   4857  f689		       85 24		      sta	WSYNC
   4858  f68b		       e8		      inx
   4859  f68c		       d0 f5		      bne	pndetectvblankhappening
   4860  f68e				   pndetectinvblank
   4861  f68e		       e0 7d		      cpx	#125
   4862  f690		       90 02		      bcc	pndetecispal
   4863  f692		       a0 01		      ldy	#$01
   4864  f694				   pndetecispal
   4865  f694		       8c 09 21 	      sty	paldetected
   4866  f697
   4867  f697		       20 c6 f4 	      jsr	createallgamedlls
   4868  f69a
   4869  f69a		       a9 18		      lda	#>DLLMEM
   4870  f69c		       85 2c		      sta	DPPH
   4871  f69e		       a9 00		      lda	#<DLLMEM
   4872  f6a0		       85 30		      sta	DPPL
   4873  f6a2
   4874  f6a2				  -	      ifconst	pokeysupport
   4875  f6a2				  -			; pokey support is compiled in, so try to detect it...
   4876  f6a2				  -	      jsr	detectpokeylocation
   4877  f6a2					      endif
   4878  f6a2
   4879  f6a2		       a9 01		      lda	#1	; default for port 0 and 1 is a regular joystick
   4880  f6a4		       8d b9 01 	      sta	port0control
   4881  f6a7		       8d ba 01 	      sta	port1control
   4882  f6aa
   4883  f6aa							;Setup port A to read mode
   4884  f6aa							;lda #$00
   4885  f6aa							;sta SWCHA
   4886  f6aa							;sta CTLSWA
   4887  f6aa
   4888  f6aa				  -	      ifconst	HSSUPPORT
   4889  f6aa				  -	      ifconst	bankswitchmode
   4890  f6aa				  -	      ifconst	included.hiscore.asm.bank
   4891  f6aa				  -	      ifconst	MCPDEVCART
   4892  f6aa				  -	      lda	#($18 | included.hiscore.asm.bank)
   4893  f6aa				  -	      ifconst	dumpbankswitch
   4894  f6aa				  -	      sta	dumpbankswitch
   4895  f6aa				  -	      endif
   4896  f6aa				  -	      sta	$3000
   4897  f6aa				  -	      else
   4898  f6aa				  -	      lda	#(included.hiscore.asm.bank)
   4899  f6aa				  -	      ifconst	dumpbankswitch
   4900  f6aa				  -	      sta	dumpbankswitch
   4901  f6aa				  -	      endif
   4902  f6aa				  -	      sta	$8000
   4903  f6aa				  -	      endif
   4904  f6aa				  -	      endif		; included.hiscore.asm.bank
   4905  f6aa				  -	      endif		; bankswitchmode
   4906  f6aa				  -			; try to detect HSC
   4907  f6aa				  -	      jsr	detecthsc
   4908  f6aa				  -	      and	#1
   4909  f6aa				  -	      sta	hsdevice
   4910  f6aa				  -skipHSCdetect
   4911  f6aa				  -			; try to detect AtariVox eeprom
   4912  f6aa				  -	      jsr	detectatarivoxeeprom
   4913  f6aa				  -	      and	#2
   4914  f6aa				  -	      ora	hsdevice
   4915  f6aa				  -	      cmp	#3
   4916  f6aa				  -	      bne	storeAinhsdevice
   4917  f6aa				  -			; For now, we tie break by giving HSC priority over AtariVox.
   4918  f6aa				  -			; Later we should check each device's priority byte if set, instead, 
   4919  f6aa				  -	      lda	#2
   4920  f6aa				  -storeAinhsdevice
   4921  f6aa				  -	      sta	hsdevice
   4922  f6aa				  -	      lda	#$ff
   4923  f6aa				  -	      sta	hsdifficulty
   4924  f6aa				  -	      sta	hsgameslot
   4925  f6aa				  -	      sta	hsnewscoreline
   4926  f6aa					      endif		; HSSUPPORT
   4927  f6aa
   4928  f6aa				  -	      ifconst	AVOXVOICE
   4929  f6aa				  -	      jsr	silenceavoxvoice
   4930  f6aa					      endif
   4931  f6aa
   4932  f6aa				  -	      ifconst	RMT
   4933  f6aa				  -	      ifconst	RMTVOLUME
   4934  f6aa				  -	      lda	#$F0	; default to full RMT volume
   4935  f6aa				  -	      sta	rmtvolume
   4936  f6aa				  -	      ifconst	TIAVOLUME
   4937  f6aa				  -	      sta	tiavolume
   4938  f6aa				  -	      endif		; TIAVOLUME
   4939  f6aa				  -	      endif		; RMTVOLUME
   4940  f6aa					      else		; !RMT
   4941  f6aa				  -	      ifconst	TIAVOLUME
   4942  f6aa				  -	      lda	#$F0	; default to full TIA volume
   4943  f6aa				  -	      sta	tiavolume
   4944  f6aa					      endif		; TIAVOLUME
   4945  f6aa					      endif		; RMT
   4946  f6aa
   4947  f6aa				  -	      ifconst	bankswitchmode
   4948  f6aa				  -			; we need to switch to the first bank as a default. this needs to
   4949  f6aa				  -			; happen before DMA, in case there's a topscreenroutine in bank 0
   4950  f6aa				  -	      ifconst	MCPDEVCART
   4951  f6aa				  -	      lda	#$18	; xxx11nnn - switch to bank 0
   4952  f6aa				  -	      ifconst	dumpbankswitch
   4953  f6aa				  -	      sta	dumpbankswitch
   4954  f6aa				  -	      endif
   4955  f6aa				  -	      sta	$3000
   4956  f6aa				  -	      else
   4957  f6aa				  -	      lda	#0
   4958  f6aa				  -	      ifconst	dumpbankswitch
   4959  f6aa				  -	      sta	dumpbankswitch
   4960  f6aa				  -	      endif
   4961  f6aa				  -	      sta	$8000
   4962  f6aa				  -	      endif
   4963  f6aa					      endif
   4964  f6aa
   4965  f6aa							; CTRL 76543210
   4966  f6aa							; 7 colorburst kill
   4967  f6aa							; 6,5 dma ctrl 2=normal DMA, 3=no DMA
   4968  f6aa							; 4 character width 1=2 byte chars, 0=1 byte chars
   4969  f6aa							; 3 border control 0=background color border, 1=black border
   4970  f6aa							; 2 kangaroo mode 0=transparency, 1=kangaroo
   4971  f6aa							; 1,0 read mode 0=160x2/160x4 1=N/A 2=320B/320D 3=320A/320C
   4972  f6aa
   4973  f6aa				  -	      ifconst	DOUBLEWIDE
   4974  f6aa				  -	      lda	#%01010000	;Enable DMA, mode=160x2/160x4, 2x character width
   4975  f6aa					      else
   4976  f6aa		       a9 40		      lda	#%01000000	;Enable DMA, mode=160x2/160x4
   4977  f6ac					      endif
   4978  f6ac
   4979  f6ac		       20 7a f5 	      jsr	waitforvblankstart	; give the some vblank time to minimally update the display
   4980  f6af
   4981  f6af		       85 3c		      sta	CTRL
   4982  f6b1		       8d 07 21 	      sta	sCTRL
   4983  f6b4
   4984  f6b4		       20 b9 f4 	      jsr	vblankresync
   4985  f6b7
   4986  f6b7		       a2 01		      ldx	#1
   4987  f6b9		       20 30 f6 	      jsr	settwobuttonmode
   4988  f6bc		       a2 00		      ldx	#0
   4989  f6be		       20 30 f6 	      jsr	settwobuttonmode
   4990  f6c1
   4991  f6c1					      ifnconst	.altgamestart
   4992  f6c1		       4c 00 80 	      jmp	game
   4993  f6c4				  -	      else
   4994  f6c4				  -	      jmp	.altgamestart
   4995  f6c4					      endif
   4996  f6c4
   4997  f6c4							; Provided under the CC0 license. See the included LICENSE.txt for details.
   4998  f6c4
   4999  f6c4							;************** Setup DLL entries
   5000  f6c4
   5001  f6c4							; setup some working definitions, to avoid ifnconst mess elsewhere...
   5002  f6c4					      ifnconst	SCREENHEIGHT
   5003  f6c4		       00 c0	   WSCREENHEIGHT =	192
   5004  f6c4				  -	      else
   5005  f6c4				  -WSCREENHEIGHT =	SCREENHEIGHT
   5006  f6c4					      endif
   5007  f6c4
   5008  f6c4				  -	      ifnconst	ZONEHEIGHT
   5009  f6c4				  -WZONEHEIGHT =	16
   5010  f6c4					      else
   5011  f6c4		       00 10	   WZONEHEIGHT =	ZONEHEIGHT
   5012  f6c4					      endif
   5013  f6c4
   5014  f6c4					      ifnconst	ZONECOUNT
   5015  f6c4		       00 0c	   WZONECOUNT =	(WSCREENHEIGHT/WZONEHEIGHT)
   5016  f6c4				  -	      else
   5017  f6c4				  -WZONECOUNT =	ZONECOUNT
   5018  f6c4					      endif
   5019  f6c4
   5020  f6c4							; top of the frame, non-visible lines. this is based on NTSC,
   5021  f6c4							; but we add in extra NV lines at the end of the display to ensure
   5022  f6c4							; our PAL friends can play the game without it crashing.
   5023  f6c4		       00 19	   NVLINES    =	((243-WSCREENHEIGHT)/2)
   5024  f6c4
   5025  f6c4					      ifnconst	DLMEMSTART
   5026  f6c4				  -	      ifnconst	DOUBLEBUFFER
   5027  f6c4				  -WDLMEMSTART =	$1880
   5028  f6c4					      else
   5029  f6c4		       18 e0	   WDLMEMSTART =	$18E0
   5030  f6c4					      endif		; DOUBLEBUFFER
   5031  f6c4				  -	      else
   5032  f6c4				  -WDLMEMSTART =	DLMEMSTART
   5033  f6c4					      endif
   5034  f6c4
   5035  f6c4					      ifnconst	DLMEMEND
   5036  f6c4				  -	      ifconst	EXTRADLMEMORY
   5037  f6c4				  -WDLMEMEND  =	$23FF
   5038  f6c4					      else
   5039  f6c4		       1f ff	   WDLMEMEND  =	$1FFF
   5040  f6c4					      endif
   5041  f6c4				  -	      else
   5042  f6c4				  -WDLMEMEND  =	DLMEMEND
   5043  f6c4					      endif
   5044  f6c4
   5045  f6c4
   5046  f6c4		       07 20	   WMEMSIZE   =	(WDLMEMEND-WDLMEMSTART+1)
   5047  f6c4
   5048  f6c4				  -	      ifnconst	DOUBLEBUFFER
   5049  f6c4				  -DLLASTOBJ  =	((((WMEMSIZE/WZONECOUNT)-2)/5)*5)	; -2 to always ensure we have 1x double-byte terminator
   5050  f6c4					      else
   5051  f6c4		       00 46	   DLLASTOBJ  =	((((WMEMSIZE/WZONECOUNT)-4)/10)*5)	; -4 to always ensure we have 2x double-byte terminators
   5052  f6c4					      endif
   5053  f6c4
   5054  f6c4		       00 48	   TDOUBLEBUFFEROFFSET =	(DLLASTOBJ+2)	; offset between DL buffers. ie. half the real DL
   5055  f6c4				  -	      if	TDOUBLEBUFFEROFFSET > 255
   5056  f6c4				  -DOUBLEBUFFEROFFSET =	255
   5057  f6c4					      else
   5058  f6c4		       00 48	   DOUBLEBUFFEROFFSET =	(DLLASTOBJ+2)
   5059  f6c4					      endif
   5060  f6c4
   5061  f6c4				  -	      ifconst	EXTRADLMEMORY
   5062  f6c4				  -SECONDDLHALFSTART SET	$2300
   5063  f6c4					      endif
   5064  f6c4
   5065  f6c4				   DLPOINTH
   5066  f6c4				   DLINDEX    SET	0
   5067  f6c4					      REPEAT	WZONECOUNT
   5068  f6c4				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5069  f6c4				  -	      ifconst	EXTRADLMEMORY
   5070  f6c4				  -	      if	TMPMEMADDRESS > $1FFF
   5071  f6c4				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5072  f6c4				  -	      else
   5073  f6c4				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5074  f6c4				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5075  f6c4				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   5076  f6c4				  -	      endif
   5077  f6c4				  -	      endif		; TMPMEMADDRESS > $1FFF
   5078  f6c4					      endif		; EXTRADLMEMORY
   5079  f6c4							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   5080  f6c4		       18		      .byte.b	>TMPMEMADDRESS
   5081  f6c4				   DLINDEX    SET	DLINDEX + 1
   5067  f6c4					      REPEND
   5068  f6c4				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5069  f6c5				  -	      ifconst	EXTRADLMEMORY
   5070  f6c5				  -	      if	TMPMEMADDRESS > $1FFF
   5071  f6c5				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5072  f6c5				  -	      else
   5073  f6c5				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5074  f6c5				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5075  f6c5				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   5076  f6c5				  -	      endif
   5077  f6c5				  -	      endif		; TMPMEMADDRESS > $1FFF
   5078  f6c5					      endif		; EXTRADLMEMORY
   5079  f6c5							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   5080  f6c5		       19		      .byte.b	>TMPMEMADDRESS
   5081  f6c5				   DLINDEX    SET	DLINDEX + 1
   5067  f6c5					      REPEND
   5068  f6c5				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5069  f6c6				  -	      ifconst	EXTRADLMEMORY
   5070  f6c6				  -	      if	TMPMEMADDRESS > $1FFF
   5071  f6c6				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5072  f6c6				  -	      else
   5073  f6c6				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5074  f6c6				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5075  f6c6				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   5076  f6c6				  -	      endif
   5077  f6c6				  -	      endif		; TMPMEMADDRESS > $1FFF
   5078  f6c6					      endif		; EXTRADLMEMORY
   5079  f6c6							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   5080  f6c6		       1a		      .byte.b	>TMPMEMADDRESS
   5081  f6c6				   DLINDEX    SET	DLINDEX + 1
   5067  f6c6					      REPEND
   5068  f6c6				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5069  f6c7				  -	      ifconst	EXTRADLMEMORY
   5070  f6c7				  -	      if	TMPMEMADDRESS > $1FFF
   5071  f6c7				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5072  f6c7				  -	      else
   5073  f6c7				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5074  f6c7				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5075  f6c7				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   5076  f6c7				  -	      endif
   5077  f6c7				  -	      endif		; TMPMEMADDRESS > $1FFF
   5078  f6c7					      endif		; EXTRADLMEMORY
   5079  f6c7							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   5080  f6c7		       1a		      .byte.b	>TMPMEMADDRESS
   5081  f6c7				   DLINDEX    SET	DLINDEX + 1
   5067  f6c7					      REPEND
   5068  f6c7				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5069  f6c8				  -	      ifconst	EXTRADLMEMORY
   5070  f6c8				  -	      if	TMPMEMADDRESS > $1FFF
   5071  f6c8				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5072  f6c8				  -	      else
   5073  f6c8				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5074  f6c8				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5075  f6c8				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   5076  f6c8				  -	      endif
   5077  f6c8				  -	      endif		; TMPMEMADDRESS > $1FFF
   5078  f6c8					      endif		; EXTRADLMEMORY
   5079  f6c8							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   5080  f6c8		       1b		      .byte.b	>TMPMEMADDRESS
   5081  f6c8				   DLINDEX    SET	DLINDEX + 1
   5067  f6c8					      REPEND
   5068  f6c8				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5069  f6c9				  -	      ifconst	EXTRADLMEMORY
   5070  f6c9				  -	      if	TMPMEMADDRESS > $1FFF
   5071  f6c9				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5072  f6c9				  -	      else
   5073  f6c9				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5074  f6c9				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5075  f6c9				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   5076  f6c9				  -	      endif
   5077  f6c9				  -	      endif		; TMPMEMADDRESS > $1FFF
   5078  f6c9					      endif		; EXTRADLMEMORY
   5079  f6c9							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   5080  f6c9		       1b		      .byte.b	>TMPMEMADDRESS
   5081  f6c9				   DLINDEX    SET	DLINDEX + 1
   5067  f6c9					      REPEND
   5068  f6c9				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5069  f6ca				  -	      ifconst	EXTRADLMEMORY
   5070  f6ca				  -	      if	TMPMEMADDRESS > $1FFF
   5071  f6ca				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5072  f6ca				  -	      else
   5073  f6ca				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5074  f6ca				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5075  f6ca				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   5076  f6ca				  -	      endif
   5077  f6ca				  -	      endif		; TMPMEMADDRESS > $1FFF
   5078  f6ca					      endif		; EXTRADLMEMORY
   5079  f6ca							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   5080  f6ca		       1c		      .byte.b	>TMPMEMADDRESS
   5081  f6ca				   DLINDEX    SET	DLINDEX + 1
   5067  f6ca					      REPEND
   5068  f6ca				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5069  f6cb				  -	      ifconst	EXTRADLMEMORY
   5070  f6cb				  -	      if	TMPMEMADDRESS > $1FFF
   5071  f6cb				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5072  f6cb				  -	      else
   5073  f6cb				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5074  f6cb				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5075  f6cb				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   5076  f6cb				  -	      endif
   5077  f6cb				  -	      endif		; TMPMEMADDRESS > $1FFF
   5078  f6cb					      endif		; EXTRADLMEMORY
   5079  f6cb							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   5080  f6cb		       1d		      .byte.b	>TMPMEMADDRESS
   5081  f6cb				   DLINDEX    SET	DLINDEX + 1
   5067  f6cb					      REPEND
   5068  f6cb				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5069  f6cc				  -	      ifconst	EXTRADLMEMORY
   5070  f6cc				  -	      if	TMPMEMADDRESS > $1FFF
   5071  f6cc				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5072  f6cc				  -	      else
   5073  f6cc				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5074  f6cc				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5075  f6cc				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   5076  f6cc				  -	      endif
   5077  f6cc				  -	      endif		; TMPMEMADDRESS > $1FFF
   5078  f6cc					      endif		; EXTRADLMEMORY
   5079  f6cc							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   5080  f6cc		       1d		      .byte.b	>TMPMEMADDRESS
   5081  f6cc				   DLINDEX    SET	DLINDEX + 1
   5067  f6cc					      REPEND
   5068  f6cc				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5069  f6cd				  -	      ifconst	EXTRADLMEMORY
   5070  f6cd				  -	      if	TMPMEMADDRESS > $1FFF
   5071  f6cd				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5072  f6cd				  -	      else
   5073  f6cd				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5074  f6cd				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5075  f6cd				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   5076  f6cd				  -	      endif
   5077  f6cd				  -	      endif		; TMPMEMADDRESS > $1FFF
   5078  f6cd					      endif		; EXTRADLMEMORY
   5079  f6cd							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   5080  f6cd		       1e		      .byte.b	>TMPMEMADDRESS
   5081  f6cd				   DLINDEX    SET	DLINDEX + 1
   5067  f6cd					      REPEND
   5068  f6cd				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5069  f6ce				  -	      ifconst	EXTRADLMEMORY
   5070  f6ce				  -	      if	TMPMEMADDRESS > $1FFF
   5071  f6ce				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5072  f6ce				  -	      else
   5073  f6ce				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5074  f6ce				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5075  f6ce				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   5076  f6ce				  -	      endif
   5077  f6ce				  -	      endif		; TMPMEMADDRESS > $1FFF
   5078  f6ce					      endif		; EXTRADLMEMORY
   5079  f6ce							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   5080  f6ce		       1e		      .byte.b	>TMPMEMADDRESS
   5081  f6ce				   DLINDEX    SET	DLINDEX + 1
   5067  f6ce					      REPEND
   5068  f6ce				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5069  f6cf				  -	      ifconst	EXTRADLMEMORY
   5070  f6cf				  -	      if	TMPMEMADDRESS > $1FFF
   5071  f6cf				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5072  f6cf				  -	      else
   5073  f6cf				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5074  f6cf				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5075  f6cf				  -SECONDDLHALFSTART SET	TMPMEMADDRESS
   5076  f6cf				  -	      endif
   5077  f6cf				  -	      endif		; TMPMEMADDRESS > $1FFF
   5078  f6cf					      endif		; EXTRADLMEMORY
   5079  f6cf							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   5080  f6cf		       1f		      .byte.b	>TMPMEMADDRESS
   5081  f6cf				   DLINDEX    SET	DLINDEX + 1
   5082  f6d0					      REPEND
   5083  f6d0
   5084  f6d0				  -	      ifconst	EXTRADLMEMORY
   5085  f6d0				  -	      echo	"   ",[SECONDDLHALFSTART],"to",[$27FF],"was claimed as extra DL memory."
   5086  f6d0					      endif
   5087  f6d0
   5088  f6d0
   5089  f6d0				   DLPOINTL
   5090  f6d0				   DLINDEX    SET	0
   5091  f6d0					      REPEAT	WZONECOUNT
   5092  f6d0				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5093  f6d0				  -	      ifconst	EXTRADLMEMORY
   5094  f6d0				  -	      if	TMPMEMADDRESS > $1FFF
   5095  f6d0				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5096  f6d0				  -	      else
   5097  f6d0				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5098  f6d0				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5099  f6d0				  -	      endif
   5100  f6d0				  -	      endif		; TMPMEMADDRESS > $1FFF
   5101  f6d0					      endif		; EXTRADLMEMORY
   5102  f6d0		       e0		      .byte.b	<TMPMEMADDRESS
   5103  f6d0				   DLINDEX    SET	DLINDEX + 1
   5091  f6d0					      REPEND
   5092  f6d0				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5093  f6d1				  -	      ifconst	EXTRADLMEMORY
   5094  f6d1				  -	      if	TMPMEMADDRESS > $1FFF
   5095  f6d1				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5096  f6d1				  -	      else
   5097  f6d1				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5098  f6d1				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5099  f6d1				  -	      endif
   5100  f6d1				  -	      endif		; TMPMEMADDRESS > $1FFF
   5101  f6d1					      endif		; EXTRADLMEMORY
   5102  f6d1		       78		      .byte.b	<TMPMEMADDRESS
   5103  f6d1				   DLINDEX    SET	DLINDEX + 1
   5091  f6d1					      REPEND
   5092  f6d1				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5093  f6d2				  -	      ifconst	EXTRADLMEMORY
   5094  f6d2				  -	      if	TMPMEMADDRESS > $1FFF
   5095  f6d2				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5096  f6d2				  -	      else
   5097  f6d2				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5098  f6d2				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5099  f6d2				  -	      endif
   5100  f6d2				  -	      endif		; TMPMEMADDRESS > $1FFF
   5101  f6d2					      endif		; EXTRADLMEMORY
   5102  f6d2		       10		      .byte.b	<TMPMEMADDRESS
   5103  f6d2				   DLINDEX    SET	DLINDEX + 1
   5091  f6d2					      REPEND
   5092  f6d2				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5093  f6d3				  -	      ifconst	EXTRADLMEMORY
   5094  f6d3				  -	      if	TMPMEMADDRESS > $1FFF
   5095  f6d3				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5096  f6d3				  -	      else
   5097  f6d3				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5098  f6d3				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5099  f6d3				  -	      endif
   5100  f6d3				  -	      endif		; TMPMEMADDRESS > $1FFF
   5101  f6d3					      endif		; EXTRADLMEMORY
   5102  f6d3		       a8		      .byte.b	<TMPMEMADDRESS
   5103  f6d3				   DLINDEX    SET	DLINDEX + 1
   5091  f6d3					      REPEND
   5092  f6d3				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5093  f6d4				  -	      ifconst	EXTRADLMEMORY
   5094  f6d4				  -	      if	TMPMEMADDRESS > $1FFF
   5095  f6d4				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5096  f6d4				  -	      else
   5097  f6d4				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5098  f6d4				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5099  f6d4				  -	      endif
   5100  f6d4				  -	      endif		; TMPMEMADDRESS > $1FFF
   5101  f6d4					      endif		; EXTRADLMEMORY
   5102  f6d4		       40		      .byte.b	<TMPMEMADDRESS
   5103  f6d4				   DLINDEX    SET	DLINDEX + 1
   5091  f6d4					      REPEND
   5092  f6d4				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5093  f6d5				  -	      ifconst	EXTRADLMEMORY
   5094  f6d5				  -	      if	TMPMEMADDRESS > $1FFF
   5095  f6d5				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5096  f6d5				  -	      else
   5097  f6d5				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5098  f6d5				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5099  f6d5				  -	      endif
   5100  f6d5				  -	      endif		; TMPMEMADDRESS > $1FFF
   5101  f6d5					      endif		; EXTRADLMEMORY
   5102  f6d5		       d8		      .byte.b	<TMPMEMADDRESS
   5103  f6d5				   DLINDEX    SET	DLINDEX + 1
   5091  f6d5					      REPEND
   5092  f6d5				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5093  f6d6				  -	      ifconst	EXTRADLMEMORY
   5094  f6d6				  -	      if	TMPMEMADDRESS > $1FFF
   5095  f6d6				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5096  f6d6				  -	      else
   5097  f6d6				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5098  f6d6				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5099  f6d6				  -	      endif
   5100  f6d6				  -	      endif		; TMPMEMADDRESS > $1FFF
   5101  f6d6					      endif		; EXTRADLMEMORY
   5102  f6d6		       70		      .byte.b	<TMPMEMADDRESS
   5103  f6d6				   DLINDEX    SET	DLINDEX + 1
   5091  f6d6					      REPEND
   5092  f6d6				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5093  f6d7				  -	      ifconst	EXTRADLMEMORY
   5094  f6d7				  -	      if	TMPMEMADDRESS > $1FFF
   5095  f6d7				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5096  f6d7				  -	      else
   5097  f6d7				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5098  f6d7				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5099  f6d7				  -	      endif
   5100  f6d7				  -	      endif		; TMPMEMADDRESS > $1FFF
   5101  f6d7					      endif		; EXTRADLMEMORY
   5102  f6d7		       08		      .byte.b	<TMPMEMADDRESS
   5103  f6d7				   DLINDEX    SET	DLINDEX + 1
   5091  f6d7					      REPEND
   5092  f6d7				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5093  f6d8				  -	      ifconst	EXTRADLMEMORY
   5094  f6d8				  -	      if	TMPMEMADDRESS > $1FFF
   5095  f6d8				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5096  f6d8				  -	      else
   5097  f6d8				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5098  f6d8				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5099  f6d8				  -	      endif
   5100  f6d8				  -	      endif		; TMPMEMADDRESS > $1FFF
   5101  f6d8					      endif		; EXTRADLMEMORY
   5102  f6d8		       a0		      .byte.b	<TMPMEMADDRESS
   5103  f6d8				   DLINDEX    SET	DLINDEX + 1
   5091  f6d8					      REPEND
   5092  f6d8				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5093  f6d9				  -	      ifconst	EXTRADLMEMORY
   5094  f6d9				  -	      if	TMPMEMADDRESS > $1FFF
   5095  f6d9				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5096  f6d9				  -	      else
   5097  f6d9				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5098  f6d9				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5099  f6d9				  -	      endif
   5100  f6d9				  -	      endif		; TMPMEMADDRESS > $1FFF
   5101  f6d9					      endif		; EXTRADLMEMORY
   5102  f6d9		       38		      .byte.b	<TMPMEMADDRESS
   5103  f6d9				   DLINDEX    SET	DLINDEX + 1
   5091  f6d9					      REPEND
   5092  f6d9				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5093  f6da				  -	      ifconst	EXTRADLMEMORY
   5094  f6da				  -	      if	TMPMEMADDRESS > $1FFF
   5095  f6da				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5096  f6da				  -	      else
   5097  f6da				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5098  f6da				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5099  f6da				  -	      endif
   5100  f6da				  -	      endif		; TMPMEMADDRESS > $1FFF
   5101  f6da					      endif		; EXTRADLMEMORY
   5102  f6da		       d0		      .byte.b	<TMPMEMADDRESS
   5103  f6da				   DLINDEX    SET	DLINDEX + 1
   5091  f6da					      REPEND
   5092  f6da				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5093  f6db				  -	      ifconst	EXTRADLMEMORY
   5094  f6db				  -	      if	TMPMEMADDRESS > $1FFF
   5095  f6db				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5096  f6db				  -	      else
   5097  f6db				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5098  f6db				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5099  f6db				  -	      endif
   5100  f6db				  -	      endif		; TMPMEMADDRESS > $1FFF
   5101  f6db					      endif		; EXTRADLMEMORY
   5102  f6db		       68		      .byte.b	<TMPMEMADDRESS
   5103  f6db				   DLINDEX    SET	DLINDEX + 1
   5104  f6dc					      REPEND
   5105  f6dc
   5106  f6dc
   5107  f6dc				   DLINDEX    SET	0
   5108  f6dc					      REPEAT	WZONECOUNT
   5109  f6dc				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5110  f6dc				  -	      ifconst	EXTRADLMEMORY
   5111  f6dc				  -	      if	TMPMEMADDRESS > $1FFF
   5112  f6dc				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5113  f6dc				  -	      else
   5114  f6dc				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5115  f6dc				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5116  f6dc				  -	      endif
   5117  f6dc				  -	      endif		; TMPMEMADDRESS > $1FFF
   5118  f6dc					      endif		; EXTRADLMEMORY
   5119  f6dc
   5120  f6dc		       18 e0	   ZONE0ADDRESS =	TMPMEMADDRESS
   5121  f6dc
   5122  f6dc				   DLINDEX    SET	DLINDEX + 1
   5108  f6dc					      REPEND
   5109  f6dc				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5110  f6dc				  -	      ifconst	EXTRADLMEMORY
   5111  f6dc				  -	      if	TMPMEMADDRESS > $1FFF
   5112  f6dc				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5113  f6dc				  -	      else
   5114  f6dc				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5115  f6dc				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5116  f6dc				  -	      endif
   5117  f6dc				  -	      endif		; TMPMEMADDRESS > $1FFF
   5118  f6dc					      endif		; EXTRADLMEMORY
   5119  f6dc
   5120  f6dc		       19 78	   ZONE1ADDRESS =	TMPMEMADDRESS
   5121  f6dc
   5122  f6dc				   DLINDEX    SET	DLINDEX + 1
   5108  f6dc					      REPEND
   5109  f6dc				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5110  f6dc				  -	      ifconst	EXTRADLMEMORY
   5111  f6dc				  -	      if	TMPMEMADDRESS > $1FFF
   5112  f6dc				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5113  f6dc				  -	      else
   5114  f6dc				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5115  f6dc				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5116  f6dc				  -	      endif
   5117  f6dc				  -	      endif		; TMPMEMADDRESS > $1FFF
   5118  f6dc					      endif		; EXTRADLMEMORY
   5119  f6dc
   5120  f6dc		       1a 10	   ZONE2ADDRESS =	TMPMEMADDRESS
   5121  f6dc
   5122  f6dc				   DLINDEX    SET	DLINDEX + 1
   5108  f6dc					      REPEND
   5109  f6dc				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5110  f6dc				  -	      ifconst	EXTRADLMEMORY
   5111  f6dc				  -	      if	TMPMEMADDRESS > $1FFF
   5112  f6dc				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5113  f6dc				  -	      else
   5114  f6dc				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5115  f6dc				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5116  f6dc				  -	      endif
   5117  f6dc				  -	      endif		; TMPMEMADDRESS > $1FFF
   5118  f6dc					      endif		; EXTRADLMEMORY
   5119  f6dc
   5120  f6dc		       1a a8	   ZONE3ADDRESS =	TMPMEMADDRESS
   5121  f6dc
   5122  f6dc				   DLINDEX    SET	DLINDEX + 1
   5108  f6dc					      REPEND
   5109  f6dc				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5110  f6dc				  -	      ifconst	EXTRADLMEMORY
   5111  f6dc				  -	      if	TMPMEMADDRESS > $1FFF
   5112  f6dc				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5113  f6dc				  -	      else
   5114  f6dc				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5115  f6dc				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5116  f6dc				  -	      endif
   5117  f6dc				  -	      endif		; TMPMEMADDRESS > $1FFF
   5118  f6dc					      endif		; EXTRADLMEMORY
   5119  f6dc
   5120  f6dc		       1b 40	   ZONE4ADDRESS =	TMPMEMADDRESS
   5121  f6dc
   5122  f6dc				   DLINDEX    SET	DLINDEX + 1
   5108  f6dc					      REPEND
   5109  f6dc				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5110  f6dc				  -	      ifconst	EXTRADLMEMORY
   5111  f6dc				  -	      if	TMPMEMADDRESS > $1FFF
   5112  f6dc				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5113  f6dc				  -	      else
   5114  f6dc				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5115  f6dc				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5116  f6dc				  -	      endif
   5117  f6dc				  -	      endif		; TMPMEMADDRESS > $1FFF
   5118  f6dc					      endif		; EXTRADLMEMORY
   5119  f6dc
   5120  f6dc		       1b d8	   ZONE5ADDRESS =	TMPMEMADDRESS
   5121  f6dc
   5122  f6dc				   DLINDEX    SET	DLINDEX + 1
   5108  f6dc					      REPEND
   5109  f6dc				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5110  f6dc				  -	      ifconst	EXTRADLMEMORY
   5111  f6dc				  -	      if	TMPMEMADDRESS > $1FFF
   5112  f6dc				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5113  f6dc				  -	      else
   5114  f6dc				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5115  f6dc				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5116  f6dc				  -	      endif
   5117  f6dc				  -	      endif		; TMPMEMADDRESS > $1FFF
   5118  f6dc					      endif		; EXTRADLMEMORY
   5119  f6dc
   5120  f6dc		       1c 70	   ZONE6ADDRESS =	TMPMEMADDRESS
   5121  f6dc
   5122  f6dc				   DLINDEX    SET	DLINDEX + 1
   5108  f6dc					      REPEND
   5109  f6dc				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5110  f6dc				  -	      ifconst	EXTRADLMEMORY
   5111  f6dc				  -	      if	TMPMEMADDRESS > $1FFF
   5112  f6dc				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5113  f6dc				  -	      else
   5114  f6dc				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5115  f6dc				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5116  f6dc				  -	      endif
   5117  f6dc				  -	      endif		; TMPMEMADDRESS > $1FFF
   5118  f6dc					      endif		; EXTRADLMEMORY
   5119  f6dc
   5120  f6dc		       1d 08	   ZONE7ADDRESS =	TMPMEMADDRESS
   5121  f6dc
   5122  f6dc				   DLINDEX    SET	DLINDEX + 1
   5108  f6dc					      REPEND
   5109  f6dc				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5110  f6dc				  -	      ifconst	EXTRADLMEMORY
   5111  f6dc				  -	      if	TMPMEMADDRESS > $1FFF
   5112  f6dc				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5113  f6dc				  -	      else
   5114  f6dc				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5115  f6dc				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5116  f6dc				  -	      endif
   5117  f6dc				  -	      endif		; TMPMEMADDRESS > $1FFF
   5118  f6dc					      endif		; EXTRADLMEMORY
   5119  f6dc
   5120  f6dc		       1d a0	   ZONE8ADDRESS =	TMPMEMADDRESS
   5121  f6dc
   5122  f6dc				   DLINDEX    SET	DLINDEX + 1
   5108  f6dc					      REPEND
   5109  f6dc				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5110  f6dc				  -	      ifconst	EXTRADLMEMORY
   5111  f6dc				  -	      if	TMPMEMADDRESS > $1FFF
   5112  f6dc				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5113  f6dc				  -	      else
   5114  f6dc				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5115  f6dc				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5116  f6dc				  -	      endif
   5117  f6dc				  -	      endif		; TMPMEMADDRESS > $1FFF
   5118  f6dc					      endif		; EXTRADLMEMORY
   5119  f6dc
   5120  f6dc		       1e 38	   ZONE9ADDRESS =	TMPMEMADDRESS
   5121  f6dc
   5122  f6dc				   DLINDEX    SET	DLINDEX + 1
   5108  f6dc					      REPEND
   5109  f6dc				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5110  f6dc				  -	      ifconst	EXTRADLMEMORY
   5111  f6dc				  -	      if	TMPMEMADDRESS > $1FFF
   5112  f6dc				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5113  f6dc				  -	      else
   5114  f6dc				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5115  f6dc				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5116  f6dc				  -	      endif
   5117  f6dc				  -	      endif		; TMPMEMADDRESS > $1FFF
   5118  f6dc					      endif		; EXTRADLMEMORY
   5119  f6dc
   5120  f6dc		       1e d0	   ZONE10ADDRESS =	TMPMEMADDRESS
   5121  f6dc
   5122  f6dc				   DLINDEX    SET	DLINDEX + 1
   5108  f6dc					      REPEND
   5109  f6dc				   TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   5110  f6dc				  -	      ifconst	EXTRADLMEMORY
   5111  f6dc				  -	      if	TMPMEMADDRESS > $1FFF
   5112  f6dc				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5113  f6dc				  -	      else
   5114  f6dc				  -	      if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   5115  f6dc				  -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   5116  f6dc				  -	      endif
   5117  f6dc				  -	      endif		; TMPMEMADDRESS > $1FFF
   5118  f6dc					      endif		; EXTRADLMEMORY
   5119  f6dc
   5120  f6dc		       1f 68	   ZONE11ADDRESS =	TMPMEMADDRESS
   5121  f6dc
   5122  f6dc				   DLINDEX    SET	DLINDEX + 1
   5123  f6dc					      REPEND
   5124  f6dc
   5125  f6dc
     $18e0 to $1fff used as zone memory, allowing 14 display objects per zone.
   5126  f6dc					      echo	"   ",[WDLMEMSTART],"to",[WDLMEMEND],"used as zone memory, allowing",[(DLLASTOBJ/5)]d,"display objects per zone."
   5127  f6dc
   5128  f6dc				   DLHEIGHT
   5129  f6dc					      REPEAT	WZONECOUNT
   5130  f6dc		       0f		      .byte.b	(WZONEHEIGHT-1)
   5129  f6dc					      REPEND
   5130  f6dd		       0f		      .byte.b	(WZONEHEIGHT-1)
   5129  f6dd					      REPEND
   5130  f6de		       0f		      .byte.b	(WZONEHEIGHT-1)
   5129  f6de					      REPEND
   5130  f6df		       0f		      .byte.b	(WZONEHEIGHT-1)
   5129  f6df					      REPEND
   5130  f6e0		       0f		      .byte.b	(WZONEHEIGHT-1)
   5129  f6e0					      REPEND
   5130  f6e1		       0f		      .byte.b	(WZONEHEIGHT-1)
   5129  f6e1					      REPEND
   5130  f6e2		       0f		      .byte.b	(WZONEHEIGHT-1)
   5129  f6e2					      REPEND
   5130  f6e3		       0f		      .byte.b	(WZONEHEIGHT-1)
   5129  f6e3					      REPEND
   5130  f6e4		       0f		      .byte.b	(WZONEHEIGHT-1)
   5129  f6e4					      REPEND
   5130  f6e5		       0f		      .byte.b	(WZONEHEIGHT-1)
   5129  f6e5					      REPEND
   5130  f6e6		       0f		      .byte.b	(WZONEHEIGHT-1)
   5129  f6e6					      REPEND
   5130  f6e7		       0f		      .byte.b	(WZONEHEIGHT-1)
   5131  f6e8					      REPEND
   5132  f6e8
   5133  f6e8							; Provided under the CC0 license. See the included LICENSE.txt for details.
   5134  f6e8
   5135  f6e8							; a simple guard, than ensures the 7800basic code hasn't
   5136  f6e8							; spilled into the encryption area...
     2198 bytes left in the 7800basic reserved area.
   5137  f6e8					      echo	"   ",($FF7E-*)d,"bytes left in the 7800basic reserved area."
   5138  f6e8				  -	      if	(*>$FF7D)
   5139  f6e8				  -	      ERR		; abort the assembly
   5140  f6e8					      endif
   5141  f6e8							; Provided under the CC0 license. See the included LICENSE.txt for details.
   5142  f6e8
   5143  f6e8				  -	      ifconst	DEV
   5144  f6e8				  -	      ifnconst	ZONEHEIGHT
   5145  f6e8				  -	      echo	"* the 4k 7800basic area has",[($FF7E - *)]d,"bytes free."
   5146  f6e8				  -	      else
   5147  f6e8				  -	      if	ZONEHEIGHT = 8
   5148  f6e8				  -	      echo	"* the 4k 7800basic area has",[($FF7E - *)]d,"bytes free."
   5149  f6e8				  -	      else
   5150  f6e8				  -	      echo	"* the 4k 7800basic area has",[($FF7E - *)]d,"bytes free."
   5151  f6e8				  -	      endif
   5152  f6e8				  -	      endif
   5153  f6e8					      endif
   5154  f6e8
   5155  f6e8				  -	      if	START_OF_ROM = .
   5156  f6e8				  -	      .byte	0
   5157  f6e8					      endif
   5158  f6e8				   START_OF_ROM SET	0
   5159  f6e8
   5160  f6e8							; FF7E/FF7F contains the 7800basic crc checksum word
   5161  f6e8
   5162  f6e8							; FF80 - FFF7 contains the 7800 encryption key 
   5163  f6e8
   5164  f6e8					      ifnconst	bankswitchmode
   5165  fff8					      ORG	$FFF8
   5166  fff8				  -	      else
   5167  fff8				  -	      ifconst	ROM128K
   5168  fff8				  -	      ORG	$27FF8
   5169  fff8				  -	      RORG	$FFF8
   5170  fff8				  -	      endif
   5171  fff8				  -	      ifconst	ROM144K
   5172  fff8				  -	      ORG	$27FF8
   5173  fff8				  -	      RORG	$FFF8
   5174  fff8				  -	      endif
   5175  fff8				  -	      ifconst	ROM256K
   5176  fff8				  -	      ORG	$47FF8
   5177  fff8				  -	      RORG	$FFF8
   5178  fff8				  -	      endif
   5179  fff8				  -	      ifconst	ROM272K
   5180  fff8				  -	      ORG	$47FF8
   5181  fff8				  -	      RORG	$FFF8
   5182  fff8				  -	      endif
   5183  fff8				  -	      ifconst	ROM512K
   5184  fff8				  -	      ORG	$87FF8
   5185  fff8				  -	      RORG	$FFF8
   5186  fff8				  -	      endif
   5187  fff8				  -	      ifconst	ROM528K
   5188  fff8				  -	      ORG	$87FF8
   5189  fff8				  -	      RORG	$FFF8
   5190  fff8				  -	      endif
   5191  fff8					      endif
   5192  fff8
   5193  fff8
   5194  fff8		       ff		      .byte.b	$FF	; region verification. $FF=all regions
   5195  fff9		       f7		      .byte.b	$F7	; high nibble:  encryption check from $N000 to $FF7F. we only hash the last 4k for faster boot.
   5196  fffa							; low nibble :  N=7 atari rainbow start, N=3 no atari rainbow
   5197  fffa
   5198  fffa							;Vectors
   5199  fffa		       00 f0		      .word.w	NMI
   5200  fffc		       46 f6		      .word.w	START
   5201  fffe		       67 f0		      .word.w	IRQ
   5202  10000
