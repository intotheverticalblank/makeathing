------- FILE d:\2018dev\7800\7800basic\projects\demo1\lesson4_5.78b.asm LEVEL 1 PASS 3
      1  28000 ????						; MACRO.H
      2  28000 ????
      3  28000 ????						; Based on the 2600 macro.h file.
      4  28000 ????						; Macros irrelevant to the 7800 have been removed, and the sleep macro 
      5  28000 ????						; has been adapted to give accurate results on the 7800.
      6  28000 ????
      7  28000 ????						; Version 1.0 2019/12/11 (based on the 2600 Version 1.05, 13/NOVEMBER/2003)
      8  28000 ????
      9  28000 ????						; Available macros...
     10  28000 ????						;   SLEEP n		 - sleep for n cycles
     11  28000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     12  28000 ????
     13  28000 ????						;-------------------------------------------------------------------------------
     14  28000 ????						; SLEEP duration
     15  28000 ????						; Original author: Thomas Jentzsch
     16  28000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     17  28000 ????						; useful for code where precise timing is required.
     18  28000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     19  28000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     20  28000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     21  28000 ????
     22  28000 ????				       MAC	sleep
     23  28000 ????			    .CYCLES    SET	{1}
     24  28000 ????
     25  28000 ????				       IF	.CYCLES < 2
     26  28000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     27  28000 ????				       ERR
     28  28000 ????				       ENDIF
     29  28000 ????
     30  28000 ????				       IF	.CYCLES & 1
     31  28000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     32  28000 ????				       nop	$80
     33  28000 ????				       ELSE
     34  28000 ????				       bit	$80
     35  28000 ????				       ENDIF
     36  28000 ????			    .CYCLES    SET	.CYCLES - 3
     37  28000 ????				       ENDIF
     38  28000 ????
     39  28000 ????				       REPEAT	.CYCLES / 2
     40  28000 ????				       nop
     41  28000 ????				       REPEND
     42  28000 ????				       ENDM		;usage: SLEEP n (n>1)
     43  28000 ????
     44  28000 ????
     45  28000 ????						;-------------------------------------------------------------------------------
     46  28000 ????						; FRACSLEEP duration
     47  28000 ????						; Based on Thomas Jentzsch's SLEEP macro, but takes cycles*2 to allow for
     48  28000 ????						; 7800 based 0.5 cycle sleep.
     49  28000 ????
     50  28000 ????				       MAC	fracsleep
     51  28000 ????			    .CYCLES    SET	{1}
     52  28000 ????
     53  28000 ????				       IF	.CYCLES < 4
     54  28000 ????				       ECHO	"MACRO ERROR: 'FRACSLEEP': Duration must be > 4"
     55  28000 ????				       ERR
     56  28000 ????				       ENDIF
     57  28000 ????				       IF	.CYCLES = 5
     58  28000 ????				       ECHO	"MACRO ERROR: 'FRACSLEEP': Duration = 5 is impossible"
     59  28000 ????				       ERR
     60  28000 ????				       ENDIF
     61  28000 ????
     62  28000 ????				       IF	.CYCLES & 1
     63  28000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     64  28000 ????				       nop	$0	; TIA access is 3.5 cycles
     65  28000 ????				       ELSE
     66  28000 ????				       bit	$0	; TIA access is 3.5 cycles
     67  28000 ????				       ENDIF
     68  28000 ????			    .CYCLES    SET	.CYCLES - 7
     69  28000 ????				       ENDIF
     70  28000 ????
     71  28000 ????				       IF	.CYCLES & 2
     72  28000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     73  28000 ????				       nop	$80
     74  28000 ????				       ELSE
     75  28000 ????				       bit	$80
     76  28000 ????				       ENDIF
     77  28000 ????			    .CYCLES    SET	.CYCLES - 6
     78  28000 ????				       ENDIF
     79  28000 ????
     80  28000 ????				       REPEAT	.CYCLES / 4
     81  28000 ????				       nop
     82  28000 ????				       REPEND
     83  28000 ????				       ENDM		;usage: FRACSLEEP n (n>1)
     84  28000 ????
     85  28000 ????
     86  28000 ????						;-------------------------------------------------------
     87  28000 ????						; SET_POINTER
     88  28000 ????						; Original author: Manuel Rotschkar
     89  28000 ????						;
     90  28000 ????						; Sets a 2 byte RAM pointer to an absolute address.
     91  28000 ????						;
     92  28000 ????						; Usage: SET_POINTER pointer, address
     93  28000 ????						; Example: SET_POINTER SpritePTR, SpriteData
     94  28000 ????						;
     95  28000 ????						; Note: Alters the accumulator, NZ flags
     96  28000 ????						; IN 1: 2 byte RAM location reserved for pointer
     97  28000 ????						; IN 2: absolute address
     98  28000 ????
     99  28000 ????				       MAC	set_pointer
    100  28000 ????			    .POINTER   SET	{1}
    101  28000 ????			    .ADDRESS   SET	{2}
    102  28000 ????
    103  28000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    104  28000 ????				       STA	.POINTER	; Store in pointer
    105  28000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    106  28000 ????				       STA	.POINTER+1	; Store in pointer+1
    107  28000 ????
    108  28000 ????				       ENDM
    109  28000 ????
    110  28000 ????						; EOF
    111  28000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
    112  28000 ????
    113  28000 ????						; 7800MACRO.H
    114  28000 ????
    115  28000 ????						;-------------------------------------------------------
    116  28000 ????						; BOXCOLLISIONCHECK
    117  28000 ????						; author: Mike Saarna
    118  28000 ????						;
    119  28000 ????						; A general bounding box collision check. compares 2 rectangles of differing size
    120  28000 ????						; and shape for overlap. Carry is set for collision detected, clear for none.
    121  28000 ????						; 
    122  28000 ????						; Usage: BOXCOLLISIONCHECK x1var,y1var,w1var,h1var,x2var,y2var,w2var,h2var
    123  28000 ????						;
    124  28000 ????
    125  28000 ????				       MAC	boxcollisioncheck
    126  28000 ????			    .boxx1     SET	{1}
    127  28000 ????			    .boxy1     SET	{2}
    128  28000 ????			    .boxw1     SET	{3}
    129  28000 ????			    .boxh1     SET	{4}
    130  28000 ????			    .boxx2     SET	{5}
    131  28000 ????			    .boxy2     SET	{6}
    132  28000 ????			    .boxw2     SET	{7}
    133  28000 ????			    .boxh2     SET	{8}
    134  28000 ????
    135  28000 ????			    .DoXCollisionCheck
    136  28000 ????				       lda	.boxx1	;3
    137  28000 ????				       cmp	.boxx2	;2
    138  28000 ????				       bcs	.X1isbiggerthanX2	;2/3
    139  28000 ????			    .X2isbiggerthanX1
    140  28000 ????				       adc	#.boxw1	;2
    141  28000 ????				       cmp	.boxx2	;3
    142  28000 ????				       bcs	.DoYCollisionCheck	;3/2
    143  28000 ????				       bcc	.noboxcollision	;3
    144  28000 ????			    .X1isbiggerthanX2
    145  28000 ????				       clc		;2
    146  28000 ????				       sbc	#.boxw2	;2
    147  28000 ????				       cmp	.boxx2	;3
    148  28000 ????				       bcs	.noboxcollision	;3/2
    149  28000 ????			    .DoYCollisionCheck
    150  28000 ????				       lda	.boxy1	;3
    151  28000 ????				       cmp	.boxy2	;3
    152  28000 ????				       bcs	.Y1isbiggerthanY2	;3/2
    153  28000 ????			    .Y2isbiggerthanY1
    154  28000 ????				       adc	#.boxh1	;2
    155  28000 ????				       cmp	.boxy2	;3
    156  28000 ????				       jmp	.checkdone	;6 
    157  28000 ????			    .Y1isbiggerthanY2
    158  28000 ????				       clc		;2
    159  28000 ????				       sbc	#.boxh2	;2
    160  28000 ????				       cmp	.boxy2	;3
    161  28000 ????				       bcs	.noboxcollision	;3/2
    162  28000 ????			    .boxcollision
    163  28000 ????				       sec		;2
    164  28000 ????				       .byte	$24	; hardcoded "BIT [clc opcode]", used to skip over the following clc
    165  28000 ????			    .noboxcollision
    166  28000 ????				       clc		;2
    167  28000 ????			    .checkdone
    168  28000 ????
    169  28000 ????				       ENDM
    170  28000 ????
    171  28000 ????						; QBOXCOLLISIONCHECK
    172  28000 ????						; author: unknown
    173  28000 ????						;
    174  28000 ????						; A general bounding box collision check. compares 2 rectangles of differing size
    175  28000 ????						; and shape for overlap. Carry is CLEAR for collision detected, SET for none.
    176  28000 ????						; 
    177  28000 ????						; Usage: QBOXCOLLISIONCHECK x1var,y1var,w1var,h1var,x2var,y2var,w2var,h2var
    178  28000 ????						;
    179  28000 ????				       MAC	qboxcollisioncheck
    180  28000 ????			    .boxx1     SET	{1}
    181  28000 ????			    .boxy1     SET	{2}
    182  28000 ????			    .boxw1     SET	{3}
    183  28000 ????			    .boxh1     SET	{4}
    184  28000 ????			    .boxx2     SET	{5}
    185  28000 ????			    .boxy2     SET	{6}
    186  28000 ????			    .boxw2     SET	{7}
    187  28000 ????			    .boxh2     SET	{8}
    188  28000 ????
    189  28000 ????				       lda	.boxx2
    190  28000 ????				       clc
    191  28000 ????				       adc	#.boxw2
    192  28000 ????				       sbc	.boxx1
    193  28000 ????				       cmp	#.boxw1+.boxw2-1
    194  28000 ????				       bcs	.qboxcollisiondone
    195  28000 ????						;if we're here, carry is clear
    196  28000 ????				       lda	.boxy2
    197  28000 ????				       adc	#.boxh2
    198  28000 ????				       sbc	.boxy1
    199  28000 ????				       cmp	#.boxh1+.boxh2-1
    200  28000 ????			    .qboxcollisiondone
    201  28000 ????				       rol		; temp for testing - invert carry...
    202  28000 ????				       eor	#1
    203  28000 ????				       ror
    204  28000 ????				       ENDM
    205  28000 ????
    206  28000 ????
    207  28000 ????				       MAC	median3
    208  28000 ????
    209  28000 ????						; A median filter (for smoothing paddle jitter)
    210  28000 ????						;   this macro takes the current paddle value, compares it to historic
    211  28000 ????						;   values, and replaces the current paddle value with the median.
    212  28000 ????						; 
    213  28000 ????						; called as:  MEDIAN3 STORAGE CURRENT
    214  28000 ????						;    where STORAGE points to 3 consecutive bytes of memory. The first 2
    215  28000 ????						;	  must be dedicated to this MEDIAN filter. The last 1 is a temp.
    216  28000 ????						;    where CURRENT is memory holding the new value you wish to compare to
    217  28000 ????						;	  the previous values, and update with the median value.
    218  28000 ????						;
    219  28000 ????						; returns: CURRENT (modified to contain median value)
    220  28000 ????						;
    221  28000 ????						; author: Mike Saarna (aka RevEng)
    222  28000 ????
    223  28000 ????			    .MedianBytes SET	{1}
    224  28000 ????			    .NewValue  SET	{2}
    225  28000 ????
    226  28000 ????				       lda	#0
    227  28000 ????				       ldy	.NewValue
    228  28000 ????				       sty	.MedianBytes+2	; put the new value in the most "recent" slot
    229  28000 ????
    230  28000 ????						; build an index from relative size comparisons between our 3 values.
    231  28000 ????				       cpy	.MedianBytes
    232  28000 ????				       rol
    233  28000 ????				       cpy	.MedianBytes+1
    234  28000 ????				       rol
    235  28000 ????				       ldy	.MedianBytes
    236  28000 ????				       cpy	.MedianBytes+1
    237  28000 ????				       rol
    238  28000 ????				       tay
    239  28000 ????
    240  28000 ????				       ldx	MedianOrderLUT,y	; convert the size-comparison index to an index to the median value
    241  28000 ????				       lda	.MedianBytes,x
    242  28000 ????				       sta	.NewValue	; we replace the new value memory with the median value
    243  28000 ????
    244  28000 ????						; then shift values from "newer" bytes to "older" bytes, leaving the 
    245  28000 ????						; newest byte (.MedianBytes+2) empty for next time.
    246  28000 ????				       lda	.MedianBytes+1
    247  28000 ????				       sta	.MedianBytes
    248  28000 ????				       lda	.MedianBytes+2
    249  28000 ????				       sta	.MedianBytes+1
    250  28000 ????				       ifnconst	MedianOrderLUT
    251  28000 ????				       jmp	MedianOrderLUTend
    252  28000 ????			    MedianOrderLUT		; converts our "comparison index" to an index to the median value
    253  28000 ????				       .byte	0	; 0  B2 < B0 < B1
    254  28000 ????				       .byte	1	; 1  B2 < B1 < B0
    255  28000 ????				       .byte	2	; 2   impossible 
    256  28000 ????				       .byte	2	; 3  B1 < B2 < B0
    257  28000 ????				       .byte	2	; 4  B0 < B2 < B1
    258  28000 ????				       .byte	2	; 5   impossible 
    259  28000 ????				       .byte	1	; 6  B0 < B1 < B2
    260  28000 ????				       .byte	0	; 7  B1 < B0 < B2
    261  28000 ????			    MedianOrderLUTend
    262  28000 ????				       endif
    263  28000 ????				       ENDM
    264  28000 ????
    265  28000 ????				       MAC	plotsprite
    266  28000 ????
    267  28000 ????						; A macro version of the plotsprite command. 
    268  28000 ????						; This trades off rom space for speed.
    269  28000 ????						; It also doesn't check if the visible screen is displayed or not.
    270  28000 ????						; It has no training wheels. It is all rusty sharp edges.
    271  28000 ????
    272  28000 ????			    .GFXLabel  SET	{1}	; constant
    273  28000 ????			    .Palette   SET	{2}	; constant/variable MACARG2CONST
    274  28000 ????			    .SpriteX   SET	{3}	; constant/variable MACARG3CONST
    275  28000 ????			    .SpriteY   SET	{4}	; constant/variable MACARG4CONST
    276  28000 ????			    .ByteOffset SET	{5}	; constant/variable MACARG5CONST
    277  28000 ????
    278  28000 ????				       if	MACARG4CONST = 0
    279  28000 ????				       lda	.SpriteY
    280  28000 ????				       else
    281  28000 ????				       lda	#.SpriteY
    282  28000 ????				       endif
    283  28000 ????
    284  28000 ????				       lsr
    285  28000 ????				       lsr
    286  28000 ????				       asr	#%11111110	; ensure carry is clear
    287  28000 ????				       if	WZONEHEIGHT = 16
    288  28000 ????				       asr	#%11111110	; ensure carry is clear
    289  28000 ????				       endif
    290  28000 ????
    291  28000 ????				       tax
    292  28000 ????
    293  28000 ????				       cpx	#WZONECOUNT
    294  28000 ????				       bcs	.PLOTSPRITEnext
    295  28000 ????						; carry is clear
    296  28000 ????
    297  28000 ????				       ifconst	VSCROLL
    298  28000 ????				       ldy	Xx3,x
    299  28000 ????				       lda	DLLMEM+11,y
    300  28000 ????				       else		; !VSCROLL
    301  28000 ????				       lda	DLPOINTL,x	; Get pointer to DL that this sprite starts in
    302  28000 ????				       endif
    303  28000 ????				       ifconst	DOUBLEBUFFER
    304  28000 ????				       adc	doublebufferdloffset
    305  28000 ????				       endif		; DOUBLEBUFFER
    306  28000 ????				       sta	dlpnt
    307  28000 ????				       ifconst	VSCROLL
    308  28000 ????				       lda	DLLMEM+10,y
    309  28000 ????				       else		; !VSCROLL
    310  28000 ????				       lda	DLPOINTH,x
    311  28000 ????				       endif		; !VSCROLL
    312  28000 ????				       ifconst	DOUBLEBUFFER
    313  28000 ????				       adc	#0
    314  28000 ????				       endif		; DOUBLEBUFFER
    315  28000 ????				       sta	dlpnt+1
    316  28000 ????
    317  28000 ????				       ldy	dlend,x	; find the next new object position in this zone
    318  28000 ????
    319  28000 ????				       ifconst	.ByteOffset
    320  28000 ????
    321  28000 ????				       if	MACARG5CONST = 1
    322  28000 ????				       lda	#.ByteOffset
    323  28000 ????				       else
    324  28000 ????				       lda	.ByteOffset
    325  28000 ????				       endif
    326  28000 ????				       ifconst	DOUBLEBUFFER
    327  28000 ????				       if	{1}_width = 1
    328  28000 ????				       clc
    329  28000 ????				       endif
    330  28000 ????				       endif
    331  28000 ????				       if	{1}_width = 2
    332  28000 ????				       asl
    333  28000 ????				       endif
    334  28000 ????				       if	{1}_width = 3
    335  28000 ????				       asl
    336  28000 ????				       if	MACARG5CONST = 1
    337  28000 ????				       adc	#.ByteOffset
    338  28000 ????				       else
    339  28000 ????				       adc	.ByteOffset
    340  28000 ????				       endif
    341  28000 ????				       endif
    342  28000 ????				       if	{1}_width = 4
    343  28000 ????				       asl
    344  28000 ????				       asl
    345  28000 ????				       endif
    346  28000 ????				       if	{1}_width = 5
    347  28000 ????				       asl
    348  28000 ????				       asl
    349  28000 ????				       if	MACARG5CONST = 1
    350  28000 ????				       adc	#.ByteOffset
    351  28000 ????				       else
    352  28000 ????				       adc	.ByteOffset
    353  28000 ????				       endif
    354  28000 ????				       endif
    355  28000 ????				       if	{1}_width = 6
    356  28000 ????				       asl
    357  28000 ????				       if	MACARG5CONST = 1
    358  28000 ????				       adc	#.ByteOffset
    359  28000 ????				       else
    360  28000 ????				       adc	.ByteOffset
    361  28000 ????				       endif
    362  28000 ????				       asl
    363  28000 ????				       endif
    364  28000 ????				       if	{1}_width = 7
    365  28000 ????				       asl
    366  28000 ????				       if	MACARG5CONST = 1
    367  28000 ????				       adc	#.ByteOffset
    368  28000 ????				       else
    369  28000 ????				       adc	.ByteOffset
    370  28000 ????				       endif
    371  28000 ????				       asl
    372  28000 ????				       if	MACARG5CONST = 1
    373  28000 ????				       adc	#.ByteOffset
    374  28000 ????				       else
    375  28000 ????				       adc	.ByteOffset
    376  28000 ????				       endif
    377  28000 ????				       endif
    378  28000 ????				       if	{1}_width = 8
    379  28000 ????				       asl
    380  28000 ????				       asl
    381  28000 ????				       asl
    382  28000 ????				       endif
    383  28000 ????				       if	{1}_width = 9
    384  28000 ????				       asl
    385  28000 ????				       asl
    386  28000 ????				       asl
    387  28000 ????				       if	MACARG5CONST = 1
    388  28000 ????				       adc	#.ByteOffset
    389  28000 ????				       else
    390  28000 ????				       adc	.ByteOffset
    391  28000 ????				       endif
    392  28000 ????				       endif
    393  28000 ????				       if	{1}_width = 10
    394  28000 ????				       asl
    395  28000 ????				       asl
    396  28000 ????				       if	MACARG5CONST = 1
    397  28000 ????				       adc	#.ByteOffset
    398  28000 ????				       else
    399  28000 ????				       adc	.ByteOffset
    400  28000 ????				       endif
    401  28000 ????				       asl
    402  28000 ????				       endif
    403  28000 ????				       if	{1}_width = 11
    404  28000 ????				       asl
    405  28000 ????				       asl
    406  28000 ????				       if	MACARG5CONST = 1
    407  28000 ????				       adc	#.ByteOffset
    408  28000 ????				       else
    409  28000 ????				       adc	.ByteOffset
    410  28000 ????				       endif
    411  28000 ????				       asl
    412  28000 ????				       if	MACARG5CONST = 1
    413  28000 ????				       adc	#.ByteOffset
    414  28000 ????				       else
    415  28000 ????				       adc	.ByteOffset
    416  28000 ????				       endif
    417  28000 ????				       endif
    418  28000 ????				       if	{1}_width = 12
    419  28000 ????				       asl
    420  28000 ????				       if	MACARG5CONST = 1
    421  28000 ????				       adc	#.ByteOffset
    422  28000 ????				       else
    423  28000 ????				       adc	.ByteOffset
    424  28000 ????				       endif
    425  28000 ????				       asl
    426  28000 ????				       asl
    427  28000 ????				       endif
    428  28000 ????				       if	{1}_width = 13
    429  28000 ????				       asl
    430  28000 ????				       if	MACARG5CONST = 1
    431  28000 ????				       adc	#.ByteOffset
    432  28000 ????				       else
    433  28000 ????				       adc	.ByteOffset
    434  28000 ????				       endif
    435  28000 ????				       asl
    436  28000 ????				       asl
    437  28000 ????				       if	MACARG5CONST = 1
    438  28000 ????				       adc	#.ByteOffset
    439  28000 ????				       else
    440  28000 ????				       adc	.ByteOffset
    441  28000 ????				       endif
    442  28000 ????
    443  28000 ????				       endif
    444  28000 ????				       if	{1}_width = 14
    445  28000 ????				       asl
    446  28000 ????				       if	MACARG5CONST = 1
    447  28000 ????				       adc	#.ByteOffset
    448  28000 ????				       else
    449  28000 ????				       adc	.ByteOffset
    450  28000 ????				       endif
    451  28000 ????				       asl
    452  28000 ????				       if	MACARG5CONST = 1
    453  28000 ????				       adc	#.ByteOffset
    454  28000 ????				       else
    455  28000 ????				       adc	.ByteOffset
    456  28000 ????				       endif
    457  28000 ????				       asl
    458  28000 ????				       endif
    459  28000 ????				       if	{1}_width = 15
    460  28000 ????				       asl
    461  28000 ????				       if	MACARG5CONST = 1
    462  28000 ????				       adc	#.ByteOffset
    463  28000 ????				       else
    464  28000 ????				       adc	.ByteOffset
    465  28000 ????				       endif
    466  28000 ????				       asl
    467  28000 ????				       if	MACARG5CONST = 1
    468  28000 ????				       adc	#.ByteOffset
    469  28000 ????				       else
    470  28000 ????				       adc	.ByteOffset
    471  28000 ????				       endif
    472  28000 ????				       asl
    473  28000 ????				       if	MACARG5CONST = 1
    474  28000 ????				       adc	#.ByteOffset
    475  28000 ????				       else
    476  28000 ????				       adc	.ByteOffset
    477  28000 ????				       endif
    478  28000 ????				       endif
    479  28000 ????				       if	{1}_width = 16
    480  28000 ????				       asl
    481  28000 ????				       asl
    482  28000 ????				       asl
    483  28000 ????				       asl
    484  28000 ????				       endif
    485  28000 ????				       adc	#<.GFXLabel	; carry is clear via previous asl or asr
    486  28000 ????				       else
    487  28000 ????				       lda	#<.GFXLabel	; carry is clear via previous asl or asr
    488  28000 ????				       endif		; .ByteOffset
    489  28000 ????				       sta	(dlpnt),y	; #1 - low byte object address
    490  28000 ????
    491  28000 ????				       iny
    492  28000 ????
    493  28000 ????				       lda	#({1}_mode | %01000000)
    494  28000 ????				       sta	(dlpnt),y	; #2 - graphics mode , indirect
    495  28000 ????
    496  28000 ????				       iny
    497  28000 ????
    498  28000 ????				       if	MACARG4CONST = 0
    499  28000 ????				       lda	.SpriteY
    500  28000 ????				       else
    501  28000 ????				       lda	#.SpriteY
    502  28000 ????				       endif
    503  28000 ????				       and	#(WZONEHEIGHT - 1)
    504  28000 ????				       cmp	#1	; clear carry if our sprite is just in this zone
    505  28000 ????				       ora	#>.GFXLabel
    506  28000 ????				       sta	(dlpnt),y	; #3 - hi byte object address
    507  28000 ????
    508  28000 ????				       iny
    509  28000 ????
    510  28000 ????				       if	MACARG2CONST = 1
    511  28000 ????				       lda	#({1}_width_twoscompliment | (.Palette * 32))
    512  28000 ????				       else
    513  28000 ????				       lda	#({1}_width_twoscompliment)
    514  28000 ????				       ora	.Palette
    515  28000 ????				       endif
    516  28000 ????				       sta	(dlpnt),y	; #4 - palette|width
    517  28000 ????
    518  28000 ????				       iny
    519  28000 ????
    520  28000 ????				       if	MACARG3CONST = 1
    521  28000 ????				       lda	#.SpriteX
    522  28000 ????				       else
    523  28000 ????				       lda	.SpriteX
    524  28000 ????				       endif
    525  28000 ????				       sta	(dlpnt),y	; #5 - x object position
    526  28000 ????
    527  28000 ????				       iny
    528  28000 ????				       sty	dlend,x
    529  28000 ????
    530  28000 ????				       ifconst	ALWAYSTERMINATE
    531  28000 ????				       iny
    532  28000 ????				       lda	#0
    533  28000 ????				       sta	(dlpnt),y
    534  28000 ????				       endif
    535  28000 ????
    536  28000 ????				       bcc	.PLOTSPRITEend
    537  28000 ????
    538  28000 ????			    .PLOTSPRITEnext
    539  28000 ????				       inx		; next zone
    540  28000 ????
    541  28000 ????				       cpx	#WZONECOUNT
    542  28000 ????				       bcs	.PLOTSPRITEend
    543  28000 ????						; carry is clear
    544  28000 ????
    545  28000 ????				       ifconst	VSCROLL
    546  28000 ????				       ldy	Xx3,x
    547  28000 ????				       lda	DLLMEM+11,y
    548  28000 ????				       else		; !VSCROLL
    549  28000 ????				       lda	DLPOINTL,x	;Get pointer to DL that this sprite starts in
    550  28000 ????				       endif		; !VSCROLL
    551  28000 ????				       ifconst	DOUBLEBUFFER
    552  28000 ????				       adc	doublebufferdloffset
    553  28000 ????				       endif		; DOUBLEBUFFER
    554  28000 ????				       sta	dlpnt
    555  28000 ????				       ifconst	VSCROLL
    556  28000 ????				       lda	DLLMEM+10,y
    557  28000 ????				       else		; !VSCROLL
    558  28000 ????				       lda	DLPOINTH,x
    559  28000 ????				       endif		; !VSCROLL
    560  28000 ????				       ifconst	DOUBLEBUFFER
    561  28000 ????				       adc	#0
    562  28000 ????				       endif		; DOUBLEBUFFER
    563  28000 ????				       sta	dlpnt+1
    564  28000 ????
    565  28000 ????				       ldy	dlend,x	; find the next new object position in this zone
    566  28000 ????
    567  28000 ????				       ifconst	.ByteOffset
    568  28000 ????
    569  28000 ????				       if	MACARG5CONST = 1
    570  28000 ????				       lda	#.ByteOffset
    571  28000 ????				       else
    572  28000 ????				       lda	.ByteOffset
    573  28000 ????				       endif
    574  28000 ????				       if	{1}_width = 1
    575  28000 ????				       clc
    576  28000 ????				       endif
    577  28000 ????				       if	{1}_width = 2
    578  28000 ????				       asl		; carry clear
    579  28000 ????				       endif
    580  28000 ????				       if	{1}_width = 3
    581  28000 ????				       asl		; carry clear
    582  28000 ????				       if	MACARG5CONST = 1
    583  28000 ????				       adc	#.ByteOffset
    584  28000 ????				       else
    585  28000 ????				       adc	.ByteOffset
    586  28000 ????				       endif
    587  28000 ????				       endif
    588  28000 ????				       if	{1}_width = 4
    589  28000 ????				       asl		; carry clear
    590  28000 ????				       asl
    591  28000 ????				       endif
    592  28000 ????				       if	{1}_width = 5
    593  28000 ????				       asl		; carry clear
    594  28000 ????				       asl
    595  28000 ????				       if	MACARG5CONST = 1
    596  28000 ????				       adc	#.ByteOffset
    597  28000 ????				       else
    598  28000 ????				       adc	.ByteOffset
    599  28000 ????				       endif
    600  28000 ????				       endif
    601  28000 ????				       if	{1}_width = 6
    602  28000 ????				       asl		; carry clear
    603  28000 ????				       if	MACARG5CONST = 1
    604  28000 ????				       adc	#.ByteOffset
    605  28000 ????				       else
    606  28000 ????				       adc	.ByteOffset
    607  28000 ????				       endif
    608  28000 ????				       asl
    609  28000 ????				       endif
    610  28000 ????				       if	{1}_width = 7
    611  28000 ????				       asl		; carry clear
    612  28000 ????				       if	MACARG5CONST = 1
    613  28000 ????				       adc	#.ByteOffset
    614  28000 ????				       else
    615  28000 ????				       adc	.ByteOffset
    616  28000 ????				       endif
    617  28000 ????				       asl
    618  28000 ????				       endif
    619  28000 ????				       if	{1}_width = 8
    620  28000 ????				       asl		; carry clear
    621  28000 ????				       asl
    622  28000 ????				       asl
    623  28000 ????				       endif
    624  28000 ????				       if	{1}_width = 9
    625  28000 ????				       asl		; carry clear
    626  28000 ????				       asl
    627  28000 ????				       asl
    628  28000 ????				       if	MACARG5CONST = 1
    629  28000 ????				       adc	#.ByteOffset
    630  28000 ????				       else
    631  28000 ????				       adc	.ByteOffset
    632  28000 ????				       endif
    633  28000 ????				       endif
    634  28000 ????				       if	{1}_width = 10
    635  28000 ????				       asl		; carry clear
    636  28000 ????				       asl
    637  28000 ????				       if	MACARG5CONST = 1
    638  28000 ????				       adc	#.ByteOffset
    639  28000 ????				       else
    640  28000 ????				       adc	.ByteOffset
    641  28000 ????				       endif
    642  28000 ????				       asl
    643  28000 ????				       endif
    644  28000 ????				       if	{1}_width = 11
    645  28000 ????				       asl		; carry clear
    646  28000 ????				       asl
    647  28000 ????				       if	MACARG5CONST = 1
    648  28000 ????				       adc	#.ByteOffset
    649  28000 ????				       else
    650  28000 ????				       adc	.ByteOffset
    651  28000 ????				       endif
    652  28000 ????				       asl
    653  28000 ????				       if	MACARG5CONST = 1
    654  28000 ????				       adc	#.ByteOffset
    655  28000 ????				       else
    656  28000 ????				       adc	.ByteOffset
    657  28000 ????				       endif
    658  28000 ????				       endif
    659  28000 ????				       if	{1}_width = 12
    660  28000 ????				       asl		; carry clear
    661  28000 ????				       if	MACARG5CONST = 1
    662  28000 ????				       adc	#.ByteOffset
    663  28000 ????				       else
    664  28000 ????				       adc	.ByteOffset
    665  28000 ????				       endif
    666  28000 ????				       asl
    667  28000 ????				       asl
    668  28000 ????				       endif
    669  28000 ????				       if	{1}_width = 13
    670  28000 ????				       asl		; carry clear
    671  28000 ????				       if	MACARG5CONST = 1
    672  28000 ????				       adc	#.ByteOffset
    673  28000 ????				       else
    674  28000 ????				       adc	.ByteOffset
    675  28000 ????				       endif
    676  28000 ????				       asl
    677  28000 ????				       asl
    678  28000 ????				       if	MACARG5CONST = 1
    679  28000 ????				       adc	#.ByteOffset
    680  28000 ????				       else
    681  28000 ????				       adc	.ByteOffset
    682  28000 ????				       endif
    683  28000 ????				       endif
    684  28000 ????				       if	{1}_width = 14
    685  28000 ????				       asl		; carry clear
    686  28000 ????				       if	MACARG5CONST = 1
    687  28000 ????				       adc	#.ByteOffset
    688  28000 ????				       else
    689  28000 ????				       adc	.ByteOffset
    690  28000 ????				       endif
    691  28000 ????				       asl
    692  28000 ????				       if	MACARG5CONST = 1
    693  28000 ????				       adc	#.ByteOffset
    694  28000 ????				       else
    695  28000 ????				       adc	.ByteOffset
    696  28000 ????				       endif
    697  28000 ????				       asl
    698  28000 ????				       endif
    699  28000 ????				       if	{1}_width = 15
    700  28000 ????				       asl
    701  28000 ????				       if	MACARG5CONST = 1
    702  28000 ????				       adc	#.ByteOffset
    703  28000 ????				       else
    704  28000 ????				       adc	.ByteOffset
    705  28000 ????				       endif
    706  28000 ????				       asl
    707  28000 ????				       if	MACARG5CONST = 1
    708  28000 ????				       adc	#.ByteOffset
    709  28000 ????				       else
    710  28000 ????				       adc	.ByteOffset
    711  28000 ????				       endif
    712  28000 ????				       asl
    713  28000 ????				       if	MACARG5CONST = 1
    714  28000 ????				       adc	#.ByteOffset
    715  28000 ????				       else
    716  28000 ????				       adc	.ByteOffset
    717  28000 ????				       endif
    718  28000 ????				       endif
    719  28000 ????				       if	{1}_width = 16
    720  28000 ????				       asl
    721  28000 ????				       asl
    722  28000 ????				       asl
    723  28000 ????				       asl
    724  28000 ????				       endif
    725  28000 ????				       adc	#<.GFXLabel
    726  28000 ????				       else
    727  28000 ????				       lda	#<.GFXLabel
    728  28000 ????				       endif		; .ByteOffset
    729  28000 ????
    730  28000 ????				       sta	(dlpnt),y	; #1 - low byte object address
    731  28000 ????
    732  28000 ????				       iny
    733  28000 ????
    734  28000 ????				       lda	#({1}_mode | %01000000)
    735  28000 ????				       sta	(dlpnt),y	; #2 - graphics mode , indirect
    736  28000 ????
    737  28000 ????				       iny
    738  28000 ????
    739  28000 ????				       if	MACARG4CONST = 0
    740  28000 ????				       lda	.SpriteY
    741  28000 ????				       else
    742  28000 ????				       lda	#.SpriteY
    743  28000 ????				       endif
    744  28000 ????				       and	#(WZONEHEIGHT - 1)
    745  28000 ????				       ora	#>(.GFXLabel - (WZONEHEIGHT * 256))	; start in the dma hole
    746  28000 ????				       sta	(dlpnt),y	; #3 - hi byte object address
    747  28000 ????
    748  28000 ????				       iny
    749  28000 ????
    750  28000 ????				       if	MACARG2CONST = 1
    751  28000 ????				       lda	#({1}_width_twoscompliment | (.Palette * 32))
    752  28000 ????				       else
    753  28000 ????				       lda	#({1}_width_twoscompliment)
    754  28000 ????				       ora	.Palette
    755  28000 ????				       endif
    756  28000 ????				       sta	(dlpnt),y	; #4 - palette|width
    757  28000 ????
    758  28000 ????				       iny
    759  28000 ????
    760  28000 ????				       if	MACARG3CONST = 1
    761  28000 ????				       lda	#.SpriteX
    762  28000 ????				       else
    763  28000 ????				       lda	.SpriteX
    764  28000 ????				       endif
    765  28000 ????				       sta	(dlpnt),y	; #5 - x object position
    766  28000 ????
    767  28000 ????				       iny
    768  28000 ????				       sty	dlend,x
    769  28000 ????
    770  28000 ????				       ifconst	ALWAYSTERMINATE
    771  28000 ????				       iny
    772  28000 ????				       lda	#0
    773  28000 ????				       sta	(dlpnt),y
    774  28000 ????				       endif
    775  28000 ????
    776  28000 ????			    .PLOTSPRITEend
    777  28000 ????				       ENDM
    778  28000 ????
    779  28000 ????				       MAC	plotsprite4
    780  28000 ????
    781  28000 ????						; A macro version of plotsprite. (with 4 byte objects)
    782  28000 ????						; This trades off rom space for speed.
    783  28000 ????						; It also doesn't check if the visible screen is displayed or not.
    784  28000 ????						; It has no training wheels. It is all rusty sharp edges.
    785  28000 ????
    786  28000 ????			    .GFXLabel  SET	{1}
    787  28000 ????			    .Palette   SET	{2}	; constant
    788  28000 ????			    .SpriteX   SET	{3}	; variable
    789  28000 ????			    .SpriteY   SET	{4}	; variable
    790  28000 ????			    .ByteOffset SET	{5}	; variable 
    791  28000 ????
    792  28000 ????				       if	MACARG4CONST = 0
    793  28000 ????				       lda	.SpriteY
    794  28000 ????				       else
    795  28000 ????				       lda	#.SpriteY
    796  28000 ????				       endif
    797  28000 ????				       lsr
    798  28000 ????				       lsr
    799  28000 ????				       asr	#%11111110	; ensure carry is clear
    800  28000 ????				       if	WZONEHEIGHT = 16
    801  28000 ????				       asr	#%11111110	; ensure carry is clear
    802  28000 ????				       endif
    803  28000 ????
    804  28000 ????				       tax
    805  28000 ????
    806  28000 ????				       cpx	#WZONECOUNT
    807  28000 ????				       bcs	.PLOTSPRITEnext
    808  28000 ????						; carry is clear
    809  28000 ????				       ifconst	VSCROLL
    810  28000 ????				       ldy	Xx3,x
    811  28000 ????				       lda	DLLMEM+11,y
    812  28000 ????				       else		; !VSCROLL
    813  28000 ????				       lda	DLPOINTL,x	;Get pointer to DL that this sprite starts in
    814  28000 ????				       endif		; !VSCROLL
    815  28000 ????				       ifconst	DOUBLEBUFFER
    816  28000 ????				       adc	doublebufferdloffset
    817  28000 ????				       endif		; DOUBLEBUFFER
    818  28000 ????				       sta	dlpnt
    819  28000 ????				       ifconst	VSCROLL
    820  28000 ????				       lda	DLLMEM+10,y
    821  28000 ????				       else		; !VSCROLL
    822  28000 ????				       lda	DLPOINTH,x
    823  28000 ????				       endif		; !VSCROLL
    824  28000 ????				       ifconst	DOUBLEBUFFER
    825  28000 ????				       adc	#0
    826  28000 ????				       endif		; DOUBLEBUFFER
    827  28000 ????				       sta	dlpnt+1
    828  28000 ????
    829  28000 ????				       ldy	dlend,x	; find the next new object position in this zone
    830  28000 ????
    831  28000 ????				       ifconst	.ByteOffset
    832  28000 ????
    833  28000 ????				       if	MACARG5CONST = 1
    834  28000 ????				       lda	#.ByteOffset
    835  28000 ????				       else
    836  28000 ????				       lda	.ByteOffset
    837  28000 ????				       endif
    838  28000 ????				       ifconst	DOUBLEBUFFER
    839  28000 ????				       if	{1}_width = 1
    840  28000 ????				       clc
    841  28000 ????				       endif
    842  28000 ????				       endif
    843  28000 ????				       if	{1}_width = 2
    844  28000 ????				       asl
    845  28000 ????				       endif
    846  28000 ????				       if	{1}_width = 3
    847  28000 ????				       asl
    848  28000 ????				       if	MACARG5CONST = 1
    849  28000 ????				       adc	#.ByteOffset
    850  28000 ????				       else
    851  28000 ????				       adc	.ByteOffset
    852  28000 ????				       endif
    853  28000 ????				       endif
    854  28000 ????				       if	{1}_width = 4
    855  28000 ????				       asl
    856  28000 ????				       asl
    857  28000 ????				       endif
    858  28000 ????				       if	{1}_width = 5
    859  28000 ????				       asl
    860  28000 ????				       asl
    861  28000 ????				       if	MACARG5CONST = 1
    862  28000 ????				       adc	#.ByteOffset
    863  28000 ????				       else
    864  28000 ????				       adc	.ByteOffset
    865  28000 ????				       endif
    866  28000 ????				       endif
    867  28000 ????				       if	{1}_width = 6
    868  28000 ????				       asl
    869  28000 ????				       if	MACARG5CONST = 1
    870  28000 ????				       adc	#.ByteOffset
    871  28000 ????				       else
    872  28000 ????				       adc	.ByteOffset
    873  28000 ????				       endif
    874  28000 ????
    875  28000 ????				       asl
    876  28000 ????				       endif
    877  28000 ????				       if	{1}_width = 7
    878  28000 ????				       asl
    879  28000 ????				       if	MACARG5CONST = 1
    880  28000 ????				       adc	#.ByteOffset
    881  28000 ????				       else
    882  28000 ????				       adc	.ByteOffset
    883  28000 ????				       endif
    884  28000 ????				       asl
    885  28000 ????				       if	MACARG5CONST = 1
    886  28000 ????				       adc	#.ByteOffset
    887  28000 ????				       else
    888  28000 ????				       adc	.ByteOffset
    889  28000 ????				       endif
    890  28000 ????				       endif
    891  28000 ????				       if	{1}_width = 8
    892  28000 ????				       asl
    893  28000 ????				       asl
    894  28000 ????				       asl
    895  28000 ????				       endif
    896  28000 ????				       if	{1}_width = 9
    897  28000 ????				       asl
    898  28000 ????				       asl
    899  28000 ????				       asl
    900  28000 ????				       if	MACARG5CONST = 1
    901  28000 ????				       adc	#.ByteOffset
    902  28000 ????				       else
    903  28000 ????				       adc	.ByteOffset
    904  28000 ????				       endif
    905  28000 ????				       endif
    906  28000 ????				       if	{1}_width = 10
    907  28000 ????				       asl
    908  28000 ????				       asl
    909  28000 ????				       if	MACARG5CONST = 1
    910  28000 ????				       adc	#.ByteOffset
    911  28000 ????				       else
    912  28000 ????				       adc	.ByteOffset
    913  28000 ????				       endif
    914  28000 ????				       asl
    915  28000 ????				       endif
    916  28000 ????				       if	{1}_width = 11
    917  28000 ????				       asl
    918  28000 ????				       asl
    919  28000 ????				       if	MACARG5CONST = 1
    920  28000 ????				       adc	#.ByteOffset
    921  28000 ????				       else
    922  28000 ????				       adc	.ByteOffset
    923  28000 ????				       endif
    924  28000 ????				       asl
    925  28000 ????				       if	MACARG5CONST = 1
    926  28000 ????				       adc	#.ByteOffset
    927  28000 ????				       else
    928  28000 ????				       adc	.ByteOffset
    929  28000 ????				       endif
    930  28000 ????				       endif
    931  28000 ????				       if	{1}_width = 12
    932  28000 ????				       asl
    933  28000 ????				       if	MACARG5CONST = 1
    934  28000 ????				       adc	#.ByteOffset
    935  28000 ????				       else
    936  28000 ????				       adc	.ByteOffset
    937  28000 ????				       endif
    938  28000 ????				       asl
    939  28000 ????				       asl
    940  28000 ????				       endif
    941  28000 ????				       if	{1}_width = 13
    942  28000 ????				       asl
    943  28000 ????				       if	MACARG5CONST = 1
    944  28000 ????				       adc	#.ByteOffset
    945  28000 ????				       else
    946  28000 ????				       adc	.ByteOffset
    947  28000 ????				       endif
    948  28000 ????				       asl
    949  28000 ????				       asl
    950  28000 ????				       if	MACARG5CONST = 1
    951  28000 ????				       adc	#.ByteOffset
    952  28000 ????				       else
    953  28000 ????				       adc	.ByteOffset
    954  28000 ????				       endif
    955  28000 ????				       endif
    956  28000 ????				       if	{1}_width = 14
    957  28000 ????				       asl
    958  28000 ????				       if	MACARG5CONST = 1
    959  28000 ????				       adc	#.ByteOffset
    960  28000 ????				       else
    961  28000 ????				       adc	.ByteOffset
    962  28000 ????				       endif
    963  28000 ????				       asl
    964  28000 ????				       if	MACARG5CONST = 1
    965  28000 ????				       adc	#.ByteOffset
    966  28000 ????				       else
    967  28000 ????				       adc	.ByteOffset
    968  28000 ????				       endif
    969  28000 ????				       asl
    970  28000 ????				       endif
    971  28000 ????				       if	{1}_width = 15
    972  28000 ????				       asl
    973  28000 ????				       if	MACARG5CONST = 1
    974  28000 ????				       adc	#.ByteOffset
    975  28000 ????				       else
    976  28000 ????				       adc	.ByteOffset
    977  28000 ????				       endif
    978  28000 ????				       asl
    979  28000 ????				       if	MACARG5CONST = 1
    980  28000 ????				       adc	#.ByteOffset
    981  28000 ????				       else
    982  28000 ????				       adc	.ByteOffset
    983  28000 ????				       endif
    984  28000 ????				       asl
    985  28000 ????				       if	MACARG5CONST = 1
    986  28000 ????				       adc	#.ByteOffset
    987  28000 ????				       else
    988  28000 ????				       adc	.ByteOffset
    989  28000 ????				       endif
    990  28000 ????				       endif
    991  28000 ????				       if	{1}_width = 16
    992  28000 ????				       asl
    993  28000 ????				       asl
    994  28000 ????				       asl
    995  28000 ????				       asl
    996  28000 ????				       endif
    997  28000 ????				       adc	#<.GFXLabel	; carry is clear via previous asl or asr
    998  28000 ????				       else
    999  28000 ????				       lda	#<.GFXLabel	; carry is clear via previous asl or asr
   1000  28000 ????				       endif		; .ByteOffset
   1001  28000 ????				       sta	(dlpnt),y	; #1 - low byte object address
   1002  28000 ????
   1003  28000 ????				       iny
   1004  28000 ????
   1005  28000 ????				       if	MACARG2CONST = 1
   1006  28000 ????				       lda	#({1}_width_twoscompliment | (.Palette * 32))
   1007  28000 ????				       else
   1008  28000 ????				       lda	#({1}_width_twoscompliment)
   1009  28000 ????				       ora	.Palette
   1010  28000 ????				       endif
   1011  28000 ????				       sta	(dlpnt),y	; #2 - palette|width
   1012  28000 ????
   1013  28000 ????				       iny
   1014  28000 ????				       if	MACARG4CONST = 0
   1015  28000 ????				       lda	.SpriteY
   1016  28000 ????				       else
   1017  28000 ????				       lda	#.SpriteY
   1018  28000 ????				       endif
   1019  28000 ????				       and	#(WZONEHEIGHT - 1)
   1020  28000 ????				       cmp	#1	; clear carry if our sprite is just in this zone
   1021  28000 ????				       ora	#>.GFXLabel
   1022  28000 ????				       sta	(dlpnt),y	; #3 - hi byte object address
   1023  28000 ????
   1024  28000 ????				       iny
   1025  28000 ????				       if	MACARG3CONST = 1
   1026  28000 ????				       lda	#.SpriteX
   1027  28000 ????				       else
   1028  28000 ????				       lda	.SpriteX
   1029  28000 ????				       endif
   1030  28000 ????				       sta	(dlpnt),y	; #4 - x object position
   1031  28000 ????
   1032  28000 ????				       iny
   1033  28000 ????				       sty	dlend,x
   1034  28000 ????
   1035  28000 ????				       ifconst	ALWAYSTERMINATE
   1036  28000 ????				       iny
   1037  28000 ????				       lda	#0
   1038  28000 ????				       sta	(dlpnt),y
   1039  28000 ????				       endif
   1040  28000 ????
   1041  28000 ????				       bcc	.PLOTSPRITEend
   1042  28000 ????
   1043  28000 ????			    .PLOTSPRITEnext
   1044  28000 ????				       inx		; next zone
   1045  28000 ????
   1046  28000 ????				       cpx	#WZONECOUNT
   1047  28000 ????				       bcs	.PLOTSPRITEend
   1048  28000 ????						; carry is clear
   1049  28000 ????				       ifconst	VSCROLL
   1050  28000 ????				       ldy	Xx3,x
   1051  28000 ????				       lda	DLLMEM+11,y
   1052  28000 ????				       else		; !VSCROLL
   1053  28000 ????				       lda	DLPOINTL,x	;Get pointer to DL that this sprite starts in
   1054  28000 ????				       endif		; !VSCROLL
   1055  28000 ????				       ifconst	DOUBLEBUFFER
   1056  28000 ????				       adc	doublebufferdloffset
   1057  28000 ????				       endif		; DOUBLEBUFFER
   1058  28000 ????				       sta	dlpnt
   1059  28000 ????				       ifconst	VSCROLL
   1060  28000 ????				       lda	DLLMEM+10,y
   1061  28000 ????				       else		; !VSCROLL
   1062  28000 ????				       lda	DLPOINTH,x
   1063  28000 ????				       endif		; !VSCROLL
   1064  28000 ????				       ifconst	DOUBLEBUFFER
   1065  28000 ????				       adc	#0
   1066  28000 ????				       endif		; DOUBLEBUFFER
   1067  28000 ????				       sta	dlpnt+1
   1068  28000 ????
   1069  28000 ????				       ldy	dlend,x	; find the next new object position in this zone
   1070  28000 ????
   1071  28000 ????				       ifconst	.ByteOffset
   1072  28000 ????
   1073  28000 ????				       if	MACARG5CONST = 1
   1074  28000 ????				       lda	#.ByteOffset
   1075  28000 ????				       else
   1076  28000 ????				       lda	.ByteOffset
   1077  28000 ????				       endif
   1078  28000 ????				       if	{1}_width = 1
   1079  28000 ????				       clc
   1080  28000 ????				       endif
   1081  28000 ????				       if	{1}_width = 2
   1082  28000 ????				       asl		; carry clear
   1083  28000 ????				       endif
   1084  28000 ????				       if	{1}_width = 3
   1085  28000 ????				       asl		; carry clear
   1086  28000 ????				       if	MACARG5CONST = 1
   1087  28000 ????				       adc	#.ByteOffset
   1088  28000 ????				       else
   1089  28000 ????				       adc	.ByteOffset
   1090  28000 ????				       endif
   1091  28000 ????				       endif
   1092  28000 ????				       if	{1}_width = 4
   1093  28000 ????				       asl		; carry clear
   1094  28000 ????				       asl
   1095  28000 ????				       endif
   1096  28000 ????				       if	{1}_width = 5
   1097  28000 ????				       asl		; carry clear
   1098  28000 ????				       asl
   1099  28000 ????				       if	MACARG5CONST = 1
   1100  28000 ????				       adc	#.ByteOffset
   1101  28000 ????				       else
   1102  28000 ????				       adc	.ByteOffset
   1103  28000 ????				       endif
   1104  28000 ????				       endif
   1105  28000 ????				       if	{1}_width = 6
   1106  28000 ????				       asl		; carry clear
   1107  28000 ????				       if	MACARG5CONST = 1
   1108  28000 ????				       adc	#.ByteOffset
   1109  28000 ????				       else
   1110  28000 ????				       adc	.ByteOffset
   1111  28000 ????				       endif
   1112  28000 ????
   1113  28000 ????				       asl
   1114  28000 ????				       endif
   1115  28000 ????				       if	{1}_width = 7
   1116  28000 ????				       asl		; carry clear
   1117  28000 ????				       if	MACARG5CONST = 1
   1118  28000 ????				       adc	#.ByteOffset
   1119  28000 ????				       else
   1120  28000 ????				       adc	.ByteOffset
   1121  28000 ????				       endif
   1122  28000 ????				       asl
   1123  28000 ????				       endif
   1124  28000 ????				       if	{1}_width = 8
   1125  28000 ????				       asl		; carry clear
   1126  28000 ????				       asl
   1127  28000 ????				       asl
   1128  28000 ????				       endif
   1129  28000 ????				       if	{1}_width = 9
   1130  28000 ????				       asl		; carry clear
   1131  28000 ????				       asl
   1132  28000 ????				       asl
   1133  28000 ????				       if	MACARG5CONST = 1
   1134  28000 ????				       adc	#.ByteOffset
   1135  28000 ????				       else
   1136  28000 ????				       adc	.ByteOffset
   1137  28000 ????				       endif
   1138  28000 ????				       endif
   1139  28000 ????				       if	{1}_width = 10
   1140  28000 ????				       asl		; carry clear
   1141  28000 ????				       asl
   1142  28000 ????				       if	MACARG5CONST = 1
   1143  28000 ????				       adc	#.ByteOffset
   1144  28000 ????				       else
   1145  28000 ????				       adc	.ByteOffset
   1146  28000 ????				       endif
   1147  28000 ????				       asl
   1148  28000 ????				       endif
   1149  28000 ????				       if	{1}_width = 11
   1150  28000 ????				       asl		; carry clear
   1151  28000 ????				       asl
   1152  28000 ????				       if	MACARG5CONST = 1
   1153  28000 ????				       adc	#.ByteOffset
   1154  28000 ????				       else
   1155  28000 ????				       adc	.ByteOffset
   1156  28000 ????				       endif
   1157  28000 ????				       asl
   1158  28000 ????				       if	MACARG5CONST = 1
   1159  28000 ????				       adc	#.ByteOffset
   1160  28000 ????				       else
   1161  28000 ????				       adc	.ByteOffset
   1162  28000 ????				       endif
   1163  28000 ????				       endif
   1164  28000 ????				       if	{1}_width = 12
   1165  28000 ????				       asl		; carry clear
   1166  28000 ????				       if	MACARG5CONST = 1
   1167  28000 ????				       adc	#.ByteOffset
   1168  28000 ????				       else
   1169  28000 ????				       adc	.ByteOffset
   1170  28000 ????				       endif
   1171  28000 ????				       asl
   1172  28000 ????				       asl
   1173  28000 ????				       endif
   1174  28000 ????				       if	{1}_width = 13
   1175  28000 ????				       asl		; carry clear
   1176  28000 ????				       if	MACARG5CONST = 1
   1177  28000 ????				       adc	#.ByteOffset
   1178  28000 ????				       else
   1179  28000 ????				       adc	.ByteOffset
   1180  28000 ????				       endif
   1181  28000 ????				       asl
   1182  28000 ????				       asl
   1183  28000 ????				       if	MACARG5CONST = 1
   1184  28000 ????				       adc	#.ByteOffset
   1185  28000 ????				       else
   1186  28000 ????				       adc	.ByteOffset
   1187  28000 ????				       endif
   1188  28000 ????				       endif
   1189  28000 ????				       if	{1}_width = 14
   1190  28000 ????				       asl		; carry clear
   1191  28000 ????				       if	MACARG5CONST = 1
   1192  28000 ????				       adc	#.ByteOffset
   1193  28000 ????				       else
   1194  28000 ????				       adc	.ByteOffset
   1195  28000 ????				       endif
   1196  28000 ????				       asl
   1197  28000 ????				       if	MACARG5CONST = 1
   1198  28000 ????				       adc	#.ByteOffset
   1199  28000 ????				       else
   1200  28000 ????				       adc	.ByteOffset
   1201  28000 ????				       endif
   1202  28000 ????				       asl
   1203  28000 ????				       endif
   1204  28000 ????				       if	{1}_width = 15
   1205  28000 ????				       asl
   1206  28000 ????				       if	MACARG5CONST = 1
   1207  28000 ????				       adc	#.ByteOffset
   1208  28000 ????				       else
   1209  28000 ????				       adc	.ByteOffset
   1210  28000 ????				       endif
   1211  28000 ????				       asl
   1212  28000 ????				       if	MACARG5CONST = 1
   1213  28000 ????				       adc	#.ByteOffset
   1214  28000 ????				       else
   1215  28000 ????				       adc	.ByteOffset
   1216  28000 ????				       endif
   1217  28000 ????				       asl
   1218  28000 ????				       if	MACARG5CONST = 1
   1219  28000 ????				       adc	#.ByteOffset
   1220  28000 ????				       else
   1221  28000 ????				       adc	.ByteOffset
   1222  28000 ????				       endif
   1223  28000 ????				       endif
   1224  28000 ????				       if	{1}_width = 16
   1225  28000 ????				       asl
   1226  28000 ????				       asl
   1227  28000 ????				       asl
   1228  28000 ????				       asl
   1229  28000 ????				       endif
   1230  28000 ????				       adc	#<.GFXLabel
   1231  28000 ????				       else
   1232  28000 ????				       lda	#<.GFXLabel
   1233  28000 ????				       endif		; .ByteOffset
   1234  28000 ????				       sta	(dlpnt),y	; #1 - low byte object address
   1235  28000 ????
   1236  28000 ????				       iny
   1237  28000 ????				       if	MACARG2CONST = 1
   1238  28000 ????				       lda	#({1}_width_twoscompliment | (.Palette * 32))
   1239  28000 ????				       else
   1240  28000 ????				       lda	#({1}_width_twoscompliment)
   1241  28000 ????				       ora	.Palette
   1242  28000 ????				       endif
   1243  28000 ????
   1244  28000 ????				       sta	(dlpnt),y	; #2 - palette|width
   1245  28000 ????
   1246  28000 ????				       iny
   1247  28000 ????				       if	MACARG4CONST = 0
   1248  28000 ????				       lda	.SpriteY
   1249  28000 ????				       else
   1250  28000 ????				       lda	#.SpriteY
   1251  28000 ????				       endif
   1252  28000 ????				       and	#(WZONEHEIGHT - 1)
   1253  28000 ????				       ora	#>(.GFXLabel - (WZONEHEIGHT * 256))	; start in the dma hole
   1254  28000 ????				       sta	(dlpnt),y	; #3 - hi byte object address
   1255  28000 ????
   1256  28000 ????				       iny
   1257  28000 ????				       if	MACARG3CONST = 1
   1258  28000 ????				       lda	#.SpriteX
   1259  28000 ????				       else
   1260  28000 ????				       lda	.SpriteX
   1261  28000 ????				       endif
   1262  28000 ????				       sta	(dlpnt),y	; #4 - x object position
   1263  28000 ????
   1264  28000 ????				       iny
   1265  28000 ????				       sty	dlend,x
   1266  28000 ????
   1267  28000 ????				       ifconst	ALWAYSTERMINATE
   1268  28000 ????				       iny
   1269  28000 ????				       lda	#0
   1270  28000 ????				       sta	(dlpnt),y
   1271  28000 ????				       endif
   1272  28000 ????
   1273  28000 ????			    .PLOTSPRITEend
   1274  28000 ????				       ENDM
   1275  28000 ????
   1276  28000 ????				       MAC	scrollsetup
   1277  28000 ????
   1278  28000 ????						; If vertical scrolling is enabled...
   1279  28000 ????						;   * Fills the DLs with hidden masking sprites.
   1280  28000 ????						; Adds blank sprites to the DLs to fill the screen.
   1281  28000 ????						; If horizontal scrolling is enabled...
   1282  28000 ????						;   * Adds another blank DL off-screen
   1283  28000 ????
   1284  28000 ????						; {1} - constant - the first dl of the scrolling area
   1285  28000 ????						; {2} - symbol   - blank tile label
   1286  28000 ????
   1287  28000 ????						; *** clear the saved dl ending for scrolling zones...
   1288  28000 ????				       ldx	#{1}
   1289  28000 ????				       lda	#0
   1290  28000 ????			    .scrollcleardls
   1291  28000 ????				       sta	dlend,x
   1292  28000 ????				       inx
   1293  28000 ????				       cpx	#WZONECOUNT
   1294  28000 ????				       bne	.scrollcleardls
   1295  28000 ????
   1296  28000 ????				       ifconst	VSCROLL
   1297  28000 ????						; *** adjust the ending for our mask dl to allow for mask objects...
   1298  28000 ????				       dex
   1299  28000 ????				       lda	#(maskscrollspriteend-maskscrollsprite)
   1300  28000 ????				       sta	dlend,x
   1301  28000 ????
   1302  28000 ????						; *** Add 4x dma masking objects to last zone...
   1303  28000 ????				       ldx	#(maskscrollspriteend-maskscrollsprite-1)
   1304  28000 ????			    .scrollpopulateloop1
   1305  28000 ????				       lda	maskscrollsprite,x
   1306  28000 ????				       sta	LASTZONEADDRESS+0,x
   1307  28000 ????				       ifconst	DOUBLEBUFFER
   1308  28000 ????				       sta	LASTZONEADDRESS+0+DOUBLEBUFFEROFFSET,x
   1309  28000 ????				       endif		; DOUBLEBUFFER
   1310  28000 ????				       dex
   1311  28000 ????				       bpl	.scrollpopulateloop1
   1312  28000 ????				       inx		; x=0
   1313  28000 ????				       stx	finescrolly
   1314  28000 ????				       endif		; VSCROLL
   1315  28000 ????
   1316  28000 ????						; *** Add blank sprite-tile objects to the scrolling zones...
   1317  28000 ????			    PLOTSP4    =	1	; ensure we use 4 byte sprites
   1318  28000 ????
   1319  28000 ????						; convert byte width of the sprit to coordinate width...
   1320  28000 ????				       if	{2}_mode = 0	; ### 160A, 320A, 320D
   1321  28000 ????			    .scrollXWIDTH SET	({2}_width * 4)	; 4x 160-mode pixels per byte
   1322  28000 ????				       else		; ### 160B, 320B, 320C
   1323  28000 ????			    .scrollXWIDTH SET	({2}_width * 2)	; 2x 160-mode pixels per byte
   1324  28000 ????				       endif
   1325  28000 ????
   1326  28000 ????						; figure out how many sprites we need to fill a screen width...
   1327  28000 ????			    .scrollSPRITECOuNT SET	((160+.scrollXWIDTH-1)/.scrollXWIDTH)
   1328  28000 ????				       ifconst	HSCROLL
   1329  28000 ????			    .scrollSPRITECOuNT SET	(.scrollSPRITECOuNT+1)
   1330  28000 ????				       endif		; HSCROLL
   1331  28000 ????
   1332  28000 ????						; setup plotsprite4 parameters...
   1333  28000 ????				       lda	#<{2}
   1334  28000 ????				       sta	temp1
   1335  28000 ????				       lda	#>{2}
   1336  28000 ????				       sta	temp2
   1337  28000 ????				       lda	#{2}_width_twoscompliment
   1338  28000 ????				       sta	temp3	; width
   1339  28000 ????
   1340  28000 ????				       lda	#{1}
   1341  28000 ????				       asl
   1342  28000 ????				       asl
   1343  28000 ????				       asl
   1344  28000 ????				       if	WZONEHEIGHT
   1345  28000 ????				       asl
   1346  28000 ????				       endif
   1347  28000 ????				       sta	temp5	; Y
   1348  28000 ????			    .scrollpopulateloop2
   1349  28000 ????				       lda	#0
   1350  28000 ????				       sta	temp4	; X
   1351  28000 ????			    .scrollpopulateloop3
   1352  28000 ????				       jsr	skipplotsprite4wait
   1353  28000 ????				       lda	temp4	; X
   1354  28000 ????				       clc
   1355  28000 ????				       adc	#.scrollXWIDTH
   1356  28000 ????				       sta	temp4	; X
   1357  28000 ????				       cmp	#(.scrollSPRITECOuNT*.scrollXWIDTH)
   1358  28000 ????				       bne	.scrollpopulateloop3
   1359  28000 ????				       lda	temp5	; Y
   1360  28000 ????				       clc
   1361  28000 ????				       adc	#WZONEHEIGHT
   1362  28000 ????				       sta	temp5	; Y
   1363  28000 ????				       cmp	#((WZONECOUNT*WZONEHEIGHT)+WZONEHEIGHT)
   1364  28000 ????				       bne	.scrollpopulateloop2
   1365  28000 ????				       ENDM
   1366  28000 ????
   1367  28000 ????				       MAC	sizeof
   1368  28000 ????
   1369  28000 ????						; echoes the size difference between the current address and the
   1370  28000 ????						; a label that was passed as an argument. This is a quick way to
   1371  28000 ????						; determine the size of a structure.
   1372  28000 ????
   1373  28000 ????			    .NAME      SETSTR	{1}
   1374  28000 ????				       echo	" The Size of",.NAME,"is:",[* - {1}]d,[* - {2}]d,"bytes."
   1375  28000 ????				       ENDM
   1376  28000 ????
   1377  28000 ????						;
   1378  28000 ????						; speakjet.inc
   1379  28000 ????						;
   1380  28000 ????						;
   1381  28000 ????						; AtariVox Speech Synth Driver
   1382  28000 ????						;
   1383  28000 ????						; By Alex Herbert, 2004
   1384  28000 ????						;
   1385  28000 ????
   1386  28000 ????
   1387  28000 ????
   1388  28000 ????
   1389  28000 ????						; Constants
   1390  28000 ????
   1391  28000 ????
   1392  28000 ????		00 01	    SERIAL_OUTMASK equ	$01
   1393  28000 ????		00 02	    SERIAL_RDYMASK equ	$02
   1394  28000 ????
   1395  28000 ????
   1396  28000 ????
   1397  28000 ????						; Macros
   1398  28000 ????
   1399  28000 ????				       mac	spkout
   1400  28000 ????
   1401  28000 ????						; check buffer-full status
   1402  28000 ????				       lda	SWCHA
   1403  28000 ????				       and	#SERIAL_RDYMASK
   1404  28000 ????				       beq	.speech_done
   1405  28000 ????
   1406  28000 ????						; get next speech byte
   1407  28000 ????				       ldy	#$00
   1408  28000 ????				       lda	(speech_addr),y
   1409  28000 ????
   1410  28000 ????						; invert data and check for end of string
   1411  28000 ????				       eor	#$ff
   1412  28000 ????						;sta BACKGRND ; debug - uncomment to flash the background color with vox data
   1413  28000 ????				       beq	.speech_done
   1414  28000 ????				       sta	{1}
   1415  28000 ????
   1416  28000 ????						; increment speech pointer
   1417  28000 ????				       inc	speech_addr
   1418  28000 ????				       bne	.incaddr_skip
   1419  28000 ????				       inc	speech_addr+1
   1420  28000 ????			    .incaddr_skip
   1421  28000 ????
   1422  28000 ????						; output byte as serial data
   1423  28000 ????
   1424  28000 ????				       sec		; start bit
   1425  28000 ????			    .byteout_loop
   1426  28000 ????						; put carry flag into bit 0 of SWACNT, preserving other bits
   1427  28000 ????				       lda	SWACNT	; 4
   1428  28000 ????				       and	#$fe	; 2 6
   1429  28000 ????				       adc	#$00	; 2 8
   1430  28000 ????				       sta	SWACNT	; 4 12
   1431  28000 ????
   1432  28000 ????						; 10 bits sent? (1 start bit, 8 data bits, 1 stop bit)
   1433  28000 ????				       cpy	#$09	; 2 14
   1434  28000 ????				       beq	.speech_done	; 2 16
   1435  28000 ????				       iny		; 2 18
   1436  28000 ????
   1437  28000 ????						; the 7800 is 1.5x faster than the 2600. Waste more cycles here
   1438  28000 ????						; to match the original baud rate...
   1439  28000 ????						;ldx	  #$07 ; 2600
   1440  28000 ????				       ldx	#$0D
   1441  28000 ????
   1442  28000 ????			    .delay_loop
   1443  28000 ????				       dex		; 
   1444  28000 ????				       bne	.delay_loop	; 36 54
   1445  28000 ????
   1446  28000 ????						; shift next data bit into carry
   1447  28000 ????				       lsr	{1}	; 5 59
   1448  28000 ????
   1449  28000 ????						; and loop (branch always taken)
   1450  28000 ????				       bpl	.byteout_loop	; 3 62 cycles for loop
   1451  28000 ????
   1452  28000 ????			    .speech_done
   1453  28000 ????
   1454  28000 ????				       endm
   1455  28000 ????
   1456  28000 ????
   1457  28000 ????				       mac	speak
   1458  28000 ????
   1459  28000 ????				       lda	#<{1}
   1460  28000 ????				       sta	speech_addr
   1461  28000 ????				       lda	#>{1}
   1462  28000 ????				       sta	speech_addr+1
   1463  28000 ????
   1464  28000 ????				       endm
   1465  28000 ????
   1466  28000 ????
   1467  28000 ????
   1468  28000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
   1469  28000 ????
   1470  28000 ????				       processor	6502
   1471  28000 ????
------- FILE 7800basic.h LEVEL 2 PASS 3
      0  28000 ????				       include	"7800basic.h"
      1  28000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  28000 ????
      3  28000 ????				       processor	6502
------- FILE 7800.h LEVEL 3 PASS 3
      0  28000 ????				       include	"7800.h"
      1  28000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  28000 ????
      3  28000 ????						; 7800.h
      4  28000 ????						; Version 1.0, 2019/12/13
      5  28000 ????
      6  28000 ????						; This file defines hardware registers and memory mapping for the
      7  28000 ????						; Atari 7800. It is distributed as a companion machine-specific support package
      8  28000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
      9  28000 ????						; available at https://github.com/dasm-assembler/dasm
     10  28000 ????
     11  28000 ????
     12  28000 ????						; ******************** 7800 Hardware Addresses ***************************
     13  28000 ????						;
     14  28000 ????						;	 MEMORY MAP USAGE OF THE 7800
     15  28000 ????						;
     16  28000 ????						;	  00 -   1F	TIA REGISTERS
     17  28000 ????						;	  20 -   3F	MARIA REGISTERS
     18  28000 ????						;	  40 -   FF	RAM block 0 (zero page)
     19  28000 ????						;	 100 -  11F	TIA   (mirror of 0000-001f)
     20  28000 ????						;	 120 -  13F	MARIA (mirror of 0020-003f)
     21  28000 ????						;	 140 -  1FF	RAM block 1 (stack)
     22  28000 ????						;	 200 -  21F	TIA   (mirror of 0000-001f)
     23  28000 ????						;	 220 -  23F	MARIA (mirror of 0020-003f)
     24  28000 ????						;	 240 -  27F	???
     25  28000 ????						;	 280 -  2FF	RIOT I/O ports and timers
     26  28000 ????						;	 300 -  31F	TIA   (mirror of 0000-001f)
     27  28000 ????						;	 320 -  33F	MARIA (mirror of 0020-003f)
     28  28000 ????						;	 340 -  3FF	???
     29  28000 ????						;	 400 -  47F	unused address space
     30  28000 ????						;	 480 -  4FF	RIOT RAM
     31  28000 ????						;	 500 -  57F	unused address space
     32  28000 ????						;	 580 -  5FF	RIOT RAM (mirror of 0480-04ff)
     33  28000 ????						;	 600 - 17FF	unused address space
     34  28000 ????						;	1800 - 203F	RAM
     35  28000 ????						;	2040 - 20FF	RAM block 0 (mirror of 0000-001f)
     36  28000 ????						;	2100 - 213F	RAM
     37  28000 ????						;	2140 - 21FF	RAM block 1 (mirror of 0140-01ff)
     38  28000 ????						;	2200 - 27FF	RAM
     39  28000 ????						;	2800 - 2FFF	unavailable to external devices (bios bus-conflict)
     40  28000 ????						;	3000 - 3FFF	unused address space
     41  28000 ????						;	4000 - FF7F	potential cartridge address space
     42  28000 ????						;	FF80 - FFF9	RESERVED FOR ENCRYPTION
     43  28000 ????						;	FFFA - FFFF	6502 VECTORS
     44  28000 ????
     45  28000 ????
     46  28000 ????						;****** 00-1F ********* TIA REGISTERS ******************
     47  28000 ????
     48  28000 ????		00 01	    INPTCTRL   =	$01	;Input control. In same address space as TIA. write-only
     49  28000 ????		00 01	    VBLANK     =	$01	;VBLANK. D7=1:dump paddle caps to ground.     write-only
     50  28000 ????		00 02	    _WSYNC     =	$02	;Wait for HSync			       write-only
     51  28000 ????		00 03	    _RSYNC     =	$03	;Reset HSync				       write-only
     52  28000 ????		00 08	    INPT0      =	$08	;Paddle Control Input 0		       read-only
     53  28000 ????		00 09	    INPT1      =	$09	;Paddle Control Input 1		       read-only
     54  28000 ????		00 0a	    INPT2      =	$0A	;Paddle Control Input 2		       read-only
     55  28000 ????		00 0b	    INPT3      =	$0B	;Paddle Control Input 3		       read-only
     56  28000 ????
     57  28000 ????						; ** some common alternate names for INPT0/1/2/3
     58  28000 ????		00 08	    INPT4B     =	$08	;Joystick 0 Fire 1			       read-only
     59  28000 ????		00 09	    INPT4A     =	$09	;Joystick 0 Fire 1			       read-only
     60  28000 ????		00 0a	    INPT5B     =	$0A	;Joystick 1 Fire 0			       read-only
     61  28000 ????		00 0b	    INPT5A     =	$0B	;Joystick 1 Fire 1			       read-only
     62  28000 ????		00 08	    INPT4R     =	$08	;Joystick 0 Fire 1			       read-only
     63  28000 ????		00 09	    INPT4L     =	$09	;Joystick 0 Fire 1			       read-only
     64  28000 ????		00 0a	    INPT5R     =	$0A	;Joystick 1 Fire 0			       read-only
     65  28000 ????		00 0b	    INPT5L     =	$0B	;Joystick 1 Fire 1			       read-only
     66  28000 ????
     67  28000 ????		00 0c	    INPT4      =	$0C	;Player 0 Fire Button Input		       read-only
     68  28000 ????		00 0d	    INPT5      =	$0D	;Player 1 Fire Button Input		       read-only
     69  28000 ????
     70  28000 ????		00 15	    AUDC0      =	$15	;Audio Control Channel   0		       write-only
     71  28000 ????		00 16	    AUDC1      =	$16	;Audio Control Channel   1		       write-only
     72  28000 ????		00 17	    AUDF0      =	$17	;Audio Frequency Channel 0		       write-only
     73  28000 ????		00 18	    AUDF1      =	$18	;Audio Frequency Channel 1		       write-only
     74  28000 ????		00 19	    AUDV0      =	$19	;Audio Volume Channel	  0		       write-only
     75  28000 ????		00 1a	    AUDV1      =	$1A	;Audio Volume Channel	  1		       write-only
     76  28000 ????
     77  28000 ????						;****** 20-3F ********* MARIA REGISTERS ***************
     78  28000 ????
     79  28000 ????		00 20	    BACKGRND   =	$20	;Background Color			       write-only
     80  28000 ????		00 21	    P0C1       =	$21	;Palette 0 - Color 1			       write-only
     81  28000 ????		00 22	    P0C2       =	$22	;Palette 0 - Color 2			       write-only
     82  28000 ????		00 23	    P0C3       =	$23	;Palette 0 - Color 3			       write-only
     83  28000 ????		00 24	    WSYNC      =	$24	;Wait For Sync 			       write-only
     84  28000 ????		00 25	    P1C1       =	$25	;Palette 1 - Color 1			       write-only
     85  28000 ????		00 26	    P1C2       =	$26	;Palette 1 - Color 2			       write-only
     86  28000 ????		00 27	    P1C3       =	$27	;Palette 1 - Color 3			       write-only
     87  28000 ????		00 28	    MSTAT      =	$28	;Maria Status				       read-only
     88  28000 ????		00 29	    P2C1       =	$29	;Palette 2 - Color 1			       write-only
     89  28000 ????		00 2a	    P2C2       =	$2A	;Palette 2 - Color 2			       write-only
     90  28000 ????		00 2b	    P2C3       =	$2B	;Palette 2 - Color 3			       write-only
     91  28000 ????		00 2c	    DPPH       =	$2C	;Display List List Pointer High	       write-only
     92  28000 ????		00 2d	    P3C1       =	$2D	;Palette 3 - Color 1			       write-only
     93  28000 ????		00 2e	    P3C2       =	$2E	;Palette 3 - Color 2			       write-only
     94  28000 ????		00 2f	    P3C3       =	$2F	;Palette 3 - Color 3			       write-only
     95  28000 ????		00 30	    DPPL       =	$30	;Display List List Pointer Low 	       write-only
     96  28000 ????		00 31	    P4C1       =	$31	;Palette 4 - Color 1			       write-only
     97  28000 ????		00 32	    P4C2       =	$32	;Palette 4 - Color 2			       write-only
     98  28000 ????		00 33	    P4C3       =	$33	;Palette 4 - Color 3			       write-only
     99  28000 ????		00 34	    CHARBASE   =	$34	;Character Base Address		       write-only
    100  28000 ????		00 34	    CHBASE     =	$34	;Character Base Address		       write-only
    101  28000 ????		00 35	    P5C1       =	$35	;Palette 5 - Color 1			       write-only
    102  28000 ????		00 36	    P5C2       =	$36	;Palette 5 - Color 2			       write-only
    103  28000 ????		00 37	    P5C3       =	$37	;Palette 5 - Color 3			       write-only
    104  28000 ????		00 38	    OFFSET     =	$38	;Unused - Store zero here		       write-only
    105  28000 ????		00 39	    P6C1       =	$39	;Palette 6 - Color 1			       write-only
    106  28000 ????		00 3a	    P6C2       =	$3A	;Palette 6 - Color 2			       write-only
    107  28000 ????		00 3b	    P6C3       =	$3B	;Palette 6 - Color 3			       write-only
    108  28000 ????		00 3c	    CTRL       =	$3C	;Maria Control Register		       write-only
    109  28000 ????		00 3d	    P7C1       =	$3D	;Palette 7 - Color 1			       write-only
    110  28000 ????		00 3e	    P7C2       =	$3E	;Palette 7 - Color 2			       write-only
    111  28000 ????		00 3f	    P7C3       =	$3F	;Palette 7 - Color 3			       write-only
    112  28000 ????
    113  28000 ????
    114  28000 ????						;****** 280-2FF ******* PIA PORTS AND TIMERS ************
    115  28000 ????
    116  28000 ????		02 80	    SWCHA      =	$280	;P0+P1 Joystick Directional Input	       read-write
    117  28000 ????		02 81	    CTLSWA     =	$281	;I/O Control for SCHWA 		       read-write
    118  28000 ????		02 81	    SWACNT     =	$281	;VCS name for above			       read-write
    119  28000 ????		02 82	    SWCHB      =	$282	;Console Switches			       read-write
    120  28000 ????		02 83	    CTLSWB     =	$283	;I/O Control for SCHWB 		       read-write
    121  28000 ????		02 83	    SWBCNT     =	$283	;VCS name for above			       read-write
    122  28000 ????		02 84	    INTIM      =	$284	;Interval Timer Read			       read-only
    123  28000 ????		02 85	    TIMINT     =	$285	;Interval Timer Interrupt		       read-only
    124  28000 ????
    125  28000 ????		02 94	    TIM1T      =	$294	;Set 1    CLK Interval (838   nsec/interval)  write-only
    126  28000 ????		02 95	    TIM8T      =	$295	;Set 8    CLK Interval (6.7   usec/interval)  write-only
    127  28000 ????		02 96	    TIM64T     =	$296	;Set 64   CLK Interval (63.6  usec/interval)  write-only
    128  28000 ????		02 97	    T1024T     =	$297	;Set 1024 CLK Interval (858.2 usec/interval)  write-only
    129  28000 ????		02 9e	    TIM64TI    =	$29E	;Interrupt timer 64T			       write-only
    130  28000 ????
    131  28000 ????						;XM
    132  28000 ????		04 70	    XCTRL      =	$470	; 7=YM2151 6=RAM@6k 5=RAM@4k 4=pokey@450 3=hsc 2=cart 1=RoF_bank1 0=RoF_bank2
    133  28000 ????		04 70	    XCTRL1     =	$470
    134  28000 ????		04 78	    XCTRL2     =	$478
    135  28000 ????		04 7c	    XCTRL3     =	$47c
    136  28000 ????		04 71	    XCTRL4     =	$471
    137  28000 ????		04 72	    XCTRL5     =	$472
    138  28000 ????
    139  28000 ????						; Pokey register relative locations, since its base may be different
    140  28000 ????						; depending on the hardware.
    141  28000 ????		00 00	    PAUDF0     =	$0	; extra audio channels and frequencies
    142  28000 ????		00 01	    PAUDC0     =	$1
    143  28000 ????		00 02	    PAUDF1     =	$2
    144  28000 ????		00 03	    PAUDC1     =	$3
    145  28000 ????		00 04	    PAUDF2     =	$4
    146  28000 ????		00 05	    PAUDC2     =	$5
    147  28000 ????		00 06	    PAUDF3     =	$6
    148  28000 ????		00 07	    PAUDC3     =	$7
    149  28000 ????		00 08	    PAUDCTL    =	$8	; Audio Control
    150  28000 ????		00 09	    PSTIMER    =	$9
    151  28000 ????		00 0a	    PRANDOM    =	$A	; 17 bit polycounter pseudo random
    152  28000 ????		00 0f	    PSKCTL     =	$F	; Serial Port control
------- FILE 7800basic.h
------- FILE 7800basic_variable_redefs.h LEVEL 3 PASS 3
      0  28000 ????				       include	"7800basic_variable_redefs.h"
      1  28000 ????						; This file contains variable mapping and other information for the current project.
      2  28000 ????
      3  28000 ????		00 80	    title01_mode =	$80
      4  28000 ????		00 10	    title01_width_twoscompliment =	$10
      5  28000 ????		00 30	    title01_width =	$30
      6  28000 ????		00 80	    title00_mode =	$80
      7  28000 ????		00 10	    title00_width_twoscompliment =	$10
      8  28000 ????		00 30	    title00_width =	$30
      9  28000 ????		00 00	    orb6_mode  =	$00
     10  28000 ????		00 1e	    orb6_width_twoscompliment =	$1e
     11  28000 ????		00 02	    orb6_width =	$02
     12  28000 ????		00 00	    orb5_mode  =	$00
     13  28000 ????		00 1e	    orb5_width_twoscompliment =	$1e
     14  28000 ????		00 02	    orb5_width =	$02
     15  28000 ????		00 00	    orb4_mode  =	$00
     16  28000 ????		00 1e	    orb4_width_twoscompliment =	$1e
     17  28000 ????		00 02	    orb4_width =	$02
     18  28000 ????		00 00	    orb3_mode  =	$00
     19  28000 ????		00 1e	    orb3_width_twoscompliment =	$1e
     20  28000 ????		00 02	    orb3_width =	$02
     21  28000 ????		00 00	    orb2_mode  =	$00
     22  28000 ????		00 1e	    orb2_width_twoscompliment =	$1e
     23  28000 ????		00 02	    orb2_width =	$02
     24  28000 ????		00 00	    orb1_mode  =	$00
     25  28000 ????		00 1e	    orb1_width_twoscompliment =	$1e
     26  28000 ????		00 02	    orb1_width =	$02
     27  28000 ????		00 00	    player4_mode =	$00
     28  28000 ????		00 1c	    player4_width_twoscompliment =	$1c
     29  28000 ????		00 04	    player4_width =	$04
     30  28000 ????		00 00	    player3_mode =	$00
     31  28000 ????		00 1c	    player3_width_twoscompliment =	$1c
     32  28000 ????		00 04	    player3_width =	$04
     33  28000 ????		00 00	    player2_mode =	$00
     34  28000 ????		00 1c	    player2_width_twoscompliment =	$1c
     35  28000 ????		00 04	    player2_width =	$04
     36  28000 ????		00 00	    player1_mode =	$00
     37  28000 ????		00 1c	    player1_width_twoscompliment =	$1c
     38  28000 ????		00 04	    player1_width =	$04
     39  28000 ????		00 00	    font_mode  =	$00
     40  28000 ????		00 0b	    font_width_twoscompliment =	$0b
     41  28000 ????		00 35	    font_width =	$35
     42  28000 ????		01 4d	    randomSeed =	var13
     43  28000 ????
     44  28000 ????		01 4c	    orbAnimWait =	var12
     45  28000 ????
     46  28000 ????		01 4b	    orbAnimFrame =	var11
     47  28000 ????
     48  28000 ????		01 4a	    orbY       =	var10
     49  28000 ????
     50  28000 ????		01 49	    orbX       =	var9
     51  28000 ????
     52  28000 ????		01 48	    playerAnimWait =	var8
     53  28000 ????
     54  28000 ????		01 47	    playerAnimFrame =	var7
     55  28000 ????
     56  28000 ????		01 46	    playerY    =	var6
     57  28000 ????
     58  28000 ????		01 45	    playerX    =	var5
     59  28000 ????
     60  28000 ????		01 43	    lives      =	var3
     61  28000 ????
     62  28000 ????		01 42	    wait       =	var2
     63  28000 ????
     64  28000 ????		01 41	    bgColor    =	var1
     65  28000 ????
     66  28000 ????		00 a8	    title_color12 =	title00_color12
     67  28000 ????		00 a9	    title_color11 =	title00_color11
     68  28000 ????		00 a7	    title_color10 =	title00_color10
     69  28000 ????		00 a4	    title_color9 =	title00_color9
     70  28000 ????		00 93	    title_color8 =	title00_color8
     71  28000 ????		00 ab	    title_color7 =	title00_color7
     72  28000 ????		00 92	    title_color6 =	title00_color6
     73  28000 ????		00 aa	    title_color5 =	title00_color5
     74  28000 ????		00 91	    title_color4 =	title00_color4
     75  28000 ????		00 a6	    title_color3 =	title00_color3
     76  28000 ????		00 a5	    title_color2 =	title00_color2
     77  28000 ????		00 91	    title_color1 =	title00_color1
     78  28000 ????		00 00	    title01_color15 =	0
     79  28000 ????		00 00	    title01_color14 =	0
     80  28000 ????		00 00	    title01_color13 =	0
     81  28000 ????		00 a8	    title01_color12 =	$a8
     82  28000 ????		00 a9	    title01_color11 =	$a9
     83  28000 ????		00 a7	    title01_color10 =	$a7
     84  28000 ????		00 a4	    title01_color9 =	$a4
     85  28000 ????		00 93	    title01_color8 =	$93
     86  28000 ????		00 ab	    title01_color7 =	$ab
     87  28000 ????		00 92	    title01_color6 =	$92
     88  28000 ????		00 aa	    title01_color5 =	$aa
     89  28000 ????		00 91	    title01_color4 =	$91
     90  28000 ????		00 a6	    title01_color3 =	$a6
     91  28000 ????		00 a5	    title01_color2 =	$a5
     92  28000 ????		00 91	    title01_color1 =	$91
     93  28000 ????		00 00	    title01_color0 =	$00
     94  28000 ????		00 00	    title00_color15 =	0
     95  28000 ????		00 00	    title00_color14 =	0
     96  28000 ????		00 00	    title00_color13 =	0
     97  28000 ????		00 a8	    title00_color12 =	$a8
     98  28000 ????		00 a9	    title00_color11 =	$a9
     99  28000 ????		00 a7	    title00_color10 =	$a7
    100  28000 ????		00 a4	    title00_color9 =	$a4
    101  28000 ????		00 93	    title00_color8 =	$93
    102  28000 ????		00 ab	    title00_color7 =	$ab
    103  28000 ????		00 92	    title00_color6 =	$92
    104  28000 ????		00 aa	    title00_color5 =	$aa
    105  28000 ????		00 91	    title00_color4 =	$91
    106  28000 ????		00 a6	    title00_color3 =	$a6
    107  28000 ????		00 a5	    title00_color2 =	$a5
    108  28000 ????		00 91	    title00_color1 =	$91
    109  28000 ????		00 00	    title00_color0 =	$00
    110  28000 ????		00 a3	    orb6_color3 =	$a3
    111  28000 ????		00 b8	    orb6_color2 =	$b8
    112  28000 ????		00 a4	    orb6_color1 =	$a4
    113  28000 ????		00 00	    orb6_color0 =	$00
    114  28000 ????		00 b8	    orb5_color3 =	$b8
    115  28000 ????		00 a3	    orb5_color2 =	$a3
    116  28000 ????		00 a4	    orb5_color1 =	$a4
    117  28000 ????		00 00	    orb5_color0 =	$00
    118  28000 ????		00 00	    orb4_color3 =	0
    119  28000 ????		00 a3	    orb4_color2 =	$a3
    120  28000 ????		00 a4	    orb4_color1 =	$a4
    121  28000 ????		00 00	    orb4_color0 =	$00
    122  28000 ????		00 b8	    orb3_color3 =	$b8
    123  28000 ????		00 a3	    orb3_color2 =	$a3
    124  28000 ????		00 a4	    orb3_color1 =	$a4
    125  28000 ????		00 00	    orb3_color0 =	$00
    126  28000 ????		00 a3	    orb2_color3 =	$a3
    127  28000 ????		00 b8	    orb2_color2 =	$b8
    128  28000 ????		00 a4	    orb2_color1 =	$a4
    129  28000 ????		00 00	    orb2_color0 =	$00
    130  28000 ????		00 b8	    orb1_color3 =	$b8
    131  28000 ????		00 a3	    orb1_color2 =	$a3
    132  28000 ????		00 a4	    orb1_color1 =	$a4
    133  28000 ????		00 00	    orb1_color0 =	$00
    134  28000 ????		00 00	    player4_color3 =	0
    135  28000 ????		00 44	    player4_color2 =	$44
    136  28000 ????		00 0d	    player4_color1 =	$0d
    137  28000 ????		00 00	    player4_color0 =	$00
    138  28000 ????		00 07	    player3_color3 =	$07
    139  28000 ????		00 44	    player3_color2 =	$44
    140  28000 ????		00 0d	    player3_color1 =	$0d
    141  28000 ????		00 00	    player3_color0 =	$00
    142  28000 ????		00 07	    player2_color3 =	$07
    143  28000 ????		00 44	    player2_color2 =	$44
    144  28000 ????		00 0d	    player2_color1 =	$0d
    145  28000 ????		00 00	    player2_color0 =	$00
    146  28000 ????		00 07	    player1_color3 =	$07
    147  28000 ????		00 44	    player1_color2 =	$44
    148  28000 ????		00 0d	    player1_color1 =	$0d
    149  28000 ????		00 00	    player1_color0 =	$00
    150  28000 ????		00 0f	    font_color1 =	$0f
    151  28000 ????		00 00	    font_color0 =	$00
    152  28000 ????		00 01	    DOUBLEBUFFER =	1
    153  28000 ????		00 01	    SGRAM      =	1
    154  28000 ????		00 08	    bankswitchmode =	8
    155  28000 ????		00 01	    ROM128K    =	1
    156  28000 ????		00 01	    plotvalueonscreen =	1
    157  28000 ????		00 10	    ZONEHEIGHT =	16
    158  28000 ????		00 01	    collisionwrap =	1
------- FILE 7800basic.h
      6  28000 ????
      7  28000 ????						;************ 7800 overall RAM map **************
      8  28000 ????
      9  28000 ????						;	   40-FF	 zero page RAM
     10  28000 ????						;	  140-1FF	 RAM (stack)
     11  28000 ????						;	 1800-203F	 RAM
     12  28000 ????						;	 2100-213F	 RAM
     13  28000 ????						;	 2200-27FF	 RAM
     14  28000 ????
     15  28000 ????						;************ 7800basic RAM usage map **************
     16  28000 ????
     17  28000 ????						;	   40-FF	 numerous defines, listed below
     18  28000 ????						;	  140-1FF	 RAM (stack)
     19  28000 ????
     20  28000 ????						;	 1800-187F	 DLL  (1800-18DF with page flipping enabled)
     21  28000 ????						;	 1880-1FFF	 DLs  (18E0-1FFF with page flipping enabled)
     22  28000 ????
     23  28000 ????						;	 2000-203F	 Reserved
     24  28000 ????						;	 2100-213F	 Reserved
     25  28000 ????						;	 2200-27FF	 Free
     26  28000 ????
     27  28000 ????		1f e0	    eeprombuffer =	$1FE0
     28  28000 ????		18 00	    DLLMEM     =	$1800
     29  28000 ????		00 70	    DBOFFSET   =	$70	; $E0 length DL is /2 for double-buffering
     30  28000 ????
     31  28000 ????			   -	       ifconst	PLOTVALUEPAGE
     32  28000 ????			   -VALBUFFER  =	(PLOTVALUEPAGE*256)
     33  28000 ????				       else
     34  28000 ????		20 00	    VALBUFFER  =	$2000	; to $203F  ** never let VALBUFFER straddle pages
     35  28000 ????				       endif
     36  28000 ????
     37  28000 ????
     38  28000 ????		21 00	    pausestate =	$2100
     39  28000 ????		21 01	    dlzero     =	$2101	; zero to force end of $2100 DL, which we use in vblank and overscan
     40  28000 ????		21 02	    sINPT1     =	$2102	; save register for joy button joy0
     41  28000 ????		21 03	    sINPT3     =	$2103	; save register for joy button joy1
     42  28000 ????		21 04	    currentbank =	$2104
     43  28000 ????
     44  28000 ????		21 05	    currentrambank =	$2105
     45  28000 ????		21 06	    charactermode =	$2106
     46  28000 ????		21 07	    sCTRL      =	$2107
     47  28000 ????		21 08	    pokeydetected =	$2108
     48  28000 ????		21 09	    paldetected =	$2109
     49  28000 ????		21 0a	    avoxdetected =	$210A
     50  28000 ????		21 0b	    sCHARBASE  =	$210B	; save register for CHARBASE
     51  28000 ????
     52  28000 ????		21 0c	    hsdevice   =	$210C
     53  28000 ????		21 0d	    hsdifficulty =	$210D
     54  28000 ????		21 0e	    hserror    =	$210E
     55  28000 ????		21 0f	    hsgameslot =	$210F
     56  28000 ????		21 10	    hsnewscoreline =	$2110
     57  28000 ????		21 11	    hsnewscorerank =	$2111
     58  28000 ????		21 12	    HSRAMTable =	$2112	; to $212F (30 bytes) Format: III*5, SSS*5
     59  28000 ????		21 12	    HSRAMInitials =	$2112	; see above
     60  28000 ????		21 21	    HSRAMScores =	$2121	; see above
     61  28000 ????
     62  28000 ????		21 31	    sSWCHA     =	$2131
     63  28000 ????						; reserved	 = $2132
     64  28000 ????
     65  28000 ????		21 33	    hsdisplaymode =	$2133
     66  28000 ????		21 34	    gamedifficulty =	$2134
     67  28000 ????		21 35	    hsinitialpos =	$2135
     68  28000 ????		21 36	    hsinitialhold =	$2136
     69  28000 ????		21 37	    hscursorx  =	$2137
     70  28000 ????		21 38	    hsjoydebounce =	$2138
     71  28000 ????		21 39	    hsswcha    =	$2139
     72  28000 ????		21 3a	    hsinpt1    =	$213A
     73  28000 ????		21 3b	    hscolorchaseindex =	$213B
     74  28000 ????		21 3c	    visibleDLLstart =	$213C
     75  28000 ????		21 3d	    overscanDLLstart =	$213D
     76  28000 ????		21 3e	    frameslost =	$213E
     77  28000 ????		21 3f	    hsreturn   =	$213F
     78  28000 ????
     79  28000 ????
     80  28000 ????		00 40	    rand       =	$40
     81  28000 ????		00 41	    rand16     =	$41
     82  28000 ????		00 42	    temp1      =	$42
     83  28000 ????		00 43	    temp2      =	$43
     84  28000 ????		00 44	    temp3      =	$44
     85  28000 ????		00 45	    temp4      =	$45
     86  28000 ????		00 46	    temp5      =	$46
     87  28000 ????		00 47	    temp6      =	$47
     88  28000 ????		00 48	    temp7      =	$48
     89  28000 ????		00 49	    temp8      =	$49
     90  28000 ????		00 4a	    temp9      =	$4a
     91  28000 ????
     92  28000 ????		00 4b	    pokeybase  =	$4b
     93  28000 ????		00 4b	    pokeybaselo =	$4b
     94  28000 ????		00 4c	    pokeybasehi =	$4c
     95  28000 ????
     96  28000 ????		00 4d	    visibleover =	$4d
     97  28000 ????
     98  28000 ????		00 4e	    sfx1pointlo =	$4e
     99  28000 ????		00 4f	    sfx2pointlo =	$4f
    100  28000 ????		00 50	    sfx1pointhi =	$50
    101  28000 ????		00 51	    sfx2pointhi =	$51
    102  28000 ????
    103  28000 ????		00 52	    sfx1priority =	$52
    104  28000 ????		00 53	    sfx2priority =	$53
    105  28000 ????		00 54	    sfx1poffset =	$54
    106  28000 ????		00 55	    sfx2poffset =	$55
    107  28000 ????
    108  28000 ????		00 56	    sfx1frames =	$56
    109  28000 ????		00 57	    sfx2frames =	$57
    110  28000 ????		00 58	    sfx1tick   =	$58
    111  28000 ????		00 59	    sfx2tick   =	$59
    112  28000 ????
    113  28000 ????		00 5a	    tempmath   =	$5a
    114  28000 ????
    115  28000 ????		00 5b	    pokey1pointlo =	$5b
    116  28000 ????		00 5c	    pokey1pointhi =	$5c
    117  28000 ????		00 5d	    pokey2pointlo =	$5d
    118  28000 ????		00 5e	    pokey2pointhi =	$5e
    119  28000 ????		00 5f	    pokey3pointlo =	$5f
    120  28000 ????		00 60	    pokey3pointhi =	$60
    121  28000 ????		00 61	    pokey4pointlo =	$61
    122  28000 ????		00 62	    pokey4pointhi =	$62
    123  28000 ????
    124  28000 ????		00 63	    dlpnt      =	$63	; to $64
    125  28000 ????		00 65	    dlend      =	$65	; to $81 - for 29 possible visible dll entries
    126  28000 ????		00 82	    dlendsave  =	$82	; to $9e - for 29 possible visible dll entries
    127  28000 ????
    128  28000 ????		00 9f	    speech_addr =	$9f
    129  28000 ????		00 a0	    speech_addr_hi =	$a0
    130  28000 ????
    131  28000 ????		00 a1	    HSGameTableLo =	$a1
    132  28000 ????		00 a2	    HSGameTableHi =	$a2
    133  28000 ????		00 a3	    HSVoxHi    =	$a3
    134  28000 ????		00 a4	    HSVoxLo    =	$a4
    135  28000 ????
    136  28000 ????						;channel pointers
    137  28000 ????
    138  28000 ????		00 a5	    songchannel1layer1lo =	$a5
    139  28000 ????		00 a6	    songchannel2layer1lo =	$a6
    140  28000 ????		00 a7	    songchannel3layer1lo =	$a7
    141  28000 ????		00 a8	    songchannel4layer1lo =	$a8
    142  28000 ????
    143  28000 ????		00 a9	    songchannel1layer2lo =	$a9
    144  28000 ????		00 aa	    songchannel2layer2lo =	$aA
    145  28000 ????		00 ab	    songchannel3layer2lo =	$aB
    146  28000 ????		00 ac	    songchannel4layer2lo =	$aC
    147  28000 ????
    148  28000 ????		00 ad	    songchannel1layer3lo =	$aD
    149  28000 ????		00 ae	    songchannel2layer3lo =	$aE
    150  28000 ????		00 af	    songchannel3layer3lo =	$aF
    151  28000 ????		00 b0	    songchannel4layer3lo =	$b0
    152  28000 ????
    153  28000 ????		00 b1	    songchannel1layer1hi =	$b1
    154  28000 ????		00 b2	    songchannel2layer1hi =	$b2
    155  28000 ????		00 b3	    songchannel3layer1hi =	$b3
    156  28000 ????		00 b4	    songchannel4layer1hi =	$b4
    157  28000 ????
    158  28000 ????		00 b5	    songchannel1layer2hi =	$b5
    159  28000 ????		00 b6	    songchannel2layer2hi =	$b6
    160  28000 ????		00 b7	    songchannel3layer2hi =	$b7
    161  28000 ????		00 b8	    songchannel4layer2hi =	$b8
    162  28000 ????
    163  28000 ????		00 b9	    songchannel1layer3hi =	$b9
    164  28000 ????		00 ba	    songchannel2layer3hi =	$bA
    165  28000 ????		00 bb	    songchannel3layer3hi =	$bB
    166  28000 ????		00 bc	    songchannel4layer3hi =	$bC
    167  28000 ????
    168  28000 ????		00 bd	    songdatalo =	$bd
    169  28000 ????		00 be	    songdatahi =	$be
    170  28000 ????
    171  28000 ????		00 bf	    inactivechannelcount =	$bf
    172  28000 ????
    173  28000 ????		00 c0	    songchannel1transpose =	$c0
    174  28000 ????		00 c1	    songchannel2transpose =	$c1
    175  28000 ????		00 c2	    songchannel3transpose =	$c2
    176  28000 ????		00 c3	    songchannel4transpose =	$c3
    177  28000 ????
    178  28000 ????		00 c4	    songstackindex =	$c4
    179  28000 ????
    180  28000 ????		00 c5	    songchannel1instrumentlo =	$c5
    181  28000 ????		00 c6	    songchannel2instrumentlo =	$c6
    182  28000 ????		00 c7	    songchannel3instrumentlo =	$c7
    183  28000 ????		00 c8	    songchannel4instrumentlo =	$c8
    184  28000 ????
    185  28000 ????		00 c9	    songchannel1instrumenthi =	$c9
    186  28000 ????		00 ca	    songchannel2instrumenthi =	$ca
    187  28000 ????		00 cb	    songchannel3instrumenthi =	$cb
    188  28000 ????		00 cc	    songchannel4instrumenthi =	$cc
    189  28000 ????
    190  28000 ????		00 cd	    sfx1notedata =	$cd
    191  28000 ????		00 ce	    sfx2notedata =	$ce
    192  28000 ????
    193  28000 ????		00 cf	    songloops  =	$cf
    194  28000 ????
    195  28000 ????		00 d0	    songpointerlo =	$D0
    196  28000 ????		00 d1	    songpointerhi =	$D1
    197  28000 ????
    198  28000 ????		00 d2	    voxlock    =	$D2
    199  28000 ????		00 d3	    voxqueuesize =	$D3
    200  28000 ????
    201  28000 ????		00 d4	    vblankroutines =	$D4
    202  28000 ????
    203  28000 ????		00 d5	    doublebufferstate =	$D5
    204  28000 ????		00 d6	    doublebufferdloffset =	$D6
    205  28000 ????		00 d7	    doublebufferbufferdirty =	$D7
    206  28000 ????
    207  28000 ????		00 d8	    inttemp1   =	$D8
    208  28000 ????		00 d9	    inttemp2   =	$D9
    209  28000 ????		00 da	    inttemp3   =	$DA
    210  28000 ????		00 db	    inttemp4   =	$DB
    211  28000 ????		00 dc	    inttemp5   =	$DC
    212  28000 ????		00 dd	    inttemp6   =	$DD
    213  28000 ????
    214  28000 ????		00 de	    sfxschedulelock =	$DE
    215  28000 ????		00 df	    sfxschedulemissed =	$DF
    216  28000 ????		00 e0	    sfxinstrumentlo =	$E0
    217  28000 ????		00 e1	    sfxinstrumenthi =	$E1
    218  28000 ????		00 e2	    sfxpitchoffset =	$E2
    219  28000 ????		00 e3	    sfxnoteindex =	$E3
    220  28000 ????
    221  28000 ????						; reserved = $E4
    222  28000 ????						; reserved = $E5
    223  28000 ????
    224  28000 ????		00 e6	    A	       =	$e6
    225  28000 ????		00 e6	    a	       =	$e6
    226  28000 ????		00 e7	    B	       =	$e7
    227  28000 ????		00 e7	    b	       =	$e7
    228  28000 ????		00 e8	    C	       =	$e8
    229  28000 ????		00 e8	    c	       =	$e8
    230  28000 ????		00 e9	    D	       =	$e9
    231  28000 ????		00 e9	    d	       =	$e9
    232  28000 ????		00 ea	    E	       =	$ea
    233  28000 ????		00 ea	    e	       =	$ea
    234  28000 ????		00 eb	    F	       =	$eb
    235  28000 ????		00 eb	    f	       =	$eb
    236  28000 ????		00 ec	    G	       =	$ec
    237  28000 ????		00 ec	    g	       =	$ec
    238  28000 ????		00 ed	    H	       =	$ed
    239  28000 ????		00 ed	    h	       =	$ed
    240  28000 ????		00 ee	    I	       =	$ee
    241  28000 ????		00 ee	    i	       =	$ee
    242  28000 ????		00 ef	    J	       =	$ef
    243  28000 ????		00 ef	    j	       =	$ef
    244  28000 ????		00 f0	    K	       =	$f0
    245  28000 ????		00 f0	    k	       =	$f0
    246  28000 ????		00 f1	    L	       =	$f1
    247  28000 ????		00 f1	    l	       =	$f1
    248  28000 ????		00 f2	    M	       =	$f2
    249  28000 ????		00 f2	    m	       =	$f2
    250  28000 ????		00 f3	    N	       =	$f3
    251  28000 ????		00 f3	    n	       =	$f3
    252  28000 ????		00 f4	    O	       =	$f4
    253  28000 ????		00 f4	    o	       =	$f4
    254  28000 ????		00 f5	    P	       =	$f5
    255  28000 ????		00 f5	    p	       =	$f5
    256  28000 ????		00 f6	    Q	       =	$f6
    257  28000 ????		00 f6	    q	       =	$f6
    258  28000 ????		00 f7	    R	       =	$f7
    259  28000 ????		00 f7	    r	       =	$f7
    260  28000 ????		00 f8	    S	       =	$f8
    261  28000 ????		00 f8	    s	       =	$f8
    262  28000 ????		00 f9	    T	       =	$f9
    263  28000 ????		00 f9	    t	       =	$f9
    264  28000 ????		00 fa	    U	       =	$fa
    265  28000 ????		00 fa	    u	       =	$fa
    266  28000 ????		00 fb	    V	       =	$fb
    267  28000 ????		00 fb	    v	       =	$fb
    268  28000 ????		00 fc	    W	       =	$fc
    269  28000 ????		00 fc	    w	       =	$fc
    270  28000 ????		00 fd	    X	       =	$fd
    271  28000 ????		00 fd	    x	       =	$fd
    272  28000 ????		00 fe	    Y	       =	$fe
    273  28000 ????		00 fe	    y	       =	$fe
    274  28000 ????		00 ff	    Z	       =	$ff
    275  28000 ????		00 ff	    z	       =	$ff
    276  28000 ????
    277  28000 ????						; var0-var99 variables use the top of the stack
    278  28000 ????		01 40	    var0       =	$140
    279  28000 ????		01 41	    var1       =	$141
    280  28000 ????		01 42	    var2       =	$142
    281  28000 ????		01 43	    var3       =	$143
    282  28000 ????		01 44	    var4       =	$144
    283  28000 ????		01 45	    var5       =	$145
    284  28000 ????		01 46	    var6       =	$146
    285  28000 ????		01 47	    var7       =	$147
    286  28000 ????		01 48	    var8       =	$148
    287  28000 ????		01 49	    var9       =	$149
    288  28000 ????		01 4a	    var10      =	$14a
    289  28000 ????		01 4b	    var11      =	$14b
    290  28000 ????		01 4c	    var12      =	$14c
    291  28000 ????		01 4d	    var13      =	$14d
    292  28000 ????		01 4e	    var14      =	$14e
    293  28000 ????		01 4f	    var15      =	$14f
    294  28000 ????		01 50	    var16      =	$150
    295  28000 ????		01 51	    var17      =	$151
    296  28000 ????		01 52	    var18      =	$152
    297  28000 ????		01 53	    var19      =	$153
    298  28000 ????		01 54	    var20      =	$154
    299  28000 ????		01 55	    var21      =	$155
    300  28000 ????		01 56	    var22      =	$156
    301  28000 ????		01 57	    var23      =	$157
    302  28000 ????		01 58	    var24      =	$158
    303  28000 ????		01 59	    var25      =	$159
    304  28000 ????		01 5a	    var26      =	$15a
    305  28000 ????		01 5b	    var27      =	$15b
    306  28000 ????		01 5c	    var28      =	$15c
    307  28000 ????		01 5d	    var29      =	$15d
    308  28000 ????		01 5e	    var30      =	$15e
    309  28000 ????		01 5f	    var31      =	$15f
    310  28000 ????		01 60	    var32      =	$160
    311  28000 ????		01 61	    var33      =	$161
    312  28000 ????		01 62	    var34      =	$162
    313  28000 ????		01 63	    var35      =	$163
    314  28000 ????		01 64	    var36      =	$164
    315  28000 ????		01 65	    var37      =	$165
    316  28000 ????		01 66	    var38      =	$166
    317  28000 ????		01 67	    var39      =	$167
    318  28000 ????		01 68	    var40      =	$168
    319  28000 ????		01 69	    var41      =	$169
    320  28000 ????		01 6a	    var42      =	$16a
    321  28000 ????		01 6b	    var43      =	$16b
    322  28000 ????		01 6c	    var44      =	$16c
    323  28000 ????		01 6d	    var45      =	$16d
    324  28000 ????		01 6e	    var46      =	$16e
    325  28000 ????		01 6f	    var47      =	$16f
    326  28000 ????		01 70	    var48      =	$170
    327  28000 ????		01 71	    var49      =	$171
    328  28000 ????		01 72	    var50      =	$172
    329  28000 ????		01 73	    var51      =	$173
    330  28000 ????		01 74	    var52      =	$174
    331  28000 ????		01 75	    var53      =	$175
    332  28000 ????		01 76	    var54      =	$176
    333  28000 ????		01 77	    var55      =	$177
    334  28000 ????		01 78	    var56      =	$178
    335  28000 ????		01 79	    var57      =	$179
    336  28000 ????		01 7a	    var58      =	$17a
    337  28000 ????		01 7b	    var59      =	$17b
    338  28000 ????		01 7c	    var60      =	$17c
    339  28000 ????		01 7d	    var61      =	$17d
    340  28000 ????		01 7e	    var62      =	$17e
    341  28000 ????		01 7f	    var63      =	$17f
    342  28000 ????		01 80	    var64      =	$180
    343  28000 ????		01 81	    var65      =	$181
    344  28000 ????		01 82	    var66      =	$182
    345  28000 ????		01 83	    var67      =	$183
    346  28000 ????		01 84	    var68      =	$184
    347  28000 ????		01 85	    var69      =	$185
    348  28000 ????		01 86	    var70      =	$186
    349  28000 ????		01 87	    var71      =	$187
    350  28000 ????		01 88	    var72      =	$188
    351  28000 ????		01 89	    var73      =	$189
    352  28000 ????		01 8a	    var74      =	$18a
    353  28000 ????		01 8b	    var75      =	$18b
    354  28000 ????		01 8c	    var76      =	$18c
    355  28000 ????		01 8d	    var77      =	$18d
    356  28000 ????		01 8e	    var78      =	$18e
    357  28000 ????		01 8f	    var79      =	$18f
    358  28000 ????		01 90	    var80      =	$190
    359  28000 ????		01 91	    var81      =	$191
    360  28000 ????		01 92	    var82      =	$192
    361  28000 ????		01 93	    var83      =	$193
    362  28000 ????		01 94	    var84      =	$194
    363  28000 ????		01 95	    var85      =	$195
    364  28000 ????		01 96	    var86      =	$196
    365  28000 ????		01 97	    var87      =	$197
    366  28000 ????		01 98	    var88      =	$198
    367  28000 ????		01 99	    var89      =	$199
    368  28000 ????		01 9a	    var90      =	$19a
    369  28000 ????		01 9b	    var91      =	$19b
    370  28000 ????		01 9c	    var92      =	$19c
    371  28000 ????		01 9d	    var93      =	$19d
    372  28000 ????		01 9e	    var94      =	$19e
    373  28000 ????		01 9f	    var95      =	$19f
    374  28000 ????		01 a0	    var96      =	$1a0
    375  28000 ????		01 a1	    var97      =	$1a1
    376  28000 ????		01 a2	    var98      =	$1a2
    377  28000 ????		01 a3	    var99      =	$1a3
    378  28000 ????
    379 U01c5 ????				      SEG.U	"7800basicRAM"
    380 U01a4					      ORG	$1A4
    381 U01a4
    382 U01a4							; MAX allocation locations are in comments...
    383 U01a4		       00	   framecounter DS	1	; $1A4
    384 U01a5		       00	   countdownseconds DS	1	; $1A5
    385 U01a6		       00 00 00    score0     DS	3	; $1A6 $1A7 $1A8
    386 U01a9		       00 00 00    score1     DS	3	; $1A9 $1AA $1AB
    387 U01ac		       00	   pausebuttonflag DS	1	; $1AC
    388 U01ad		       00	   valbufend  DS	1	; $1AD
    389 U01ae		       00	   valbufendsave DS	1	; $1AE
    390 U01af		       00	   finescrollx DS	1	; $1AF
    391 U01b0		       00	   finescrolly DS	1	; $1B0
    392 U01b1		       00	   joybuttonmode DS	1	; $1B1 ; track joysticks that were changed to one-button mode
    393 U01b2		       00	   interruptindex DS	1	; $1B2
    394 U01b3
    395 U01b3					      ifconst	DOUBLEBUFFER
    396 U01b3		       00	   doublebufferminimumframetarget DS	1	; $1B3
    397 U01b4		       00	   doublebufferminimumframeindex DS	1	; $1B4
    398 U01b5					      endif
    399 U01b5
    400 U01b5		       00	   pausedisable DS	1	; $1B5
    401 U01b6		       00	   XCTRL1s    DS	1	; $1B6
    402 U01b7
    403 U01b7				  -	      ifconst	AVOXVOICE
    404 U01b7				  -avoxenable DS	1	; $1B7
    405 U01b7				  -tempavox   DS	1	; $1B8
    406 U01b7					      endif
    407 U01b7
    408 U01b7				  -	      ifconst	MUSICTRACKER
    409 U01b7				  -songtempo  DS	1	; $1B9
    410 U01b7				  -songtick   DS	1	; $1BA
    411 U01b7				  -
    412 U01b7				  -songchannel1layer1loops DS	1	; $1BB
    413 U01b7				  -songchannel2layer1loops DS	1	; $1BC
    414 U01b7				  -songchannel3layer1loops DS	1	; $1BD
    415 U01b7				  -songchannel4layer1loops DS	1	; $1BE
    416 U01b7				  -
    417 U01b7				  -songchannel1layer2loops DS	1	; $1BF
    418 U01b7				  -songchannel2layer2loops DS	1	; $1C0
    419 U01b7				  -songchannel3layer2loops DS	1	; $1C1
    420 U01b7				  -songchannel4layer2loops DS	1	; $1C2
    421 U01b7				  -
    422 U01b7				  -songchannel1layer3loops DS	1	; $1C3
    423 U01b7				  -songchannel2layer3loops DS	1	; $1C4
    424 U01b7				  -songchannel3layer3loops DS	1	; $1C5
    425 U01b7				  -songchannel4layer3loops DS	1	; $1C6
    426 U01b7				  -
    427 U01b7				  -songchannel1busywait DS	1	; $1C7
    428 U01b7				  -songchannel2busywait DS	1	; $1C8
    429 U01b7				  -songchannel3busywait DS	1	; $1C9
    430 U01b7				  -songchannel4busywait DS	1	; $1CA
    431 U01b7				  -
    432 U01b7				  -songchannel1stackdepth DS	1	; $1CB
    433 U01b7				  -songchannel2stackdepth DS	1	; $1CC
    434 U01b7				  -songchannel3stackdepth DS	1	; $1CD
    435 U01b7				  -songchannel4stackdepth DS	1	; $1CE
    436 U01b7					      endif
    437 U01b7
    438 U01b7		       00	   palframes  DS	1
    439 U01b8		       00	   ntscslowframe DS	1
    440 U01b9		       00	   palfastframe DS	1
    441 U01ba
    442 U01ba				  -	      ifconst	MOUSESUPPORT
    443 U01ba				  -port0resolution DS	1
    444 U01ba				  -port1resolution DS	1
    445 U01ba					      else
    446 U01ba				  -	      ifconst	TRAKBALLSUPPORT
    447 U01ba				  -port0resolution DS	1
    448 U01ba				  -port1resolution DS	1
    449 U01ba					      endif
    450 U01ba					      endif
    451 U01ba
    452 U01ba		       00	   port0control DS	1
    453 U01bb		       00	   port1control DS	1
    454 U01bc
    455 U01bc							; port#control values...
    456 U01bc							;	1 = proline
    457 U01bc							;	2 = lightgun
    458 U01bc							;	3 = paddle
    459 U01bc							;	4 = trakball
    460 U01bc							;	5 = vcs joystick
    461 U01bc							;	6 = driving
    462 U01bc							;	7 = keypad
    463 U01bc							;	8 = st mouse/cx80
    464 U01bc							;	9 = amiga mouse
    465 U01bc							;     10 = atarivox
    466 U01bc
    467 U01bc							; controller 0 data...
    468 U01bc		       00	   paddleposition0 DS	1
    469 U01bc		       01 bc	   keypadmatrix0a =	paddleposition0
    470 U01bc		       01 bc	   drivingposition0 =	paddleposition0
    471 U01bc		       01 bc	   trakballx0 =	paddleposition0
    472 U01bc		       01 bc	   mousex0    =	paddleposition0
    473 U01bc		       01 bc	   lighttgunx0 =	paddleposition0
    474 U01bc		       01 bc	   snes2atari0lo =	paddleposition0
    475 U01bc		       01 bc	   mega7800data0 =	paddleposition0
    476 U01bd
    477 U01bd							; controller 1 data...
    478 U01bd		       00	   paddleposition2 DS	1
    479 U01bd		       01 bd	   keypadmatrix1a =	paddleposition2
    480 U01bd		       01 bd	   drivingposition1 =	paddleposition2
    481 U01bd		       01 bd	   trakballx1 =	paddleposition2
    482 U01bd		       01 bd	   mousex1    =	paddleposition2
    483 U01bd		       01 bd	   lightgunx1 =	paddleposition2
    484 U01bd		       01 bd	   snes2atari1lo =	paddleposition2
    485 U01bd		       01 bd	   mega7800data1 =	paddleposition2
    486 U01be
    487 U01be							; controller 0 altdata...
    488 U01be		       00	   paddleposition1 DS	1
    489 U01be		       01 be	   keypadmatrix0b =	paddleposition1
    490 U01be		       01 be	   trakbally0 =	paddleposition1
    491 U01be		       01 be	   mousey0    =	paddleposition1
    492 U01be		       01 be	   lightguny0 =	paddleposition1
    493 U01be		       01 be	   snes2atari0hi =	paddleposition1
    494 U01be		       01 be	   mega7800state0 =	paddleposition1
    495 U01bf
    496 U01bf							; controller 1 altdata...
    497 U01bf		       00	   paddleposition3 DS	1
    498 U01bf		       01 bf	   keypadmatrix1b =	paddleposition3
    499 U01bf		       01 bf	   trakbally1 =	paddleposition3
    500 U01bf		       01 bf	   mousey1    =	paddleposition3
    501 U01bf		       01 bf	   lightguny1 =	paddleposition3
    502 U01bf		       01 bf	   snes2atari1hi =	paddleposition3
    503 U01bf		       01 bf	   mega7800state1 =	paddleposition3
    504 U01c0
    505 U01c0							; controller state save. for trakball state+dir codes, rotary position codes
    506 U01c0		       00	   controller0statesave DS	1
    507 U01c0		       01 c0	   paddleprevious0 =	controller0statesave
    508 U01c0		       01 c0	   mousecodex0 =	controller0statesave
    509 U01c0		       01 c0	   trakballcodex0 =	controller0statesave
    510 U01c0		       01 c0	   keypadmatrix0c =	controller0statesave
    511 U01c0		       01 c0	   snesdetected0 =	controller0statesave
    512 U01c1
    513 U01c1		       00	   controller1statesave DS	1
    514 U01c1		       01 c1	   paddleprevious2 =	controller1statesave
    515 U01c1		       01 c1	   mousecodex1 =	controller1statesave
    516 U01c1		       01 c1	   trakballcodex1 =	controller1statesave
    517 U01c1		       01 c1	   keypadmatrix1c =	controller1statesave
    518 U01c1		       01 c1	   snesdetected1 =	controller1statesave
    519 U01c2
    520 U01c2		       00	   paddleprevious1 DS	1
    521 U01c2		       01 c2	   keypadmatrix0d =	paddleprevious1
    522 U01c2		       01 c2	   mousecodey0 =	paddleprevious1
    523 U01c2		       01 c2	   trakballcodey0 =	paddleprevious1
    524 U01c3
    525 U01c3		       00	   paddleprevious3 DS	1
    526 U01c3		       01 c3	   keypadmatrix1d =	paddleprevious3
    527 U01c3		       01 c3	   mousecodey1 =	paddleprevious3
    528 U01c3		       01 c3	   trakballcodey1 =	paddleprevious3
    529 U01c4
    530 U01c4				  -	      ifconst	pokeysupport
    531 U01c4				  -pokey1frames DS	1
    532 U01c4				  -pokey1tick DS	1
    533 U01c4				  -pokey2frames DS	1
    534 U01c4				  -pokey2tick DS	1
    535 U01c4				  -pokey3frames DS	1
    536 U01c4				  -pokey3tick DS	1
    537 U01c4				  -pokey4frames DS	1
    538 U01c4				  -pokey4tick DS	1
    539 U01c4				  -pokey1priority DS	1
    540 U01c4				  -pokey1offset DS	1
    541 U01c4				  -pokey2priority DS	1
    542 U01c4				  -pokey2offset DS	1
    543 U01c4				  -pokey3priority DS	1
    544 U01c4				  -pokey3offset DS	1
    545 U01c4				  -pokey4priority DS	1
    546 U01c4				  -pokey4offset DS	1
    547 U01c4					      endif
    548 U01c4
    549 U01c4				  -	      ifconst	pokeykeysupport
    550 U01c4				  -pokeylastkeycode DS	1
    551 U01c4				  -pokeykeycode DS	1
    552 U01c4				  -pokeykeydebounce DS	1
    553 U01c4					      endif
    554 U01c4
    555 U01c4				  -	      ifconst	RMT
    556 U01c4				  -rasterpause DS	1
    557 U01c4					      endif		; RMT
    558 U01c4				  -	      ifconst	RMTVOLUME
    559 U01c4				  -rmtvolume  DS	1
    560 U01c4					      endif		; RMTVOLUME
    561 U01c4				  -	      ifconst	TIAVOLUME
    562 U01c4				  -tiavolume  DS	1
    563 U01c4					      endif		; TIAVOLUME
    564 U01c4
    565 U01c4				  -	      ifconst	FOURBITFADE
    566 U01c4				  -fourbittemp1 DS	1
    567 U01c4				  -fourbitfadevalue DS	1
    568 U01c4				  -fourbittemp1int DS	1
    569 U01c4				  -fourbitfadevalueint DS	1
    570 U01c4					      endif		; FOURBITFADE
    571 U01c4
    572 U01c4				  -	      ifconst	SNES2ATARISUPPORT
    573 U01c4				  -snesport   DS	1
    574 U01c4					      endif		; SNES2ATARISUPPORT
    575 U01c4
    576 U01c4				  -	      ifconst	KEYPADSUPPORT
    577 U01c4				  -keypadcounter DS	1
    578 U01c4					      endif
    579 U01c4
    580 U01c4				  -	      ifconst	MULTIBUTTON
    581 U01c4				  -multibuttoncount0 DS	1
    582 U01c4				  -multibuttoncount1 DS	1
    583 U01c4					      endif
    584 U01c4
    585 U01c4							; see if we need an interrupthold byte...
    586 U01c4				   INTERRUPTNEEDED SET	0
    587 U01c4				  -	      ifconst	.topscreenroutine
    588 U01c4				  -INTERRUPTNEEDED SET	1
    589 U01c4					      endif
    590 U01c4				  -	      ifconst	.bottomscreenroutine
    591 U01c4				  -INTERRUPTNEEDED SET	1
    592 U01c4					      endif
    593 U01c4				  -	      ifconst	.userinterrupt
    594 U01c4				  -INTERRUPTNEEDED SET	1
    595 U01c4					      endif
    596 U01c4				  -	      if	INTERRUPTNEEDED = 1
    597 U01c4				  -interrupthold DS	1
    598 U01c4					      endif
    599 U01c4
    600 U01c4					      ifnconst	CANARYOFF
    601 U01c4		       00	   canary     DS	1
    602 U01c5					      endif
    603 U01c5
    604 U01c5				  -	      ifnconst	bankswitchmode
    605 U01c5				  -	      echo	"  stack allowance:",[($1FF - .)/2]d,"nested subroutines."
    606 U01c5					      else
   stack allowance: 19 nested subroutines.
    607 U01c5					      echo	"  stack allowance:",[($1FF - .)/3]d,"nested subroutines."
    608 U01c5					      endif
    609 U01c5					      ifnconst	CANARYOFF
   the canary is situated at: $1c4
    610 U01c5					      echo	"  the canary is situated at:",[canary]
    611 U01c5				  -	      else
    612 U01c5				  -	      echo	"  the canary is disabled."
    613 U01c5					      endif
    614 U01c5
    615 U01c5							; $1EE - $1FF reserved for stack
    616 U01c5
    617  28000 ????				       SEG	"GAME"
    618  28000 ????
------- FILE d:\2018dev\7800\7800basic\projects\demo1\lesson4_5.78b.asm
------- FILE 7800_extravars.h LEVEL 2 PASS 3
      0  28000 ????				       include	"7800_extravars.h"
      1  28000 ????		22 00	    var100     =	$2200
      2  28000 ????		22 01	    var101     =	$2201
      3  28000 ????		22 02	    var102     =	$2202
      4  28000 ????		22 03	    var103     =	$2203
      5  28000 ????		22 04	    var104     =	$2204
      6  28000 ????		22 05	    var105     =	$2205
      7  28000 ????		22 06	    var106     =	$2206
      8  28000 ????		22 07	    var107     =	$2207
      9  28000 ????		22 08	    var108     =	$2208
     10  28000 ????		22 09	    var109     =	$2209
     11  28000 ????		22 0a	    var110     =	$220A
     12  28000 ????		22 0b	    var111     =	$220B
     13  28000 ????		22 0c	    var112     =	$220C
     14  28000 ????		22 0d	    var113     =	$220D
     15  28000 ????		22 0e	    var114     =	$220E
     16  28000 ????		22 0f	    var115     =	$220F
     17  28000 ????		22 10	    var116     =	$2210
     18  28000 ????		22 11	    var117     =	$2211
     19  28000 ????		22 12	    var118     =	$2212
     20  28000 ????		22 13	    var119     =	$2213
     21  28000 ????		22 14	    var120     =	$2214
     22  28000 ????		22 15	    var121     =	$2215
     23  28000 ????		22 16	    var122     =	$2216
     24  28000 ????		22 17	    var123     =	$2217
     25  28000 ????		22 18	    var124     =	$2218
     26  28000 ????		22 19	    var125     =	$2219
     27  28000 ????		22 1a	    var126     =	$221A
     28  28000 ????		22 1b	    var127     =	$221B
     29  28000 ????		22 1c	    var128     =	$221C
     30  28000 ????		22 1d	    var129     =	$221D
     31  28000 ????		22 1e	    var130     =	$221E
     32  28000 ????		22 1f	    var131     =	$221F
     33  28000 ????		22 20	    var132     =	$2220
     34  28000 ????		22 21	    var133     =	$2221
     35  28000 ????		22 22	    var134     =	$2222
     36  28000 ????		22 23	    var135     =	$2223
     37  28000 ????		22 24	    var136     =	$2224
     38  28000 ????		22 25	    var137     =	$2225
     39  28000 ????		22 26	    var138     =	$2226
     40  28000 ????		22 27	    var139     =	$2227
     41  28000 ????		22 28	    var140     =	$2228
     42  28000 ????		22 29	    var141     =	$2229
     43  28000 ????		22 2a	    var142     =	$222A
     44  28000 ????		22 2b	    var143     =	$222B
     45  28000 ????		22 2c	    var144     =	$222C
     46  28000 ????		22 2d	    var145     =	$222D
     47  28000 ????		22 2e	    var146     =	$222E
     48  28000 ????		22 2f	    var147     =	$222F
     49  28000 ????		22 30	    var148     =	$2230
     50  28000 ????		22 31	    var149     =	$2231
     51  28000 ????		22 32	    var150     =	$2232
     52  28000 ????		22 33	    var151     =	$2233
     53  28000 ????		22 34	    var152     =	$2234
     54  28000 ????		22 35	    var153     =	$2235
     55  28000 ????		22 36	    var154     =	$2236
     56  28000 ????		22 37	    var155     =	$2237
     57  28000 ????		22 38	    var156     =	$2238
     58  28000 ????		22 39	    var157     =	$2239
     59  28000 ????		22 3a	    var158     =	$223A
     60  28000 ????		22 3b	    var159     =	$223B
     61  28000 ????		22 3c	    var160     =	$223C
     62  28000 ????		22 3d	    var161     =	$223D
     63  28000 ????		22 3e	    var162     =	$223E
     64  28000 ????		22 3f	    var163     =	$223F
     65  28000 ????		22 40	    var164     =	$2240
     66  28000 ????		22 41	    var165     =	$2241
     67  28000 ????		22 42	    var166     =	$2242
     68  28000 ????		22 43	    var167     =	$2243
     69  28000 ????		22 44	    var168     =	$2244
     70  28000 ????		22 45	    var169     =	$2245
     71  28000 ????		22 46	    var170     =	$2246
     72  28000 ????		22 47	    var171     =	$2247
     73  28000 ????		22 48	    var172     =	$2248
     74  28000 ????		22 49	    var173     =	$2249
     75  28000 ????		22 4a	    var174     =	$224A
     76  28000 ????		22 4b	    var175     =	$224B
     77  28000 ????		22 4c	    var176     =	$224C
     78  28000 ????		22 4d	    var177     =	$224D
     79  28000 ????		22 4e	    var178     =	$224E
     80  28000 ????		22 4f	    var179     =	$224F
     81  28000 ????		22 50	    var180     =	$2250
     82  28000 ????		22 51	    var181     =	$2251
     83  28000 ????		22 52	    var182     =	$2252
     84  28000 ????		22 53	    var183     =	$2253
     85  28000 ????		22 54	    var184     =	$2254
     86  28000 ????		22 55	    var185     =	$2255
     87  28000 ????		22 56	    var186     =	$2256
     88  28000 ????		22 57	    var187     =	$2257
     89  28000 ????		22 58	    var188     =	$2258
     90  28000 ????		22 59	    var189     =	$2259
     91  28000 ????		22 5a	    var190     =	$225A
     92  28000 ????		22 5b	    var191     =	$225B
     93  28000 ????		22 5c	    var192     =	$225C
     94  28000 ????		22 5d	    var193     =	$225D
     95  28000 ????		22 5e	    var194     =	$225E
     96  28000 ????		22 5f	    var195     =	$225F
     97  28000 ????		22 60	    var196     =	$2260
     98  28000 ????		22 61	    var197     =	$2261
     99  28000 ????		22 62	    var198     =	$2262
    100  28000 ????		22 63	    var199     =	$2263
    101  28000 ????		22 64	    var200     =	$2264
    102  28000 ????		22 65	    var201     =	$2265
    103  28000 ????		22 66	    var202     =	$2266
    104  28000 ????		22 67	    var203     =	$2267
    105  28000 ????		22 68	    var204     =	$2268
    106  28000 ????		22 69	    var205     =	$2269
    107  28000 ????		22 6a	    var206     =	$226A
    108  28000 ????		22 6b	    var207     =	$226B
    109  28000 ????		22 6c	    var208     =	$226C
    110  28000 ????		22 6d	    var209     =	$226D
    111  28000 ????		22 6e	    var210     =	$226E
    112  28000 ????		22 6f	    var211     =	$226F
    113  28000 ????		22 70	    var212     =	$2270
    114  28000 ????		22 71	    var213     =	$2271
    115  28000 ????		22 72	    var214     =	$2272
    116  28000 ????		22 73	    var215     =	$2273
    117  28000 ????		22 74	    var216     =	$2274
    118  28000 ????		22 75	    var217     =	$2275
    119  28000 ????		22 76	    var218     =	$2276
    120  28000 ????		22 77	    var219     =	$2277
    121  28000 ????		22 78	    var220     =	$2278
    122  28000 ????		22 79	    var221     =	$2279
    123  28000 ????		22 7a	    var222     =	$227A
    124  28000 ????		22 7b	    var223     =	$227B
    125  28000 ????		22 7c	    var224     =	$227C
    126  28000 ????		22 7d	    var225     =	$227D
    127  28000 ????		22 7e	    var226     =	$227E
    128  28000 ????		22 7f	    var227     =	$227F
    129  28000 ????		22 80	    var228     =	$2280
    130  28000 ????		22 81	    var229     =	$2281
    131  28000 ????		22 82	    var230     =	$2282
    132  28000 ????		22 83	    var231     =	$2283
    133  28000 ????		22 84	    var232     =	$2284
    134  28000 ????		22 85	    var233     =	$2285
    135  28000 ????		22 86	    var234     =	$2286
    136  28000 ????		22 87	    var235     =	$2287
    137  28000 ????		22 88	    var236     =	$2288
    138  28000 ????		22 89	    var237     =	$2289
    139  28000 ????		22 8a	    var238     =	$228A
    140  28000 ????		22 8b	    var239     =	$228B
    141  28000 ????		22 8c	    var240     =	$228C
    142  28000 ????		22 8d	    var241     =	$228D
    143  28000 ????		22 8e	    var242     =	$228E
    144  28000 ????		22 8f	    var243     =	$228F
    145  28000 ????		22 90	    var244     =	$2290
    146  28000 ????		22 91	    var245     =	$2291
    147  28000 ????		22 92	    var246     =	$2292
    148  28000 ????		22 93	    var247     =	$2293
    149  28000 ????		22 94	    var248     =	$2294
    150  28000 ????		22 95	    var249     =	$2295
    151  28000 ????		22 96	    var250     =	$2296
    152  28000 ????		22 97	    var251     =	$2297
    153  28000 ????		22 98	    var252     =	$2298
    154  28000 ????		22 99	    var253     =	$2299
    155  28000 ????		22 9a	    var254     =	$229A
    156  28000 ????		22 9b	    var255     =	$229B
    157  28000 ????		22 9c	    var256     =	$229C
    158  28000 ????		22 9d	    var257     =	$229D
    159  28000 ????		22 9e	    var258     =	$229E
    160  28000 ????		22 9f	    var259     =	$229F
    161  28000 ????		22 a0	    var260     =	$22A0
    162  28000 ????		22 a1	    var261     =	$22A1
    163  28000 ????		22 a2	    var262     =	$22A2
    164  28000 ????		22 a3	    var263     =	$22A3
    165  28000 ????		22 a4	    var264     =	$22A4
    166  28000 ????		22 a5	    var265     =	$22A5
    167  28000 ????		22 a6	    var266     =	$22A6
    168  28000 ????		22 a7	    var267     =	$22A7
    169  28000 ????		22 a8	    var268     =	$22A8
    170  28000 ????		22 a9	    var269     =	$22A9
    171  28000 ????		22 aa	    var270     =	$22AA
    172  28000 ????		22 ab	    var271     =	$22AB
    173  28000 ????		22 ac	    var272     =	$22AC
    174  28000 ????		22 ad	    var273     =	$22AD
    175  28000 ????		22 ae	    var274     =	$22AE
    176  28000 ????		22 af	    var275     =	$22AF
    177  28000 ????		22 b0	    var276     =	$22B0
    178  28000 ????		22 b1	    var277     =	$22B1
    179  28000 ????		22 b2	    var278     =	$22B2
    180  28000 ????		22 b3	    var279     =	$22B3
    181  28000 ????		22 b4	    var280     =	$22B4
    182  28000 ????		22 b5	    var281     =	$22B5
    183  28000 ????		22 b6	    var282     =	$22B6
    184  28000 ????		22 b7	    var283     =	$22B7
    185  28000 ????		22 b8	    var284     =	$22B8
    186  28000 ????		22 b9	    var285     =	$22B9
    187  28000 ????		22 ba	    var286     =	$22BA
    188  28000 ????		22 bb	    var287     =	$22BB
    189  28000 ????		22 bc	    var288     =	$22BC
    190  28000 ????		22 bd	    var289     =	$22BD
    191  28000 ????		22 be	    var290     =	$22BE
    192  28000 ????		22 bf	    var291     =	$22BF
    193  28000 ????		22 c0	    var292     =	$22C0
    194  28000 ????		22 c1	    var293     =	$22C1
    195  28000 ????		22 c2	    var294     =	$22C2
    196  28000 ????		22 c3	    var295     =	$22C3
    197  28000 ????		22 c4	    var296     =	$22C4
    198  28000 ????		22 c5	    var297     =	$22C5
    199  28000 ????		22 c6	    var298     =	$22C6
    200  28000 ????		22 c7	    var299     =	$22C7
    201  28000 ????		22 c8	    var300     =	$22C8
    202  28000 ????		22 c9	    var301     =	$22C9
    203  28000 ????		22 ca	    var302     =	$22CA
    204  28000 ????		22 cb	    var303     =	$22CB
    205  28000 ????		22 cc	    var304     =	$22CC
    206  28000 ????		22 cd	    var305     =	$22CD
    207  28000 ????		22 ce	    var306     =	$22CE
    208  28000 ????		22 cf	    var307     =	$22CF
    209  28000 ????		22 d0	    var308     =	$22D0
    210  28000 ????		22 d1	    var309     =	$22D1
    211  28000 ????		22 d2	    var310     =	$22D2
    212  28000 ????		22 d3	    var311     =	$22D3
    213  28000 ????		22 d4	    var312     =	$22D4
    214  28000 ????		22 d5	    var313     =	$22D5
    215  28000 ????		22 d6	    var314     =	$22D6
    216  28000 ????		22 d7	    var315     =	$22D7
    217  28000 ????		22 d8	    var316     =	$22D8
    218  28000 ????		22 d9	    var317     =	$22D9
    219  28000 ????		22 da	    var318     =	$22DA
    220  28000 ????		22 db	    var319     =	$22DB
    221  28000 ????		22 dc	    var320     =	$22DC
    222  28000 ????		22 dd	    var321     =	$22DD
    223  28000 ????		22 de	    var322     =	$22DE
    224  28000 ????		22 df	    var323     =	$22DF
    225  28000 ????		22 e0	    var324     =	$22E0
    226  28000 ????		22 e1	    var325     =	$22E1
    227  28000 ????		22 e2	    var326     =	$22E2
    228  28000 ????		22 e3	    var327     =	$22E3
    229  28000 ????		22 e4	    var328     =	$22E4
    230  28000 ????		22 e5	    var329     =	$22E5
    231  28000 ????		22 e6	    var330     =	$22E6
    232  28000 ????		22 e7	    var331     =	$22E7
    233  28000 ????		22 e8	    var332     =	$22E8
    234  28000 ????		22 e9	    var333     =	$22E9
    235  28000 ????		22 ea	    var334     =	$22EA
    236  28000 ????		22 eb	    var335     =	$22EB
    237  28000 ????		22 ec	    var336     =	$22EC
    238  28000 ????		22 ed	    var337     =	$22ED
    239  28000 ????		22 ee	    var338     =	$22EE
    240  28000 ????		22 ef	    var339     =	$22EF
    241  28000 ????		22 f0	    var340     =	$22F0
    242  28000 ????		22 f1	    var341     =	$22F1
    243  28000 ????		22 f2	    var342     =	$22F2
    244  28000 ????		22 f3	    var343     =	$22F3
    245  28000 ????		22 f4	    var344     =	$22F4
    246  28000 ????		22 f5	    var345     =	$22F5
    247  28000 ????		22 f6	    var346     =	$22F6
    248  28000 ????		22 f7	    var347     =	$22F7
    249  28000 ????		22 f8	    var348     =	$22F8
    250  28000 ????		22 f9	    var349     =	$22F9
    251  28000 ????		22 fa	    var350     =	$22FA
    252  28000 ????		22 fb	    var351     =	$22FB
    253  28000 ????		22 fc	    var352     =	$22FC
    254  28000 ????		22 fd	    var353     =	$22FD
    255  28000 ????		22 fe	    var354     =	$22FE
    256  28000 ????		22 ff	    var355     =	$22FF
    257  28000 ????		23 00	    var356     =	$2300
    258  28000 ????		23 01	    var357     =	$2301
    259  28000 ????		23 02	    var358     =	$2302
    260  28000 ????		23 03	    var359     =	$2303
    261  28000 ????		23 04	    var360     =	$2304
    262  28000 ????		23 05	    var361     =	$2305
    263  28000 ????		23 06	    var362     =	$2306
    264  28000 ????		23 07	    var363     =	$2307
    265  28000 ????		23 08	    var364     =	$2308
    266  28000 ????		23 09	    var365     =	$2309
    267  28000 ????		23 0a	    var366     =	$230A
    268  28000 ????		23 0b	    var367     =	$230B
    269  28000 ????		23 0c	    var368     =	$230C
    270  28000 ????		23 0d	    var369     =	$230D
    271  28000 ????		23 0e	    var370     =	$230E
    272  28000 ????		23 0f	    var371     =	$230F
    273  28000 ????		23 10	    var372     =	$2310
    274  28000 ????		23 11	    var373     =	$2311
    275  28000 ????		23 12	    var374     =	$2312
    276  28000 ????		23 13	    var375     =	$2313
    277  28000 ????		23 14	    var376     =	$2314
    278  28000 ????		23 15	    var377     =	$2315
    279  28000 ????		23 16	    var378     =	$2316
    280  28000 ????		23 17	    var379     =	$2317
    281  28000 ????		23 18	    var380     =	$2318
    282  28000 ????		23 19	    var381     =	$2319
    283  28000 ????		23 1a	    var382     =	$231A
    284  28000 ????		23 1b	    var383     =	$231B
    285  28000 ????		23 1c	    var384     =	$231C
    286  28000 ????		23 1d	    var385     =	$231D
    287  28000 ????		23 1e	    var386     =	$231E
    288  28000 ????		23 1f	    var387     =	$231F
    289  28000 ????		23 20	    var388     =	$2320
    290  28000 ????		23 21	    var389     =	$2321
    291  28000 ????		23 22	    var390     =	$2322
    292  28000 ????		23 23	    var391     =	$2323
    293  28000 ????		23 24	    var392     =	$2324
    294  28000 ????		23 25	    var393     =	$2325
    295  28000 ????		23 26	    var394     =	$2326
    296  28000 ????		23 27	    var395     =	$2327
    297  28000 ????		23 28	    var396     =	$2328
    298  28000 ????		23 29	    var397     =	$2329
    299  28000 ????		23 2a	    var398     =	$232A
    300  28000 ????		23 2b	    var399     =	$232B
    301  28000 ????		23 2c	    var400     =	$232C
    302  28000 ????		23 2d	    var401     =	$232D
    303  28000 ????		23 2e	    var402     =	$232E
    304  28000 ????		23 2f	    var403     =	$232F
    305  28000 ????		23 30	    var404     =	$2330
    306  28000 ????		23 31	    var405     =	$2331
    307  28000 ????		23 32	    var406     =	$2332
    308  28000 ????		23 33	    var407     =	$2333
    309  28000 ????		23 34	    var408     =	$2334
    310  28000 ????		23 35	    var409     =	$2335
    311  28000 ????		23 36	    var410     =	$2336
    312  28000 ????		23 37	    var411     =	$2337
    313  28000 ????		23 38	    var412     =	$2338
    314  28000 ????		23 39	    var413     =	$2339
    315  28000 ????		23 3a	    var414     =	$233A
    316  28000 ????		23 3b	    var415     =	$233B
    317  28000 ????		23 3c	    var416     =	$233C
    318  28000 ????		23 3d	    var417     =	$233D
    319  28000 ????		23 3e	    var418     =	$233E
    320  28000 ????		23 3f	    var419     =	$233F
    321  28000 ????		23 40	    var420     =	$2340
    322  28000 ????		23 41	    var421     =	$2341
    323  28000 ????		23 42	    var422     =	$2342
    324  28000 ????		23 43	    var423     =	$2343
    325  28000 ????		23 44	    var424     =	$2344
    326  28000 ????		23 45	    var425     =	$2345
    327  28000 ????		23 46	    var426     =	$2346
    328  28000 ????		23 47	    var427     =	$2347
    329  28000 ????		23 48	    var428     =	$2348
    330  28000 ????		23 49	    var429     =	$2349
    331  28000 ????		23 4a	    var430     =	$234A
    332  28000 ????		23 4b	    var431     =	$234B
    333  28000 ????		23 4c	    var432     =	$234C
    334  28000 ????		23 4d	    var433     =	$234D
    335  28000 ????		23 4e	    var434     =	$234E
    336  28000 ????		23 4f	    var435     =	$234F
    337  28000 ????		23 50	    var436     =	$2350
    338  28000 ????		23 51	    var437     =	$2351
    339  28000 ????		23 52	    var438     =	$2352
    340  28000 ????		23 53	    var439     =	$2353
    341  28000 ????		23 54	    var440     =	$2354
    342  28000 ????		23 55	    var441     =	$2355
    343  28000 ????		23 56	    var442     =	$2356
    344  28000 ????		23 57	    var443     =	$2357
    345  28000 ????		23 58	    var444     =	$2358
    346  28000 ????		23 59	    var445     =	$2359
    347  28000 ????		23 5a	    var446     =	$235A
    348  28000 ????		23 5b	    var447     =	$235B
    349  28000 ????		23 5c	    var448     =	$235C
    350  28000 ????		23 5d	    var449     =	$235D
    351  28000 ????		23 5e	    var450     =	$235E
    352  28000 ????		23 5f	    var451     =	$235F
    353  28000 ????		23 60	    var452     =	$2360
    354  28000 ????		23 61	    var453     =	$2361
    355  28000 ????		23 62	    var454     =	$2362
    356  28000 ????		23 63	    var455     =	$2363
    357  28000 ????		23 64	    var456     =	$2364
    358  28000 ????		23 65	    var457     =	$2365
    359  28000 ????		23 66	    var458     =	$2366
    360  28000 ????		23 67	    var459     =	$2367
    361  28000 ????		23 68	    var460     =	$2368
    362  28000 ????		23 69	    var461     =	$2369
    363  28000 ????		23 6a	    var462     =	$236A
    364  28000 ????		23 6b	    var463     =	$236B
    365  28000 ????		23 6c	    var464     =	$236C
    366  28000 ????		23 6d	    var465     =	$236D
    367  28000 ????		23 6e	    var466     =	$236E
    368  28000 ????		23 6f	    var467     =	$236F
    369  28000 ????		23 70	    var468     =	$2370
    370  28000 ????		23 71	    var469     =	$2371
    371  28000 ????		23 72	    var470     =	$2372
    372  28000 ????		23 73	    var471     =	$2373
    373  28000 ????		23 74	    var472     =	$2374
    374  28000 ????		23 75	    var473     =	$2375
    375  28000 ????		23 76	    var474     =	$2376
    376  28000 ????		23 77	    var475     =	$2377
    377  28000 ????		23 78	    var476     =	$2378
    378  28000 ????		23 79	    var477     =	$2379
    379  28000 ????		23 7a	    var478     =	$237A
    380  28000 ????		23 7b	    var479     =	$237B
    381  28000 ????		23 7c	    var480     =	$237C
    382  28000 ????		23 7d	    var481     =	$237D
    383  28000 ????		23 7e	    var482     =	$237E
    384  28000 ????		23 7f	    var483     =	$237F
    385  28000 ????		23 80	    var484     =	$2380
    386  28000 ????		23 81	    var485     =	$2381
    387  28000 ????		23 82	    var486     =	$2382
    388  28000 ????		23 83	    var487     =	$2383
    389  28000 ????		23 84	    var488     =	$2384
    390  28000 ????		23 85	    var489     =	$2385
    391  28000 ????		23 86	    var490     =	$2386
    392  28000 ????		23 87	    var491     =	$2387
    393  28000 ????		23 88	    var492     =	$2388
    394  28000 ????		23 89	    var493     =	$2389
    395  28000 ????		23 8a	    var494     =	$238A
    396  28000 ????		23 8b	    var495     =	$238B
    397  28000 ????		23 8c	    var496     =	$238C
    398  28000 ????		23 8d	    var497     =	$238D
    399  28000 ????		23 8e	    var498     =	$238E
    400  28000 ????		23 8f	    var499     =	$238F
    401  28000 ????		23 90	    var500     =	$2390
    402  28000 ????		23 91	    var501     =	$2391
    403  28000 ????		23 92	    var502     =	$2392
    404  28000 ????		23 93	    var503     =	$2393
    405  28000 ????		23 94	    var504     =	$2394
    406  28000 ????		23 95	    var505     =	$2395
    407  28000 ????		23 96	    var506     =	$2396
    408  28000 ????		23 97	    var507     =	$2397
    409  28000 ????		23 98	    var508     =	$2398
    410  28000 ????		23 99	    var509     =	$2399
    411  28000 ????		23 9a	    var510     =	$239A
    412  28000 ????		23 9b	    var511     =	$239B
    413  28000 ????		23 9c	    var512     =	$239C
    414  28000 ????		23 9d	    var513     =	$239D
    415  28000 ????		23 9e	    var514     =	$239E
    416  28000 ????		23 9f	    var515     =	$239F
    417  28000 ????		23 a0	    var516     =	$23A0
    418  28000 ????		23 a1	    var517     =	$23A1
    419  28000 ????		23 a2	    var518     =	$23A2
    420  28000 ????		23 a3	    var519     =	$23A3
    421  28000 ????		23 a4	    var520     =	$23A4
    422  28000 ????		23 a5	    var521     =	$23A5
    423  28000 ????		23 a6	    var522     =	$23A6
    424  28000 ????		23 a7	    var523     =	$23A7
    425  28000 ????		23 a8	    var524     =	$23A8
    426  28000 ????		23 a9	    var525     =	$23A9
    427  28000 ????		23 aa	    var526     =	$23AA
    428  28000 ????		23 ab	    var527     =	$23AB
    429  28000 ????		23 ac	    var528     =	$23AC
    430  28000 ????		23 ad	    var529     =	$23AD
    431  28000 ????		23 ae	    var530     =	$23AE
    432  28000 ????		23 af	    var531     =	$23AF
    433  28000 ????		23 b0	    var532     =	$23B0
    434  28000 ????		23 b1	    var533     =	$23B1
    435  28000 ????		23 b2	    var534     =	$23B2
    436  28000 ????		23 b3	    var535     =	$23B3
    437  28000 ????		23 b4	    var536     =	$23B4
    438  28000 ????		23 b5	    var537     =	$23B5
    439  28000 ????		23 b6	    var538     =	$23B6
    440  28000 ????		23 b7	    var539     =	$23B7
    441  28000 ????		23 b8	    var540     =	$23B8
    442  28000 ????		23 b9	    var541     =	$23B9
    443  28000 ????		23 ba	    var542     =	$23BA
    444  28000 ????		23 bb	    var543     =	$23BB
    445  28000 ????		23 bc	    var544     =	$23BC
    446  28000 ????		23 bd	    var545     =	$23BD
    447  28000 ????		23 be	    var546     =	$23BE
    448  28000 ????		23 bf	    var547     =	$23BF
    449  28000 ????		23 c0	    var548     =	$23C0
    450  28000 ????		23 c1	    var549     =	$23C1
    451  28000 ????		23 c2	    var550     =	$23C2
    452  28000 ????		23 c3	    var551     =	$23C3
    453  28000 ????		23 c4	    var552     =	$23C4
    454  28000 ????		23 c5	    var553     =	$23C5
    455  28000 ????		23 c6	    var554     =	$23C6
    456  28000 ????		23 c7	    var555     =	$23C7
    457  28000 ????		23 c8	    var556     =	$23C8
    458  28000 ????		23 c9	    var557     =	$23C9
    459  28000 ????		23 ca	    var558     =	$23CA
    460  28000 ????		23 cb	    var559     =	$23CB
    461  28000 ????		23 cc	    var560     =	$23CC
    462  28000 ????		23 cd	    var561     =	$23CD
    463  28000 ????		23 ce	    var562     =	$23CE
    464  28000 ????		23 cf	    var563     =	$23CF
    465  28000 ????		23 d0	    var564     =	$23D0
    466  28000 ????		23 d1	    var565     =	$23D1
    467  28000 ????		23 d2	    var566     =	$23D2
    468  28000 ????		23 d3	    var567     =	$23D3
    469  28000 ????		23 d4	    var568     =	$23D4
    470  28000 ????		23 d5	    var569     =	$23D5
    471  28000 ????		23 d6	    var570     =	$23D6
    472  28000 ????		23 d7	    var571     =	$23D7
    473  28000 ????		23 d8	    var572     =	$23D8
    474  28000 ????		23 d9	    var573     =	$23D9
    475  28000 ????		23 da	    var574     =	$23DA
    476  28000 ????		23 db	    var575     =	$23DB
    477  28000 ????		23 dc	    var576     =	$23DC
    478  28000 ????		23 dd	    var577     =	$23DD
    479  28000 ????		23 de	    var578     =	$23DE
    480  28000 ????		23 df	    var579     =	$23DF
    481  28000 ????		23 e0	    var580     =	$23E0
    482  28000 ????		23 e1	    var581     =	$23E1
    483  28000 ????		23 e2	    var582     =	$23E2
    484  28000 ????		23 e3	    var583     =	$23E3
    485  28000 ????		23 e4	    var584     =	$23E4
    486  28000 ????		23 e5	    var585     =	$23E5
    487  28000 ????		23 e6	    var586     =	$23E6
    488  28000 ????		23 e7	    var587     =	$23E7
    489  28000 ????		23 e8	    var588     =	$23E8
    490  28000 ????		23 e9	    var589     =	$23E9
    491  28000 ????		23 ea	    var590     =	$23EA
    492  28000 ????		23 eb	    var591     =	$23EB
    493  28000 ????		23 ec	    var592     =	$23EC
    494  28000 ????		23 ed	    var593     =	$23ED
    495  28000 ????		23 ee	    var594     =	$23EE
    496  28000 ????		23 ef	    var595     =	$23EF
    497  28000 ????		23 f0	    var596     =	$23F0
    498  28000 ????		23 f1	    var597     =	$23F1
    499  28000 ????		23 f2	    var598     =	$23F2
    500  28000 ????		23 f3	    var599     =	$23F3
    501  28000 ????		23 f4	    var600     =	$23F4
    502  28000 ????		23 f5	    var601     =	$23F5
    503  28000 ????		23 f6	    var602     =	$23F6
    504  28000 ????		23 f7	    var603     =	$23F7
    505  28000 ????		23 f8	    var604     =	$23F8
    506  28000 ????		23 f9	    var605     =	$23F9
    507  28000 ????		23 fa	    var606     =	$23FA
    508  28000 ????		23 fb	    var607     =	$23FB
    509  28000 ????		23 fc	    var608     =	$23FC
    510  28000 ????		23 fd	    var609     =	$23FD
    511  28000 ????		23 fe	    var610     =	$23FE
    512  28000 ????		23 ff	    var611     =	$23FF
    513  28000 ????		24 00	    var612     =	$2400
    514  28000 ????		24 01	    var613     =	$2401
    515  28000 ????		24 02	    var614     =	$2402
    516  28000 ????		24 03	    var615     =	$2403
    517  28000 ????		24 04	    var616     =	$2404
    518  28000 ????		24 05	    var617     =	$2405
    519  28000 ????		24 06	    var618     =	$2406
    520  28000 ????		24 07	    var619     =	$2407
    521  28000 ????		24 08	    var620     =	$2408
    522  28000 ????		24 09	    var621     =	$2409
    523  28000 ????		24 0a	    var622     =	$240A
    524  28000 ????		24 0b	    var623     =	$240B
    525  28000 ????		24 0c	    var624     =	$240C
    526  28000 ????		24 0d	    var625     =	$240D
    527  28000 ????		24 0e	    var626     =	$240E
    528  28000 ????		24 0f	    var627     =	$240F
    529  28000 ????		24 10	    var628     =	$2410
    530  28000 ????		24 11	    var629     =	$2411
    531  28000 ????		24 12	    var630     =	$2412
    532  28000 ????		24 13	    var631     =	$2413
    533  28000 ????		24 14	    var632     =	$2414
    534  28000 ????		24 15	    var633     =	$2415
    535  28000 ????		24 16	    var634     =	$2416
    536  28000 ????		24 17	    var635     =	$2417
    537  28000 ????		24 18	    var636     =	$2418
    538  28000 ????		24 19	    var637     =	$2419
    539  28000 ????		24 1a	    var638     =	$241A
    540  28000 ????		24 1b	    var639     =	$241B
    541  28000 ????		24 1c	    var640     =	$241C
    542  28000 ????		24 1d	    var641     =	$241D
    543  28000 ????		24 1e	    var642     =	$241E
    544  28000 ????		24 1f	    var643     =	$241F
    545  28000 ????		24 20	    var644     =	$2420
    546  28000 ????		24 21	    var645     =	$2421
    547  28000 ????		24 22	    var646     =	$2422
    548  28000 ????		24 23	    var647     =	$2423
    549  28000 ????		24 24	    var648     =	$2424
    550  28000 ????		24 25	    var649     =	$2425
    551  28000 ????		24 26	    var650     =	$2426
    552  28000 ????		24 27	    var651     =	$2427
    553  28000 ????		24 28	    var652     =	$2428
    554  28000 ????		24 29	    var653     =	$2429
    555  28000 ????		24 2a	    var654     =	$242A
    556  28000 ????		24 2b	    var655     =	$242B
    557  28000 ????		24 2c	    var656     =	$242C
    558  28000 ????		24 2d	    var657     =	$242D
    559  28000 ????		24 2e	    var658     =	$242E
    560  28000 ????		24 2f	    var659     =	$242F
    561  28000 ????		24 30	    var660     =	$2430
    562  28000 ????		24 31	    var661     =	$2431
    563  28000 ????		24 32	    var662     =	$2432
    564  28000 ????		24 33	    var663     =	$2433
    565  28000 ????		24 34	    var664     =	$2434
    566  28000 ????		24 35	    var665     =	$2435
    567  28000 ????		24 36	    var666     =	$2436
    568  28000 ????		24 37	    var667     =	$2437
    569  28000 ????		24 38	    var668     =	$2438
    570  28000 ????		24 39	    var669     =	$2439
    571  28000 ????		24 3a	    var670     =	$243A
    572  28000 ????		24 3b	    var671     =	$243B
    573  28000 ????		24 3c	    var672     =	$243C
    574  28000 ????		24 3d	    var673     =	$243D
    575  28000 ????		24 3e	    var674     =	$243E
    576  28000 ????		24 3f	    var675     =	$243F
    577  28000 ????		24 40	    var676     =	$2440
    578  28000 ????		24 41	    var677     =	$2441
    579  28000 ????		24 42	    var678     =	$2442
    580  28000 ????		24 43	    var679     =	$2443
    581  28000 ????		24 44	    var680     =	$2444
    582  28000 ????		24 45	    var681     =	$2445
    583  28000 ????		24 46	    var682     =	$2446
    584  28000 ????		24 47	    var683     =	$2447
    585  28000 ????		24 48	    var684     =	$2448
    586  28000 ????		24 49	    var685     =	$2449
    587  28000 ????		24 4a	    var686     =	$244A
    588  28000 ????		24 4b	    var687     =	$244B
    589  28000 ????		24 4c	    var688     =	$244C
    590  28000 ????		24 4d	    var689     =	$244D
    591  28000 ????		24 4e	    var690     =	$244E
    592  28000 ????		24 4f	    var691     =	$244F
    593  28000 ????		24 50	    var692     =	$2450
    594  28000 ????		24 51	    var693     =	$2451
    595  28000 ????		24 52	    var694     =	$2452
    596  28000 ????		24 53	    var695     =	$2453
    597  28000 ????		24 54	    var696     =	$2454
    598  28000 ????		24 55	    var697     =	$2455
    599  28000 ????		24 56	    var698     =	$2456
    600  28000 ????		24 57	    var699     =	$2457
    601  28000 ????		24 58	    var700     =	$2458
    602  28000 ????		24 59	    var701     =	$2459
    603  28000 ????		24 5a	    var702     =	$245A
    604  28000 ????		24 5b	    var703     =	$245B
    605  28000 ????		24 5c	    var704     =	$245C
    606  28000 ????		24 5d	    var705     =	$245D
    607  28000 ????		24 5e	    var706     =	$245E
    608  28000 ????		24 5f	    var707     =	$245F
    609  28000 ????		24 60	    var708     =	$2460
    610  28000 ????		24 61	    var709     =	$2461
    611  28000 ????		24 62	    var710     =	$2462
    612  28000 ????		24 63	    var711     =	$2463
    613  28000 ????		24 64	    var712     =	$2464
    614  28000 ????		24 65	    var713     =	$2465
    615  28000 ????		24 66	    var714     =	$2466
    616  28000 ????		24 67	    var715     =	$2467
    617  28000 ????		24 68	    var716     =	$2468
    618  28000 ????		24 69	    var717     =	$2469
    619  28000 ????		24 6a	    var718     =	$246A
    620  28000 ????		24 6b	    var719     =	$246B
    621  28000 ????		24 6c	    var720     =	$246C
    622  28000 ????		24 6d	    var721     =	$246D
    623  28000 ????		24 6e	    var722     =	$246E
    624  28000 ????		24 6f	    var723     =	$246F
    625  28000 ????		24 70	    var724     =	$2470
    626  28000 ????		24 71	    var725     =	$2471
    627  28000 ????		24 72	    var726     =	$2472
    628  28000 ????		24 73	    var727     =	$2473
    629  28000 ????		24 74	    var728     =	$2474
    630  28000 ????		24 75	    var729     =	$2475
    631  28000 ????		24 76	    var730     =	$2476
    632  28000 ????		24 77	    var731     =	$2477
    633  28000 ????		24 78	    var732     =	$2478
    634  28000 ????		24 79	    var733     =	$2479
    635  28000 ????		24 7a	    var734     =	$247A
    636  28000 ????		24 7b	    var735     =	$247B
    637  28000 ????		24 7c	    var736     =	$247C
    638  28000 ????		24 7d	    var737     =	$247D
    639  28000 ????		24 7e	    var738     =	$247E
    640  28000 ????		24 7f	    var739     =	$247F
    641  28000 ????		24 80	    var740     =	$2480
    642  28000 ????		24 81	    var741     =	$2481
    643  28000 ????		24 82	    var742     =	$2482
    644  28000 ????		24 83	    var743     =	$2483
    645  28000 ????		24 84	    var744     =	$2484
    646  28000 ????		24 85	    var745     =	$2485
    647  28000 ????		24 86	    var746     =	$2486
    648  28000 ????		24 87	    var747     =	$2487
    649  28000 ????		24 88	    var748     =	$2488
    650  28000 ????		24 89	    var749     =	$2489
    651  28000 ????		24 8a	    var750     =	$248A
    652  28000 ????		24 8b	    var751     =	$248B
    653  28000 ????		24 8c	    var752     =	$248C
    654  28000 ????		24 8d	    var753     =	$248D
    655  28000 ????		24 8e	    var754     =	$248E
    656  28000 ????		24 8f	    var755     =	$248F
    657  28000 ????		24 90	    var756     =	$2490
    658  28000 ????		24 91	    var757     =	$2491
    659  28000 ????		24 92	    var758     =	$2492
    660  28000 ????		24 93	    var759     =	$2493
    661  28000 ????		24 94	    var760     =	$2494
    662  28000 ????		24 95	    var761     =	$2495
    663  28000 ????		24 96	    var762     =	$2496
    664  28000 ????		24 97	    var763     =	$2497
    665  28000 ????		24 98	    var764     =	$2498
    666  28000 ????		24 99	    var765     =	$2499
    667  28000 ????		24 9a	    var766     =	$249A
    668  28000 ????		24 9b	    var767     =	$249B
    669  28000 ????		24 9c	    var768     =	$249C
    670  28000 ????		24 9d	    var769     =	$249D
    671  28000 ????		24 9e	    var770     =	$249E
    672  28000 ????		24 9f	    var771     =	$249F
    673  28000 ????		24 a0	    var772     =	$24A0
    674  28000 ????		24 a1	    var773     =	$24A1
    675  28000 ????		24 a2	    var774     =	$24A2
    676  28000 ????		24 a3	    var775     =	$24A3
    677  28000 ????		24 a4	    var776     =	$24A4
    678  28000 ????		24 a5	    var777     =	$24A5
    679  28000 ????		24 a6	    var778     =	$24A6
    680  28000 ????		24 a7	    var779     =	$24A7
    681  28000 ????		24 a8	    var780     =	$24A8
    682  28000 ????		24 a9	    var781     =	$24A9
    683  28000 ????		24 aa	    var782     =	$24AA
    684  28000 ????		24 ab	    var783     =	$24AB
    685  28000 ????		24 ac	    var784     =	$24AC
    686  28000 ????		24 ad	    var785     =	$24AD
    687  28000 ????		24 ae	    var786     =	$24AE
    688  28000 ????		24 af	    var787     =	$24AF
    689  28000 ????		24 b0	    var788     =	$24B0
    690  28000 ????		24 b1	    var789     =	$24B1
    691  28000 ????		24 b2	    var790     =	$24B2
    692  28000 ????		24 b3	    var791     =	$24B3
    693  28000 ????		24 b4	    var792     =	$24B4
    694  28000 ????		24 b5	    var793     =	$24B5
    695  28000 ????		24 b6	    var794     =	$24B6
    696  28000 ????		24 b7	    var795     =	$24B7
    697  28000 ????		24 b8	    var796     =	$24B8
    698  28000 ????		24 b9	    var797     =	$24B9
    699  28000 ????		24 ba	    var798     =	$24BA
    700  28000 ????		24 bb	    var799     =	$24BB
    701  28000 ????		24 bc	    var800     =	$24BC
    702  28000 ????		24 bd	    var801     =	$24BD
    703  28000 ????		24 be	    var802     =	$24BE
    704  28000 ????		24 bf	    var803     =	$24BF
    705  28000 ????		24 c0	    var804     =	$24C0
    706  28000 ????		24 c1	    var805     =	$24C1
    707  28000 ????		24 c2	    var806     =	$24C2
    708  28000 ????		24 c3	    var807     =	$24C3
    709  28000 ????		24 c4	    var808     =	$24C4
    710  28000 ????		24 c5	    var809     =	$24C5
    711  28000 ????		24 c6	    var810     =	$24C6
    712  28000 ????		24 c7	    var811     =	$24C7
    713  28000 ????		24 c8	    var812     =	$24C8
    714  28000 ????		24 c9	    var813     =	$24C9
    715  28000 ????		24 ca	    var814     =	$24CA
    716  28000 ????		24 cb	    var815     =	$24CB
    717  28000 ????		24 cc	    var816     =	$24CC
    718  28000 ????		24 cd	    var817     =	$24CD
    719  28000 ????		24 ce	    var818     =	$24CE
    720  28000 ????		24 cf	    var819     =	$24CF
    721  28000 ????		24 d0	    var820     =	$24D0
    722  28000 ????		24 d1	    var821     =	$24D1
    723  28000 ????		24 d2	    var822     =	$24D2
    724  28000 ????		24 d3	    var823     =	$24D3
    725  28000 ????		24 d4	    var824     =	$24D4
    726  28000 ????		24 d5	    var825     =	$24D5
    727  28000 ????		24 d6	    var826     =	$24D6
    728  28000 ????		24 d7	    var827     =	$24D7
    729  28000 ????		24 d8	    var828     =	$24D8
    730  28000 ????		24 d9	    var829     =	$24D9
    731  28000 ????		24 da	    var830     =	$24DA
    732  28000 ????		24 db	    var831     =	$24DB
    733  28000 ????		24 dc	    var832     =	$24DC
    734  28000 ????		24 dd	    var833     =	$24DD
    735  28000 ????		24 de	    var834     =	$24DE
    736  28000 ????		24 df	    var835     =	$24DF
    737  28000 ????		24 e0	    var836     =	$24E0
    738  28000 ????		24 e1	    var837     =	$24E1
    739  28000 ????		24 e2	    var838     =	$24E2
    740  28000 ????		24 e3	    var839     =	$24E3
    741  28000 ????		24 e4	    var840     =	$24E4
    742  28000 ????		24 e5	    var841     =	$24E5
    743  28000 ????		24 e6	    var842     =	$24E6
    744  28000 ????		24 e7	    var843     =	$24E7
    745  28000 ????		24 e8	    var844     =	$24E8
    746  28000 ????		24 e9	    var845     =	$24E9
    747  28000 ????		24 ea	    var846     =	$24EA
    748  28000 ????		24 eb	    var847     =	$24EB
    749  28000 ????		24 ec	    var848     =	$24EC
    750  28000 ????		24 ed	    var849     =	$24ED
    751  28000 ????		24 ee	    var850     =	$24EE
    752  28000 ????		24 ef	    var851     =	$24EF
    753  28000 ????		24 f0	    var852     =	$24F0
    754  28000 ????		24 f1	    var853     =	$24F1
    755  28000 ????		24 f2	    var854     =	$24F2
    756  28000 ????		24 f3	    var855     =	$24F3
    757  28000 ????		24 f4	    var856     =	$24F4
    758  28000 ????		24 f5	    var857     =	$24F5
    759  28000 ????		24 f6	    var858     =	$24F6
    760  28000 ????		24 f7	    var859     =	$24F7
    761  28000 ????		24 f8	    var860     =	$24F8
    762  28000 ????		24 f9	    var861     =	$24F9
    763  28000 ????		24 fa	    var862     =	$24FA
    764  28000 ????		24 fb	    var863     =	$24FB
    765  28000 ????		24 fc	    var864     =	$24FC
    766  28000 ????		24 fd	    var865     =	$24FD
    767  28000 ????		24 fe	    var866     =	$24FE
    768  28000 ????		24 ff	    var867     =	$24FF
    769  28000 ????		25 00	    var868     =	$2500
    770  28000 ????		25 01	    var869     =	$2501
    771  28000 ????		25 02	    var870     =	$2502
    772  28000 ????		25 03	    var871     =	$2503
    773  28000 ????		25 04	    var872     =	$2504
    774  28000 ????		25 05	    var873     =	$2505
    775  28000 ????		25 06	    var874     =	$2506
    776  28000 ????		25 07	    var875     =	$2507
    777  28000 ????		25 08	    var876     =	$2508
    778  28000 ????		25 09	    var877     =	$2509
    779  28000 ????		25 0a	    var878     =	$250A
    780  28000 ????		25 0b	    var879     =	$250B
    781  28000 ????		25 0c	    var880     =	$250C
    782  28000 ????		25 0d	    var881     =	$250D
    783  28000 ????		25 0e	    var882     =	$250E
    784  28000 ????		25 0f	    var883     =	$250F
    785  28000 ????		25 10	    var884     =	$2510
    786  28000 ????		25 11	    var885     =	$2511
    787  28000 ????		25 12	    var886     =	$2512
    788  28000 ????		25 13	    var887     =	$2513
    789  28000 ????		25 14	    var888     =	$2514
    790  28000 ????		25 15	    var889     =	$2515
    791  28000 ????		25 16	    var890     =	$2516
    792  28000 ????		25 17	    var891     =	$2517
    793  28000 ????		25 18	    var892     =	$2518
    794  28000 ????		25 19	    var893     =	$2519
    795  28000 ????		25 1a	    var894     =	$251A
    796  28000 ????		25 1b	    var895     =	$251B
    797  28000 ????		25 1c	    var896     =	$251C
    798  28000 ????		25 1d	    var897     =	$251D
    799  28000 ????		25 1e	    var898     =	$251E
    800  28000 ????		25 1f	    var899     =	$251F
    801  28000 ????		25 20	    var900     =	$2520
    802  28000 ????		25 21	    var901     =	$2521
    803  28000 ????		25 22	    var902     =	$2522
    804  28000 ????		25 23	    var903     =	$2523
    805  28000 ????		25 24	    var904     =	$2524
    806  28000 ????		25 25	    var905     =	$2525
    807  28000 ????		25 26	    var906     =	$2526
    808  28000 ????		25 27	    var907     =	$2527
    809  28000 ????		25 28	    var908     =	$2528
    810  28000 ????		25 29	    var909     =	$2529
    811  28000 ????		25 2a	    var910     =	$252A
    812  28000 ????		25 2b	    var911     =	$252B
    813  28000 ????		25 2c	    var912     =	$252C
    814  28000 ????		25 2d	    var913     =	$252D
    815  28000 ????		25 2e	    var914     =	$252E
    816  28000 ????		25 2f	    var915     =	$252F
    817  28000 ????		25 30	    var916     =	$2530
    818  28000 ????		25 31	    var917     =	$2531
    819  28000 ????		25 32	    var918     =	$2532
    820  28000 ????		25 33	    var919     =	$2533
    821  28000 ????		25 34	    var920     =	$2534
    822  28000 ????		25 35	    var921     =	$2535
    823  28000 ????		25 36	    var922     =	$2536
    824  28000 ????		25 37	    var923     =	$2537
    825  28000 ????		25 38	    var924     =	$2538
    826  28000 ????		25 39	    var925     =	$2539
    827  28000 ????		25 3a	    var926     =	$253A
    828  28000 ????		25 3b	    var927     =	$253B
    829  28000 ????		25 3c	    var928     =	$253C
    830  28000 ????		25 3d	    var929     =	$253D
    831  28000 ????		25 3e	    var930     =	$253E
    832  28000 ????		25 3f	    var931     =	$253F
    833  28000 ????		25 40	    var932     =	$2540
    834  28000 ????		25 41	    var933     =	$2541
    835  28000 ????		25 42	    var934     =	$2542
    836  28000 ????		25 43	    var935     =	$2543
    837  28000 ????		25 44	    var936     =	$2544
    838  28000 ????		25 45	    var937     =	$2545
    839  28000 ????		25 46	    var938     =	$2546
    840  28000 ????		25 47	    var939     =	$2547
    841  28000 ????		25 48	    var940     =	$2548
    842  28000 ????		25 49	    var941     =	$2549
    843  28000 ????		25 4a	    var942     =	$254A
    844  28000 ????		25 4b	    var943     =	$254B
    845  28000 ????		25 4c	    var944     =	$254C
    846  28000 ????		25 4d	    var945     =	$254D
    847  28000 ????		25 4e	    var946     =	$254E
    848  28000 ????		25 4f	    var947     =	$254F
    849  28000 ????		25 50	    var948     =	$2550
    850  28000 ????		25 51	    var949     =	$2551
    851  28000 ????		25 52	    var950     =	$2552
    852  28000 ????		25 53	    var951     =	$2553
    853  28000 ????		25 54	    var952     =	$2554
    854  28000 ????		25 55	    var953     =	$2555
    855  28000 ????		25 56	    var954     =	$2556
    856  28000 ????		25 57	    var955     =	$2557
    857  28000 ????		25 58	    var956     =	$2558
    858  28000 ????		25 59	    var957     =	$2559
    859  28000 ????		25 5a	    var958     =	$255A
    860  28000 ????		25 5b	    var959     =	$255B
    861  28000 ????		25 5c	    var960     =	$255C
    862  28000 ????		25 5d	    var961     =	$255D
    863  28000 ????		25 5e	    var962     =	$255E
    864  28000 ????		25 5f	    var963     =	$255F
    865  28000 ????		25 60	    var964     =	$2560
    866  28000 ????		25 61	    var965     =	$2561
    867  28000 ????		25 62	    var966     =	$2562
    868  28000 ????		25 63	    var967     =	$2563
    869  28000 ????		25 64	    var968     =	$2564
    870  28000 ????		25 65	    var969     =	$2565
    871  28000 ????		25 66	    var970     =	$2566
    872  28000 ????		25 67	    var971     =	$2567
    873  28000 ????		25 68	    var972     =	$2568
    874  28000 ????		25 69	    var973     =	$2569
    875  28000 ????		25 6a	    var974     =	$256A
    876  28000 ????		25 6b	    var975     =	$256B
    877  28000 ????		25 6c	    var976     =	$256C
    878  28000 ????		25 6d	    var977     =	$256D
    879  28000 ????		25 6e	    var978     =	$256E
    880  28000 ????		25 6f	    var979     =	$256F
    881  28000 ????		25 70	    var980     =	$2570
    882  28000 ????		25 71	    var981     =	$2571
    883  28000 ????		25 72	    var982     =	$2572
    884  28000 ????		25 73	    var983     =	$2573
    885  28000 ????		25 74	    var984     =	$2574
    886  28000 ????		25 75	    var985     =	$2575
    887  28000 ????		25 76	    var986     =	$2576
    888  28000 ????		25 77	    var987     =	$2577
    889  28000 ????		25 78	    var988     =	$2578
    890  28000 ????		25 79	    var989     =	$2579
    891  28000 ????		25 7a	    var990     =	$257A
    892  28000 ????		25 7b	    var991     =	$257B
    893  28000 ????		25 7c	    var992     =	$257C
    894  28000 ????		25 7d	    var993     =	$257D
    895  28000 ????		25 7e	    var994     =	$257E
    896  28000 ????		25 7f	    var995     =	$257F
    897  28000 ????		25 80	    var996     =	$2580
    898  28000 ????		25 81	    var997     =	$2581
    899  28000 ????		25 82	    var998     =	$2582
    900  28000 ????		25 83	    var999     =	$2583
    901  28000 ????		25 84	    var1000    =	$2584
    902  28000 ????		25 85	    var1001    =	$2585
    903  28000 ????		25 86	    var1002    =	$2586
    904  28000 ????		25 87	    var1003    =	$2587
    905  28000 ????		25 88	    var1004    =	$2588
    906  28000 ????		25 89	    var1005    =	$2589
    907  28000 ????		25 8a	    var1006    =	$258A
    908  28000 ????		25 8b	    var1007    =	$258B
    909  28000 ????		25 8c	    var1008    =	$258C
    910  28000 ????		25 8d	    var1009    =	$258D
    911  28000 ????		25 8e	    var1010    =	$258E
    912  28000 ????		25 8f	    var1011    =	$258F
    913  28000 ????		25 90	    var1012    =	$2590
    914  28000 ????		25 91	    var1013    =	$2591
    915  28000 ????		25 92	    var1014    =	$2592
    916  28000 ????		25 93	    var1015    =	$2593
    917  28000 ????		25 94	    var1016    =	$2594
    918  28000 ????		25 95	    var1017    =	$2595
    919  28000 ????		25 96	    var1018    =	$2596
    920  28000 ????		25 97	    var1019    =	$2597
    921  28000 ????		25 98	    var1020    =	$2598
    922  28000 ????		25 99	    var1021    =	$2599
    923  28000 ????		25 9a	    var1022    =	$259A
    924  28000 ????		25 9b	    var1023    =	$259B
    925  28000 ????		25 9c	    var1024    =	$259C
    926  28000 ????		25 9d	    var1025    =	$259D
    927  28000 ????		25 9e	    var1026    =	$259E
    928  28000 ????		25 9f	    var1027    =	$259F
    929  28000 ????		25 a0	    var1028    =	$25A0
    930  28000 ????		25 a1	    var1029    =	$25A1
    931  28000 ????		25 a2	    var1030    =	$25A2
    932  28000 ????		25 a3	    var1031    =	$25A3
    933  28000 ????		25 a4	    var1032    =	$25A4
    934  28000 ????		25 a5	    var1033    =	$25A5
    935  28000 ????		25 a6	    var1034    =	$25A6
    936  28000 ????		25 a7	    var1035    =	$25A7
    937  28000 ????		25 a8	    var1036    =	$25A8
    938  28000 ????		25 a9	    var1037    =	$25A9
    939  28000 ????		25 aa	    var1038    =	$25AA
    940  28000 ????		25 ab	    var1039    =	$25AB
    941  28000 ????		25 ac	    var1040    =	$25AC
    942  28000 ????		25 ad	    var1041    =	$25AD
    943  28000 ????		25 ae	    var1042    =	$25AE
    944  28000 ????		25 af	    var1043    =	$25AF
    945  28000 ????		25 b0	    var1044    =	$25B0
    946  28000 ????		25 b1	    var1045    =	$25B1
    947  28000 ????		25 b2	    var1046    =	$25B2
    948  28000 ????		25 b3	    var1047    =	$25B3
    949  28000 ????		25 b4	    var1048    =	$25B4
    950  28000 ????		25 b5	    var1049    =	$25B5
    951  28000 ????		25 b6	    var1050    =	$25B6
    952  28000 ????		25 b7	    var1051    =	$25B7
    953  28000 ????		25 b8	    var1052    =	$25B8
    954  28000 ????		25 b9	    var1053    =	$25B9
    955  28000 ????		25 ba	    var1054    =	$25BA
    956  28000 ????		25 bb	    var1055    =	$25BB
    957  28000 ????		25 bc	    var1056    =	$25BC
    958  28000 ????		25 bd	    var1057    =	$25BD
    959  28000 ????		25 be	    var1058    =	$25BE
    960  28000 ????		25 bf	    var1059    =	$25BF
    961  28000 ????		25 c0	    var1060    =	$25C0
    962  28000 ????		25 c1	    var1061    =	$25C1
    963  28000 ????		25 c2	    var1062    =	$25C2
    964  28000 ????		25 c3	    var1063    =	$25C3
    965  28000 ????		25 c4	    var1064    =	$25C4
    966  28000 ????		25 c5	    var1065    =	$25C5
    967  28000 ????		25 c6	    var1066    =	$25C6
    968  28000 ????		25 c7	    var1067    =	$25C7
    969  28000 ????		25 c8	    var1068    =	$25C8
    970  28000 ????		25 c9	    var1069    =	$25C9
    971  28000 ????		25 ca	    var1070    =	$25CA
    972  28000 ????		25 cb	    var1071    =	$25CB
    973  28000 ????		25 cc	    var1072    =	$25CC
    974  28000 ????		25 cd	    var1073    =	$25CD
    975  28000 ????		25 ce	    var1074    =	$25CE
    976  28000 ????		25 cf	    var1075    =	$25CF
    977  28000 ????		25 d0	    var1076    =	$25D0
    978  28000 ????		25 d1	    var1077    =	$25D1
    979  28000 ????		25 d2	    var1078    =	$25D2
    980  28000 ????		25 d3	    var1079    =	$25D3
    981  28000 ????		25 d4	    var1080    =	$25D4
    982  28000 ????		25 d5	    var1081    =	$25D5
    983  28000 ????		25 d6	    var1082    =	$25D6
    984  28000 ????		25 d7	    var1083    =	$25D7
    985  28000 ????		25 d8	    var1084    =	$25D8
    986  28000 ????		25 d9	    var1085    =	$25D9
    987  28000 ????		25 da	    var1086    =	$25DA
    988  28000 ????		25 db	    var1087    =	$25DB
    989  28000 ????		25 dc	    var1088    =	$25DC
    990  28000 ????		25 dd	    var1089    =	$25DD
    991  28000 ????		25 de	    var1090    =	$25DE
    992  28000 ????		25 df	    var1091    =	$25DF
    993  28000 ????		25 e0	    var1092    =	$25E0
    994  28000 ????		25 e1	    var1093    =	$25E1
    995  28000 ????		25 e2	    var1094    =	$25E2
    996  28000 ????		25 e3	    var1095    =	$25E3
    997  28000 ????		25 e4	    var1096    =	$25E4
    998  28000 ????		25 e5	    var1097    =	$25E5
    999  28000 ????		25 e6	    var1098    =	$25E6
   1000  28000 ????		25 e7	    var1099    =	$25E7
   1001  28000 ????		25 e8	    var1100    =	$25E8
   1002  28000 ????		25 e9	    var1101    =	$25E9
   1003  28000 ????		25 ea	    var1102    =	$25EA
   1004  28000 ????		25 eb	    var1103    =	$25EB
   1005  28000 ????		25 ec	    var1104    =	$25EC
   1006  28000 ????		25 ed	    var1105    =	$25ED
   1007  28000 ????		25 ee	    var1106    =	$25EE
   1008  28000 ????		25 ef	    var1107    =	$25EF
   1009  28000 ????		25 f0	    var1108    =	$25F0
   1010  28000 ????		25 f1	    var1109    =	$25F1
   1011  28000 ????		25 f2	    var1110    =	$25F2
   1012  28000 ????		25 f3	    var1111    =	$25F3
   1013  28000 ????		25 f4	    var1112    =	$25F4
   1014  28000 ????		25 f5	    var1113    =	$25F5
   1015  28000 ????		25 f6	    var1114    =	$25F6
   1016  28000 ????		25 f7	    var1115    =	$25F7
   1017  28000 ????		25 f8	    var1116    =	$25F8
   1018  28000 ????		25 f9	    var1117    =	$25F9
   1019  28000 ????		25 fa	    var1118    =	$25FA
   1020  28000 ????		25 fb	    var1119    =	$25FB
   1021  28000 ????		25 fc	    var1120    =	$25FC
   1022  28000 ????		25 fd	    var1121    =	$25FD
   1023  28000 ????		25 fe	    var1122    =	$25FE
   1024  28000 ????		25 ff	    var1123    =	$25FF
   1025  28000 ????		26 00	    var1124    =	$2600
   1026  28000 ????		26 01	    var1125    =	$2601
   1027  28000 ????		26 02	    var1126    =	$2602
   1028  28000 ????		26 03	    var1127    =	$2603
   1029  28000 ????		26 04	    var1128    =	$2604
   1030  28000 ????		26 05	    var1129    =	$2605
   1031  28000 ????		26 06	    var1130    =	$2606
   1032  28000 ????		26 07	    var1131    =	$2607
   1033  28000 ????		26 08	    var1132    =	$2608
   1034  28000 ????		26 09	    var1133    =	$2609
   1035  28000 ????		26 0a	    var1134    =	$260A
   1036  28000 ????		26 0b	    var1135    =	$260B
   1037  28000 ????		26 0c	    var1136    =	$260C
   1038  28000 ????		26 0d	    var1137    =	$260D
   1039  28000 ????		26 0e	    var1138    =	$260E
   1040  28000 ????		26 0f	    var1139    =	$260F
   1041  28000 ????		26 10	    var1140    =	$2610
   1042  28000 ????		26 11	    var1141    =	$2611
   1043  28000 ????		26 12	    var1142    =	$2612
   1044  28000 ????		26 13	    var1143    =	$2613
   1045  28000 ????		26 14	    var1144    =	$2614
   1046  28000 ????		26 15	    var1145    =	$2615
   1047  28000 ????		26 16	    var1146    =	$2616
   1048  28000 ????		26 17	    var1147    =	$2617
   1049  28000 ????		26 18	    var1148    =	$2618
   1050  28000 ????		26 19	    var1149    =	$2619
   1051  28000 ????		26 1a	    var1150    =	$261A
   1052  28000 ????		26 1b	    var1151    =	$261B
   1053  28000 ????		26 1c	    var1152    =	$261C
   1054  28000 ????		26 1d	    var1153    =	$261D
   1055  28000 ????		26 1e	    var1154    =	$261E
   1056  28000 ????		26 1f	    var1155    =	$261F
   1057  28000 ????		26 20	    var1156    =	$2620
   1058  28000 ????		26 21	    var1157    =	$2621
   1059  28000 ????		26 22	    var1158    =	$2622
   1060  28000 ????		26 23	    var1159    =	$2623
   1061  28000 ????		26 24	    var1160    =	$2624
   1062  28000 ????		26 25	    var1161    =	$2625
   1063  28000 ????		26 26	    var1162    =	$2626
   1064  28000 ????		26 27	    var1163    =	$2627
   1065  28000 ????		26 28	    var1164    =	$2628
   1066  28000 ????		26 29	    var1165    =	$2629
   1067  28000 ????		26 2a	    var1166    =	$262A
   1068  28000 ????		26 2b	    var1167    =	$262B
   1069  28000 ????		26 2c	    var1168    =	$262C
   1070  28000 ????		26 2d	    var1169    =	$262D
   1071  28000 ????		26 2e	    var1170    =	$262E
   1072  28000 ????		26 2f	    var1171    =	$262F
   1073  28000 ????		26 30	    var1172    =	$2630
   1074  28000 ????		26 31	    var1173    =	$2631
   1075  28000 ????		26 32	    var1174    =	$2632
   1076  28000 ????		26 33	    var1175    =	$2633
   1077  28000 ????		26 34	    var1176    =	$2634
   1078  28000 ????		26 35	    var1177    =	$2635
   1079  28000 ????		26 36	    var1178    =	$2636
   1080  28000 ????		26 37	    var1179    =	$2637
   1081  28000 ????		26 38	    var1180    =	$2638
   1082  28000 ????		26 39	    var1181    =	$2639
   1083  28000 ????		26 3a	    var1182    =	$263A
   1084  28000 ????		26 3b	    var1183    =	$263B
   1085  28000 ????		26 3c	    var1184    =	$263C
   1086  28000 ????		26 3d	    var1185    =	$263D
   1087  28000 ????		26 3e	    var1186    =	$263E
   1088  28000 ????		26 3f	    var1187    =	$263F
   1089  28000 ????		26 40	    var1188    =	$2640
   1090  28000 ????		26 41	    var1189    =	$2641
   1091  28000 ????		26 42	    var1190    =	$2642
   1092  28000 ????		26 43	    var1191    =	$2643
   1093  28000 ????		26 44	    var1192    =	$2644
   1094  28000 ????		26 45	    var1193    =	$2645
   1095  28000 ????		26 46	    var1194    =	$2646
   1096  28000 ????		26 47	    var1195    =	$2647
   1097  28000 ????		26 48	    var1196    =	$2648
   1098  28000 ????		26 49	    var1197    =	$2649
   1099  28000 ????		26 4a	    var1198    =	$264A
   1100  28000 ????		26 4b	    var1199    =	$264B
   1101  28000 ????		26 4c	    var1200    =	$264C
   1102  28000 ????		26 4d	    var1201    =	$264D
   1103  28000 ????		26 4e	    var1202    =	$264E
   1104  28000 ????		26 4f	    var1203    =	$264F
   1105  28000 ????		26 50	    var1204    =	$2650
   1106  28000 ????		26 51	    var1205    =	$2651
   1107  28000 ????		26 52	    var1206    =	$2652
   1108  28000 ????		26 53	    var1207    =	$2653
   1109  28000 ????		26 54	    var1208    =	$2654
   1110  28000 ????		26 55	    var1209    =	$2655
   1111  28000 ????		26 56	    var1210    =	$2656
   1112  28000 ????		26 57	    var1211    =	$2657
   1113  28000 ????		26 58	    var1212    =	$2658
   1114  28000 ????		26 59	    var1213    =	$2659
   1115  28000 ????		26 5a	    var1214    =	$265A
   1116  28000 ????		26 5b	    var1215    =	$265B
   1117  28000 ????		26 5c	    var1216    =	$265C
   1118  28000 ????		26 5d	    var1217    =	$265D
   1119  28000 ????		26 5e	    var1218    =	$265E
   1120  28000 ????		26 5f	    var1219    =	$265F
   1121  28000 ????		26 60	    var1220    =	$2660
   1122  28000 ????		26 61	    var1221    =	$2661
   1123  28000 ????		26 62	    var1222    =	$2662
   1124  28000 ????		26 63	    var1223    =	$2663
   1125  28000 ????		26 64	    var1224    =	$2664
   1126  28000 ????		26 65	    var1225    =	$2665
   1127  28000 ????		26 66	    var1226    =	$2666
   1128  28000 ????		26 67	    var1227    =	$2667
   1129  28000 ????		26 68	    var1228    =	$2668
   1130  28000 ????		26 69	    var1229    =	$2669
   1131  28000 ????		26 6a	    var1230    =	$266A
   1132  28000 ????		26 6b	    var1231    =	$266B
   1133  28000 ????		26 6c	    var1232    =	$266C
   1134  28000 ????		26 6d	    var1233    =	$266D
   1135  28000 ????		26 6e	    var1234    =	$266E
   1136  28000 ????		26 6f	    var1235    =	$266F
   1137  28000 ????		26 70	    var1236    =	$2670
   1138  28000 ????		26 71	    var1237    =	$2671
   1139  28000 ????		26 72	    var1238    =	$2672
   1140  28000 ????		26 73	    var1239    =	$2673
   1141  28000 ????		26 74	    var1240    =	$2674
   1142  28000 ????		26 75	    var1241    =	$2675
   1143  28000 ????		26 76	    var1242    =	$2676
   1144  28000 ????		26 77	    var1243    =	$2677
   1145  28000 ????		26 78	    var1244    =	$2678
   1146  28000 ????		26 79	    var1245    =	$2679
   1147  28000 ????		26 7a	    var1246    =	$267A
   1148  28000 ????		26 7b	    var1247    =	$267B
   1149  28000 ????		26 7c	    var1248    =	$267C
   1150  28000 ????		26 7d	    var1249    =	$267D
   1151  28000 ????		26 7e	    var1250    =	$267E
   1152  28000 ????		26 7f	    var1251    =	$267F
   1153  28000 ????		26 80	    var1252    =	$2680
   1154  28000 ????		26 81	    var1253    =	$2681
   1155  28000 ????		26 82	    var1254    =	$2682
   1156  28000 ????		26 83	    var1255    =	$2683
   1157  28000 ????		26 84	    var1256    =	$2684
   1158  28000 ????		26 85	    var1257    =	$2685
   1159  28000 ????		26 86	    var1258    =	$2686
   1160  28000 ????		26 87	    var1259    =	$2687
   1161  28000 ????		26 88	    var1260    =	$2688
   1162  28000 ????		26 89	    var1261    =	$2689
   1163  28000 ????		26 8a	    var1262    =	$268A
   1164  28000 ????		26 8b	    var1263    =	$268B
   1165  28000 ????		26 8c	    var1264    =	$268C
   1166  28000 ????		26 8d	    var1265    =	$268D
   1167  28000 ????		26 8e	    var1266    =	$268E
   1168  28000 ????		26 8f	    var1267    =	$268F
   1169  28000 ????		26 90	    var1268    =	$2690
   1170  28000 ????		26 91	    var1269    =	$2691
   1171  28000 ????		26 92	    var1270    =	$2692
   1172  28000 ????		26 93	    var1271    =	$2693
   1173  28000 ????		26 94	    var1272    =	$2694
   1174  28000 ????		26 95	    var1273    =	$2695
   1175  28000 ????		26 96	    var1274    =	$2696
   1176  28000 ????		26 97	    var1275    =	$2697
   1177  28000 ????		26 98	    var1276    =	$2698
   1178  28000 ????		26 99	    var1277    =	$2699
   1179  28000 ????		26 9a	    var1278    =	$269A
   1180  28000 ????		26 9b	    var1279    =	$269B
   1181  28000 ????		26 9c	    var1280    =	$269C
   1182  28000 ????		26 9d	    var1281    =	$269D
   1183  28000 ????		26 9e	    var1282    =	$269E
   1184  28000 ????		26 9f	    var1283    =	$269F
   1185  28000 ????		26 a0	    var1284    =	$26A0
   1186  28000 ????		26 a1	    var1285    =	$26A1
   1187  28000 ????		26 a2	    var1286    =	$26A2
   1188  28000 ????		26 a3	    var1287    =	$26A3
   1189  28000 ????		26 a4	    var1288    =	$26A4
   1190  28000 ????		26 a5	    var1289    =	$26A5
   1191  28000 ????		26 a6	    var1290    =	$26A6
   1192  28000 ????		26 a7	    var1291    =	$26A7
   1193  28000 ????		26 a8	    var1292    =	$26A8
   1194  28000 ????		26 a9	    var1293    =	$26A9
   1195  28000 ????		26 aa	    var1294    =	$26AA
   1196  28000 ????		26 ab	    var1295    =	$26AB
   1197  28000 ????		26 ac	    var1296    =	$26AC
   1198  28000 ????		26 ad	    var1297    =	$26AD
   1199  28000 ????		26 ae	    var1298    =	$26AE
   1200  28000 ????		26 af	    var1299    =	$26AF
   1201  28000 ????		26 b0	    var1300    =	$26B0
   1202  28000 ????		26 b1	    var1301    =	$26B1
   1203  28000 ????		26 b2	    var1302    =	$26B2
   1204  28000 ????		26 b3	    var1303    =	$26B3
   1205  28000 ????		26 b4	    var1304    =	$26B4
   1206  28000 ????		26 b5	    var1305    =	$26B5
   1207  28000 ????		26 b6	    var1306    =	$26B6
   1208  28000 ????		26 b7	    var1307    =	$26B7
   1209  28000 ????		26 b8	    var1308    =	$26B8
   1210  28000 ????		26 b9	    var1309    =	$26B9
   1211  28000 ????		26 ba	    var1310    =	$26BA
   1212  28000 ????		26 bb	    var1311    =	$26BB
   1213  28000 ????		26 bc	    var1312    =	$26BC
   1214  28000 ????		26 bd	    var1313    =	$26BD
   1215  28000 ????		26 be	    var1314    =	$26BE
   1216  28000 ????		26 bf	    var1315    =	$26BF
   1217  28000 ????		26 c0	    var1316    =	$26C0
   1218  28000 ????		26 c1	    var1317    =	$26C1
   1219  28000 ????		26 c2	    var1318    =	$26C2
   1220  28000 ????		26 c3	    var1319    =	$26C3
   1221  28000 ????		26 c4	    var1320    =	$26C4
   1222  28000 ????		26 c5	    var1321    =	$26C5
   1223  28000 ????		26 c6	    var1322    =	$26C6
   1224  28000 ????		26 c7	    var1323    =	$26C7
   1225  28000 ????		26 c8	    var1324    =	$26C8
   1226  28000 ????		26 c9	    var1325    =	$26C9
   1227  28000 ????		26 ca	    var1326    =	$26CA
   1228  28000 ????		26 cb	    var1327    =	$26CB
   1229  28000 ????		26 cc	    var1328    =	$26CC
   1230  28000 ????		26 cd	    var1329    =	$26CD
   1231  28000 ????		26 ce	    var1330    =	$26CE
   1232  28000 ????		26 cf	    var1331    =	$26CF
   1233  28000 ????		26 d0	    var1332    =	$26D0
   1234  28000 ????		26 d1	    var1333    =	$26D1
   1235  28000 ????		26 d2	    var1334    =	$26D2
   1236  28000 ????		26 d3	    var1335    =	$26D3
   1237  28000 ????		26 d4	    var1336    =	$26D4
   1238  28000 ????		26 d5	    var1337    =	$26D5
   1239  28000 ????		26 d6	    var1338    =	$26D6
   1240  28000 ????		26 d7	    var1339    =	$26D7
   1241  28000 ????		26 d8	    var1340    =	$26D8
   1242  28000 ????		26 d9	    var1341    =	$26D9
   1243  28000 ????		26 da	    var1342    =	$26DA
   1244  28000 ????		26 db	    var1343    =	$26DB
   1245  28000 ????		26 dc	    var1344    =	$26DC
   1246  28000 ????		26 dd	    var1345    =	$26DD
   1247  28000 ????		26 de	    var1346    =	$26DE
   1248  28000 ????		26 df	    var1347    =	$26DF
   1249  28000 ????		26 e0	    var1348    =	$26E0
   1250  28000 ????		26 e1	    var1349    =	$26E1
   1251  28000 ????		26 e2	    var1350    =	$26E2
   1252  28000 ????		26 e3	    var1351    =	$26E3
   1253  28000 ????		26 e4	    var1352    =	$26E4
   1254  28000 ????		26 e5	    var1353    =	$26E5
   1255  28000 ????		26 e6	    var1354    =	$26E6
   1256  28000 ????		26 e7	    var1355    =	$26E7
   1257  28000 ????		26 e8	    var1356    =	$26E8
   1258  28000 ????		26 e9	    var1357    =	$26E9
   1259  28000 ????		26 ea	    var1358    =	$26EA
   1260  28000 ????		26 eb	    var1359    =	$26EB
   1261  28000 ????		26 ec	    var1360    =	$26EC
   1262  28000 ????		26 ed	    var1361    =	$26ED
   1263  28000 ????		26 ee	    var1362    =	$26EE
   1264  28000 ????		26 ef	    var1363    =	$26EF
   1265  28000 ????		26 f0	    var1364    =	$26F0
   1266  28000 ????		26 f1	    var1365    =	$26F1
   1267  28000 ????		26 f2	    var1366    =	$26F2
   1268  28000 ????		26 f3	    var1367    =	$26F3
   1269  28000 ????		26 f4	    var1368    =	$26F4
   1270  28000 ????		26 f5	    var1369    =	$26F5
   1271  28000 ????		26 f6	    var1370    =	$26F6
   1272  28000 ????		26 f7	    var1371    =	$26F7
   1273  28000 ????		26 f8	    var1372    =	$26F8
   1274  28000 ????		26 f9	    var1373    =	$26F9
   1275  28000 ????		26 fa	    var1374    =	$26FA
   1276  28000 ????		26 fb	    var1375    =	$26FB
   1277  28000 ????		26 fc	    var1376    =	$26FC
   1278  28000 ????		26 fd	    var1377    =	$26FD
   1279  28000 ????		26 fe	    var1378    =	$26FE
   1280  28000 ????		26 ff	    var1379    =	$26FF
   1281  28000 ????		27 00	    var1380    =	$2700
   1282  28000 ????		27 01	    var1381    =	$2701
   1283  28000 ????		27 02	    var1382    =	$2702
   1284  28000 ????		27 03	    var1383    =	$2703
   1285  28000 ????		27 04	    var1384    =	$2704
   1286  28000 ????		27 05	    var1385    =	$2705
   1287  28000 ????		27 06	    var1386    =	$2706
   1288  28000 ????		27 07	    var1387    =	$2707
   1289  28000 ????		27 08	    var1388    =	$2708
   1290  28000 ????		27 09	    var1389    =	$2709
   1291  28000 ????		27 0a	    var1390    =	$270A
   1292  28000 ????		27 0b	    var1391    =	$270B
   1293  28000 ????		27 0c	    var1392    =	$270C
   1294  28000 ????		27 0d	    var1393    =	$270D
   1295  28000 ????		27 0e	    var1394    =	$270E
   1296  28000 ????		27 0f	    var1395    =	$270F
   1297  28000 ????		27 10	    var1396    =	$2710
   1298  28000 ????		27 11	    var1397    =	$2711
   1299  28000 ????		27 12	    var1398    =	$2712
   1300  28000 ????		27 13	    var1399    =	$2713
   1301  28000 ????		27 14	    var1400    =	$2714
   1302  28000 ????		27 15	    var1401    =	$2715
   1303  28000 ????		27 16	    var1402    =	$2716
   1304  28000 ????		27 17	    var1403    =	$2717
   1305  28000 ????		27 18	    var1404    =	$2718
   1306  28000 ????		27 19	    var1405    =	$2719
   1307  28000 ????		27 1a	    var1406    =	$271A
   1308  28000 ????		27 1b	    var1407    =	$271B
   1309  28000 ????		27 1c	    var1408    =	$271C
   1310  28000 ????		27 1d	    var1409    =	$271D
   1311  28000 ????		27 1e	    var1410    =	$271E
   1312  28000 ????		27 1f	    var1411    =	$271F
   1313  28000 ????		27 20	    var1412    =	$2720
   1314  28000 ????		27 21	    var1413    =	$2721
   1315  28000 ????		27 22	    var1414    =	$2722
   1316  28000 ????		27 23	    var1415    =	$2723
   1317  28000 ????		27 24	    var1416    =	$2724
   1318  28000 ????		27 25	    var1417    =	$2725
   1319  28000 ????		27 26	    var1418    =	$2726
   1320  28000 ????		27 27	    var1419    =	$2727
   1321  28000 ????		27 28	    var1420    =	$2728
   1322  28000 ????		27 29	    var1421    =	$2729
   1323  28000 ????		27 2a	    var1422    =	$272A
   1324  28000 ????		27 2b	    var1423    =	$272B
   1325  28000 ????		27 2c	    var1424    =	$272C
   1326  28000 ????		27 2d	    var1425    =	$272D
   1327  28000 ????		27 2e	    var1426    =	$272E
   1328  28000 ????		27 2f	    var1427    =	$272F
   1329  28000 ????		27 30	    var1428    =	$2730
   1330  28000 ????		27 31	    var1429    =	$2731
   1331  28000 ????		27 32	    var1430    =	$2732
   1332  28000 ????		27 33	    var1431    =	$2733
   1333  28000 ????		27 34	    var1432    =	$2734
   1334  28000 ????		27 35	    var1433    =	$2735
   1335  28000 ????		27 36	    var1434    =	$2736
   1336  28000 ????		27 37	    var1435    =	$2737
   1337  28000 ????		27 38	    var1436    =	$2738
   1338  28000 ????		27 39	    var1437    =	$2739
   1339  28000 ????		27 3a	    var1438    =	$273A
   1340  28000 ????		27 3b	    var1439    =	$273B
   1341  28000 ????		27 3c	    var1440    =	$273C
   1342  28000 ????		27 3d	    var1441    =	$273D
   1343  28000 ????		27 3e	    var1442    =	$273E
   1344  28000 ????		27 3f	    var1443    =	$273F
   1345  28000 ????		27 40	    var1444    =	$2740
   1346  28000 ????		27 41	    var1445    =	$2741
   1347  28000 ????		27 42	    var1446    =	$2742
   1348  28000 ????		27 43	    var1447    =	$2743
   1349  28000 ????		27 44	    var1448    =	$2744
   1350  28000 ????		27 45	    var1449    =	$2745
   1351  28000 ????		27 46	    var1450    =	$2746
   1352  28000 ????		27 47	    var1451    =	$2747
   1353  28000 ????		27 48	    var1452    =	$2748
   1354  28000 ????		27 49	    var1453    =	$2749
   1355  28000 ????		27 4a	    var1454    =	$274A
   1356  28000 ????		27 4b	    var1455    =	$274B
   1357  28000 ????		27 4c	    var1456    =	$274C
   1358  28000 ????		27 4d	    var1457    =	$274D
   1359  28000 ????		27 4e	    var1458    =	$274E
   1360  28000 ????		27 4f	    var1459    =	$274F
   1361  28000 ????		27 50	    var1460    =	$2750
   1362  28000 ????		27 51	    var1461    =	$2751
   1363  28000 ????		27 52	    var1462    =	$2752
   1364  28000 ????		27 53	    var1463    =	$2753
   1365  28000 ????		27 54	    var1464    =	$2754
   1366  28000 ????		27 55	    var1465    =	$2755
   1367  28000 ????		27 56	    var1466    =	$2756
   1368  28000 ????		27 57	    var1467    =	$2757
   1369  28000 ????		27 58	    var1468    =	$2758
   1370  28000 ????		27 59	    var1469    =	$2759
   1371  28000 ????		27 5a	    var1470    =	$275A
   1372  28000 ????		27 5b	    var1471    =	$275B
   1373  28000 ????		27 5c	    var1472    =	$275C
   1374  28000 ????		27 5d	    var1473    =	$275D
   1375  28000 ????		27 5e	    var1474    =	$275E
   1376  28000 ????		27 5f	    var1475    =	$275F
   1377  28000 ????		27 60	    var1476    =	$2760
   1378  28000 ????		27 61	    var1477    =	$2761
   1379  28000 ????		27 62	    var1478    =	$2762
   1380  28000 ????		27 63	    var1479    =	$2763
   1381  28000 ????		27 64	    var1480    =	$2764
   1382  28000 ????		27 65	    var1481    =	$2765
   1383  28000 ????		27 66	    var1482    =	$2766
   1384  28000 ????		27 67	    var1483    =	$2767
   1385  28000 ????		27 68	    var1484    =	$2768
   1386  28000 ????		27 69	    var1485    =	$2769
   1387  28000 ????		27 6a	    var1486    =	$276A
   1388  28000 ????		27 6b	    var1487    =	$276B
   1389  28000 ????		27 6c	    var1488    =	$276C
   1390  28000 ????		27 6d	    var1489    =	$276D
   1391  28000 ????		27 6e	    var1490    =	$276E
   1392  28000 ????		27 6f	    var1491    =	$276F
   1393  28000 ????		27 70	    var1492    =	$2770
   1394  28000 ????		27 71	    var1493    =	$2771
   1395  28000 ????		27 72	    var1494    =	$2772
   1396  28000 ????		27 73	    var1495    =	$2773
   1397  28000 ????		27 74	    var1496    =	$2774
   1398  28000 ????		27 75	    var1497    =	$2775
   1399  28000 ????		27 76	    var1498    =	$2776
   1400  28000 ????		27 77	    var1499    =	$2777
   1401  28000 ????		27 78	    var1500    =	$2778
   1402  28000 ????		27 79	    var1501    =	$2779
   1403  28000 ????		27 7a	    var1502    =	$277A
   1404  28000 ????		27 7b	    var1503    =	$277B
   1405  28000 ????		27 7c	    var1504    =	$277C
   1406  28000 ????		27 7d	    var1505    =	$277D
   1407  28000 ????		27 7e	    var1506    =	$277E
   1408  28000 ????		27 7f	    var1507    =	$277F
   1409  28000 ????		27 80	    var1508    =	$2780
   1410  28000 ????		27 81	    var1509    =	$2781
   1411  28000 ????		27 82	    var1510    =	$2782
   1412  28000 ????		27 83	    var1511    =	$2783
   1413  28000 ????		27 84	    var1512    =	$2784
   1414  28000 ????		27 85	    var1513    =	$2785
   1415  28000 ????		27 86	    var1514    =	$2786
   1416  28000 ????		27 87	    var1515    =	$2787
   1417  28000 ????		27 88	    var1516    =	$2788
   1418  28000 ????		27 89	    var1517    =	$2789
   1419  28000 ????		27 8a	    var1518    =	$278A
   1420  28000 ????		27 8b	    var1519    =	$278B
   1421  28000 ????		27 8c	    var1520    =	$278C
   1422  28000 ????		27 8d	    var1521    =	$278D
   1423  28000 ????		27 8e	    var1522    =	$278E
   1424  28000 ????		27 8f	    var1523    =	$278F
   1425  28000 ????		27 90	    var1524    =	$2790
   1426  28000 ????		27 91	    var1525    =	$2791
   1427  28000 ????		27 92	    var1526    =	$2792
   1428  28000 ????		27 93	    var1527    =	$2793
   1429  28000 ????		27 94	    var1528    =	$2794
   1430  28000 ????		27 95	    var1529    =	$2795
   1431  28000 ????		27 96	    var1530    =	$2796
   1432  28000 ????		27 97	    var1531    =	$2797
   1433  28000 ????		27 98	    var1532    =	$2798
   1434  28000 ????		27 99	    var1533    =	$2799
   1435  28000 ????		27 9a	    var1534    =	$279A
   1436  28000 ????		27 9b	    var1535    =	$279B
   1437  28000 ????		27 9c	    var1536    =	$279C
   1438  28000 ????		27 9d	    var1537    =	$279D
   1439  28000 ????		27 9e	    var1538    =	$279E
   1440  28000 ????		27 9f	    var1539    =	$279F
   1441  28000 ????		27 a0	    var1540    =	$27A0
   1442  28000 ????		27 a1	    var1541    =	$27A1
   1443  28000 ????		27 a2	    var1542    =	$27A2
   1444  28000 ????		27 a3	    var1543    =	$27A3
   1445  28000 ????		27 a4	    var1544    =	$27A4
   1446  28000 ????		27 a5	    var1545    =	$27A5
   1447  28000 ????		27 a6	    var1546    =	$27A6
   1448  28000 ????		27 a7	    var1547    =	$27A7
   1449  28000 ????		27 a8	    var1548    =	$27A8
   1450  28000 ????		27 a9	    var1549    =	$27A9
   1451  28000 ????		27 aa	    var1550    =	$27AA
   1452  28000 ????		27 ab	    var1551    =	$27AB
   1453  28000 ????		27 ac	    var1552    =	$27AC
   1454  28000 ????		27 ad	    var1553    =	$27AD
   1455  28000 ????		27 ae	    var1554    =	$27AE
   1456  28000 ????		27 af	    var1555    =	$27AF
   1457  28000 ????		27 b0	    var1556    =	$27B0
   1458  28000 ????		27 b1	    var1557    =	$27B1
   1459  28000 ????		27 b2	    var1558    =	$27B2
   1460  28000 ????		27 b3	    var1559    =	$27B3
   1461  28000 ????		27 b4	    var1560    =	$27B4
   1462  28000 ????		27 b5	    var1561    =	$27B5
   1463  28000 ????		27 b6	    var1562    =	$27B6
   1464  28000 ????		27 b7	    var1563    =	$27B7
   1465  28000 ????		27 b8	    var1564    =	$27B8
   1466  28000 ????		27 b9	    var1565    =	$27B9
   1467  28000 ????		27 ba	    var1566    =	$27BA
   1468  28000 ????		27 bb	    var1567    =	$27BB
   1469  28000 ????		27 bc	    var1568    =	$27BC
   1470  28000 ????		27 bd	    var1569    =	$27BD
   1471  28000 ????		27 be	    var1570    =	$27BE
   1472  28000 ????		27 bf	    var1571    =	$27BF
   1473  28000 ????		27 c0	    var1572    =	$27C0
   1474  28000 ????		27 c1	    var1573    =	$27C1
   1475  28000 ????		27 c2	    var1574    =	$27C2
   1476  28000 ????		27 c3	    var1575    =	$27C3
   1477  28000 ????		27 c4	    var1576    =	$27C4
   1478  28000 ????		27 c5	    var1577    =	$27C5
   1479  28000 ????		27 c6	    var1578    =	$27C6
   1480  28000 ????		27 c7	    var1579    =	$27C7
   1481  28000 ????		27 c8	    var1580    =	$27C8
   1482  28000 ????		27 c9	    var1581    =	$27C9
   1483  28000 ????		27 ca	    var1582    =	$27CA
   1484  28000 ????		27 cb	    var1583    =	$27CB
   1485  28000 ????		27 cc	    var1584    =	$27CC
   1486  28000 ????		27 cd	    var1585    =	$27CD
   1487  28000 ????		27 ce	    var1586    =	$27CE
   1488  28000 ????		27 cf	    var1587    =	$27CF
   1489  28000 ????		27 d0	    var1588    =	$27D0
   1490  28000 ????		27 d1	    var1589    =	$27D1
   1491  28000 ????		27 d2	    var1590    =	$27D2
   1492  28000 ????		27 d3	    var1591    =	$27D3
   1493  28000 ????		27 d4	    var1592    =	$27D4
   1494  28000 ????		27 d5	    var1593    =	$27D5
   1495  28000 ????		27 d6	    var1594    =	$27D6
   1496  28000 ????		27 d7	    var1595    =	$27D7
   1497  28000 ????		27 d8	    var1596    =	$27D8
   1498  28000 ????		27 d9	    var1597    =	$27D9
   1499  28000 ????		27 da	    var1598    =	$27DA
   1500  28000 ????		27 db	    var1599    =	$27DB
   1501  28000 ????		27 dc	    var1600    =	$27DC
   1502  28000 ????		27 dd	    var1601    =	$27DD
   1503  28000 ????		27 de	    var1602    =	$27DE
   1504  28000 ????		27 df	    var1603    =	$27DF
   1505  28000 ????		27 e0	    var1604    =	$27E0
   1506  28000 ????		27 e1	    var1605    =	$27E1
   1507  28000 ????		27 e2	    var1606    =	$27E2
   1508  28000 ????		27 e3	    var1607    =	$27E3
   1509  28000 ????		27 e4	    var1608    =	$27E4
   1510  28000 ????		27 e5	    var1609    =	$27E5
   1511  28000 ????		27 e6	    var1610    =	$27E6
   1512  28000 ????		27 e7	    var1611    =	$27E7
   1513  28000 ????		27 e8	    var1612    =	$27E8
   1514  28000 ????		27 e9	    var1613    =	$27E9
   1515  28000 ????		27 ea	    var1614    =	$27EA
   1516  28000 ????		27 eb	    var1615    =	$27EB
   1517  28000 ????		27 ec	    var1616    =	$27EC
   1518  28000 ????		27 ed	    var1617    =	$27ED
   1519  28000 ????		27 ee	    var1618    =	$27EE
   1520  28000 ????		27 ef	    var1619    =	$27EF
   1521  28000 ????		27 f0	    var1620    =	$27F0
   1522  28000 ????		27 f1	    var1621    =	$27F1
   1523  28000 ????		27 f2	    var1622    =	$27F2
   1524  28000 ????		27 f3	    var1623    =	$27F3
   1525  28000 ????		27 f4	    var1624    =	$27F4
   1526  28000 ????		27 f5	    var1625    =	$27F5
   1527  28000 ????		27 f6	    var1626    =	$27F6
   1528  28000 ????		27 f7	    var1627    =	$27F7
   1529  28000 ????		27 f8	    var1628    =	$27F8
   1530  28000 ????		27 f9	    var1629    =	$27F9
   1531  28000 ????		27 fa	    var1630    =	$27FA
   1532  28000 ????		27 fb	    var1631    =	$27FB
   1533  28000 ????		27 fc	    var1632    =	$27FC
   1534  28000 ????		27 fd	    var1633    =	$27FD
   1535  28000 ????		27 fe	    var1634    =	$27FE
   1536  28000 ????		27 ff	    var1635    =	$27FF
------- FILE d:\2018dev\7800\7800basic\projects\demo1\lesson4_5.78b.asm
   1474  28000 ????
   1475  28000 ????						; BEADHEADER... disabled for now
   1476  28000 ????						; A BEAD header gets automatically incorportated into the ROM header. 
   1477  28000 ????						; For more BEAD executable info, check out the spec...
   1478  28000 ????						; http://7800.8bitdev.org/index.php/The_Atari_7800_BEAD_Execuable_Specification
   1479  28000 ????
   1480  28000 ????		00 01	    GAMEDESCRIPTIONSET =	1
   1481  28000 ????		4e 61 6d 65 GAMEDESCRIPTION =	"Test Name"
   1482  28000 ????
   1483  28000 ????
   1484  28000 ????		00 40	    BDHSC      =	%01000000
   1485  28000 ????		00 20	    BDYM       =	%00100000
   1486  28000 ????		00 10	    BDPOKEY    =	%00010000
   1487  28000 ????		00 08	    BDROF      =	%00001000
   1488  28000 ????		00 00	    BD16K      =	%00000000
   1489  28000 ????		00 01	    BD32K      =	%00000001
   1490  28000 ????		00 02	    BD48K      =	%00000010
   1491  28000 ????		00 05	    BD1800     =	%00000101
   1492  28000 ????		00 06	    BD4000     =	%00000110
   1493  28000 ????
   1494  28000 ????			   -	       ifconst	BEADHEADER
   1495  28000 ????			   -BEADHARDWARE SET	0
   1496  28000 ????			   -	       ifconst	ROM16K
   1497  28000 ????			   -BEADHARDWARE SET	(BEADHARDWARE|BD16K)
   1498  28000 ????			   -	       endif
   1499  28000 ????			   -	       ifconst	ROM32K
   1500  28000 ????			   -BEADHARDWARE SET	(BEADHARDWARE|BD32K)
   1501  28000 ????			   -	       endif
   1502  28000 ????			   -	       ifconst	ROM48K
   1503  28000 ????			   -BEADHARDWARE SET	(BEADHARDWARE|BD48K)
   1504  28000 ????			   -	       endif
   1505  28000 ????			   -	       ifconst	pokeysupport
   1506  28000 ????			   -BEADHARDWARE SET	(BEADHARDWARE|BDPOKEY)
   1507  28000 ????			   -	       endif
   1508  28000 ????			   -	       ifconst	HSSUPPORT
   1509  28000 ????			   -BEADHARDWARE SET	(BEADHARDWARE|BDHSC)
   1510  28000 ????			   -	       endif
   1511  28000 ????				       endif
   1512  28000 ????
   1513  28000 ????						;start address of cart...
   1514  28000 ????
   1515  28000 ????			    BANK_WAS_SET SET	0
   1516  28000 ????
   1517  28000 ????			   -	       ifconst	ROM8K
   1518  28000 ????			   -	       ORG	$E000,0
   1519  28000 ????			   -BANK_WAS_SET SET	1
   1520  28000 ????				       endif		; ROM8K
   1521  28000 ????
   1522  28000 ????			   -	       ifconst	ROM16K
   1523  28000 ????			   -	       ORG	$C000,0
   1524  28000 ????			   -BANK_WAS_SET SET	1
   1525  28000 ????			   -	       ifconst	BEADHEADER
   1526  28000 ????			   -	       .byte	$BE,$AD,BEADHARDWARE
   1527  28000 ????			   -	       ifconst	GAMEDESCRIPTION
   1528  28000 ????			   -	       CLC
   1529  28000 ????			   -	       BCC	_SKIPDESCRIPTION
   1530  28000 ????			   -	       .byte	GAMEDESCRIPTION,0
   1531  28000 ????			   -_SKIPDESCRIPTION
   1532  28000 ????			   -	       endif		; GAMEDESCRIPTION
   1533  28000 ????			   -	       jmp	($FFFC)
   1534  28000 ????			   -	       endif		; BEADHEADER
   1535  28000 ????				       endif		; ROM16K
   1536  28000 ????
   1537  28000 ????			   -	       ifconst	ROM32K
   1538  28000 ????			   -	       ORG	$8000,0
   1539  28000 ????			   -BANK_WAS_SET SET	1
   1540  28000 ????			   -	       ifconst	BEADHEADER
   1541  28000 ????			   -	       .byte	$BE,$AD,BEADHARDWARE
   1542  28000 ????			   -	       ifconst	GAMEDESCRIPTION
   1543  28000 ????			   -	       CLC
   1544  28000 ????			   -	       BCC	_SKIPDESCRIPTION
   1545  28000 ????			   -	       .byte	GAMEDESCRIPTION,0
   1546  28000 ????			   -_SKIPDESCRIPTION
   1547  28000 ????			   -	       endif		; GAMEDESCRIPTION
   1548  28000 ????			   -	       jmp	($FFFC)
   1549  28000 ????			   -	       endif		; BEADHEADER
   1550  28000 ????				       endif		; ROM32K
   1551  28000 ????
   1552  28000 ????			   -	       ifconst	ROM48K
   1553  28000 ????			   -	       ORG	$4000,0
   1554  28000 ????			   -BANK_WAS_SET SET	1
   1555  28000 ????			   -	       ifconst	BEADHEADER
   1556  28000 ????			   -	       .byte	$BE,$AD,BEADHARDWARE
   1557  28000 ????			   -	       ifconst	GAMEDESCRIPTIONSET
   1558  28000 ????			   -	       CLC
   1559  28000 ????			   -	       BCC	_SKIPDESCRIPTION
   1560  28000 ????			   -	       .byte	GAMEDESCRIPTION,0
   1561  28000 ????			   -_SKIPDESCRIPTION
   1562  28000 ????			   -	       endif		; GAMEDESCRIPTIONSET
   1563  28000 ????			   -	       jmp	($FFFC)
   1564  28000 ????			   -	       endif		; BEADHEADER
   1565  28000 ????				       endif		; ROM48K
   1566  28000 ????
   1567  28000 ????			   -	       ifconst	ROM52K
   1568  28000 ????			   -BANK_WAS_SET SET	1
   1569  28000 ????			   -	       ORG	$3000,0
   1570  28000 ????				       endif		; ROM52K
   1571  28000 ????
   1572  28000 ????				       ifconst	bankswitchmode
   1573  28000 ????			   -	       ifconst	ROMAT4K
   1574  28000 ????			   -BANK_WAS_SET SET	1
   1575  28000 ????			   -	       ORG	$4000,0
   1576  28000 ????			   -	       RORG	$4000
   1577  28000 ????				       else		; ROMAT4K
   1578  28000 ????			    BANK_WAS_SET SET	1
   1579  8000					      ORG	$8000,0
   1580  8000					      RORG	$8000
   1581  8000					      endif
   1582  8000					      endif
   1583  8000
   1584  8000				  -	      if	BANK_WAS_SET = 0
   1585  8000				  -	      ORG	$8000,0	; default is 32K
   1586  8000					      endif
   1587  8000
   1588  8000				   START_OF_ROM SET	.
   1589  8000				   SPACEOVERFLOW SET	0
   1590  8000				  -	      ifnconst	SPACEOVERFLOWPASS
   1591  8000				  -SPACEOVERFLOWPASS SET	0
   1592  8000					      endif	SPACEOVERFLOWPASS
   1593  8000				   game
   1594  8000				   .L00 		;;  set zoneheight 16
   1595  8000
   1596  8000				   .L01 		;;  displaymode 160A
   1597  8000
   1598  8000		       a9 40		      lda	#%01000000	;Enable DMA, mode=160x2/160x4
   1599  8002		       85 3c		      sta	CTRL
   1600  8004
   1601  8004		       8d 07 21 	      sta	sCTRL
   1602  8007
   1603  8007				   .L02 		;;  set plotvalueonscreen on
   1604  8007
   1605  8007				   .L03 		;;  set romsize 128kRAM
   1606  8007
   1607  8007				   .L04 		;;  set dlmemory $4000 $7FFF
   1608  8007
   1609  8007		       40 00	   DLMEMSTART =	$4000
   1610  8007		       7f ff	   DLMEMEND   =	$7FFF
   1611  8007				   .L05 		;;  doublebuffer on
   1612  8007
   1613  8007		       a9 01		      lda	#1
   1614  8009		       85 d5		      sta	doublebufferstate
   1615  800b				   .
   1616  800b							;; 
   1617  800b
   1618  800b				   .L06 		;;  incgraphic font.png 160A 
   1619  800b
   1620  800b				   .L07 		;;  characterset font
   1621  800b
   1622  800b		       a9 a0		      lda	#>font
   1623  800d		       8d 0b 21 	      sta	sCHARBASE
   1624  8010
   1625  8010		       85 34		      sta	CHARBASE
   1626  8012		       a9 60		      lda	#(font_mode | %01100000)
   1627  8014		       8d 06 21 	      sta	charactermode
   1628  8017
   1629  8017				   .L08 		;;  alphachars '0123456789abcdefghijklmnopqrstuvwxyz>`?!/.,-_()[]&AB '
   1630  8017
   1631  8017				   .
   1632  8017							;; 
   1633  8017
   1634  8017				   .L09 		;;  rem sprites
   1635  8017
   1636  8017				   .L010		;;  incgraphic images/player1.png 160A 0 1 3 2
   1637  8017
   1638  8017				   .L011		;;  incgraphic images/player2.png 160A 0 1 3 2
   1639  8017
   1640  8017				   .L012		;;  incgraphic images/player3.png 160A 0 1 3 2
   1641  8017
   1642  8017				   .L013		;;  incgraphic images/player4.png 160A 0 1 3 2
   1643  8017
   1644  8017				   .
   1645  8017							;; 
   1646  8017
   1647  8017				   .L014		;;  incgraphic images/orb1.png 160A 0 3 2 1
   1648  8017
   1649  8017				   .L015		;;  incgraphic images/orb2.png 160A 0 3 2 1
   1650  8017
   1651  8017				   .L016		;;  incgraphic images/orb3.png 160A 0 3 2 1 
   1652  8017
   1653  8017				   .L017		;;  incgraphic images/orb4.png 160A 0 3 2 1
   1654  8017
   1655  8017				   .L018		;;  incgraphic images/orb5.png 160A 0 3 2 1 
   1656  8017
   1657  8017				   .L019		;;  incgraphic images/orb6.png 160A 0 3 2 1 
   1658  8017
   1659  8017				   .
   1660  8017							;; 
   1661  8017
   1662  8017				   .L020		;;  incbanner	images/title.png 160B 
   1663  8017
   1664  8017				   .
   1665  8017							;; 
   1666  8017
   1667  8017				   .L021		;;  BACKGRND = $00
   1668  8017
   1669  8017		       a9 00		      lda	#$00
   1670  8019		       85 20		      sta	BACKGRND
   1671  801b				   .
   1672  801b							;; 
   1673  801b
   1674  801b				   .
   1675  801b							;; 
   1676  801b
   1677  801b				   .
   1678  801b							;; 
   1679  801b
   1680  801b				   .L022		;;  dim bgColor  =  var1
   1681  801b
   1682  801b				   .L023		;;  dim wait  =  var2
   1683  801b
   1684  801b				   .L024		;;  dim lives	=  var3
   1685  801b
   1686  801b				   .L025		;;  rem dim score = var4
   1687  801b
   1688  801b				   .L026		;;  dim playerX  = var5
   1689  801b
   1690  801b				   .L027		;;  dim playerY  =  var6
   1691  801b
   1692  801b				   .L028		;;  dim playerAnimFrame  =  var7
   1693  801b
   1694  801b				   .L029		;;  dim playerAnimWait  =  var8
   1695  801b
   1696  801b				   .
   1697  801b							;; 
   1698  801b
   1699  801b				   .L030		;;  dim orbX  = var9
   1700  801b
   1701  801b				   .L031		;;  dim orbY  =  var10
   1702  801b
   1703  801b				   .L032		;;  dim orbAnimFrame  =  var11
   1704  801b
   1705  801b				   .L033		;;  dim orbAnimWait  =  var12
   1706  801b
   1707  801b				   .
   1708  801b							;; 
   1709  801b
   1710  801b				   .L034		;;  dim randomSeed  =	var13
   1711  801b
   1712  801b				   .
   1713  801b							;; 
   1714  801b
   1715  801b				   .
   1716  801b							;; 
   1717  801b
   1718  801b				   .L035		;;  bgColor  =  $00
   1719  801b
   1720  801b		       a9 00		      lda	#$00
   1721  801d		       8d 41 01 	      sta	bgColor
   1722  8020				   .L036		;;  wait  =  0
   1723  8020
   1724  8020		       a9 00		      lda	#0
   1725  8022		       8d 42 01 	      sta	wait
   1726  8025				   .L037		;;  lives  =  0
   1727  8025
   1728  8025		       a9 00		      lda	#0
   1729  8027		       8d 43 01 	      sta	lives
   1730  802a				   .L038		;;  score0  =	0
   1731  802a
   1732  802a		       a9 00		      lda	#$00
   1733  802c		       8d a8 01 	      sta	score0+2
   1734  802f		       a9 00		      lda	#$00
   1735  8031		       8d a7 01 	      sta	score0+1
   1736  8034		       a9 00		      lda	#$00
   1737  8036		       8d a6 01 	      sta	score0
   1738  8039				   .L039		;;  playerY  =  0
   1739  8039
   1740  8039		       a9 00		      lda	#0
   1741  803b		       8d 46 01 	      sta	playerY
   1742  803e				   .L040		;;  playerX  =  0
   1743  803e
   1744  803e		       a9 00		      lda	#0
   1745  8040		       8d 45 01 	      sta	playerX
   1746  8043				   .L041		;;  playerAnimFrame  =  0
   1747  8043
   1748  8043		       a9 00		      lda	#0
   1749  8045		       8d 47 01 	      sta	playerAnimFrame
   1750  8048				   .L042		;;  playerAnimWait  =	0
   1751  8048
   1752  8048		       a9 00		      lda	#0
   1753  804a		       8d 48 01 	      sta	playerAnimWait
   1754  804d				   .
   1755  804d							;; 
   1756  804d
   1757  804d				   .L043		;;  orbX  =  0
   1758  804d
   1759  804d		       a9 00		      lda	#0
   1760  804f		       8d 49 01 	      sta	orbX
   1761  8052				   .L044		;;  orbY  =  0
   1762  8052
   1763  8052		       a9 00		      lda	#0
   1764  8054		       8d 4a 01 	      sta	orbY
   1765  8057				   .L045		;;  orbAnimFrame  =  0
   1766  8057
   1767  8057		       a9 00		      lda	#0
   1768  8059		       8d 4b 01 	      sta	orbAnimFrame
   1769  805c				   .L046		;;  orbAnimWait  =  0
   1770  805c
   1771  805c		       a9 00		      lda	#0
   1772  805e		       8d 4c 01 	      sta	orbAnimWait
   1773  8061				   .
   1774  8061							;; 
   1775  8061
   1776  8061				   .L047		;;  randomSeed  =  1
   1777  8061
   1778  8061		       a9 01		      lda	#1
   1779  8063		       8d 4d 01 	      sta	randomSeed
   1780  8066				   .
   1781  8066							;; 
   1782  8066
   1783  8066				   .
   1784  8066							;; 
   1785  8066
   1786  8066				   .
   1787  8066							;; 
   1788  8066
   1789  8066				   .L048		;;  BACKGRND  =  $00
   1790  8066
   1791  8066		       a9 00		      lda	#$00
   1792  8068		       85 20		      sta	BACKGRND
   1793  806a				   .
   1794  806a							;; 
   1795  806a
   1796  806a				   ._setTitleColors
   1797  806a							;; _setTitleColors
   1798  806a
   1799  806a				   .L049		;;  P0C1  =  title_color1
   1800  806a
   1801  806a		       a9 91		      lda	#title_color1
   1802  806c		       85 21		      sta	P0C1
   1803  806e				   .L050		;;  P0C2  =  title_color2
   1804  806e
   1805  806e		       a9 a5		      lda	#title_color2
   1806  8070		       85 22		      sta	P0C2
   1807  8072				   .L051		;;  P0C3  =  title_color3
   1808  8072
   1809  8072		       a9 a6		      lda	#title_color3
   1810  8074		       85 23		      sta	P0C3
   1811  8076				   .L052		;;  P1C1  =  title_color4
   1812  8076
   1813  8076		       a9 91		      lda	#title_color4
   1814  8078		       85 25		      sta	P1C1
   1815  807a				   .L053		;;  P1C2  =  title_color5
   1816  807a
   1817  807a		       a9 aa		      lda	#title_color5
   1818  807c		       85 26		      sta	P1C2
   1819  807e				   .L054		;;  P1C3  =  title_color6
   1820  807e
   1821  807e		       a9 92		      lda	#title_color6
   1822  8080		       85 27		      sta	P1C3
   1823  8082				   .L055		;;  P2C1  =  title_color7
   1824  8082
   1825  8082		       a9 ab		      lda	#title_color7
   1826  8084		       85 29		      sta	P2C1
   1827  8086				   .L056		;;  P2C2  =  title_color8
   1828  8086
   1829  8086		       a9 93		      lda	#title_color8
   1830  8088		       85 2a		      sta	P2C2
   1831  808a				   .L057		;;  P2C3  =  title_color9
   1832  808a
   1833  808a		       a9 a4		      lda	#title_color9
   1834  808c		       85 2b		      sta	P2C3
   1835  808e				   .L058		;;  P3C1  =  title_color10
   1836  808e
   1837  808e		       a9 a7		      lda	#title_color10
   1838  8090		       85 2d		      sta	P3C1
   1839  8092				   .L059		;;  P3C2  =  title_color11
   1840  8092
   1841  8092		       a9 a9		      lda	#title_color11
   1842  8094		       85 2e		      sta	P3C2
   1843  8096				   .L060		;;  P3C3  =  title_color12
   1844  8096
   1845  8096		       a9 a8		      lda	#title_color12
   1846  8098		       85 2f		      sta	P3C3
   1847  809a				   .
   1848  809a							;; 
   1849  809a
   1850  809a				   .
   1851  809a							;; 
   1852  809a
   1853  809a				   ._titleLoop
   1854  809a							;; _titleLoop
   1855  809a
   1856  809a				   .L061		;;  clearscreen
   1857  809a
   1858  809a		       20 87 f0 	      jsr	clearscreen
   1859  809d				   .L062		;;  plotbanner title 0 32 50
   1860  809d
   1861  809d		       a9 00		      lda	#(0)
   1862  809f		       85 44		      sta	temp3
   1863  80a1
   1864  80a1		       a9 20		      lda	#32
   1865  80a3		       85 45		      sta	temp4
   1866  80a5
   1867  80a5		       a9 32		      lda	#50
   1868  80a7
   1869  80a7		       85 46		      sta	temp5
   1870  80a9
   1871  80a9		       a9 c0		      lda	#(title00_mode|%01000000)
   1872  80ab		       85 47		      sta	temp6
   1873  80ad
   1874  80ad		       a9 51		      lda	#<(title00 + 0)
   1875  80af		       85 42		      sta	temp1
   1876  80b1
   1877  80b1		       a9 a0		      lda	#>(title00 + 0)
   1878  80b3		       85 43		      sta	temp2
   1879  80b5
   1880  80b5		       20 f8 f2 	      jsr	plotsprite
   1881  80b8		       18		      clc
   1882  80b9		       a9 10		      lda	#16
   1883  80bb		       65 46		      adc	temp5
   1884  80bd		       85 46		      sta	temp5
   1885  80bf		       a9 81		      lda	#<(title01 + 0)
   1886  80c1		       85 42		      sta	temp1
   1887  80c3
   1888  80c3		       a9 a0		      lda	#>(title01 + 0)
   1889  80c5		       85 43		      sta	temp2
   1890  80c7
   1891  80c7		       20 f8 f2 	      jsr	plotsprite
   1892  80ca		       a9 10		      lda	#(0|title00_width_twoscompliment)
   1893  80cc		       85 44		      sta	temp3
   1894  80ce
   1895  80ce		       a9 20		      lda	#32
   1896  80d0		       18		      clc
   1897  80d1		       69 40		      adc	#64
   1898  80d3		       85 45		      sta	temp4
   1899  80d5
   1900  80d5		       a9 32		      lda	#50
   1901  80d7
   1902  80d7		       85 46		      sta	temp5
   1903  80d9
   1904  80d9		       a9 c0		      lda	#(title00_mode|%01000000)
   1905  80db		       85 47		      sta	temp6
   1906  80dd
   1907  80dd		       a9 71		      lda	#<(title00 + 32)
   1908  80df		       85 42		      sta	temp1
   1909  80e1
   1910  80e1		       a9 a0		      lda	#>(title00 + 32)
   1911  80e3		       85 43		      sta	temp2
   1912  80e5
   1913  80e5		       20 f8 f2 	      jsr	plotsprite
   1914  80e8		       18		      clc
   1915  80e9		       a9 10		      lda	#16
   1916  80eb		       65 46		      adc	temp5
   1917  80ed		       85 46		      sta	temp5
   1918  80ef		       a9 a1		      lda	#<(title01 + 32)
   1919  80f1		       85 42		      sta	temp1
   1920  80f3
   1921  80f3		       a9 a0		      lda	#>(title01 + 32)
   1922  80f5		       85 43		      sta	temp2
   1923  80f7
   1924  80f7		       20 f8 f2 	      jsr	plotsprite
   1925  80fa				   .
   1926  80fa							;; 
   1927  80fa
   1928  80fa				   .L063		;;  plotchars 'quantum^lay^over' 3 47 6
   1929  80fa
   1930  80fa		       4c 0d 81 	      JMP	skipalphadata0
   1931  80fd				   alphadata0
   1932  80fd		       1a		      .byte.b	(<font + $1a)
   1933  80fe		       1e		      .byte.b	(<font + $1e)
   1934  80ff		       0a		      .byte.b	(<font + $0a)
   1935  8100		       17		      .byte.b	(<font + $17)
   1936  8101		       1d		      .byte.b	(<font + $1d)
   1937  8102		       1e		      .byte.b	(<font + $1e)
   1938  8103		       16		      .byte.b	(<font + $16)
   1939  8104		       34		      .byte.b	(<font + $34)
   1940  8105		       15		      .byte.b	(<font + $15)
   1941  8106		       0a		      .byte.b	(<font + $0a)
   1942  8107		       22		      .byte.b	(<font + $22)
   1943  8108		       34		      .byte.b	(<font + $34)
   1944  8109		       18		      .byte.b	(<font + $18)
   1945  810a		       1f		      .byte.b	(<font + $1f)
   1946  810b		       0e		      .byte.b	(<font + $0e)
   1947  810c		       1b		      .byte.b	(<font + $1b)
   1948  810d				   skipalphadata0
   1949  810d		       a9 10		      lda	#16	; width in two's complement
   1950  810f		       09 60		      ora	#96	; palette left shifted 5 bits
   1951  8111		       85 44		      sta	temp3
   1952  8113		       a9 fd		      lda	#<alphadata0
   1953  8115		       85 42		      sta	temp1
   1954  8117
   1955  8117		       a9 80		      lda	#>alphadata0
   1956  8119		       85 43		      sta	temp2
   1957  811b
   1958  811b		       a9 2f		      lda	#47
   1959  811d		       85 45		      sta	temp4
   1960  811f
   1961  811f		       a9 06		      lda	#6
   1962  8121
   1963  8121		       85 46		      sta	temp5
   1964  8123
   1965  8123		       20 bb f3 	      jsr	plotcharacters
   1966  8126				   .L064		;;  plotchars 'fire^to^start' 2 54 10
   1967  8126
   1968  8126		       4c 36 81 	      JMP	skipalphadata1
   1969  8129				   alphadata1
   1970  8129		       0f		      .byte.b	(<font + $0f)
   1971  812a		       12		      .byte.b	(<font + $12)
   1972  812b		       1b		      .byte.b	(<font + $1b)
   1973  812c		       0e		      .byte.b	(<font + $0e)
   1974  812d		       34		      .byte.b	(<font + $34)
   1975  812e		       1d		      .byte.b	(<font + $1d)
   1976  812f		       18		      .byte.b	(<font + $18)
   1977  8130		       34		      .byte.b	(<font + $34)
   1978  8131		       1c		      .byte.b	(<font + $1c)
   1979  8132		       1d		      .byte.b	(<font + $1d)
   1980  8133		       0a		      .byte.b	(<font + $0a)
   1981  8134		       1b		      .byte.b	(<font + $1b)
   1982  8135		       1d		      .byte.b	(<font + $1d)
   1983  8136				   skipalphadata1
   1984  8136		       a9 13		      lda	#19	; width in two's complement
   1985  8138		       09 40		      ora	#64	; palette left shifted 5 bits
   1986  813a		       85 44		      sta	temp3
   1987  813c		       a9 29		      lda	#<alphadata1
   1988  813e		       85 42		      sta	temp1
   1989  8140
   1990  8140		       a9 81		      lda	#>alphadata1
   1991  8142		       85 43		      sta	temp2
   1992  8144
   1993  8144		       a9 36		      lda	#54
   1994  8146		       85 45		      sta	temp4
   1995  8148
   1996  8148		       a9 0a		      lda	#10
   1997  814a
   1998  814a		       85 46		      sta	temp5
   1999  814c
   2000  814c		       20 bb f3 	      jsr	plotcharacters
   2001  814f				   .L065		;;  if joy0fire0  ||  joy0fire1 then goto _initGame
   2002  814f
   2003  814f		       2c 02 21 	      bit	sINPT1
   2004  8152		       50 03		      bvc	.skipL065
   2005  8154				   .condpart0
   2006  8154		       4c 5c 81 	      jmp	.condpart1
   2007  8157				   .skipL065
   2008  8157		       2c 02 21 	      bit	sINPT1
   2009  815a		       10 03		      bpl	.skip0OR
   2010  815c				   .condpart1
   2011  815c		       4c 7a 81 	      jmp	._initGame
   2012  815f
   2013  815f				   .skip0OR
   2014  815f				   .
   2015  815f							;; 
   2016  815f
   2017  815f				   .L066		;;  randomSeed  =  randomSeed	+  1
   2018  815f
   2019  815f		       20 6d f4 	      jsr	randomize
   2020  8162		       18		      CLC
   2021  8163		       69 01		      ADC	#1
   2022  8165		       8d 4d 01 	      sta	randomSeed
   2023  8168				   .L067		;;  if randomSeed  >  254 then randomSeed  =  1
   2024  8168
   2025  8168		       a9 fe		      lda	#254
   2026  816a		       cd 4d 01 	      cmp	randomSeed
   2027  816d		       b0 05		      bcs	.skipL067
   2028  816f				   .condpart2
   2029  816f		       a9 01		      lda	#1
   2030  8171		       8d 4d 01 	      sta	randomSeed
   2031  8174				   .skipL067
   2032  8174				   .
   2033  8174							;; 
   2034  8174
   2035  8174				   .L068		;;  drawscreen
   2036  8174
   2037  8174		       20 c3 f0 	      jsr	drawscreen
   2038  8177				   .
   2039  8177							;; 
   2040  8177
   2041  8177				   .L069		;;  goto _titleLoop
   2042  8177
   2043  8177		       4c 9a 80 	      jmp	._titleLoop
   2044  817a
   2045  817a				   .
   2046  817a							;; 
   2047  817a
   2048  817a				   .
   2049  817a							;; 
   2050  817a
   2051  817a				   ._initGame
   2052  817a							;; _initGame
   2053  817a
   2054  817a				   .
   2055  817a							;; 
   2056  817a
   2057  817a				   .L070		;;  lives  =  3
   2058  817a
   2059  817a		       a9 03		      lda	#3
   2060  817c		       8d 43 01 	      sta	lives
   2061  817f				   .L071		;;  score0  =	0
   2062  817f
   2063  817f		       a9 00		      lda	#$00
   2064  8181		       8d a8 01 	      sta	score0+2
   2065  8184		       a9 00		      lda	#$00
   2066  8186		       8d a7 01 	      sta	score0+1
   2067  8189		       a9 00		      lda	#$00
   2068  818b		       8d a6 01 	      sta	score0
   2069  818e				   .L072		;;  BACKGRND = $00
   2070  818e
   2071  818e		       a9 00		      lda	#$00
   2072  8190		       85 20		      sta	BACKGRND
   2073  8192				   .L073		;;  playerX  =  70
   2074  8192
   2075  8192		       a9 46		      lda	#70
   2076  8194		       8d 45 01 	      sta	playerX
   2077  8197				   .L074		;;  playerY  =  90
   2078  8197
   2079  8197		       a9 5a		      lda	#90
   2080  8199		       8d 46 01 	      sta	playerY
   2081  819c				   .L075		;;  playerAnimFrame  =  0
   2082  819c
   2083  819c		       a9 00		      lda	#0
   2084  819e		       8d 47 01 	      sta	playerAnimFrame
   2085  81a1				   .L076		;;  playerAnimWait  =	0
   2086  81a1
   2087  81a1		       a9 00		      lda	#0
   2088  81a3		       8d 48 01 	      sta	playerAnimWait
   2089  81a6				   .
   2090  81a6							;; 
   2091  81a6
   2092  81a6				   .L077		;;  rand  =  randomSeed
   2093  81a6
   2094  81a6		       20 6d f4 	      jsr	randomize
   2095  81a9		       85 40		      sta	rand
   2096  81ab				   .
   2097  81ab							;; 
   2098  81ab
   2099  81ab				   .L078		;;  gosub _randomOrb
   2100  81ab
   2101  81ab		       20 4c 83 	      jsr	._randomOrb
   2102  81ae
   2103  81ae				   .
   2104  81ae							;; 
   2105  81ae
   2106  81ae				   .L079		;;  orbAnimFrame  =  0
   2107  81ae
   2108  81ae		       a9 00		      lda	#0
   2109  81b0		       8d 4b 01 	      sta	orbAnimFrame
   2110  81b3				   .L080		;;  orbAnimWait  =  0
   2111  81b3
   2112  81b3		       a9 00		      lda	#0
   2113  81b5		       8d 4c 01 	      sta	orbAnimWait
   2114  81b8				   .
   2115  81b8							;; 
   2116  81b8
   2117  81b8				   .L081		;;  rem pallette 0 text
   2118  81b8
   2119  81b8				   .L082		;;  P0C1 = $0F
   2120  81b8
   2121  81b8		       a9 0f		      lda	#$0F
   2122  81ba		       85 21		      sta	P0C1
   2123  81bc				   .L083		;;  P0C2 = $0C
   2124  81bc
   2125  81bc		       a9 0c		      lda	#$0C
   2126  81be		       85 22		      sta	P0C2
   2127  81c0				   .L084		;;  P0C3 = $0A
   2128  81c0
   2129  81c0		       a9 0a		      lda	#$0A
   2130  81c2		       85 23		      sta	P0C3
   2131  81c4				   .
   2132  81c4							;; 
   2133  81c4
   2134  81c4				   .L085		;;  rem pallette 1 player
   2135  81c4
   2136  81c4				   .L086		;;  P1C1  =  $0D
   2137  81c4
   2138  81c4		       a9 0d		      lda	#$0D
   2139  81c6		       85 25		      sta	P1C1
   2140  81c8				   .L087		;;  P1C2  =  $08
   2141  81c8
   2142  81c8		       a9 08		      lda	#$08
   2143  81ca		       85 26		      sta	P1C2
   2144  81cc				   .L088		;;  P1C3  =  $33
   2145  81cc
   2146  81cc		       a9 33		      lda	#$33
   2147  81ce		       85 27		      sta	P1C3
   2148  81d0				   .
   2149  81d0							;; 
   2150  81d0
   2151  81d0				   .L089		;;  rem orb colors
   2152  81d0
   2153  81d0				   .
   2154  81d0							;; 
   2155  81d0
   2156  81d0				   .L090		;;  P2C1  =  $92
   2157  81d0
   2158  81d0		       a9 92		      lda	#$92
   2159  81d2		       85 29		      sta	P2C1
   2160  81d4				   .L091		;;  P2C2  =  $94
   2161  81d4
   2162  81d4		       a9 94		      lda	#$94
   2163  81d6		       85 2a		      sta	P2C2
   2164  81d8				   .L092		;;  P2C3  =  $99
   2165  81d8
   2166  81d8		       a9 99		      lda	#$99
   2167  81da		       85 2b		      sta	P2C3
   2168  81dc				   .
   2169  81dc							;; 
   2170  81dc
   2171  81dc				   .
   2172  81dc							;; 
   2173  81dc
   2174  81dc				   ._gameLoop
   2175  81dc							;; _gameLoop
   2176  81dc
   2177  81dc				   .
   2178  81dc							;; 
   2179  81dc
   2180  81dc				   .L093		;;  clearscreen
   2181  81dc
   2182  81dc		       20 87 f0 	      jsr	clearscreen
   2183  81df				   .
   2184  81df							;; 
   2185  81df
   2186  81df				   .L094		;;  plotsprite orb1 2 orbX orbY orbAnimFrame
   2187  81df
   2188  81df		       a9 45		      lda	#<orb1
   2189  81e1		       a0 02		      ldy	#orb1_width
   2190  81e3		       f0 07		      beq	plotspritewidthskip2
   2191  81e5				   plotspritewidthloop2
   2192  81e5		       18		      clc
   2193  81e6		       6d 4b 01 	      adc	orbAnimFrame
   2194  81e9		       88		      dey
   2195  81ea		       d0 f9		      bne	plotspritewidthloop2
   2196  81ec				   plotspritewidthskip2
   2197  81ec		       85 42		      sta	temp1
   2198  81ee
   2199  81ee		       a9 a0		      lda	#>orb1
   2200  81f0		       85 43		      sta	temp2
   2201  81f2
   2202  81f2		       a9 5e		      lda	#(64|orb1_width_twoscompliment)
   2203  81f4		       85 44		      sta	temp3
   2204  81f6
   2205  81f6		       ad 49 01 	      lda	orbX
   2206  81f9		       85 45		      sta	temp4
   2207  81fb
   2208  81fb		       ad 4a 01 	      lda	orbY
   2209  81fe		       85 46		      sta	temp5
   2210  8200
   2211  8200		       a9 40		      lda	#(orb1_mode|%01000000)
   2212  8202		       85 47		      sta	temp6
   2213  8204
   2214  8204		       20 f8 f2 	      jsr	plotsprite
   2215  8207				   .L095		;;  orbAnimWait  =  orbAnimWait  + 1
   2216  8207
   2217  8207		       ad 4c 01 	      lda	orbAnimWait
   2218  820a		       18		      CLC
   2219  820b		       69 01		      ADC	#1
   2220  820d		       8d 4c 01 	      sta	orbAnimWait
   2221  8210				   .L096		;;  if orbAnimWait  >	1 then orbAnimFrame  =	orbAnimFrame  +  1  :  orbAnimWait  =  0
   2222  8210
   2223  8210		       a9 01		      lda	#1
   2224  8212		       cd 4c 01 	      cmp	orbAnimWait
   2225  8215		       b0 0e		      bcs	.skipL096
   2226  8217				   .condpart3
   2227  8217		       ad 4b 01 	      lda	orbAnimFrame
   2228  821a		       18		      CLC
   2229  821b		       69 01		      ADC	#1
   2230  821d		       8d 4b 01 	      sta	orbAnimFrame
   2231  8220		       a9 00		      lda	#0
   2232  8222		       8d 4c 01 	      sta	orbAnimWait
   2233  8225				   .skipL096
   2234  8225				   .L097		;;  if orbAnimFrame  >  5 then orbAnimFrame  =  0
   2235  8225
   2236  8225		       a9 05		      lda	#5
   2237  8227		       cd 4b 01 	      cmp	orbAnimFrame
   2238  822a		       b0 05		      bcs	.skipL097
   2239  822c				   .condpart4
   2240  822c		       a9 00		      lda	#0
   2241  822e		       8d 4b 01 	      sta	orbAnimFrame
   2242  8231				   .skipL097
   2243  8231				   .
   2244  8231							;; 
   2245  8231
   2246  8231				   .
   2247  8231							;; 
   2248  8231
   2249  8231				   .L098		;;  plotsprite player1 1 playerX playerY playerAnimFrame
   2250  8231
   2251  8231		       a9 35		      lda	#<player1
   2252  8233		       a0 04		      ldy	#player1_width
   2253  8235		       f0 07		      beq	plotspritewidthskip3
   2254  8237				   plotspritewidthloop3
   2255  8237		       18		      clc
   2256  8238		       6d 47 01 	      adc	playerAnimFrame
   2257  823b		       88		      dey
   2258  823c		       d0 f9		      bne	plotspritewidthloop3
   2259  823e				   plotspritewidthskip3
   2260  823e		       85 42		      sta	temp1
   2261  8240
   2262  8240		       a9 a0		      lda	#>player1
   2263  8242		       85 43		      sta	temp2
   2264  8244
   2265  8244		       a9 3c		      lda	#(32|player1_width_twoscompliment)
   2266  8246		       85 44		      sta	temp3
   2267  8248
   2268  8248		       ad 45 01 	      lda	playerX
   2269  824b		       85 45		      sta	temp4
   2270  824d
   2271  824d		       ad 46 01 	      lda	playerY
   2272  8250		       85 46		      sta	temp5
   2273  8252
   2274  8252		       a9 40		      lda	#(player1_mode|%01000000)
   2275  8254		       85 47		      sta	temp6
   2276  8256
   2277  8256		       20 f8 f2 	      jsr	plotsprite
   2278  8259				   .L099		;;  playerAnimWait  =	playerAnimWait	+ 1
   2279  8259
   2280  8259		       ad 48 01 	      lda	playerAnimWait
   2281  825c		       18		      CLC
   2282  825d		       69 01		      ADC	#1
   2283  825f		       8d 48 01 	      sta	playerAnimWait
   2284  8262				   .L0100		;;  if playerAnimWait	>  2 then playerAnimFrame  =  playerAnimFrame  +  1  :	playerAnimWait	=  0
   2285  8262
   2286  8262		       a9 02		      lda	#2
   2287  8264		       cd 48 01 	      cmp	playerAnimWait
   2288  8267		       b0 0e		      bcs	.skipL0100
   2289  8269				   .condpart5
   2290  8269		       ad 47 01 	      lda	playerAnimFrame
   2291  826c		       18		      CLC
   2292  826d		       69 01		      ADC	#1
   2293  826f		       8d 47 01 	      sta	playerAnimFrame
   2294  8272		       a9 00		      lda	#0
   2295  8274		       8d 48 01 	      sta	playerAnimWait
   2296  8277				   .skipL0100
   2297  8277				   .L0101		;;  if playerAnimFrame  >  3 then playerAnimFrame  =  0
   2298  8277
   2299  8277		       a9 03		      lda	#3
   2300  8279		       cd 47 01 	      cmp	playerAnimFrame
   2301  827c		       b0 05		      bcs	.skipL0101
   2302  827e				   .condpart6
   2303  827e		       a9 00		      lda	#0
   2304  8280		       8d 47 01 	      sta	playerAnimFrame
   2305  8283				   .skipL0101
   2306  8283				   .
   2307  8283							;; 
   2308  8283
   2309  8283				   .L0102		;;  if joy0left then playerX = playerX  -  1
   2310  8283
   2311  8283		       2c 31 21 	      bit	sSWCHA
   2312  8286		       70 09		      bvs	.skipL0102
   2313  8288				   .condpart7
   2314  8288		       ad 45 01 	      lda	playerX
   2315  828b		       38		      SEC
   2316  828c		       e9 01		      SBC	#1
   2317  828e		       8d 45 01 	      sta	playerX
   2318  8291				   .skipL0102
   2319  8291				   .L0103		;;  if joy0right then playerX = playerX  +  1
   2320  8291
   2321  8291		       2c 31 21 	      bit	sSWCHA
   2322  8294		       30 09		      bmi	.skipL0103
   2323  8296				   .condpart8
   2324  8296		       ad 45 01 	      lda	playerX
   2325  8299		       18		      CLC
   2326  829a		       69 01		      ADC	#1
   2327  829c		       8d 45 01 	      sta	playerX
   2328  829f				   .skipL0103
   2329  829f				   .L0104		;;  if joy0up then playerY = playerY  -  1
   2330  829f
   2331  829f		       a9 10		      lda	#$10
   2332  82a1		       2c 31 21 	      bit	sSWCHA
   2333  82a4		       d0 09		      bne	.skipL0104
   2334  82a6				   .condpart9
   2335  82a6		       ad 46 01 	      lda	playerY
   2336  82a9		       38		      SEC
   2337  82aa		       e9 01		      SBC	#1
   2338  82ac		       8d 46 01 	      sta	playerY
   2339  82af				   .skipL0104
   2340  82af				   .L0105		;;  if joy0down then playerY = playerY  +  1
   2341  82af
   2342  82af		       a9 20		      lda	#$20
   2343  82b1		       2c 31 21 	      bit	sSWCHA
   2344  82b4		       d0 09		      bne	.skipL0105
   2345  82b6				   .condpart10
   2346  82b6		       ad 46 01 	      lda	playerY
   2347  82b9		       18		      CLC
   2348  82ba		       69 01		      ADC	#1
   2349  82bc		       8d 46 01 	      sta	playerY
   2350  82bf				   .skipL0105
   2351  82bf				   .
   2352  82bf							;; 
   2353  82bf
   2354  82bf				   .L0106		;;  gosub _testCollisions
   2355  82bf
   2356  82bf		       20 01 83 	      jsr	._testCollisions
   2357  82c2
   2358  82c2				   .
   2359  82c2							;; 
   2360  82c2
   2361  82c2				   .L0107		;;  plotvalue font 1 score0 6 124 0
   2362  82c2
   2363  82c2		       a9 00		      lda	#<font
   2364  82c4		       85 42		      sta	temp1
   2365  82c6
   2366  82c6		       a9 a0		      lda	#>font
   2367  82c8		       85 43		      sta	temp2
   2368  82ca
   2369  82ca		       ad 06 21 	      lda	charactermode
   2370  82cd		       85 4a		      sta	temp9
   2371  82cf		       a9 60		      lda	#(font_mode | %01100000)
   2372  82d1		       8d 06 21 	      sta	charactermode
   2373  82d4		       a9 1a		      lda	#26	; width in two's complement
   2374  82d6		       09 20		      ora	#32	; palette left shifted 5 bits
   2375  82d8		       85 44		      sta	temp3
   2376  82da		       a9 7c		      lda	#124
   2377  82dc		       85 45		      sta	temp4
   2378  82de
   2379  82de		       a9 00		      lda	#0
   2380  82e0		       85 46		      sta	temp5
   2381  82e2
   2382  82e2		       a9 06		      lda	#6
   2383  82e4		       85 47		      sta	temp6
   2384  82e6
   2385  82e6		       a9 a6		      lda	#<score0
   2386  82e8		       85 48		      sta	temp7
   2387  82ea
   2388  82ea		       a9 01		      lda	#>score0
   2389  82ec		       85 49		      sta	temp8
   2390  82ee
   2391  82ee		       20 25 f4 	      jsr	plotvalue
   2392  82ee		       00 01	   USED_PLOTVALUE =	1
   2393  82f1		       a5 4a		      lda	temp9
   2394  82f3		       8d 06 21 	      sta	charactermode
   2395  82f6				   .
   2396  82f6							;; 
   2397  82f6
   2398  82f6				   .L0108		;;  doublebuffer flip 2
   2399  82f6
   2400  82f6		       20 2f f5 	      jsr	flipdisplaybuffer
   2401  82f9		       a9 02		      lda	#2
   2402  82fb		       8d b3 01 	      sta	doublebufferminimumframetarget
   2403  82fe				   .L0109		;;  goto _gameLoop
   2404  82fe
   2405  82fe		       4c dc 81 	      jmp	._gameLoop
   2406  8301
   2407  8301				   .
   2408  8301							;; 
   2409  8301
   2410  8301				   ._testCollisions
   2411  8301							;; _testCollisions
   2412  8301
   2413  8301				   .L0110		;;  if boxcollision ( playerX ,  playerY ,  16 ,  16 ,  orbX ,  orbY ,  8 ,  8 )  then goto _doCollide
   2414  8301
      0  8301					      QBOXCOLLISIONCHECK	playerX,playerY,16,16,orbX,orbY,8,8
      1  8301				   .boxx1     SET	playerX
      2  8301				   .boxy1     SET	playerY
      3  8301				   .boxw1     SET	16
      4  8301				   .boxh1     SET	16
      5  8301				   .boxx2     SET	orbX
      6  8301				   .boxy2     SET	orbY
      7  8301				   .boxw2     SET	8
      8  8301				   .boxh2     SET	8
      9  8301
     10  8301		       ad 49 01 	      lda	.boxx2
     11  8304		       18		      clc
     12  8305		       69 08		      adc	#.boxw2
     13  8307		       ed 45 01 	      sbc	.boxx1
     14  830a		       c9 17		      cmp	#.boxw1+.boxw2-1
     15  830c		       b0 0a		      bcs	.qboxcollisiondone
     16  830e
     17  830e		       ad 4a 01 	      lda	.boxy2
     18  8311		       69 08		      adc	#.boxh2
     19  8313		       ed 46 01 	      sbc	.boxy1
     20  8316		       c9 17		      cmp	#.boxh1+.boxh2-1
     21  8318				   .qboxcollisiondone
     22  8318		       2a		      rol
     23  8319		       49 01		      eor	#1
     24  831b		       6a		      ror
   2416  831c		       90 03		      bcc	.skipL0110
   2417  831e				   .condpart11
   2418  831e		       4c 24 83 	      jmp	._doCollide
   2419  8321
   2420  8321				   .skipL0110
   2421  8321				   .L0111		;;  goto _skipCollide
   2422  8321
   2423  8321		       4c 42 83 	      jmp	._skipCollide
   2424  8324
   2425  8324				   ._doCollide
   2426  8324							;; _doCollide
   2427  8324
   2428  8324				   .L0112		;;  score0  =	score0	+  10
   2429  8324
   2430  8324		       f8		      sed
   2431  8325		       18		      clc
   2432  8326		       ad a8 01 	      lda	score0+2
   2433  8329		       69 10		      adc	#$10
   2434  832b		       8d a8 01 	      sta	score0+2
   2435  832e		       ad a7 01 	      lda	score0+1
   2436  8331		       69 00		      adc	#$00
   2437  8333		       8d a7 01 	      sta	score0+1
   2438  8336		       ad a6 01 	      lda	score0
   2439  8339		       69 00		      adc	#$00
   2440  833b		       8d a6 01 	      sta	score0
   2441  833e		       d8		      cld
   2442  833f				   .L0113		;;  gosub _randomOrb
   2443  833f
   2444  833f		       20 4c 83 	      jsr	._randomOrb
   2445  8342
   2446  8342				   ._skipCollide
   2447  8342							;; _skipCollide
   2448  8342
   2449  8342				   .
   2450  8342							;; 
   2451  8342
   2452  8342				   .L0114		;;  return
   2453  8342
   2454  8342		       ba		      tsx
   2455  8343		       bd 02 01 	      lda	$102,x
   2456  8346		       f0 01		      beq	bankswitchret5
   2457  8348		       60		      rts
   2458  8349				   bankswitchret5
   2459  8349		       4c 82 f4 	      jmp	BS_return
   2460  834c				   .
   2461  834c							;; 
   2462  834c
   2463  834c				   ._randomOrb
   2464  834c							;; _randomOrb
   2465  834c
   2466  834c				   .L0115		;;  orbX  =  rand
   2467  834c
   2468  834c		       20 6d f4 	      jsr	randomize
   2469  834f		       8d 49 01 	      sta	orbX
   2470  8352				   .L0116		;;  orbY  =  rand
   2471  8352
   2472  8352		       20 6d f4 	      jsr	randomize
   2473  8355		       8d 4a 01 	      sta	orbY
   2474  8358				   .L0117		;;  if orbX  >  151 then orbX	=  151
   2475  8358
   2476  8358		       a9 97		      lda	#151
   2477  835a		       cd 49 01 	      cmp	orbX
   2478  835d		       b0 05		      bcs	.skipL0117
   2479  835f				   .condpart12
   2480  835f		       a9 97		      lda	#151
   2481  8361		       8d 49 01 	      sta	orbX
   2482  8364				   .skipL0117
   2483  8364				   .L0118		;;  if orbY  >  183 then orbY	=  183
   2484  8364
   2485  8364		       a9 b7		      lda	#183
   2486  8366		       cd 4a 01 	      cmp	orbY
   2487  8369		       b0 05		      bcs	.skipL0118
   2488  836b				   .condpart13
   2489  836b		       a9 b7		      lda	#183
   2490  836d		       8d 4a 01 	      sta	orbY
   2491  8370				   .skipL0118
   2492  8370				   .L0119		;;  return
   2493  8370
   2494  8370		       ba		      tsx
   2495  8371		       bd 02 01 	      lda	$102,x
   2496  8374		       f0 01		      beq	bankswitchret6
   2497  8376		       60		      rts
   2498  8377				   bankswitchret6
   2499  8377		       4c 82 f4 	      jmp	BS_return
   2500  837a				   .
   2501  837a							;; 
   2502  837a
   2503  837a				   DMAHOLEEND0 SET	.
   2504  837a				   gameend
   2505  837a				   DMAHOLEEND0 SET	.
   7302 bytes of ROM space left in the main area of bank 1.
   2506  837a					      echo	" ",[($A000 - .)]d , "bytes of ROM space left in the main area of bank 1."
   2507  837a				  -	      if	($A000 - .) < 0
   2508  837a				  -SPACEOVERFLOW SET	(SPACEOVERFLOW+1)
   2509  837a					      endif
   2510  837a				  -	      if	START_OF_ROM = .	; avoid dasm empty start-rom truncation.
   2511  837a				  -	      .byte	0
   2512  837a					      endif
   2513  837a				   START_OF_ROM SET	0	; scuttle so we always fail subsequent banks
   2514  837a
   2515  a000					      ORG	$A000,0	; *************
   2516  a000
   2517  a000					      RORG	$A000	; *************
   2518  a000
   2519  a000		       a0 00	   font       =	$A000
   2520  a000
   2521  a000				   font
   2522  a000		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000000000000000000000000000
   2523  a020		       00 00 00 00*	      HEX	000000000000000000000000000000000000000000
   2524  a020		       a0 35	   player1    =	$A035
   2525  a035
   2526  a035				   player1
   2527  a035		       00 00 00 00	      HEX	00000000
   2528  a035		       a0 39	   player2    =	$A039
   2529  a039
   2530  a039				   player2
   2531  a039		       00 00 00 00	      HEX	00000000
   2532  a039		       a0 3d	   player3    =	$A03D
   2533  a03d
   2534  a03d				   player3
   2535  a03d		       00 00 00 00	      HEX	00000000
   2536  a03d		       a0 41	   player4    =	$A041
   2537  a041
   2538  a041				   player4
   2539  a041		       00 00 00 00	      HEX	00000000
   2540  a041		       a0 45	   orb1       =	$A045
   2541  a045
   2542  a045				   orb1
   2543  a045		       00 00		      HEX	0000
   2544  a045		       a0 47	   orb2       =	$A047
   2545  a047
   2546  a047				   orb2
   2547  a047		       00 00		      HEX	0000
   2548  a047		       a0 49	   orb3       =	$A049
   2549  a049
   2550  a049				   orb3
   2551  a049		       00 00		      HEX	0000
   2552  a049		       a0 4b	   orb4       =	$A04B
   2553  a04b
   2554  a04b				   orb4
   2555  a04b		       00 00		      HEX	0000
   2556  a04b		       a0 4d	   orb5       =	$A04D
   2557  a04d
   2558  a04d				   orb5
   2559  a04d		       00 00		      HEX	0000
   2560  a04d		       a0 4f	   orb6       =	$A04F
   2561  a04f
   2562  a04f				   orb6
   2563  a04f		       00 00		      HEX	0000
   2564  a04f		       a0 51	   title00    =	$A051
   2565  a051
   2566  a051				   title00
   2567  a051		       f0 f0 f0 c0*	      HEX	f0f0f0c000000000000030f0f0f0000000000030f0f0c0000030f0f0c0000000
   2568  a071		       00 00 f0 f0*	      HEX	0000f0f0f0f0f0f0f0f0f0f0f0f0f0c0
   2569  a071		       a0 81	   title01    =	$A081
   2570  a081
   2571  a081				   title01
   2572  a081		       00 00 55 55*	      HEX	0000555555555555555555550000115500555555440000000000001155555500
   2573  a0a1		       55 44 55 55*	      HEX	55445555554400000000000000005544
   2574  a0b1
   2575  a100					      ORG	$A100,0	; *************
   2576  a100
   2577  a100					      RORG	$A100	; *************
   2578  a100
   2579  a100							;font
   2580  a100		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000000000000000000000000000
   2581  a120		       00 00 00 00*	      HEX	000000000000000000000000000000000000000000
   2582  a135							;player1
   2583  a135		       00 00 00 00	      HEX	00000000
   2584  a139							;player2
   2585  a139		       00 00 00 00	      HEX	00000000
   2586  a13d							;player3
   2587  a13d		       00 00 00 00	      HEX	00000000
   2588  a141							;player4
   2589  a141		       00 00 00 00	      HEX	00000000
   2590  a145							;orb1
   2591  a145		       00 00		      HEX	0000
   2592  a147							;orb2
   2593  a147		       00 00		      HEX	0000
   2594  a149							;orb3
   2595  a149		       00 00		      HEX	0000
   2596  a14b							;orb4
   2597  a14b		       00 00		      HEX	0000
   2598  a14d							;orb5
   2599  a14d		       00 00		      HEX	0000
   2600  a14f							;orb6
   2601  a14f		       00 00		      HEX	0000
   2602  a151							;title00
   2603  a151		       50 50 50 50*	      HEX	5050505050505050505050505050505050505050505050505050505050505050
   2604  a171		       50 50 50 50*	      HEX	50505050505050505050505050505050
   2605  a181							;title01
   2606  a181		       00 55 55 55*	      HEX	0055555555555555555555550000115500555555550000000000005555555500
   2607  a1a1		       55 44 55 55*	      HEX	55445555554400000000000000005544
   2608  a1b1
   2609  a200					      ORG	$A200,0	; *************
   2610  a200
   2611  a200					      RORG	$A200	; *************
   2612  a200
   2613  a200							;font
   2614  a200		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000000000000000000000000000
   2615  a220		       00 00 00 00*	      HEX	000000000000000000000000000000000000000000
   2616  a235							;player1
   2617  a235		       00 00 00 00	      HEX	00000000
   2618  a239							;player2
   2619  a239		       00 00 00 00	      HEX	00000000
   2620  a23d							;player3
   2621  a23d		       00 00 00 00	      HEX	00000000
   2622  a241							;player4
   2623  a241		       00 00 00 00	      HEX	00000000
   2624  a245							;orb1
   2625  a245		       00 00		      HEX	0000
   2626  a247							;orb2
   2627  a247		       00 00		      HEX	0000
   2628  a249							;orb3
   2629  a249		       00 00		      HEX	0000
   2630  a24b							;orb4
   2631  a24b		       00 00		      HEX	0000
   2632  a24d							;orb5
   2633  a24d		       00 00		      HEX	0000
   2634  a24f							;orb6
   2635  a24f		       00 00		      HEX	0000
   2636  a251							;title00
   2637  a251		       5f 5f 5f 4c*	      HEX	5f5f5f4c000000000000135f5f5f0000000000005f5f5f00005f5f5f00000000
   2638  a271		       00 00 5f 5f*	      HEX	00005f5f5f4c000000000000135f5f5f
   2639  a281							;title01
   2640  a281		       50 50 50 50*	      HEX	5050505050505050505050505050505050505050505050505050505050505050
   2641  a2a1		       50 50 50 50*	      HEX	50505050505050505050505050505050
   2642  a2b1
   2643  a300					      ORG	$A300,0	; *************
   2644  a300
   2645  a300					      RORG	$A300	; *************
   2646  a300
   2647  a300							;font
   2648  a300		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000000000000000000000000000
   2649  a320		       00 00 00 00*	      HEX	000000000000000000000000000000000000000000
   2650  a335							;player1
   2651  a335		       00 00 00 00	      HEX	00000000
   2652  a339							;player2
   2653  a339		       00 00 00 00	      HEX	00000000
   2654  a33d							;player3
   2655  a33d		       00 00 00 00	      HEX	00000000
   2656  a341							;player4
   2657  a341		       00 00 00 00	      HEX	00000000
   2658  a345							;orb1
   2659  a345		       00 00		      HEX	0000
   2660  a347							;orb2
   2661  a347		       00 00		      HEX	0000
   2662  a349							;orb3
   2663  a349		       00 00		      HEX	0000
   2664  a34b							;orb4
   2665  a34b		       00 00		      HEX	0000
   2666  a34d							;orb5
   2667  a34d		       00 00		      HEX	0000
   2668  a34f							;orb6
   2669  a34f		       00 00		      HEX	0000
   2670  a351							;title00
   2671  a351		       5f 5f 5f 4c*	      HEX	5f5f5f4c000000000000135f5f5f0000000000005f5f5f00005f5f5f00000000
   2672  a371		       00 00 5f 5f*	      HEX	00005f5f5f4c000000000000005f5f5f
   2673  a381							;title01
   2674  a381		       31 f5 f5 f5*	      HEX	31f5f5f5f5f5f5f5f5f5f5f5f5c400000031f5f5f5c40000000031f5f5f5c400
   2675  a3a1		       00 00 f5 f5*	      HEX	0000f5f5f5c400000000000000000000
   2676  a3b1
   2677  a400					      ORG	$A400,0	; *************
   2678  a400
   2679  a400					      RORG	$A400	; *************
   2680  a400
   2681  a400							;font
   2682  a400		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000000000000000000000000000
   2683  a420		       00 00 00 00*	      HEX	000000000000000000000000000000000000000000
   2684  a435							;player1
   2685  a435		       00 00 00 00	      HEX	00000000
   2686  a439							;player2
   2687  a439		       00 00 00 00	      HEX	00000000
   2688  a43d							;player3
   2689  a43d		       00 00 00 00	      HEX	00000000
   2690  a441							;player4
   2691  a441		       00 00 00 00	      HEX	00000000
   2692  a445							;orb1
   2693  a445		       00 00		      HEX	0000
   2694  a447							;orb2
   2695  a447		       00 00		      HEX	0000
   2696  a449							;orb3
   2697  a449		       00 00		      HEX	0000
   2698  a44b							;orb4
   2699  a44b		       00 00		      HEX	0000
   2700  a44d							;orb5
   2701  a44d		       00 00		      HEX	0000
   2702  a44f							;orb6
   2703  a44f		       00 00		      HEX	0000
   2704  a451							;title00
   2705  a451		       50 50 50 50*	      HEX	5050505050505050505050505050505050505050505050505050505050505050
   2706  a471		       50 50 50 50*	      HEX	50505050505050505050505050505050
   2707  a481							;title01
   2708  a481		       f5 f5 f5 f5*	      HEX	f5f5f5f5f5f5f5f5f5f5f5f5f5f500000031f5f5f5c40000000031f5f5f5c400
   2709  a4a1		       00 00 f5 f5*	      HEX	0000f5f5f5c400000000000000000000
   2710  a4b1
   2711  a500					      ORG	$A500,0	; *************
   2712  a500
   2713  a500					      RORG	$A500	; *************
   2714  a500
   2715  a500							;font
   2716  a500		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000000000000000000000000000
   2717  a520		       00 00 00 00*	      HEX	000000000000000000000000000000000000000000
   2718  a535							;player1
   2719  a535		       00 00 00 00	      HEX	00000000
   2720  a539							;player2
   2721  a539		       00 00 00 00	      HEX	00000000
   2722  a53d							;player3
   2723  a53d		       00 00 00 00	      HEX	00000000
   2724  a541							;player4
   2725  a541		       00 00 00 00	      HEX	00000000
   2726  a545							;orb1
   2727  a545		       00 00		      HEX	0000
   2728  a547							;orb2
   2729  a547		       00 00		      HEX	0000
   2730  a549							;orb3
   2731  a549		       00 00		      HEX	0000
   2732  a54b							;orb4
   2733  a54b		       00 00		      HEX	0000
   2734  a54d							;orb5
   2735  a54d		       00 00		      HEX	0000
   2736  a54f							;orb6
   2737  a54f		       00 00		      HEX	0000
   2738  a551							;title00
   2739  a551		       ff ff ff cc*	      HEX	ffffffcc00000000000033ffffff00000000000033ffffcc33ffffcc00000000
   2740  a571		       00 00 ff ff*	      HEX	0000ffffffcc0000000000000033ffff
   2741  a581							;title01
   2742  a581		       50 50 50 50*	      HEX	5050505050505050505050505050505050505050505050505050505050505050
   2743  a5a1		       50 50 50 50*	      HEX	50505050505050505050505050505050
   2744  a5b1
   2745  a600					      ORG	$A600,0	; *************
   2746  a600
   2747  a600					      RORG	$A600	; *************
   2748  a600
   2749  a600							;font
   2750  a600		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000000000000000000000000000
   2751  a620		       00 00 00 00*	      HEX	000000000000000000000000000000000000000000
   2752  a635							;player1
   2753  a635		       00 00 00 00	      HEX	00000000
   2754  a639							;player2
   2755  a639		       00 00 00 00	      HEX	00000000
   2756  a63d							;player3
   2757  a63d		       00 00 00 00	      HEX	00000000
   2758  a641							;player4
   2759  a641		       00 00 00 00	      HEX	00000000
   2760  a645							;orb1
   2761  a645		       00 00		      HEX	0000
   2762  a647							;orb2
   2763  a647		       00 00		      HEX	0000
   2764  a649							;orb3
   2765  a649		       00 00		      HEX	0000
   2766  a64b							;orb4
   2767  a64b		       00 00		      HEX	0000
   2768  a64d							;orb5
   2769  a64d		       00 00		      HEX	0000
   2770  a64f							;orb6
   2771  a64f		       00 00		      HEX	0000
   2772  a651							;title00
   2773  a651		       ff ff ff cc*	      HEX	ffffffcc00000000000033ffffff00000000000033ffffffffffffcc00000000
   2774  a671		       00 00 ff ff*	      HEX	0000ffffffcc0000000000000033ffff
   2775  a681							;title01
   2776  a681		       aa aa aa aa*	      HEX	aaaaaaaaaa00000000aaaaaaaaaa00000000aaaaaaaa00000000aaaaaaaa0000
   2777  a6a1		       00 00 aa aa*	      HEX	0000aaaaaa8800000000000000000000
   2778  a6b1
   2779  a700					      ORG	$A700,0	; *************
   2780  a700
   2781  a700					      RORG	$A700	; *************
   2782  a700
   2783  a700							;font
   2784  a700		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000000000000000000000000000
   2785  a720		       00 00 00 00*	      HEX	000000000000000000000000000000000000000000
   2786  a735							;player1
   2787  a735		       0f 57 d4 00	      HEX	0f57d400
   2788  a739							;player2
   2789  a739		       07 d5 f4 00	      HEX	07d5f400
   2790  a73d							;player3
   2791  a73d		       05 f5 7c 00	      HEX	05f57c00
   2792  a741							;player4
   2793  a741		       0d 7d 5c 00	      HEX	0d7d5c00
   2794  a745							;orb1
   2795  a745		       00 00		      HEX	0000
   2796  a747							;orb2
   2797  a747		       00 00		      HEX	0000
   2798  a749							;orb3
   2799  a749		       00 00		      HEX	0000
   2800  a74b							;orb4
   2801  a74b		       00 00		      HEX	0000
   2802  a74d							;orb5
   2803  a74d		       00 00		      HEX	0000
   2804  a74f							;orb6
   2805  a74f		       00 00		      HEX	0000
   2806  a751							;title00
   2807  a751		       50 50 50 50*	      HEX	5050505050505050505050505050505050505050505050505050505050505050
   2808  a771		       50 50 50 50*	      HEX	50505050505050505050505050505050
   2809  a781							;title01
   2810  a781		       aa aa aa aa*	      HEX	aaaaaaaa000000000000aaaaaaaa00000000aaaaaaaa00000000aaaaaaaa0000
   2811  a7a1		       00 00 aa aa*	      HEX	0000aaaaaa8800000000000000000000
   2812  a7b1
   2813  a800					      ORG	$A800,0	; *************
   2814  a800
   2815  a800					      RORG	$A800	; *************
   2816  a800
   2817  a800							;font
   2818  a800		       00 00 00 00*	      HEX	0000000000000000000000000000000000000000000000000000000000000000
   2819  a820		       00 00 00 00*	      HEX	000000000000000000004000540000000000000000
   2820  a835							;player1
   2821  a835		       15 55 55 00	      HEX	15555500
   2822  a839							;player2
   2823  a839		       15 55 55 00	      HEX	15555500
   2824  a83d							;player3
   2825  a83d		       15 55 55 00	      HEX	15555500
   2826  a841							;player4
   2827  a841		       15 55 55 00	      HEX	15555500
   2828  a845							;orb1
   2829  a845		       0b e0		      HEX	0be0
   2830  a847							;orb2
   2831  a847		       0f 70		      HEX	0f70
   2832  a849							;orb3
   2833  a849		       0e f0		      HEX	0ef0
   2834  a84b							;orb4
   2835  a84b		       0b e0		      HEX	0be0
   2836  a84d							;orb5
   2837  a84d		       0f b0		      HEX	0fb0
   2838  a84f							;orb6
   2839  a84f		       0d f0		      HEX	0df0
   2840  a851							;title00
   2841  a851		       af af af 8c*	      HEX	afafaf8c00000000000023afafaf00000000000000afafafafafaf0000000000
   2842  a871		       00 00 af af*	      HEX	0000afafaf8c00000000000000afafaf
   2843  a881							;title01
   2844  a881		       50 50 50 50*	      HEX	5050505050505050505050505050505050505050505050505050505050505050
   2845  a8a1		       50 50 50 50*	      HEX	50505050505050505050505050505050
   2846  a8b1
   2847  a900					      ORG	$A900,0	; *************
   2848  a900
   2849  a900					      RORG	$A900	; *************
   2850  a900
   2851  a900							;font
   2852  a900		       54 54 54 54*	      HEX	5454545404545410545444505450544054445454445444445440044454105410
   2853  a920		       44 44 10 54*	      HEX	444410544000101040101000000440545414154000
   2854  a935							;player1
   2855  a935		       55 55 55 40	      HEX	55555540
   2856  a939							;player2
   2857  a939		       55 55 55 40	      HEX	55555540
   2858  a93d							;player3
   2859  a93d		       55 55 55 40	      HEX	55555540
   2860  a941							;player4
   2861  a941		       55 55 55 40	      HEX	55555540
   2862  a945							;orb1
   2863  a945		       3f fc		      HEX	3ffc
   2864  a947							;orb2
   2865  a947		       3f fc		      HEX	3ffc
   2866  a949							;orb3
   2867  a949		       3f fc		      HEX	3ffc
   2868  a94b							;orb4
   2869  a94b		       3f fc		      HEX	3ffc
   2870  a94d							;orb5
   2871  a94d		       3f fc		      HEX	3ffc
   2872  a94f							;orb6
   2873  a94f		       3f fc		      HEX	3ffc
   2874  a951							;title00
   2875  a951		       af af af 8c*	      HEX	afafaf8c00000000000023afafaf00000000000000afafafafafaf0000000000
   2876  a971		       00 00 af af*	      HEX	0000afafaf8c00000000000023afafaf
   2877  a981							;title01
   2878  a981		       fa fa fa c8*	      HEX	fafafac800000000000032fafafa0000000032fafafac8000032fafafac80000
   2879  a9a1		       00 00 fa fa*	      HEX	0000fafafac800000000000000000000
   2880  a9b1
   2881  aa00					      ORG	$AA00,0	; *************
   2882  aa00
   2883  aa00					      RORG	$AA00	; *************
   2884  aa00
   2885  aa00							;font
   2886  aa00		       44 10 40 04*	      HEX	4410400404444410440444444044404044441044444044444440504404104454
   2887  aa20		       54 44 10 40*	      HEX	544410405000000040000000001010400441401000
   2888  aa35							;player1
   2889  aa35		       00 00 00 00	      HEX	00000000
   2890  aa39							;player2
   2891  aa39		       00 00 00 00	      HEX	00000000
   2892  aa3d							;player3
   2893  aa3d		       a8 2a 0a 80	      HEX	a82a0a80
   2894  aa41							;player4
   2895  aa41		       00 00 00 00	      HEX	00000000
   2896  aa45							;orb1
   2897  aa45		       b9 6e		      HEX	b96e
   2898  aa47							;orb2
   2899  aa47		       69 fd		      HEX	69fd
   2900  aa49							;orb3
   2901  aa49		       bf fe		      HEX	bffe
   2902  aa4b							;orb4
   2903  aa4b		       bf fe		      HEX	bffe
   2904  aa4d							;orb5
   2905  aa4d		       bf fe		      HEX	bffe
   2906  aa4f							;orb6
   2907  aa4f		       7f 69		      HEX	7f69
   2908  aa51							;title00
   2909  aa51		       50 50 50 50*	      HEX	5050505050505050505050505050505050505050505050505050505050505050
   2910  aa71		       50 50 50 50*	      HEX	50505050505050505050505050505050
   2911  aa81							;title01
   2912  aa81		       fa fa fa c8*	      HEX	fafafac800000000000032fafafa0000000032fafafafafafafafafafac80000
   2913  aaa1		       00 00 fa fa*	      HEX	0000fafafac800000000000000000000
   2914  aab1
   2915  ab00					      ORG	$AB00,0	; *************
   2916  ab00
   2917  ab00					      RORG	$AB00	; *************
   2918  ab00
   2919  ab00							;font
   2920  ab00		       44 10 40 04*	      HEX	4410400404044410440454444044404044441004504044444454445004104444
   2921  ab20		       54 54 10 40*	      HEX	545410405400101010000000004004400441451000
   2922  ab35							;player1
   2923  ab35		       ff ff ff c0	      HEX	ffffffc0
   2924  ab39							;player2
   2925  ab39		       ab ea fa 80	      HEX	abeafa80
   2926  ab3d							;player3
   2927  ab3d		       ff ff ff c0	      HEX	ffffffc0
   2928  ab41							;player4
   2929  ab41		       ff ff ff c0	      HEX	ffffffc0
   2930  ab45							;orb1
   2931  ab45		       f5 5f		      HEX	f55f
   2932  ab47							;orb2
   2933  ab47		       aa ff		      HEX	aaff
   2934  ab49							;orb3
   2935  ab49		       7f ff		      HEX	7fff
   2936  ab4b							;orb4
   2937  ab4b		       ff ff		      HEX	ffff
   2938  ab4d							;orb5
   2939  ab4d		       ff fd		      HEX	fffd
   2940  ab4f							;orb6
   2941  ab4f		       ff aa		      HEX	ffaa
   2942  ab51							;title00
   2943  ab51		       a5 a5 a5 84*	      HEX	a5a5a58400000000000021a5a5a50000000000000021a5a5a5a5840000000000
   2944  ab71		       00 00 a5 a5*	      HEX	0000a5a5a5a5a5a5a5a5a5a5a5a5a5a5
   2945  ab81							;title01
   2946  ab81		       50 50 50 50*	      HEX	5050505050505050505050505050505050505050505050505050505050505050
   2947  aba1		       50 50 50 50*	      HEX	50505050505050505050505050505050
   2948  abb1
   2949  ac00					      ORG	$AC00,0	; *************
   2950  ac00
   2951  ac00					      RORG	$AC00	; *************
   2952  ac00
   2953  ac00							;font
   2954  ac00		       44 10 54 14*	      HEX	4410541454045410545444504044505044541004504054444444444454104444
   2955  ac20		       44 10 10 50*	      HEX	441010505500101010000054004004400414441000
   2956  ac35							;player1
   2957  ac35		       a8 2a 0a 80	      HEX	a82a0a80
   2958  ac39							;player2
   2959  ac39		       00 00 00 00	      HEX	00000000
   2960  ac3d							;player3
   2961  ac3d		       00 00 00 00	      HEX	00000000
   2962  ac41							;player4
   2963  ac41		       00 00 00 00	      HEX	00000000
   2964  ac45							;orb1
   2965  ac45		       f5 5f		      HEX	f55f
   2966  ac47							;orb2
   2967  ac47		       aa ff		      HEX	aaff
   2968  ac49							;orb3
   2969  ac49		       7f ff		      HEX	7fff
   2970  ac4b							;orb4
   2971  ac4b		       ff ff		      HEX	ffff
   2972  ac4d							;orb5
   2973  ac4d		       ff fd		      HEX	fffd
   2974  ac4f							;orb6
   2975  ac4f		       ff aa		      HEX	ffaa
   2976  ac51							;title00
   2977  ac51		       a5 a5 a5 84*	      HEX	a5a5a58400000000000021a5a5a50000000000000021a5a5a5a5840000000000
   2978  ac71		       00 00 a5 a5*	      HEX	0000a5a5a5a5a5a5a5a5a5a5a5a5a584
   2979  ac81							;title01
   2980  ac81		       a0 a0 a0 80*	      HEX	a0a0a08000000000000020a0a0a00000000000a0a0a0a0a0a0a0a0a0a0000000
   2981  aca1		       00 00 a0 a0*	      HEX	0000a0a0a0a0a0a0a0a0a0a0a0800000
   2982  acb1
   2983  ad00					      ORG	$AD00,0	; *************
   2984  ad00
   2985  ad00					      RORG	$AD00	; *************
   2986  ad00
   2987  ad00							;font
   2988  ad00		       44 10 04 04*	      HEX	4410040444544004444444444044404040441004444054444444444440104444
   2989  ad20		       44 54 44 14*	      HEX	445444145400041010000000004004400444451000
   2990  ad35							;player1
   2991  ad35		       55 55 55 40	      HEX	55555540
   2992  ad39							;player2
   2993  ad39		       55 55 55 40	      HEX	55555540
   2994  ad3d							;player3
   2995  ad3d		       55 55 55 40	      HEX	55555540
   2996  ad41							;player4
   2997  ad41		       55 55 55 40	      HEX	55555540
   2998  ad45							;orb1
   2999  ad45		       b9 6e		      HEX	b96e
   3000  ad47							;orb2
   3001  ad47		       69 fd		      HEX	69fd
   3002  ad49							;orb3
   3003  ad49		       bf fe		      HEX	bffe
   3004  ad4b							;orb4
   3005  ad4b		       bf fe		      HEX	bffe
   3006  ad4d							;orb5
   3007  ad4d		       bf fe		      HEX	bffe
   3008  ad4f							;orb6
   3009  ad4f		       7f 69		      HEX	7f69
   3010  ad51							;title00
   3011  ad51		       50 50 50 50*	      HEX	5050505050505050505050505050505050505050505050505050505050505050
   3012  ad71		       50 50 50 50*	      HEX	50505050505050505050505050505050
   3013  ad81							;title01
   3014  ad81		       a0 a0 a0 80*	      HEX	a0a0a08000000000000020a0a0a00000000000a0a0a0a0a0a0a0a0a0a0000000
   3015  ada1		       00 00 a0 a0*	      HEX	0000a0a0a0a0a0a0a0a0a0a0a0a08000
   3016  adb1
   3017  ae00					      ORG	$AE00,0	; *************
   3018  ae00
   3019  ae00					      RORG	$AE00	; *************
   3020  ae00
   3021  ae00							;font
   3022  ae00		       44 50 04 04*	      HEX	4450040444404044444444444044404040441004444054444444444440104444
   3023  ae20		       44 44 44 04*	      HEX	444444045044441004000000001010400444401000
   3024  ae35							;player1
   3025  ae35		       15 55 55 00	      HEX	15555500
   3026  ae39							;player2
   3027  ae39		       15 55 55 00	      HEX	15555500
   3028  ae3d							;player3
   3029  ae3d		       15 55 55 00	      HEX	15555500
   3030  ae41							;player4
   3031  ae41		       15 55 55 00	      HEX	15555500
   3032  ae45							;orb1
   3033  ae45		       3f fc		      HEX	3ffc
   3034  ae47							;orb2
   3035  ae47		       3f fc		      HEX	3ffc
   3036  ae49							;orb3
   3037  ae49		       3f fc		      HEX	3ffc
   3038  ae4b							;orb4
   3039  ae4b		       3f fc		      HEX	3ffc
   3040  ae4d							;orb5
   3041  ae4d		       3f fc		      HEX	3ffc
   3042  ae4f							;orb6
   3043  ae4f		       3f fc		      HEX	3ffc
   3044  ae51							;title00
   3045  ae51		       5a 5a 5a 48*	      HEX	5a5a5a48000000000000125a5a5a00000000000000005a5a5a5a000000000000
   3046  ae71		       00 00 5a 5a*	      HEX	00005a5a5a5a5a5a5a5a5a5a5a5a5a00
   3047  ae81							;title01
   3048  ae81		       50 50 50 50*	      HEX	5050505050505050505050505050505050505050505050505050505050505050
   3049  aea1		       50 50 50 50*	      HEX	50505050505050505050505050505050
   3050  aeb1
   3051  af00					      ORG	$AF00,0	; *************
   3052  af00
   3053  af00					      RORG	$AF00	; *************
   3054  af00
   3055  af00							;font
   3056  af00		       54 10 54 54*	      HEX	5410545444545454545454505450545454445404444044545454545454544444
   3057  af20		       44 44 44 54*	      HEX	444444544044541004000000000440545410154000
   3058  af35							;player1
   3059  af35		       05 f5 7c 00	      HEX	05f57c00
   3060  af39							;player2
   3061  af39		       07 d5 f4 00	      HEX	07d5f400
   3062  af3d							;player3
   3063  af3d		       0f 57 d4 00	      HEX	0f57d400
   3064  af41							;player4
   3065  af41		       0d 5f 5c 00	      HEX	0d5f5c00
   3066  af45							;orb1
   3067  af45		       0b e0		      HEX	0be0
   3068  af47							;orb2
   3069  af47		       0f 70		      HEX	0f70
   3070  af49							;orb3
   3071  af49		       0e f0		      HEX	0ef0
   3072  af4b							;orb4
   3073  af4b		       0b e0		      HEX	0be0
   3074  af4d							;orb5
   3075  af4d		       0f b0		      HEX	0fb0
   3076  af4f							;orb6
   3077  af4f		       0d f0		      HEX	0df0
   3078  af51							;title00
   3079  af51		       5a 5a 5a 48*	      HEX	5a5a5a48000000000000125a5a5a0000000000000000125a5a48000000000000
   3080  af71		       00 00 5a 5a*	      HEX	00005a5a5a5a5a5a5a5a5a5a5a5a0000
   3081  af81							;title01
   3082  af81		       f0 f0 f0 c0*	      HEX	f0f0f0c000000000000030f0f0f0000000000030f0f0f0f0f0f0f0f0c0000000
   3083  afa1		       00 00 f0 f0*	      HEX	0000f0f0f0f0f0f0f0f0f0f0f0f0f000
   3084  afb1
   3085  b000					      ORG	$B000,0	; *************
   3086  b000
   3087  b000					      RORG	$B000	; *************
   3088  b000				  -	      if	SPACEOVERFLOW > 0
   3089  b000				  -	      echo	""
   3090  b000				  -	      echo	"######## ERROR: space overflow detected in",[SPACEOVERFLOW]d,"areas."
   3091  b000				  -	      echo	"######## look above for areas with negative ROM space left."
   3092  b000				  -	      echo	"######## Aborting assembly."
   3093  b000				  -SET	      SPACEOVERFLOWPASS	= (SPACEOVERFLOWPASS + 1)
   3094  b000				  -	      if	SPACEOVERFLOWPASS > 0
   3095  b000				  -	      ERR
   3096  b000				  -	      endif
   3097  b000					      endif
   3098  b000
   3099  b000
   3100  b000							; Provided under the CC0 license. See the included LICENSE.txt for details.
   3101  b000
   3102  b000				  -	      ifnconst	bankswitchmode
   3103  b000				  -	      if	( * < $f000 )
   3104  b000				  -	      ORG	$F000
   3105  b000				  -	      endif
   3106  b000					      else
   3107  b000					      ifconst	ROM128K
   3108  b000					      if	( * < $f000 )
   3109  27000					       ORG	$27000
   3110  27000					       RORG	$F000
   3111  27000					       endif
   3112  27000					       endif
   3113  27000				   -	       ifconst	ROM144K
   3114  27000				   -	       if	( * < $f000 )
   3115  27000				   -	       ORG	$27000
   3116  27000				   -	       RORG	$F000
   3117  27000				   -	       endif
   3118  27000					       endif
   3119  27000				   -	       ifconst	ROM256K
   3120  27000				   -	       if	( * < $f000 )
   3121  27000				   -	       ORG	$47000
   3122  27000				   -	       RORG	$F000
   3123  27000				   -	       endif
   3124  27000					       endif
   3125  27000				   -	       ifconst	ROM272K
   3126  27000				   -	       if	( * < $f000 )
   3127  27000				   -	       ORG	$47000
   3128  27000				   -	       RORG	$F000
   3129  27000				   -	       endif
   3130  27000					       endif
   3131  27000				   -	       ifconst	ROM512K
   3132  27000				   -	       if	( * < $f000 )
   3133  27000				   -	       ORG	$87000
   3134  27000				   -	       RORG	$F000
   3135  27000				   -	       endif
   3136  27000					       endif
   3137  27000				   -	       ifconst	ROM528K
   3138  27000				   -	       if	( * < $f000 )
   3139  27000				   -	       ORG	$87000
   3140  27000				   -	       RORG	$F000
   3141  27000				   -	       endif
   3142  27000					       endif
   3143  27000					       endif
   3144  27000
   3145  27000							; all of these "modules" have conditional clauses in them, so even though
   3146  27000							; they're always included here, they don't take up rom unless the user
   3147  27000							; explicitly enables support for the feature.
   3148  27000
   3149  27000					       ifnconst	included.rmtplayer.asm
------- FILE rmtplayer.asm LEVEL 2 PASS 3
      0  27000					       include	rmtplayer.asm	; requires page alignment, so go first
      1  27000				   -	       ifconst	RMT
      2  27000				   -
      3  27000				   -rmtmodulestart
      4  27000				   -
      5  27000				   -			;*
      6  27000				   -			;* Raster Music Tracker, RMT Atari routine version 1.20030223
      7  27000				   -			;* (c) Radek Sterba, Raster/C.P.U., 2002 - 2003
      8  27000				   -			;* http://raster.atari.org
      9  27000				   -			;*
     10  27000				   -			;* Some small changes to allow using this code with DASM cross assembler and
     11  27000				   -			;* to compile for cartridge based systems, like the Atari 5200 or 7800,
     12  27000				   -			;* by Eckhard Stolberg ( http://home.arcor.de/estolberg/ ).
     13  27000				   -			;*
     14  27000				   -			;* More small changes were made to use this code with 7800basic, and
     15  27000				   -			;* comments by VinsCool on more recent versions were back-ported.
     16  27000				   -			;* --Mike Saarna.
     17  27000				   -			;*
     18  27000				   -			;* Warnings:
     19  27000				   -			;*
     20  27000				   -			;* 1. RMT player routine needs 19 dedicated zero page bytes, as well as cca
     21  27000				   -			;* 1KB of memory before the "PLAYER" address for frequency tables and
     22  27000				   -			;* functionary variables. It's:
     23  27000				   -			;* a) from PLAYER-$400 to PLAYER for stereo RMTplayer
     24  27000				   -			;* b) from PLAYER-$380 to PLAYER for mono RMTplayer
     25  27000				   -			;*
     26  27000				   -			;* note: This has been changed for 5200 & 7800 compatibility. Now PLAYER
     27  27000				   -			;* points to the start of the frequency tables. The player routines follows
     28  27000				   -			;* after that. The variables are now independent and can be located with
     29  27000				   -			;* PLAYER_VAR_RAM and PLAYER_ZP_RAM (see below):
     30  27000				   -			;*
     31  27000				   -			;* 2. RMT player routine MUST (!!!) be compiled aligned to a memory page.
     32  27000				   -			;* i.e. "PLAYER" address can be $..00 only!
     33  27000				   -			;*
     34  27000				   -			;* 3. Because of RMTplayer provides a lot of effects, it spent a lot of
     35  27000				   -			;* CPU time.
     36  27000				   -			;*
     37  27000				   -			;*
     38  27000				   -			;* Define the following equates here or in your main code file.
     39  27000				   -			;* Set the values according to the system you compile for.
     40  27000				   -			;*
     41  27000				   -
     42  27000				   -POKEY_BASE equ	pokeyaddress
     43  27000				   -PLAYER_ZP_RAM equ	songchannel1layer1lo	;* player routine needs 19 bytes
     44  27000				   -			;* of zero page RAM
     45  27000				   -PLAYER_VAR_RAM equ	RMTRAM	;* variables in main RAM - 173 bytes
     46  27000				   -			;* mono - 337 stereo
     47  27000				   -
     48  27000				   -ROM_BASED  equ	1	;* using a ROM based system - no self modifying code
     49  27000				   -STEREO8T   equ	0	;* 0 => compile RMTplayer for mono 4 tracks
     50  27000				   -			; ;1 => compile RMTplayer for stereo 8 tracks
     51  27000				   -
     52  27000				   -HARD_OF_HEARING equ	1	;* repeat output to pokey
     53  27000				   -
     54  27000				   -rmt_ispeed equ	PLAYER_ZP_RAM+19
     55  27000				   -rmt_intcount equ	PLAYER_ZP_RAM+20
     56  27000				   -
     57  27000				   -			;*
     58  27000				   -
     59  27000				   -	       IF	STEREO8T
     60  27000				   -TRACKS     equ	8
     61  27000				   -	       ELSE
     62  27000				   -TRACKS     equ	4
     63  27000				   -	       ENDIF
     64  27000				   -
     65  27000				   -			;*
     66  27000				   -			;* RMT FEATures definitions
     67  27000				   -			;* For optimizations of RMT player routine to concrete RMT modul only!
     68  27000				   -			;* --------BEGIN--------
     69  27000				   -FEAT_COMMAND1 equ	1	;* cca 8 bytes
     70  27000				   -FEAT_COMMAND2 equ	1	;* cca 20 bytes (+save 1 address in zero page)
     71  27000				   -			;* and quicker whole RMT routine
     72  27000				   -FEAT_COMMAND3 equ	1	;* cca 12 bytes
     73  27000				   -FEAT_COMMAND4 equ	1	;* cca 15 bytes
     74  27000				   -FEAT_COMMAND5 equ	1	;* cca 67 bytes
     75  27000				   -FEAT_COMMAND6 equ	1	;* cca 15 bytes
     76  27000				   -			;* COMMAND7 SETNOTE (i.e. command 7 with parameter != $80)
     77  27000				   -FEAT_COMMAND7SETNOTE equ	1	;* cca 12 bytes
     78  27000				   -			;* COMMAND7 VOLUMEONLY (i.e. command 7 with parameter == $80)
     79  27000				   -FEAT_COMMAND7VOLUMEONLY equ	1	;* cca 74 bytes
     80  27000				   -			;* PORTAMENTO
     81  27000				   -FEAT_PORTAMENTO equ	1	;* cca 138 bytes and quicker whole RMT routine
     82  27000				   -			;* FILTER
     83  27000				   -FEAT_FILTER equ	1	;* cca 179 bytes and quicker whole RMT routine
     84  27000				   -FEAT_FILTERG0L equ	1	;* (cca 38 bytes for each)
     85  27000				   -FEAT_FILTERG1L equ	1
     86  27000				   -FEAT_FILTERG0R equ	1
     87  27000				   -FEAT_FILTERG1R equ	1
     88  27000				   -			;* BASS16B (i.e. distortion value 6)
     89  27000				   -FEAT_BASS16 equ	1	;* cca 194 bytes +128bytes freq table and
     90  27000				   -			;* quicker whole RMT routine
     91  27000				   -FEAT_BASS16G1L equ	1	;* (cca 47 bytes for each)
     92  27000				   -FEAT_BASS16G3L equ	1
     93  27000				   -FEAT_BASS16G1R equ	1
     94  27000				   -FEAT_BASS16G3R equ	1
     95  27000				   -			;* VOLUME ONLY for particular generators
     96  27000				   -FEAT_VOLUMEONLYG0L equ	1	;* (cca 7 bytes for each)
     97  27000				   -FEAT_VOLUMEONLYG2L equ	1
     98  27000				   -FEAT_VOLUMEONLYG3L equ	1
     99  27000				   -FEAT_VOLUMEONLYG0R equ	1
    100  27000				   -FEAT_VOLUMEONLYG2R equ	1
    101  27000				   -FEAT_VOLUMEONLYG3R equ	1
    102  27000				   -			;* TABLE TYPE (i.e. TABLETYPE=1)
    103  27000				   -FEAT_TABLETYPE equ	1	;* cca 53 bytes and quicker whole RMT routine
    104  27000				   -			;* TABLE MODE (i.e. TABLEMODE=1)
    105  27000				   -FEAT_TABLEMODE equ	1	;* cca 16 bytes and quicker whole RMT routine
    106  27000				   -			;* AUDCTLMANUALSET (i.e. any MANUAL AUDCTL setting to nonzero value)
    107  27000				   -FEAT_AUDCTLMANUALSET equ	1	;* cca 27 bytes and quicker whole RMT routine
    108  27000				   -			;* --------END--------
    109  27000				   -			;*
    110  27000				   -			;*
    111  27000				   -			;* RMT ZeroPage addresses
    112  27000				   -
    113  27000				   -MEMLOC     SET	PLAYER_ZP_RAM
    114  27000				   -p_tis      =	MEMLOC
    115  27000				   -p_instrstable =	MEMLOC
    116  27000				   -MEMLOC     SET	(MEMLOC+2)
    117  27000				   -ptrTracksTblLo =	MEMLOC
    118  27000				   -MEMLOC     SET	(MEMLOC+2)
    119  27000				   -ptrTracksTblHi =	MEMLOC
    120  27000				   -MEMLOC     SET	(MEMLOC+2)
    121  27000				   -ptrSongLines =	MEMLOC
    122  27000				   -MEMLOC     SET	(MEMLOC+2)
    123  27000				   -
    124  27000				   -_ns        =	MEMLOC
    125  27000				   -MEMLOC     SET	(MEMLOC+2)
    126  27000				   -_nr        =	MEMLOC
    127  27000				   -MEMLOC     SET	(MEMLOC+2)
    128  27000				   -_nt        =	MEMLOC
    129  27000				   -MEMLOC     SET	(MEMLOC+2)
    130  27000				   -
    131  27000				   -rmtreg1    =	MEMLOC
    132  27000				   -MEMLOC     SET	(MEMLOC+1)
    133  27000				   -rmtreg2    =	MEMLOC
    134  27000				   -MEMLOC     SET	(MEMLOC+1)
    135  27000				   -rmtreg3    =	MEMLOC
    136  27000				   -MEMLOC     SET	(MEMLOC+1)
    137  27000				   -_tmp       =	MEMLOC
    138  27000				   -MEMLOC     SET	(MEMLOC+1)
    139  27000				   -	       IF	FEAT_COMMAND2
    140  27000				   -frqaddcmd2 =	MEMLOC
    141  27000				   -MEMLOC     SET	(MEMLOC+1)
    142  27000				   -	       ENDIF
    143  27000				   -
    144  27000				   -			;*
    145  27000				   -			;* Variables in main RAM used by player routine.
    146  27000				   -			;* 337 bytes for stereo - 173 bytes for mono
    147  27000				   -			;*
    148  27000				   -
    149  27000				   -MEMLOC     SET	PLAYER_VAR_RAM
    150  27000				   -track_variables =	MEMLOC
    151  27000				   -
    152  27000				   -trackn_TblLo =	MEMLOC
    153  27000				   -MEMLOC     SET	(MEMLOC+TRACKS)
    154  27000				   -trackn_TblHi =	MEMLOC
    155  27000				   -MEMLOC     SET	(MEMLOC+TRACKS)
    156  27000				   -trackn_idx =	MEMLOC
    157  27000				   -MEMLOC     SET	(MEMLOC+TRACKS)
    158  27000				   -trackn_pause =	MEMLOC
    159  27000				   -MEMLOC     SET	(MEMLOC+TRACKS)
    160  27000				   -trackn_note =	MEMLOC
    161  27000				   -MEMLOC     SET	(MEMLOC+TRACKS)
    162  27000				   -trackn_volume =	MEMLOC
    163  27000				   -MEMLOC     SET	(MEMLOC+TRACKS)
    164  27000				   -trackn_distor =	MEMLOC
    165  27000				   -MEMLOC     SET	(MEMLOC+TRACKS)
    166  27000				   -trackn_shiftfrq =	MEMLOC
    167  27000				   -MEMLOC     SET	(MEMLOC+TRACKS)
    168  27000				   -
    169  27000				   -	       IF	FEAT_PORTAMENTO
    170  27000				   -trackn_portafrqc =	MEMLOC
    171  27000				   -MEMLOC     SET	(MEMLOC+TRACKS)
    172  27000				   -trackn_portafrqa =	MEMLOC
    173  27000				   -MEMLOC     SET	(MEMLOC+TRACKS)
    174  27000				   -trackn_portaspeed =	MEMLOC
    175  27000				   -MEMLOC     SET	(MEMLOC+TRACKS)
    176  27000				   -trackn_portaspeeda =	MEMLOC
    177  27000				   -MEMLOC     SET	(MEMLOC+TRACKS)
    178  27000				   -trackn_portadepth =	MEMLOC
    179  27000				   -MEMLOC     SET	(MEMLOC+TRACKS)
    180  27000				   -	       ENDIF
    181  27000				   -
    182  27000				   -trackn_instrx2 =	MEMLOC
    183  27000				   -MEMLOC     SET	(MEMLOC+TRACKS)
    184  27000				   -trackn_instrdb =	MEMLOC
    185  27000				   -MEMLOC     SET	(MEMLOC+TRACKS)
    186  27000				   -trackn_instrhb =	MEMLOC
    187  27000				   -MEMLOC     SET	(MEMLOC+TRACKS)
    188  27000				   -trackn_instridx =	MEMLOC
    189  27000				   -MEMLOC     SET	(MEMLOC+TRACKS)
    190  27000				   -trackn_instrlen =	MEMLOC
    191  27000				   -MEMLOC     SET	(MEMLOC+TRACKS)
    192  27000				   -trackn_instrlop =	MEMLOC
    193  27000				   -MEMLOC     SET	(MEMLOC+TRACKS)
    194  27000				   -trackn_instrreachend =	MEMLOC
    195  27000				   -MEMLOC     SET	(MEMLOC+TRACKS)
    196  27000				   -trackn_volumeslidedepth =	MEMLOC
    197  27000				   -MEMLOC     SET	(MEMLOC+TRACKS)
    198  27000				   -trackn_volumeslidevalue =	MEMLOC
    199  27000				   -MEMLOC     SET	(MEMLOC+TRACKS)
    200  27000				   -trackn_volumemin =	MEMLOC
    201  27000				   -MEMLOC     SET	(MEMLOC+TRACKS)
    202  27000				   -trackn_effdelay =	MEMLOC
    203  27000				   -MEMLOC     SET	(MEMLOC+TRACKS)
    204  27000				   -trackn_effvibratoa =	MEMLOC
    205  27000				   -MEMLOC     SET	(MEMLOC+TRACKS)
    206  27000				   -trackn_effvibratobeg =	MEMLOC
    207  27000				   -MEMLOC     SET	(MEMLOC+TRACKS)
    208  27000				   -trackn_effvibratoend =	MEMLOC
    209  27000				   -MEMLOC     SET	(MEMLOC+TRACKS)
    210  27000				   -trackn_effshift =	MEMLOC
    211  27000				   -MEMLOC     SET	(MEMLOC+TRACKS)
    212  27000				   -trackn_tabletypespeed =	MEMLOC
    213  27000				   -MEMLOC     SET	(MEMLOC+TRACKS)
    214  27000				   -
    215  27000				   -	       IF	FEAT_TABLEMODE
    216  27000				   -trackn_tablemode =	MEMLOC
    217  27000				   -MEMLOC     SET	(MEMLOC+TRACKS)
    218  27000				   -	       ENDIF
    219  27000				   -
    220  27000				   -trackn_tablenote =	MEMLOC
    221  27000				   -MEMLOC     SET	(MEMLOC+TRACKS)
    222  27000				   -
    223  27000				   -trackn_tablea =	MEMLOC
    224  27000				   -MEMLOC     SET	(MEMLOC+TRACKS)
    225  27000				   -trackn_tableend =	MEMLOC
    226  27000				   -MEMLOC     SET	(MEMLOC+TRACKS)
    227  27000				   -trackn_tablelop =	MEMLOC
    228  27000				   -MEMLOC     SET	(MEMLOC+TRACKS)
    229  27000				   -trackn_tablespeeda =	MEMLOC
    230  27000				   -MEMLOC     SET	(MEMLOC+TRACKS)
    231  27000				   -trackn_command =	MEMLOC
    232  27000				   -MEMLOC     SET	(MEMLOC+TRACKS)
    233  27000				   -
    234  27000				   -	       IF	FEAT_BASS16
    235  27000				   -trackn_outnote =	MEMLOC
    236  27000				   -MEMLOC     SET	(MEMLOC+TRACKS)
    237  27000				   -	       ENDIF
    238  27000				   -	       IF	FEAT_FILTER
    239  27000				   -trackn_filter =	MEMLOC
    240  27000				   -MEMLOC     SET	(MEMLOC+TRACKS)
    241  27000				   -	       ENDIF
    242  27000				   -
    243  27000				   -trackn_audf =	MEMLOC
    244  27000				   -MEMLOC     SET	(MEMLOC+TRACKS)
    245  27000				   -trackn_audc =	MEMLOC
    246  27000				   -MEMLOC     SET	(MEMLOC+TRACKS)
    247  27000				   -
    248  27000				   -	       IF	FEAT_AUDCTLMANUALSET
    249  27000				   -trackn_audctl =	MEMLOC
    250  27000				   -MEMLOC     SET	(MEMLOC+TRACKS)
    251  27000				   -	       ENDIF
    252  27000				   -
    253  27000				   -v_audctl   =	MEMLOC
    254  27000				   -MEMLOC     SET	(MEMLOC+1)
    255  27000				   -v_audctl2  =	MEMLOC
    256  27000				   -MEMLOC     SET	(MEMLOC+1)
    257  27000				   -v_speed    =	MEMLOC
    258  27000				   -MEMLOC     SET	(MEMLOC+1)
    259  27000				   -v_aspeed   =	MEMLOC
    260  27000				   -MEMLOC     SET	(MEMLOC+1)
    261  27000				   -v_bspeed   =	MEMLOC
    262  27000				   -MEMLOC     SET	(MEMLOC+1)
    263  27000				   -v_instrspeed =	MEMLOC
    264  27000				   -MEMLOC     SET	(MEMLOC+1)
    265  27000				   -smc_silence_instrspeed =	MEMLOC
    266  27000				   -MEMLOC     SET	(MEMLOC+1)
    267  27000				   -v_maxtracklen =	MEMLOC
    268  27000				   -MEMLOC     SET	(MEMLOC+1)
    269  27000				   -v_abeat    =	MEMLOC
    270  27000				   -MEMLOC     SET	(MEMLOC+1)
    271  27000				   -
    272  27000				   -track_endvariables =	MEMLOC
    273  27000				   -
    274  27000				   -			;*
    275  27000				   -			;* Data tables used by player routine.
    276  27000				   -			;*
    277  27000				   -	       ALIGN	256
    278  27000				   -PLAYER     =	.
    279  27000				   -
    280  27000				   -volumetab
    281  27000				   -	       dc.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    282  27000				   -	       dc.b	$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$01,$01,$01
    283  27000				   -	       dc.b	$00,$00,$00,$00,$01,$01,$01,$01,$01,$01,$01,$01,$02,$02,$02,$02
    284  27000				   -	       dc.b	$00,$00,$00,$01,$01,$01,$01,$01,$02,$02,$02,$02,$02,$03,$03,$03
    285  27000				   -	       dc.b	$00,$00,$01,$01,$01,$01,$02,$02,$02,$02,$03,$03,$03,$03,$04,$04
    286  27000				   -	       dc.b	$00,$00,$01,$01,$01,$02,$02,$02,$03,$03,$03,$04,$04,$04,$05,$05
    287  27000				   -	       dc.b	$00,$00,$01,$01,$02,$02,$02,$03,$03,$04,$04,$04,$05,$05,$06,$06
    288  27000				   -	       dc.b	$00,$00,$01,$01,$02,$02,$03,$03,$04,$04,$05,$05,$06,$06,$07,$07
    289  27000				   -	       dc.b	$00,$01,$01,$02,$02,$03,$03,$04,$04,$05,$05,$06,$06,$07,$07,$08
    290  27000				   -	       dc.b	$00,$01,$01,$02,$02,$03,$04,$04,$05,$05,$06,$07,$07,$08,$08,$09
    291  27000				   -	       dc.b	$00,$01,$01,$02,$03,$03,$04,$05,$05,$06,$07,$07,$08,$09,$09,$0A
    292  27000				   -	       dc.b	$00,$01,$01,$02,$03,$04,$04,$05,$06,$07,$07,$08,$09,$0A,$0A,$0B
    293  27000				   -	       dc.b	$00,$01,$02,$02,$03,$04,$05,$06,$06,$07,$08,$09,$0A,$0A,$0B,$0C
    294  27000				   -	       dc.b	$00,$01,$02,$03,$03,$04,$05,$06,$07,$08,$09,$0A,$0A,$0B,$0C,$0D
    295  27000				   -	       dc.b	$00,$01,$02,$03,$04,$05,$06,$07,$07,$08,$09,$0A,$0B,$0C,$0D,$0E
    296  27000				   -	       dc.b	$00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0A,$0B,$0C,$0D,$0E,$0F
    297  27000				   -
    298  27000				   -frqtab
    299  27000				   -			; ERT [<frqtab]!=0 ;* frqtab must begin at the memory page bound!
    300  27000				   -			;* (i.e. $..00 address)
    301  27000				   -frqtabbass1
    302  27000				   -	       dc.b	$BF,$B6,$AA,$A1,$98,$8F,$89,$80,$F2,$E6,$DA,$CE,$BF,$B6,$AA,$A1
    303  27000				   -	       dc.b	$98,$8F,$89,$80,$7A,$71,$6B,$65,$5F,$5C,$56,$50,$4D,$47,$44,$3E
    304  27000				   -	       dc.b	$3C,$38,$35,$32,$2F,$2D,$2A,$28,$25,$23,$21,$1F,$1D,$1C,$1A,$18
    305  27000				   -	       dc.b	$17,$16,$14,$13,$12,$11,$10,$0F,$0E,$0D,$0C,$0B,$0A,$09,$08,$07
    306  27000				   -frqtabbass2
    307  27000				   -	       dc.b	$FF,$F1,$E4,$D8,$CA,$C0,$B5,$AB,$A2,$99,$8E,$87,$7F,$79,$73,$70
    308  27000				   -	       dc.b	$66,$61,$5A,$55,$52,$4B,$48,$43,$3F,$3C,$39,$37,$33,$30,$2D,$2A
    309  27000				   -	       dc.b	$28,$25,$24,$21,$1F,$1E,$1C,$1B,$19,$17,$16,$15,$13,$12,$11,$10
    310  27000				   -	       dc.b	$0F,$0E,$0D,$0C,$0B,$0A,$09,$08,$07,$06,$05,$04,$03,$02,$01,$00
    311  27000				   -frqtabpure
    312  27000				   -	       dc.b	$F3,$E6,$D9,$CC,$C1,$B5,$AD,$A2,$99,$90,$88,$80,$79,$72,$6C,$66
    313  27000				   -	       dc.b	$60,$5B,$55,$51,$4C,$48,$44,$40,$3C,$39,$35,$32,$2F,$2D,$2A,$28
    314  27000				   -	       dc.b	$25,$23,$21,$1F,$1D,$1C,$1A,$18,$17,$16,$14,$13,$12,$11,$10,$0F
    315  27000				   -	       dc.b	$0E,$0D,$0C,$0B,$0A,$09,$08,$07,$06,$05,$04,$03,$02,$01,$00,$00
    316  27000				   -	       IF	FEAT_BASS16
    317  27000				   -frqtabbasshi
    318  27000				   -	       dc.b	$0D,$0D,$0C,$0B,$0B,$0A,$0A,$09,$08,$08,$07,$07,$07,$06,$06,$05
    319  27000				   -	       dc.b	$05,$05,$04,$04,$04,$04,$03,$03,$03,$03,$03,$02,$02,$02,$02,$02
    320  27000				   -	       dc.b	$02,$02,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00
    321  27000				   -	       dc.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    322  27000				   -	       ENDIF
    323  27000				   -
    324  27000				   -	       IF	FEAT_BASS16
    325  27000				   -frqtabbasslo
    326  27000				   -	       dc.b	$F2,$33,$96,$E2,$38,$8C,$00,$6A,$E8,$6A,$EF,$80,$08,$AE,$46,$E6
    327  27000				   -	       dc.b	$95,$41,$F6,$B0,$6E,$30,$F6,$BB,$84,$52,$22,$F4,$C8,$A0,$7A,$55
    328  27000				   -	       dc.b	$34,$14,$F5,$D8,$BD,$A4,$8D,$77,$60,$4E,$38,$27,$15,$06,$F7,$E8
    329  27000				   -	       dc.b	$DB,$CF,$C3,$B8,$AC,$A2,$9A,$90,$88,$7F,$78,$70,$6A,$64,$5E,$00
    330  27000				   -	       ENDIF
    331  27000				   -
    332  27000				   -	       IF	ROM_BASED
    333  27000				   -rts_tab    dc.w	cmd0-1,cmd1-1,cmd2-1,cmd3-1,cmd4-1,cmd5-1,cmd6-1,cmd7-1
    334  27000				   -	       ENDIF
    335  27000				   -INSTRPAR   equ	12
    336  27000				   -tabbeganddistor
    337  27000				   -	       dc.b	frqtabpure-frqtab,$00
    338  27000				   -	       dc.b	frqtabpure-frqtab,$20
    339  27000				   -	       dc.b	frqtabpure-frqtab,$40
    340  27000				   -	       dc.b	frqtabbass1-frqtab,$c0
    341  27000				   -	       dc.b	frqtabpure-frqtab,$80
    342  27000				   -	       dc.b	frqtabpure-frqtab,$a0
    343  27000				   -	       dc.b	frqtabbass1-frqtab,$c0
    344  27000				   -	       dc.b	frqtabbass2-frqtab,$c0
    345  27000				   -vibtabbeg  dc.b	0,vib1-vib0,vib2-vib0,vib3-vib0,vibx-vib0
    346  27000				   -vib0       dc.b	0
    347  27000				   -vib1       dc.b	1,-1,-1,1
    348  27000				   -vib2       dc.b	1,0,-1,-1,0,1
    349  27000				   -vib3       dc.b	1,1,0,-1,-1,-1,-1,0,1,1
    350  27000				   -vibx
    351  27000				   -emptytrack
    352  27000				   -	       dc.b	62,0
    353  27000				   -
    354  27000				   -			;*
    355  27000				   -			;* Set of RMT main vectors:
    356  27000				   -			;*
    357  27000				   -RASTERMUSICTRACKER
    358  27000				   -	       jmp	rmt_init	;* Must be run first, to clear memory and initialise
    359  27000				   -			;* the player... Once this is done, run rmt_play
    360  27000				   -			;* afterwards, or Set_Pokey if you want to manually
    361  27000				   -			;* time certain things.
    362  27000				   -
    363  27000				   -	       jmp	rmt_play	;* One play each subroutine call. SetPokey is
    364  27000				   -			;* executed first, then all the play code is ran
    365  27000				   -			;* once, until the RTS. rmt_play could be called
    366  27000				   -			;* multiple times per frame if wanted.
    367  27000				   -
    368  27000				   -	       jmp	rmt_p3	;* Similar to rmt_play, but will also skip SetPokey
    369  27000				   -			;* and the instruments/songlines/tracklines
    370  27000				   -			;* initialisation, very useful for playing simple
    371  27000				   -			;* things.
    372  27000				   -
    373  27000				   -	       jmp	rmt_silence	;* Run this to stop the driver, and reset all POKEY
    374  27000				   -			;* registers to 0. This is also part of rmt_init
    375  27000				   -			;* when it is executed first.
    376  27000				   -
    377  27000				   -	       jmp	SetPokey	;* Run to copy the contents of the Shadow POKEY
    378  27000				   -			;* registers (v_audctl, v_skctl, trackn_audf,x etc)
    379  27000				   -			;* into the real ones. Will be run first each time
    380  27000				   -			;* rmt_play is called.
    381  27000				   -rmt_init
    382  27000				   -	       stx	_ns
    383  27000				   -	       sty	_ns+1
    384  27000				   -	       pha
    385  27000				   -	       IF	track_endvariables-track_variables>255
    386  27000				   -	       ldy	#0
    387  27000				   -	       tya
    388  27000				   -ri_clear_loop
    389  27000				   -	       sta	track_variables,y
    390  27000				   -	       sta	track_endvariables-$100,y
    391  27000				   -	       iny
    392  27000				   -	       bne	ri_clear_loop
    393  27000				   -	       ELSE
    394  27000				   -	       ldy	#track_endvariables-track_variables
    395  27000				   -	       lda	#0
    396  27000				   -ri_clear_loop
    397  27000				   -	       sta	track_variables-1,y
    398  27000				   -	       dey
    399  27000				   -	       bne	ri_clear_loop
    400  27000				   -	       ENDIF
    401  27000				   -			;* Parse the RMT module data
    402  27000				   -			;* Track length: +4
    403  27000				   -	       ldy	#4
    404  27000				   -	       lda	(_ns),y
    405  27000				   -	       sta	v_maxtracklen	;* Change the code to store the track length
    406  27000				   -	       iny
    407  27000				   -	       lda	(_ns),y
    408  27000				   -	       sta	v_speed	;* Change the code to store the song speed
    409  27000				   -	       iny
    410  27000				   -	       lda	(_ns),y
    411  27000				   -	       sta	v_instrspeed	;* Change the code to store the instrument speed
    412  27000				   -	       sta	smc_silence_instrspeed
    413  27000				   -
    414  27000				   -			; Copy 4 pointers: +8
    415  27000				   -			; -> InstrumentPtrs[]	       2 bytes
    416  27000				   -			; -> TracksPtrsLow[]	       2 bytes
    417  27000				   -			; -> TracksPtrsHi	       2 bytes
    418  27000				   -			; -> SongData		       2 bytes
    419  27000				   -	       ldy	#8
    420  27000				   -ri_copy_loop
    421  27000				   -	       lda	(_ns),y
    422  27000				   -	       sta	p_tis-8,y
    423  27000				   -	       iny
    424  27000				   -	       cpy	#8+8	;* we started at 8, so loop until 16
    425  27000				   -	       bne	ri_copy_loop
    426  27000				   -
    427  27000				   -	       pla
    428  27000				   -	       pha
    429  27000				   -	       IF	STEREO8T
    430  27000				   -	       asl
    431  27000				   -	       asl
    432  27000				   -	       asl
    433  27000				   -	       clc
    434  27000				   -	       adc	ptrSongLines
    435  27000				   -	       sta	ptrSongLines
    436  27000				   -	       pla
    437  27000				   -	       and	#$e0
    438  27000				   -	       asl
    439  27000				   -	       rol
    440  27000				   -	       rol
    441  27000				   -	       rol
    442  27000				   -	       ELSE
    443  27000				   -	       asl
    444  27000				   -	       asl
    445  27000				   -	       clc
    446  27000				   -	       adc	ptrSongLines
    447  27000				   -	       sta	ptrSongLines
    448  27000				   -	       pla
    449  27000				   -	       and	#$c0
    450  27000				   -	       asl
    451  27000				   -	       rol
    452  27000				   -	       rol
    453  27000				   -	       ENDIF
    454  27000				   -	       adc	ptrSongLines+1
    455  27000				   -	       sta	ptrSongLines+1
    456  27000				   -
    457  27000				   -	       jsr	GetSongLine
    458  27000				   -
    459  27000				   -	       jsr	GetTrackLine
    460  27000				   -	       jsr	InitOfNewSetInstrumentsOnly
    461  27000				   -	       jsr	rmt_silence
    462  27000				   -	       lda	v_instrspeed
    463  27000				   -	       rts
    464  27000				   -
    465  27000				   -rmt_silence
    466  27000				   -	       IF	STEREO8T
    467  27000				   -	       lda	#0
    468  27000				   -	       sta	POKEY_BASE+$08
    469  27000				   -	       sta	POKEY_BASE_S+$08
    470  27000				   -	       ldy	#3
    471  27000				   -	       sty	POKEY_BASE+$0f
    472  27000				   -	       sty	POKEY_BASE_S+$0f
    473  27000				   -	       ldy	#8
    474  27000				   -rmt_silence_loop
    475  27000				   -	       sta	POKEY_BASE+$00,y
    476  27000				   -	       sta	POKEY_BASE_S+$00,y
    477  27000				   -	       dey
    478  27000				   -	       bpl	rmt_silence_loop
    479  27000				   -	       ELSE
    480  27000				   -	       lda	#0
    481  27000				   -	       sta	POKEY_BASE+$08
    482  27000				   -	       ldy	#3
    483  27000				   -	       sty	POKEY_BASE+$0f
    484  27000				   -	       ldy	#8
    485  27000				   -rmt_silence_loop
    486  27000				   -	       sta	POKEY_BASE+$00,y
    487  27000				   -	       dey
    488  27000				   -	       bpl	rmt_silence_loop
    489  27000				   -	       ENDIF
    490  27000				   -	       rts
    491  27000				   -
    492  27000				   -GetSongLine
    493  27000				   -	       ldx	#0
    494  27000				   -	       stx	v_abeat
    495  27000				   -gsl_loop
    496  27000				   -	       ldx	#0
    497  27000				   -gsl_nextSongLine
    498  27000				   -	       txa
    499  27000				   -	       tay
    500  27000				   -	       lda	(ptrSongLines),y
    501  27000				   -	       cmp	#$fe	;* check for "goto line"
    502  27000				   -	       bcs	gsl_GotoOrEmpty	;* and handle it.
    503  27000				   -			;* (A) = Real track #
    504  27000				   -			;* Get the ptr to the track data and store it in ptrTracksTblLo
    505  27000				   -	       tay
    506  27000				   -	       lda	(ptrTracksTblLo),y
    507  27000				   -	       sta	trackn_TblLo,x
    508  27000				   -	       lda	(ptrTracksTblHi),y
    509  27000				   -gsl_initTrack
    510  27000				   -	       sta	trackn_TblHi,x
    511  27000				   -
    512  27000				   -	       lda	#0	;* reset the track index to 0 trackn_idx[x] = 0
    513  27000				   -	       sta	trackn_idx,x
    514  27000				   -
    515  27000				   -	       lda	#1
    516  27000				   -	       sta	trackn_pause,x	;* #1 is a new track, #0 is no new track
    517  27000				   -
    518  27000				   -	       lda	#$80	;* mark that there is no new instrument
    519  27000				   -	       sta	trackn_instrx2,x	;* #$80 is negative, will BMI when encountered,
    520  27000				   -			;* meaning no new instrument initialisation
    521  27000				   -	       inx
    522  27000				   -	       cpx	#TRACKS	;* if x < TRACKS --> gsl_nextSongLine
    523  27000				   -	       bne	gsl_nextSongLine
    524  27000				   -
    525  27000				   -			;* Done with data points of a song line, move to the next line
    526  27000				   -	       lda	ptrSongLines
    527  27000				   -	       clc
    528  27000				   -	       adc	#TRACKS
    529  27000				   -	       sta	ptrSongLines
    530  27000				   -	       bcc	gsl_skipSongHiIncrement
    531  27000				   -	       inc	ptrSongLines+1
    532  27000				   -gsl_skipSongHiIncrement
    533  27000				   -	       rts
    534  27000				   -
    535  27000				   -gsl_GotoOrEmpty
    536  27000				   -			; "cmp #$FE" performed prior to getting here
    537  27000				   -	       beq	gsl_Goto
    538  27000				   -
    539  27000				   -gsl_Empty
    540  27000				   -	       lda	#<emptytrack
    541  27000				   -	       sta	trackn_TblLo,x
    542  27000				   -	       lda	#>emptytrack
    543  27000				   -	       jmp	gsl_initTrack
    544  27000				   -
    545  27000				   -gsl_Goto
    546  27000				   -			; Data format: 0xFE, ???, low, high bytes of ptr to next song line
    547  27000				   -	       ldy	#2
    548  27000				   -	       lda	(ptrSongLines),y
    549  27000				   -	       tax
    550  27000				   -	       iny
    551  27000				   -	       lda	(ptrSongLines),y
    552  27000				   -	       sta	ptrSongLines+1
    553  27000				   -	       stx	ptrSongLines
    554  27000				   -	       jmp	gsl_loop
    555  27000				   -
    556  27000				   -GetTrackLine
    557  27000				   -rmtoo0
    558  27000				   -rmtoo0a
    559  27000				   -	       lda	v_speed
    560  27000				   -	       sta	v_bspeed
    561  27000				   -	       ldx	#0
    562  27000				   -gtl_loopTracks
    563  27000				   -	       lda	trackn_pause,x
    564  27000				   -	       beq	gtl_checkEndOfLoop
    565  27000				   -	       dec	trackn_pause,x
    566  27000				   -	       bne	gtl_checkEndOfLoop
    567  27000				   -	       inc	trackn_pause,x
    568  27000				   -
    569  27000				   -	       lda	trackn_TblLo,x
    570  27000				   -	       sta	_ns
    571  27000				   -	       lda	trackn_TblHi,x
    572  27000				   -	       sta	_ns+1
    573  27000				   -
    574  27000				   -oo1i
    575  27000				   -	       ldy	trackn_idx,x
    576  27000				   -			;* Get a track data point
    577  27000				   -			;* 0 - 60 = Note, instr and volume data
    578  27000				   -			;* 61 - Volume only
    579  27000				   -			;* 62 = Pause/empty line
    580  27000				   -			;* 63 - Speed, go loop or end
    581  27000				   -	       lda	(_ns),y
    582  27000				   -	       sta	rmtreg1
    583  27000				   -	       iny
    584  27000				   -	       lda	(_ns),y
    585  27000				   -	       sta	rmtreg2
    586  27000				   -	       iny
    587  27000				   -	       tya
    588  27000				   -	       sta	trackn_idx,x
    589  27000				   -
    590  27000				   -	       lda	rmtreg1
    591  27000				   -	       and	#$3f
    592  27000				   -	       cmp	#61
    593  27000				   -	       beq	gtl_ProcessVolumeData
    594  27000				   -	       bcs	gtl_Is62or63
    595  27000				   -
    596  27000				   -			;* if we're here it's a note, so store it.
    597  27000				   -	       sta	trackn_note,x
    598  27000				   -	       IF	FEAT_BASS16
    599  27000				   -	       sta	trackn_outnote,x
    600  27000				   -	       ENDIF
    601  27000				   -
    602  27000				   -			;* Process the instrument #
    603  27000				   -	       lda	rmtreg2
    604  27000				   -	       lsr
    605  27000				   -	       and	#$3f*2
    606  27000				   -	       sta	trackn_instrx2,x
    607  27000				   -
    608  27000				   -gtl_ProcessVolumeData
    609  27000				   -	       lda	rmtreg2
    610  27000				   -	       lsr
    611  27000				   -	       ror	rmtreg1
    612  27000				   -	       lsr
    613  27000				   -	       ror	rmtreg1
    614  27000				   -	       lda	rmtreg1
    615  27000				   -	       and	#$f0
    616  27000				   -	       sta	trackn_volume,x
    617  27000				   -gtl_checkEndOfLoop
    618  27000				   -	       inx
    619  27000				   -	       cpx	#TRACKS
    620  27000				   -	       bne	gtl_loopTracks
    621  27000				   -	       lda	v_bspeed
    622  27000				   -	       sta	v_speed
    623  27000				   -	       sta	v_aspeed
    624  27000				   -	       rts
    625  27000				   -
    626  27000				   -gtl_Is62or63
    627  27000				   -	       cmp	#63
    628  27000				   -	       beq	rmtoo63
    629  27000				   -	       lda	rmtreg1
    630  27000				   -	       and	#$c0
    631  27000				   -	       beq	rmtoo62_b
    632  27000				   -	       asl
    633  27000				   -	       rol
    634  27000				   -	       rol
    635  27000				   -	       sta	trackn_pause,x
    636  27000				   -	       dec	trackn_idx,x
    637  27000				   -	       jmp	gtl_checkEndOfLoop
    638  27000				   -
    639  27000				   -rmtoo62_b
    640  27000				   -	       lda	rmtreg2
    641  27000				   -	       sta	trackn_pause,x
    642  27000				   -	       jmp	gtl_checkEndOfLoop
    643  27000				   -
    644  27000				   -rmtoo63
    645  27000				   -	       lda	rmtreg1
    646  27000				   -	       bmi	rmtoo63_1X
    647  27000				   -	       lda	rmtreg2
    648  27000				   -	       sta	v_bspeed
    649  27000				   -	       jmp	oo1i
    650  27000				   -rmtoo63_1X
    651  27000				   -	       cmp	#255
    652  27000				   -	       beq	rmtoo63_11
    653  27000				   -	       lda	rmtreg2
    654  27000				   -	       sta	trackn_idx,x
    655  27000				   -	       jmp	oo1i
    656  27000				   -
    657  27000				   -rmtoo63_11
    658  27000				   -	       jsr	GetSongLine
    659  27000				   -	       jmp	rmtoo0
    660  27000				   -
    661  27000				   -InitOfNewSetInstrumentsOnly
    662  27000				   -	       ldx	#0
    663  27000				   -p2x1       ldy	trackn_instrx2,x
    664  27000				   -	       bmi	p2x2	;* if negative, no new instrument to initialise for this channel
    665  27000				   -	       jsr	SetUpInstrumentY2
    666  27000				   -	       lda	#$80
    667  27000				   -	       sta	trackn_instrx2,x
    668  27000				   -p2x2
    669  27000				   -	       inx
    670  27000				   -	       cpx	#TRACKS
    671  27000				   -	       bne	p2x1
    672  27000				   -	       rts
    673  27000				   -
    674  27000				   -rmt_play
    675  27000				   -rmt_p0
    676  27000				   -	       jsr	SetPokey
    677  27000				   -rmt_p1
    678  27000				   -	       dec	smc_silence_instrspeed
    679  27000				   -	       beq	rmtp1a
    680  27000				   -	       jmp	rmt_p3
    681  27000				   -rmtp1a
    682  27000				   -	       lda	v_instrspeed
    683  27000				   -	       sta	smc_silence_instrspeed
    684  27000				   -rmt_p2
    685  27000				   -	       dec	v_aspeed
    686  27000				   -	       bne	rmt_p3
    687  27000				   -	       inc	v_abeat
    688  27000				   -	       lda	v_abeat
    689  27000				   -	       cmp	v_maxtracklen
    690  27000				   -	       bne	rmtp2o2
    691  27000				   -	       jsr	GetSongLine
    692  27000				   -rmtp2o2
    693  27000				   -	       jsr	GetTrackLine
    694  27000				   -	       jmp	rmt_p2X
    695  27000				   -go_ppnext
    696  27000				   -	       jmp	ppnext
    697  27000				   -rmt_p2X
    698  27000				   -	       jsr	InitOfNewSetInstrumentsOnly
    699  27000				   -rmt_p3
    700  27000				   -	       lda	#>frqtab
    701  27000				   -	       sta	_nr+1
    702  27000				   -
    703  27000				   -	       ldx	#0
    704  27000				   -rmtpp1
    705  27000				   -	       lda	trackn_instrhb,x
    706  27000				   -	       beq	go_ppnext
    707  27000				   -	       sta	_ns+1
    708  27000				   -	       lda	trackn_instrdb,x
    709  27000				   -	       sta	_ns
    710  27000				   -	       ldy	trackn_instridx,x
    711  27000				   -	       lda	(_ns),y
    712  27000				   -	       sta	rmtreg1
    713  27000				   -	       iny
    714  27000				   -	       lda	(_ns),y
    715  27000				   -	       sta	rmtreg2
    716  27000				   -	       iny
    717  27000				   -	       lda	(_ns),y
    718  27000				   -	       sta	rmtreg3
    719  27000				   -	       iny
    720  27000				   -	       tya
    721  27000				   -	       cmp	trackn_instrlen,x
    722  27000				   -	       bcc	rmtpp2
    723  27000				   -	       beq	rmtpp2
    724  27000				   -	       lda	#$80
    725  27000				   -	       sta	trackn_instrreachend,x
    726  27000				   -rmtpp1b
    727  27000				   -	       lda	trackn_instrlop,x
    728  27000				   -rmtpp2
    729  27000				   -	       sta	trackn_instridx,x
    730  27000				   -	       lda	rmtreg1
    731  27000				   -	       IF	STEREO8T
    732  27000				   -	       cpx	#4
    733  27000				   -	       bcc	rmtpp2s
    734  27000				   -	       lsr
    735  27000				   -	       lsr
    736  27000				   -	       lsr
    737  27000				   -	       lsr
    738  27000				   -rmtpp2s
    739  27000				   -	       ENDIF
    740  27000				   -	       and	#$0f
    741  27000				   -	       ora	trackn_volume,x
    742  27000				   -	       tay
    743  27000				   -	       lda	volumetab,y
    744  27000				   -	       pha
    745  27000				   -	       lda	rmtreg2
    746  27000				   -	       and	#$0e
    747  27000				   -	       tay
    748  27000				   -	       lda	tabbeganddistor,y
    749  27000				   -	       sta	_nr
    750  27000				   -	       pla
    751  27000				   -	       ora	tabbeganddistor+1,y
    752  27000				   -	       sta	trackn_audc,x
    753  27000				   -	       jmp	InstrumentsEffects
    754  27000				   -returnfromInstrumentsEffects
    755  27000				   -	       IF	FEAT_COMMAND2
    756  27000				   -	       lda	#0
    757  27000				   -	       sta	frqaddcmd2
    758  27000				   -	       ENDIF
    759  27000				   -	       lda	rmtreg2
    760  27000				   -	       sta	trackn_command,x
    761  27000				   -	       and	#$70
    762  27000				   -	       lsr
    763  27000				   -	       lsr
    764  27000				   -	       IF	ROM_BASED
    765  27000				   -	       lsr
    766  27000				   -	       tay
    767  27000				   -	       lda	rts_tab+1,y
    768  27000				   -	       pha
    769  27000				   -	       lda	rts_tab,y
    770  27000				   -	       pha
    771  27000				   -	       rts
    772  27000				   -	       ELSE
    773  27000				   -	       sta	jmx+1
    774  27000				   -jmx
    775  27000				   -	       bcc	*
    776  27000				   -	       jmp	cmd0
    777  27000				   -	       nop
    778  27000				   -	       jmp	cmd1
    779  27000				   -	       nop
    780  27000				   -	       jmp	cmd2
    781  27000				   -	       nop
    782  27000				   -	       jmp	cmd3
    783  27000				   -	       nop
    784  27000				   -	       jmp	cmd4
    785  27000				   -	       nop
    786  27000				   -	       jmp	cmd5
    787  27000				   -	       nop
    788  27000				   -	       jmp	cmd6
    789  27000				   -	       nop
    790  27000				   -	       jmp	cmd7
    791  27000				   -	       ENDIF
    792  27000				   -cmd0
    793  27000				   -	       lda	trackn_note,x
    794  27000				   -	       clc
    795  27000				   -	       adc	rmtreg3
    796  27000				   -cmd0a
    797  27000				   -	       IF	FEAT_TABLETYPE
    798  27000				   -	       ldy	trackn_tabletypespeed,x
    799  27000				   -	       bmi	cmd0b
    800  27000				   -	       ENDIF
    801  27000				   -	       clc
    802  27000				   -	       adc	trackn_tablenote,x
    803  27000				   -	       cmp	#61
    804  27000				   -	       bcc	cmd0a1
    805  27000				   -	       lda	#0
    806  27000				   -	       sta	trackn_audc,x
    807  27000				   -	       lda	#63
    808  27000				   -cmd0a1
    809  27000				   -	       IF	FEAT_BASS16
    810  27000				   -	       sta	trackn_outnote,x
    811  27000				   -	       ENDIF
    812  27000				   -	       tay
    813  27000				   -	       lda	(_nr),y
    814  27000				   -	       clc
    815  27000				   -	       adc	trackn_shiftfrq,x
    816  27000				   -	       IF	FEAT_COMMAND2
    817  27000				   -	       clc
    818  27000				   -	       adc	frqaddcmd2
    819  27000				   -	       ENDIF
    820  27000				   -	       sta	trackn_audf,x
    821  27000				   -	       jmp	rmtpp9
    822  27000				   -	       IF	FEAT_TABLETYPE
    823  27000				   -cmd0b
    824  27000				   -	       cmp	#61
    825  27000				   -	       bcc	cmd0b1
    826  27000				   -	       lda	#0
    827  27000				   -	       sta	trackn_audc,x
    828  27000				   -	       lda	#63
    829  27000				   -cmd0b1
    830  27000				   -	       tay
    831  27000				   -	       lda	trackn_shiftfrq,x
    832  27000				   -	       clc
    833  27000				   -	       adc	trackn_tablenote,x
    834  27000				   -	       clc
    835  27000				   -	       adc	(_nr),y
    836  27000				   -	       IF	FEAT_COMMAND2
    837  27000				   -	       clc
    838  27000				   -	       adc	frqaddcmd2
    839  27000				   -	       ENDIF
    840  27000				   -	       sta	trackn_audf,x
    841  27000				   -	       jmp	rmtpp9
    842  27000				   -	       ENDIF
    843  27000				   -cmd1
    844  27000				   -	       IF	FEAT_COMMAND1
    845  27000				   -	       lda	rmtreg3
    846  27000				   -	       sta	trackn_audf,x
    847  27000				   -	       jmp	rmtpp9
    848  27000				   -	       ENDIF
    849  27000				   -cmd2
    850  27000				   -	       IF	FEAT_COMMAND2
    851  27000				   -	       lda	rmtreg3
    852  27000				   -	       sta	frqaddcmd2
    853  27000				   -	       lda	trackn_note,x
    854  27000				   -	       jmp	cmd0a
    855  27000				   -	       ENDIF
    856  27000				   -cmd3
    857  27000				   -	       IF	FEAT_COMMAND3
    858  27000				   -	       lda	trackn_note,x
    859  27000				   -	       clc
    860  27000				   -	       adc	rmtreg3
    861  27000				   -	       sta	trackn_note,x
    862  27000				   -	       jmp	cmd0a
    863  27000				   -	       ENDIF
    864  27000				   -cmd4
    865  27000				   -	       IF	FEAT_COMMAND4
    866  27000				   -	       lda	trackn_shiftfrq,x
    867  27000				   -	       clc
    868  27000				   -	       adc	rmtreg3
    869  27000				   -	       sta	trackn_shiftfrq,x
    870  27000				   -	       lda	trackn_note,x
    871  27000				   -	       jmp	cmd0a
    872  27000				   -	       ENDIF
    873  27000				   -cmd5
    874  27000				   -	       IF	FEAT_COMMAND5&&FEAT_PORTAMENTO
    875  27000				   -	       IF	FEAT_TABLETYPE
    876  27000				   -	       lda	trackn_tabletypespeed,x
    877  27000				   -	       bpl	cmd5a1
    878  27000				   -	       ldy	trackn_note,x
    879  27000				   -	       lda	(_nr),y
    880  27000				   -	       clc
    881  27000				   -	       adc	trackn_tablenote,x
    882  27000				   -	       jmp	cmd5ax
    883  27000				   -	       ENDIF
    884  27000				   -cmd5a1
    885  27000				   -	       lda	trackn_note,x
    886  27000				   -	       clc
    887  27000				   -	       adc	trackn_tablenote,x
    888  27000				   -	       cmp	#61
    889  27000				   -	       bcc	cmd5a2
    890  27000				   -	       lda	#63
    891  27000				   -cmd5a2
    892  27000				   -	       tay
    893  27000				   -	       lda	(_nr),y
    894  27000				   -cmd5ax
    895  27000				   -	       sta	trackn_portafrqc,x
    896  27000				   -	       ldy	rmtreg3
    897  27000				   -	       bne	cmd5a
    898  27000				   -	       sta	trackn_portafrqa,x
    899  27000				   -cmd5a
    900  27000				   -	       tya
    901  27000				   -	       lsr
    902  27000				   -	       lsr
    903  27000				   -	       lsr
    904  27000				   -	       lsr
    905  27000				   -	       sta	trackn_portaspeed,x
    906  27000				   -	       sta	trackn_portaspeeda,x
    907  27000				   -	       lda	rmtreg3
    908  27000				   -	       and	#$0f
    909  27000				   -	       sta	trackn_portadepth,x
    910  27000				   -	       lda	trackn_note,x
    911  27000				   -	       jmp	cmd0a
    912  27000				   -	       ELSE
    913  27000				   -	       IF	FEAT_COMMAND5
    914  27000				   -	       jmp	rmtpp9
    915  27000				   -	       ENDIF
    916  27000				   -	       ENDIF
    917  27000				   -cmd6
    918  27000				   -	       IF	FEAT_COMMAND6&&FEAT_FILTER
    919  27000				   -	       lda	rmtreg3
    920  27000				   -	       clc
    921  27000				   -	       adc	trackn_filter,x
    922  27000				   -	       sta	trackn_filter,x
    923  27000				   -	       lda	trackn_note,x
    924  27000				   -	       jmp	cmd0a
    925  27000				   -	       ELSE
    926  27000				   -	       IF	FEAT_COMMAND6
    927  27000				   -	       jmp	rmtpp9
    928  27000				   -	       ENDIF
    929  27000				   -	       ENDIF
    930  27000				   -cmd7
    931  27000				   -	       IF	FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY
    932  27000				   -	       IF	FEAT_COMMAND7SETNOTE
    933  27000				   -	       lda	rmtreg3
    934  27000				   -	       IF	FEAT_COMMAND7VOLUMEONLY
    935  27000				   -	       cmp	#$80
    936  27000				   -	       beq	cmd7a
    937  27000				   -	       ENDIF
    938  27000				   -	       sta	trackn_note,x
    939  27000				   -	       jmp	cmd0a
    940  27000				   -	       ENDIF
    941  27000				   -	       IF	FEAT_COMMAND7VOLUMEONLY
    942  27000				   -cmd7a
    943  27000				   -	       lda	trackn_audc,x
    944  27000				   -	       ora	#$f0
    945  27000				   -	       sta	trackn_audc,x
    946  27000				   -	       lda	trackn_note,x
    947  27000				   -	       jmp	cmd0a
    948  27000				   -	       ENDIF
    949  27000				   -	       ENDIF
    950  27000				   -rmtpp9
    951  27000				   -	       IF	FEAT_PORTAMENTO
    952  27000				   -	       lda	trackn_portaspeeda,x
    953  27000				   -	       beq	rmtpp10
    954  27000				   -	       sec
    955  27000				   -	       sbc	#1
    956  27000				   -	       sta	trackn_portaspeeda,x
    957  27000				   -	       bne	rmtpp10
    958  27000				   -	       lda	trackn_portaspeed,x
    959  27000				   -	       sta	trackn_portaspeeda,x
    960  27000				   -	       lda	trackn_portafrqa,x
    961  27000				   -	       cmp	trackn_portafrqc,x
    962  27000				   -	       beq	rmtpp10
    963  27000				   -	       bcs	pps1
    964  27000				   -	       adc	trackn_portadepth,x
    965  27000				   -	       bcs	pps8
    966  27000				   -	       cmp	trackn_portafrqc,x
    967  27000				   -	       bcs	pps8
    968  27000				   -	       jmp	pps9
    969  27000				   -pps1
    970  27000				   -	       sbc	trackn_portadepth,x
    971  27000				   -	       bcc	pps8
    972  27000				   -	       cmp	trackn_portafrqc,x
    973  27000				   -	       bcs	pps9
    974  27000				   -pps8
    975  27000				   -	       lda	trackn_portafrqc,x
    976  27000				   -pps9
    977  27000				   -	       sta	trackn_portafrqa,x
    978  27000				   -rmtpp10
    979  27000				   -	       lda	rmtreg2
    980  27000				   -	       and	#$01
    981  27000				   -	       beq	rmtpp11
    982  27000				   -	       lda	trackn_portafrqa,x
    983  27000				   -	       clc
    984  27000				   -	       adc	trackn_shiftfrq,x
    985  27000				   -	       sta	trackn_audf,x
    986  27000				   -rmtpp11
    987  27000				   -	       ENDIF
    988  27000				   -ppnext
    989  27000				   -	       inx
    990  27000				   -	       cpx	#TRACKS
    991  27000				   -	       beq	rmt_p4
    992  27000				   -	       jmp	rmtpp1
    993  27000				   -rmt_p4
    994  27000				   -	       IF	FEAT_AUDCTLMANUALSET
    995  27000				   -	       ldx	#3
    996  27000				   -	       lda	#0
    997  27000				   -qq0        ora	trackn_audctl,x
    998  27000				   -	       dex
    999  27000				   -	       bpl	qq0
   1000  27000				   -	       sta	v_audctl
   1001  27000				   -qq1
   1002  27000				   -	       ldx	v_audctl
   1003  27000				   -	       ELSE
   1004  27000				   -	       ldx	#0
   1005  27000				   -	       stx	v_audctl
   1006  27000				   -	       ENDIF
   1007  27000				   -	       IF	FEAT_FILTER
   1008  27000				   -	       IF	FEAT_FILTERG0L
   1009  27000				   -	       lda	trackn_command+0
   1010  27000				   -	       bpl	qq2
   1011  27000				   -	       lda	trackn_audc+0
   1012  27000				   -	       and	#$0f
   1013  27000				   -	       beq	qq2
   1014  27000				   -	       lda	trackn_audf+0
   1015  27000				   -	       clc
   1016  27000				   -	       adc	trackn_filter+0
   1017  27000				   -	       sta	trackn_audf+2
   1018  27000				   -	       IF	FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG2L
   1019  27000				   -	       lda	trackn_audc+2
   1020  27000				   -	       and	#$10
   1021  27000				   -	       bne	qq1a
   1022  27000				   -	       ENDIF
   1023  27000				   -	       lda	#0
   1024  27000				   -	       sta	trackn_audc+2
   1025  27000				   -qq1a
   1026  27000				   -	       txa
   1027  27000				   -	       ora	#4
   1028  27000				   -	       tax
   1029  27000				   -	       ENDIF
   1030  27000				   -qq2
   1031  27000				   -	       IF	FEAT_FILTERG1L
   1032  27000				   -	       lda	trackn_command+1
   1033  27000				   -	       bpl	qq3
   1034  27000				   -	       lda	trackn_audc+1
   1035  27000				   -	       and	#$0f
   1036  27000				   -	       beq	qq3
   1037  27000				   -	       lda	trackn_audf+1
   1038  27000				   -	       clc
   1039  27000				   -	       adc	trackn_filter+1
   1040  27000				   -	       sta	trackn_audf+3
   1041  27000				   -	       IF	FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG3L
   1042  27000				   -	       lda	trackn_audc+3
   1043  27000				   -	       and	#$10
   1044  27000				   -	       bne	qq2a
   1045  27000				   -	       ENDIF
   1046  27000				   -	       lda	#0
   1047  27000				   -	       sta	trackn_audc+3
   1048  27000				   -qq2a
   1049  27000				   -	       txa
   1050  27000				   -	       ora	#2
   1051  27000				   -	       tax
   1052  27000				   -	       ENDIF
   1053  27000				   -qq3
   1054  27000				   -	       IF	FEAT_FILTERG0L||FEAT_FILTERG1L
   1055  27000				   -	       cpx	v_audctl
   1056  27000				   -	       bne	qq5
   1057  27000				   -	       ENDIF
   1058  27000				   -	       ENDIF
   1059  27000				   -	       IF	FEAT_BASS16
   1060  27000				   -	       IF	FEAT_BASS16G1L
   1061  27000				   -	       lda	trackn_command+1
   1062  27000				   -	       and	#$0e
   1063  27000				   -	       cmp	#6
   1064  27000				   -	       bne	qq4
   1065  27000				   -	       lda	trackn_audc+1
   1066  27000				   -	       and	#$0f
   1067  27000				   -	       beq	qq4
   1068  27000				   -	       ldy	trackn_outnote+1
   1069  27000				   -	       lda	frqtabbasslo,y
   1070  27000				   -	       sta	trackn_audf+0
   1071  27000				   -	       lda	frqtabbasshi,y
   1072  27000				   -	       sta	trackn_audf+1
   1073  27000				   -	       IF	FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG0L
   1074  27000				   -	       lda	trackn_audc+0
   1075  27000				   -	       and	#$10
   1076  27000				   -	       bne	qq3a
   1077  27000				   -	       ENDIF
   1078  27000				   -	       lda	#0
   1079  27000				   -	       sta	trackn_audc+0
   1080  27000				   -qq3a
   1081  27000				   -	       txa
   1082  27000				   -	       ora	#$50
   1083  27000				   -	       tax
   1084  27000				   -	       ENDIF
   1085  27000				   -qq4
   1086  27000				   -	       IF	FEAT_BASS16G3L
   1087  27000				   -	       lda	trackn_command+3
   1088  27000				   -	       and	#$0e
   1089  27000				   -	       cmp	#6
   1090  27000				   -	       bne	qq5
   1091  27000				   -	       lda	trackn_audc+3
   1092  27000				   -	       and	#$0f
   1093  27000				   -	       beq	qq5
   1094  27000				   -	       ldy	trackn_outnote+3
   1095  27000				   -	       lda	frqtabbasslo,y
   1096  27000				   -	       sta	trackn_audf+2
   1097  27000				   -	       lda	frqtabbasshi,y
   1098  27000				   -	       sta	trackn_audf+3
   1099  27000				   -	       IF	FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG2L
   1100  27000				   -	       lda	trackn_audc+2
   1101  27000				   -	       and	#$10
   1102  27000				   -	       bne	qq4a
   1103  27000				   -	       ENDIF
   1104  27000				   -	       lda	#0
   1105  27000				   -	       sta	trackn_audc+2
   1106  27000				   -qq4a
   1107  27000				   -	       txa
   1108  27000				   -	       ora	#$28
   1109  27000				   -	       tax
   1110  27000				   -	       ENDIF
   1111  27000				   -	       ENDIF
   1112  27000				   -qq5
   1113  27000				   -	       stx	v_audctl
   1114  27000				   -	       IF	STEREO8T
   1115  27000				   -	       IF	FEAT_AUDCTLMANUALSET
   1116  27000				   -	       ldx	#3
   1117  27000				   -	       lda	#0
   1118  27000				   -qs0        ora	trackn_audctl+4,x
   1119  27000				   -	       dex
   1120  27000				   -	       bpl	qs0
   1121  27000				   -	       sta	v_audctl2
   1122  27000				   -qs1
   1123  27000				   -	       ldx	v_audctl2
   1124  27000				   -	       ELSE
   1125  27000				   -	       ldx	#0
   1126  27000				   -	       stx	v_audctl2
   1127  27000				   -	       ENDIF
   1128  27000				   -	       IF	FEAT_FILTER
   1129  27000				   -	       IF	FEAT_FILTERG0R
   1130  27000				   -	       lda	trackn_command+0+4
   1131  27000				   -	       bpl	qs2
   1132  27000				   -	       lda	trackn_audc+0+4
   1133  27000				   -	       and	#$0f
   1134  27000				   -	       beq	qs2
   1135  27000				   -	       lda	trackn_audf+0+4
   1136  27000				   -	       clc
   1137  27000				   -	       adc	trackn_filter+0+4
   1138  27000				   -	       sta	trackn_audf+2+4
   1139  27000				   -	       IF	FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG2R
   1140  27000				   -	       lda	trackn_audc+2+4
   1141  27000				   -	       and	#$10
   1142  27000				   -	       bne	qs1a
   1143  27000				   -	       ENDIF
   1144  27000				   -	       lda	#0
   1145  27000				   -	       sta	trackn_audc+2+4
   1146  27000				   -qs1a
   1147  27000				   -	       txa
   1148  27000				   -	       ora	#4
   1149  27000				   -	       tax
   1150  27000				   -	       ENDIF
   1151  27000				   -qs2
   1152  27000				   -	       IF	FEAT_FILTERG1R
   1153  27000				   -	       lda	trackn_command+1+4
   1154  27000				   -	       bpl	qs3
   1155  27000				   -	       lda	trackn_audc+1+4
   1156  27000				   -	       and	#$0f
   1157  27000				   -	       beq	qs3
   1158  27000				   -	       lda	trackn_audf+1+4
   1159  27000				   -	       clc
   1160  27000				   -	       adc	trackn_filter+1+4
   1161  27000				   -	       sta	trackn_audf+3+4
   1162  27000				   -	       IF	FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG3R
   1163  27000				   -	       lda	trackn_audc+3+4
   1164  27000				   -	       and	#$10
   1165  27000				   -	       bne	qs2a
   1166  27000				   -	       ENDIF
   1167  27000				   -	       lda	#0
   1168  27000				   -	       sta	trackn_audc+3+4
   1169  27000				   -qs2a
   1170  27000				   -	       txa
   1171  27000				   -	       ora	#2
   1172  27000				   -	       tax
   1173  27000				   -	       ENDIF
   1174  27000				   -qs3
   1175  27000				   -	       IF	FEAT_FILTERG0R||FEAT_FILTERG1R
   1176  27000				   -	       cpx	v_audctl2
   1177  27000				   -	       bne	qs5
   1178  27000				   -	       ENDIF
   1179  27000				   -	       ENDIF
   1180  27000				   -	       IF	FEAT_BASS16
   1181  27000				   -	       IF	FEAT_BASS16G1R
   1182  27000				   -	       lda	trackn_command+1+4
   1183  27000				   -	       and	#$0e
   1184  27000				   -	       cmp	#6
   1185  27000				   -	       bne	qs4
   1186  27000				   -	       lda	trackn_audc+1+4
   1187  27000				   -	       and	#$0f
   1188  27000				   -	       beq	qs4
   1189  27000				   -	       ldy	trackn_outnote+1+4
   1190  27000				   -	       lda	frqtabbasslo,y
   1191  27000				   -	       sta	trackn_audf+0+4
   1192  27000				   -	       lda	frqtabbasshi,y
   1193  27000				   -	       sta	trackn_audf+1+4
   1194  27000				   -	       IF	FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG0R
   1195  27000				   -	       lda	trackn_audc+0+4
   1196  27000				   -	       and	#$10
   1197  27000				   -	       bne	qs3a
   1198  27000				   -	       ENDIF
   1199  27000				   -	       lda	#0
   1200  27000				   -	       sta	trackn_audc+0+4
   1201  27000				   -qs3a
   1202  27000				   -	       txa
   1203  27000				   -	       ora	#$50
   1204  27000				   -	       tax
   1205  27000				   -	       ENDIF
   1206  27000				   -qs4
   1207  27000				   -	       IF	FEAT_BASS16G3R
   1208  27000				   -	       lda	trackn_command+3+4
   1209  27000				   -	       and	#$0e
   1210  27000				   -	       cmp	#6
   1211  27000				   -	       bne	qs5
   1212  27000				   -	       lda	trackn_audc+3+4
   1213  27000				   -	       and	#$0f
   1214  27000				   -	       beq	qs5
   1215  27000				   -	       ldy	trackn_outnote+3+4
   1216  27000				   -	       lda	frqtabbasslo,y
   1217  27000				   -	       sta	trackn_audf+2+4
   1218  27000				   -	       lda	frqtabbasshi,y
   1219  27000				   -	       sta	trackn_audf+3+4
   1220  27000				   -	       IF	FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG2R
   1221  27000				   -	       lda	trackn_audc+2+4
   1222  27000				   -	       and	#$10
   1223  27000				   -	       bne	qs4a
   1224  27000				   -	       ENDIF
   1225  27000				   -	       lda	#0
   1226  27000				   -	       sta	trackn_audc+2+4
   1227  27000				   -qs4a
   1228  27000				   -	       txa
   1229  27000				   -	       ora	#$28
   1230  27000				   -	       tax
   1231  27000				   -	       ENDIF
   1232  27000				   -	       ENDIF
   1233  27000				   -qs5
   1234  27000				   -	       stx	v_audctl2
   1235  27000				   -	       ENDIF
   1236  27000				   -rmt_p5
   1237  27000				   -	       lda	smc_silence_instrspeed
   1238  27000				   -	       rts
   1239  27000				   -SetPokey
   1240  27000				   -	       IF	STEREO8T
   1241  27000				   -	       ldy	v_audctl2
   1242  27000				   -	       lda	trackn_audf+0+4
   1243  27000				   -	       ldx	trackn_audf+0
   1244  27000				   -	       sta	POKEY_BASE_S+$00
   1245  27000				   -	       stx	POKEY_BASE+$00
   1246  27000				   -	       lda	trackn_audc+0+4
   1247  27000				   -	       ldx	trackn_audc+0
   1248  27000				   -	       sta	POKEY_BASE_S+$01
   1249  27000				   -	       stx	POKEY_BASE+$01
   1250  27000				   -	       lda	trackn_audf+1+4
   1251  27000				   -	       ldx	trackn_audf+1
   1252  27000				   -	       sta	POKEY_BASE_S+$02
   1253  27000				   -	       stx	POKEY_BASE+$02
   1254  27000				   -	       lda	trackn_audc+1+4
   1255  27000				   -	       ldx	trackn_audc+1
   1256  27000				   -	       sta	POKEY_BASE_S+$03
   1257  27000				   -	       stx	POKEY_BASE+$03
   1258  27000				   -	       lda	trackn_audf+2+4
   1259  27000				   -	       ldx	trackn_audf+2
   1260  27000				   -	       sta	POKEY_BASE_S+$04
   1261  27000				   -	       stx	POKEY_BASE+$04
   1262  27000				   -	       lda	trackn_audc+2+4
   1263  27000				   -	       ldx	trackn_audc+2
   1264  27000				   -	       sta	POKEY_BASE_S+$05
   1265  27000				   -	       stx	POKEY_BASE+$05
   1266  27000				   -	       lda	trackn_audf+3+4
   1267  27000				   -	       ldx	trackn_audf+3
   1268  27000				   -	       sta	POKEY_BASE_S+$06
   1269  27000				   -	       stx	POKEY_BASE+$06
   1270  27000				   -	       lda	trackn_audc+3+4
   1271  27000				   -	       ldx	trackn_audc+3
   1272  27000				   -	       sta	POKEY_BASE_S+$07
   1273  27000				   -	       stx	POKEY_BASE+$07
   1274  27000				   -	       lda	v_audctl
   1275  27000				   -	       sty	POKEY_BASE_S+$08
   1276  27000				   -	       sta	POKEY_BASE+$08
   1277  27000				   -	       ELSE
   1278  27000				   -
   1279  27000				   -	       ifconst	RMTVOLUME
   1280  27000				   -	       lda	rmtvolume
   1281  27000				   -	       sta	fourbitfadevalueint
   1282  27000				   -	       endif
   1283  27000				   -	       ldy	v_audctl
   1284  27000				   -	       ldx	trackn_audf+0
   1285  27000				   -	       lda	trackn_audc+0
   1286  27000				   -	       ifconst	RMTVOLUME
   1287  27000				   -	       jsr	fourbitfadeint
   1288  27000				   -	       endif
   1289  27000				   -	       stx	POKEY_BASE+$00+0
   1290  27000				   -	       if	HARD_OF_HEARING
   1291  27000				   -	       stx	POKEY_BASE+$00+0
   1292  27000				   -	       endif
   1293  27000				   -	       sta	POKEY_BASE+$01+0
   1294  27000				   -	       if	HARD_OF_HEARING
   1295  27000				   -	       sta	POKEY_BASE+$01+0
   1296  27000				   -	       endif
   1297  27000				   -
   1298  27000				   -	       ldx	trackn_audf+1
   1299  27000				   -	       lda	trackn_audc+1
   1300  27000				   -	       ifconst	RMTVOLUME
   1301  27000				   -	       jsr	fourbitfadeint
   1302  27000				   -	       endif
   1303  27000				   -	       stx	POKEY_BASE+$00+2
   1304  27000				   -	       if	HARD_OF_HEARING
   1305  27000				   -	       stx	POKEY_BASE+$00+2
   1306  27000				   -	       endif
   1307  27000				   -	       sta	POKEY_BASE+$01+2
   1308  27000				   -	       if	HARD_OF_HEARING
   1309  27000				   -	       sta	POKEY_BASE+$01+2
   1310  27000				   -	       endif
   1311  27000				   -
   1312  27000				   -	       ldx	trackn_audf+2
   1313  27000				   -	       lda	trackn_audc+2
   1314  27000				   -	       ifconst	RMTVOLUME
   1315  27000				   -	       jsr	fourbitfadeint
   1316  27000				   -	       endif
   1317  27000				   -	       stx	POKEY_BASE+$00+4
   1318  27000				   -	       if	HARD_OF_HEARING
   1319  27000				   -	       stx	POKEY_BASE+$00+4
   1320  27000				   -	       endif
   1321  27000				   -	       sta	POKEY_BASE+$01+4
   1322  27000				   -	       if	HARD_OF_HEARING
   1323  27000				   -	       sta	POKEY_BASE+$01+4
   1324  27000				   -	       endif
   1325  27000				   -
   1326  27000				   -	       ldx	trackn_audf+3
   1327  27000				   -	       lda	trackn_audc+3
   1328  27000				   -	       ifconst	RMTVOLUME
   1329  27000				   -	       jsr	fourbitfadeint
   1330  27000				   -	       endif
   1331  27000				   -	       stx	POKEY_BASE+$00+6
   1332  27000				   -	       if	HARD_OF_HEARING
   1333  27000				   -	       stx	POKEY_BASE+$00+6
   1334  27000				   -	       endif
   1335  27000				   -	       sta	POKEY_BASE+$01+6
   1336  27000				   -	       if	HARD_OF_HEARING
   1337  27000				   -	       sta	POKEY_BASE+$01+6
   1338  27000				   -	       endif
   1339  27000				   -
   1340  27000				   -	       sty	POKEY_BASE+$08
   1341  27000				   -	       if	HARD_OF_HEARING
   1342  27000				   -	       sty	POKEY_BASE+$08
   1343  27000				   -	       endif
   1344  27000				   -
   1345  27000				   -	       ENDIF
   1346  27000				   -	       rts
   1347  27000				   -SetUpInstrumentY2
   1348  27000				   -	       lda	(p_instrstable),y
   1349  27000				   -	       sta	trackn_instrdb,x
   1350  27000				   -	       sta	_nt
   1351  27000				   -	       iny
   1352  27000				   -	       lda	(p_instrstable),y
   1353  27000				   -	       sta	trackn_instrhb,x
   1354  27000				   -	       sta	_nt+1
   1355  27000				   -	       ldy	#0
   1356  27000				   -	       lda	(_nt),y
   1357  27000				   -	       sta	trackn_tableend,x
   1358  27000				   -	       clc
   1359  27000				   -	       adc	#1
   1360  27000				   -	       sta	trackn_instridx,x
   1361  27000				   -	       iny
   1362  27000				   -	       lda	(_nt),y
   1363  27000				   -	       sta	trackn_tablelop,x
   1364  27000				   -	       iny
   1365  27000				   -	       lda	(_nt),y
   1366  27000				   -	       sta	trackn_instrlen,x
   1367  27000				   -	       iny
   1368  27000				   -	       lda	(_nt),y
   1369  27000				   -	       sta	trackn_instrlop,x
   1370  27000				   -	       iny
   1371  27000				   -	       lda	(_nt),y
   1372  27000				   -	       sta	trackn_tabletypespeed,x
   1373  27000				   -	       IF	FEAT_TABLETYPE||FEAT_TABLEMODE
   1374  27000				   -	       and	#$3f
   1375  27000				   -	       ENDIF
   1376  27000				   -	       sta	trackn_tablespeeda,x
   1377  27000				   -	       IF	FEAT_TABLEMODE
   1378  27000				   -	       lda	(_nt),y
   1379  27000				   -	       and	#$40
   1380  27000				   -	       sta	trackn_tablemode,x
   1381  27000				   -	       ENDIF
   1382  27000				   -	       iny
   1383  27000				   -	       IF	FEAT_AUDCTLMANUALSET
   1384  27000				   -	       lda	(_nt),y
   1385  27000				   -	       sta	trackn_audctl,x
   1386  27000				   -	       ENDIF
   1387  27000				   -	       iny
   1388  27000				   -	       lda	(_nt),y
   1389  27000				   -	       sta	trackn_volumeslidedepth,x
   1390  27000				   -	       iny
   1391  27000				   -	       lda	(_nt),y
   1392  27000				   -	       sta	trackn_volumemin,x
   1393  27000				   -	       iny
   1394  27000				   -	       lda	(_nt),y
   1395  27000				   -	       sta	trackn_effdelay,x
   1396  27000				   -	       iny
   1397  27000				   -	       lda	(_nt),y
   1398  27000				   -	       tay
   1399  27000				   -	       lda	vibtabbeg,y
   1400  27000				   -	       sta	trackn_effvibratoa,x
   1401  27000				   -	       sta	trackn_effvibratobeg,x
   1402  27000				   -	       lda	vibtabbeg+1,y
   1403  27000				   -	       sta	trackn_effvibratoend,x
   1404  27000				   -	       ldy	#10
   1405  27000				   -	       lda	(_nt),y
   1406  27000				   -	       sta	trackn_effshift,x
   1407  27000				   -	       lda	#128
   1408  27000				   -	       sta	trackn_volumeslidevalue,x
   1409  27000				   -	       lda	#0
   1410  27000				   -	       sta	trackn_instrreachend,x
   1411  27000				   -	       sta	trackn_shiftfrq,x
   1412  27000				   -	       lda	#INSTRPAR
   1413  27000				   -	       sta	trackn_tablea,x
   1414  27000				   -	       tay
   1415  27000				   -	       lda	(_nt),y
   1416  27000				   -	       sta	trackn_tablenote,x
   1417  27000				   -	       IF	FEAT_FILTER
   1418  27000				   -	       lda	#1
   1419  27000				   -	       sta	trackn_filter,x
   1420  27000				   -	       ENDIF
   1421  27000				   -	       rts
   1422  27000				   -InstrumentsEffects
   1423  27000				   -	       lda	trackn_effdelay,x
   1424  27000				   -	       beq	ei2
   1425  27000				   -	       tay
   1426  27000				   -	       dey
   1427  27000				   -	       bne	ei1
   1428  27000				   -	       lda	trackn_shiftfrq,x
   1429  27000				   -	       clc
   1430  27000				   -	       adc	trackn_effshift,x
   1431  27000				   -	       clc
   1432  27000				   -	       ldy	trackn_effvibratoa,x
   1433  27000				   -	       adc	vib0,y
   1434  27000				   -	       sta	trackn_shiftfrq,x
   1435  27000				   -	       iny
   1436  27000				   -	       tya
   1437  27000				   -	       cmp	trackn_effvibratoend,x
   1438  27000				   -	       bne	ei1a
   1439  27000				   -	       lda	trackn_effvibratobeg,x
   1440  27000				   -ei1a
   1441  27000				   -	       sta	trackn_effvibratoa,x
   1442  27000				   -	       jmp	ei2
   1443  27000				   -ei1
   1444  27000				   -	       tya
   1445  27000				   -	       sta	trackn_effdelay,x
   1446  27000				   -ei2
   1447  27000				   -	       lda	trackn_tableend,x
   1448  27000				   -	       cmp	#INSTRPAR
   1449  27000				   -	       beq	ei3
   1450  27000				   -	       lda	trackn_tablespeeda,x
   1451  27000				   -	       bpl	ei2f
   1452  27000				   -ei2c
   1453  27000				   -	       lda	trackn_tablea,x
   1454  27000				   -	       clc
   1455  27000				   -	       adc	#1
   1456  27000				   -	       cmp	trackn_tableend,x
   1457  27000				   -	       bcc	ei2a
   1458  27000				   -	       beq	ei2a
   1459  27000				   -	       lda	trackn_tablelop,x
   1460  27000				   -ei2a
   1461  27000				   -	       sta	trackn_tablea,x
   1462  27000				   -	       lda	trackn_instrdb,x
   1463  27000				   -	       sta	_nt
   1464  27000				   -	       lda	trackn_instrhb,x
   1465  27000				   -	       sta	_nt+1
   1466  27000				   -	       ldy	trackn_tablea,x
   1467  27000				   -	       lda	(_nt),y
   1468  27000				   -	       IF	FEAT_TABLEMODE
   1469  27000				   -	       ldy	trackn_tablemode,x
   1470  27000				   -	       beq	ei2e
   1471  27000				   -	       clc
   1472  27000				   -	       adc	trackn_tablenote,x
   1473  27000				   -ei2e
   1474  27000				   -	       ENDIF
   1475  27000				   -	       sta	trackn_tablenote,x
   1476  27000				   -	       lda	trackn_tabletypespeed,x
   1477  27000				   -	       IF	FEAT_TABLETYPE||FEAT_TABLEMODE
   1478  27000				   -	       and	#$3f
   1479  27000				   -	       ENDIF
   1480  27000				   -ei2f
   1481  27000				   -	       sec
   1482  27000				   -	       sbc	#1
   1483  27000				   -	       sta	trackn_tablespeeda,x
   1484  27000				   -ei3
   1485  27000				   -	       lda	trackn_instrreachend,x
   1486  27000				   -	       bpl	ei4
   1487  27000				   -	       lda	trackn_volume,x
   1488  27000				   -	       beq	ei4
   1489  27000				   -	       cmp	trackn_volumemin,x
   1490  27000				   -	       beq	ei4
   1491  27000				   -	       bcc	ei4
   1492  27000				   -	       tay
   1493  27000				   -	       lda	trackn_volumeslidevalue,x
   1494  27000				   -	       clc
   1495  27000				   -	       adc	trackn_volumeslidedepth,x
   1496  27000				   -	       sta	trackn_volumeslidevalue,x
   1497  27000				   -	       bcc	ei4
   1498  27000				   -	       tya
   1499  27000				   -	       sbc	#16
   1500  27000				   -	       sta	trackn_volume,x
   1501  27000				   -ei4
   1502  27000				   -	       jmp	returnfromInstrumentsEffects
   1503  27000				   -
   1504  27000				   -rmtmoduleend
   1505  27000				   -	       echo	"  (rmtplayer module is using ",[(rmtmoduleend-rmtmodulestart)]d," bytes of rom)"
   1506  27000				   -	       echo	"  (rmtplayer module is using ",[(MEMLOC-RMTRAM-1)]d," bytes of ram)"
   1507  27000				   -
   1508  27000					       endif		; RMT
------- FILE d:\2018dev\7800\7800basic\projects\demo1\lesson4_5.78b.asm
   3151  27000					       endif
   3152  27000					       ifnconst	included.7800vox.asm
------- FILE 7800vox.asm LEVEL 2 PASS 3
      0  27000					       include	7800vox.asm
      1  27000							; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  27000
      3  27000							; AtariVox 7800basic wrapper
      4  27000
      5  27000							; to be called with
      6  27000							; A=# of bytes
      7  27000							;
      8  27000
      9  27000				   -	       ifconst	HSSUPPORT
     10  27000				   -
     11  27000				   -_7800voxstart
     12  27000				   -
     13  27000				   -AVoxReadBytes
     14  27000				   -	       sta	temp8
     15  27000				   -	       jsr	i2c_startwrite
     16  27000				   -	       bcs	eeprom_error
     17  27000				   -
     18  27000				   -	       lda	HSVoxHi
     19  27000				   -	       jsr	i2c_txbyte
     20  27000				   -	       lda	HSVoxLo
     21  27000				   -	       jsr	i2c_txbyte
     22  27000				   -	       jsr	i2c_stopwrite
     23  27000				   -
     24  27000				   -	       jsr	i2c_startread
     25  27000				   -
     26  27000				   -	       ldx	#0
     27  27000				   -AVoxReadBytesLoop
     28  27000				   -	       jsr	i2c_rxbyte
     29  27000				   -	       sta	eeprombuffer,x
     30  27000				   -	       inx
     31  27000				   -	       cpx	temp8
     32  27000				   -	       bne	AVoxReadBytesLoop
     33  27000				   -	       jsr	i2c_stopread
     34  27000				   -	       lda	#0
     35  27000				   -	       rts
     36  27000				   -
     37  27000				   -			; to be called with
     38  27000				   -			; A=# of bytes
     39  27000				   -			;
     40  27000				   -
     41  27000				   -AVoxWriteBytes
     42  27000				   -	       sta	temp8
     43  27000				   -	       jsr	i2c_startwrite
     44  27000				   -	       bcs	eeprom_error
     45  27000				   -
     46  27000				   -	       lda	HSVoxHi
     47  27000				   -	       jsr	i2c_txbyte
     48  27000				   -	       lda	HSVoxLo
     49  27000				   -	       jsr	i2c_txbyte
     50  27000				   -
     51  27000				   -	       ldx	#$00
     52  27000				   -AVoxWriteBytesLoop
     53  27000				   -	       lda	eeprombuffer,x
     54  27000				   -	       jsr	i2c_txbyte
     55  27000				   -	       inx
     56  27000				   -	       cpx	temp8
     57  27000				   -	       bne	AVoxWriteBytesLoop
     58  27000				   -	       jsr	i2c_stopwrite
     59  27000				   -
     60  27000				   -	       lda	#0
     61  27000				   -	       rts
     62  27000				   -
     63  27000				   -eeprom_error
     64  27000				   -	       lda	#$ff
     65  27000				   -	       rts
     66  27000				   -
     67  27000				   -AVoxDetect
     68  27000				   -
     69  27000				   -	       jsr	i2c_startwrite
     70  27000				   -	       bcs	eeprom_error
     71  27000				   -	       lda	#$30
     72  27000				   -	       jsr	i2c_txbyte
     73  27000				   -	       lda	#$00
     74  27000				   -	       jsr	i2c_txbyte
     75  27000				   -	       jsr	i2c_stopwrite
     76  27000				   -	       rts
     77  27000				   -
     78  27000				   -	       include	"i2c7800.inc"
     79  27000				   -	       I2C_SUBS	temp9
     80  27000				   -
     81  27000				   -_7800voxend
     82  27000				   -
     83  27000				   -	       echo	"  (7800vox module is using ",[(_7800voxend-_7800voxstart)]d," bytes)"
     84  27000				   -
     85  27000					       endif
     86  27000
------- FILE d:\2018dev\7800\7800basic\projects\demo1\lesson4_5.78b.asm
   3154  27000					       endif
   3155  27000					       ifnconst	included.pokeysound.asm
------- FILE pokeysound.asm LEVEL 2 PASS 3
      0  27000					       include	pokeysound.asm
      1  27000							; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  27000
      3  27000
      4  27000				   -	       ifconst	pokeysupport
      5  27000				   -
      6  27000				   -pokeysoundmodulestart
      7  27000				   -
      8  27000				   -mutepokey
      9  27000				   -	       lda	#0
     10  27000				   -	       ldy	#7
     11  27000				   -mutepokeyloop
     12  27000				   -	       sta	pokey1pointlo,y
     13  27000				   -	       sta	(pokeybaselo),y
     14  27000				   -	       dey
     15  27000				   -	       bpl	mutepokeyloop
     16  27000				   -	       rts
     17  27000				   -
     18  27000				   -	       ifconst	pokeysfxsupport
     19  27000				   -
     20  27000				   -checkpokeyplaying
     21  27000				   -	       ldx	#6
     22  27000				   -checkpokeyplayingloop
     23  27000				   -	       lda	pokey1pointlo,x
     24  27000				   -	       ora	pokey1pointhi,x
     25  27000				   -	       beq	pokeychannelinactive
     26  27000				   -	       jsr	playpokeysfxA	; x=channel*2
     27  27000				   -pokeychannelinactive
     28  27000				   -	       dex
     29  27000				   -	       dex
     30  27000				   -	       bpl	checkpokeyplayingloop
     31  27000				   -	       rts
     32  27000				   -
     33  27000				   -playpokeysfxA
     34  27000				   -	       txa
     35  27000				   -	       tay
     36  27000				   -	       lda	pokey1tick,x
     37  27000				   -	       beq	playpokeysfxAcont
     38  27000				   -	       sec
     39  27000				   -	       sbc	#1
     40  27000				   -	       sta	pokey1tick,x	; sound resolution is >1 frame, and we're mid-tock...
     41  27000				   -	       rts
     42  27000				   -
     43  27000				   -playpokeysfxAcont
     44  27000				   -	       lda	pokey1frames,x	; set the frame countdown for this sound chunk
     45  27000				   -	       sta	pokey1tick,x
     46  27000				   -
     47  27000				   -	       lda	pokey1priority,x	; decrease the sound's priority if its non-zero
     48  27000				   -	       beq	playpokeysfxAcont2
     49  27000				   -	       sec
     50  27000				   -	       sbc	#1
     51  27000				   -	       sta	pokey1priority,x
     52  27000				   -playpokeysfxAcont2
     53  27000				   -
     54  27000				   -			; *** FREQUENCY
     55  27000				   -	       lda	(pokey1pointlo,x)
     56  27000				   -	       sta	inttemp1
     57  27000				   -	       clc
     58  27000				   -	       adc	pokey1offset,x	; take into account any pitch modification
     59  27000				   -	       sta	(pokeybaselo),y	; PAUDF0,0
     60  27000				   -
     61  27000				   -			;advance the data pointer +1
     62  27000				   -	       inc	pokey1pointlo,x
     63  27000				   -	       bne	skippokeyhiinc1
     64  27000				   -	       inc	pokey1pointhi,x
     65  27000				   -skippokeyhiinc1
     66  27000				   -
     67  27000				   -			; *** WAVE
     68  27000				   -	       lda	(pokey1pointlo,x)
     69  27000				   -	       asl
     70  27000				   -	       asl
     71  27000				   -	       asl
     72  27000				   -	       asl		; x16
     73  27000				   -
     74  27000				   -			;advance the data pointer +1
     75  27000				   -	       inc	pokey1pointlo,x
     76  27000				   -	       bne	skippokeyhiinc2
     77  27000				   -	       inc	pokey1pointhi,x
     78  27000				   -skippokeyhiinc2
     79  27000				   -
     80  27000				   -	       ora	(pokey1pointlo,x)
     81  27000				   -	       iny
     82  27000				   -	       sta	(pokeybaselo),y
     83  27000				   -
     84  27000				   -	       ora	inttemp1	; check if F|C|V=0
     85  27000				   -	       beq	zeropokeypoint	; if so, we're at the end of the sound.
     86  27000				   -
     87  27000				   -			; advance the pointer +1, on to the next sound chunk
     88  27000				   -	       inc	pokey1pointlo,x
     89  27000				   -	       bne	skippokeyhiinc3
     90  27000				   -	       inc	pokey1pointhi,x
     91  27000				   -skippokeyhiinc3
     92  27000				   -	       rts
     93  27000				   -
     94  27000				   -zeropokeypoint
     95  27000				   -	       sta	pokey1pointlo,x
     96  27000				   -	       sta	pokey1pointhi,x
     97  27000				   -	       sta	pokey1priority,x
     98  27000				   -	       rts
     99  27000				   -
    100  27000				   -schedulepokeysfx
    101  27000				   -	       ldx	#6
    102  27000				   -schedulepokeysfxloop
    103  27000				   -	       lda	pokey1pointlo,x
    104  27000				   -	       ora	pokey1pointhi,x
    105  27000				   -	       bne	schedulespokeysearch
    106  27000				   -	       jmp	schedulepokeyX	; we found an unused channel, so use it...
    107  27000				   -schedulespokeysearch
    108  27000				   -	       dex
    109  27000				   -	       dex
    110  27000				   -	       bpl	schedulepokeysfxloop
    111  27000				   -
    112  27000				   -			; if we're here, all 4 channels are presently playing a sound...
    113  27000				   -	       ldy	#1
    114  27000				   -	       lda	(sfxinstrumentlo),y	; peek at the priority of this sfx...
    115  27000				   -	       bne	schedulepokeysfxcont1
    116  27000				   -	       rts		; ...and skip it if it's 0 priority
    117  27000				   -schedulepokeysfxcont1
    118  27000				   -
    119  27000				   -			; figure out which current sound has the lowest priority...
    120  27000				   -	       lda	#0
    121  27000				   -	       sta	temp8
    122  27000				   -	       lda	pokey1priority
    123  27000				   -	       sta	temp9
    124  27000				   -	       ldx	#6
    125  27000				   -findlowprioritypokeyloop
    126  27000				   -	       lda	pokey1priority,x
    127  27000				   -	       cmp	temp9
    128  27000				   -	       bcs	findlowprioritypokeyloopcontinue
    129  27000				   -	       sta	temp9
    130  27000				   -	       stx	temp8
    131  27000				   -findlowprioritypokeyloopcontinue
    132  27000				   -	       dex
    133  27000				   -	       dex
    134  27000				   -	       bne	findlowprioritypokeyloop
    135  27000				   -	       ldx	temp8	; the low priority channel we'll interrupt
    136  27000				   -
    137  27000				   -schedulepokeyX
    138  27000				   -			;called with X=2*pokey channel to play on...
    139  27000				   -	       ldy	#1	; get priority and sound-resolution (in frames)
    140  27000				   -	       lda	(sfxinstrumentlo),y
    141  27000				   -	       sta	pokey1priority,x
    142  27000				   -	       iny
    143  27000				   -	       lda	(sfxinstrumentlo),y
    144  27000				   -	       sta	pokey1frames,x
    145  27000				   -
    146  27000				   -	       lda	sfxinstrumentlo
    147  27000				   -	       clc
    148  27000				   -	       adc	#3
    149  27000				   -	       sta	pokey1pointlo,x
    150  27000				   -	       lda	sfxinstrumenthi
    151  27000				   -	       adc	#0
    152  27000				   -	       sta	pokey1pointhi,x
    153  27000				   -	       lda	sfxpitchoffset
    154  27000				   -	       sta	pokey1offset,x
    155  27000				   -	       lda	#0
    156  27000				   -	       sta	pokey1tick,x
    157  27000				   -	       rts
    158  27000				   -	       else
    159  27000				   -schedulepokeysfx		; just some stubs
    160  27000				   -checkpokeyplaying
    161  27000				   -	       rts
    162  27000				   -	       endif		; pokeysfxsupport
    163  27000				   -
    164  27000				   -			; pokey detection routine. we check for pokey in the XBOARD/XM location,
    165  27000				   -			; and the standard $4000 location.
    166  27000				   -			; if pokey the pokey is present, this routine will reset it.
    167  27000				   -	       ifconst	pokeyaddress
    168  27000				   -detectpokeylocation
    169  27000				   -	       lda	#<pokeyaddress
    170  27000				   -	       sta	pokeybaselo
    171  27000				   -	       lda	#>pokeyaddress
    172  27000				   -	       sta	pokeybasehi
    173  27000				   -	       lda	#$ff
    174  27000				   -	       sta	pokeydetected
    175  27000				   -
    176  27000				   -	       if	pokeyaddress = $450
    177  27000				   -	       lda	XCTRL1s
    178  27000				   -	       ora	#%00010100
    179  27000				   -	       sta	XCTRL1s
    180  27000				   -	       sta	XCTRL1
    181  27000				   -	       endif
    182  27000				   -
    183  27000				   -
    184  27000				   -	       lda	#0
    185  27000				   -	       ldy	#15
    186  27000				   -clearpokeyloop
    187  27000				   -	       sta	(pokeybase),y
    188  27000				   -	       dey
    189  27000				   -	       bpl	clearpokeyloop
    190  27000				   -			; take pokey out of reset...
    191  27000				   -	       ldy	#PSKCTL
    192  27000				   -	       lda	#3
    193  27000				   -	       sta	(pokeybase),y
    194  27000				   -	       ldy	#PAUDCTL
    195  27000				   -	       lda	#0
    196  27000				   -	       sta	(pokeybase),y
    197  27000				   -	       rts
    198  27000				   -	       else		; !pokeyaddress
    199  27000				   -detectpokeylocation
    200  27000				   -			;XBoard/XM...
    201  27000				   -	       ldx	#2
    202  27000				   -detectpokeyloop
    203  27000				   -	       lda	XCTRL1s
    204  27000				   -	       ora	#%00010100
    205  27000				   -	       and	POKEYXMMASK,x
    206  27000				   -	       sta	XCTRL1s
    207  27000				   -	       sta	XCTRL1
    208  27000				   -
    209  27000				   -	       lda	POKEYCHECKLO,x
    210  27000				   -	       sta	pokeybaselo
    211  27000				   -	       lda	POKEYCHECKHI,x
    212  27000				   -	       sta	pokeybasehi
    213  27000				   -	       jsr	checkforpokey
    214  27000				   -	       lda	pokeydetected
    215  27000				   -	       beq	foundpokeychip
    216  27000				   -	       dex
    217  27000				   -	       bpl	detectpokeyloop
    218  27000				   -foundpokeychip
    219  27000				   -	       eor	#$ff	; invert state for 7800basic if...then test
    220  27000				   -	       sta	pokeydetected
    221  27000				   -	       rts
    222  27000				   -
    223  27000				   -POKEYXMMASK
    224  27000				   -			;     XM POKEY on    XM POKEY off   XM POKEY off
    225  27000				   -	       .byte	%11111111, %11101111, %11101111
    226  27000				   -
    227  27000				   -POKEYCHECKLO
    228  27000				   -	       .byte	<$0450, <$0450, <$4000
    229  27000				   -POKEYCHECKHI
    230  27000				   -	       .byte	>$0450, >$0450, >$4000
    231  27000				   -
    232  27000				   -checkforpokey
    233  27000				   -	       ldy	#$0f
    234  27000				   -	       lda	#$00
    235  27000				   -	       sta	pokeydetected	; start off by assuming pokey will be detected
    236  27000				   -resetpokeyregistersloop
    237  27000				   -	       sta	(pokeybase),y
    238  27000				   -	       dey
    239  27000				   -	       bpl	resetpokeyregistersloop
    240  27000				   -
    241  27000				   -	       ldy	#PAUDCTL
    242  27000				   -	       sta	(pokeybase),y
    243  27000				   -	       ldy	#PSKCTL
    244  27000				   -	       sta	(pokeybase),y
    245  27000				   -
    246  27000				   -			; let the dust settle...
    247  27000				   -	       nop
    248  27000				   -	       nop
    249  27000				   -	       nop
    250  27000				   -
    251  27000				   -	       lda	#4
    252  27000				   -	       sta	temp9
    253  27000				   -pokeycheckloop1
    254  27000				   -			; we're in reset, so the RANDOM register should read $ff...
    255  27000				   -	       ldy	#PRANDOM
    256  27000				   -	       lda	(pokeybase),y
    257  27000				   -	       cmp	#$ff
    258  27000				   -	       bne	nopokeydetected
    259  27000				   -	       dec	temp9
    260  27000				   -	       bne	pokeycheckloop1
    261  27000				   -
    262  27000				   -			; take pokey out of reset...
    263  27000				   -	       ldy	#PSKCTL
    264  27000				   -	       lda	#3
    265  27000				   -	       sta	(pokeybase),y
    266  27000				   -	       ldy	#PAUDCTL
    267  27000				   -	       lda	#0
    268  27000				   -	       sta	(pokeybase),y
    269  27000				   -
    270  27000				   -			; let the dust settle again...
    271  27000				   -	       nop
    272  27000				   -	       nop
    273  27000				   -	       nop
    274  27000				   -
    275  27000				   -	       lda	#4
    276  27000				   -	       sta	temp9
    277  27000				   -pokeycheckloop2
    278  27000				   -			; we're out of reset, so RANDOM should read non-$ff...
    279  27000				   -	       ldy	#PRANDOM
    280  27000				   -	       lda	(pokeybase),y
    281  27000				   -	       cmp	#$ff
    282  27000				   -	       beq	skippokeycheckreturn
    283  27000				   -	       rts
    284  27000				   -skippokeycheckreturn
    285  27000				   -	       dec	temp9
    286  27000				   -	       bne	pokeycheckloop2
    287  27000				   -nopokeydetected
    288  27000				   -	       dec	pokeydetected	; pokeydetected=#$ff
    289  27000				   -	       rts
    290  27000				   -
    291  27000				   -	       endif		; !pokeyaddress
    292  27000				   -
    293  27000				   -pokeysoundmoduleend
    294  27000				   -
    295  27000				   -	       echo	"  (pokeysound module is using ",[(pokeysoundmoduleend-pokeysoundmodulestart)]d," bytes of rom)"
    296  27000				   -
    297  27000					       endif		; pokeysupport
------- FILE d:\2018dev\7800\7800basic\projects\demo1\lesson4_5.78b.asm
   3157  27000					       endif
   3158  27000					       ifnconst	included.snes2atari.asm
------- FILE snes2atari.asm LEVEL 2 PASS 3
      0  27000					       include	snes2atari.asm
      1  27000							; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  27000
      3  27000				   -	       ifconst	SNES2ATARISUPPORT
      4  27000				   -snes2atarimodulestart
      5  27000				   -
      6  27000				   -SNES_CLOCK_PORT_BIT
      7  27000				   -	       .byte	$10,$01
      8  27000				   -SNES_CTLSWA_MASK
      9  27000				   -	       .byte	$30,$03
     10  27000				   -SNES_CTLSWA_SIGNAL
     11  27000				   -	       .byte	$C0,$0C
     12  27000				   -
     13  27000				   -			; Probe each port for SNES, and see if autodetection succeeds anywhere.
     14  27000				   -SNES_AUTODETECT
     15  27000				   -	       ifconst	HSSUPPORT
     16  27000				   -			; ** an atarivox might be plugged in, so we skip scanning the second
     17  27000				   -			; ** port for a snes if vox was detected...
     18  27000				   -	       lda	hsdevice	; b1 high means atarivox/savekey was detected
     19  27000				   -	       lsr
     20  27000				   -	       and	#1
     21  27000				   -	       eor	#1
     22  27000				   -	       tax
     23  27000				   -	       else
     24  27000				   -	       ldx	#1
     25  27000				   -	       endif		; HSSUPPORT
     26  27000				   -
     27  27000				   -SNES_AUTODETECT_LOOP
     28  27000				   -	       ifnconst	MULTIBUTTON	; snesdetect shouldn't be used in multibutton mode
     29  27000				   -	       lda	#1	; proline
     30  27000				   -	       sta	port0control,x
     31  27000				   -	       jsr	setportforinput
     32  27000				   -	       jsr	setonebuttonmode
     33  27000				   -	       jsr	SNES_READ
     34  27000				   -	       lda	snesdetected0,x
     35  27000				   -	       bne	SNES_AUTODETECT_FOUND
     36  27000				   -			; detection failed
     37  27000				   -	       jsr	setportforinput
     38  27000				   -	       jsr	settwobuttonmode
     39  27000				   -	       dex
     40  27000				   -	       bpl	SNES_AUTODETECT_LOOP
     41  27000				   -	       rts
     42  27000				   -SNES_AUTODETECT_FOUND
     43  27000				   -	       lda	#11	; formally set the snes controller
     44  27000				   -	       sta	port0control,x
     45  27000				   -	       stx	snesport
     46  27000				   -	       endif		; !MULTIBUTTON
     47  27000				   -	       rts
     48  27000					       endif		; SNES2ATARISUPPORT
     49  27000
     50  27000				    snes2atarihandler
     51  27000				   -	       ifconst	SNES2ATARISUPPORT
     52  27000				   -SNES2ATARI
     53  27000				   -	       jsr	SNES_READ
     54  27000				   -	       jmp	buttonreadloopreturn
     55  27000				   -
     56  27000				   -SNES_READ
     57  27000				   -			; x=0 for left port, x=1 for right
     58  27000				   -	       lda	port0control,x
     59  27000				   -	       cmp	#11	; snes
     60  27000				   -	       bne	snes2atari_signal_go	; if this is a first auto-detection read, go ahead and signal
     61  27000				   -	       lda	snesdetected0,x
     62  27000				   -	       bne	snes2atari_signal_skip	; if snes was available in previous frames, skip signalling
     63  27000				   -snes2atari_signal_go
     64  27000				   -	       jsr	SNES2ATARI_SIGNAL
     65  27000				   -snes2atari_signal_skip
     66  27000				   -
     67  27000				   -	       lda	CTLSWA
     68  27000				   -	       and	SWCHA_DIRMASK+1,x	; preserve other nibble
     69  27000				   -	       ora	SNES_CTLSWA_MASK,x
     70  27000				   -	       sta	CTLSWA	; enable pins UP/DOWN to work as outputs
     71  27000				   -
     72  27000				   -	       lda	SWCHA
     73  27000				   -	       and	SWCHA_DIRMASK+1,x	; preserve other nibble
     74  27000				   -	       ora	SNES_CTLSWA_MASK,x
     75  27000				   -
     76  27000				   -	       sta	SWCHA	; latch+clock high
     77  27000				   -	       nop
     78  27000				   -	       nop
     79  27000				   -	       nop
     80  27000				   -	       nop
     81  27000				   -	       nop
     82  27000				   -	       nop
     83  27000				   -	       nop
     84  27000				   -	       lda	SWCHA
     85  27000				   -	       and	SWCHA_DIRMASK+1,x	; preserve other nibble
     86  27000				   -	       sta	SWCHA	; latch and clock low
     87  27000				   -	       ldy	#16	; 16 bits
     88  27000				   -SNES2ATARILOOP
     89  27000				   -	       rol	INPT4,x	; sample data into carry
     90  27000				   -	       lda	SWCHA
     91  27000				   -	       and	SWCHA_DIRMASK+1,x	; preserve other nibble
     92  27000				   -	       ora	SNES_CLOCK_PORT_BIT,x
     93  27000				   -	       sta	SWCHA	; clock low
     94  27000				   -	       rol	snes2atari0lo,x
     95  27000				   -	       rol	snes2atari0hi,x
     96  27000				   -	       lda	SWCHA
     97  27000				   -	       and	SWCHA_DIRMASK+1,x	; preserve other nibble
     98  27000				   -	       sta	SWCHA	; latch and clock low
     99  27000				   -	       dey		; next bit
    100  27000				   -	       bne	SNES2ATARILOOP
    101  27000				   -	       rol	INPT4,x	; 17th bit should be lo if controller is there.
    102  27000				   -	       rol		; 17th snes bit into A low bit
    103  27000				   -	       eor	snes2atari0lo,x	; 16th bit should be hi if controller is there.
    104  27000				   -	       and	#1
    105  27000				   -	       sta	snesdetected0,x
    106  27000				   -	       beq	SNES_STOP_CLOCK	; if snes isn't detected, leave port in default state
    107  27000				   -	       stx	snesport	; snesport keeps the index of the latest autodetected controller
    108  27000				   -	       lda	SWCHA
    109  27000				   -	       and	SWCHA_DIRMASK+1,x	; preserve other nibble
    110  27000				   -	       ora	SNES_CLOCK_PORT_BIT,x
    111  27000				   -	       jmp	SNES_STOP_CLOCK
    112  27000				   -SNES_STOP_CLOCK
    113  27000				   -	       sta	SWCHA	; clock low
    114  27000				   -	       lda	CTLSWA
    115  27000				   -	       and	SWCHA_DIRMASK+1,x	; preserve other nibble
    116  27000				   -			;ora SNES_CLOCK_PORT_BIT,x
    117  27000				   -	       sta	CTLSWA	; set port bits to input avoid conflict with other drivers
    118  27000				   -	       ifconst	MULTIBUTTON
    119  27000				   -	       lda	snesdetected0,x
    120  27000				   -	       bne	snesexit
    121  27000				   -	       lda	#1	; proline
    122  27000				   -	       sta	port0control,x
    123  27000				   -	       jmp	settwobuttonmode
    124  27000				   -snesexit
    125  27000				   -	       lda	#6
    126  27000				   -	       sta	multibuttoncount0,x
    127  27000				   -			; stuff directions into sSWCHA nibble and buttons into sINPT1,x...
    128  27000				   -	       lda	s2a_joyshiftcount,x
    129  27000				   -	       tay
    130  27000				   -	       lda	snes2atari0hi,x
    131  27000				   -snesjoypadloop
    132  27000				   -	       lsr
    133  27000				   -	       rol	inttemp6
    134  27000				   -	       dey
    135  27000				   -	       bpl	snesjoypadloop
    136  27000				   -	       lda	sSWCHA
    137  27000				   -	       ora	SWCHA_DIRMASK,x	; turn off the bits for this port
    138  27000				   -	       sta	sSWCHA
    139  27000				   -	       lda	inttemp6
    140  27000				   -	       ora	SWCHA_DIRMASK+1,x	; don't change the other port
    141  27000				   -	       and	sSWCHA
    142  27000				   -	       sta	sSWCHA
    143  27000				   -
    144  27000				   -			; snes2atari0hi = B  Y  Se St *  *  *	*
    145  27000				   -			; snes2atari0lo = A  X  Ls Rs
    146  27000				   -			; sINPT1	 = B  A  Y  X  Ls Rs Se St
    147  27000				   -	       lda	snes2atari0lo,x
    148  27000				   -	       sta	inttemp5
    149  27000				   -	       lda	snes2atari0hi,x
    150  27000				   -	       sta	inttemp6
    151  27000				   -	       asl	inttemp5	; A
    152  27000				   -	       rol
    153  27000				   -	       asl	inttemp6	; B
    154  27000				   -	       rol
    155  27000				   -	       asl	inttemp6	; Y
    156  27000				   -	       rol
    157  27000				   -	       asl	inttemp5	; X
    158  27000				   -	       rol
    159  27000				   -	       asl	inttemp5	; Ls
    160  27000				   -	       rol
    161  27000				   -	       asl	inttemp5	; Rs
    162  27000				   -	       rol
    163  27000				   -	       asl	inttemp6	; Ls
    164  27000				   -	       rol
    165  27000				   -	       asl	inttemp6	; Rs
    166  27000				   -	       rol
    167  27000				   -	       eor	#%11000000	; invert to match proline
    168  27000				   -	       sta	sINPT1,x
    169  27000				   -	       endif		; MULTIBUTTON
    170  27000				   -	       rts
    171  27000				   -SNES2ATARI_SIGNAL
    172  27000				   -			; signal to SNES2ATARI++ that we want SNES mode...
    173  27000				   -	       lda	CTLSWA
    174  27000				   -	       and	SWCHA_DIRMASK+1,x	; preserve other nibble
    175  27000				   -	       ora	SNES_CTLSWA_SIGNAL,x
    176  27000				   -	       sta	CTLSWA
    177  27000				   -	       lda	SWCHA
    178  27000				   -	       and	SWCHA_DIRMASK+1,x	; preserve other nibble
    179  27000				   -	       sta	SWCHA
    180  27000				   -	       ldy	#16
    181  27000				   -SNES_SIGNAL_LOOP
    182  27000				   -	       dey
    183  27000				   -	       bne	SNES_SIGNAL_LOOP
    184  27000				   -	       lda	SWCHA
    185  27000				   -	       ora	SWCHA_DIRMASK,x
    186  27000				   -	       sta	SWCHA
    187  27000				   -	       rts
    188  27000				   -s2a_joyshiftcount
    189  27000				   -	       .byte	7,3
    190  27000				   -snes2atarimoduleend
    191  27000				   -	       echo	"  (snes2atari module is using ",[(snes2atarimoduleend-snes2atarimodulestart)]d," bytes of rom)"
    192  27000					       endif		; SNES2ATARISUPPORT
    193  27000
    194  27000
------- FILE d:\2018dev\7800\7800basic\projects\demo1\lesson4_5.78b.asm
   3160  27000					       endif
   3161  27000					       ifnconst	included.mega7800.asm
------- FILE mega7800.asm LEVEL 2 PASS 3
      0  27000					       include	mega7800.asm
      1  27000							; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  27000
      3  27000				    mega7800handlerstart
      4  27000				    mega7800handler
      5  27000				   -	       ifconst	MEGA7800SUPPORT
      6  27000				   -
      7  27000				   -			; ** stuff the joyick directions into the shadow register
      8  27000				   -	       lda	sSWCHA	; clear previous dirs for this pad, from
      9  27000				   -	       ora	SWCHA_DIRMASK,x	; our sSWCHA nibble.
     10  27000				   -	       sta	sSWCHA
     11  27000				   -	       lda	SWCHA	; load the actual joystick dirs, ensuring
     12  27000				   -	       ora	SWCHA_DIRMASK+1,x	; we don't change the other nibble.
     13  27000				   -	       and	sSWCHA
     14  27000				   -	       sta	sSWCHA
     15  27000				   -
     16  27000				   -			; x=0 for left port, x=1 for right
     17  27000				   -
     18  27000				   -	       lda	#0
     19  27000				   -	       sta	inttemp5	; temporary button-state storage
     20  27000				   -	       sta	inttemp6	; temporary button-state storage
     21  27000				   -
     22  27000				   -	       lda	CTLSWA
     23  27000				   -	       and	SWCHA_DIRMASK+1,x	; preserve other port nibble
     24  27000				   -	       ora	MEGA_INIT,x
     25  27000				   -	       sta	CTLSWA	; enable pins UP/DOWN to work as outputs
     26  27000				   -
     27  27000				   -			; the controller type bits take a few cycles to get set after we start
     28  27000				   -			; an extended read, so we'll start the first extended read early...
     29  27000				   -	       lda	SWCHA
     30  27000				   -	       and	SWCHA_DIRMASK+1,x	; preserve other port nibble
     31  27000				   -	       sta	SWCHA	; all bits are low, which STARTS the extended read
     32  27000				   -	       nop
     33  27000				   -	       nop
     34  27000				   -
     35  27000				   -			; first read  will be pad state (mega7800 connect and controller type)
     36  27000				   -			; second read will be 3 button support (SACB)
     37  27000				   -			; third read  will be 6 button support (MXYZ)
     38  27000				   -
     39  27000				   -	       ldy	#5	; read 6x states, with the first 2x being the controller type
     40  27000				   -m7readloop
     41  27000				   -	       lda	SWCHA
     42  27000				   -	       and	SWCHA_DIRMASK+1,x	; preserve other port nibble
     43  27000				   -	       sta	SWCHA	; all bits are low, which STARTS the read
     44  27000				   -
     45  27000				   -	       lda	SWCHA
     46  27000				   -	       cpx	#1
     47  27000				   -	       bne	m7skipp1shift
     48  27000				   -	       asl
     49  27000				   -	       asl
     50  27000				   -	       asl
     51  27000				   -	       asl
     52  27000				   -m7skipp1shift
     53  27000				   -	       asl		; button bit 1 into carry
     54  27000				   -	       rol	inttemp6
     55  27000				   -	       rol	inttemp5
     56  27000				   -	       asl		; button bit 0 into carry
     57  27000				   -	       rol	inttemp6
     58  27000				   -	       rol	inttemp5
     59  27000				   -
     60  27000				   -	       lda	SWCHA
     61  27000				   -	       and	SWCHA_DIRMASK+1,x	; preserve other port nibble
     62  27000				   -	       ora	MEGA_NEXT,x
     63  27000				   -	       sta	SWCHA
     64  27000				   -
     65  27000				   -	       dey
     66  27000				   -	       bpl	m7readloop
     67  27000				   -
     68  27000				   -	       lda	CTLSWA
     69  27000				   -	       and	SWCHA_DIRMASK+1,x	; preserve other port nibble
     70  27000				   -	       sta	CTLSWA	; set this port back to input
     71  27000				   -
     72  27000				   -			; if mega7800 isn't detected this frame, unpress any buttons...
     73  27000				   -	       lda	inttemp5
     74  27000				   -	       and	#%00000011
     75  27000				   -	       beq	m7skipscuttle
     76  27000				   -	       lda	#$ff
     77  27000				   -	       sta	inttemp6
     78  27000				   -	       ifconst	MULTIBUTTON
     79  27000				   -			; the controller isn't present... revert to proline
     80  27000				   -	       lda	#1	; proline
     81  27000				   -	       sta	port0control,x
     82  27000				   -	       rts
     83  27000				   -	       endif		; MULTIBUTTON
     84  27000				   -m7skipscuttle
     85  27000				   -	       ifconst	MULTIBUTTON
     86  27000				   -	       lda	inttemp5
     87  27000				   -	       lsr
     88  27000				   -	       lsr
     89  27000				   -	       and	#3
     90  27000				   -	       tay
     91  27000				   -	       lda	megabuttons,y
     92  27000				   -	       sta	multibuttoncount0,x
     93  27000				   -	       endif		; MULTIBUTTON
     94  27000				   -
     95  27000				   -	       lda	inttemp5
     96  27000				   -	       sta	mega7800state0,x
     97  27000				   -	       lda	inttemp6
     98  27000				   -	       sta	mega7800data0,x
     99  27000				   -
    100  27000				   -	       ifconst	MULTIBUTTON
    101  27000				   -			; now update the genric multi-button bits...
    102  27000				   -	       ldy	#7
    103  27000				   -m7shuffleloop
    104  27000				   -	       lda	inttemp6
    105  27000				   -	       and	m7reorder,y
    106  27000				   -	       clc
    107  27000				   -	       adc	#$FF	; bit value in carry
    108  27000				   -	       rol	inttemp5
    109  27000				   -	       dey
    110  27000				   -	       bpl	m7shuffleloop
    111  27000				   -	       lda	inttemp5
    112  27000				   -	       eor	#%11000000
    113  27000				   -	       sta	sINPT1,x
    114  27000				   -	       rts
    115  27000				   -
    116  27000				   -megabuttons
    117  27000				   -	       .byte	6,2,3,2
    118  27000				   -m7reorder
    119  27000				   -			;	  S	     M	       Z	 Y
    120  27000				   -	       .byte	%00100000,%00000010,%00000100,%00001000
    121  27000				   -			;	  X	     C	       A	 B
    122  27000				   -	       .byte	%00000001,%10000000,%00010000,%01000000
    123  27000				   -	       else		;  !MULTIBUTTON
    124  27000				   -	       rts
    125  27000				   -	       endif		; !MULTIBUTTON
    126  27000				   -
    127  27000				   -MEGA_INIT
    128  27000				   -	       .byte	%00110000,%00000011
    129  27000				   -MEGA_NEXT
    130  27000				   -	       .byte	%00100000,%00000010
    131  27000				   -
    132  27000				   -mega7800handlerend
    133  27000				   -	       echo	"  (mega7800 module is using ",[(mega7800handlerend-mega7800handlerstart)]d," bytes of rom)"
    134  27000				   -
    135  27000					       endif		; MEGA7800SUPPORT
    136  27000
------- FILE d:\2018dev\7800\7800basic\projects\demo1\lesson4_5.78b.asm
   3163  27000					       endif
   3164  27000					       ifnconst	included.tracker.asm
------- FILE tracker.asm LEVEL 2 PASS 3
      0  27000					       include	tracker.asm
      1  27000							; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  27000
      3  27000
      4  27000				   -	       ifconst	MUSICTRACKER
      5  27000				   -
      6  27000				   -trackerstart
      7  27000				   -
      8  27000				   -			; ** songtempo lists how many 256ths of a frame a 16th note lasts
      9  27000				   -			; ** the player operates on a 16th note grid.
     10  27000				   -
     11  27000				   -servicesongover
     12  27000				   -	       rts
     13  27000				   -servicesong
     14  27000				   -	       ifconst	PAUSESILENT
     15  27000				   -	       lda	pausestate
     16  27000				   -	       bne	servicesongover
     17  27000				   -	       endif
     18  27000				   -	       lda	songtempo
     19  27000				   -	       beq	servicesongover	; ** if song is off/paused then return
     20  27000				   -servicesongcontinue
     21  27000				   -	       lda	sfxschedulelock
     22  27000				   -	       sta	sfxschedulemissed
     23  27000				   -	       bne	servicesongover
     24  27000				   -	       lda	songtempo
     25  27000				   -	       clc
     26  27000				   -	       adc	songtick	; add songtempo to songtick until it rolls over
     27  27000				   -	       sta	songtick	; this is how we break away from 50/60Hz timing.
     28  27000				   -	       bcc	servicesongover
     29  27000				   -			; ** if we're here a new 16th note has passed
     30  27000				   -			; ** check if a new note is due on any of the 4 channels
     31  27000				   -servicesongredo
     32  27000				   -	       ldx	#3
     33  27000				   -checkchannelloop
     34  27000				   -	       dec	songchannel1busywait,x
     35  27000				   -	       bpl	carryoncheckingchannel
     36  27000				   -	       txa
     37  27000				   -	       pha		; save X for the loop
     38  27000				   -	       jsr	processsongdata
     39  27000				   -	       pla		; restore X for the loop
     40  27000				   -	       tax
     41  27000				   -carryoncheckingchannel
     42  27000				   -	       dex
     43  27000				   -	       bpl	checkchannelloop
     44  27000				   -	       lda	inactivechannelcount
     45  27000				   -	       cmp	#15
     46  27000				   -	       bne	skipstopsong
     47  27000				   -	       lda	songloops
     48  27000				   -	       bne	doasongloop
     49  27000				   -			;lda #0
     50  27000				   -	       sta	songtempo	; all channels are done. stop the song
     51  27000				   -	       rts
     52  27000				   -doasongloop
     53  27000				   -	       bmi	skipsongloopadjust
     54  27000				   -	       dec	songloops
     55  27000				   -skipsongloopadjust
     56  27000				   -	       jsr	setsongchannels
     57  27000				   -	       jmp	servicesongredo
     58  27000				   -skipstopsong
     59  27000				   -	       rts
     60  27000				   -
     61  27000				   -processsongdata
     62  27000				   -			; channel needs processing
     63  27000				   -			; X=channel #
     64  27000				   -
     65  27000				   -	       txa
     66  27000				   -	       clc
     67  27000				   -	       adc	songchannel1stackdepth,x	; stack depth value will be 0, 4, or 8
     68  27000				   -	       tay
     69  27000				   -
     70  27000				   -
     71  27000				   -			; ** indirect x is cumbersome with mult-byte commands.
     72  27000				   -			; ** setup a pointer to the song data for indirect y addressing.
     73  27000				   -	       lda	songchannel1layer1lo,y
     74  27000				   -	       sta	songdatalo
     75  27000				   -	       lda	songchannel1layer1hi,y
     76  27000				   -	       sta	songdatahi
     77  27000				   -			;ora songdatalo
     78  27000				   -	       bne	channelhasdata
     79  27000				   -			;channel data is pointing at $0000
     80  27000				   -	       lda	#$7F
     81  27000				   -	       sta	songchannel1busywait,x	; skip a bunch of notes
     82  27000				   -setchannelcountbits
     83  27000				   -	       lda	channel2bits,x
     84  27000				   -	       ora	inactivechannelcount
     85  27000				   -	       sta	inactivechannelcount
     86  27000				   -	       rts
     87  27000				   -channelhasdata
     88  27000				   -
     89  27000				   -	       sty	songstackindex
     90  27000				   -	       ldy	#0
     91  27000				   -	       lda	(songdatalo),y	; ** load in the next byte of song data, so we can decode it
     92  27000				   -	       cmp	#$ff
     93  27000				   -	       bne	carryoncheckingdatatype	; ** $ff=pattern end marker
     94  27000				   -	       jmp	handlechannelEOD
     95  27000				   -
     96  27000				   -carryoncheckingdatatype
     97  27000				   -	       and	#$F0
     98  27000				   -	       cmp	#$C0
     99  27000				   -	       beq	handlechannelrest	; 0000XXXX=rest
    100  27000				   -	       cmp	#$F0
    101  27000				   -	       beq	handlemultibytecommand
    102  27000				   -	       cmp	#$D0
    103  27000				   -	       beq	handlesemiup
    104  27000				   -	       cmp	#$E0
    105  27000				   -	       beq	handlesemidown
    106  27000				   -handlenotedata
    107  27000				   -			; ** TODO: note playing is a terrible choice for fall-through
    108  27000				   -
    109  27000				   -			; ** its simple note data, prepare arguments for schedulesfx
    110  27000				   -
    111  27000				   -			; ** set the note length
    112  27000				   -	       lda	(songdatalo),y
    113  27000				   -	       and	#$0F
    114  27000				   -	       sta	songchannel1busywait,x
    115  27000				   -
    116  27000				   -			; ** load the instrument
    117  27000				   -	       lda	songchannel1instrumentlo,x
    118  27000				   -	       sta	sfxinstrumentlo
    119  27000				   -	       lda	songchannel1instrumenthi,x
    120  27000				   -	       sta	sfxinstrumenthi
    121  27000				   -
    122  27000				   -			; ** get the note, and transpose
    123  27000				   -	       lda	(songdatalo),y
    124  27000				   -	       lsr
    125  27000				   -	       lsr
    126  27000				   -	       lsr
    127  27000				   -	       lsr
    128  27000				   -	       clc
    129  27000				   -	       adc	songchannel1transpose,x	; ** add it to the transpose index
    130  27000				   -			; ** its up the respective SFX scheduler to handle and save the note data
    131  27000				   -	       sta	sfxnoteindex
    132  27000				   -
    133  27000				   -	       lda	#0
    134  27000				   -	       sta	sfxpitchoffset
    135  27000				   -
    136  27000				   -	       jsr	schedulesfx
    137  27000				   -skipnoteschedule
    138  27000				   -	       jmp	advancethesongpointer1byte	; advance to the next data byte and exit
    139  27000				   -
    140  27000				   -handlechannelrest
    141  27000				   -			; ** set the note length
    142  27000				   -	       lda	(songdatalo),y
    143  27000				   -	       and	#$0F
    144  27000				   -	       sta	songchannel1busywait,x
    145  27000				   -	       jmp	advancethesongpointer1byte	; advance to the next data byte and exit
    146  27000				   -
    147  27000				   -handlesemiup
    148  27000				   -	       lda	(songdatalo),y	; ** reload the song data, so we can get at the lower nibble
    149  27000				   -	       and	#$0f	; ** since we need to mask the nibble of the subtracted value,
    150  27000				   -	       clc
    151  27000				   -handlesemidownentry
    152  27000				   -	       adc	songchannel1transpose,x	; ** add it to the transpose index
    153  27000				   -	       sta	songchannel1transpose,x
    154  27000				   -	       jsr	advancethesongpointer1byte
    155  27000				   -	       jmp	processsongdata	; semi doesn't have note length, so process the next data byte...
    156  27000				   -
    157  27000				   -handlesemidown
    158  27000				   -	       lda	(songdatalo),y	; ** reload the song data, so we can get at the lower nibble
    159  27000				   -	       and	#$0f	; ** since we need to mask the nibble of the subtracted value,
    160  27000				   -	       eor	#$ff	; ** its easier if we negate it, and then add it instead.
    161  27000				   -	       sec
    162  27000				   -	       jmp	handlesemidownentry
    163  27000				   -
    164  27000				   -handlemultibytecommand
    165  27000				   -	       lda	(songdatalo),y	; ** reload the song data, so we can get at the lower nibble
    166  27000				   -	       and	#$0f	; ** since we need to mask the nibble of the subtracted value,
    167  27000				   -	       cmp	#$08	; ** load new instrument?
    168  27000				   -	       bne	nothandleinstrumentchange
    169  27000				   -handleinstrumentchange
    170  27000				   -	       iny
    171  27000				   -	       lda	(songdatalo),y
    172  27000				   -	       sta	songchannel1instrumentlo,x
    173  27000				   -	       iny
    174  27000				   -	       lda	(songdatalo),y
    175  27000				   -	       sta	songchannel1instrumenthi,x
    176  27000				   -	       lda	#3
    177  27000				   -	       jsr	advancethesongpointerNbytes	; advance 3 bytes
    178  27000				   -	       jmp	processsongdata
    179  27000				   -
    180  27000				   -nothandleinstrumentchange
    181  27000				   -	       cmp	#$09	; ** absolute tempo change?
    182  27000				   -	       bne	nothandletempochange
    183  27000				   -	       lda	#0
    184  27000				   -	       sta	songtempo
    185  27000				   -handlerelativetempochange
    186  27000				   -	       iny
    187  27000				   -	       lda	(songdatalo),y
    188  27000				   -	       clc
    189  27000				   -	       adc	songtempo
    190  27000				   -	       sta	songtempo
    191  27000				   -	       lda	#2
    192  27000				   -	       jsr	advancethesongpointerNbytes	; advance 2 bytes
    193  27000				   -	       jmp	processsongdata
    194  27000				   -
    195  27000				   -nothandletempochange
    196  27000				   -	       cmp	#$0A	; ** relative tempo change?:
    197  27000				   -	       beq	handlerelativetempochange
    198  27000				   -	       cmp	#$0B	; ** octave/semi change?
    199  27000				   -	       beq	handleoctavesemichange
    200  27000				   -handlepatterndata
    201  27000				   -			; ** if we're here its a pattern/loop "subroutine"
    202  27000				   -			; ** move the channel's "stack" pointer and populate the new stack level
    203  27000				   -
    204  27000				   -	       lda	#4
    205  27000				   -	       clc
    206  27000				   -	       adc	songchannel1stackdepth,x
    207  27000				   -	       sta	songchannel1stackdepth,x	; stack depth value will be 0, 4, or 8
    208  27000				   -
    209  27000				   -	       stx	inttemp6	; about to invalidate x. save it.
    210  27000				   -	       lda	songstackindex
    211  27000				   -	       adc	#4
    212  27000				   -	       tax
    213  27000				   -
    214  27000				   -	       lda	(songdatalo),y
    215  27000				   -	       and	#$7
    216  27000				   -	       sta	songchannel1layer1loops,x
    217  27000				   -	       iny
    218  27000				   -	       lda	(songdatalo),y
    219  27000				   -	       sta	songchannel1layer1lo,x
    220  27000				   -	       iny
    221  27000				   -	       lda	(songdatalo),y
    222  27000				   -	       sta	songchannel1layer1hi,x
    223  27000				   -
    224  27000				   -	       ldx	inttemp6	; restore x with the channel #
    225  27000				   -
    226  27000				   -			; ** advance will operate on the old stack level, since we didn't store the updated songstackindex...
    227  27000				   -	       lda	#3
    228  27000				   -	       jsr	advancethesongpointerNbytes	; advance 3 bytes
    229  27000				   -
    230  27000				   -			; ** ...but the new stack level will be correctly picked up when we process the next byte.
    231  27000				   -	       jmp	processsongdata
    232  27000				   -
    233  27000				   -handlechannelEOD
    234  27000				   -			; ** check if there are loops remaining on the pattern
    235  27000				   -	       stx	inttemp6
    236  27000				   -	       ldx	songstackindex
    237  27000				   -	       dec	songchannel1layer1loops,x
    238  27000				   -	       bmi	handlechannelEODnoloop
    239  27000				   -			; ** loops are remaining. set the pattern pointer to the pattern start, which is contained after the EOD
    240  27000				   -	       iny
    241  27000				   -	       lda	(songdatalo),y
    242  27000				   -	       sta	songchannel1layer1lo,x
    243  27000				   -	       iny
    244  27000				   -	       lda	(songdatalo),y
    245  27000				   -	       sta	songchannel1layer1hi,x
    246  27000				   -	       ldx	inttemp6
    247  27000				   -	       jmp	processsongdata	; EOD handling doesn't have note length, so process the next data byte...
    248  27000				   -
    249  27000				   -handlechannelEODnoloop
    250  27000				   -			; this pattern/loop is done playing. "pop" the stack
    251  27000				   -	       ldx	inttemp6
    252  27000				   -	       lda	songchannel1stackdepth,x
    253  27000				   -	       beq	handlerootchannelEOD
    254  27000				   -	       sec
    255  27000				   -	       sbc	#4
    256  27000				   -	       sta	songchannel1stackdepth,x
    257  27000				   -	       jmp	processsongdata	; EOD handling doesn't have note length, so process the next data byte...
    258  27000				   -
    259  27000				   -handlerootchannelEOD
    260  27000				   -			; this channel is done. point it to $ff data so we no longer process this channel.
    261  27000				   -	       lda	#0
    262  27000				   -	       sta	songchannel1layer1lo,x
    263  27000				   -	       sta	songchannel1layer1hi,x
    264  27000				   -	       sta	songchannel1busywait,x
    265  27000				   -	       jmp	setchannelcountbits
    266  27000				   -	       rts
    267  27000				   -
    268  27000				   -nothandlepatternchange
    269  27000				   -handleoctavesemichange
    270  27000				   -	       iny
    271  27000				   -	       lda	(songdatalo),y
    272  27000				   -	       sta	songchannel1transpose,x
    273  27000				   -	       lda	#2
    274  27000				   -	       jsr	advancethesongpointerNbytes	; advance 2 bytes
    275  27000				   -	       jmp	processsongdata
    276  27000				   -
    277  27000				   -advancethesongpointer1byte
    278  27000				   -	       txa
    279  27000				   -	       ldx	songstackindex
    280  27000				   -	       inc	songchannel1layer1lo,x
    281  27000				   -	       bne	skiphiadvancethesongpointer1byte
    282  27000				   -	       inc	songchannel1layer1hi,x
    283  27000				   -skiphiadvancethesongpointer1byte
    284  27000				   -	       tax
    285  27000				   -	       rts
    286  27000				   -
    287  27000				   -advancethesongpointerNbytes
    288  27000				   -			; entered with A=# of byte to advance
    289  27000				   -	       stx	inttemp6
    290  27000				   -	       ldx	songstackindex
    291  27000				   -	       clc
    292  27000				   -	       adc	songchannel1layer1lo,x
    293  27000				   -	       sta	songchannel1layer1lo,x
    294  27000				   -	       lda	#0
    295  27000				   -	       adc	songchannel1layer1hi,x
    296  27000				   -	       sta	songchannel1layer1hi,x
    297  27000				   -	       ldx	inttemp6
    298  27000				   -	       rts
    299  27000				   -
    300  27000				   -clearsongmemory
    301  27000				   -	       lda	#0
    302  27000				   -	       ldx	#(songchannel4instrumenthi-songchannel1layer1lo)
    303  27000				   -clearsongmemoryloop1
    304  27000				   -	       sta	songchannel1layer1lo,x
    305  27000				   -	       dex
    306  27000				   -	       bpl	clearsongmemoryloop1
    307  27000				   -
    308  27000				   -	       ldx	#(songchannel4stackdepth-songchannel1layer1loops)
    309  27000				   -clearsongmemoryloop2
    310  27000				   -	       sta	songchannel1layer1loops,x
    311  27000				   -	       dex
    312  27000				   -	       bpl	clearsongmemoryloop2
    313  27000				   -
    314  27000				   -	       lda	#$ff
    315  27000				   -	       ldx	#3
    316  27000				   -clearsongmemoryloop3
    317  27000				   -	       sta	songchannel1busywait,x
    318  27000				   -	       dex
    319  27000				   -	       bpl	clearsongmemoryloop3
    320  27000				   -	       rts
    321  27000				   -
    322  27000				   -setsongchannels
    323  27000				   -	       jsr	clearsongmemory
    324  27000				   -	       ldy	#7
    325  27000				   -	       ldx	#3
    326  27000				   -setsongchannelsloop
    327  27000				   -	       lda	(songpointerlo),y
    328  27000				   -	       sta	songchannel1layer1hi,x
    329  27000				   -	       dey
    330  27000				   -	       lda	(songpointerlo),y
    331  27000				   -	       sta	songchannel1layer1lo,x
    332  27000				   -	       dex
    333  27000				   -	       dey
    334  27000				   -	       bpl	setsongchannelsloop
    335  27000				   -	       rts
    336  27000				   -
    337  27000				   -channel2bits
    338  27000				   -	       .byte	1,2,4,8
    339  27000				   -
    340  27000				   -tiatrackeroctavenotes
    341  27000				   -	       ifconst	BUZZBASS
    342  27000				   -LOWC       =	15
    343  27000				   -	       else
    344  27000				   -LOWC       =	14
    345  27000				   -	       endif
    346  27000				   -			; ****** ELECTRONIC (0 to 11)
    347  27000				   -	       .byte	LOWC,20	; c0	 16.1Hz
    348  27000				   -	       .byte	LOWC,18	; c#0
    349  27000				   -	       .byte	LOWC,17	; d0
    350  27000				   -	       .byte	LOWC,16	; d#0
    351  27000				   -	       .byte	LOWC,15	; e0
    352  27000				   -	       .byte	LOWC,14	; f0  (very off)
    353  27000				   -	       .byte	LOWC,14	; f#0
    354  27000				   -	       .byte	LOWC,13	; g0
    355  27000				   -	       .byte	LOWC,12	; g#0
    356  27000				   -	       .byte	LOWC,11	; a0
    357  27000				   -	       .byte	LOWC,11	; a#0 (very off)
    358  27000				   -	       .byte	LOWC,10	; b0	 30.7Hz
    359  27000				   -
    360  27000				   -			; ****** SLIGHTLY BUZZY (12 to 23)
    361  27000				   -	       .byte	6,30	; c1	 32.7Hz
    362  27000				   -	       .byte	6,28	; c#1
    363  27000				   -	       .byte	6,27	; d1
    364  27000				   -	       .byte	6,25	; d#1
    365  27000				   -	       .byte	6,24	; e1
    366  27000				   -	       .byte	6,22	; f1
    367  27000				   -	       .byte	6,21	; f#1
    368  27000				   -	       .byte	6,20	; g1
    369  27000				   -	       .byte	6,18	; g#1
    370  27000				   -	       .byte	6,17	; a1
    371  27000				   -	       .byte	6,16	; a#1
    372  27000				   -	       .byte	6,15	; b1	 63.4Hz
    373  27000				   -
    374  27000				   -			; ****** BUZZY (24 to 39)
    375  27000				   -	       .byte	1,31	; c2	 65.5
    376  27000				   -	       .byte	1,30	; c#2	 67.6
    377  27000				   -	       .byte	1,27	; d2	 72.3
    378  27000				   -	       .byte	1,26	; d#2	 77.6
    379  27000				   -	       .byte	1,24	; e2
    380  27000				   -	       .byte	1,23	; f2
    381  27000				   -	       .byte	1,22	; f#2
    382  27000				   -	       .byte	1,20	; g2
    383  27000				   -	       .byte	1,19	; g#2
    384  27000				   -	       .byte	1,18	; a2
    385  27000				   -	       .byte	1,17	; a#2
    386  27000				   -	       .byte	1,16	; b2
    387  27000				   -	       .byte	1,15	; c3	126.8Hz
    388  27000				   -	       .byte	1,14	; c#3
    389  27000				   -	       .byte	1,13	; d3	149.7Hz
    390  27000				   -	       .byte	1,12	; d#3	161.2Hz (very off)
    391  27000				   -			; ****** PURE (40 to 71) - best key is A3 Major
    392  27000				   -	       .byte	12,31	; e3	163.8Hz
    393  27000				   -	       .byte	12,29	; f3
    394  27000				   -	       .byte	12,28	; f#3
    395  27000				   -	       .byte	12,26	; g3
    396  27000				   -	       .byte	12,24	; g#3
    397  27000				   -	       .byte	12,23	; a3  songs in key of A benefit from Perceptual Tuning
    398  27000				   -	       .byte	12,22	; a#3
    399  27000				   -	       .byte	12,20	; b3
    400  27000				   -	       .byte	12,19	; c4  (middle C)
    401  27000				   -	       .byte	12,18	; c#4
    402  27000				   -	       .byte	12,17	; d4
    403  27000				   -	       .byte	12,16	; d#4
    404  27000				   -	       .byte	12,15	; e4
    405  27000				   -	       .byte	12,14	; f4
    406  27000				   -	       .byte	12,13	; f#4
    407  27000				   -	       .byte	12,12	; g4  (very off)
    408  27000				   -	       .byte	12,12	; g#4
    409  27000				   -	       .byte	12,11	; a4
    410  27000				   -	       .byte	12,10	; a#4
    411  27000				   -	       .byte	4,31	; b4
    412  27000				   -	       .byte	4,29	; c5
    413  27000				   -	       .byte	4,28	; c#5
    414  27000				   -	       .byte	4,26	; d5
    415  27000				   -	       .byte	4,24	; d#5
    416  27000				   -	       .byte	4,23	; e5
    417  27000				   -	       .byte	4,22	; f5
    418  27000				   -	       .byte	4,20	; f#5
    419  27000				   -	       .byte	4,19	; g5
    420  27000				   -	       .byte	4,18	; g#5
    421  27000				   -	       .byte	4,17	; a5
    422  27000				   -	       .byte	4,16	; a#5
    423  27000				   -	       .byte	4,15	; b5
    424  27000				   -
    425  27000				   -			; ****** TUNED WIND (72 to 83)
    426  27000				   -	       .byte	8,30	; c
    427  27000				   -	       .byte	8,28	; c#
    428  27000				   -	       .byte	8,27	; d
    429  27000				   -	       .byte	8,25	; d#
    430  27000				   -	       .byte	8,24	; e
    431  27000				   -	       .byte	8,22	; f
    432  27000				   -	       .byte	8,21	; f#
    433  27000				   -	       .byte	8,20	; g
    434  27000				   -	       .byte	8,18	; g#
    435  27000				   -	       .byte	8,17	; a
    436  27000				   -	       .byte	8,16	; a#
    437  27000				   -	       .byte	8,15	; b
    438  27000				   -
    439  27000				   -	       include	"tiadrumkit.asm"
    440  27000				   -
    441  27000				   -trackerend
    442  27000				   -
    443  27000				   -	       echo	"  (tracker module is using ",[(trackerend-trackerstart)]d," bytes)"
    444  27000				   -
    445  27000					       endif		;MUSICTRACKER
------- FILE d:\2018dev\7800\7800basic\projects\demo1\lesson4_5.78b.asm
   3166  27000					       endif
   3167  27000					       ifnconst	included.hiscore.asm
------- FILE hiscore.asm LEVEL 2 PASS 3
      0  27000					       include	hiscore.asm
      1  27000							; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  27000
      3  27000				   -	       ifconst	HSSUPPORT
      4  27000				   -
      5  27000				   -	       ifconst	BANKSETROM
      6  27000				   -	       ifconst	isBANKSETBANK
      7  27000				   -HSCHARSHERE =	1
      8  27000				   -	       endif
      9  27000				   -	       else		; !BANKSETROM so embed the character strings
     10  27000				   -HSCHARSHERE =	1
     11  27000				   -	       endif
     12  27000				   -
     13  27000				   -	       ifnconst	isBANKSETBANK
     14  27000				   -hiscorestart
     15  27000				   -
     16  27000				   -detectatarivoxeeprom
     17  27000				   -hiscoremodulestart
     18  27000				   -			; do a test to see if atarivox eeprom can be accessed, and save results
     19  27000				   -	       jsr	AVoxDetect
     20  27000				   -	       eor	#$ff	; invert for easy 7800basic if...then logic
     21  27000				   -	       sta	avoxdetected
     22  27000				   -	       lda	#$0
     23  27000				   -	       sta	SWACNT
     24  27000				   -	       lda	avoxdetected
     25  27000				   -	       rts
     26  27000				   -
     27  27000				   -detecthsc
     28  27000				   -			; check for the HSC ROM signature...
     29  27000				   -	       lda	XCTRL1s
     30  27000				   -	       ora	#%00001100
     31  27000				   -	       sta	XCTRL1s
     32  27000				   -	       sta	XCTRL1
     33  27000				   -
     34  27000				   -	       lda	$3900
     35  27000				   -	       eor	#$C6
     36  27000				   -	       bne	detecthscfail
     37  27000				   -	       lda	$3904
     38  27000				   -	       eor	#$FE
     39  27000				   -	       bne	detecthscfail
     40  27000				   -
     41  27000				   -			; check if it's initialized...
     42  27000				   -	       ldy	#0
     43  27000				   -	       lda	#$ff
     44  27000				   -checkhscinit
     45  27000				   -	       and	$1000,y
     46  27000				   -	       dey
     47  27000				   -	       bpl	checkhscinit
     48  27000				   -	       cmp	#$ff
     49  27000				   -	       bne	hscisalreadyinit
     50  27000				   -checkhscinit2
     51  27000				   -	       ora	$1000,y
     52  27000				   -	       dey
     53  27000				   -	       bpl	checkhscinit2
     54  27000				   -	       cmp	#0
     55  27000				   -	       bne	hscisalreadyinit
     56  27000				   -			; if we're here, we need to do a minimal HSC init...
     57  27000				   -	       ldy	#$28
     58  27000				   -hscinitloop1
     59  27000				   -	       lda	hscheader,y
     60  27000				   -	       sta	$1000,y
     61  27000				   -	       dey
     62  27000				   -	       bpl	hscinitloop1
     63  27000				   -	       ldy	#$89
     64  27000				   -	       lda	#$7F
     65  27000				   -hscinitloop2
     66  27000				   -	       sta	$10B3,y
     67  27000				   -	       dey
     68  27000				   -	       cpy	#$ff
     69  27000				   -	       bne	hscinitloop2
     70  27000				   -hscisalreadyinit
     71  27000				   -	       lda	#$ff
     72  27000				   -	       rts
     73  27000				   -hscheader
     74  27000				   -	       .byte	$00,$00,$68,$83,$AA,$55,$9C,$FF,$07,$12,$02,$1F,$00,$00,$00,$00
     75  27000				   -	       .byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     76  27000				   -	       .byte	$00,$00,$00,$00,$00,$00,$00,$00,$03
     77  27000				   -detecthscfail
     78  27000				   -	       lda	XCTRL1s
     79  27000				   -	       and	#%11110111
     80  27000				   -	       sta	XCTRL1s
     81  27000				   -	       lda	#0
     82  27000				   -	       rts
     83  27000				   -	       endif		; isBANKSETBANK
     84  27000				   -
     85  27000				   -	       ifnconst	hiscorefont
     86  27000				   -	       echo	""
     87  27000				   -	       echo	"WARNING: High score support is enabled, but the hiscorefont.png was"
     88  27000				   -	       echo	" NOT imported with incgraphic. The high score display code"
     89  27000				   -	       echo	" has been omitted from this build."
     90  27000				   -	       echo	""
     91  27000				   -	       else		; hiscorefont
     92  27000				   -	       ifnconst	isBANKSETBANK
     93  27000				   -hscdrawscreen
     94  27000				   -
     95  27000				   -			; we use 20 lines on a 24 line display
     96  27000				   -			; HSSCOREY to dynamically centers based on
     97  27000				   -			;HSSCOREY = 0
     98  27000				   -HSSCOREY   =	((WZONECOUNT*WZONEHEIGHT/8)-22)/2
     99  27000				   -HSCURSORY  =	((HSSCOREY/(WZONEHEIGHT/8))*WZONEHEIGHT)
    100  27000				   -
    101  27000				   -	       ifconst	HSSCORESIZE
    102  27000				   -SCORESIZE  =	HSSCORESIZE
    103  27000				   -	       else
    104  27000				   -SCORESIZE  =	6
    105  27000				   -	       endif
    106  27000				   -
    107  27000				   -			;save shadow registers for later return...
    108  27000				   -	       lda	sCTRL
    109  27000				   -	       pha
    110  27000				   -	       lda	sCHARBASE
    111  27000				   -	       pha
    112  27000				   -
    113  27000				   -	       jsr	blacken320colors
    114  27000				   -	       jsr	drawoverwait
    115  27000				   -	       jsr	drawwait
    116  27000				   -	       jsr	hiscorecleardlmem
    117  27000				   -	       jsr	clearscreen
    118  27000				   -
    119  27000				   -	       lda	#$60
    120  27000				   -	       sta	charactermode
    121  27000				   -
    122  27000				   -			;set the character base to the HSC font
    123  27000				   -	       lda	#>hiscorefont
    124  27000				   -	       sta	CHARBASE
    125  27000				   -	       sta	sCHARBASE
    126  27000				   -	       lda	#%01000011	;Enable DMA, mode=320A
    127  27000				   -	       sta	CTRL
    128  27000				   -	       sta	sCTRL
    129  27000				   -
    130  27000				   -	       lda	#60
    131  27000				   -	       sta	hsjoydebounce
    132  27000				   -
    133  27000				   -	       lda	#0
    134  27000				   -	       sta	hscursorx
    135  27000				   -	       sta	framecounter
    136  27000				   -
    137  27000				   -	       ifnconst	HSCOLORCHASESTART
    138  27000				   -	       lda	#$8D	; default is blue. why not?
    139  27000				   -	       else
    140  27000				   -	       lda	#HSCOLORCHASESTART
    141  27000				   -	       endif
    142  27000				   -	       sta	hscolorchaseindex
    143  27000				   -	       lda	#$0F
    144  27000				   -	       sta	P0C2	; base text is white
    145  27000				   -	       jsr	hschasecolors
    146  27000				   -
    147  27000				   -			; ** plot all of the initials
    148  27000				   -	       lda	#<HSRAMInitials
    149  27000				   -	       sta	temp1	; charmaplo
    150  27000				   -	       lda	#>HSRAMInitials
    151  27000				   -	       sta	temp2	; charmaphi
    152  27000				   -	       lda	#32+29	; palette=0-29 | 32-(width=3)
    153  27000				   -	       sta	temp3	; palette/width
    154  27000				   -	       lda	#104
    155  27000				   -	       sta	temp4	; X
    156  27000				   -	       lda	#((HSSCOREY+6)/(WZONEHEIGHT/8))
    157  27000				   -	       sta	temp5	; Y
    158  27000				   -plothsinitialsloop
    159  27000				   -	       jsr	plotcharacters
    160  27000				   -	       clc
    161  27000				   -	       lda	temp3
    162  27000				   -	       adc	#32
    163  27000				   -	       sta	temp3
    164  27000				   -	       inc	temp5
    165  27000				   -	       if	WZONEHEIGHT = 8
    166  27000				   -	       inc	temp5
    167  27000				   -	       endif
    168  27000				   -	       clc
    169  27000				   -	       lda	#3
    170  27000				   -	       adc	temp1
    171  27000				   -	       sta	temp1
    172  27000				   -	       cmp	#(<(HSRAMInitials+15))
    173  27000				   -	       bcc	plothsinitialsloop
    174  27000				   -
    175  27000				   -	       ifconst	HSGAMENAMELEN
    176  27000				   -			;plot the game name...
    177  27000				   -	       lda	#<HSGAMENAMEtable
    178  27000				   -	       sta	temp1	; charmaplo
    179  27000				   -	       lda	#>HSGAMENAMEtable
    180  27000				   -	       sta	temp2	; charmaphi
    181  27000				   -	       lda	#(32-HSGAMENAMELEN)	; palette=0*29 | 32-(width=3)
    182  27000				   -	       sta	temp3	; palette/width
    183  27000				   -	       lda	#(80-(HSGAMENAMELEN*2))
    184  27000				   -	       sta	temp4	; X
    185  27000				   -	       lda	#((HSSCOREY+0)/(WZONEHEIGHT/8))
    186  27000				   -	       sta	temp5	; Y
    187  27000				   -	       jsr	plotcharacters
    188  27000				   -	       endif		; HSGAMENAMELEN
    189  27000				   -
    190  27000				   -			;plot "difficulty"...
    191  27000				   -	       ldy	gamedifficulty
    192  27000				   -	       ifnconst	HSNOLEVELNAMES
    193  27000				   -	       lda	highscoredifficultytextlo,y
    194  27000				   -	       sta	temp1
    195  27000				   -	       lda	highscoredifficultytexthi,y
    196  27000				   -	       sta	temp2
    197  27000				   -	       sec
    198  27000				   -	       lda	#32
    199  27000				   -	       sbc	highscoredifficultytextlen,y
    200  27000				   -	       sta	temp3	; palette/width
    201  27000				   -	       sec
    202  27000				   -	       lda	#40
    203  27000				   -	       sbc	highscoredifficultytextlen,y
    204  27000				   -	       asl
    205  27000				   -	       sta	temp4	; X
    206  27000				   -	       else
    207  27000				   -	       lda	#<HSHIGHSCOREStext
    208  27000				   -	       sta	temp1	; charmaplo
    209  27000				   -	       lda	#>HSHIGHSCOREStext
    210  27000				   -	       sta	temp2	; charmaphi
    211  27000				   -	       lda	#(32-11)	; palette=0*29 | 32-(width=3)
    212  27000				   -	       sta	temp3	; palette/width
    213  27000				   -	       lda	#(80-(11*2))
    214  27000				   -	       sta	temp4	; X
    215  27000				   -	       endif		; HSNOLEVELNAMES
    216  27000				   -
    217  27000				   -	       lda	#((HSSCOREY+2)/(WZONEHEIGHT/8))
    218  27000				   -	       sta	temp5	; Y
    219  27000				   -	       jsr	plotcharacters
    220  27000				   -	       ldy	hsdisplaymode	; 0=attact mode, 1=player eval, 2=player 1 eval, 3=player 2 player eval, 4=player 2 player evel (joy1)
    221  27000				   -	       bne	carronwithscoreevaluation
    222  27000				   -	       jmp	donoscoreevaluation
    223  27000				   -carronwithscoreevaluation
    224  27000				   -	       dey
    225  27000				   -	       lda	highscorelabeltextlo,y
    226  27000				   -	       sta	temp1
    227  27000				   -	       lda	highscorelabeltexthi,y
    228  27000				   -	       sta	temp2
    229  27000				   -	       sec
    230  27000				   -	       lda	#(32-15)	; palette=0*29 | 32-(width=3)
    231  27000				   -	       sta	temp3	; palette/width
    232  27000				   -	       lda	highscorelabeladjust1,y
    233  27000				   -	       sta	temp4	; X
    234  27000				   -	       lda	#((HSSCOREY+18)/(WZONEHEIGHT/8))
    235  27000				   -	       sta	temp5	; Y
    236  27000				   -	       jsr	plotcharacters
    237  27000				   -
    238  27000				   -	       ldy	hsdisplaymode	; 0=attact mode, 1=player eval, 2=player 1 eval, 3=player 2 player eval, 4=player 2 player evel (joy1)
    239  27000				   -	       dey
    240  27000				   -			;plot the current player score...
    241  27000				   -	       lda	#(32-SCORESIZE)	; palette=0*32
    242  27000				   -	       sta	temp3	; palette/width
    243  27000				   -	       lda	highscorelabeladjust2,y
    244  27000				   -	       sta	temp4	; X
    245  27000				   -	       lda	#((HSSCOREY+18)/(WZONEHEIGHT/8))
    246  27000				   -	       sta	temp5	; Y
    247  27000				   -
    248  27000				   -	       lda	scorevarlo,y
    249  27000				   -	       sta	temp7	; score variable lo
    250  27000				   -	       lda	scorevarhi,y
    251  27000				   -	       sta	temp8	; score variable hi
    252  27000				   -
    253  27000				   -	       lda	#(hiscorefont_mode | %01100000)	; charactermode
    254  27000				   -	       sta	temp9
    255  27000				   -
    256  27000				   -	       lda	#<(hiscorefont+33)	; +33 to get to '0' character
    257  27000				   -	       sta	temp1	; charmaplo
    258  27000				   -	       lda	#>(hiscorefont+33)
    259  27000				   -	       sta	temp2	; charmaphi
    260  27000				   -	       lda	#SCORESIZE
    261  27000				   -	       sta	temp6
    262  27000				   -	       ifnconst	DOUBLEWIDE
    263  27000				   -	       jsr	plotvalue
    264  27000				   -	       else
    265  27000				   -	       jsr	plotvaluedw
    266  27000				   -	       endif
    267  27000				   -
    268  27000				   -USED_PLOTVALUE =	1	; ensure that plotvalue gets compiled in
    269  27000				   -
    270  27000				   -	       ifconst	HSGAMERANKS
    271  27000				   -
    272  27000				   -	       ldx	#$ff	; start at 0 after the inx...
    273  27000				   -comparescore2rankloop
    274  27000				   -	       inx
    275  27000				   -	       ldy	#0
    276  27000				   -	       lda	rankvalue_0,x
    277  27000				   -	       cmp	(temp7),y
    278  27000				   -	       bcc	score2rankloopdone
    279  27000				   -	       bne	comparescore2rankloop
    280  27000				   -	       iny
    281  27000				   -	       lda	rankvalue_1,x
    282  27000				   -	       cmp	(temp7),y
    283  27000				   -	       bcc	score2rankloopdone
    284  27000				   -	       bne	comparescore2rankloop
    285  27000				   -	       iny
    286  27000				   -	       lda	(temp7),y
    287  27000				   -	       cmp	rankvalue_2,x
    288  27000				   -	       bcs	score2rankloopdone
    289  27000				   -	       jmp	comparescore2rankloop
    290  27000				   -score2rankloopdone
    291  27000				   -	       stx	hsnewscorerank
    292  27000				   -
    293  27000				   -	       lda	ranklabello,x
    294  27000				   -	       sta	temp1
    295  27000				   -	       lda	ranklabelhi,x
    296  27000				   -	       sta	temp2
    297  27000				   -	       sec
    298  27000				   -	       lda	#32	; palette=0*29 | 32-(width=3)
    299  27000				   -	       sbc	ranklabellengths,x
    300  27000				   -	       sta	temp3	; palette/width
    301  27000				   -	       sec
    302  27000				   -	       lda	#(40+6)
    303  27000				   -	       sbc	ranklabellengths,x
    304  27000				   -	       asl
    305  27000				   -	       sta	temp4	; X
    306  27000				   -	       lda	#((HSSCOREY+20)/(WZONEHEIGHT/8))
    307  27000				   -	       sta	temp5	; Y
    308  27000				   -	       jsr	plotcharacters
    309  27000				   -
    310  27000				   -	       ldx	hsnewscorerank
    311  27000				   -
    312  27000				   -	       lda	#<highscoreranklabel
    313  27000				   -	       sta	temp1
    314  27000				   -	       lda	#>highscoreranklabel
    315  27000				   -	       sta	temp2
    316  27000				   -
    317  27000				   -	       lda	#(32-5)	; palette=0*29 | 32-(width=3)
    318  27000				   -	       sta	temp3	; palette/width
    319  27000				   -	       lda	#(40-6)
    320  27000				   -	       sec
    321  27000				   -	       sbc	ranklabellengths,x
    322  27000				   -	       asl
    323  27000				   -	       sta	temp4	; X
    324  27000				   -	       lda	#((HSSCOREY+20)/(WZONEHEIGHT/8))
    325  27000				   -	       sta	temp5	; Y
    326  27000				   -	       jsr	plotcharacters
    327  27000				   -	       endif		; HSGAMERANKS
    328  27000				   -
    329  27000				   -
    330  27000				   -			; ** which line did this player beat?
    331  27000				   -	       lda	#$ff
    332  27000				   -	       sta	hsnewscoreline
    333  27000				   -	       ldx	#$fd
    334  27000				   -comparescoreadd2x
    335  27000				   -	       inx
    336  27000				   -comparescoreadd1x
    337  27000				   -	       inx
    338  27000				   -comparescore2lineloop
    339  27000				   -	       inc	hsnewscoreline
    340  27000				   -	       inx		; initialrun, x=0
    341  27000				   -	       cpx	#15
    342  27000				   -	       beq	nohighscoreforyou
    343  27000				   -	       ldy	#0
    344  27000				   -	       lda	HSRAMScores,x
    345  27000				   -	       cmp	(temp7),y	; first score digit
    346  27000				   -	       bcc	score2lineloopdonedel1x
    347  27000				   -	       bne	comparescoreadd2x
    348  27000				   -	       iny
    349  27000				   -	       inx
    350  27000				   -	       lda	HSRAMScores,x
    351  27000				   -	       cmp	(temp7),y
    352  27000				   -	       bcc	score2lineloopdonedel2x
    353  27000				   -	       bne	comparescoreadd1x
    354  27000				   -	       iny
    355  27000				   -	       inx
    356  27000				   -	       lda	(temp7),y
    357  27000				   -	       cmp	HSRAMScores,x
    358  27000				   -	       bcs	score2lineloopdonedel3x
    359  27000				   -	       jmp	comparescore2lineloop
    360  27000				   -nohighscoreforyou
    361  27000				   -	       lda	#$ff
    362  27000				   -	       sta	hsnewscoreline
    363  27000				   -	       sta	countdownseconds
    364  27000				   -	       jmp	donoscoreevaluation
    365  27000				   -score2lineloopdonedel3x
    366  27000				   -	       dex
    367  27000				   -score2lineloopdonedel2x
    368  27000				   -	       dex
    369  27000				   -score2lineloopdonedel1x
    370  27000				   -	       dex
    371  27000				   -
    372  27000				   -			; 0 1 2
    373  27000				   -			; 3 4 5
    374  27000				   -			; 6 7 8
    375  27000				   -			; 9 0 1
    376  27000				   -			; 2 3 4
    377  27000				   -
    378  27000				   -	       stx	temp9
    379  27000				   -	       cpx	#11
    380  27000				   -	       beq	postsortscoresuploop
    381  27000				   -	       ldx	#11
    382  27000				   -sortscoresuploop
    383  27000				   -	       lda	HSRAMScores,x
    384  27000				   -	       sta	HSRAMScores+3,x
    385  27000				   -	       lda	HSRAMInitials,x
    386  27000				   -	       sta	HSRAMInitials+3,x
    387  27000				   -	       dex
    388  27000				   -	       cpx	temp9
    389  27000				   -	       bne	sortscoresuploop
    390  27000				   -postsortscoresuploop
    391  27000				   -
    392  27000				   -			;stick the score and cleared initials in the slot...
    393  27000				   -	       inx
    394  27000				   -	       ldy	#0
    395  27000				   -	       sty	hsinitialhold
    396  27000				   -	       lda	(temp7),y
    397  27000				   -	       sta	HSRAMScores,x
    398  27000				   -	       iny
    399  27000				   -	       lda	(temp7),y
    400  27000				   -	       sta	HSRAMScores+1,x
    401  27000				   -	       iny
    402  27000				   -	       lda	(temp7),y
    403  27000				   -	       sta	HSRAMScores+2,x
    404  27000				   -	       lda	#0
    405  27000				   -	       sta	HSRAMInitials,x
    406  27000				   -	       lda	#29
    407  27000				   -	       sta	HSRAMInitials+1,x
    408  27000				   -	       sta	HSRAMInitials+2,x
    409  27000				   -
    410  27000				   -	       stx	hsinitialpos
    411  27000				   -
    412  27000				   -	       ifconst	vox_highscore
    413  27000				   -	       lda	<#vox_highscore
    414  27000				   -	       sta	speech_addr
    415  27000				   -	       lda	>#vox_highscore
    416  27000				   -	       sta	speech_addr+1
    417  27000				   -	       endif		; vox_highscore
    418  27000				   -	       ifconst	sfx_highscore
    419  27000				   -	       lda	<#sfx_highscore
    420  27000				   -	       sta	temp1
    421  27000				   -	       lda	>#sfx_highscore
    422  27000				   -	       sta	temp2
    423  27000				   -	       lda	#0
    424  27000				   -	       sta	temp3
    425  27000				   -	       jsr	schedulesfx
    426  27000				   -	       endif		; sfx_highscore
    427  27000				   -	       ifconst	songdatastart_song_highscore
    428  27000				   -	       lda	#<songchanneltable_song_highscore
    429  27000				   -	       sta	songpointerlo
    430  27000				   -	       lda	#>songchanneltable_song_highscore
    431  27000				   -	       sta	songpointerhi
    432  27000				   -	       lda	#73
    433  27000				   -	       sta	songtempo
    434  27000				   -	       jsr	setsongchannels
    435  27000				   -	       endif		; songdatastart_song_highscore
    436  27000				   -
    437  27000				   -
    438  27000				   -donoscoreevaluation
    439  27000				   -
    440  27000				   -	       lda	#(32+(32-SCORESIZE))	; palette=0*32 | 32-(width=6)
    441  27000				   -	       sta	temp3	; palette/width
    442  27000				   -	       lda	#(72+(4*(6-SCORESIZE)))
    443  27000				   -	       sta	temp4	; X
    444  27000				   -	       lda	#((HSSCOREY+6)/(WZONEHEIGHT/8))
    445  27000				   -	       sta	temp5	; Y
    446  27000				   -	       lda	#<HSRAMScores
    447  27000				   -	       sta	temp7	; score variable lo
    448  27000				   -	       lda	#>HSRAMScores
    449  27000				   -	       sta	temp8	; score variable hi
    450  27000				   -	       lda	#(hiscorefont_mode | %01100000)	; charactermode
    451  27000				   -	       sta	temp9
    452  27000				   -plothsscoresloop
    453  27000				   -	       lda	#<(hiscorefont+33)	; +33 to get to '0' character
    454  27000				   -	       sta	temp1	; charmaplo
    455  27000				   -	       lda	#>(hiscorefont+33)
    456  27000				   -	       sta	temp2	; charmaphi
    457  27000				   -	       lda	#6
    458  27000				   -	       sta	temp6
    459  27000				   -	       ifnconst	DOUBLEWIDE
    460  27000				   -	       jsr	plotvalue
    461  27000				   -	       else
    462  27000				   -	       jsr	plotvaluedw
    463  27000				   -	       endif
    464  27000				   -	       clc
    465  27000				   -	       lda	temp3
    466  27000				   -	       adc	#32
    467  27000				   -	       sta	temp3
    468  27000				   -	       inc	temp5
    469  27000				   -	       if	WZONEHEIGHT = 8
    470  27000				   -	       inc	temp5
    471  27000				   -	       endif
    472  27000				   -	       clc
    473  27000				   -	       lda	#3
    474  27000				   -	       adc	temp7
    475  27000				   -	       sta	temp7
    476  27000				   -	       cmp	#(<(HSRAMScores+15))
    477  27000				   -	       bcc	plothsscoresloop
    478  27000				   -plothsindex
    479  27000				   -	       lda	#32+31	; palette=0*32 | 32-(width=1)
    480  27000				   -	       sta	temp3	; palette/width
    481  27000				   -	       lda	#44
    482  27000				   -	       sta	temp4	; X
    483  27000				   -	       lda	#((HSSCOREY+6)/(WZONEHEIGHT/8))
    484  27000				   -	       sta	temp5	; Y
    485  27000				   -	       lda	#<hsgameslotnumbers
    486  27000				   -	       sta	temp7	; score variable lo
    487  27000				   -	       lda	#>hsgameslotnumbers
    488  27000				   -	       sta	temp8	; score variable hi
    489  27000				   -	       lda	#(hiscorefont_mode | %01100000)	; charactermode
    490  27000				   -	       sta	temp9
    491  27000				   -plothsindexloop
    492  27000				   -	       lda	#<(hiscorefont+33)
    493  27000				   -	       sta	temp1	; charmaplo
    494  27000				   -	       lda	#>(hiscorefont+33)
    495  27000				   -	       sta	temp2	; charmaphi
    496  27000				   -	       lda	#1
    497  27000				   -	       sta	temp6	; number of characters
    498  27000				   -	       ifnconst	DOUBLEWIDE
    499  27000				   -	       jsr	plotvalue
    500  27000				   -	       else
    501  27000				   -	       jsr	plotvaluedw
    502  27000				   -	       endif
    503  27000				   -	       clc
    504  27000				   -	       lda	temp3
    505  27000				   -	       adc	#32
    506  27000				   -	       sta	temp3
    507  27000				   -	       inc	temp5
    508  27000				   -	       if	WZONEHEIGHT = 8
    509  27000				   -	       inc	temp5
    510  27000				   -	       endif
    511  27000				   -	       inc	temp7
    512  27000				   -	       lda	temp7
    513  27000				   -	       cmp	#(<(hsgameslotnumbers+5))
    514  27000				   -	       bcc	plothsindexloop
    515  27000				   -
    516  27000				   -	       jsr	savescreen
    517  27000				   -	       ifnconst	HSSECONDS
    518  27000				   -	       lda	#6
    519  27000				   -	       else
    520  27000				   -	       lda	#HSSECONDS
    521  27000				   -	       endif
    522  27000				   -
    523  27000				   -	       sta	countdownseconds
    524  27000				   -
    525  27000				   -keepdisplayinghs
    526  27000				   -	       jsr	restorescreen
    527  27000				   -
    528  27000				   -	       jsr	setuphsinpt1
    529  27000				   -
    530  27000				   -	       lda	hsnewscoreline
    531  27000				   -	       bpl	carryonkeepdisplayinghs
    532  27000				   -	       jmp	skipenterscorecontrol
    533  27000				   -carryonkeepdisplayinghs
    534  27000				   -
    535  27000				   -
    536  27000				   -	       ifnconst	HSSECONDS
    537  27000				   -	       lda	#6
    538  27000				   -	       else
    539  27000				   -	       lda	#HSSECONDS
    540  27000				   -	       endif
    541  27000				   -
    542  27000				   -	       sta	countdownseconds
    543  27000				   -
    544  27000				   -			;plot the "cursor" initial sprite...
    545  27000				   -	       lda	hsinitialhold
    546  27000				   -
    547  27000				   -	       sta	temp1
    548  27000				   -	       lda	#>(hiscorefont+32)
    549  27000				   -	       sta	temp2
    550  27000				   -	       lda	#31	; palette=0*32 | 32-(width=1)
    551  27000				   -	       sta	temp3	; palette/width
    552  27000				   -	       lda	hscursorx
    553  27000				   -	       asl
    554  27000				   -	       asl
    555  27000				   -	       clc
    556  27000				   -	       adc	#104
    557  27000				   -	       sta	temp4	; X
    558  27000				   -	       lda	hsnewscoreline
    559  27000				   -	       asl
    560  27000				   -	       asl
    561  27000				   -	       asl
    562  27000				   -	       asl
    563  27000				   -	       adc	#((3*16)+HSCURSORY)
    564  27000				   -	       sta	temp5	; Y
    565  27000				   -	       lda	#%01000000
    566  27000				   -	       sta	temp6
    567  27000				   -	       jsr	plotsprite
    568  27000				   -
    569  27000				   -	       ldx	hscursorx
    570  27000				   -	       ldy	hsdisplaymode
    571  27000				   -	       ifnconst	.HSup
    572  27000				   -	       lda	sSWCHA
    573  27000				   -	       cpy	#3
    574  27000				   -	       bne	hsskipadjustjoystick1
    575  27000				   -	       asl
    576  27000				   -	       asl
    577  27000				   -	       asl
    578  27000				   -	       asl
    579  27000				   -hsskipadjustjoystick1
    580  27000				   -	       sta	hsswcha
    581  27000				   -	       else		; there are user-defined routines!
    582  27000				   -	       jsr	.HSdown
    583  27000				   -	       lda	hsreturn	; b0
    584  27000				   -	       asl
    585  27000				   -	       pha
    586  27000				   -	       jsr	.HSup
    587  27000				   -	       pla
    588  27000				   -	       ora	hsreturn
    589  27000				   -	       asl
    590  27000				   -	       asl
    591  27000				   -	       asl
    592  27000				   -	       asl
    593  27000				   -	       eor	#$FF
    594  27000				   -	       sta	hsswcha
    595  27000				   -	       endif
    596  27000				   -	       lda	SWCHB
    597  27000				   -	       and	#%00000010
    598  27000				   -	       bne	hsskipselectswitch
    599  27000				   -	       lda	#%00010000
    600  27000				   -	       sta	hsswcha
    601  27000				   -	       bne	hsdodebouncecheck
    602  27000				   -hsskipselectswitch
    603  27000				   -	       lda	hsswcha
    604  27000				   -	       and	#%00110000
    605  27000				   -	       cmp	#%00110000
    606  27000				   -	       beq	hsjoystickskipped
    607  27000				   -hsdodebouncecheck
    608  27000				   -	       lda	hsjoydebounce
    609  27000				   -	       beq	hsdontdebounce
    610  27000				   -	       jmp	hspostjoystick
    611  27000				   -hsdontdebounce
    612  27000				   -	       ldx	#1	; small tick sound
    613  27000				   -	       jsr	playhssfx
    614  27000				   -	       lda	hsswcha
    615  27000				   -	       and	#%00110000
    616  27000				   -	       ldx	hscursorx
    617  27000				   -	       cmp	#%00100000	; check down
    618  27000				   -	       bne	hsjoycheckup
    619  27000				   -	       ldy	hsinitialhold
    620  27000				   -	       cpx	#0
    621  27000				   -	       bne	skipavoid31_1
    622  27000				   -	       cpy	#0	; if we're about to change to the <- char (#31) then double-decrement to skip over it
    623  27000				   -	       bne	skipavoid31_1
    624  27000				   -	       dey
    625  27000				   -skipavoid31_1
    626  27000				   -	       dey
    627  27000				   -	       jmp	hssetdebounce
    628  27000				   -hsjoycheckup
    629  27000				   -	       cmp	#%00010000	; check up
    630  27000				   -	       bne	hsjoystickskipped
    631  27000				   -	       ldy	hsinitialhold
    632  27000				   -	       cpx	#0
    633  27000				   -	       bne	skipavoid31_2
    634  27000				   -	       cpy	#30	; if we're about to change to the <- char (#31) then double-increment to skip over it
    635  27000				   -	       bne	skipavoid31_2
    636  27000				   -	       iny
    637  27000				   -skipavoid31_2
    638  27000				   -	       iny
    639  27000				   -hssetdebounce
    640  27000				   -	       tya
    641  27000				   -	       and	#31
    642  27000				   -	       sta	hsinitialhold
    643  27000				   -	       lda	#15
    644  27000				   -	       sta	hsjoydebounce
    645  27000				   -	       bne	hspostjoystick
    646  27000				   -hsjoystickskipped
    647  27000				   -			; check the fire button only when the stick isn't engaged
    648  27000				   -	       lda	hsinpt1
    649  27000				   -	       bpl	hsbuttonskipped
    650  27000				   -	       lda	hsjoydebounce
    651  27000				   -	       bne	hspostjoystick
    652  27000				   -hsfiredontdebounce
    653  27000				   -	       lda	hsinitialhold
    654  27000				   -	       cmp	#31
    655  27000				   -	       beq	hsmovecursorback
    656  27000				   -	       inc	hscursorx
    657  27000				   -	       inc	hsinitialpos
    658  27000				   -	       lda	hscursorx
    659  27000				   -	       cmp	#3
    660  27000				   -	       bne	skiphsentryisdone
    661  27000				   -	       lda	#0
    662  27000				   -	       sta	framecounter
    663  27000				   -	       lda	#$ff
    664  27000				   -	       sta	hsnewscoreline
    665  27000				   -	       dec	hsinitialpos
    666  27000				   -	       bne	skiphsentryisdone
    667  27000				   -hsmovecursorback
    668  27000				   -	       lda	hscursorx
    669  27000				   -	       beq	skiphsmovecursorback
    670  27000				   -	       lda	#29
    671  27000				   -	       ldx	hsinitialpos
    672  27000				   -	       sta	HSRAMInitials,x
    673  27000				   -	       dec	hsinitialpos
    674  27000				   -	       dec	hscursorx
    675  27000				   -	       dex
    676  27000				   -	       lda	HSRAMInitials,x
    677  27000				   -	       sta	hsinitialhold
    678  27000				   -skiphsmovecursorback
    679  27000				   -skiphsentryisdone
    680  27000				   -	       ldx	#0
    681  27000				   -	       jsr	playhssfx
    682  27000				   -	       lda	#20
    683  27000				   -	       sta	hsjoydebounce
    684  27000				   -	       bne	hspostjoystick
    685  27000				   -
    686  27000				   -hsbuttonskipped
    687  27000				   -	       lda	#0
    688  27000				   -	       sta	hsjoydebounce
    689  27000				   -hspostjoystick
    690  27000				   -
    691  27000				   -	       ldx	hsinitialpos
    692  27000				   -	       lda	hsinitialhold
    693  27000				   -	       sta	HSRAMInitials,x
    694  27000				   -
    695  27000				   -	       jmp	skiphschasecolors
    696  27000				   -
    697  27000				   -skipenterscorecontrol
    698  27000				   -	       jsr	hschasecolors
    699  27000				   -	       jsr	setuphsinpt1
    700  27000				   -	       lda	hsjoydebounce
    701  27000				   -	       bne	skiphschasecolors
    702  27000				   -	       lda	hsinpt1
    703  27000				   -	       bmi	returnfromhs
    704  27000				   -skiphschasecolors
    705  27000				   -
    706  27000				   -	       jsr	drawscreen
    707  27000				   -
    708  27000				   -	       lda	countdownseconds
    709  27000				   -	       beq	returnfromhs
    710  27000				   -	       jmp	keepdisplayinghs
    711  27000				   -returnfromhs
    712  27000				   -
    713  27000				   -	       ifconst	songdatastart_song_highscore
    714  27000				   -	       lda	hsdisplaymode
    715  27000				   -	       beq	skipclearHSCsong
    716  27000				   -	       lda	#0
    717  27000				   -	       sta	songtempo
    718  27000				   -skipclearHSCsong
    719  27000				   -	       endif
    720  27000				   -	       jsr	drawwait
    721  27000				   -	       jsr	clearscreen
    722  27000				   -	       lda	#0
    723  27000				   -	       ldy	#7
    724  27000				   -	       jsr	blacken320colors
    725  27000				   -			;lda ssCHARBASE
    726  27000				   -	       pla
    727  27000				   -	       sta	sCHARBASE
    728  27000				   -			;lda ssCTRL
    729  27000				   -	       pla
    730  27000				   -	       sta	sCTRL
    731  27000				   -	       rts
    732  27000				   -
    733  27000				   -setuphsinpt1
    734  27000				   -	       lda	#$ff
    735  27000				   -	       sta	hsinpt1
    736  27000				   -	       lda	hsjoydebounce
    737  27000				   -	       beq	skipdebounceadjust
    738  27000				   -	       dec	hsjoydebounce
    739  27000				   -	       bne	skipstorefirebuttonstatus
    740  27000				   -skipdebounceadjust
    741  27000				   -	       lda	SWCHB
    742  27000				   -	       and	#%00000001
    743  27000				   -	       bne	hscheckresetover
    744  27000				   -	       lda	#$ff
    745  27000				   -	       sta	hsinpt1
    746  27000				   -	       rts
    747  27000				   -hscheckresetover
    748  27000				   -	       ifnconst	.HSup
    749  27000				   -	       ldx	hsdisplaymode
    750  27000				   -	       cpx	#3
    751  27000				   -	       bne	hsskipadjustjoyfire1
    752  27000				   -	       lda	sINPT3
    753  27000				   -	       jmp	hsskipadjustjoyfire1done
    754  27000				   -hsskipadjustjoyfire1
    755  27000				   -	       lda	sINPT1
    756  27000				   -hsskipadjustjoyfire1done
    757  27000				   -	       sta	hsinpt1
    758  27000				   -	       else		; there are user-defined routines!
    759  27000				   -	       jsr	.HSselect
    760  27000				   -	       lda	hsreturn
    761  27000				   -	       ror		; carry
    762  27000				   -	       ror		; b7
    763  27000				   -	       sta	hsinpt1
    764  27000				   -	       endif	.HSup
    765  27000				   -skipstorefirebuttonstatus
    766  27000				   -	       rts
    767  27000				   -
    768  27000				   -blacken320colors
    769  27000				   -	       ldy	#7
    770  27000				   -blacken320colorsloop
    771  27000				   -	       sta	P0C2,y
    772  27000				   -	       dey
    773  27000				   -	       bpl	blacken320colorsloop
    774  27000				   -	       rts
    775  27000				   -
    776  27000				   -hschasecolors
    777  27000				   -	       lda	framecounter
    778  27000				   -	       and	#3
    779  27000				   -	       bne	hschasecolorsreturn
    780  27000				   -	       inc	hscolorchaseindex
    781  27000				   -	       lda	hscolorchaseindex
    782  27000				   -
    783  27000				   -	       sta	P5C2
    784  27000				   -	       sbc	#$02
    785  27000				   -	       sta	P4C2
    786  27000				   -	       sbc	#$02
    787  27000				   -	       sta	P3C2
    788  27000				   -	       sbc	#$02
    789  27000				   -	       sta	P2C2
    790  27000				   -	       sbc	#$02
    791  27000				   -	       sta	P1C2
    792  27000				   -hschasecolorsreturn
    793  27000				   -	       rts
    794  27000				   -
    795  27000				   -playhssfx
    796  27000				   -	       lda	hssfx_lo,x
    797  27000				   -	       sta	temp1
    798  27000				   -	       lda	hssfx_hi,x
    799  27000				   -	       sta	temp2
    800  27000				   -	       lda	#0
    801  27000				   -	       sta	temp3
    802  27000				   -	       jmp	schedulesfx
    803  27000				   -
    804  27000				   -hssfx_lo
    805  27000				   -	       .byte	<sfx_hsletterpositionchange, <sfx_hslettertick
    806  27000				   -hssfx_hi
    807  27000				   -	       .byte	>sfx_hsletterpositionchange, >sfx_hslettertick
    808  27000				   -
    809  27000				   -sfx_hsletterpositionchange
    810  27000				   -	       .byte	$10,$18,$00
    811  27000				   -	       .byte	$02,$06,$08
    812  27000				   -	       .byte	$02,$06,$04
    813  27000				   -	       .byte	$00,$00,$00
    814  27000				   -sfx_hslettertick
    815  27000				   -	       .byte	$10,$18,$00
    816  27000				   -	       .byte	$00,$00,$0a
    817  27000				   -	       .byte	$00,$00,$00
    818  27000				   -
    819  27000				   -highscorelabeladjust1
    820  27000				   -	       .byte	(80-(14*2)-(SCORESIZE*2)),(80-(16*2)-(SCORESIZE*2)),(80-(16*2)-(SCORESIZE*2)),(80-(16*2)-(SCORESIZE*2))
    821  27000				   -highscorelabeladjust2
    822  27000				   -	       .byte	(80+(14*2)-(SCORESIZE*2)),(80+(16*2)-(SCORESIZE*2)),(80+(16*2)-(SCORESIZE*2)),(80+(16*2)-(SCORESIZE*2))
    823  27000				   -
    824  27000				   -scorevarlo
    825  27000				   -	       .byte	<(score0+((6-SCORESIZE)/2)),<(score0+((6-SCORESIZE)/2)),<(score1+((6-SCORESIZE)/2)),<(score1+((6-SCORESIZE)/2))
    826  27000				   -scorevarhi
    827  27000				   -	       .byte	>(score0+((6-SCORESIZE)/2)),>(score0+((6-SCORESIZE)/2)),>(score1+((6-SCORESIZE)/2)),>(score1+((6-SCORESIZE)/2))
    828  27000				   -
    829  27000				   -	       endif		; !isBANKSETBANK
    830  27000				   -
    831  27000				   -	       ifnconst	HSNOLEVELNAMES
    832  27000				   -	       ifnconst	isBANKSETBANK
    833  27000				   -highscoredifficultytextlo
    834  27000				   -	       .byte	<easylevelname, <mediumlevelname, <hardlevelname, <expertlevelname
    835  27000				   -highscoredifficultytexthi
    836  27000				   -	       .byte	>easylevelname, >mediumlevelname, >hardlevelname, >expertlevelname
    837  27000				   -	       endif		; !isBANKSETBANK
    838  27000				   -
    839  27000				   -	       ifnconst	HSCUSTOMLEVELNAMES
    840  27000				   -	       ifnconst	isBANKSETBANK
    841  27000				   -highscoredifficultytextlen
    842  27000				   -	       .byte	22, 30, 26, 24
    843  27000				   -	       endif		; !isBANKSETBANK
    844  27000				   -
    845  27000				   -	       ifconst	HSCHARSHERE
    846  27000				   -
    847  27000				   -easylevelname
    848  27000				   -	       .byte	$04,$00,$12,$18,$1d,$0b,$04,$15,$04,$0b,$1d,$07,$08,$06,$07,$1d,$12,$02,$0e,$11,$04,$12
    849  27000				   -mediumlevelname
    850  27000				   -	       .byte	$08,$0d,$13,$04,$11,$0c,$04,$03,$08,$00,$13,$04,$1d,$0b,$04,$15,$04,$0b,$1d,$07,$08,$06,$07,$1d,$12,$02,$0e,$11,$04,$12
    851  27000				   -hardlevelname
    852  27000				   -	       .byte	$00,$03,$15,$00,$0d,$02,$04,$03,$1d,$0b,$04,$15,$04,$0b,$1d,$07,$08,$06,$07,$1d,$12,$02,$0e,$11,$04,$12
    853  27000				   -expertlevelname
    854  27000				   -	       .byte	$04,$17,$0f,$04,$11,$13,$1d,$0b,$04,$15,$04,$0b,$1d,$07,$08,$06,$07,$1d,$12,$02,$0e,$11,$04,$12
    855  27000				   -	       endif		; HSCHARSHERE
    856  27000				   -	       else		; HSCUSTOMLEVELNAMES
    857  27000				   -	       include	"7800hsgamediffnames.asm"
    858  27000				   -	       endif		; HSCUSTOMLEVELNAMES
    859  27000				   -	       else		; HSNOLEVELNAMES
    860  27000				   -	       ifconst	HSCHARSHERE
    861  27000				   -HSHIGHSCOREStext
    862  27000				   -	       .byte	$07,$08,$06,$07,$1d,$12,$02,$0e,$11,$04,$12
    863  27000				   -	       endif		; HSCHARSHERE
    864  27000				   -	       endif		; HSNOLEVELNAMES
    865  27000				   -
    866  27000				   -	       ifnconst	isBANKSETBANK
    867  27000				   -highscorelabeltextlo
    868  27000				   -	       .byte	<player0label, <player1label, <player2label, <player2label
    869  27000				   -highscorelabeltexthi
    870  27000				   -	       .byte	>player0label, >player1label, >player2label, >player2label
    871  27000				   -	       endif		; !isBANKSETBANK
    872  27000				   -
    873  27000				   -	       ifconst	HSCHARSHERE
    874  27000				   -player0label
    875  27000				   -	       .byte	$0f,$0b,$00,$18,$04,$11,$1d,$12,$02,$0e,$11,$04,$1a,$1d,$1d
    876  27000				   -
    877  27000				   -player1label
    878  27000				   -	       .byte	$0f,$0b,$00,$18,$04,$11,$1d,$22,$1d,$12,$02,$0e,$11,$04,$1a
    879  27000				   -
    880  27000				   -player2label
    881  27000				   -	       .byte	$0f,$0b,$00,$18,$04,$11,$1d,$23,$1d,$12,$02,$0e,$11,$04,$1a
    882  27000				   -	       endif		; HSCHARSHERE
    883  27000				   -
    884  27000				   -
    885  27000				   -	       ifconst	HSGAMENAMELEN
    886  27000				   -	       ifconst	HSCHARSHERE
    887  27000				   -HSGAMENAMEtable
    888  27000				   -	       include	"7800hsgamename.asm"
    889  27000				   -	       endif		; HSCHARSHERE
    890  27000				   -	       endif		; HSGAMENAMELEN
    891  27000				   -	       ifconst	HSGAMERANKS
    892  27000				   -	       include	"7800hsgameranks.asm"
    893  27000				   -	       ifconst	HSCHARSHERE
    894  27000				   -highscoreranklabel
    895  27000				   -	       .byte	$11,$00,$0d,$0a,$1a
    896  27000				   -	       endif		; HSCHARSHERE
    897  27000				   -	       endif		; HSGAMERANKS
    898  27000				   -
    899  27000				   -			;ensure our table doesn't wrap a page...
    900  27000				   -	       if	((<*)>251)
    901  27000				   -	       align	256
    902  27000				   -	       endif
    903  27000				   -hsgameslotnumbers
    904  27000				   -	       .byte	33,34,35,36,37
    905  27000				   -	       endif		; hiscorefont
    906  27000				   -
    907  27000				   -
    908  27000				   -	       ifnconst	isBANKSETBANK
    909  27000				   -loaddifficultytable
    910  27000				   -	       lda	gamedifficulty
    911  27000				   -	       and	#$03	; ensure the user hasn't selected an invalid difficulty
    912  27000				   -	       sta	gamedifficulty
    913  27000				   -	       cmp	hsdifficulty	; check game difficulty is the same as RAM table
    914  27000				   -	       bne	loaddifficultytablecontinue1
    915  27000				   -	       rts		; this high score difficulty table is already loaded
    916  27000				   -loaddifficultytablecontinue1
    917  27000				   -	       lda	gamedifficulty
    918  27000				   -	       sta	hsdifficulty
    919  27000				   -			;we need to check the device for the table
    920  27000				   -	       lda	hsdevice
    921  27000				   -	       bne	loaddifficultytablecontinue2
    922  27000				   -			; there's no save device. clear out this table.
    923  27000				   -	       jmp	cleardifficultytablemem
    924  27000				   -loaddifficultytablecontinue2
    925  27000				   -	       lda	hsdevice
    926  27000				   -	       and	#1
    927  27000				   -	       beq	memdeviceisntHSC
    928  27000				   -	       jmp	loaddifficultytableHSC
    929  27000				   -memdeviceisntHSC
    930  27000				   -	       jmp	loaddifficultytableAVOX
    931  27000				   -
    932  27000				   -savedifficultytable
    933  27000				   -			;*** we need to check which device we should use...
    934  27000				   -	       lda	hsdevice
    935  27000				   -	       bne	savedifficultytablerealdevice
    936  27000				   -	       rts		; its a ram device
    937  27000				   -savedifficultytablerealdevice
    938  27000				   -	       and	#1
    939  27000				   -	       beq	savememdeviceisntHSC
    940  27000				   -	       jmp	savedifficultytableHSC
    941  27000				   -savememdeviceisntHSC
    942  27000				   -	       jmp	savedifficultytableAVOX
    943  27000				   -
    944  27000				   -savedifficultytableAVOX
    945  27000				   -			; the load call already setup the memory structure and atarivox memory location
    946  27000				   -	       jsr	savealoadedHSCtablecontinue
    947  27000				   -savedifficultytableAVOXskipconvert
    948  27000				   -	       lda	#HSIDHI
    949  27000				   -	       sta	eeprombuffer
    950  27000				   -	       lda	#HSIDLO
    951  27000				   -	       sta	eeprombuffer+1
    952  27000				   -	       lda	hsdifficulty
    953  27000				   -	       sta	eeprombuffer+2
    954  27000				   -	       lda	#32
    955  27000				   -	       jsr	AVoxWriteBytes
    956  27000				   -	       rts
    957  27000				   -
    958  27000				   -savedifficultytableHSC
    959  27000				   -			;we always load a table before reaching here, so the
    960  27000				   -			;memory structures from the load should be intact...
    961  27000				   -	       ldy	hsgameslot
    962  27000				   -	       bpl	savealoadedHSCtable
    963  27000				   -	       rts
    964  27000				   -savealoadedHSCtable
    965  27000				   -	       lda	HSCGameDifficulty,y
    966  27000				   -	       cmp	#$7F
    967  27000				   -	       bne	savealoadedHSCtablecontinue
    968  27000				   -	       jsr	initializeHSCtableentry
    969  27000				   -savealoadedHSCtablecontinue
    970  27000				   -			;convert our RAM table to HSC format and write it out...
    971  27000				   -	       ldy	#0
    972  27000				   -	       ldx	#0
    973  27000				   -savedifficultytableScores
    974  27000				   -
    975  27000				   -	       lda	HSRAMInitials,x
    976  27000				   -	       sta	temp3
    977  27000				   -	       lda	HSRAMInitials+1,x
    978  27000				   -	       sta	temp4
    979  27000				   -	       lda	HSRAMInitials+2,x
    980  27000				   -	       sta	temp5
    981  27000				   -	       jsr	encodeHSCInitials	; takes 3 byte initials from temp3,4,5 and stores 2 byte initials in temp1,2
    982  27000				   -
    983  27000				   -	       lda	temp1
    984  27000				   -	       sta	(HSGameTableLo),y
    985  27000				   -	       iny
    986  27000				   -	       lda	temp2
    987  27000				   -	       sta	(HSGameTableLo),y
    988  27000				   -	       iny
    989  27000				   -
    990  27000				   -	       lda	HSRAMScores,x
    991  27000				   -	       sta	(HSGameTableLo),y
    992  27000				   -	       iny
    993  27000				   -	       lda	HSRAMScores+1,x
    994  27000				   -	       sta	(HSGameTableLo),y
    995  27000				   -	       iny
    996  27000				   -	       lda	HSRAMScores+2,x
    997  27000				   -	       sta	(HSGameTableLo),y
    998  27000				   -	       iny
    999  27000				   -	       inx
   1000  27000				   -	       inx
   1001  27000				   -	       inx		; +3
   1002  27000				   -	       cpx	#15
   1003  27000				   -	       bne	savedifficultytableScores
   1004  27000				   -	       rts
   1005  27000				   -
   1006  27000				   -loaddifficultytableHSC
   1007  27000				   -			; routine responsible for loading the difficulty table from HSC
   1008  27000				   -	       jsr	findindexHSC
   1009  27000				   -	       ldy	hsgameslot
   1010  27000				   -	       lda	HSCGameDifficulty,y
   1011  27000				   -	       cmp	#$7F
   1012  27000				   -	       bne	loaddifficultytableHSCcontinue
   1013  27000				   -			;there was an error. use a new RAM table instead...
   1014  27000				   -	       jsr	initializeHSCtableentry
   1015  27000				   -	       jmp	cleardifficultytablemem
   1016  27000				   -loaddifficultytableHSCcontinue
   1017  27000				   -			; parse the data into the HS memory...
   1018  27000				   -	       ldy	#0
   1019  27000				   -	       ldx	#0
   1020  27000				   -loaddifficultytableScores
   1021  27000				   -	       lda	(HSGameTableLo),y
   1022  27000				   -	       sta	temp1
   1023  27000				   -	       iny
   1024  27000				   -	       lda	(HSGameTableLo),y
   1025  27000				   -	       sta	temp2
   1026  27000				   -	       jsr	decodeHSCInitials	; takes 2 byte initials from temp1,2 and stores 3 byte initials in temp3,4,5
   1027  27000				   -	       iny
   1028  27000				   -	       lda	(HSGameTableLo),y
   1029  27000				   -	       sta	HSRAMScores,x
   1030  27000				   -	       lda	temp3
   1031  27000				   -	       sta	HSRAMInitials,x
   1032  27000				   -	       inx
   1033  27000				   -	       iny
   1034  27000				   -	       lda	(HSGameTableLo),y
   1035  27000				   -	       sta	HSRAMScores,x
   1036  27000				   -	       lda	temp4
   1037  27000				   -	       sta	HSRAMInitials,x
   1038  27000				   -	       inx
   1039  27000				   -	       iny
   1040  27000				   -	       lda	(HSGameTableLo),y
   1041  27000				   -	       sta	HSRAMScores,x
   1042  27000				   -	       lda	temp5
   1043  27000				   -	       sta	HSRAMInitials,x
   1044  27000				   -	       inx
   1045  27000				   -	       iny
   1046  27000				   -	       cpx	#15
   1047  27000				   -	       bne	loaddifficultytableScores
   1048  27000				   -	       ldx	#14
   1049  27000				   -	       lda	#$ff
   1050  27000				   -validatescoresloop
   1051  27000				   -	       and	HSRAMScores,x
   1052  27000				   -	       dex
   1053  27000				   -	       bpl	validatescoresloop
   1054  27000				   -	       cmp	#$ff
   1055  27000				   -	       bne	exitloaddifficultytableScores
   1056  27000				   -	       jmp	cleardifficultytablemem
   1057  27000				   -exitloaddifficultytableScores
   1058  27000				   -	       rts
   1059  27000				   -
   1060  27000				   -decodeHSCInitials
   1061  27000				   -			; takes 2 byte initials from temp1,2 and stores 3 byte initials in temp3,4,5
   1062  27000				   -			; 2 bytes are packed in the form: 22211111 22_33333
   1063  27000				   -	       lda	#0
   1064  27000				   -	       sta	temp4
   1065  27000				   -	       lda	temp1
   1066  27000				   -	       and	#%00011111
   1067  27000				   -	       sta	temp3
   1068  27000				   -
   1069  27000				   -	       lda	temp2
   1070  27000				   -	       and	#%00011111
   1071  27000				   -	       sta	temp5
   1072  27000				   -
   1073  27000				   -	       lda	temp1
   1074  27000				   -	       asl
   1075  27000				   -	       rol	temp4
   1076  27000				   -	       asl
   1077  27000				   -	       rol	temp4
   1078  27000				   -	       asl
   1079  27000				   -	       rol	temp4
   1080  27000				   -	       lda	temp2
   1081  27000				   -	       asl
   1082  27000				   -	       rol	temp4
   1083  27000				   -	       asl
   1084  27000				   -	       rol	temp4
   1085  27000				   -	       rts
   1086  27000				   -encodeHSCInitials
   1087  27000				   -			; takes 3 byte initials from temp3,4,5 and stores 2 byte initials in temp1,2
   1088  27000				   -			; 2 bytes are packed in the form: 22211111 22_33333
   1089  27000				   -			; start with packing temp1...
   1090  27000				   -	       lda	temp4
   1091  27000				   -	       and	#%00011100
   1092  27000				   -	       sta	temp1
   1093  27000				   -	       asl	temp1
   1094  27000				   -	       asl	temp1
   1095  27000				   -	       asl	temp1
   1096  27000				   -	       lda	temp3
   1097  27000				   -	       and	#%00011111
   1098  27000				   -	       ora	temp1
   1099  27000				   -	       sta	temp1
   1100  27000				   -			; ...temp1 is now packed, on to temp2...
   1101  27000				   -	       lda	temp5
   1102  27000				   -	       asl
   1103  27000				   -	       asl
   1104  27000				   -	       ror	temp4
   1105  27000				   -	       ror
   1106  27000				   -	       ror	temp4
   1107  27000				   -	       ror
   1108  27000				   -	       sta	temp2
   1109  27000				   -	       rts
   1110  27000				   -
   1111  27000				   -findindexHSCerror
   1112  27000				   -			;the HSC is stuffed. return the bad slot flag
   1113  27000				   -	       ldy	#$ff
   1114  27000				   -	       sty	hsgameslot
   1115  27000				   -	       rts
   1116  27000				   -
   1117  27000				   -findindexHSC
   1118  27000				   -HSCGameID1 =	$1029
   1119  27000				   -HSCGameID2 =	$106E
   1120  27000				   -HSCGameDifficulty =	$10B3
   1121  27000				   -HSCGameIndex =	$10F8
   1122  27000				   -			; routine responsible for finding the game index from HSC
   1123  27000				   -			; call with x=0 to create a new table if none exist, call with x=$ff to avoid creating new tables
   1124  27000				   -			; the HS loading routine will use x=$ff, the HS saving routine will use x=0
   1125  27000				   -	       ldy	#69	; start +1 to account for the dey
   1126  27000				   -findindexHSCloop
   1127  27000				   -	       dey
   1128  27000				   -	       bmi	findindexHSCerror
   1129  27000				   -	       lda	HSCGameDifficulty,y
   1130  27000				   -	       cmp	#$7F
   1131  27000				   -	       beq	findourindexHSC
   1132  27000				   -	       cmp	gamedifficulty
   1133  27000				   -	       bne	findindexHSCloop
   1134  27000				   -	       lda	HSCGameID1,y
   1135  27000				   -	       cmp	#HSIDHI
   1136  27000				   -	       bne	findindexHSCloop
   1137  27000				   -	       lda	HSCGameID2,y
   1138  27000				   -	       cmp	#HSIDLO
   1139  27000				   -	       bne	findindexHSCloop
   1140  27000				   -findourindexHSC
   1141  27000				   -			; if we're here we found our index in the table
   1142  27000				   -			; or we found the first empty one
   1143  27000				   -	       sty	hsgameslot
   1144  27000				   -	       jsr	setupHSCGamepointer	; setup the pointer to the HS Table for this game...
   1145  27000				   -	       rts
   1146  27000				   -
   1147  27000				   -
   1148  27000				   -initializeHSCtableentry
   1149  27000				   -	       ldy	hsgameslot
   1150  27000				   -			; we need to make a new entry...
   1151  27000				   -	       lda	#HSIDHI
   1152  27000				   -	       sta	HSCGameID1,y
   1153  27000				   -	       lda	#HSIDLO
   1154  27000				   -	       sta	HSCGameID2,y
   1155  27000				   -	       lda	gamedifficulty
   1156  27000				   -	       sta	HSCGameDifficulty,y
   1157  27000				   -	       ldx	#0
   1158  27000				   -fixHSDGameDifficultylistLoop
   1159  27000				   -	       inx
   1160  27000				   -	       txa
   1161  27000				   -	       sta	HSCGameIndex,y
   1162  27000				   -	       iny
   1163  27000				   -	       cpy	#69
   1164  27000				   -	       bne	fixHSDGameDifficultylistLoop
   1165  27000				   -	       rts
   1166  27000				   -
   1167  27000				   -setupHSCGamepointer
   1168  27000				   -			; this routines sets (HSGameTableLo) pointing to the game's HS table
   1169  27000				   -	       lda	#$17
   1170  27000				   -	       sta	HSGameTableHi
   1171  27000				   -	       lda	#$FA
   1172  27000				   -	       sta	HSGameTableLo
   1173  27000				   -setupHSCGamepointerLoop
   1174  27000				   -	       lda	HSGameTableLo
   1175  27000				   -	       sec
   1176  27000				   -	       sbc	#25
   1177  27000				   -	       sta	HSGameTableLo
   1178  27000				   -	       lda	HSGameTableHi
   1179  27000				   -	       sbc	#0
   1180  27000				   -	       sta	HSGameTableHi
   1181  27000				   -	       iny
   1182  27000				   -	       cpy	#69
   1183  27000				   -	       bne	setupHSCGamepointerLoop
   1184  27000				   -	       rts
   1185  27000				   -
   1186  27000				   -loaddifficultytableAVOX
   1187  27000				   -			; routine responsible for loading the difficulty table from Avox
   1188  27000				   -			; we reuse HSC routines to format data to/from our Avox RAM buffer...
   1189  27000				   -	       lda	#>(eeprombuffer+3)
   1190  27000				   -	       sta	HSGameTableHi
   1191  27000				   -	       lda	#<(eeprombuffer+3)
   1192  27000				   -	       sta	HSGameTableLo
   1193  27000				   -
   1194  27000				   -			; the start location in EEPROM, subtract 32...
   1195  27000				   -	       lda	#$5F
   1196  27000				   -	       sta	HSVoxHi
   1197  27000				   -	       lda	#$E0
   1198  27000				   -	       sta	HSVoxLo
   1199  27000				   -	       lda	#0
   1200  27000				   -	       sta	temp1
   1201  27000				   -loaddifficultytableAVOXloop
   1202  27000				   -	       inc	temp1
   1203  27000				   -	       beq	loaddifficultytableAVOXfull
   1204  27000				   -	       clc
   1205  27000				   -	       lda	HSVoxLo
   1206  27000				   -	       adc	#32
   1207  27000				   -	       sta	HSVoxLo
   1208  27000				   -	       lda	HSVoxHi
   1209  27000				   -	       adc	#0
   1210  27000				   -	       sta	HSVoxHi
   1211  27000				   -	       lda	#3
   1212  27000				   -	       jsr	AVoxReadBytes	; read in 3 bytes, ID1,ID2,Difficulty
   1213  27000				   -	       lda	eeprombuffer
   1214  27000				   -	       cmp	#$FF
   1215  27000				   -	       beq	loaddifficultytableAVOXempty
   1216  27000				   -	       cmp	#HSIDHI
   1217  27000				   -	       bne	loaddifficultytableAVOXloop
   1218  27000				   -	       lda	eeprombuffer+1
   1219  27000				   -	       cmp	#HSIDLO
   1220  27000				   -	       bne	loaddifficultytableAVOXloop
   1221  27000				   -	       lda	eeprombuffer+2
   1222  27000				   -	       cmp	gamedifficulty
   1223  27000				   -	       bne	loaddifficultytableAVOXloop
   1224  27000				   -loaddifficultytableAVOXdone
   1225  27000				   -	       lda	#32
   1226  27000				   -	       jsr	AVoxReadBytes
   1227  27000				   -	       jsr	loaddifficultytableHSCcontinue
   1228  27000				   -	       rts
   1229  27000				   -loaddifficultytableAVOXfull
   1230  27000				   -	       lda	#0
   1231  27000				   -	       sta	hsdevice	; looks like all 255 entries are taken... disable it.
   1232  27000				   -loaddifficultytableAVOXempty
   1233  27000				   -	       jmp	cleardifficultytablemem
   1234  27000				   -	       rts
   1235  27000				   -
   1236  27000				   -cleardifficultytablemem
   1237  27000				   -	       ldy	#29
   1238  27000				   -	       lda	#0
   1239  27000				   -cleardifficultytablememloop
   1240  27000				   -	       sta	HSRAMTable,y
   1241  27000				   -	       dey
   1242  27000				   -	       bpl	cleardifficultytablememloop
   1243  27000				   -	       rts
   1244  27000				   -hiscoremoduleend
   1245  27000				   -
   1246  27000				   -hiscorecleardlmem
   1247  27000				   -	       ldx	#(WZONECOUNT-1)
   1248  27000				   -hiscorecleardlmemloop1
   1249  27000				   -	       lda	DLPOINTL,x
   1250  27000				   -	       sta	dlpnt
   1251  27000				   -	       lda	DLPOINTH,x
   1252  27000				   -	       sta	dlpnt+1
   1253  27000				   -	       lda	#0
   1254  27000				   -	       ldy	#17
   1255  27000				   -hiscorecleardlmemloop2
   1256  27000				   -	       sta	(dlpnt),y
   1257  27000				   -	       dey
   1258  27000				   -	       bpl	hiscorecleardlmemloop2
   1259  27000				   -	       dex
   1260  27000				   -	       bpl	hiscorecleardlmemloop1
   1261  27000				   -	       rts
   1262  27000				   -
   1263  27000				   -	       ifconst	DOUBLEWIDE
   1264  27000				   -plotvaluedw
   1265  27000				   -plotdigitcount =	temp6
   1266  27000				   -	       lda	#0
   1267  27000				   -	       tay
   1268  27000				   -	       ldx	valbufend
   1269  27000				   -
   1270  27000				   -	       lda	plotdigitcount
   1271  27000				   -	       and	#1
   1272  27000				   -	       beq	pvnibble2chardw
   1273  27000				   -	       lda	#0
   1274  27000				   -	       sta	VALBUFFER,x	; just in case we skip this digit
   1275  27000				   -	       beq	pvnibble2char_skipnibbledw
   1276  27000				   -
   1277  27000				   -pvnibble2chardw
   1278  27000				   -			; high nibble...
   1279  27000				   -	       lda	(temp7),y
   1280  27000				   -	       and	#$f0
   1281  27000				   -	       lsr
   1282  27000				   -	       lsr
   1283  27000				   -	       lsr
   1284  27000				   -	       lsr
   1285  27000				   -
   1286  27000				   -	       clc
   1287  27000				   -	       adc	temp1	; add the offset to character graphics to our value
   1288  27000				   -	       sta	VALBUFFER,x
   1289  27000				   -	       inx
   1290  27000				   -	       dec	plotdigitcount
   1291  27000				   -pvnibble2char_skipnibbledw
   1292  27000				   -			; low nibble...
   1293  27000				   -	       lda	(temp7),y
   1294  27000				   -	       and	#$0f
   1295  27000				   -	       clc
   1296  27000				   -	       adc	temp1	; add the offset to character graphics to our value
   1297  27000				   -	       sta	VALBUFFER,x
   1298  27000				   -	       inx
   1299  27000				   -	       iny
   1300  27000				   -
   1301  27000				   -	       dec	plotdigitcount
   1302  27000				   -	       bne	pvnibble2chardw
   1303  27000				   -			;point to the start of our valuebuffer
   1304  27000				   -	       clc
   1305  27000				   -	       lda	#<VALBUFFER
   1306  27000				   -	       adc	valbufend
   1307  27000				   -	       sta	temp1
   1308  27000				   -	       lda	#>VALBUFFER
   1309  27000				   -	       adc	#0
   1310  27000				   -	       sta	temp2
   1311  27000				   -
   1312  27000				   -			;advance valbufend to the end of our value buffer
   1313  27000				   -	       stx	valbufend
   1314  27000				   -
   1315  27000				   -	       ifnconst	plotvalueonscreen
   1316  27000				   -	       jmp	plotcharacters
   1317  27000				   -	       else
   1318  27000				   -	       jmp	plotcharacterslive
   1319  27000				   -	       endif
   1320  27000				   -	       endif		; DOUBLEWIDE
   1321  27000				   -
   1322  27000				   -hiscoreend
   1323  27000				   -	       echo	" (hiscore module is using ",[(hiscoreend-hiscorestart)]d," bytes)"
   1324  27000				   -	       endif		; !isBANKSETBANK
   1325  27000					       endif		; HSSUPPORT
   1326  27000
------- FILE d:\2018dev\7800\7800basic\projects\demo1\lesson4_5.78b.asm
   3169  27000					       endif
   3170  27000					       ifnconst	included.fourbitfade.asm
------- FILE fourbitfade.asm LEVEL 2 PASS 3
      0  27000					       include	fourbitfade.asm
      1  27000							; ** fourbit fade, which is useful for audio levels and brightness fades
      2  27000							; ** input:  A=value to fade, fourbitfadevalue=global fade value
      3  27000							; **	      N.B. the global fade value is in the upper nibble. i.e. $Fx-0x
      4  27000							; ** output: A=faded value in lo nibble. orig top nibble is preserved,
      5  27000							; **	      other registers are preserved
      6  27000
      7  27000				   -	       ifconst	FOURBITFADE
      8  27000				   -
      9  27000				   -			; non-interrupt routine
     10  27000				   -
     11  27000				   -fourbitfade
     12  27000				   -	       sty	fourbittemp1
     13  27000				   -	       pha
     14  27000				   -	       and	#$0F
     15  27000				   -	       ora	fourbitfadevalue
     16  27000				   -	       tay
     17  27000				   -	       pla
     18  27000				   -	       and	#$F0
     19  27000				   -	       ora	fourbitfadelut,y
     20  27000				   -	       ldy	fourbittemp1	; restore Y
     21  27000				   -	       rts
     22  27000				   -
     23  27000				   -			; interrupt routine
     24  27000				   -
     25  27000				   -fourbitfadeint
     26  27000				   -	       sty	fourbittemp1int
     27  27000				   -	       pha
     28  27000				   -	       and	#$0F
     29  27000				   -	       ora	fourbitfadevalueint
     30  27000				   -	       tay
     31  27000				   -	       pla
     32  27000				   -	       and	#$F0
     33  27000				   -	       ora	fourbitfadelut,y
     34  27000				   -	       ldy	fourbittemp1int	; restore Y
     35  27000				   -	       rts
     36  27000				   -
     37  27000				   -fourbitfadelut
     38  27000				   -	       .byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     39  27000				   -	       .byte	$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$01,$01,$01
     40  27000				   -	       .byte	$00,$00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$02,$02,$02,$02,$02
     41  27000				   -	       .byte	$00,$00,$00,$00,$01,$01,$01,$01,$02,$02,$02,$02,$03,$03,$03,$03
     42  27000				   -	       .byte	$00,$00,$00,$00,$01,$01,$01,$02,$02,$02,$03,$03,$03,$04,$04,$04
     43  27000				   -	       .byte	$00,$00,$00,$01,$01,$01,$02,$02,$03,$03,$03,$04,$04,$04,$05,$05
     44  27000				   -	       .byte	$00,$00,$00,$01,$01,$02,$02,$03,$03,$03,$04,$04,$05,$05,$06,$06
     45  27000				   -	       .byte	$00,$00,$01,$01,$02,$02,$03,$03,$04,$04,$05,$05,$06,$06,$07,$07
     46  27000				   -	       .byte	$00,$00,$01,$01,$02,$02,$03,$03,$04,$05,$05,$06,$06,$07,$07,$08
     47  27000				   -	       .byte	$00,$00,$01,$01,$02,$03,$03,$04,$05,$05,$06,$06,$07,$08,$08,$09
     48  27000				   -	       .byte	$00,$00,$01,$02,$02,$03,$04,$04,$05,$06,$06,$07,$08,$08,$09,$0a
     49  27000				   -	       .byte	$00,$00,$01,$02,$03,$03,$04,$05,$06,$06,$07,$08,$09,$09,$0a,$0b
     50  27000				   -	       .byte	$00,$00,$01,$02,$03,$04,$04,$05,$06,$07,$08,$08,$09,$0a,$0b,$0c
     51  27000				   -	       .byte	$00,$00,$01,$02,$03,$04,$05,$06,$07,$07,$08,$09,$0a,$0b,$0c,$0d
     52  27000				   -	       .byte	$00,$00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e
     53  27000				   -	       .byte	$00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f
     54  27000				   -
     55  27000				   -fourbitfadeend
     56  27000				   -
     57  27000				   -	       echo	"  (fourbitfade module is using ",[(fourbitfadeend-fourbitfade)]d," bytes of rom)"
     58  27000				   -
     59  27000					       endif
------- FILE d:\2018dev\7800\7800basic\projects\demo1\lesson4_5.78b.asm
   3172  27000					       endif
   3173  27000					       ifnconst	included.plotsprite4.asm
------- FILE plotsprite4.asm LEVEL 2 PASS 3
      0  27000					       include	plotsprite4.asm
      1  27000							; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  27000
      3  27000				   -	       ifconst	PLOTSP4
      4  27000				   -
      5  27000				   -plotsprite4
      6  27000				   -	       ifnconst	NODRAWWAIT
      7  27000				   -	       ifconst	DOUBLEBUFFER
      8  27000				   -	       lda	doublebufferstate
      9  27000				   -	       bne	skipplotsprite4wait
     10  27000				   -	       endif		; DOUBLEBUFFER
     11  27000				   -	       ifconst	DEBUGWAITCOLOR
     12  27000				   -	       lda	#$41
     13  27000				   -	       sta	BACKGRND
     14  27000				   -	       endif
     15  27000				   -plotsprite4wait
     16  27000				   -	       lda	visibleover
     17  27000				   -	       bne	plotsprite4wait
     18  27000				   -skipplotsprite4wait
     19  27000				   -	       ifconst	DEBUGWAITCOLOR
     20  27000				   -	       lda	#$0
     21  27000				   -	       sta	BACKGRND
     22  27000				   -	       endif
     23  27000				   -	       endif
     24  27000				   -
     25  27000				   -			;arguments:
     26  27000				   -			; temp1=lo graphicdata
     27  27000				   -			; temp2=hi graphicdata
     28  27000				   -			; temp3=palette | width byte
     29  27000				   -			; temp4=x
     30  27000				   -			; temp5=y
     31  27000				   -
     32  27000				   -	       lda	temp5	;Y position
     33  27000				   -	       lsr		; 2 - Divide by 8 or 16
     34  27000				   -	       lsr		; 2
     35  27000				   -	       lsr		; 2
     36  27000				   -	       if	WZONEHEIGHT = 16
     37  27000				   -	       lsr		; 2
     38  27000				   -	       endif
     39  27000				   -
     40  27000				   -	       tax
     41  27000				   -
     42  27000				   -	       ifnconst	NOLIMITCHECKING
     43  27000				   -
     44  27000				   -			; the next block allows for vertical masking, and ensures we don't overwrite non-DL memory
     45  27000				   -
     46  27000				   -	       cmp	#WZONECOUNT
     47  27000				   -
     48  27000				   -	       bcc	continueplotsprite41	; the sprite is fully on-screen, so carry on...
     49  27000				   -			; otherwise, check to see if the bottom half is in zone 0...
     50  27000				   -
     51  27000				   -	       if	WZONEHEIGHT = 16
     52  27000				   -	       cmp	#15
     53  27000				   -	       else
     54  27000				   -	       cmp	#31
     55  27000				   -	       endif
     56  27000				   -
     57  27000				   -	       bne	exitplotsprite41
     58  27000				   -	       ldx	#0
     59  27000				   -	       jmp	continueplotsprite42
     60  27000				   -exitplotsprite41
     61  27000				   -	       rts
     62  27000				   -	       endif
     63  27000				   -
     64  27000				   -continueplotsprite41
     65  27000				   -
     66  27000				   -	       ifconst	VSCROLL
     67  27000				   -	       ldy	Xx3,x
     68  27000				   -	       lda	DLLMEM+11,y
     69  27000				   -	       else		; !VSCROLL
     70  27000				   -	       lda	DLPOINTL,x	;Get pointer to DL that this sprite starts in
     71  27000				   -	       endif		; !VSCROLL
     72  27000				   -	       ifconst	DOUBLEBUFFER
     73  27000				   -	       clc
     74  27000				   -	       adc	doublebufferdloffset
     75  27000				   -	       endif		; DOUBLEBUFFER
     76  27000				   -	       sta	dlpnt
     77  27000				   -	       ifconst	VSCROLL
     78  27000				   -	       lda	DLLMEM+10,y
     79  27000				   -	       else		; !VSCROLL
     80  27000				   -	       lda	DLPOINTH,x
     81  27000				   -	       endif		; !VSCROLL
     82  27000				   -	       ifconst	DOUBLEBUFFER
     83  27000				   -	       adc	#0
     84  27000				   -	       endif		; DOUBLEBUFFER
     85  27000				   -	       sta	dlpnt+1
     86  27000				   -
     87  27000				   -			;Create DL entry for upper part of sprite
     88  27000				   -
     89  27000				   -	       ldy	dlend,x	;Get the index to the end of this DL
     90  27000				   -
     91  27000				   -	       ifconst	CHECKOVERWRITE
     92  27000				   -	       cpy	#DLLASTOBJ
     93  27000				   -	       beq	checkcontinueplotsprite42
     94  27000				   -continueplotsprite41a
     95  27000				   -	       endif
     96  27000				   -
     97  27000				   -	       lda	temp1	; graphic data, lo byte
     98  27000				   -	       sta	(dlpnt),y	;Low byte of data address
     99  27000				   -
    100  27000				   -	       iny
    101  27000				   -	       lda	temp3	;palette|width
    102  27000				   -	       sta	(dlpnt),y
    103  27000				   -
    104  27000				   -	       iny
    105  27000				   -	       lda	temp5	;Y position
    106  27000				   -	       and	#(WZONEHEIGHT - 1)
    107  27000				   -	       cmp	#1	; clear carry if our sprite is just in this zone
    108  27000				   -	       ora	temp2	; graphic data, hi byte
    109  27000				   -	       sta	(dlpnt),y
    110  27000				   -
    111  27000				   -	       iny
    112  27000				   -	       lda	temp4	;Horizontal position
    113  27000				   -	       sta	(dlpnt),y
    114  27000				   -
    115  27000				   -	       iny
    116  27000				   -	       sty	dlend,x
    117  27000				   -
    118  27000				   -	       ifconst	ALWAYSTERMINATE
    119  27000				   -	       iny
    120  27000				   -	       lda	#0
    121  27000				   -	       sta	(dlpnt),y
    122  27000				   -	       endif
    123  27000				   -
    124  27000				   -checkcontinueplotsprite42
    125  27000				   -
    126  27000				   -	       bcc	doneSPDL4	;branch if the sprite was fully in the last zone
    127  27000				   -
    128  27000				   -			;Create DL entry for lower part of sprite
    129  27000				   -
    130  27000				   -	       inx		;Next region
    131  27000				   -
    132  27000				   -	       ifnconst	NOLIMITCHECKING
    133  27000				   -	       cpx	#WZONECOUNT
    134  27000				   -
    135  27000				   -	       bcc	continueplotsprite42	; the second half of the sprite is fully on-screen, so carry on...
    136  27000				   -	       rts
    137  27000				   -continueplotsprite42
    138  27000				   -	       endif
    139  27000				   -
    140  27000				   -	       ifconst	VSCROLL
    141  27000				   -	       ldy	Xx3,x
    142  27000				   -	       lda	DLLMEM+11,y
    143  27000				   -	       else		; !VSCROLL
    144  27000				   -	       lda	DLPOINTL,x	;Get pointer to next DL
    145  27000				   -	       endif		; !VSCROLL
    146  27000				   -	       ifconst	DOUBLEBUFFER
    147  27000				   -	       clc
    148  27000				   -	       adc	doublebufferdloffset
    149  27000				   -	       endif		; DOUBLEBUFFER
    150  27000				   -	       sta	dlpnt
    151  27000				   -	       ifconst	VSCROLL
    152  27000				   -	       lda	DLLMEM+10,y
    153  27000				   -	       else		; !VSCROLL
    154  27000				   -	       lda	DLPOINTH,x
    155  27000				   -	       endif		; !VSCROLL
    156  27000				   -	       ifconst	DOUBLEBUFFER
    157  27000				   -	       adc	#0
    158  27000				   -	       endif		; DOUBLEBUFFER
    159  27000				   -	       sta	dlpnt+1
    160  27000				   -	       ldy	dlend,x	;Get the index to the end of this DL
    161  27000				   -
    162  27000				   -	       ifconst	CHECKOVERWRITE
    163  27000				   -	       cpy	#DLLASTOBJ
    164  27000				   -	       bne	continueplotsprite42a
    165  27000				   -	       rts
    166  27000				   -continueplotsprite42a
    167  27000				   -	       endif
    168  27000				   -
    169  27000				   -	       lda	temp1	; graphic data, lo byte
    170  27000				   -	       sta	(dlpnt),y
    171  27000				   -
    172  27000				   -	       iny
    173  27000				   -	       lda	temp3	;palette|width
    174  27000				   -	       sta	(dlpnt),y
    175  27000				   -
    176  27000				   -	       iny
    177  27000				   -	       lda	temp5	;Y position
    178  27000				   -	       anc	#(WZONEHEIGHT - 1)	; undocumented. A=A&IMM, then move bit 7 into carry
    179  27000				   -	       ora	temp2	; graphic data, hi byte
    180  27000				   -	       sbc	#(WZONEHEIGHT-1)	; start at the DMA hole. -1 because carry is clear
    181  27000				   -	       sta	(dlpnt),y
    182  27000				   -
    183  27000				   -	       iny
    184  27000				   -	       lda	temp4	;Horizontal position
    185  27000				   -	       sta	(dlpnt),y
    186  27000				   -
    187  27000				   -	       iny
    188  27000				   -	       sty	dlend,x
    189  27000				   -
    190  27000				   -	       ifconst	ALWAYSTERMINATE
    191  27000				   -	       iny
    192  27000				   -	       lda	#0
    193  27000				   -	       sta	(dlpnt),y
    194  27000				   -	       endif
    195  27000				   -
    196  27000				   -doneSPDL4
    197  27000				   -	       rts
    198  27000				   -
    199  27000					       endif		; PLOTSP4
------- FILE d:\2018dev\7800\7800basic\projects\demo1\lesson4_5.78b.asm
   3175  27000					       endif
   3176  27000					       ifnconst	included.lzsa1compression.asm
------- FILE lzsa1compression.asm LEVEL 2 PASS 3
      0  27000					       include	lzsa1compression.asm
      1  27000							; ***************************************************************************
      2  27000							; ***************************************************************************
      3  27000							;
      4  27000							; lzsa1_6502.s
      5  27000							;
      6  27000							; NMOS 6502 decompressor for data stored in Emmanuel Marty's LZSA1 format.
      7  27000							;
      8  27000							; Decompresses a raw LZSA1 block, created with the command-line lzsa utility:
      9  27000							;     lzsa -r <original_file> <compressed_file>
     10  27000							;
     11  27000							; in:
     12  27000							; * LZSA_SRC_LO and LZSA_SRC_HI contain the compressed raw block address
     13  27000							; * LZSA_DST_LO and LZSA_DST_HI contain the destination buffer address
     14  27000							;
     15  27000							; out:
     16  27000							; * the destination buffer will contain the decompressed data
     17  27000							; * LZSA_DST_LO and LZSA_DST_HI contain the last decompressed byte address +1
     18  27000							;
     19  27000							; ***************************************************************************
     20  27000							;
     21  27000							; This code is written for the ACME assembler.
     22  27000							;
     23  27000							; The code is 165 bytes for the small version, and 191 bytes for the normal.
     24  27000							;
     25  27000							; Copyright John Brandwood 2021.
     26  27000							;
     27  27000							; Changes intruduced by Mike Saarna, 2023:
     28  27000							;    -converted to DASM format.
     29  27000							;    -generalised memory locations, for easier incorporation into 7800basic
     30  27000							;    -removed self-modifying code, for execution from rom.
     31  27000							;    -added LZSAFASTCOPYBYTE optimisation ; +24 bytes rom, ~10% quicker
     32  27000							;
     33  27000							; get the original unmodified code from:
     34  27000							; https://raw.githubusercontent.com/emmanuel-marty/lzsa
     35  27000							;
     36  27000							; Distributed under the Boost Software License, Version 1.0.
     37  27000							; (See accompanying file LICENSE_1_0.txt or copy at
     38  27000							; http://www.boost.org/LICENSE_1_0.txt)
     39  27000							;
     40  27000							; ***************************************************************************
     41  27000							; ***************************************************************************
     42  27000
     43  27000
     44  27000
     45  27000							; ***************************************************************************
     46  27000							; ***************************************************************************
     47  27000							;
     48  27000							; Decompression Options & Macros
     49  27000							;
     50  27000
     51  27000							;
     52  27000							; Choose size over decompression speed (within sane limits)?
     53  27000							;
     54  27000
     55  27000			00 00	    LZSA_SMALL_SIZE =	0
     56  27000			00 01	    LZSAFASTCOPYBYTE =	1	; +24 bytes rom, ~10% quicker
     57  27000
     58  27000							; ***************************************************************************
     59  27000							; ***************************************************************************
     60  27000							;
     61  27000							; ZP memory allocations... (temp1-temp9 are 7800basic ZP locations)
     62  27000			00 42	    LSZA1ZPRAM =	temp1
     63  27000			00 42	    lzsa_winptr =	LSZA1ZPRAM	; 1 word (temp1+temp2)
     64  27000			00 44	    lzsa_srcptr =	LSZA1ZPRAM + 2	; 1 word (temp3+temp4)
     65  27000			00 46	    lzsa_dstptr =	LSZA1ZPRAM + 4	; 1 word (temp5+temp6)
     66  27000
     67  27000							; Doesn't need to be ZP allocations...
     68  27000			00 48	    LSZA1TEMPRAM =	temp7
     69  27000			00 48	    lzsa_cmdbuf =	LSZA1TEMPRAM	; 1 byte (temp7)
     70  27000			00 49	    lzsa_cp_npages =	LSZA1TEMPRAM + 1	; 1 byte (temp8)
     71  27000			00 4a	    lzsa_lz_npages =	LSZA1TEMPRAM + 2	; 1 byte (temp9)
     72  27000
     73  27000							; Alternate names for previous allocations...
     74  27000			00 42	    lzsa_offset =	lzsa_winptr
     75  27000			00 44	    LZSA_SRC_LO =	lzsa_srcptr
     76  27000			00 45	    LZSA_SRC_HI =	lzsa_srcptr+1
     77  27000			00 46	    LZSA_DST_LO =	lzsa_dstptr
     78  27000			00 47	    LZSA_DST_HI =	lzsa_dstptr+1
     79  27000
     80  27000				   -	       ifconst	lzsa1support
     81  27000				   -
     82  27000				   -lzsa1modulestart
     83  27000				   -
     84  27000				   -	       if	LZSAFASTCOPYBYTE = 1
     85  27000				   -.cp_fixpointer
     86  27000				   -			; the optimised pointer adjustment fails if .cp_byte copied a whole page.
     87  27000				   -			; so we deal with it as a special case here, out of the regular .cp_byte flow.
     88  27000				   -			; this only happens rarely.
     89  27000				   -	       inc	lzsa_srcptr+1	; CC
     90  27000				   -	       inc	lzsa_dstptr+1
     91  27000				   -	       bcc	.cp_skip3	; always taken
     92  27000				   -			; each of these happen infrequently (~1 in 256 byte copies)
     93  27000				   -.cp_fixsrc1
     94  27000				   -	       inc	lzsa_srcptr+1
     95  27000				   -	       clc
     96  27000				   -	       bcc	.cp_skip1
     97  27000				   -.cp_fixsrc2
     98  27000				   -	       inc	lzsa_dstptr+1
     99  27000				   -	       clc
    100  27000				   -	       bcc	.cp_skip2
    101  27000				   -	       endif
    102  27000				   -
    103  27000				   -			; ***************************************************************************
    104  27000				   -			; ***************************************************************************
    105  27000				   -			;
    106  27000				   -			; lzsa1_unpack - Decompress data stored in Emmanuel Marty's LZSA1 format.
    107  27000				   -			;
    108  27000				   -			; Args: lzsa_srcptr = ptr to compessed data
    109  27000				   -			; Args: lzsa_dstptr = ptr to output buffer
    110  27000				   -			;
    111  27000				   -
    112  27000				   -
    113  27000				   -DECOMPRESS_LZSA1_FAST
    114  27000				   -lzsa1_unpack
    115  27000				   -	       ldy	#0	; Initialize source index.
    116  27000				   -	       ldx	#0	; Initialize hi-byte of length.
    117  27000				   -	       stx	lzsa_cp_npages
    118  27000				   -	       stx	lzsa_lz_npages
    119  27000				   -
    120  27000				   -			;
    121  27000				   -			; Copy bytes from compressed source data.
    122  27000				   -			;
    123  27000				   -			; N.B. X=0 is expected and guaranteed when we get here.
    124  27000				   -			;
    125  27000				   -
    126  27000				   -.cp_length
    127  27000				   -	       if	LZSA_SMALL_SIZE = 1
    128  27000				   -
    129  27000				   -	       jsr	.get_byte
    130  27000				   -
    131  27000				   -	       else		; !LZSA_SMALL_SIZE
    132  27000				   -
    133  27000				   -	       lda	(lzsa_srcptr),y
    134  27000				   -	       inc	lzsa_srcptr+0
    135  27000				   -	       bne	.cp_skip0
    136  27000				   -	       inc	lzsa_srcptr+1
    137  27000				   -
    138  27000				   -	       endif		; !LZSA_SMALL_SIZE
    139  27000				   -
    140  27000				   -.cp_skip0
    141  27000				   -	       sta	lzsa_cmdbuf	; Preserve this for later.
    142  27000				   -	       and	#$70	; Extract literal length.
    143  27000				   -	       lsr		; Set CC before ...
    144  27000				   -	       beq	.lz_offset	; Skip directly to match?
    145  27000				   -
    146  27000				   -	       lsr		; Get 3-bit literal length.
    147  27000				   -	       lsr
    148  27000				   -	       lsr
    149  27000				   -	       cmp	#$07	; Extended length?
    150  27000				   -	       bcc	.cp_got_len
    151  27000				   -
    152  27000				   -	       jsr	.get_length	; X=0, CS from CMP, returns CC.
    153  27000				   -	       stx	lzsa_cp_npages	; Hi-byte of length.
    154  27000				   -
    155  27000				   -.cp_got_len
    156  27000				   -	       tax		; Lo-byte of length.
    157  27000				   -
    158  27000				   -	       if	LZSAFASTCOPYBYTE = 0
    159  27000				   -
    160  27000				   -.cp_byte		; CC throughout the execution of this .cp_page loop.
    161  27000				   -	       lda	(lzsa_srcptr),y	; 5
    162  27000				   -	       sta	(lzsa_dstptr),y	; 5
    163  27000				   -	       inc	lzsa_srcptr+0	; 5
    164  27000				   -	       bne	.cp_skip1	; 3
    165  27000				   -	       inc	lzsa_srcptr+1
    166  27000				   -.cp_skip1
    167  27000				   -	       inc	lzsa_dstptr+0	; 5
    168  27000				   -	       bne	.cp_skip2	; 3
    169  27000				   -	       inc	lzsa_dstptr+1
    170  27000				   -.cp_skip2
    171  27000				   -	       dex		; 2
    172  27000				   -	       bne	.cp_byte	; 3
    173  27000				   -			;  ~29 cycles overall for X=1
    174  27000				   -			;  ~58 cycles overall for X=2
    175  27000				   -			;  ~87 cycles overall for X=3
    176  27000				   -			; ...
    177  27000				   -			; ~174 cycles overall for X=6
    178  27000				   -
    179  27000				   -	       else		; LZSAFASTCOPYBYTE != 0
    180  27000				   -
    181  27000				   -			; according to 7800heat, this loop is hot. It runs on average ~6x.
    182  27000				   -
    183  27000				   -.cp_byte		; CC throughout the execution of this .cp_page loop.
    184  27000				   -	       lda	(lzsa_srcptr),y	; 5+
    185  27000				   -	       sta	(lzsa_dstptr),y	; 5+
    186  27000				   -	       iny		; 2
    187  27000				   -	       dex		; 2
    188  27000				   -	       bne	.cp_byte	; 3/2
    189  27000				   -			; ~17 cycles each iteration
    190  27000				   -	       tya		; 2
    191  27000				   -	       beq	.cp_fixpointer	; 2 unlikely branch - only if we copied a full page
    192  27000				   -	       adc	lzsa_srcptr+0	; 3
    193  27000				   -	       sta	lzsa_srcptr+0	; 3
    194  27000				   -	       bcs	.cp_fixsrc1	; 2 (typical)
    195  27000				   -.cp_skip1
    196  27000				   -	       tya		; 2
    197  27000				   -	       adc	lzsa_dstptr+0	; 3
    198  27000				   -	       sta	lzsa_dstptr+0	; 3
    199  27000				   -	       bcs	.cp_fixsrc2	; 2 (typical)
    200  27000				   -.cp_skip2
    201  27000				   -	       ldy	#0	; 2
    202  27000				   -.cp_skip3
    203  27000				   -			; ~24 cycles overhead, typical
    204  27000				   -
    205  27000				   -			; ~41	cycles for X=1 (+12  cycles vs non-optimized)
    206  27000				   -			; ~58	cycles for X=2 (  0  cycles vs non-optimized)
    207  27000				   -			; ~75	cycles for X=3 (-12  cycles vs non-optimized)
    208  27000				   -			; ...
    209  27000				   -			; ~126 cycles for X=6 (-48  cycles vs non-optimized)
    210  27000				   -	       endif		; ! LZSAFASTCOPYBYTE = 0
    211  27000				   -
    212  27000				   -.cp_npages
    213  27000				   -	       lda	lzsa_cp_npages	; Any full pages left to copy?
    214  27000				   -	       beq	.lz_offset
    215  27000				   -
    216  27000				   -	       dec	lzsa_cp_npages	; Unlikely, so can be slow.
    217  27000				   -	       bcc	.cp_byte	; Always true!
    218  27000				   -
    219  27000				   -	       if	LZSA_SMALL_SIZE = 1
    220  27000				   -
    221  27000				   -			; Copy bytes from decompressed window.
    222  27000				   -			;
    223  27000				   -			; Shorter but slower version.
    224  27000				   -			;
    225  27000				   -			; N.B. X=0 is expected and guaranteed when we get here.
    226  27000				   -			;
    227  27000				   -
    228  27000				   -.lz_offset
    229  27000				   -	       jsr	.get_byte	; Get offset-lo.
    230  27000				   -
    231  27000				   -.offset_lo
    232  27000				   -	       adc	lzsa_dstptr+0	; Always CC from .cp_page loop.
    233  27000				   -	       sta	lzsa_winptr+0
    234  27000				   -
    235  27000				   -	       lda	#$FF
    236  27000				   -	       bit	lzsa_cmdbuf
    237  27000				   -	       bpl	.offset_hi
    238  27000				   -
    239  27000				   -	       jsr	.get_byte	; Get offset-hi.
    240  27000				   -
    241  27000				   -.offset_hi
    242  27000				   -	       adc	lzsa_dstptr+1	; lzsa_winptr < lzsa_dstptr, so
    243  27000				   -	       sta	lzsa_winptr+1	; always leaves CS.
    244  27000				   -
    245  27000				   -.lz_length
    246  27000				   -	       lda	lzsa_cmdbuf	; X=0 from previous loop.
    247  27000				   -	       and	#$0F
    248  27000				   -	       adc	#$03 - 1	; CS from previous ADC.
    249  27000				   -	       cmp	#$12	; Extended length?
    250  27000				   -	       bcc	.lz_got_len
    251  27000				   -
    252  27000				   -	       jsr	.get_length	; CS from CMP, X=0, returns CC.
    253  27000				   -	       stx	lzsa_lz_npages	; Hi-byte of length.
    254  27000				   -
    255  27000				   -.lz_got_len
    256  27000				   -	       tax		; Lo-byte of length.
    257  27000				   -
    258  27000				   -.lz_byte
    259  27000				   -	       lda	(lzsa_winptr),y	; CC throughout the execution of
    260  27000				   -	       sta	(lzsa_dstptr),y	; of this .lz_page loop.
    261  27000				   -	       inc	lzsa_winptr+0
    262  27000				   -	       bne	.lz_skip1
    263  27000				   -	       inc	lzsa_winptr+1
    264  27000				   -.lz_skip1
    265  27000				   -	       inc	lzsa_dstptr+0
    266  27000				   -	       bne	.lz_skip2
    267  27000				   -	       inc	lzsa_dstptr+1
    268  27000				   -.lz_skip2
    269  27000				   -	       dex
    270  27000				   -	       bne	.lz_byte
    271  27000				   -.lz_npages
    272  27000				   -	       lda	lzsa_lz_npages	; Any full pages left to copy?
    273  27000				   -	       beq	.cp_length
    274  27000				   -
    275  27000				   -	       dec	lzsa_lz_npages	; Unlikely, so can be slow.
    276  27000				   -	       bcc	.lz_byte	; Always true!
    277  27000				   -
    278  27000				   -	       else		; !LZSA_SMALL_SIZE
    279  27000				   -
    280  27000				   -			;
    281  27000				   -			; Copy bytes from decompressed window.
    282  27000				   -			;
    283  27000				   -			; Longer but faster.
    284  27000				   -			;
    285  27000				   -			; N.B. X=0 is expected and guaranteed when we get here.
    286  27000				   -			;
    287  27000				   -
    288  27000				   -.lz_offset
    289  27000				   -	       lda	(lzsa_srcptr),y	; Get offset-lo.
    290  27000				   -	       inc	lzsa_srcptr+0
    291  27000				   -	       bne	.offset_lo
    292  27000				   -	       inc	lzsa_srcptr+1
    293  27000				   -
    294  27000				   -.offset_lo
    295  27000				   -	       sta	lzsa_offset+0
    296  27000				   -
    297  27000				   -	       lda	#$FF	; Get offset-hi.
    298  27000				   -	       bit	lzsa_cmdbuf
    299  27000				   -	       bpl	.offset_hi
    300  27000				   -
    301  27000				   -	       lda	(lzsa_srcptr),y
    302  27000				   -	       inc	lzsa_srcptr+0
    303  27000				   -	       bne	.offset_hi
    304  27000				   -	       inc	lzsa_srcptr+1
    305  27000				   -
    306  27000				   -.offset_hi
    307  27000				   -	       sta	lzsa_offset+1
    308  27000				   -
    309  27000				   -.lz_length
    310  27000				   -	       lda	lzsa_cmdbuf	; X=0 from previous loop.
    311  27000				   -	       and	#$0F
    312  27000				   -	       adc	#$03	; Always CC from .cp_page loop.
    313  27000				   -	       cmp	#$12	; Extended length?
    314  27000				   -	       bcc	.got_lz_len
    315  27000				   -
    316  27000				   -	       jsr	.get_length	; X=0, CS from CMP, returns CC.
    317  27000				   -
    318  27000				   -.got_lz_len
    319  27000				   -	       inx		; Hi-byte of length+256.
    320  27000				   -
    321  27000				   -	       eor	#$FF	; Negate the lo-byte of length
    322  27000				   -	       tay
    323  27000				   -	       eor	#$FF
    324  27000				   -
    325  27000				   -.get_lz_dst
    326  27000				   -	       adc	lzsa_dstptr+0	; Calc address of partial page.
    327  27000				   -	       sta	lzsa_dstptr+0	; Always CC from previous CMP.
    328  27000				   -	       iny
    329  27000				   -	       bcs	.get_lz_win
    330  27000				   -	       beq	.get_lz_win	; Is lo-byte of length zero?
    331  27000				   -	       dec	lzsa_dstptr+1
    332  27000				   -
    333  27000				   -.get_lz_win
    334  27000				   -	       clc		; Calc address of match.
    335  27000				   -	       adc	lzsa_offset+0	; N.B. Offset is negative!
    336  27000				   -	       sta	lzsa_winptr+0
    337  27000				   -	       lda	lzsa_dstptr+1
    338  27000				   -	       adc	lzsa_offset+1
    339  27000				   -	       sta	lzsa_winptr+1
    340  27000				   -
    341  27000				   -			; according to 7800heat, this loop is hot. It runs on average ~7.5x.
    342  27000				   -			; TODO: see if there's a chance to unroll it.
    343  27000				   -.lz_byte
    344  27000				   -	       lda	(lzsa_winptr),y
    345  27000				   -	       sta	(lzsa_dstptr),y
    346  27000				   -	       iny
    347  27000				   -	       bne	.lz_byte
    348  27000				   -
    349  27000				   -	       inc	lzsa_dstptr+1
    350  27000				   -	       dex		; Any full pages left to copy?
    351  27000				   -	       bne	.lz_more
    352  27000				   -
    353  27000				   -	       jmp	.cp_length	; Loop around to the beginning.
    354  27000				   -
    355  27000				   -.lz_more
    356  27000				   -	       inc	lzsa_winptr+1	; Unlikely, so can be slow.
    357  27000				   -	       bne	.lz_byte	; Always true!
    358  27000				   -
    359  27000				   -	       endif		; !LZSA_SMALL_SIZE
    360  27000				   -
    361  27000				   -			;
    362  27000				   -			; Get 16-bit length in X:A register pair, return with CC.
    363  27000				   -			;
    364  27000				   -			; N.B. X=0 is expected and guaranteed when we get here.
    365  27000				   -			;
    366  27000				   -
    367  27000				   -.get_length
    368  27000				   -	       clc		; Add on the next byte to get
    369  27000				   -	       adc	(lzsa_srcptr),y	; the length.
    370  27000				   -	       inc	lzsa_srcptr+0
    371  27000				   -	       bne	.skip_inc
    372  27000				   -	       inc	lzsa_srcptr+1
    373  27000				   -.skip_inc
    374  27000				   -
    375  27000				   -	       bcc	.got_length	; No overflow means done.
    376  27000				   -	       clc		; MUST return CC!
    377  27000				   -	       tax		; Preserve overflow value.
    378  27000				   -
    379  27000				   -.extra_byte
    380  27000				   -	       jsr	.get_byte	; So rare, this can be slow!
    381  27000				   -	       pha
    382  27000				   -	       txa		; Overflow to 256 or 257?
    383  27000				   -	       beq	.extra_word
    384  27000				   -
    385  27000				   -.check_length
    386  27000				   -	       pla		; Length-lo.
    387  27000				   -	       bne	.got_length	; Check for zero.
    388  27000				   -	       dex		; Do one less page loop if so.
    389  27000				   -.got_length
    390  27000				   -	       rts
    391  27000				   -
    392  27000				   -.extra_word
    393  27000				   -	       jsr	.get_byte	; So rare, this can be slow!
    394  27000				   -	       tax
    395  27000				   -	       bne	.check_length	; Length-hi == 0 at EOF.
    396  27000				   -
    397  27000				   -.finished
    398  27000				   -	       pla		; Length-lo.
    399  27000				   -	       pla		; Decompression completed, pop
    400  27000				   -	       pla		; return address.
    401  27000				   -	       rts
    402  27000				   -
    403  27000				   -.get_byte
    404  27000				   -	       lda	(lzsa_srcptr),y	; Subroutine version for when
    405  27000				   -	       inc	lzsa_srcptr+0	; inlining isn't advantageous.
    406  27000				   -	       bne	.got_byte
    407  27000				   -	       inc	lzsa_srcptr+1	; Inc & test for bank overflow.
    408  27000				   -.got_byte
    409  27000				   -	       rts
    410  27000				   -
    411  27000				   -lzsa1moduleend
    412  27000				   -
    413  27000				   -	       echo	"  (lzsa1compression module is using ",[(lzsa1moduleend-lzsa1modulestart)]d," bytes of rom)"
    414  27000				   -
    415  27000					       endif		; lzsa1support
------- FILE d:\2018dev\7800\7800basic\projects\demo1\lesson4_5.78b.asm
   3178  27000					       endif
   3179  27000							; Provided under the CC0 license. See the included LICENSE.txt for details.
   3180  27000
   3181  27000							;standard routimes needed for pretty much all games
   3182  27000
   3183  27000							; some definitions used with "set debug color"
   3184  27000			00 91	    DEBUGCALC  =	$91
   3185  27000			00 41	    DEBUGWASTE =	$41
   3186  27000			00 c1	    DEBUGDRAW  =	$C1
   3187  27000
   3188  27000							;NMI and IRQ handlers
   3189  27000				    NMI
   3190  27000							;VISIBLEOVER is 255 while the screen is drawn, and 0 right after the visible screen is done.
   3191  27000			48		       pha		; save A
   3192  27001			d8		       cld
   3193  27002			a5 4d		       lda	visibleover
   3194  27004			49 ff		       eor	#255
   3195  27006			85 4d		       sta	visibleover
   3196  27008				   -	       ifconst	DEBUGINTERRUPT
   3197  27008				   -	       and	#$93
   3198  27008				   -	       sta	BACKGRND
   3199  27008					       endif
   3200  27008			8a		       txa		; save X
   3201  27009			48		       pha
   3202  2700a			98		       tya		; save Y
   3203  2700b			48		       pha
   3204  2700c			ce b2 01	       dec	interruptindex
   3205  2700f			d0 03		       bne	skipreallyoffvisible
   3206  27011			4c 73 f0	       jmp	reallyoffvisible
   3207  27014				    skipreallyoffvisible
   3208  27014			a5 4d		       lda	visibleover
   3209  27016			d0 03		       bne	carryontopscreenroutine
   3210  27018				   -	       ifconst	.bottomscreenroutine
   3211  27018				   -	       lda	interrupthold
   3212  27018				   -	       beq	skipbottomroutine
   3213  27018				   -	       jsr	.bottomscreenroutine
   3214  27018				   -skipbottomroutine
   3215  27018					       endif
   3216  27018			4c 81 f0	       jmp	NMIexit
   3217  2701b				    carryontopscreenroutine
   3218  2701b				   -	       ifconst	.topscreenroutine
   3219  2701b				   -	       lda	interrupthold
   3220  2701b				   -	       beq	skiptoproutine
   3221  2701b				   -	       jsr	.topscreenroutine
   3222  2701b				   -skiptoproutine
   3223  2701b					       endif
   3224  2701b					       ifnconst	CANARYOFF
   3225  2701b			ad c4 01	       lda	canary
   3226  2701e			f0 07		       beq	skipcanarytriggered
   3227  27020			a9 45		       lda	#$45
   3228  27022			85 20		       sta	BACKGRND
   3229  27024			4c 6b f0	       jmp	skipbrkolorset	; common crash dump routine, if available
   3230  27027				    skipcanarytriggered
   3231  27027					       endif
   3232  27027
   3233  27027			ee 3e 21	       inc	frameslost	; this is balanced with a "dec frameslost" when drawscreen is called.
   3234  2702a
   3235  2702a							; ** Other important routines that need to regularly run, and can run onscreen.
   3236  2702a							; ** Atarivox can't go here, because Maria might interrupt it while it's bit-banging.
   3237  2702a
   3238  2702a				   -	       ifconst	LONGCONTROLLERREAD
   3239  2702a				   -longcontrollerreads 		; ** controllers that take a lot of time to read. We use much of the visible screen here.
   3240  2702a				   -	       ldy	port1control
   3241  2702a				   -	       lda	longreadtype,y
   3242  2702a				   -	       beq	LLRET1
   3243  2702a				   -	       tay
   3244  2702a				   -	       lda	longreadroutinehiP1,y
   3245  2702a				   -	       sta	inttemp4
   3246  2702a				   -	       lda	longreadroutineloP1,y
   3247  2702a				   -	       sta	inttemp3
   3248  2702a				   -	       jmp	(inttemp3)
   3249  2702a				   -LLRET1
   3250  2702a				   -	       ldy	port0control
   3251  2702a				   -	       lda	longreadtype,y
   3252  2702a				   -	       beq	LLRET0
   3253  2702a				   -	       tay
   3254  2702a				   -	       lda	longreadroutinehiP0,y
   3255  2702a				   -	       sta	inttemp4
   3256  2702a				   -	       lda	longreadroutineloP0,y
   3257  2702a				   -	       sta	inttemp3
   3258  2702a				   -	       jmp	(inttemp3)
   3259  2702a				   -LLRET0
   3260  2702a				   -
   3261  2702a				   -
   3262  2702a				   -	       ifconst	PADDLERANGE
   3263  2702a				   -TIMEVAL    =	PADDLERANGE
   3264  2702a				   -	       else
   3265  2702a				   -TIMEVAL    =	160
   3266  2702a				   -	       endif
   3267  2702a				   -TIMEOFFSET =	10
   3268  2702a				   -
   3269  2702a					       endif		; LONGCONTROLLERREAD
   3270  2702a
   3271  2702a
   3272  2702a			20 18 f2	       jsr	servicesfxchannels
   3273  2702d				   -	       ifconst	MUSICTRACKER
   3274  2702d				   -	       jsr	servicesong
   3275  2702d					       endif		; MUSICTRACKER
   3276  2702d				   -	       ifconst	RMT
   3277  2702d				   -	       ifnconst	RMTOFFSPEED
   3278  2702d				   -	       ifconst	RMTPALSPEED
   3279  2702d				   -	       lda	ntscslowframe
   3280  2702d				   -	       bne	skiprasterupdate
   3281  2702d				   -	       endif
   3282  2702d				   -	       endif
   3283  2702d				   -	       lda	rasterpause
   3284  2702d				   -	       beq	skiprasterupdate
   3285  2702d				   -	       ifconst	PAUSESILENT
   3286  2702d				   -	       lda	pausestate
   3287  2702d				   -	       bne	skiprasterupdate
   3288  2702d				   -	       endif
   3289  2702d				   -	       jsr	RASTERMUSICTRACKER+3
   3290  2702d				   -skiprasterupdate
   3291  2702d				   -RMT_Iend
   3292  2702d					       endif
   3293  2702d
   3294  2702d			ee a4 01	       inc	framecounter
   3295  27030			ad a4 01	       lda	framecounter
   3296  27033			29 3f		       and	#63
   3297  27035			d0 08		       bne	skipcountdownseconds
   3298  27037			ad a5 01	       lda	countdownseconds
   3299  2703a			f0 03		       beq	skipcountdownseconds
   3300  2703c			ce a5 01	       dec	countdownseconds
   3301  2703f				    skipcountdownseconds
   3302  2703f
   3303  2703f			a2 01		       ldx	#1
   3304  27041				    buttonreadloop
   3305  27041			8a		       txa
   3306  27042			48		       pha
   3307  27043			bc ba 01	       ldy	port0control,x
   3308  27046			b9 f4 f1	       lda	buttonhandlerlo,y
   3309  27049			85 da		       sta	inttemp3
   3310  2704b			b9 e7 f1	       lda	buttonhandlerhi,y
   3311  2704e			85 db		       sta	inttemp4
   3312  27050			05 da		       ora	inttemp3
   3313  27052			f0 03		       beq	buttonreadloopreturn
   3314  27054			6c da 00	       jmp	(inttemp3)
   3315  27057				    buttonreadloopreturn
   3316  27057			68		       pla
   3317  27058			aa		       tax
   3318  27059			ca		       dex
   3319  2705a			10 e5		       bpl	buttonreadloop
   3320  2705c
   3321  2705c					       ifconst	DOUBLEBUFFER
   3322  2705c			ad b4 01	       lda	doublebufferminimumframeindex
   3323  2705f			f0 03		       beq	skipdoublebufferminimumframeindexadjust
   3324  27061			ce b4 01	       dec	doublebufferminimumframeindex
   3325  27064				    skipdoublebufferminimumframeindexadjust
   3326  27064					       endif
   3327  27064
   3328  27064			4c 81 f0	       jmp	NMIexit
   3329  27067
   3330  27067				    IRQ 		; the only source of non-nmi interrupt should be the BRK opcode.
   3331  27067					       ifnconst	BREAKPROTECTOFF
   3332  27067			a9 1a		       lda	#$1A
   3333  27069			85 20		       sta	BACKGRND
   3334  2706b				    skipbrkolorset
   3335  2706b				    skipbrkdetected
   3336  2706b			a9 60		       lda	#$60
   3337  2706d			8d 07 21	       sta	sCTRL
   3338  27070			85 3c		       sta	CTRL
   3339  27072					       ifnconst	hiscorefont
   3340  27072			02		       .byte.b	$02	; KIL/JAM
   3341  27073				   -	       else		; hiscorefont is present
   3342  27073				   -	       ifconst	CRASHDUMP
   3343  27073				   -	       bit	MSTAT
   3344  27073				   -	       bpl	skipbrkdetected	; wait for vblank to ensure we're clear of NMI
   3345  27073				   -
   3346  27073				   -	       ifconst	dumpbankswitch
   3347  27073				   -	       lda	dumpbankswitch
   3348  27073				   -	       pha
   3349  27073				   -	       endif
   3350  27073				   -
   3351  27073				   -			; bankswitch if needed, to get to the hiscore font
   3352  27073				   -	       ifconst	bankswitchmode
   3353  27073				   -	       ifconst	included.hiscore.asm.bank
   3354  27073				   -	       ifconst	MCPDEVCART
   3355  27073				   -	       lda	#($18 | included.hiscore.asm.bank)
   3356  27073				   -	       sta	$3000
   3357  27073				   -	       else
   3358  27073				   -	       lda	#(included.hiscore.asm.bank)
   3359  27073				   -	       sta	$8000
   3360  27073				   -	       endif
   3361  27073				   -	       endif		; included.hiscore.asm.bank
   3362  27073				   -	       endif		; bankswitchmode
   3363  27073				   -
   3364  27073				   -	       ifconst	DOUBLEBUFFER
   3365  27073				   -			;turn off double-buffering, if on...
   3366  27073				   -	       lda	#>DLLMEM
   3367  27073				   -	       sta	DPPH
   3368  27073				   -	       lda	#<DLLMEM
   3369  27073				   -	       sta	DPPL
   3370  27073				   -	       endif
   3371  27073				   -
   3372  27073				   -	       lda	#$00
   3373  27073				   -	       sta	P0C2
   3374  27073				   -
   3375  27073				   -			;update the second-from-top DL...
   3376  27073				   -	       ldy	#8
   3377  27073				   -NMIupdatetopDL
   3378  27073				   -	       lda	show2700,y
   3379  27073				   -	       sta	ZONE1ADDRESS,y
   3380  27073				   -	       dey
   3381  27073				   -	       bpl	NMIupdatetopDL
   3382  27073				   -
   3383  27073				   -			; the hiscore font is present, so we try to output the stack
   3384  27073				   -	       ldy	#0
   3385  27073				   -copystackloop
   3386  27073				   -	       pla
   3387  27073				   -	       pha
   3388  27073				   -	       lsr
   3389  27073				   -	       lsr
   3390  27073				   -	       lsr
   3391  27073				   -	       lsr
   3392  27073				   -	       tax
   3393  27073				   -	       lda	hiscorehexlut,x
   3394  27073				   -	       sta	$2700,y
   3395  27073				   -	       iny
   3396  27073				   -
   3397  27073				   -	       pla
   3398  27073				   -	       and	#$0F
   3399  27073				   -	       tax
   3400  27073				   -	       lda	hiscorehexlut,x
   3401  27073				   -	       sta	$2700,y
   3402  27073				   -	       iny
   3403  27073				   -
   3404  27073				   -	       lda	#27	; period
   3405  27073				   -	       sta	$2700,y
   3406  27073				   -	       iny
   3407  27073				   -
   3408  27073				   -	       cpy	#30
   3409  27073				   -	       bne	copystackloop
   3410  27073				   -
   3411  27073				   -	       lda	#>hiscorefont
   3412  27073				   -	       sta	CHARBASE
   3413  27073				   -	       sta	sCHARBASE
   3414  27073				   -	       lda	#%01000011	;Enable DMA, mode=320A
   3415  27073				   -	       sta	CTRL
   3416  27073				   -	       sta	sCTRL
   3417  27073				   -	       .byte	$02	; KIL/JAM
   3418  27073				   -hiscorehexlut
   3419  27073				   -			; 0 1 2 3 4 5 6 7 8 9 A B C D E F
   3420  27073				   -	       .byte	33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 0, 1, 2, 3, 4, 5
   3421  27073				   -show2700
   3422  27073				   -			; lo mode hi width=29 x EODL
   3423  27073				   -	       .byte	$00, %01100000, $27, 3, 20, 0,0,0
   3424  27073				   -	       else		; CRASHDUMP
   3425  27073				   -	       .byte	$02	; KIL/JAM
   3426  27073				   -	       endif		; crashdump
   3427  27073					       endif		; hiscorefont
   3428  27073				   -	       else
   3429  27073				   -	       RTI
   3430  27073					       endif
   3431  27073
   3432  27073				   -	       ifconst	LONGCONTROLLERREAD
   3433  27073				   -
   3434  27073				   -longreadtype
   3435  27073				   -	       .byte	0, 0, 0, 1	; NONE PROLINE LIGHTGUN PADDLE
   3436  27073				   -	       .byte	2, 0, 3, 0	; TRKBALL VCSSTICK DRIVING KEYPAD
   3437  27073				   -	       .byte	3, 3, 0, 0	; STMOUSE AMOUSE ATARIVOX SNES
   3438  27073				   -
   3439  27073				   -longreadroutineloP0
   3440  27073				   -	       .byte	<LLRET0	; 0 = no routine
   3441  27073				   -	       .byte	<paddleport0update	; 1 = paddle
   3442  27073				   -	       .byte	<trakball0update	; 2 = trakball
   3443  27073				   -	       .byte	<mouse0update	; 3 = mouse
   3444  27073				   -
   3445  27073				   -longreadroutinehiP0
   3446  27073				   -	       .byte	>LLRET0	; 0 = no routine
   3447  27073				   -	       .byte	>paddleport0update	; 1 = paddle
   3448  27073				   -	       .byte	>trakball0update	; 2 = trackball
   3449  27073				   -	       .byte	>mouse0update	; 3 = mouse
   3450  27073				   -
   3451  27073				   -longreadroutineloP1
   3452  27073				   -	       .byte	<LLRET1	; 0 = no routine
   3453  27073				   -	       .byte	<paddleport1update	; 1 = paddle
   3454  27073				   -	       .byte	<trakball1update	; 2 = trakball
   3455  27073				   -	       .byte	<mouse1update	; 3 = mouse
   3456  27073				   -
   3457  27073				   -longreadroutinehiP1
   3458  27073				   -	       .byte	>LLRET1	; 0 = no routine
   3459  27073				   -	       .byte	>paddleport1update	; 1 = paddle
   3460  27073				   -	       .byte	>trakball1update	; 2 = trackball
   3461  27073				   -	       .byte	>mouse1update	; 3 = mouse
   3462  27073				   -
   3463  27073				   -
   3464  27073				   -SETTIM64T
   3465  27073				   -	       bne	skipdefaulttime
   3466  27073				   -	       ifnconst	PADDLESMOOTHINGOFF
   3467  27073				   -	       lda	#(TIMEVAL+TIMEOFFSET+1)
   3468  27073				   -	       else
   3469  27073				   -	       lda	#(TIMEVAL+TIMEOFFSET)
   3470  27073				   -	       endif
   3471  27073				   -skipdefaulttime
   3472  27073				   -	       tay
   3473  27073				   -	       dey
   3474  27073				   -.setTIM64Tloop
   3475  27073				   -	       sta	TIM64T
   3476  27073				   -	       cpy	INTIM
   3477  27073				   -	       bne	.setTIM64Tloop
   3478  27073				   -	       rts
   3479  27073					       endif		; LONGCONTROLLERREAD
   3480  27073
   3481  27073				    reallyoffvisible
   3482  27073			85 24		       sta	WSYNC
   3483  27075
   3484  27075			a9 00		       lda	#0
   3485  27077			85 4d		       sta	visibleover
   3486  27079				   -	       ifconst	DEBUGINTERRUPT
   3487  27079				   -	       sta	BACKGRND
   3488  27079					       endif
   3489  27079
   3490  27079			a9 03		       lda	#3
   3491  2707b			8d b2 01	       sta	interruptindex
   3492  2707e
   3493  2707e			20 65 f1	       jsr	uninterruptableroutines
   3494  27081
   3495  27081				   -	       ifconst	.userinterrupt
   3496  27081				   -	       lda	interrupthold
   3497  27081				   -	       beq	skipuserintroutine
   3498  27081				   -	       jsr	.userinterrupt
   3499  27081				   -skipuserintroutine
   3500  27081					       endif
   3501  27081
   3502  27081				   -	       ifconst	KEYPADSUPPORT
   3503  27081				   -	       jsr	keypadcolumnread
   3504  27081				   -	       jsr	keypadrowselect
   3505  27081					       endif
   3506  27081
   3507  27081				    NMIexit
   3508  27081			68		       pla
   3509  27082			a8		       tay
   3510  27083			68		       pla
   3511  27084			aa		       tax
   3512  27085			68		       pla
   3513  27086			40		       RTI
   3514  27087
   3515  27087				    clearscreen
   3516  27087			a2 0b		       ldx	#(WZONECOUNT-1)
   3517  27089			a9 00		       lda	#0
   3518  2708b				    clearscreenloop
   3519  2708b			95 65		       sta	dlend,x
   3520  2708d			ca		       dex
   3521  2708e			10 fb		       bpl	clearscreenloop
   3522  27090			a9 00		       lda	#0
   3523  27092			8d ad 01	       sta	valbufend	; clear the bcd value buffer
   3524  27095			8d ae 01	       sta	valbufendsave
   3525  27098			60		       rts
   3526  27099
   3527  27099				    restorescreen
   3528  27099			a2 0b		       ldx	#(WZONECOUNT-1)
   3529  2709b			a9 00		       lda	#0
   3530  2709d				    restorescreenloop
   3531  2709d			b5 82		       lda	dlendsave,x
   3532  2709f			95 65		       sta	dlend,x
   3533  270a1			ca		       dex
   3534  270a2			10 f9		       bpl	restorescreenloop
   3535  270a4			ad ae 01	       lda	valbufendsave
   3536  270a7			8d ad 01	       sta	valbufend
   3537  270aa			60		       rts
   3538  270ab
   3539  270ab				    savescreen
   3540  270ab			a2 0b		       ldx	#(WZONECOUNT-1)
   3541  270ad				    savescreenloop
   3542  270ad			b5 65		       lda	dlend,x
   3543  270af			95 82		       sta	dlendsave,x
   3544  270b1			ca		       dex
   3545  270b2			10 f9		       bpl	savescreenloop
   3546  270b4			ad ad 01	       lda	valbufend
   3547  270b7			8d ae 01	       sta	valbufendsave
   3548  270ba					       ifconst	DOUBLEBUFFER
   3549  270ba			a5 d5		       lda	doublebufferstate
   3550  270bc			f0 04		       beq	savescreenrts
   3551  270be			a9 01		       lda	#1
   3552  270c0			85 d7		       sta	doublebufferbufferdirty
   3553  270c2				    savescreenrts
   3554  270c2					       endif		; DOUBLEBUFFER
   3555  270c2			60		       rts
   3556  270c3
   3557  270c3				    drawscreen
   3558  270c3
   3559  270c3				   -	       ifconst	interrupthold
   3560  270c3				   -	       lda	#$FF
   3561  270c3				   -	       sta	interrupthold	; if the user called drawscreen, we're ready for interrupts
   3562  270c3					       endif
   3563  270c3
   3564  270c3			a9 00		       lda	#0
   3565  270c5			85 42		       sta	temp1	; not B&W if we're here...
   3566  270c7
   3567  270c7				    drawscreenwait
   3568  270c7			a5 4d		       lda	visibleover
   3569  270c9			d0 fc		       bne	drawscreenwait	; make sure the visible screen isn't being drawn
   3570  270cb
   3571  270cb							;restore some registers in case the game changed them mid-screen...
   3572  270cb			ad 07 21	       lda	sCTRL
   3573  270ce			05 42		       ora	temp1
   3574  270d0			85 3c		       sta	CTRL
   3575  270d2			ad 0b 21	       lda	sCHARBASE
   3576  270d5			85 34		       sta	CHARBASE
   3577  270d7
   3578  270d7							;ensure all of the display list is terminated...
   3579  270d7			20 42 f1	       jsr	terminatedisplaylist
   3580  270da
   3581  270da					       ifnconst	pauseroutineoff
   3582  270da			20 e5 f0	       jsr	pauseroutine
   3583  270dd					       endif		; pauseroutineoff
   3584  270dd
   3585  270dd							; Make sure the visible screen has *started* before we exit. That way we can rely on drawscreen
   3586  270dd							; delaying a full frame, but still allowing time for basic calculations.
   3587  270dd				    visiblescreenstartedwait
   3588  270dd			a5 4d		       lda	visibleover
   3589  270df			f0 fc		       beq	visiblescreenstartedwait
   3590  270e1				    visiblescreenstartedwaitdone
   3591  270e1			ce 3e 21	       dec	frameslost	; ; this gets balanced with an "inc frameslost" by an NMI at the top of the screen
   3592  270e4			60		       rts
   3593  270e5
   3594  270e5					       ifnconst	pauseroutineoff
   3595  270e5							; check to see if pause was pressed and released
   3596  270e5				    pauseroutine
   3597  270e5			ad b5 01	       lda	pausedisable
   3598  270e8			d0 47		       bne	leavepauseroutine
   3599  270ea			a9 08		       lda	#8
   3600  270ec			2c 82 02	       bit	SWCHB
   3601  270ef			f0 22		       beq	pausepressed
   3602  270f1
   3603  270f1				   -	       ifconst	SNES0PAUSE
   3604  270f1				   -	       lda	port0control
   3605  270f1				   -	       cmp	#11
   3606  270f1				   -	       bne	skipsnes0pause
   3607  270f1				   -	       lda	snesdetected0
   3608  270f1				   -	       beq	skipsnes0pause
   3609  270f1				   -	       lda	snes2atari0hi
   3610  270f1				   -	       and	#%00010000
   3611  270f1				   -	       beq	pausepressed
   3612  270f1				   -skipsnes0pause
   3613  270f1					       endif
   3614  270f1				   -	       ifconst	SNES1PAUSE
   3615  270f1				   -
   3616  270f1				   -	       lda	port1control
   3617  270f1				   -	       cmp	#11
   3618  270f1				   -	       bne	skipsnes1pause
   3619  270f1				   -	       lda	snesdetected1
   3620  270f1				   -	       beq	skipsnes1pause
   3621  270f1				   -	       lda	snes2atari1hi
   3622  270f1				   -	       and	#%00010000
   3623  270f1				   -	       beq	pausepressed
   3624  270f1				   -skipsnes1pause
   3625  270f1					       endif
   3626  270f1				   -	       ifconst	SNESNPAUSE
   3627  270f1				   -	       ldx	snesport
   3628  270f1				   -	       lda	port0control,x
   3629  270f1				   -	       cmp	#11
   3630  270f1				   -	       bne	skipsnesNpause
   3631  270f1				   -	       lda	snesdetected0,x
   3632  270f1				   -	       beq	skipsnesNpause
   3633  270f1				   -	       lda	snes2atari0hi,x
   3634  270f1				   -	       and	#%00010000
   3635  270f1				   -	       beq	pausepressed
   3636  270f1				   -skipsnesNpause
   3637  270f1					       endif
   3638  270f1				   -	       ifconst	MULTIBUTTONPAUSE
   3639  270f1				   -	       ldx	#1
   3640  270f1				   -multibuttonpauseloop
   3641  270f1				   -	       lda	port0control,x
   3642  270f1				   -	       cmp	#11
   3643  270f1				   -	       bcc	multibuttonpauseloopbottom
   3644  270f1				   -	       lda	sINPT1,x
   3645  270f1				   -	       and	#1
   3646  270f1				   -	       beq	pausepressed
   3647  270f1				   -multibuttonpauseloopbottom
   3648  270f1				   -	       dex
   3649  270f1				   -	       bpl	multibuttonpauseloop
   3650  270f1					       endif		; MULTIBUTTONPAUSE
   3651  270f1
   3652  270f1							;pause isn't pressed
   3653  270f1			a9 00		       lda	#0
   3654  270f3			8d ac 01	       sta	pausebuttonflag	; clear pause hold state in case its set
   3655  270f6
   3656  270f6							;check if we're in an already paused state
   3657  270f6			ad 00 21	       lda	pausestate
   3658  270f9			f0 36		       beq	leavepauseroutine	; nope, leave
   3659  270fb
   3660  270fb			c9 01		       cmp	#1	; last frame was the start of pausing
   3661  270fd			f0 2b		       beq	enterpausestate2	; move from state 1 to 2
   3662  270ff
   3663  270ff			c9 02		       cmp	#2
   3664  27101			f0 34		       beq	carryonpausing
   3665  27103
   3666  27103							;pausestate must be >2, which means we're ending an unpause 
   3667  27103			a9 00		       lda	#0
   3668  27105			8d ac 01	       sta	pausebuttonflag
   3669  27108			8d 00 21	       sta	pausestate
   3670  2710b			ad 07 21	       lda	sCTRL
   3671  2710e			85 3c		       sta	CTRL
   3672  27110			4c 31 f1	       jmp	leavepauseroutine
   3673  27113
   3674  27113				    pausepressed
   3675  27113							;pause is pressed
   3676  27113			ad ac 01	       lda	pausebuttonflag
   3677  27116			c9 ff		       cmp	#$ff
   3678  27118			f0 1d		       beq	carryonpausing
   3679  2711a
   3680  2711a							;its a new press, increment the state
   3681  2711a			ee 00 21	       inc	pausestate
   3682  2711d
   3683  2711d							;silence volume at the start and end of pausing
   3684  2711d			a9 00		       lda	#0
   3685  2711f			85 19		       sta	AUDV0
   3686  27121			85 1a		       sta	AUDV1
   3687  27123
   3688  27123				   -	       ifconst	pokeysupport
   3689  27123				   -	       ldy	#7
   3690  27123				   -pausesilencepokeyaudioloop
   3691  27123				   -	       sta	(pokeybase),y
   3692  27123				   -	       dey
   3693  27123				   -	       bpl	pausesilencepokeyaudioloop
   3694  27123					       endif		; pokeysupport
   3695  27123
   3696  27123			a9 ff		       lda	#$ff
   3697  27125			8d ac 01	       sta	pausebuttonflag
   3698  27128			d0 0d		       bne	carryonpausing
   3699  2712a
   3700  2712a				    enterpausestate2
   3701  2712a			a9 02		       lda	#2
   3702  2712c			8d 00 21	       sta	pausestate
   3703  2712f			d0 06		       bne	carryonpausing
   3704  27131				    leavepauseroutine
   3705  27131			ad 07 21	       lda	sCTRL
   3706  27134			85 3c		       sta	CTRL
   3707  27136			60		       rts
   3708  27137				    carryonpausing
   3709  27137				   -	       ifconst	.pause
   3710  27137				   -	       jsr	.pause
   3711  27137					       endif		; .pause
   3712  27137			ad 07 21	       lda	sCTRL
   3713  2713a			09 80		       ora	#%10000000	; turn off colorburst during pause...
   3714  2713c			85 3c		       sta	CTRL
   3715  2713e			4c e5 f0	       jmp	pauseroutine
   3716  27141					       endif		; pauseroutineoff
   3717  27141
   3718  27141
   3719  27141					       ifconst	DOUBLEBUFFER
   3720  27141				    skipterminatedisplaylistreturn
   3721  27141			60		       rts
   3722  27142					       endif		; DOUBLEBUFFER
   3723  27142				    terminatedisplaylist
   3724  27142					       ifconst	DOUBLEBUFFER
   3725  27142			a5 d5		       lda	doublebufferstate
   3726  27144			d0 fb		       bne	skipterminatedisplaylistreturn	; double-buffering runs it's own DL termination code
   3727  27146					       endif		; DOUBLEBUFFER
   3728  27146				    terminatedisplaybuffer
   3729  27146							;add DL end entry on each DL
   3730  27146			a2 0b		       ldx	#(WZONECOUNT-1)
   3731  27148				    dlendloop
   3732  27148				   -	       ifconst	VSCROLL
   3733  27148				   -	       ldy	Xx3,x
   3734  27148				   -	       lda	DLLMEM+11,y
   3735  27148					       else		; !VSCROLL
   3736  27148			bd 7a f6	       lda	DLPOINTL,x	;Get pointer to DL that this sprite starts in
   3737  2714b					       endif		; !VSCROLL
   3738  2714b					       ifconst	DOUBLEBUFFER
   3739  2714b			18		       clc
   3740  2714c			65 d6		       adc	doublebufferdloffset
   3741  2714e					       endif		; DOUBLEBUFFER
   3742  2714e			85 63		       sta	dlpnt
   3743  27150				   -	       ifconst	VSCROLL
   3744  27150				   -	       lda	DLLMEM+10,y
   3745  27150					       else		; !VSCROLL
   3746  27150			bd 6e f6	       lda	DLPOINTH,x
   3747  27153					       endif		; !VSCROLL
   3748  27153					       ifconst	DOUBLEBUFFER
   3749  27153			69 00		       adc	#0
   3750  27155					       endif		; DOUBLEBUFFER
   3751  27155			85 64		       sta	dlpnt+1
   3752  27157			b4 65		       ldy	dlend,x
   3753  27159			a9 00		       lda	#$00
   3754  2715b				    dlendmoreloops
   3755  2715b			c8		       iny
   3756  2715c			91 63		       sta	(dlpnt),y
   3757  2715e				   -	       ifconst	FRAMESKIPGLITCHFIXWEAK
   3758  2715e				   -	       cpy	#DLLASTOBJ+1
   3759  2715e				   -	       beq	dlendthiszonedone
   3760  2715e				   -	       iny
   3761  2715e				   -	       iny
   3762  2715e				   -	       iny
   3763  2715e				   -	       iny
   3764  2715e				   -	       iny
   3765  2715e				   -	       sta	(dlpnt),y
   3766  2715e				   -dlendthiszonedone
   3767  2715e					       endif	FRAMESKIPGLITCHFIXWEAK
   3768  2715e				   -	       ifconst	FRAMESKIPGLITCHFIX
   3769  2715e				   -	       iny
   3770  2715e				   -	       iny
   3771  2715e				   -	       iny
   3772  2715e				   -	       iny
   3773  2715e				   -	       cpy	#DLLASTOBJ-1
   3774  2715e				   -	       bcc	dlendmoreloops
   3775  2715e					       endif		; FRAMESKIPGLITCHFIX
   3776  2715e			ca		       dex
   3777  2715f			10 e7		       bpl	dlendloop
   3778  27161
   3779  27161					       ifnconst	pauseroutineoff
   3780  27161			20 e5 f0	       jsr	pauseroutine
   3781  27164					       endif		; pauseroutineoff
   3782  27164			60		       rts
   3783  27165
   3784  27165				    uninterruptableroutines
   3785  27165							; this is for routines that must happen off the visible screen, each frame.
   3786  27165
   3787  27165				   -	       ifconst	AVOXVOICE
   3788  27165				   -	       jsr	serviceatarivoxqueue
   3789  27165					       endif
   3790  27165				   -	       ifconst	MEGA7800SUPPORT
   3791  27165				   -	       ldx	#1
   3792  27165				   -mega7800polling
   3793  27165				   -	       lda	port0control,x
   3794  27165				   -	       cmp	#12	; mega7800
   3795  27165				   -	       bne	mega7800handlercheck2
   3796  27165				   -	       jsr	mega7800handler
   3797  27165				   -	       jmp	mega7800handlerdone
   3798  27165				   -mega7800handlercheck2
   3799  27165				   -	       ifconst	MULTIBUTTON
   3800  27165				   -	       cmp	#1	; proline
   3801  27165				   -	       bne	mega7800handlerdone
   3802  27165				   -	       lda	framecounter
   3803  27165				   -	       eor	#7	; avoid the same frame as the snes2atari probe
   3804  27165				   -	       and	#63
   3805  27165				   -	       bne	mega7800handlerdone
   3806  27165				   -	       lda	#12
   3807  27165				   -	       sta	port0control,x
   3808  27165				   -	       jsr	mega7800handler
   3809  27165				   -	       endif		; MULTIBUTTON
   3810  27165				   -mega7800handlerdone
   3811  27165				   -	       dex
   3812  27165				   -	       bpl	mega7800polling
   3813  27165					       endif		; MEGA7800SUPPORT
   3814  27165
   3815  27165			a9 00		       lda	#0
   3816  27167			8d b9 01	       sta	palfastframe
   3817  2716a			8d b8 01	       sta	ntscslowframe
   3818  2716d			ae 09 21	       ldx	paldetected	; 0=ntsc 1=pal
   3819  27170			ac b7 01	       ldy	palframes
   3820  27173			c8		       iny
   3821  27174			c0 05		       cpy	#5
   3822  27176			d0 08		       bne	palframeskipdone
   3823  27178			ad 09 21	       lda	paldetected
   3824  2717b			fe b8 01	       inc	ntscslowframe,x
   3825  2717e			a0 00		       ldy	#0
   3826  27180				    palframeskipdone
   3827  27180			8c b7 01	       sty	palframes
   3828  27183				    skippalframeadjusting
   3829  27183
   3830  27183				   -	       ifconst	MUSICTRACKER
   3831  27183				   -			; We normally run the servicesong routine from the top-screen interrupt, but if it
   3832  27183				   -			; happens to interrupt the scheduling of a sound effect in the game code, we skip it.
   3833  27183				   -			; If that happens, we try again here. Chances are very small we'll run into the same
   3834  27183				   -			; problem twice, and if we do, we just drop a musical note or two.
   3835  27183				   -	       lda	sfxschedulemissed
   3836  27183				   -	       beq	servicesongwasnotmissed
   3837  27183				   -	       jsr	servicesong
   3838  27183				   -servicesongwasnotmissed
   3839  27183					       endif		; MUSICTRACKER
   3840  27183
   3841  27183				   -	       ifconst	RMT
   3842  27183				   -	       ifnconst	RMTPALSPEED
   3843  27183				   -	       ifnconst	RMTOFFSPEED
   3844  27183				   -	       ifconst	PAUSESILENT
   3845  27183				   -	       lda	pausestate
   3846  27183				   -	       bne	skiprasterupdate2
   3847  27183				   -	       endif
   3848  27183				   -	       lda	palfastframe
   3849  27183				   -	       beq	skiprasterupdate2
   3850  27183				   -	       lda	rasterpause
   3851  27183				   -	       beq	skiprasterupdate2
   3852  27183				   -	       jsr	RASTERMUSICTRACKER+3
   3853  27183				   -skiprasterupdate2
   3854  27183				   -	       endif
   3855  27183				   -	       endif
   3856  27183					       endif
   3857  27183
   3858  27183			60		       rts
   3859  27184
   3860  27184				    serviceatarivoxqueue
   3861  27184				   -	       ifconst	AVOXVOICE
   3862  27184				   -	       lda	voxlock
   3863  27184				   -	       bne	skipvoxprocessing	; the vox is in the middle of speech address update
   3864  27184				   -skipvoxqueuesizedec
   3865  27184				   -	       jmp	processavoxvoice
   3866  27184				   -skipvoxprocessing
   3867  27184				   -	       rts
   3868  27184				   -
   3869  27184				   -processavoxvoice
   3870  27184				   -	       ifconst	HSSUPPORT
   3871  27184				   -			; ** we skip speech if hi-score is on and no vox was detected
   3872  27184				   -			; ** this is to avoid later collision with snes pads.
   3873  27184				   -	       lda	hsdevice
   3874  27184				   -	       and	#2
   3875  27184				   -	       beq	processavoxvoicereturn
   3876  27184				   -	       endif		; HSSUPPORT
   3877  27184				   -	       lda	avoxenable
   3878  27184				   -	       bne	avoxfixport
   3879  27184				   -	       SPKOUT	tempavox
   3880  27184				   -	       rts
   3881  27184				   -avoxfixport
   3882  27184				   -	       lda	#0	; restore the port to all bits as inputs...
   3883  27184				   -	       sta	CTLSWA
   3884  27184				   -	       rts
   3885  27184				   -silenceavoxvoice
   3886  27184				   -	       SPEAK	avoxsilentdata
   3887  27184				   -processavoxvoicereturn
   3888  27184				   -	       rts
   3889  27184				   -avoxsilentdata
   3890  27184				   -	       .byte	31,255
   3891  27184					       else
   3892  27184			60		       rts
   3893  27185					       endif		; AVOXVOICE
   3894  27185
   3895  27185				    prolinebuttonpadhandler
   3896  27185				   -	       ifconst	MULTIBUTTON
   3897  27185				   -	       lda	framecounter
   3898  27185				   -	       and	#63
   3899  27185				   -	       bne	jbhandlercont1
   3900  27185				   -	       jsr	setonebuttonmode
   3901  27185				   -	       lda	#11
   3902  27185				   -	       sta	port0control,x
   3903  27185				   -	       jsr	snes2atari_signal_go
   3904  27185				   -	       lda	port0control,x
   3905  27185				   -	       cmp	#1	; check if it's still a proline 
   3906  27185				   -	       beq	jbhandlercont1
   3907  27185				   -	       jmp	buttonreadloopreturn
   3908  27185				   -jbhandlercont1
   3909  27185				   -	       lda	#2
   3910  27185				   -	       sta	multibuttoncount0,x
   3911  27185					       endif		; MULTIBUTTON
   3912  27185				    joybuttonpadhandler
   3913  27185			ad 31 21	       lda	sSWCHA	; clear previous dirs for this pad, from
   3914  27188			1d d7 f1	       ora	SWCHA_DIRMASK,x	; our sSWCHA nibble.
   3915  2718b			8d 31 21	       sta	sSWCHA
   3916  2718e			ad 80 02	       lda	SWCHA	; load th actual joystick dirs, ensuring
   3917  27191			1d d8 f1	       ora	SWCHA_DIRMASK+1,x	; we don't change the other nibble.
   3918  27194			2d 31 21	       and	sSWCHA
   3919  27197			8d 31 21	       sta	sSWCHA
   3920  2719a				    joybuttonhandler
   3921  2719a			8a		       txa
   3922  2719b			0a		       asl
   3923  2719c			a8		       tay
   3924  2719d			b9 08 00	       lda	INPT0,y
   3925  271a0			4a		       lsr
   3926  271a1							;ora #%00111111
   3927  271a1			9d 02 21	       sta	sINPT1,x
   3928  271a4			b9 09 00	       lda	INPT1,y
   3929  271a7			29 80		       and	#%10000000
   3930  271a9			1d 02 21	       ora	sINPT1,x
   3931  271ac			9d 02 21	       sta	sINPT1,x
   3932  271af
   3933  271af			b5 0c		       lda	INPT4,x
   3934  271b1			30 19		       bmi	.skip1bjoyfirecheck
   3935  271b3							;one button joystick is down
   3936  271b3			49 80		       eor	#%10000000
   3937  271b5			9d 02 21	       sta	sINPT1,x
   3938  271b8
   3939  271b8			ad b1 01	       lda	joybuttonmode
   3940  271bb			3d e8 f5	       and	thisjoy2buttonbit,x
   3941  271be			f0 0c		       beq	.skip1bjoyfirecheck
   3942  271c0			ad b1 01	       lda	joybuttonmode
   3943  271c3			1d e8 f5	       ora	thisjoy2buttonbit,x
   3944  271c6			8d b1 01	       sta	joybuttonmode
   3945  271c9			8d 82 02	       sta	SWCHB
   3946  271cc				    .skip1bjoyfirecheck
   3947  271cc			a9 3f		       lda	#%00111111
   3948  271ce			1d 02 21	       ora	sINPT1,x
   3949  271d1			9d 02 21	       sta	sINPT1,x	; ensure multibutton bits are hi
   3950  271d4			4c 57 f0	       jmp	buttonreadloopreturn
   3951  271d7
   3952  271d7				    SWCHA_DIRMASK
   3953  271d7							;  p0	p1  p0
   3954  271d7			f0 0f f0	       .byte.b	$F0,$0F,$F0
   3955  271da
   3956  271da				    gunbuttonhandler		; outside of the conditional, so our button handler LUT is valid
   3957  271da				   -	       ifconst	LIGHTGUNSUPPORT
   3958  271da				   -	       cpx	#0
   3959  271da				   -	       bne	secondportgunhandler
   3960  271da				   -firstportgunhandler
   3961  271da				   -	       lda	SWCHA
   3962  271da				   -	       asl
   3963  271da				   -	       asl
   3964  271da				   -	       asl		; shift D4 to D7
   3965  271da				   -	       and	#%10000000
   3966  271da				   -	       eor	#%10000000
   3967  271da				   -	       sta	sINPT1
   3968  271da				   -	       jmp	buttonreadloopreturn
   3969  271da				   -secondportgunhandler
   3970  271da				   -	       lda	SWCHA
   3971  271da				   -	       lsr		; shift D0 into carry
   3972  271da				   -	       lsr		; shift carry into D7
   3973  271da				   -	       and	#%10000000
   3974  271da				   -	       eor	#%10000000
   3975  271da				   -	       sta	sINPT3
   3976  271da				   -	       jmp	buttonreadloopreturn
   3977  271da					       endif		; LIGHTGUNSUPPORT
   3978  271da
   3979  271da				    controlsusing2buttoncode
   3980  271da			00		       .byte.b	0	; 00=no controller plugged in
   3981  271db			01		       .byte.b	1	; 01=proline joystick
   3982  271dc			00		       .byte.b	0	; 02=lightgun
   3983  271dd			00		       .byte.b	0	; 03=paddle
   3984  271de			01		       .byte.b	1	; 04=trakball
   3985  271df			01		       .byte.b	1	; 05=vcs joystick
   3986  271e0			01		       .byte.b	1	; 06=driving control
   3987  271e1			00		       .byte.b	0	; 07=keypad control
   3988  271e2			00		       .byte.b	0	; 08=st mouse/cx80
   3989  271e3			00		       .byte.b	0	; 09=amiga mouse
   3990  271e4			01		       .byte.b	1	; 10=atarivox
   3991  271e5			00		       .byte.b	0	; 11=snes2atari
   3992  271e6			00		       .byte.b	0	; 12=mega7800
   3993  271e7
   3994  271e7				    buttonhandlerhi
   3995  271e7			00		       .byte.b	0	; 00=no controller plugged in
   3996  271e8			f1		       .byte.b	>prolinebuttonpadhandler	; 01=proline joystick
   3997  271e9			f1		       .byte.b	>gunbuttonhandler	; 02=lightgun
   3998  271ea			f5		       .byte.b	>paddlebuttonhandler	; 03=paddle
   3999  271eb			f1		       .byte.b	>joybuttonhandler	; 04=trakball
   4000  271ec			f1		       .byte.b	>joybuttonpadhandler	; 05=vcs joystick
   4001  271ed			f1		       .byte.b	>joybuttonhandler	; 06=driving control
   4002  271ee			00		       .byte.b	0	; 07=keypad
   4003  271ef			f5		       .byte.b	>mousebuttonhandler	; 08=st mouse
   4004  271f0			f5		       .byte.b	>mousebuttonhandler	; 09=amiga mouse
   4005  271f1			f1		       .byte.b	>joybuttonhandler	; 10=atarivox
   4006  271f2			f0		       .byte.b	>snes2atarihandler	; 11=snes
   4007  271f3			00		       .byte.b	0	; 12=mega7800
   4008  271f4				    buttonhandlerlo
   4009  271f4			00		       .byte.b	0	; 00=no controller plugged in
   4010  271f5			85		       .byte.b	<prolinebuttonpadhandler	; 01=proline joystick
   4011  271f6			da		       .byte.b	<gunbuttonhandler	; 02=lightgun 
   4012  271f7			b8		       .byte.b	<paddlebuttonhandler	; 03=paddle
   4013  271f8			9a		       .byte.b	<joybuttonhandler	; 04=trakball
   4014  271f9			85		       .byte.b	<joybuttonpadhandler	; 05=vcs joystick
   4015  271fa			9a		       .byte.b	<joybuttonhandler	; 06=driving control
   4016  271fb			00		       .byte.b	0	; 07=keypad
   4017  271fc			b8		       .byte.b	<mousebuttonhandler	; 08=st mouse
   4018  271fd			b8		       .byte.b	<mousebuttonhandler	; 09=amiga mouse
   4019  271fe			9a		       .byte.b	<joybuttonhandler	; 10=atarivox
   4020  271ff			00		       .byte.b	<snes2atarihandler	; 11=snes
   4021  27200			00		       .byte.b	0	; 12=mega7800
   4022  27201
   4023  27201				    drawwait
   4024  27201			24 4d		       bit	visibleover	; 255 if screen is being drawn, 0 when not.
   4025  27203			30 fc		       bmi	drawwait	; make sure the visible screen isn't being drawn
   4026  27205			60		       rts
   4027  27206
   4028  27206				    drawoverwait
   4029  27206			24 4d		       bit	visibleover	; 255 if screen is being drawn, 0 when not.
   4030  27208			10 fc		       bpl	drawoverwait	; make sure the visible screen is being drawn
   4031  2720a			60		       rts
   4032  2720b
   4033  2720b
   4034  2720b				    mutetia
   4035  2720b			a9 00		       lda	#0
   4036  2720d			a2 03		       ldx	#3
   4037  2720f				    mutetialoop
   4038  2720f			95 4e		       sta	sfx1pointlo,x
   4039  27211			95 17		       sta	AUDF0,x
   4040  27213			ca		       dex
   4041  27214			10 f9		       bpl	mutetialoop
   4042  27216			60		       rts
   4043  27217
   4044  27217				    servicesfxchannelsdone
   4045  27217					       ifnconst	pokeysupport
   4046  27217			60		       rts
   4047  27218				   -	       else
   4048  27218				   -	       jmp	checkpokeyplaying
   4049  27218					       endif
   4050  27218				    servicesfxchannels
   4051  27218				   -	       ifconst	PAUSESILENT
   4052  27218				   -	       lda	pausestate
   4053  27218				   -	       beq	servicesfxchannels_1
   4054  27218				   -	       rts
   4055  27218				   -servicesfxchannels_1
   4056  27218					       endif
   4057  27218			a2 ff		       ldx	#255
   4058  2721a				    servicesfxchannelsloop
   4059  2721a			e8		       inx
   4060  2721b					       ifnconst	TIASFXMONO
   4061  2721b			e0 02		       cpx	#2
   4062  2721d				   -	       else
   4063  2721d				   -	       cpx	#1
   4064  2721d					       endif
   4065  2721d			f0 f8		       beq	servicesfxchannelsdone
   4066  2721f
   4067  2721f			a5 de		       lda	sfxschedulelock	; =1 if locked
   4068  27221			d0 f4		       bne	servicesfxchannelsdone	; exit if a pointer may be mid-way change
   4069  27223
   4070  27223			b5 4e		       lda	sfx1pointlo,x
   4071  27225			85 dc		       sta	inttemp5
   4072  27227			15 50		       ora	sfx1pointhi,x
   4073  27229			f0 ef		       beq	servicesfxchannelsloop
   4074  2722b			b5 50		       lda	sfx1pointhi,x
   4075  2722d			85 dd		       sta	inttemp6
   4076  2722f
   4077  2722f			b5 58		       lda	sfx1tick,x
   4078  27231			f0 05		       beq	servicesfx_cont1	; this chunk is over, load the next!
   4079  27233			d6 58		       dec	sfx1tick,x	; frame countdown is non-zero, subtract one
   4080  27235			4c 1a f2	       jmp	servicesfxchannelsloop
   4081  27238				    servicesfx_cont1
   4082  27238
   4083  27238			a0 01		       ldy	#1	; check to see if they're changing the frame countdown
   4084  2723a			b1 dc		       lda	(inttemp5),y
   4085  2723c			c9 10		       cmp	#$10
   4086  2723e			d0 1b		       bne	servicesfx_cont1a
   4087  27240			a0 02		       ldy	#2
   4088  27242			b1 dc		       lda	(inttemp5),y
   4089  27244			95 56		       sta	sfx1frames,x	; change the frame countdown
   4090  27246			a9 00		       lda	#0
   4091  27248			95 58		       sta	sfx1tick,x
   4092  2724a							; advance the sound pointer by 3...
   4093  2724a			b5 4e		       lda	sfx1pointlo,x
   4094  2724c			18		       clc
   4095  2724d			69 03		       adc	#3
   4096  2724f			95 4e		       sta	sfx1pointlo,x
   4097  27251			b5 50		       lda	sfx1pointhi,x
   4098  27253			69 00		       adc	#0
   4099  27255			95 50		       sta	sfx1pointhi,x
   4100  27257							; and then fetch another sample for this channel...
   4101  27257			ca		       dex
   4102  27258			4c 1a f2	       jmp	servicesfxchannelsloop
   4103  2725b				    servicesfx_cont1a
   4104  2725b
   4105  2725b			b5 56		       lda	sfx1frames,x	; set the frame countdown for this sound chunk
   4106  2725d			95 58		       sta	sfx1tick,x
   4107  2725f
   4108  2725f			b5 52		       lda	sfx1priority,x	; decrease the sound's priority if its non-zero
   4109  27261			f0 02		       beq	servicesfx_cont2
   4110  27263			d6 52		       dec	sfx1priority,x
   4111  27265				    servicesfx_cont2
   4112  27265
   4113  27265			a0 00		       ldy	#0	; play the sound
   4114  27267			b1 dc		       lda	(inttemp5),y
   4115  27269			85 d8		       sta	inttemp1
   4116  2726b
   4117  2726b				   -	       ifconst	MUSICTRACKER
   4118  2726b				   -	       lda	sfx1notedata,x
   4119  2726b				   -	       beq	exitmusictracker	; exit if this isn't a pitched instrument
   4120  2726b				   -	       ldy	#0
   4121  2726b				   -	       sty	inttemp2
   4122  2726b				   -	       clc
   4123  2726b				   -	       adc	(inttemp5),y
   4124  2726b				   -	       asl		; x2
   4125  2726b				   -	       tay
   4126  2726b				   -	       lda	tiatrackeroctavenotes,y
   4127  2726b				   -	       sta	AUDC0,x
   4128  2726b				   -	       iny
   4129  2726b				   -	       lda	tiatrackeroctavenotes,y
   4130  2726b				   -	       sta	AUDF0,x
   4131  2726b				   -	       ldy	#1
   4132  2726b				   -	       jmp	sfxvolumeentrypt
   4133  2726b				   -exitmusictracker
   4134  2726b				   -	       lda	inttemp1
   4135  2726b					       endif		; MUSICTRACKER
   4136  2726b
   4137  2726b			18		       clc
   4138  2726c			75 54		       adc	sfx1poffset,x	; take into account any pitch modification
   4139  2726e			95 17		       sta	AUDF0,x
   4140  27270			c8		       iny
   4141  27271			b1 dc		       lda	(inttemp5),y
   4142  27273			95 15		       sta	AUDC0,x
   4143  27275			85 d9		       sta	inttemp2
   4144  27277			c8		       iny
   4145  27278				    sfxvolumeentrypt
   4146  27278				   -	       ifconst	TIAVOLUME
   4147  27278				   -	       lda	tiavolume
   4148  27278				   -	       asl
   4149  27278				   -	       asl
   4150  27278				   -	       asl
   4151  27278				   -	       asl
   4152  27278				   -	       sta	fourbitfadevalueint
   4153  27278					       endif		; TIAVOLUME
   4154  27278			b1 dc		       lda	(inttemp5),y
   4155  2727a				   -	       ifconst	TIAVOLUME
   4156  2727a				   -	       jsr	fourbitfadeint
   4157  2727a					       endif		; TIAVOLUME
   4158  2727a			95 19		       sta	AUDV0,x
   4159  2727c			c9 10		       cmp	#$10
   4160  2727e			b0 19		       bcs	sfxsoundloop	; AUDV0>$0F means the sound is looped while priority is active
   4161  27280
   4162  27280			05 d9		       ora	inttemp2
   4163  27282			05 d8		       ora	inttemp1	; check if F|C|V=0
   4164  27284			f0 23		       beq	zerosfx	; if so, we're at the end of the sound.
   4165  27286
   4166  27286				    advancesfxpointer
   4167  27286							; advance the pointer to the next sound chunk
   4168  27286			c8		       iny
   4169  27287			84 da		       sty	inttemp3
   4170  27289			18		       clc
   4171  2728a			b5 4e		       lda	sfx1pointlo,x
   4172  2728c			65 da		       adc	inttemp3
   4173  2728e			95 4e		       sta	sfx1pointlo,x
   4174  27290			b5 50		       lda	sfx1pointhi,x
   4175  27292			69 00		       adc	#0
   4176  27294			95 50		       sta	sfx1pointhi,x
   4177  27296			4c 1a f2	       jmp	servicesfxchannelsloop
   4178  27299
   4179  27299				    sfxsoundloop
   4180  27299			48		       pha
   4181  2729a			b5 52		       lda	sfx1priority,x
   4182  2729c			d0 04		       bne	sfxsoundloop_carryon
   4183  2729e			68		       pla		; fix the stack before we go
   4184  2729f			4c 86 f2	       jmp	advancesfxpointer
   4185  272a2				    sfxsoundloop_carryon
   4186  272a2			68		       pla
   4187  272a3			29 f0		       and	#$F0
   4188  272a5			4a		       lsr
   4189  272a6			4a		       lsr
   4190  272a7			4a		       lsr
   4191  272a8			4a		       lsr
   4192  272a9
   4193  272a9				    zerosfx
   4194  272a9			95 4e		       sta	sfx1pointlo,x
   4195  272ab			95 50		       sta	sfx1pointhi,x
   4196  272ad			95 52		       sta	sfx1priority,x
   4197  272af			4c 1a f2	       jmp	servicesfxchannelsloop
   4198  272b2
   4199  272b2
   4200  272b2				    schedulesfx
   4201  272b2							; called with sfxinstrumentlo=<data sfxinstrumenthi=>data sfxpitchoffset=pitch-offset sfxnoteindex=note index
   4202  272b2			a0 00		       ldy	#0
   4203  272b4				   -	       ifconst	pokeysupport
   4204  272b4				   -	       lda	sfxinstrumenthi
   4205  272b4				   -	       beq	scheduletiasfx	; drums have undefined instrument
   4206  272b4				   -	       lda	(sfxinstrumentlo),y
   4207  272b4				   -	       cmp	#$20	; POKEY?
   4208  272b4				   -	       bne	scheduletiasfx
   4209  272b4				   -	       jmp	schedulepokeysfx
   4210  272b4					       endif
   4211  272b4				    scheduletiasfx
   4212  272b4							;cmp #$10 ; TIA?
   4213  272b4							;beq continuescheduletiasfx
   4214  272b4							; rts ; unhandled!!! 
   4215  272b4				    continuescheduletiasfx
   4216  272b4					       ifnconst	TIASFXMONO
   4217  272b4			a5 50		       lda	sfx1pointhi
   4218  272b6			f0 15		       beq	schedulesfx1	;if channel 1 is idle, use it
   4219  272b8			a5 51		       lda	sfx2pointhi
   4220  272ba			f0 15		       beq	schedulesfx2	;if channel 2 is idle, use it
   4221  272bc							; Both channels are scheduled. 
   4222  272bc			a5 e1		       lda	sfxinstrumenthi
   4223  272be			f0 06		       beq	skipscheduledrums
   4224  272c0			a0 01		       ldy	#1
   4225  272c2			b1 e0		       lda	(sfxinstrumentlo),y
   4226  272c4			d0 01		       bne	interruptsfx
   4227  272c6				    skipscheduledrums
   4228  272c6			60		       rts		; the new sound has 0 priority and both channels are busy. Skip playing it.
   4229  272c7				    interruptsfx
   4230  272c7							;Compare which active sound has a lower priority. We'll interrupt the lower one.
   4231  272c7			a5 52		       lda	sfx1priority
   4232  272c9			c5 53		       cmp	sfx2priority
   4233  272cb			b0 04		       bcs	schedulesfx2
   4234  272cd					       endif		; !TIASFXMONO
   4235  272cd
   4236  272cd				    schedulesfx1
   4237  272cd			a2 00		       ldx	#0	; channel 1
   4238  272cf					       ifnconst	TIASFXMONO
   4239  272cf			f0 02		       beq	skipschedulesfx2
   4240  272d1				    schedulesfx2
   4241  272d1			a2 01		       ldx	#1	; channel 2
   4242  272d3				    skipschedulesfx2
   4243  272d3					       endif		; !TIASFXMONO
   4244  272d3
   4245  272d3				   -	       ifconst	MUSICTRACKER
   4246  272d3				   -	       lda	sfxnoteindex
   4247  272d3				   -	       bpl	skipdrumkitoverride
   4248  272d3				   -	       and	#$7F	; subtract 128
   4249  272d3				   -	       sec
   4250  272d3				   -	       sbc	#4	; drums start at 132, i.e. octave 10
   4251  272d3				   -	       asl
   4252  272d3				   -	       tay
   4253  272d3				   -	       lda	tiadrumkitdefinition,y
   4254  272d3				   -	       sta	sfxinstrumentlo
   4255  272d3				   -	       iny
   4256  272d3				   -	       lda	tiadrumkitdefinition,y
   4257  272d3				   -	       sta	sfxinstrumenthi
   4258  272d3				   -	       lda	#0
   4259  272d3				   -	       sta	sfxnoteindex	; and tell the driver it's a non-pitched instrument
   4260  272d3				   -skipdrumkitoverride
   4261  272d3					       endif		; MUSICTRACKER
   4262  272d3			a0 01		       ldy	#1	; get priority and sound-resolution (in frames)
   4263  272d5			b1 e0		       lda	(sfxinstrumentlo),y
   4264  272d7			95 52		       sta	sfx1priority,x
   4265  272d9			c8		       iny
   4266  272da			b1 e0		       lda	(sfxinstrumentlo),y
   4267  272dc			95 56		       sta	sfx1frames,x
   4268  272de			a5 e0		       lda	sfxinstrumentlo
   4269  272e0			18		       clc
   4270  272e1			69 03		       adc	#3
   4271  272e3			95 4e		       sta	sfx1pointlo,x
   4272  272e5			a5 e1		       lda	sfxinstrumenthi
   4273  272e7			69 00		       adc	#0
   4274  272e9			95 50		       sta	sfx1pointhi,x
   4275  272eb			a5 e2		       lda	sfxpitchoffset
   4276  272ed			95 54		       sta	sfx1poffset,x
   4277  272ef			a9 00		       lda	#0
   4278  272f1			95 58		       sta	sfx1tick,x
   4279  272f3			a5 e3		       lda	sfxnoteindex
   4280  272f5			95 cd		       sta	sfx1notedata,x
   4281  272f7			60		       rts
   4282  272f8
   4283  272f8				    plotsprite
   4284  272f8					       ifnconst	NODRAWWAIT
   4285  272f8					       ifconst	DOUBLEBUFFER
   4286  272f8			a5 d5		       lda	doublebufferstate
   4287  272fa			d0 04		       bne	skipplotspritewait
   4288  272fc					       endif		; DOUBLEBUFFER
   4289  272fc				   -	       ifconst	DEBUGWAITCOLOR
   4290  272fc				   -	       lda	#$41
   4291  272fc				   -	       sta	BACKGRND
   4292  272fc					       endif
   4293  272fc				    plotspritewait
   4294  272fc			a5 4d		       lda	visibleover
   4295  272fe			d0 fc		       bne	plotspritewait
   4296  27300				    skipplotspritewait
   4297  27300				   -	       ifconst	DEBUGWAITCOLOR
   4298  27300				   -	       lda	#$0
   4299  27300				   -	       sta	BACKGRND
   4300  27300					       endif
   4301  27300					       endif
   4302  27300
   4303  27300							;arguments: 
   4304  27300							; temp1=lo graphicdata 
   4305  27300							; temp2=hi graphicdata 
   4306  27300							; temp3=palette | width byte
   4307  27300							; temp4=x
   4308  27300							; temp5=y
   4309  27300							; temp6=mode
   4310  27300			a5 46		       lda	temp5	;Y position
   4311  27302			4a		       lsr		; 2 - Divide by 8 or 16
   4312  27303			4a		       lsr		; 2
   4313  27304			4a		       lsr		; 2
   4314  27305					       if	WZONEHEIGHT = 16
   4315  27305			4a		       lsr		; 2
   4316  27306					       endif
   4317  27306
   4318  27306			aa		       tax
   4319  27307
   4320  27307					       ifnconst	NOLIMITCHECKING
   4321  27307
   4322  27307							; the next block allows for vertical masking, and ensures we don't overwrite non-DL memory
   4323  27307
   4324  27307			c9 0c		       cmp	#WZONECOUNT
   4325  27309
   4326  27309			90 0a		       bcc	continueplotsprite1	; the sprite is fully on-screen, so carry on...
   4327  2730b							; otherwise, check to see if the bottom half is in zone 0...
   4328  2730b
   4329  2730b					       if	WZONEHEIGHT = 16
   4330  2730b			c9 0f		       cmp	#15
   4331  2730d				   -	       else
   4332  2730d				   -	       cmp	#31
   4333  2730d					       endif
   4334  2730d
   4335  2730d			d0 05		       bne	exitplotsprite1
   4336  2730f			a2 00		       ldx	#0
   4337  27311			4c 4f f3	       jmp	continueplotsprite2
   4338  27314				    exitplotsprite1
   4339  27314			60		       rts
   4340  27315
   4341  27315				    continueplotsprite1
   4342  27315					       endif
   4343  27315
   4344  27315				   -	       ifconst	VSCROLL
   4345  27315				   -	       ldy	Xx3,x
   4346  27315				   -	       lda	DLLMEM+11,y
   4347  27315					       else		; !VSCROLL
   4348  27315			bd 7a f6	       lda	DLPOINTL,x	;Get pointer to DL that this sprite starts in
   4349  27318					       endif		; !VSCROLL
   4350  27318					       ifconst	DOUBLEBUFFER
   4351  27318			18		       clc
   4352  27319			65 d6		       adc	doublebufferdloffset
   4353  2731b					       endif		; DOUBLEBUFFER
   4354  2731b			85 63		       sta	dlpnt
   4355  2731d				   -	       ifconst	VSCROLL
   4356  2731d				   -	       lda	DLLMEM+10,y
   4357  2731d					       else		; !VSCROLL
   4358  2731d			bd 6e f6	       lda	DLPOINTH,x
   4359  27320					       endif		; !VSCROLL
   4360  27320					       ifconst	DOUBLEBUFFER
   4361  27320			69 00		       adc	#0
   4362  27322					       endif		; DOUBLEBUFFER
   4363  27322			85 64		       sta	dlpnt+1
   4364  27324
   4365  27324							;Create DL entry for upper part of sprite
   4366  27324
   4367  27324			b4 65		       ldy	dlend,x	;Get the index to the end of this DL
   4368  27326
   4369  27326				   -	       ifconst	CHECKOVERWRITE
   4370  27326				   -	       cpy	#DLLASTOBJ
   4371  27326				   -	       beq	checkcontinueplotsprite2
   4372  27326				   -continueplotsprite1a
   4373  27326					       endif
   4374  27326
   4375  27326			a5 42		       lda	temp1	; graphic data, lo byte
   4376  27328			91 63		       sta	(dlpnt),y	;Low byte of data address
   4377  2732a
   4378  2732a					       ifnconst	ATOMICSPRITEUPDATE
   4379  2732a			c8		       iny
   4380  2732b			a5 47		       lda	temp6
   4381  2732d			91 63		       sta	(dlpnt),y
   4382  2732f				   -	       else
   4383  2732f				   -	       iny
   4384  2732f				   -	       sty	temp8
   4385  2732f					       endif
   4386  2732f
   4387  2732f			c8		       iny
   4388  27330
   4389  27330			a5 46		       lda	temp5	;Y position
   4390  27332			29 0f		       and	#(WZONEHEIGHT - 1)
   4391  27334			c9 01		       cmp	#1	; clear carry if our sprite is just in this zone
   4392  27336			05 43		       ora	temp2	; graphic data, hi byte
   4393  27338			91 63		       sta	(dlpnt),y
   4394  2733a
   4395  2733a			c8		       iny
   4396  2733b			a5 44		       lda	temp3	;palette|width
   4397  2733d			91 63		       sta	(dlpnt),y
   4398  2733f
   4399  2733f			c8		       iny
   4400  27340			a5 45		       lda	temp4	;Horizontal position
   4401  27342			91 63		       sta	(dlpnt),y
   4402  27344
   4403  27344			c8		       iny
   4404  27345			94 65		       sty	dlend,x
   4405  27347
   4406  27347				   -	       ifconst	ALWAYSTERMINATE
   4407  27347				   -	       iny
   4408  27347				   -	       lda	#0
   4409  27347				   -	       sta	(dlpnt),y
   4410  27347					       endif
   4411  27347
   4412  27347				   -	       ifconst	ATOMICSPRITEUPDATE
   4413  27347				   -	       ldy	temp8
   4414  27347				   -	       lda	temp6
   4415  27347				   -	       sta	(dlpnt),y
   4416  27347					       endif
   4417  27347
   4418  27347				    checkcontinueplotsprite2
   4419  27347
   4420  27347			90 38		       bcc	doneSPDL	;branch if the sprite was fully in the last zone
   4421  27349
   4422  27349							;Create DL entry for lower part of sprite
   4423  27349
   4424  27349			e8		       inx		;Next region
   4425  2734a
   4426  2734a					       ifnconst	NOLIMITCHECKING
   4427  2734a			e0 0c		       cpx	#WZONECOUNT
   4428  2734c
   4429  2734c			90 01		       bcc	continueplotsprite2	; the second half of the sprite is fully on-screen, so carry on...
   4430  2734e			60		       rts
   4431  2734f				    continueplotsprite2
   4432  2734f					       endif
   4433  2734f
   4434  2734f				   -	       ifconst	VSCROLL
   4435  2734f				   -	       ldy	Xx3,x
   4436  2734f				   -	       lda	DLLMEM+11,y
   4437  2734f					       else		; !VSCROLL
   4438  2734f			bd 7a f6	       lda	DLPOINTL,x	;Get pointer to next DL
   4439  27352					       endif		; !VSCROLL
   4440  27352					       ifconst	DOUBLEBUFFER
   4441  27352			18		       clc
   4442  27353			65 d6		       adc	doublebufferdloffset
   4443  27355					       endif		; DOUBLEBUFFER
   4444  27355			85 63		       sta	dlpnt
   4445  27357				   -	       ifconst	VSCROLL
   4446  27357				   -	       lda	DLLMEM+10,y
   4447  27357					       else		; !VSCROLL
   4448  27357			bd 6e f6	       lda	DLPOINTH,x
   4449  2735a					       endif		; !VSCROLL
   4450  2735a					       ifconst	DOUBLEBUFFER
   4451  2735a			69 00		       adc	#0
   4452  2735c					       endif		; DOUBLEBUFFER
   4453  2735c			85 64		       sta	dlpnt+1
   4454  2735e			b4 65		       ldy	dlend,x	;Get the index to the end of this DL
   4455  27360
   4456  27360				   -	       ifconst	CHECKOVERWRITE
   4457  27360				   -	       cpy	#DLLASTOBJ
   4458  27360				   -	       bne	continueplotsprite2a
   4459  27360				   -	       rts
   4460  27360				   -continueplotsprite2a
   4461  27360					       endif
   4462  27360
   4463  27360			a5 42		       lda	temp1	; graphic data, lo byte
   4464  27362			91 63		       sta	(dlpnt),y
   4465  27364
   4466  27364					       ifnconst	ATOMICSPRITEUPDATE
   4467  27364			c8		       iny
   4468  27365			a5 47		       lda	temp6
   4469  27367			91 63		       sta	(dlpnt),y
   4470  27369				   -	       else
   4471  27369				   -	       iny
   4472  27369				   -	       sty	temp8
   4473  27369					       endif
   4474  27369
   4475  27369			c8		       iny
   4476  2736a
   4477  2736a			a5 46		       lda	temp5	;Y position
   4478  2736c			0b 0f		       anc	#(WZONEHEIGHT - 1)	; undocumented. A=A&IMM, then move bit 7 into carry
   4479  2736e			05 43		       ora	temp2	; graphic data, hi byte
   4480  27370			e9 0f		       sbc	#(WZONEHEIGHT-1)	; start at the DMA hole. -1 because carry is clear
   4481  27372			91 63		       sta	(dlpnt),y
   4482  27374
   4483  27374			c8		       iny
   4484  27375
   4485  27375			a5 44		       lda	temp3	;palette|width
   4486  27377			91 63		       sta	(dlpnt),y
   4487  27379
   4488  27379			c8		       iny
   4489  2737a
   4490  2737a			a5 45		       lda	temp4	;Horizontal position
   4491  2737c			91 63		       sta	(dlpnt),y
   4492  2737e
   4493  2737e			c8		       iny
   4494  2737f			94 65		       sty	dlend,x
   4495  27381
   4496  27381				   -	       ifconst	ALWAYSTERMINATE
   4497  27381				   -	       iny
   4498  27381				   -	       lda	#0
   4499  27381				   -	       sta	(dlpnt),y
   4500  27381					       endif
   4501  27381
   4502  27381				   -	       ifconst	ATOMICSPRITEUPDATE
   4503  27381				   -	       ldy	temp8
   4504  27381				   -	       lda	temp6
   4505  27381				   -	       sta	(dlpnt),y
   4506  27381					       endif
   4507  27381
   4508  27381				    doneSPDL
   4509  27381			60		       rts
   4510  27382
   4511  27382				   -	       ifconst	VSCROLL
   4512  27382				   -			; x3 table for fast DLL parsing
   4513  27382				   -Xx3
   4514  27382				   -	       .byte	0,3,6,9,12,15,18,21,24,27
   4515  27382				   -	       .byte	30,33,36,39,42,45,48,51,54,57
   4516  27382				   -	       .byte	60,63,66,69,72,75,78,81,84,87
   4517  27382				   -maskscrollsprite
   4518  27382				   -	       .byte	$00,%11000000,($D0+WZONEHEIGHT),0,160	; 5*2 + 32*3 = 106 cycles
   4519  27382				   -	       .byte	$00,1,($D0+WZONEHEIGHT),160	; 4*2 + 31*3 = 101 cycles 
   4520  27382				   -	       .byte	$00,1,($D0+WZONEHEIGHT),160	; 4*2 + 31*3 = 101 cycles 
   4521  27382				   -	       .byte	$00,1,($D0+WZONEHEIGHT),160	; 4*2 + 31*3 = 101 cycles 
   4522  27382				   -	       .byte	$00,%01000000,($D0+WZONEHEIGHT),16,160	; 5*2 + 16*3 =  58 cycles
   4523  27382				   -			; MAX	============ 467 cycles
   4524  27382				   -			; MIN	============  59 cycles
   4525  27382				   -maskscrollspriteend
   4526  27382					       endif		; VSCROLL
   4527  27382
   4528  27382				    lockzonex
   4529  27382				   -	       ifconst	ZONELOCKS
   4530  27382				   -	       ldy	dlend,x
   4531  27382				   -	       cpy	#DLLASTOBJ
   4532  27382				   -	       beq	lockzonexreturn	; the zone is either stuffed or locked. abort!
   4533  27382				   -	       lda	DLPOINTL,x
   4534  27382				   -	       ifconst	DOUBLEBUFFER
   4535  27382				   -	       clc
   4536  27382				   -	       adc	doublebufferdloffset
   4537  27382				   -	       endif		; DOUBLEBUFFER
   4538  27382				   -	       sta	dlpnt
   4539  27382				   -	       lda	DLPOINTH,x
   4540  27382				   -	       ifconst	DOUBLEBUFFER
   4541  27382				   -	       adc	#0
   4542  27382				   -	       endif		; DOUBLEBUFFER
   4543  27382				   -	       sta	dlpnt+1
   4544  27382				   -	       iny
   4545  27382				   -	       lda	#0
   4546  27382				   -	       sta	(dlpnt),y
   4547  27382				   -	       dey
   4548  27382				   -	       tya
   4549  27382				   -	       ldy	#(DLLASTOBJ-1)
   4550  27382				   -	       sta	(dlpnt),y
   4551  27382				   -	       iny
   4552  27382				   -	       sty	dlend,x
   4553  27382				   -lockzonexreturn
   4554  27382				   -	       rts
   4555  27382					       endif		; ZONELOCKS
   4556  27382				    unlockzonex
   4557  27382				   -	       ifconst	ZONELOCKS
   4558  27382				   -	       ldy	dlend,x
   4559  27382				   -	       cpy	#DLLASTOBJ
   4560  27382				   -	       bne	unlockzonexreturn	; if the zone isn't stuffed, it's not locked. abort!
   4561  27382				   -	       lda	DLPOINTL,x
   4562  27382				   -	       ifconst	DOUBLEBUFFER
   4563  27382				   -	       clc
   4564  27382				   -	       adc	doublebufferdloffset
   4565  27382				   -	       endif		; DOUBLEBUFFER
   4566  27382				   -	       sta	dlpnt
   4567  27382				   -	       lda	DLPOINTH,x
   4568  27382				   -	       ifconst	DOUBLEBUFFER
   4569  27382				   -	       adc	#0
   4570  27382				   -	       endif		; DOUBLEBUFFER
   4571  27382				   -	       sta	dlpnt+1
   4572  27382				   -	       dey
   4573  27382				   -	       lda	(dlpnt),y
   4574  27382				   -	       tay
   4575  27382				   -	       sty	dlend,x
   4576  27382				   -unlockzonexreturn
   4577  27382					       endif		; ZONELOCKS
   4578  27382			60		       rts
   4579  27383
   4580  27383				    plotcharloop
   4581  27383							; ** read from a data indirectly pointed to from temp8,temp9
   4582  27383							; ** format is: lo_data, hi_data, palette|width, x, y
   4583  27383							; ** format ends with lo_data | hi_data = 0
   4584  27383
   4585  27383					       ifconst	DOUBLEBUFFER
   4586  27383			a5 d5		       lda	doublebufferstate
   4587  27385			d0 04		       bne	skipplotcharloopwait
   4588  27387					       endif		; DOUBLEBUFFER
   4589  27387				   -	       ifconst	DEBUGWAITCOLOR
   4590  27387				   -	       lda	#$61
   4591  27387				   -	       sta	BACKGRND
   4592  27387					       endif
   4593  27387				    plotcharloopwait
   4594  27387			a5 4d		       lda	visibleover
   4595  27389			d0 fc		       bne	plotcharloopwait
   4596  2738b				   -	       ifconst	DEBUGWAITCOLOR
   4597  2738b				   -	       lda	#0
   4598  2738b				   -	       sta	BACKGRND
   4599  2738b					       endif
   4600  2738b				    skipplotcharloopwait
   4601  2738b				    plotcharlooploop
   4602  2738b			a0 00		       ldy	#0
   4603  2738d			b1 49		       lda	(temp8),y
   4604  2738f			85 42		       sta	temp1
   4605  27391			c8		       iny
   4606  27392			b1 49		       lda	(temp8),y
   4607  27394			85 43		       sta	temp2
   4608  27396			05 42		       ora	temp1
   4609  27398			d0 01		       bne	plotcharloopcontinue
   4610  2739a							;the pointer=0, so return
   4611  2739a			60		       rts
   4612  2739b				    plotcharloopcontinue
   4613  2739b			c8		       iny
   4614  2739c			b1 49		       lda	(temp8),y
   4615  2739e			85 44		       sta	temp3
   4616  273a0			c8		       iny
   4617  273a1			b1 49		       lda	(temp8),y
   4618  273a3			85 45		       sta	temp4
   4619  273a5			c8		       iny
   4620  273a6			b1 49		       lda	(temp8),y
   4621  273a8							;sta temp5 ; not needed with our late entry.
   4622  273a8			20 c5 f3	       jsr	plotcharactersskipentry
   4623  273ab			a5 49		       lda	temp8
   4624  273ad			18		       clc
   4625  273ae			69 05		       adc	#5
   4626  273b0			85 49		       sta	temp8
   4627  273b2			a5 4a		       lda	temp9
   4628  273b4			69 00		       adc	#0
   4629  273b6			85 4a		       sta	temp9
   4630  273b8			4c 8b f3	       jmp	plotcharlooploop
   4631  273bb
   4632  273bb				    plotcharacters
   4633  273bb					       ifconst	DOUBLEBUFFER
   4634  273bb			a5 d5		       lda	doublebufferstate
   4635  273bd			d0 04		       bne	skipplotcharacterswait
   4636  273bf					       endif		; DOUBLEBUFFER
   4637  273bf				   -	       ifconst	DEBUGWAITCOLOR
   4638  273bf				   -	       lda	#$41
   4639  273bf				   -	       sta	BACKGRND
   4640  273bf					       endif
   4641  273bf				    plotcharacterswait
   4642  273bf			a5 4d		       lda	visibleover
   4643  273c1			d0 fc		       bne	plotcharacterswait
   4644  273c3				   -	       ifconst	DEBUGWAITCOLOR
   4645  273c3				   -	       sta	BACKGRND
   4646  273c3					       endif
   4647  273c3				    skipplotcharacterswait
   4648  273c3							;arguments: 
   4649  273c3							; temp1=lo charactermap
   4650  273c3							; temp2=hi charactermap
   4651  273c3							; temp3=palette | width byte
   4652  273c3							; temp4=x
   4653  273c3							; temp5=y
   4654  273c3
   4655  273c3			a5 46		       lda	temp5	;Y position
   4656  273c5
   4657  273c5				    plotcharactersskipentry
   4658  273c5
   4659  273c5							;ifconst ZONEHEIGHT
   4660  273c5							; if ZONEHEIGHT = 16
   4661  273c5							; and #$0F
   4662  273c5							; endif
   4663  273c5							; if ZONEHEIGHT = 8
   4664  273c5							; and #$1F
   4665  273c5							; endif
   4666  273c5							;else
   4667  273c5							; and #$0F
   4668  273c5							;endif
   4669  273c5
   4670  273c5			aa		       tax
   4671  273c6
   4672  273c6				   -	       ifconst	VSCROLL
   4673  273c6				   -	       ldy	Xx3,x
   4674  273c6				   -	       lda	DLLMEM+11,y
   4675  273c6					       else		; !VSCROLL
   4676  273c6			bd 7a f6	       lda	DLPOINTL,x	;Get pointer to DL that the characters are in
   4677  273c9					       endif		; !VSCROLL
   4678  273c9					       ifconst	DOUBLEBUFFER
   4679  273c9			18		       clc
   4680  273ca			65 d6		       adc	doublebufferdloffset
   4681  273cc					       endif		; DOUBLEBUFFER
   4682  273cc			85 63		       sta	dlpnt
   4683  273ce				   -	       ifconst	VSCROLL
   4684  273ce				   -	       lda	DLLMEM+10,y
   4685  273ce					       else		; !VSCROLL
   4686  273ce			bd 6e f6	       lda	DLPOINTH,x
   4687  273d1					       endif		; !VSCROLL
   4688  273d1					       ifconst	DOUBLEBUFFER
   4689  273d1			69 00		       adc	#0
   4690  273d3					       endif		; DOUBLEBUFFER
   4691  273d3			85 64		       sta	dlpnt+1
   4692  273d5
   4693  273d5							;Create DL entry for the characters
   4694  273d5
   4695  273d5			b4 65		       ldy	dlend,x	;Get the index to the end of this DL
   4696  273d7
   4697  273d7				   -	       ifconst	CHECKOVERWRITE
   4698  273d7				   -	       cpy	#DLLASTOBJ
   4699  273d7				   -	       bne	continueplotcharacters
   4700  273d7				   -	       rts
   4701  273d7				   -continueplotcharacters
   4702  273d7					       endif
   4703  273d7
   4704  273d7			a5 42		       lda	temp1	; character map data, lo byte
   4705  273d9			91 63		       sta	(dlpnt),y	;(1) store low address
   4706  273db
   4707  273db			c8		       iny
   4708  273dc			ad 06 21	       lda	charactermode
   4709  273df			91 63		       sta	(dlpnt),y	;(2) store mode
   4710  273e1
   4711  273e1			c8		       iny
   4712  273e2			a5 43		       lda	temp2	; character map, hi byte
   4713  273e4			91 63		       sta	(dlpnt),y	;(3) store high address
   4714  273e6
   4715  273e6			c8		       iny
   4716  273e7			a5 44		       lda	temp3	;palette|width
   4717  273e9			91 63		       sta	(dlpnt),y	;(4) store palette|width
   4718  273eb
   4719  273eb			c8		       iny
   4720  273ec			a5 45		       lda	temp4	;Horizontal position
   4721  273ee			91 63		       sta	(dlpnt),y	;(5) store horizontal position
   4722  273f0
   4723  273f0			c8		       iny
   4724  273f1			94 65		       sty	dlend,x	; save display list end byte
   4725  273f3			60		       rts
   4726  273f4
   4727  273f4
   4728  273f4					       ifconst	plotvalueonscreen
   4729  273f4				    plotcharacterslive
   4730  273f4							; a version of plotcharacters that draws live and minimally disrupts the screen...
   4731  273f4
   4732  273f4							;arguments: 
   4733  273f4							; temp1=lo charactermap
   4734  273f4							; temp2=hi charactermap
   4735  273f4							; temp3=palette | width byte
   4736  273f4							; temp4=x
   4737  273f4							; temp5=y
   4738  273f4
   4739  273f4			a5 46		       lda	temp5	;Y position
   4740  273f6
   4741  273f6			aa		       tax
   4742  273f7
   4743  273f7				   -	       ifconst	VSCROLL
   4744  273f7				   -	       ldy	Xx3,x
   4745  273f7				   -	       lda	DLLMEM+11,y
   4746  273f7					       else		; !VSCROLL
   4747  273f7			bd 7a f6	       lda	DLPOINTL,x	;Get pointer to DL that the characters are in
   4748  273fa					       endif		; !VSCROLL
   4749  273fa					       ifconst	DOUBLEBUFFER
   4750  273fa			18		       clc
   4751  273fb			65 d6		       adc	doublebufferdloffset
   4752  273fd					       endif		; DOUBLEBUFFER
   4753  273fd			85 63		       sta	dlpnt
   4754  273ff				   -	       ifconst	VSCROLL
   4755  273ff				   -	       lda	DLLMEM+10,y
   4756  273ff					       else		; !VSCROLL
   4757  273ff			bd 6e f6	       lda	DLPOINTH,x
   4758  27402					       endif		; !VSCROLL
   4759  27402					       ifconst	DOUBLEBUFFER
   4760  27402			69 00		       adc	#0
   4761  27404					       endif		; DOUBLEBUFFER
   4762  27404			85 64		       sta	dlpnt+1
   4763  27406
   4764  27406							;Create DL entry for the characters
   4765  27406
   4766  27406			b4 65		       ldy	dlend,x	;Get the index to the end of this DL
   4767  27408
   4768  27408				   -	       ifconst	CHECKOVERWRITE
   4769  27408				   -	       cpy	#DLLASTOBJ
   4770  27408				   -	       bne	continueplotcharacterslive
   4771  27408				   -	       rts
   4772  27408				   -continueplotcharacterslive
   4773  27408					       endif
   4774  27408
   4775  27408			a5 42		       lda	temp1	; character map data, lo byte
   4776  2740a			91 63		       sta	(dlpnt),y	;(1) store low address
   4777  2740c
   4778  2740c			c8		       iny
   4779  2740d							; we don't add the second byte yet, since the charmap could briefly
   4780  2740d							; render without a proper character map address, width, or position.
   4781  2740d			ad 06 21	       lda	charactermode
   4782  27410			91 63		       sta	(dlpnt),y	;(2) store mode
   4783  27412
   4784  27412			c8		       iny
   4785  27413			a5 43		       lda	temp2	; character map, hi byte
   4786  27415			91 63		       sta	(dlpnt),y	;(3) store high address
   4787  27417
   4788  27417			c8		       iny
   4789  27418			a5 44		       lda	temp3	;palette|width
   4790  2741a			91 63		       sta	(dlpnt),y	;(4) store palette|width
   4791  2741c
   4792  2741c			c8		       iny
   4793  2741d			a5 45		       lda	temp4	;Horizontal position
   4794  2741f			91 63		       sta	(dlpnt),y	;(5) store horizontal position
   4795  27421
   4796  27421			c8		       iny
   4797  27422			94 65		       sty	dlend,x	; save display list end byte
   4798  27424
   4799  27424			60		       rts
   4800  27425					       endif		;plotcharacterslive
   4801  27425
   4802  27425					       ifconst	USED_PLOTVALUE
   4803  27425				    plotvalue
   4804  27425							; calling 7800basic command:
   4805  27425							; plotvalue digit_gfx palette variable/data number_of_digits screen_x screen_y
   4806  27425							; ...displays the variable as BCD digits
   4807  27425							;
   4808  27425							; asm sub arguments: 
   4809  27425							; temp1=lo charactermap
   4810  27425							; temp2=hi charactermap
   4811  27425							; temp3=palette | width byte
   4812  27425							; temp4=x
   4813  27425							; temp5=y
   4814  27425							; temp6=number of digits
   4815  27425							; temp7=lo variable
   4816  27425							; temp8=hi variable
   4817  27425							; temp9=character mode
   4818  27425
   4819  27425			00 47	    plotdigitcount =	temp6
   4820  27425
   4821  27425				   -	       ifconst	ZONELOCKS
   4822  27425				   -	       ldx	temp5
   4823  27425				   -	       ldy	dlend,x
   4824  27425				   -	       cpy	#DLLASTOBJ
   4825  27425				   -	       bne	carryonplotvalue
   4826  27425				   -	       rts
   4827  27425				   -carryonplotvalue
   4828  27425					       endif
   4829  27425
   4830  27425			a9 00		       lda	#0
   4831  27427			a8		       tay
   4832  27428			ae ad 01	       ldx	valbufend
   4833  2742b
   4834  2742b			a5 47		       lda	plotdigitcount
   4835  2742d			29 01		       and	#1
   4836  2742f			f0 07		       beq	pvnibble2char
   4837  27431			a9 00		       lda	#0
   4838  27433			9d 00 20	       sta	VALBUFFER,x	; just in case we skip this digit
   4839  27436			f0 11		       beq	pvnibble2char_skipnibble
   4840  27438
   4841  27438				    pvnibble2char
   4842  27438							; high nibble...
   4843  27438			b1 48		       lda	(temp7),y
   4844  2743a			29 f0		       and	#$f0
   4845  2743c			4a		       lsr
   4846  2743d			4a		       lsr
   4847  2743e			4a		       lsr
   4848  2743f					       ifnconst	DOUBLEWIDE	; multiply value by 2 for double-width
   4849  2743f			4a		       lsr
   4850  27440					       endif
   4851  27440
   4852  27440			18		       clc
   4853  27441			65 42		       adc	temp1	; add the offset to character graphics to our value
   4854  27443			9d 00 20	       sta	VALBUFFER,x
   4855  27446			e8		       inx
   4856  27447			c6 47		       dec	plotdigitcount
   4857  27449
   4858  27449				    pvnibble2char_skipnibble
   4859  27449							; low nibble...
   4860  27449			b1 48		       lda	(temp7),y
   4861  2744b			29 0f		       and	#$0f
   4862  2744d				   -	       ifconst	DOUBLEWIDE	; multiply value by 2 for double-width
   4863  2744d				   -	       asl
   4864  2744d					       endif
   4865  2744d			18		       clc
   4866  2744e			65 42		       adc	temp1	; add the offset to character graphics to our value
   4867  27450			9d 00 20	       sta	VALBUFFER,x
   4868  27453			e8		       inx
   4869  27454			c8		       iny
   4870  27455
   4871  27455			c6 47		       dec	plotdigitcount
   4872  27457			d0 df		       bne	pvnibble2char
   4873  27459
   4874  27459							;point to the start of our valuebuffer
   4875  27459			18		       clc
   4876  2745a			a9 00		       lda	#<VALBUFFER
   4877  2745c			6d ad 01	       adc	valbufend
   4878  2745f			85 42		       sta	temp1
   4879  27461			a9 20		       lda	#>VALBUFFER
   4880  27463			69 00		       adc	#0
   4881  27465			85 43		       sta	temp2
   4882  27467
   4883  27467							;advance valbufend to the end of our value buffer
   4884  27467			8e ad 01	       stx	valbufend
   4885  2746a
   4886  2746a				   -	       ifnconst	plotvalueonscreen
   4887  2746a				   -	       jmp	plotcharacters
   4888  2746a					       else
   4889  2746a			4c f4 f3	       jmp	plotcharacterslive
   4890  2746d					       endif
   4891  2746d
   4892  2746d					       endif		; USED_PLOTVALUE
   4893  2746d
   4894  2746d
   4895  2746d				   -	       ifconst	USED_PLOTVALUEEXTRA
   4896  2746d				   -plotdigitcount =	temp6
   4897  2746d				   -plotvalueextra
   4898  2746d				   -			; calling 7800basic command:
   4899  2746d				   -			; plotvalue digit_gfx palette variable/data number_of_digits screen_x screen_y
   4900  2746d				   -			; ...displays the variable as BCD digits
   4901  2746d				   -			;
   4902  2746d				   -			; asm sub arguments: 
   4903  2746d				   -			; temp1=lo charactermap
   4904  2746d				   -			; temp2=hi charactermap
   4905  2746d				   -			; temp3=palette | width byte
   4906  2746d				   -			; temp4=x
   4907  2746d				   -			; temp5=y
   4908  2746d				   -			; temp6=number of digits
   4909  2746d				   -			; temp7=lo variable
   4910  2746d				   -			; temp8=hi variable
   4911  2746d				   -
   4912  2746d				   -	       lda	#0
   4913  2746d				   -	       tay
   4914  2746d				   -	       ldx	valbufend
   4915  2746d				   -	       ifnconst	plotvalueonscreen
   4916  2746d				   -	       sta	VALBUFFER,x
   4917  2746d				   -	       endif
   4918  2746d				   -
   4919  2746d				   -	       lda	plotdigitcount
   4920  2746d				   -	       and	#1
   4921  2746d				   -
   4922  2746d				   -	       bne	pvnibble2char_skipnibbleextra
   4923  2746d				   -
   4924  2746d				   -pvnibble2charextra
   4925  2746d				   -			; high nibble...
   4926  2746d				   -	       lda	(temp7),y
   4927  2746d				   -	       and	#$f0
   4928  2746d				   -	       lsr
   4929  2746d				   -	       lsr
   4930  2746d				   -	       ifnconst	DOUBLEWIDE	; multiply value by 2 for double-width
   4931  2746d				   -	       lsr
   4932  2746d				   -	       endif
   4933  2746d				   -	       clc
   4934  2746d				   -	       adc	temp1	; add the offset to character graphics to our value
   4935  2746d				   -	       sta	VALBUFFER,x
   4936  2746d				   -	       inx
   4937  2746d				   -
   4938  2746d				   -			; second half of the digit
   4939  2746d				   -	       clc
   4940  2746d				   -	       adc	#1
   4941  2746d				   -	       sta	VALBUFFER,x
   4942  2746d				   -	       inx
   4943  2746d				   -
   4944  2746d				   -pvnibble2char_skipnibbleextra
   4945  2746d				   -			; low nibble...
   4946  2746d				   -	       lda	(temp7),y
   4947  2746d				   -	       and	#$0f
   4948  2746d				   -	       ifconst	DOUBLEWIDE	; multiply value by 2 for double-width
   4949  2746d				   -	       asl
   4950  2746d				   -	       endif
   4951  2746d				   -	       asl
   4952  2746d				   -
   4953  2746d				   -	       clc
   4954  2746d				   -	       adc	temp1	; add the offset to character graphics to our value
   4955  2746d				   -	       sta	VALBUFFER,x
   4956  2746d				   -	       inx
   4957  2746d				   -
   4958  2746d				   -	       clc
   4959  2746d				   -	       adc	#1
   4960  2746d				   -	       sta	VALBUFFER,x
   4961  2746d				   -	       inx
   4962  2746d				   -	       iny
   4963  2746d				   -
   4964  2746d				   -	       dec	plotdigitcount
   4965  2746d				   -	       bne	pvnibble2charextra
   4966  2746d				   -
   4967  2746d				   -			;point to the start of our valuebuffer
   4968  2746d				   -	       clc
   4969  2746d				   -	       lda	#<VALBUFFER
   4970  2746d				   -	       adc	valbufend
   4971  2746d				   -	       sta	temp1
   4972  2746d				   -	       lda	#>VALBUFFER
   4973  2746d				   -	       adc	#0
   4974  2746d				   -	       sta	temp2
   4975  2746d				   -
   4976  2746d				   -			;advance valbufend to the end of our value buffer
   4977  2746d				   -	       stx	valbufend
   4978  2746d				   -
   4979  2746d				   -	       ifnconst	plotvalueonscreen
   4980  2746d				   -	       jmp	plotcharacters
   4981  2746d				   -	       else
   4982  2746d				   -	       jmp	plotcharacterslive
   4983  2746d				   -	       endif
   4984  2746d					       endif		; USED_PLOTVALUEEXTRA
   4985  2746d
   4986  2746d				    boxcollision
   4987  2746d				   -	       ifconst	BOXCOLLISION
   4988  2746d				   -			; the worst case cycle-time for the code below is 43 cycles.
   4989  2746d				   -			; unfortunately, prior to getting here we've burned 44 cycles in argument setup. eep!
   4990  2746d				   -
   4991  2746d				   -			;__boxx1 = accumulator
   4992  2746d				   -			;__boxy1 = y
   4993  2746d				   -__boxw1    =	temp3
   4994  2746d				   -__boxh1    =	temp4
   4995  2746d				   -
   4996  2746d				   -__boxx2    =	temp5
   4997  2746d				   -__boxy2    =	temp6
   4998  2746d				   -__boxw2    =	temp7
   4999  2746d				   -__boxh2    =	temp8
   5000  2746d				   -
   5001  2746d				   -DoXCollisionCheck
   5002  2746d				   -			;lda __boxx1 ; skipped. already in the accumulator
   5003  2746d				   -	       cmp	__boxx2	;3
   5004  2746d				   -	       bcs	X1isbiggerthanX2	;2/3
   5005  2746d				   -X2isbiggerthanX1
   5006  2746d				   -			; carry is clear
   5007  2746d				   -	       adc	__boxw1	;3
   5008  2746d				   -	       cmp	__boxx2	;3
   5009  2746d				   -	       bcs	DoYCollisionCheck	;3/2
   5010  2746d				   -	       rts		;6 - carry clear, no collision
   5011  2746d				   -X1isbiggerthanX2
   5012  2746d				   -	       clc		;2
   5013  2746d				   -	       sbc	__boxw2	;3
   5014  2746d				   -	       cmp	__boxx2	;3
   5015  2746d				   -	       bcs	noboxcollision	;3/2
   5016  2746d				   -DoYCollisionCheck
   5017  2746d				   -	       tya		; 2 ; use to be "lda __boxy1"
   5018  2746d				   -	       cmp	__boxy2	;3
   5019  2746d				   -	       bcs	Y1isbiggerthanY2	;3/2
   5020  2746d				   -Y2isbiggerthanY1
   5021  2746d				   -			; carry is clear
   5022  2746d				   -	       adc	__boxh1	;3
   5023  2746d				   -	       cmp	__boxy2	;3
   5024  2746d				   -	       rts		;6 
   5025  2746d				   -Y1isbiggerthanY2
   5026  2746d				   -	       clc		;2
   5027  2746d				   -	       sbc	__boxh2	;3
   5028  2746d				   -	       cmp	__boxy2	;3
   5029  2746d				   -	       bcs	noboxcollision	;3/2
   5030  2746d				   -yesboxcollision
   5031  2746d				   -	       sec		;2
   5032  2746d				   -	       rts		;6
   5033  2746d				   -noboxcollision
   5034  2746d				   -	       clc		;2
   5035  2746d				   -	       rts		;6
   5036  2746d					       endif		; BOXCOLLISION
   5037  2746d
   5038  2746d				    randomize
   5039  2746d			a5 40		       lda	rand
   5040  2746f			4a		       lsr
   5041  27470			26 41		       rol	rand16
   5042  27472			90 02		       bcc	noeor
   5043  27474			49 b4		       eor	#$B4
   5044  27476				    noeor
   5045  27476			85 40		       sta	rand
   5046  27478			45 41		       eor	rand16
   5047  2747a			60		       rts
   5048  2747b
   5049  2747b							; *** bcd conversion routine courtesy Omegamatrix
   5050  2747b							; *** http://atariage.com/forums/blog/563/entry-10832-hex-to-bcd-conversion-0-99/
   5051  2747b				   -	       ifconst	.calledfunction_converttobcd
   5052  2747b				   -converttobcd
   5053  2747b				   -			;value to convert is in the accumulator
   5054  2747b				   -	       sta	temp1
   5055  2747b				   -	       lsr
   5056  2747b				   -	       adc	temp1
   5057  2747b				   -	       ror
   5058  2747b				   -	       lsr
   5059  2747b				   -	       lsr
   5060  2747b				   -	       adc	temp1
   5061  2747b				   -	       ror
   5062  2747b				   -	       adc	temp1
   5063  2747b				   -	       ror
   5064  2747b				   -	       lsr
   5065  2747b				   -	       and	#$3C
   5066  2747b				   -	       sta	temp2
   5067  2747b				   -	       lsr
   5068  2747b				   -	       adc	temp2
   5069  2747b				   -	       adc	temp1
   5070  2747b				   -	       rts		; return the result in the accumulator
   5071  2747b					       endif		; .calledfunction_converttobcd
   5072  2747b
   5073  2747b				   -	       ifconst	.calledfunction_mul8
   5074  2747b				   -			; Y and A contain multiplicands, result in A
   5075  2747b				   -mul8
   5076  2747b				   -	       sty	temp1
   5077  2747b				   -	       sta	temp2
   5078  2747b				   -	       lda	#0
   5079  2747b				   -reptmul8
   5080  2747b				   -	       lsr	temp2
   5081  2747b				   -	       bcc	skipmul8
   5082  2747b				   -	       clc
   5083  2747b				   -	       adc	temp1
   5084  2747b				   -			;bcs donemul8 might save cycles?
   5085  2747b				   -skipmul8
   5086  2747b				   -			;beq donemul8 might save cycles?
   5087  2747b				   -	       asl	temp1
   5088  2747b				   -	       bne	reptmul8
   5089  2747b				   -donemul8
   5090  2747b				   -	       rts
   5091  2747b					       endif		; .calledfunction_mul8
   5092  2747b
   5093  2747b				   -	       ifconst	.calledfunction_div8
   5094  2747b				   -div8
   5095  2747b				   -			; A=numerator Y=denominator, result in A
   5096  2747b				   -	       cpy	#2
   5097  2747b				   -	       bcc	div8end+1	;div by 0 = bad, div by 1=no calc needed, so bail out
   5098  2747b				   -	       sty	temp1
   5099  2747b				   -	       ldy	#$ff
   5100  2747b				   -div8loop
   5101  2747b				   -	       sbc	temp1
   5102  2747b				   -	       iny
   5103  2747b				   -	       bcs	div8loop
   5104  2747b				   -div8end
   5105  2747b				   -	       tya
   5106  2747b				   -			; result in A
   5107  2747b				   -	       rts
   5108  2747b					       endif		; .calledfunction_div8
   5109  2747b
   5110  2747b				   -	       ifconst	.calledfunction_mul16
   5111  2747b				   -			; Y and A contain multiplicands, result in temp2,A=low, temp1=high
   5112  2747b				   -mul16
   5113  2747b				   -	       sty	temp1
   5114  2747b				   -	       sta	temp2
   5115  2747b				   -
   5116  2747b				   -	       lda	#0
   5117  2747b				   -	       ldx	#8
   5118  2747b				   -	       lsr	temp1
   5119  2747b				   -mul16_1
   5120  2747b				   -	       bcc	mul16_2
   5121  2747b				   -	       clc
   5122  2747b				   -	       adc	temp2
   5123  2747b				   -mul16_2
   5124  2747b				   -	       ror
   5125  2747b				   -	       ror	temp1
   5126  2747b				   -	       dex
   5127  2747b				   -	       bne	mul16_1
   5128  2747b				   -	       sta	temp2
   5129  2747b				   -	       rts
   5130  2747b					       endif		; .calledfunction_mul16
   5131  2747b
   5132  2747b				   -	       ifconst	.calledfunction_div16
   5133  2747b				   -			; div int/int
   5134  2747b				   -			; numerator in A, denom in temp1
   5135  2747b				   -			; returns with quotient in A, remainder in temp1
   5136  2747b				   -div16
   5137  2747b				   -	       sta	temp2
   5138  2747b				   -	       sty	temp1
   5139  2747b				   -	       lda	#0
   5140  2747b				   -	       ldx	#8
   5141  2747b				   -	       asl	temp2
   5142  2747b				   -div16_1
   5143  2747b				   -	       rol
   5144  2747b				   -	       cmp	temp1
   5145  2747b				   -	       bcc	div16_2
   5146  2747b				   -	       sbc	temp1
   5147  2747b				   -div16_2
   5148  2747b				   -	       rol	temp2
   5149  2747b				   -	       dex
   5150  2747b				   -	       bne	div16_1
   5151  2747b				   -	       sta	temp1
   5152  2747b				   -	       lda	temp2
   5153  2747b				   -	       rts
   5154  2747b					       endif		; .calledfunction_div16
   5155  2747b
   5156  2747b					       ifconst	bankswitchmode
   5157  2747b				    BS_jsr
   5158  2747b				   -	       ifconst	dumpbankswitch
   5159  2747b				   -	       sta	dumpbankswitch
   5160  2747b					       endif
   5161  2747b				   -	       ifconst	MCPDEVCART
   5162  2747b				   -	       ora	#$18
   5163  2747b				   -	       sta	$3000
   5164  2747b					       else
   5165  2747b			8d 00 80	       sta	$8000
   5166  2747e					       endif
   5167  2747e			68		       pla
   5168  2747f			aa		       tax
   5169  27480			68		       pla
   5170  27481			60		       rts
   5171  27482
   5172  27482				    BS_return
   5173  27482			68		       pla		; bankswitch bank
   5174  27483				   -	       ifconst	dumpbankswitch
   5175  27483				   -	       sta	dumpbankswitch
   5176  27483					       endif
   5177  27483				   -	       ifconst	BANKRAM
   5178  27483				   -	       sta	currentbank
   5179  27483				   -	       ora	currentrambank
   5180  27483					       endif
   5181  27483				   -	       ifconst	MCPDEVCART
   5182  27483				   -	       ora	#$18
   5183  27483				   -	       sta	$3000
   5184  27483					       else
   5185  27483			8d 00 80	       sta	$8000
   5186  27486					       endif
   5187  27486			68		       pla		; bankswitch $0 flag
   5188  27487			60		       rts
   5189  27488					       endif
   5190  27488
   5191  27488				    checkselectswitch
   5192  27488			ad 82 02	       lda	SWCHB	; check the real select switch...
   5193  2748b			29 02		       and	#%00000010
   5194  2748d				    checkselectswitchreturn
   5195  2748d			60		       rts
   5196  2748e
   5197  2748e				    checkresetswitch
   5198  2748e			ad 82 02	       lda	SWCHB	; check the real reset switch...
   5199  27491			29 01		       and	#%00000001
   5200  27493			60		       rts
   5201  27494
   5202  27494				   -	       ifconst	FINESCROLLENABLED
   5203  27494				   -finescrolldlls
   5204  27494				   -	       ldx	temp1	; first DLL index x3
   5205  27494				   -	       lda	DLLMEM,x
   5206  27494				   -	       and	#%11110000
   5207  27494				   -	       ora	finescrolly
   5208  27494				   -	       sta	DLLMEM,x
   5209  27494				   -
   5210  27494				   -	       ldx	temp2	; last DLL index x3
   5211  27494				   -	       lda	DLLMEM,x
   5212  27494				   -	       and	#%11110000
   5213  27494				   -	       ora	finescrolly
   5214  27494				   -	       eor	#(WZONEHEIGHT-1)
   5215  27494				   -	       sta	DLLMEM,x
   5216  27494				   -	       rts
   5217  27494					       endif		; FINESCROLLENABLED
   5218  27494
   5219  27494				   -	       ifconst	USED_ADJUSTVISIBLE
   5220  27494				   -adjustvisible
   5221  27494				   -			; called with temp1=first visible zone *3, temp2=last visible zone *3
   5222  27494				   -	       jsr	waitforvblankstart	; ensure vblank just started
   5223  27494				   -	       ldx	visibleDLLstart
   5224  27494				   -findfirstinterrupt
   5225  27494				   -	       lda	DLLMEM,x
   5226  27494				   -	       bmi	foundfirstinterrupt
   5227  27494				   -	       inx
   5228  27494				   -	       inx
   5229  27494				   -	       inx
   5230  27494				   -	       bne	findfirstinterrupt
   5231  27494				   -foundfirstinterrupt
   5232  27494				   -	       and	#%01111111	; clear the interrupt bit
   5233  27494				   -	       sta	DLLMEM,x
   5234  27494				   -	       ifconst	DOUBLEBUFFER
   5235  27494				   -	       sta	DLLMEM+DBOFFSET,x
   5236  27494				   -	       endif		; DOUBLEBUFFER
   5237  27494				   -	       ldx	overscanDLLstart
   5238  27494				   -findlastinterrupt
   5239  27494				   -	       lda	DLLMEM,x
   5240  27494				   -	       bmi	foundlastinterrupt
   5241  27494				   -	       dex
   5242  27494				   -	       dex
   5243  27494				   -	       dex
   5244  27494				   -	       bne	findlastinterrupt
   5245  27494				   -foundlastinterrupt
   5246  27494				   -	       and	#%01111111	; clear the interrupt bit
   5247  27494				   -	       sta	DLLMEM,x
   5248  27494				   -	       ifconst	DOUBLEBUFFER
   5249  27494				   -	       sta	DLLMEM+DBOFFSET,x
   5250  27494				   -	       endif		; DOUBLEBUFFER
   5251  27494				   -			;now we need to set the new interrupts
   5252  27494				   -	       clc
   5253  27494				   -	       lda	temp1
   5254  27494				   -	       adc	visibleDLLstart
   5255  27494				   -	       tax
   5256  27494				   -	       lda	DLLMEM,x
   5257  27494				   -	       ora	#%10000000
   5258  27494				   -	       sta	DLLMEM,x
   5259  27494				   -	       ifconst	DOUBLEBUFFER
   5260  27494				   -	       sta	DLLMEM+DBOFFSET,x
   5261  27494				   -	       endif		; DOUBLEBUFFER
   5262  27494				   -	       clc
   5263  27494				   -	       lda	temp2
   5264  27494				   -	       adc	visibleDLLstart
   5265  27494				   -	       tax
   5266  27494				   -	       lda	DLLMEM,x
   5267  27494				   -	       ora	#%10000000
   5268  27494				   -	       sta	DLLMEM,x
   5269  27494				   -	       ifconst	DOUBLEBUFFER
   5270  27494				   -	       sta	DLLMEM+DBOFFSET,x
   5271  27494				   -	       endif		; DOUBLEBUFFER
   5272  27494				   -	       jsr	vblankresync
   5273  27494				   -	       rts
   5274  27494					       endif		; USED_ADJUSTVISIBLE
   5275  27494
   5276  27494				    vblankresync
   5277  27494			20 25 f5	       jsr	waitforvblankstart	; ensure vblank just started
   5278  27497			a9 00		       lda	#0
   5279  27499			85 4d		       sta	visibleover
   5280  2749b			a9 03		       lda	#3
   5281  2749d			8d b2 01	       sta	interruptindex
   5282  274a0			60		       rts
   5283  274a1
   5284  274a1				    createallgamedlls
   5285  274a1			a0 3c		       ldy	#(DLLLUTEND-DLLLUT)
   5286  274a3				    createallgamedllsloop
   5287  274a3			88		       dey
   5288  274a4			b9 e9 f4	       lda	DLLLUT,y
   5289  274a7			99 00 18	       sta	DLLMEM,y
   5290  274aa					       ifconst	DOUBLEBUFFER
   5291  274aa			99 70 18	       sta	DLLMEM+DBOFFSET,y
   5292  274ad					       endif		; DOUBLEBUFFER
   5293  274ad			c0 00		       cpy	#0
   5294  274af			d0 f2		       bne	createallgamedllsloop
   5295  274b1
   5296  274b1					       ifconst	DOUBLEBUFFER
   5297  274b1			a0 24		       ldy	#(DLLLUTNONVISSTART-DLLLUTVISSTART)
   5298  274b3				    fixdoublebuffer
   5299  274b3			88		       dey
   5300  274b4			b9 79 18	       lda	DLLMEM+DBOFFSET+DLLLUTVISSTART-DLLLUT,y
   5301  274b7			18		       clc
   5302  274b8			69 ff		       adc	#DOUBLEBUFFEROFFSET
   5303  274ba			99 79 18	       sta	DLLMEM+DBOFFSET+DLLLUTVISSTART-DLLLUT,y
   5304  274bd			88		       dey
   5305  274be			b9 79 18	       lda	DLLMEM+DBOFFSET+DLLLUTVISSTART-DLLLUT,y
   5306  274c1			69 00		       adc	#0
   5307  274c3			99 79 18	       sta	DLLMEM+DBOFFSET+DLLLUTVISSTART-DLLLUT,y
   5308  274c6			88		       dey
   5309  274c7			d0 ea		       bne	fixdoublebuffer
   5310  274c9					       endif
   5311  274c9
   5312  274c9				   -	       ifconst	BANKSET_DL_IN_CARTRAM
   5313  274c9				   -			; N.B. banksets doesn't in-fact allow DL in cart-ram, so this conditional
   5314  274c9				   -			; is always skipped. This is here in case some day the limitation is
   5315  274c9				   -			; worked around, but it's untested. 
   5316  274c9				   -
   5317  274c9				   -			; With bankset cart ram, we added $8000 to the DL address so plot 
   5318  274c9				   -			; functions would hit the cart-ram write-address. We need to subtract $80
   5319  274c9				   -			; so Maria will read from the cart-ram read-address.
   5320  274c9				   -	       ldy	#(DLLLUTNONVISSTART-DLLLUTVISSTART)
   5321  274c9				   -fixbanksetaddresses
   5322  274c9				   -	       dey
   5323  274c9				   -	       dey
   5324  274c9				   -	       lda	DLLMEM+DLLLUTVISSTART-DLLLUT,y
   5325  274c9				   -	       and	#%01111111
   5326  274c9				   -	       sta	DLLMEM+DLLLUTVISSTART-DLLLUT,y
   5327  274c9				   -	       ifconst	DOUBLEBUFFER
   5328  274c9				   -	       lda	DLLMEM+DBOFFSET+DLLLUTVISSTART-DLLLUT,y
   5329  274c9				   -	       and	#%01111111
   5330  274c9				   -	       sta	DLLMEM+DBOFFSET+DLLLUTVISSTART-DLLLUT,y
   5331  274c9				   -	       endif		; DOUBLEBUFFER
   5332  274c9				   -	       dey
   5333  274c9				   -	       bne	fixbanksetaddresses
   5334  274c9					       endif		; BANKSET_DL_IN_CARTRAM
   5335  274c9
   5336  274c9			ad 09 21	       lda	paldetected
   5337  274cc			f0 10		       beq	skippaladjust
   5338  274ce			a9 4f		       lda	#($0F|(WZONEHEIGHT*4))	; +15 lines
   5339  274d0			8d 06 18	       sta	DLLMEM+6
   5340  274d3					       ifconst	DOUBLEBUFFER
   5341  274d3			8d 76 18	       sta	DLLMEM+DBOFFSET+6
   5342  274d6					       endif
   5343  274d6					       if	WSCREENHEIGHT = 192
   5344  274d6			a9 4d		       lda	#($0D|(WZONEHEIGHT*4))	; +6 lines
   5345  274d8				   -	       else
   5346  274d8				   -	       lda	#($07|(WZONEHEIGHT*4))	; +6 lines
   5347  274d8					       endif		; 
   5348  274d8			8d 03 18	       sta	DLLMEM+3
   5349  274db					       ifconst	DOUBLEBUFFER
   5350  274db			8d 73 18	       sta	DLLMEM+DBOFFSET+3
   5351  274de					       endif		; DOUBLEBUFFER
   5352  274de
   5353  274de				    skippaladjust
   5354  274de
   5355  274de							; save the DL markers...
   5356  274de			a9 09		       lda	#(DLLLUTVISSTART-DLLLUT)
   5357  274e0			8d 3c 21	       sta	visibleDLLstart
   5358  274e3			a9 2d		       lda	#(DLLLUTNONVISSTART-DLLLUT)
   5359  274e5			8d 3d 21	       sta	overscanDLLstart
   5360  274e8			60		       rts
   5361  274e9
   5362  274e9							; N.B. max DLL length is 112 bytes (for double-buffered)
   5363  274e9
   5364  274e9				    DLLLUT
   5365  274e9					       if	WSCREENHEIGHT = 192
   5366  274e9			4f 21 00	       .byte.b	($0F|(WZONEHEIGHT*4)),$21,$00	; 16 blank lines
   5367  274ec			47 21 00	       .byte.b	($07|(WZONEHEIGHT*4)),$21,$00	;  8 blank lines
   5368  274ef			40 21 00	       .byte.b	($00|(WZONEHEIGHT*4)),$21,$00	;  1 blank lines 
   5369  274f2							;=25 blank lines
   5370  274f2					       endif		; WSCREENHEIGHT = 192
   5371  274f2				   -	       if	WSCREENHEIGHT = 208
   5372  274f2				   -	       .byte	($0E|(WZONEHEIGHT*4)),$21,$00	; 15 blank lines
   5373  274f2				   -	       .byte	($00|(WZONEHEIGHT*4)),$21,$00	;  1 blank lines
   5374  274f2				   -	       .byte	($00|(WZONEHEIGHT*4)),$21,$00	;  1 blank lines 
   5375  274f2				   -			;=17 blank lines
   5376  274f2					       endif		; WSCREENHEIGHT = 208
   5377  274f2				   -	       if	WSCREENHEIGHT = 224
   5378  274f2				   -	       .byte	($06|(WZONEHEIGHT*4)),$21,$00	;  7 blank lines
   5379  274f2				   -	       .byte	($00|(WZONEHEIGHT*4)),$21,$00	;  1 blank lines
   5380  274f2				   -	       .byte	($00|(WZONEHEIGHT*4)),$21,$00	;  1 blank lines 
   5381  274f2				   -			;= 9 blank lines
   5382  274f2					       endif		; WSCREENHEIGHT = 224
   5383  274f2
   5384  274f2				    DLLLUTVISSTART
   5385  274f2			cf 40 00	       .byte.b	($80|(WZONEHEIGHT*4)|(WZONEHEIGHT-1)),>ZONE0ADDRESS,<ZONE0ADDRESS
   5386  274f5							;	 ^--NMI 1: start of visible
   5387  274f5			4f 45 55	       .byte.b	($00|(WZONEHEIGHT*4)|(WZONEHEIGHT-1)),>ZONE1ADDRESS,<ZONE1ADDRESS
   5388  274f8			4f 4a aa	       .byte.b	($00|(WZONEHEIGHT*4)|(WZONEHEIGHT-1)),>ZONE2ADDRESS,<ZONE2ADDRESS
   5389  274fb			4f 50 00	       .byte.b	($00|(WZONEHEIGHT*4)|(WZONEHEIGHT-1)),>ZONE3ADDRESS,<ZONE3ADDRESS
   5390  274fe			4f 55 55	       .byte.b	($00|(WZONEHEIGHT*4)|(WZONEHEIGHT-1)),>ZONE4ADDRESS,<ZONE4ADDRESS
   5391  27501			4f 5a aa	       .byte.b	($00|(WZONEHEIGHT*4)|(WZONEHEIGHT-1)),>ZONE5ADDRESS,<ZONE5ADDRESS
   5392  27504			4f 60 00	       .byte.b	($00|(WZONEHEIGHT*4)|(WZONEHEIGHT-1)),>ZONE6ADDRESS,<ZONE6ADDRESS
   5393  27507			4f 65 55	       .byte.b	($00|(WZONEHEIGHT*4)|(WZONEHEIGHT-1)),>ZONE7ADDRESS,<ZONE7ADDRESS
   5394  2750a			4f 6a aa	       .byte.b	($00|(WZONEHEIGHT*4)|(WZONEHEIGHT-1)),>ZONE8ADDRESS,<ZONE8ADDRESS
   5395  2750d			4f 70 00	       .byte.b	($00|(WZONEHEIGHT*4)|(WZONEHEIGHT-1)),>ZONE9ADDRESS,<ZONE9ADDRESS
   5396  27510			4f 75 55	       .byte.b	($00|(WZONEHEIGHT*4)|(WZONEHEIGHT-1)),>ZONE10ADDRESS,<ZONE10ADDRESS
   5397  27513			4f 7a aa	       .byte.b	($00|(WZONEHEIGHT*4)|(WZONEHEIGHT-1)),>ZONE11ADDRESS,<ZONE11ADDRESS
   5398  27516				   -	       ifconst	ZONE12ADDRESS
   5399  27516				   -	       .byte	($00|(WZONEHEIGHT*4)|(WZONEHEIGHT-1)),>ZONE12ADDRESS,<ZONE12ADDRESS
   5400  27516					       endif
   5401  27516				   -	       ifconst	ZONE13ADDRESS
   5402  27516				   -	       .byte	($00|(WZONEHEIGHT*4)|(WZONEHEIGHT-1)),>ZONE13ADDRESS,<ZONE13ADDRESS
   5403  27516					       endif
   5404  27516				   -	       ifconst	ZONE14ADDRESS
   5405  27516				   -	       .byte	($00|(WZONEHEIGHT*4)|(WZONEHEIGHT-1)),>ZONE14ADDRESS,<ZONE14ADDRESS
   5406  27516					       endif
   5407  27516				   -	       ifconst	ZONE15ADDRESS
   5408  27516				   -	       .byte	($00|(WZONEHEIGHT*4)|(WZONEHEIGHT-1)),>ZONE15ADDRESS,<ZONE15ADDRESS
   5409  27516					       endif
   5410  27516				   -	       ifconst	ZONE16ADDRESS
   5411  27516				   -	       .byte	($00|(WZONEHEIGHT*4)|(WZONEHEIGHT-1)),>ZONE16ADDRESS,<ZONE16ADDRESS
   5412  27516					       endif
   5413  27516				   -	       ifconst	ZONE17ADDRESS
   5414  27516				   -	       .byte	($00|(WZONEHEIGHT*4)|(WZONEHEIGHT-1)),>ZONE17ADDRESS,<ZONE17ADDRESS
   5415  27516					       endif
   5416  27516				   -	       ifconst	ZONE18ADDRESS
   5417  27516				   -	       .byte	($00|(WZONEHEIGHT*4)|(WZONEHEIGHT-1)),>ZONE18ADDRESS,<ZONE18ADDRESS
   5418  27516					       endif
   5419  27516				   -	       ifconst	ZONE19ADDRESS
   5420  27516				   -	       .byte	($00|(WZONEHEIGHT*4)|(WZONEHEIGHT-1)),>ZONE19ADDRESS,<ZONE19ADDRESS
   5421  27516					       endif
   5422  27516				   -	       ifconst	ZONE20ADDRESS
   5423  27516				   -	       .byte	($00|(WZONEHEIGHT*4)|(WZONEHEIGHT-1)),>ZONE20ADDRESS,<ZONE20ADDRESS
   5424  27516					       endif
   5425  27516				   -	       ifconst	ZONE21ADDRESS
   5426  27516				   -	       .byte	($00|(WZONEHEIGHT*4)|(WZONEHEIGHT-1)),>ZONE21ADDRESS,<ZONE21ADDRESS
   5427  27516					       endif
   5428  27516				   -	       ifconst	ZONE22ADDRESS
   5429  27516				   -	       .byte	($00|(WZONEHEIGHT*4)|(WZONEHEIGHT-1)),>ZONE22ADDRESS,<ZONE22ADDRESS
   5430  27516					       endif
   5431  27516				   -	       ifconst	ZONE23ADDRESS
   5432  27516				   -	       .byte	($00|(WZONEHEIGHT*4)|(WZONEHEIGHT-1)),>ZONE23ADDRESS,<ZONE23ADDRESS
   5433  27516					       endif
   5434  27516				   -	       ifconst	ZONE24ADDRESS
   5435  27516				   -	       .byte	($00|(WZONEHEIGHT*4)|(WZONEHEIGHT-1)),>ZONE24ADDRESS,<ZONE24ADDRESS
   5436  27516					       endif
   5437  27516				   -	       ifconst	ZONE25ADDRESS
   5438  27516				   -	       .byte	($00|(WZONEHEIGHT*4)|(WZONEHEIGHT-1)),>ZONE25ADDRESS,<ZONE25ADDRESS
   5439  27516					       endif
   5440  27516				   -	       ifconst	ZONE26ADDRESS
   5441  27516				   -	       .byte	($00|(WZONEHEIGHT*4)|(WZONEHEIGHT-1)),>ZONE26ADDRESS,<ZONE26ADDRESS
   5442  27516					       endif
   5443  27516				   -	       ifconst	ZONE27ADDRESS
   5444  27516				   -	       .byte	($00|(WZONEHEIGHT*4)|(WZONEHEIGHT-1)),>ZONE27ADDRESS,<ZONE27ADDRESS
   5445  27516					       endif
   5446  27516				    DLLLUTNONVISSTART
   5447  27516			c3 21 00	       .byte.b	($83|(WZONEHEIGHT*4)),$21,$00	;  4 blank lines
   5448  27519							;	 ^--NMI 2: start of non-visible
   5449  27519			cf 21 00	       .byte.b	($8F|(WZONEHEIGHT*4)),$21,$00	; 16 blank lines
   5450  2751c							;	 ^--NMI 3: start of overscan
   5451  2751c			4f 21 00	       .byte.b	($0F|(WZONEHEIGHT*4)),$21,$00	; 16 blank lines
   5452  2751f			4f 21 00	       .byte.b	($0F|(WZONEHEIGHT*4)),$21,$00	; 16 blank lines
   5453  27522			4f 21 00	       .byte.b	($0F|(WZONEHEIGHT*4)),$21,$00	; 16 blank lines
   5454  27525				    DLLLUTEND
   5455  27525							;echo "DLL size: ",[(DLLLUTEND-DLLLUT)]d,"bytes"
   5456  27525							;echo "DLL code size: ",[(DLLLUTEND-createallgamedlls)]d,"bytes"
   5457  27525
   5458  27525				    waitforvblankstart
   5459  27525				    vblankendwait
   5460  27525			24 28		       BIT	MSTAT
   5461  27527			30 fc		       bmi	vblankendwait
   5462  27529				    vblankstartwait
   5463  27529			24 28		       BIT	MSTAT
   5464  2752b			10 fc		       bpl	vblankstartwait
   5465  2752d			60		       rts
   5466  2752e
   5467  2752e					       ifconst	DOUBLEBUFFER
   5468  2752e				    flipdisplaybufferreturn
   5469  2752e			60		       rts
   5470  2752f				    flipdisplaybuffer
   5471  2752f				   -	       ifconst	interrupthold
   5472  2752f				   -	       lda	#$FF
   5473  2752f				   -	       sta	interrupthold
   5474  2752f					       endif
   5475  2752f			a5 d5		       lda	doublebufferstate
   5476  27531			f0 fb		       beq	flipdisplaybufferreturn	; exit if we're not in double-buffer
   5477  27533
   5478  27533			20 46 f1	       jsr	terminatedisplaybuffer	; terminate the working buffer before we flip
   5479  27536
   5480  27536			a5 d5		       lda	doublebufferstate
   5481  27538			4a		       lsr		; /2, so we'll see 0 or 1, rather than 1 or 3
   5482  27539			aa		       tax
   5483  2753a
   5484  2753a							; ensure we don't flip mid-display. otherwise the displayed DL will be the one the game is working on.
   5485  2753a
   5486  2753a				    flipdisplaybufferwait1
   5487  2753a			a5 4d		       lda	visibleover
   5488  2753c			f0 fc		       beq	flipdisplaybufferwait1
   5489  2753e
   5490  2753e				    flipdisplaybufferwait
   5491  2753e			a5 4d		       lda	visibleover
   5492  27540			d0 fc		       bne	flipdisplaybufferwait
   5493  27542
   5494  27542			ad b3 01	       lda	doublebufferminimumframetarget
   5495  27545			f0 0b		       beq	skipminimumframecode
   5496  27547			ad b4 01	       lda	doublebufferminimumframeindex
   5497  2754a			d0 ee		       bne	flipdisplaybufferwait1
   5498  2754c			ad b3 01	       lda	doublebufferminimumframetarget
   5499  2754f			8d b4 01	       sta	doublebufferminimumframeindex
   5500  27552				    skipminimumframecode
   5501  27552
   5502  27552			bd b2 f5	       lda	DLLMEMLutHi,x
   5503  27555			85 2c		       sta	DPPH
   5504  27557			bd b0 f5	       lda	DLLMEMLutLo,x
   5505  2755a			85 30		       sta	DPPL
   5506  2755c
   5507  2755c			bd b4 f5	       lda	NewPageflipstate,x
   5508  2755f			85 d5		       sta	doublebufferstate
   5509  27561			bd b6 f5	       lda	NewPageflipoffset,x
   5510  27564			85 d6		       sta	doublebufferdloffset
   5511  27566
   5512  27566					       ifnconst	BANKSET_DL_IN_CARTRAM
   5513  27566			a5 d7		       lda	doublebufferbufferdirty
   5514  27568			f0 c4		       beq	flipdisplaybufferreturn
   5515  2756a
   5516  2756a							; The doublebuffer buffer is dirty, so the game code must have issued a savescreen recently.
   5517  2756a							; To make savescreen work with the new working buffer, we need to copy over the saved objects
   5518  2756a							; from the displayed buffer to the working buffer...
   5519  2756a
   5520  2756a			a5 d6		       lda	doublebufferdloffset
   5521  2756c			49 ff		       eor	#DOUBLEBUFFEROFFSET
   5522  2756e			85 47		       sta	temp6	; make temp6 the anti-doublebufferdloffset variable
   5523  27570
   5524  27570			a2 0b		       ldx	#(WZONECOUNT-1)
   5525  27572				    copybufferzoneloop
   5526  27572
   5527  27572			bd 7a f6	       lda	DLPOINTL,x
   5528  27575			18		       clc
   5529  27576			65 d6		       adc	doublebufferdloffset
   5530  27578			85 42		       sta	temp1
   5531  2757a			bd 6e f6	       lda	DLPOINTH,x
   5532  2757d			69 00		       adc	#0
   5533  2757f			85 43		       sta	temp2
   5534  27581
   5535  27581			bd 7a f6	       lda	DLPOINTL,x
   5536  27584			18		       clc
   5537  27585			65 47		       adc	temp6
   5538  27587			85 44		       sta	temp3
   5539  27589			bd 6e f6	       lda	DLPOINTH,x
   5540  2758c			69 00		       adc	#0
   5541  2758e			85 45		       sta	temp4
   5542  27590
   5543  27590			b5 82		       lda	dlendsave,x
   5544  27592			a8		       tay
   5545  27593				    copybuffercharsloop
   5546  27593			b1 44		       lda	(temp3),y
   5547  27595			91 42		       sta	(temp1),y
   5548  27597			88		       dey
   5549  27598			10 f9		       bpl	copybuffercharsloop
   5550  2759a			ca		       dex
   5551  2759b			10 d5		       bpl	copybufferzoneloop
   5552  2759d			a9 00		       lda	#0
   5553  2759f			85 d7		       sta	doublebufferbufferdirty
   5554  275a1					       endif		; ! BANKSET_DL_IN_CARTRAM
   5555  275a1			60		       rts
   5556  275a2
   5557  275a2				    doublebufferoff
   5558  275a2			a9 01		       lda	#1
   5559  275a4			85 d5		       sta	doublebufferstate
   5560  275a6			20 2f f5	       jsr	flipdisplaybuffer
   5561  275a9			a9 00		       lda	#0
   5562  275ab			85 d5		       sta	doublebufferstate
   5563  275ad			85 d6		       sta	doublebufferdloffset
   5564  275af			60		       rts
   5565  275b0
   5566  275b0				    DLLMEMLutLo
   5567  275b0			00 70		       .byte.b	<DLLMEM,<(DLLMEM+DBOFFSET)
   5568  275b2				    DLLMEMLutHi
   5569  275b2			18 18		       .byte.b	>DLLMEM,>(DLLMEM+DBOFFSET)
   5570  275b4				    NewPageflipstate
   5571  275b4			03 01		       .byte.b	3,1
   5572  275b6				    NewPageflipoffset
   5573  275b6			ff 00		       .byte.b	DOUBLEBUFFEROFFSET,0
   5574  275b8
   5575  275b8					       endif		; DOUBLEBUFFER
   5576  275b8
   5577  275b8				   -	       ifconst	MOUSESUPPORT
   5578  275b8				   -
   5579  275b8				   -rotationalcompare
   5580  275b8				   -			; old = 00 01 10 11
   5581  275b8				   -	       .byte	$00, $01, $ff, $00	; new=00
   5582  275b8				   -	       .byte	$ff, $00, $00, $01	; new=01
   5583  275b8				   -	       .byte	$01, $00, $00, $ff	; new=10
   5584  275b8				   -	       .byte	$00, $ff, $01, $00	; new=11
   5585  275b8				   -
   5586  275b8				   -			; 0000YyXx st mouse
   5587  275b8				   -
   5588  275b8				   -			; 0000xyXY amiga mouse
   5589  275b8				   -
   5590  275b8				   -	       ifconst	MOUSEXONLY
   5591  275b8				   -amigatoataribits		; swap bits 1 and 4...
   5592  275b8				   -	       .byte	%0000, %0000, %0010, %0010
   5593  275b8				   -	       .byte	%0000, %0000, %0010, %0010
   5594  275b8				   -	       .byte	%0001, %0001, %0011, %0011
   5595  275b8				   -	       .byte	%0001, %0001, %0011, %0011
   5596  275b8				   -
   5597  275b8				   -			; null change bits
   5598  275b8				   -	       .byte	%0000, %0001, %0010, %0011
   5599  275b8				   -	       .byte	%0000, %0001, %0010, %0011
   5600  275b8				   -	       .byte	%0000, %0001, %0010, %0011
   5601  275b8				   -	       .byte	%0000, %0001, %0010, %0011
   5602  275b8				   -
   5603  275b8				   -	       else		; !MOUSEXONLY
   5604  275b8				   -
   5605  275b8				   -amigatoataribits		; swap bits 1 and 4...
   5606  275b8				   -	       .byte	%0000, %1000, %0010, %1010
   5607  275b8				   -	       .byte	%0100, %1100, %0110, %1110
   5608  275b8				   -	       .byte	%0001, %1001, %0011, %1011
   5609  275b8				   -	       .byte	%0101, %1101, %0111, %1111
   5610  275b8				   -			; null change bits
   5611  275b8				   -	       .byte	%0000, %0001, %0010, %0011
   5612  275b8				   -	       .byte	%0100, %0101, %0110, %0111
   5613  275b8				   -	       .byte	%1000, %1001, %1010, %1011
   5614  275b8				   -	       .byte	%1100, %1101, %1110, %1111
   5615  275b8				   -	       endif		; !MOUSEXONLY
   5616  275b8				   -
   5617  275b8					       endif		; MOUSESUPPORT
   5618  275b8
   5619  275b8				    mouse0update
   5620  275b8				   -	       ifconst	MOUSE0SUPPORT
   5621  275b8				   -
   5622  275b8				   -mousetableselect =	inttemp2
   5623  275b8				   -mousexdelta =	inttemp3
   5624  275b8				   -mouseydelta =	inttemp4
   5625  275b8				   -lastSWCHA  =	inttemp6
   5626  275b8				   -
   5627  275b8				   -			; 0000YyXx st mouse
   5628  275b8				   -			; 0000xyXY amiga mouse
   5629  275b8				   -
   5630  275b8				   -	       lda	#$ff
   5631  275b8				   -	       sta	lastSWCHA
   5632  275b8				   -
   5633  275b8				   -	       ldy	port0control
   5634  275b8				   -
   5635  275b8				   -	       lda	#%00010000
   5636  275b8				   -	       cpy	#9	; AMIGA?
   5637  275b8				   -	       bne	skipamigabitsfix0
   5638  275b8				   -	       lda	#0
   5639  275b8				   -skipamigabitsfix0
   5640  275b8				   -	       sta	mousetableselect
   5641  275b8				   -	       ifconst	DRIVINGBOOST
   5642  275b8				   -	       cpy	#6	; DRIVING?
   5643  275b8				   -	       bne	skipdriving0setup
   5644  275b8				   -			; swap mousex0 and mousey0. mousex seen by the 7800basic program
   5645  275b8				   -			; trails the actual mousex0, so we can smoothly interpolate toward
   5646  275b8				   -			; the actual position. This actual position is stored in mousey0 
   5647  275b8				   -			; after the driver has run.
   5648  275b8				   -	       ldx	mousex0
   5649  275b8				   -	       lda	mousey0
   5650  275b8				   -	       stx	mousey0
   5651  275b8				   -	       sta	mousex0
   5652  275b8				   -skipdriving0setup
   5653  275b8				   -	       endif		; DRIVINGBOOST
   5654  275b8				   -
   5655  275b8				   -	       lda	#0
   5656  275b8				   -	       sta	mousexdelta
   5657  275b8				   -	       sta	mouseydelta
   5658  275b8				   -
   5659  275b8				   -	       ifnconst	MOUSETIME
   5660  275b8				   -	       ifnconst	MOUSEXONLY
   5661  275b8				   -	       lda	#180	; minimum for x+y
   5662  275b8				   -	       else
   5663  275b8				   -	       lda	#100	; minimum for just x
   5664  275b8				   -	       endif
   5665  275b8				   -	       else
   5666  275b8				   -	       lda	#MOUSETIME
   5667  275b8				   -	       endif
   5668  275b8				   -	       jsr	SETTIM64T	; INTIM is in Y
   5669  275b8				   -
   5670  275b8				   -mouse0updateloop
   5671  275b8				   -	       lda	SWCHA
   5672  275b8				   -	       asr	#%11110000	; Undocumented. A = A & #IMM, then LSR A.
   5673  275b8				   -	       cmp	lastSWCHA
   5674  275b8				   -	       beq	mouse0loopcondition
   5675  275b8				   -	       sta	lastSWCHA
   5676  275b8				   -	       lsr
   5677  275b8				   -	       lsr
   5678  275b8				   -	       lsr
   5679  275b8				   -
   5680  275b8				   -	       ora	mousetableselect	; atari/amiga decoding table selection
   5681  275b8				   -
   5682  275b8				   -			; st mice encode on different bits/joystick-lines than amiga mice...
   5683  275b8				   -			; 0000YyXx st mouse
   5684  275b8				   -			; 0000xyXY amiga mouse
   5685  275b8				   -			; ...so can shuffle the amiga bits to reuse the st driver.
   5686  275b8				   -	       tay
   5687  275b8				   -	       lax	amigatoataribits,y
   5688  275b8				   -
   5689  275b8				   -	       ifnconst	MOUSEXONLY
   5690  275b8				   -			; first the Y...
   5691  275b8				   -	       and	#%00001100
   5692  275b8				   -	       ora	mousecodey0
   5693  275b8				   -	       tay
   5694  275b8				   -	       lda	rotationalcompare,y
   5695  275b8				   -	       clc
   5696  275b8				   -	       adc	mouseydelta
   5697  275b8				   -	       sta	mouseydelta
   5698  275b8				   -	       tya
   5699  275b8				   -	       lsr
   5700  275b8				   -	       lsr
   5701  275b8				   -	       sta	mousecodey0
   5702  275b8				   -	       txa
   5703  275b8				   -			; ...then the X...
   5704  275b8				   -	       and	#%00000011
   5705  275b8				   -	       tax
   5706  275b8				   -	       endif		; !MOUSEXONLY
   5707  275b8				   -
   5708  275b8				   -	       asl
   5709  275b8				   -	       asl
   5710  275b8				   -	       ora	mousecodex0
   5711  275b8				   -	       tay
   5712  275b8				   -	       lda	rotationalcompare,y
   5713  275b8				   -	       adc	mousexdelta	; carry was clear by previous ASL
   5714  275b8				   -	       sta	mousexdelta
   5715  275b8				   -	       stx	mousecodex0
   5716  275b8				   -mouse0loopcondition
   5717  275b8				   -	       lda	TIMINT
   5718  275b8				   -	       bpl	mouse0updateloop
   5719  275b8				   -
   5720  275b8				   -			; *** adapt to selected device resolution. 
   5721  275b8				   -	       ldx	port0control
   5722  275b8				   -
   5723  275b8				   -	       ifconst	PRECISIONMOUSING
   5724  275b8				   -	       ldy	port0resolution
   5725  275b8				   -	       bne	mouse0halveddone
   5726  275b8				   -	       cpx	#6	; half-resolution is no good for driving wheels
   5727  275b8				   -	       beq	mouse0halveddone
   5728  275b8				   -			; resolution=0 is half mouse resolution, necessary for precision 
   5729  275b8				   -			; mousing on a 160x240 screen with a 1000 dpi mouse.
   5730  275b8				   -
   5731  275b8				   -	       lda	mousexdelta
   5732  275b8				   -	       cmp	#$80
   5733  275b8				   -	       ror		; do a signed divide by 2.
   5734  275b8				   -	       clc
   5735  275b8				   -	       adc	mousex0
   5736  275b8				   -	       sta	mousex0
   5737  275b8				   -	       ifnconst	MOUSEXONLY
   5738  275b8				   -	       lda	mouseydelta
   5739  275b8				   -	       clc
   5740  275b8				   -	       adc	mousey0
   5741  275b8				   -	       sta	mousey0
   5742  275b8				   -	       endif
   5743  275b8				   -			; at half resolution we just exit after updating x and y
   5744  275b8				   -	       jmp	LLRET0
   5745  275b8				   -mouse0halveddone
   5746  275b8				   -	       endif		; PRECISIONMOUSING
   5747  275b8				   -
   5748  275b8				   -	       ifnconst	MOUSEXONLY
   5749  275b8				   -	       asl	mouseydelta	; *2 because Y resolution is finer
   5750  275b8				   -	       ldy	port0resolution
   5751  275b8				   -	       dey
   5752  275b8				   -	       lda	#0
   5753  275b8				   -mousey0resolutionfix
   5754  275b8				   -	       clc
   5755  275b8				   -	       adc	mouseydelta
   5756  275b8				   -	       dey
   5757  275b8				   -	       bpl	mousey0resolutionfix
   5758  275b8				   -	       clc
   5759  275b8				   -	       adc	mousey0
   5760  275b8				   -	       sta	mousey0
   5761  275b8				   -	       endif		; MOUSEXONLY
   5762  275b8				   -
   5763  275b8				   -	       ldy	port0resolution
   5764  275b8				   -	       dey
   5765  275b8				   -	       lda	#0
   5766  275b8				   -mousex0resolutionfix
   5767  275b8				   -	       clc
   5768  275b8				   -	       adc	mousexdelta
   5769  275b8				   -	       dey
   5770  275b8				   -	       bpl	mousex0resolutionfix
   5771  275b8				   -	       ifnconst	DRIVINGBOOST
   5772  275b8				   -	       clc
   5773  275b8				   -	       adc	mousex0
   5774  275b8				   -	       sta	mousex0
   5775  275b8				   -	       else
   5776  275b8				   -	       cpx	#6
   5777  275b8				   -	       beq	carryonmouse0boost
   5778  275b8				   -	       clc
   5779  275b8				   -	       adc	mousex0
   5780  275b8				   -	       sta	mousex0
   5781  275b8				   -	       jmp	LLRET0
   5782  275b8				   -carryonmouse0boost
   5783  275b8				   -	       sta	mousexdelta
   5784  275b8				   -	       clc
   5785  275b8				   -	       adc	mousecodey0
   5786  275b8				   -	       sta	mousecodey0
   5787  275b8				   -	       clc
   5788  275b8				   -	       adc	mousex0
   5789  275b8				   -	       tay		; save the target X
   5790  275b8				   -	       adc	mousey0	; average in the smoothly-trailing X
   5791  275b8				   -	       ror
   5792  275b8				   -	       sta	mousex0	; mousex0 now has the smoothly trailing X
   5793  275b8				   -	       sty	mousey0	; and mousey0 has the the target X
   5794  275b8				   -
   5795  275b8				   -			; check to see if the coordinate wrapped. If so, undo the averaging code.
   5796  275b8				   -			; A has mousex0, the smoothly trailing X
   5797  275b8				   -	       sbc	mousey0	; less the target X
   5798  275b8				   -	       bpl	skipabsolutedrive0
   5799  275b8				   -	       eor	#$ff
   5800  275b8				   -skipabsolutedrive0
   5801  275b8				   -	       cmp	#64	; just an unreasonably large change
   5802  275b8				   -	       bcc	skipdrivewrapfix0
   5803  275b8				   -	       sty	mousex0	; if X wrapped, we catch the trailing X up to the target X
   5804  275b8				   -skipdrivewrapfix0
   5805  275b8				   -
   5806  275b8				   -			; get rid of the tweening if the distance travelled was very small
   5807  275b8				   -	       lda	mousexdelta
   5808  275b8				   -	       cmp	port0resolution
   5809  275b8				   -	       bcs	skipbetweenfix0
   5810  275b8				   -	       lda	mousex0
   5811  275b8				   -	       sta	mousey0
   5812  275b8				   -skipbetweenfix0
   5813  275b8				   -
   5814  275b8				   -drivingboostreductioncheck0
   5815  275b8				   -			; The below code amounts to mousecodey0=mousecodey0-(mousecodey0/8)
   5816  275b8				   -			; +ve mousecodey0 is converted to -ve to do the calculation, and then
   5817  275b8				   -			; negated again because truncation during BCD math results in 
   5818  275b8				   -			; differing magnitudes, depending if the value is +ve or -ve.
   5819  275b8				   -driving0fix
   5820  275b8				   -	       lax	mousecodey0
   5821  275b8				   -	       cmp	#$80
   5822  275b8				   -	       bcs	driving0skipnegate1
   5823  275b8				   -	       eor	#$FF
   5824  275b8				   -	       adc	#1
   5825  275b8				   -	       sta	mousecodey0
   5826  275b8				   -driving0skipnegate1
   5827  275b8				   -	       cmp	#$80
   5828  275b8				   -	       ror
   5829  275b8				   -	       cmp	#$80
   5830  275b8				   -	       ror
   5831  275b8				   -	       cmp	#$80
   5832  275b8				   -	       ror
   5833  275b8				   -	       sta	inttemp1
   5834  275b8				   -	       lda	mousecodey0
   5835  275b8				   -	       sec
   5836  275b8				   -	       sbc	inttemp1
   5837  275b8				   -	       cpx	#$80
   5838  275b8				   -	       bcs	driving0skipnegate2
   5839  275b8				   -	       eor	#$FF
   5840  275b8				   -	       adc	#1
   5841  275b8				   -driving0skipnegate2
   5842  275b8				   -	       sta	mousecodey0
   5843  275b8				   -drivingboostdone0
   5844  275b8				   -	       endif		; DRIVINGBOOST
   5845  275b8				   -
   5846  275b8				   -	       jmp	LLRET0
   5847  275b8				   -
   5848  275b8					       endif		; MOUSE0SUPPORT
   5849  275b8
   5850  275b8				    mouse1update
   5851  275b8				   -	       ifconst	MOUSE1SUPPORT
   5852  275b8				   -
   5853  275b8				   -mousetableselect =	inttemp2
   5854  275b8				   -mousexdelta =	inttemp3
   5855  275b8				   -mouseydelta =	inttemp4
   5856  275b8				   -lastSWCHA  =	inttemp6
   5857  275b8				   -
   5858  275b8				   -			; 0000YyXx st mouse
   5859  275b8				   -			; 0000xyXY amiga mouse
   5860  275b8				   -
   5861  275b8				   -	       lda	#$ff
   5862  275b8				   -	       sta	lastSWCHA
   5863  275b8				   -
   5864  275b8				   -	       ldy	port1control
   5865  275b8				   -
   5866  275b8				   -	       lda	#%00010000
   5867  275b8				   -	       cpy	#9	; AMIGA?
   5868  275b8				   -	       bne	skipamigabitsfix1
   5869  275b8				   -	       lda	#0
   5870  275b8				   -skipamigabitsfix1
   5871  275b8				   -	       sta	mousetableselect
   5872  275b8				   -	       ifconst	DRIVINGBOOST
   5873  275b8				   -	       cpy	#6	; DRIVING?
   5874  275b8				   -	       bne	skipdriving1setup
   5875  275b8				   -			; swap mousex1 and mousey1. mousex seen by the 7800basic program
   5876  275b8				   -			; trails the actual mousex1, so we can smoothly interpolate toward
   5877  275b8				   -			; the actual position. This actual position is stored in mousey1 
   5878  275b8				   -			; after the driver has run.
   5879  275b8				   -	       ldx	mousex1
   5880  275b8				   -	       lda	mousey1
   5881  275b8				   -	       stx	mousey1
   5882  275b8				   -	       sta	mousex1
   5883  275b8				   -skipdriving1setup
   5884  275b8				   -	       endif		; DRIVINGBOOST
   5885  275b8				   -
   5886  275b8				   -	       lda	#0
   5887  275b8				   -	       sta	mousexdelta
   5888  275b8				   -	       sta	mouseydelta
   5889  275b8				   -
   5890  275b8				   -	       ifnconst	MOUSETIME
   5891  275b8				   -	       ifnconst	MOUSEXONLY
   5892  275b8				   -	       lda	#180	; minimum for x+y
   5893  275b8				   -	       else
   5894  275b8				   -	       lda	#100	; minimum for just x
   5895  275b8				   -	       endif
   5896  275b8				   -	       else
   5897  275b8				   -	       lda	#MOUSETIME
   5898  275b8				   -	       endif
   5899  275b8				   -	       jsr	SETTIM64T	; INTIM is in Y
   5900  275b8				   -
   5901  275b8				   -mouse1updateloop
   5902  275b8				   -	       lda	SWCHA
   5903  275b8				   -	       and	#%00001111
   5904  275b8				   -	       cmp	lastSWCHA
   5905  275b8				   -	       beq	mouse1loopcondition
   5906  275b8				   -	       sta	lastSWCHA
   5907  275b8				   -
   5908  275b8				   -	       ora	mousetableselect	; atari/amiga decoding table selection
   5909  275b8				   -
   5910  275b8				   -			; st mice encode on different bits/joystick-lines than amiga mice...
   5911  275b8				   -			; 0000YyXx st mouse
   5912  275b8				   -			; 0000xyXY amiga mouse
   5913  275b8				   -			; ...so can shuffle the amiga bits to reuse the st driver.
   5914  275b8				   -	       tay
   5915  275b8				   -	       lax	amigatoataribits,y
   5916  275b8				   -
   5917  275b8				   -	       ifnconst	MOUSEXONLY
   5918  275b8				   -			; first the Y...
   5919  275b8				   -	       and	#%00001100
   5920  275b8				   -	       ora	mousecodey1
   5921  275b8				   -	       tay
   5922  275b8				   -	       lda	rotationalcompare,y
   5923  275b8				   -	       clc
   5924  275b8				   -	       adc	mouseydelta
   5925  275b8				   -	       sta	mouseydelta
   5926  275b8				   -	       tya
   5927  275b8				   -	       lsr
   5928  275b8				   -	       lsr
   5929  275b8				   -	       sta	mousecodey1
   5930  275b8				   -	       txa
   5931  275b8				   -			; ...then the X...
   5932  275b8				   -	       and	#%00000011
   5933  275b8				   -	       tax
   5934  275b8				   -	       endif		; !MOUSEXONLY
   5935  275b8				   -
   5936  275b8				   -	       asl
   5937  275b8				   -	       asl
   5938  275b8				   -	       ora	mousecodex1
   5939  275b8				   -	       tay
   5940  275b8				   -	       lda	rotationalcompare,y
   5941  275b8				   -	       adc	mousexdelta	; carry was clear by previous ASL
   5942  275b8				   -	       sta	mousexdelta
   5943  275b8				   -	       stx	mousecodex1
   5944  275b8				   -mouse1loopcondition
   5945  275b8				   -	       lda	TIMINT
   5946  275b8				   -	       bpl	mouse1updateloop
   5947  275b8				   -
   5948  275b8				   -			; *** adapt to selected device resolution. 
   5949  275b8				   -	       ldx	port1control
   5950  275b8				   -
   5951  275b8				   -	       ifconst	PRECISIONMOUSING
   5952  275b8				   -	       ldy	port1resolution
   5953  275b8				   -	       bne	mouse1halveddone
   5954  275b8				   -	       cpx	#6	; half-resolution is no good for driving wheels
   5955  275b8				   -	       beq	mouse1halveddone
   5956  275b8				   -			; resolution=0 is half mouse resolution, necessary for precision 
   5957  275b8				   -			; mousing on a 160x240 screen with a 1000 dpi mouse.
   5958  275b8				   -
   5959  275b8				   -	       lda	mousexdelta
   5960  275b8				   -	       cmp	#$80
   5961  275b8				   -	       ror		; do a signed divide by 2.
   5962  275b8				   -	       clc
   5963  275b8				   -	       adc	mousex1
   5964  275b8				   -	       sta	mousex1
   5965  275b8				   -	       ifnconst	MOUSEXONLY
   5966  275b8				   -	       lda	mouseydelta
   5967  275b8				   -	       clc
   5968  275b8				   -	       adc	mousey1
   5969  275b8				   -	       sta	mousey1
   5970  275b8				   -	       endif
   5971  275b8				   -			; at half resolution we just exit after updating x and y
   5972  275b8				   -	       jmp	LLRET1
   5973  275b8				   -mouse1halveddone
   5974  275b8				   -	       endif		; PRECISIONMOUSING
   5975  275b8				   -
   5976  275b8				   -	       ifnconst	MOUSEXONLY
   5977  275b8				   -	       asl	mouseydelta	; *2 because Y resolution is finer
   5978  275b8				   -	       ldy	port1resolution
   5979  275b8				   -	       dey
   5980  275b8				   -	       lda	#0
   5981  275b8				   -mousey1resolutionfix
   5982  275b8				   -	       clc
   5983  275b8				   -	       adc	mouseydelta
   5984  275b8				   -	       dey
   5985  275b8				   -	       bpl	mousey1resolutionfix
   5986  275b8				   -	       clc
   5987  275b8				   -	       adc	mousey1
   5988  275b8				   -	       sta	mousey1
   5989  275b8				   -	       endif		; MOUSEXONLY
   5990  275b8				   -
   5991  275b8				   -	       ldy	port1resolution
   5992  275b8				   -	       dey
   5993  275b8				   -	       lda	#0
   5994  275b8				   -mousex1resolutionfix
   5995  275b8				   -	       clc
   5996  275b8				   -	       adc	mousexdelta
   5997  275b8				   -	       dey
   5998  275b8				   -	       bpl	mousex1resolutionfix
   5999  275b8				   -	       ifnconst	DRIVINGBOOST
   6000  275b8				   -	       clc
   6001  275b8				   -	       adc	mousex1
   6002  275b8				   -	       sta	mousex1
   6003  275b8				   -	       else
   6004  275b8				   -	       cpx	#6
   6005  275b8				   -	       beq	carryonmouse1boost
   6006  275b8				   -	       clc
   6007  275b8				   -	       adc	mousex1
   6008  275b8				   -	       sta	mousex1
   6009  275b8				   -	       jmp	LLRET1
   6010  275b8				   -carryonmouse1boost
   6011  275b8				   -	       sta	mousexdelta
   6012  275b8				   -	       clc
   6013  275b8				   -	       adc	mousecodey1
   6014  275b8				   -	       sta	mousecodey1
   6015  275b8				   -	       clc
   6016  275b8				   -	       adc	mousex1
   6017  275b8				   -	       tay		; save the target X
   6018  275b8				   -	       adc	mousey1	; average in the smoothly-trailing X
   6019  275b8				   -	       ror
   6020  275b8				   -	       sta	mousex1	; mousex0 now has the smoothly trailing X
   6021  275b8				   -	       sty	mousey1	; and mousey0 has the the target X
   6022  275b8				   -
   6023  275b8				   -			; check to see if the coordinate wrapped. If so, undo the averaging code.
   6024  275b8				   -			; A has mousex1, the smoothly trailing X
   6025  275b8				   -	       sbc	mousey1	; less the target X
   6026  275b8				   -	       bpl	skipabsolutedrive1
   6027  275b8				   -	       eor	#$ff
   6028  275b8				   -skipabsolutedrive1
   6029  275b8				   -	       cmp	#64	; just an unreasonably large change
   6030  275b8				   -	       bcc	skipdrivewrapfix1
   6031  275b8				   -	       sty	mousex1	; if X wrapped, we catch the trailing X up to the target X
   6032  275b8				   -skipdrivewrapfix1
   6033  275b8				   -
   6034  275b8				   -			; get rid of the tweening if the distance travelled was very small
   6035  275b8				   -	       lda	mousexdelta
   6036  275b8				   -	       cmp	port1resolution
   6037  275b8				   -	       bcs	skipbetweenfix1
   6038  275b8				   -	       lda	mousex1
   6039  275b8				   -	       sta	mousey1
   6040  275b8				   -skipbetweenfix1
   6041  275b8				   -
   6042  275b8				   -drivingboostreductioncheck1
   6043  275b8				   -			; The below code amounts to mousecodey0=mousecodey0-(mousecodey0/8)
   6044  275b8				   -			; +ve mousecodey0 is converted to -ve to do the calculation, and then
   6045  275b8				   -			; negated again because truncation during BCD math results in 
   6046  275b8				   -			; differing magnitudes, depending if the value is +ve or -ve.
   6047  275b8				   -driving1fix
   6048  275b8				   -	       lax	mousecodey1
   6049  275b8				   -	       cmp	#$80
   6050  275b8				   -	       bcs	driving0skipnegate1
   6051  275b8				   -	       eor	#$FF
   6052  275b8				   -	       adc	#1
   6053  275b8				   -	       sta	mousecodey1
   6054  275b8				   -driving0skipnegate1
   6055  275b8				   -	       cmp	#$80
   6056  275b8				   -	       ror
   6057  275b8				   -	       cmp	#$80
   6058  275b8				   -	       ror
   6059  275b8				   -	       cmp	#$80
   6060  275b8				   -	       ror
   6061  275b8				   -	       sta	inttemp1
   6062  275b8				   -	       lda	mousecodey1
   6063  275b8				   -	       sec
   6064  275b8				   -	       sbc	inttemp1
   6065  275b8				   -	       cpx	#$80
   6066  275b8				   -	       bcs	driving1skipnegate2
   6067  275b8				   -	       eor	#$FF
   6068  275b8				   -	       adc	#1
   6069  275b8				   -driving1skipnegate2
   6070  275b8				   -	       sta	mousecodey1
   6071  275b8				   -drivingboostdone1
   6072  275b8				   -	       endif		; DRIVINGBOOST
   6073  275b8				   -
   6074  275b8				   -	       jmp	LLRET1
   6075  275b8				   -
   6076  275b8					       endif		; MOUSE1SUPPORT
   6077  275b8
   6078  275b8
   6079  275b8				    trakball0update
   6080  275b8				   -	       ifconst	TRAKBALL0SUPPORT
   6081  275b8				   -	       ifnconst	TRAKTIME
   6082  275b8				   -	       ifnconst	TRAKXONLY
   6083  275b8				   -	       lda	#180	; minimum for x+y
   6084  275b8				   -	       else		; !TRAKXONLY
   6085  275b8				   -	       lda	#100	; minimum for just x
   6086  275b8				   -	       endif		; !TRAKXONLY
   6087  275b8				   -	       else		; !TRAKTIME
   6088  275b8				   -	       lda	#TRAKTIME
   6089  275b8				   -	       endif		; !TRAKTIME
   6090  275b8				   -	       jsr	SETTIM64T	; INTIM is in Y
   6091  275b8				   -	       ldx	#0
   6092  275b8				   -	       ifnconst	TRAKXONLY
   6093  275b8				   -	       ldy	#0
   6094  275b8				   -	       endif		; TRAKXONLY
   6095  275b8				   -trakball0updateloop
   6096  275b8				   -	       lda	SWCHA
   6097  275b8				   -	       and	#%00110000
   6098  275b8				   -	       cmp	trakballcodex0
   6099  275b8				   -	       sta	trakballcodex0
   6100  275b8				   -	       beq	trakball0movementXdone
   6101  275b8				   -	       and	#%00010000
   6102  275b8				   -	       beq	trakball0negativeX
   6103  275b8				   -trakball0positiveX
   6104  275b8				   -			;(2 from beq)
   6105  275b8				   -	       inx		; 2
   6106  275b8				   -	       jmp	trakball0movementXdone	; 3
   6107  275b8				   -trakball0negativeX
   6108  275b8				   -			;(3 from beq)
   6109  275b8				   -	       dex		; 2
   6110  275b8				   -	       nop		; 2
   6111  275b8				   -trakball0movementXdone
   6112  275b8				   -
   6113  275b8				   -	       ifnconst	TRAKXONLY
   6114  275b8				   -	       lda	SWCHA
   6115  275b8				   -	       and	#%11000000
   6116  275b8				   -	       cmp	trakballcodey0
   6117  275b8				   -	       sta	trakballcodey0
   6118  275b8				   -	       beq	trakball0movementYdone
   6119  275b8				   -	       and	#%01000000
   6120  275b8				   -	       beq	trakball0negativeY
   6121  275b8				   -trakball0positiveY
   6122  275b8				   -			;(2 from beq)
   6123  275b8				   -	       iny		; 2
   6124  275b8				   -	       jmp	trakball0movementYdone	; 3
   6125  275b8				   -trakball0negativeY
   6126  275b8				   -			;(3 from beq)
   6127  275b8				   -	       dey		; 2
   6128  275b8				   -	       nop		; 2
   6129  275b8				   -trakball0movementYdone
   6130  275b8				   -	       endif		; !TRAKXONLY
   6131  275b8				   -
   6132  275b8				   -	       lda	TIMINT
   6133  275b8				   -	       bpl	trakball0updateloop
   6134  275b8				   -	       lda	#0
   6135  275b8				   -	       cpx	#0
   6136  275b8				   -	       beq	trakball0skipXadjust
   6137  275b8				   -	       clc
   6138  275b8				   -trakball0Xloop
   6139  275b8				   -	       adc	port0resolution
   6140  275b8				   -	       dex
   6141  275b8				   -	       bne	trakball0Xloop
   6142  275b8				   -	       clc
   6143  275b8				   -	       adc	trakballx0
   6144  275b8				   -	       sta	trakballx0
   6145  275b8				   -trakball0skipXadjust
   6146  275b8				   -	       ifnconst	TRAKXONLY
   6147  275b8				   -	       lda	#0
   6148  275b8				   -	       cpy	#0
   6149  275b8				   -	       beq	trakball0skipYadjust
   6150  275b8				   -	       clc
   6151  275b8				   -trakball0yloop
   6152  275b8				   -	       adc	port0resolution
   6153  275b8				   -	       dey
   6154  275b8				   -	       bne	trakball0yloop
   6155  275b8				   -	       clc
   6156  275b8				   -	       adc	trakbally0
   6157  275b8				   -	       sta	trakbally0
   6158  275b8				   -trakball0skipYadjust
   6159  275b8				   -	       endif		; !TRAKXONLY
   6160  275b8				   -
   6161  275b8				   -	       jmp	LLRET0
   6162  275b8					       endif
   6163  275b8
   6164  275b8
   6165  275b8
   6166  275b8				    trakball1update
   6167  275b8				   -	       ifconst	TRAKBALL1SUPPORT
   6168  275b8				   -	       ifnconst	TRAKTIME
   6169  275b8				   -	       ifnconst	TRAKXONLY
   6170  275b8				   -	       lda	#180	; minimum for x+y
   6171  275b8				   -	       else		; !TRAKXONLY
   6172  275b8				   -	       lda	#100	; minimum for just x
   6173  275b8				   -	       endif		; !TRAKXONLY
   6174  275b8				   -	       else		; !TRAKTIME
   6175  275b8				   -	       lda	#TRAKTIME
   6176  275b8				   -	       endif		; !TRAKTIME
   6177  275b8				   -	       jsr	SETTIM64T	; INTIM is in Y
   6178  275b8				   -	       ldx	#0
   6179  275b8				   -	       ifnconst	TRAKXONLY
   6180  275b8				   -	       ldy	#0
   6181  275b8				   -	       endif		; TRAKXONLY
   6182  275b8				   -trakball1updateloop
   6183  275b8				   -	       lda	SWCHA
   6184  275b8				   -	       and	#%00000011
   6185  275b8				   -	       cmp	trakballcodex1
   6186  275b8				   -	       sta	trakballcodex1
   6187  275b8				   -	       beq	trakball1movementXdone
   6188  275b8				   -	       and	#%00000001
   6189  275b8				   -	       beq	trakball1negativeX
   6190  275b8				   -trakball1positiveX
   6191  275b8				   -			;(2 from beq)
   6192  275b8				   -	       inx		; 2
   6193  275b8				   -	       jmp	trakball1movementXdone	; 3
   6194  275b8				   -trakball1negativeX
   6195  275b8				   -			;(3 from beq)
   6196  275b8				   -	       dex		; 2
   6197  275b8				   -	       nop		; 2
   6198  275b8				   -trakball1movementXdone
   6199  275b8				   -
   6200  275b8				   -	       ifnconst	TRAKXONLY
   6201  275b8				   -	       lda	SWCHA
   6202  275b8				   -	       and	#%00001100
   6203  275b8				   -	       cmp	trakballcodey1
   6204  275b8				   -	       sta	trakballcodey1
   6205  275b8				   -	       beq	trakball1movementYdone
   6206  275b8				   -	       and	#%00000100
   6207  275b8				   -	       beq	trakball1negativeY
   6208  275b8				   -trakball1positiveY
   6209  275b8				   -			;(2 from beq)
   6210  275b8				   -	       iny		; 2
   6211  275b8				   -	       jmp	trakball1movementYdone	; 3
   6212  275b8				   -trakball1negativeY
   6213  275b8				   -			;(3 from beq)
   6214  275b8				   -	       dey		; 2
   6215  275b8				   -	       nop		; 2
   6216  275b8				   -trakball1movementYdone
   6217  275b8				   -	       endif		; !TRAKXONLY
   6218  275b8				   -
   6219  275b8				   -	       lda	TIMINT
   6220  275b8				   -	       bpl	trakball1updateloop
   6221  275b8				   -	       lda	#0
   6222  275b8				   -	       cpx	#0
   6223  275b8				   -	       beq	trakball1skipXadjust
   6224  275b8				   -	       clc
   6225  275b8				   -trakball1Xloop
   6226  275b8				   -	       adc	port1resolution
   6227  275b8				   -	       dex
   6228  275b8				   -	       bne	trakball1Xloop
   6229  275b8				   -	       clc
   6230  275b8				   -	       adc	trakballx1
   6231  275b8				   -	       sta	trakballx1
   6232  275b8				   -trakball1skipXadjust
   6233  275b8				   -	       ifnconst	TRAKXONLY
   6234  275b8				   -	       lda	#0
   6235  275b8				   -	       cpy	#0
   6236  275b8				   -	       beq	trakball1skipYadjust
   6237  275b8				   -	       clc
   6238  275b8				   -trakball1yloop
   6239  275b8				   -	       adc	port1resolution
   6240  275b8				   -	       dey
   6241  275b8				   -	       bne	trakball1yloop
   6242  275b8				   -	       clc
   6243  275b8				   -	       adc	trakbally1
   6244  275b8				   -	       sta	trakbally1
   6245  275b8				   -trakball1skipYadjust
   6246  275b8				   -	       endif		; !TRAKXONLY
   6247  275b8				   -
   6248  275b8				   -	       jmp	LLRET1
   6249  275b8					       endif
   6250  275b8
   6251  275b8
   6252  275b8				    paddleport0update
   6253  275b8				   -	       ifconst	PADDLE0SUPPORT
   6254  275b8				   -	       lda	#6
   6255  275b8				   -	       sta	VBLANK	; start charging the paddle caps
   6256  275b8				   -	       lda	#0	; use PADDLE timing
   6257  275b8				   -	       jsr	SETTIM64T	; INTIM is in Y
   6258  275b8				   -
   6259  275b8				   -paddleport0updateloop
   6260  275b8				   -	       lda	INPT0
   6261  275b8				   -	       bmi	skippaddle0setposition
   6262  275b8				   -	       sty	paddleposition0
   6263  275b8				   -skippaddle0setposition
   6264  275b8				   -	       ifconst	TWOPADDLESUPPORT
   6265  275b8				   -	       lda	INPT1
   6266  275b8				   -	       bmi	skippaddle1setposition
   6267  275b8				   -	       sty	paddleposition1
   6268  275b8				   -skippaddle1setposition
   6269  275b8				   -	       endif
   6270  275b8				   -	       ldy	INTIM
   6271  275b8				   -	       cpy	#TIMEOFFSET
   6272  275b8				   -	       bcs	paddleport0updateloop
   6273  275b8				   -
   6274  275b8				   -	       lda	#%10000110
   6275  275b8				   -	       sta	VBLANK	; dump paddles to ground... this may not be great for genesis controllers
   6276  275b8				   -	       sec
   6277  275b8				   -	       lda	paddleposition0
   6278  275b8				   -	       sbc	#TIMEOFFSET
   6279  275b8				   -	       ifconst	PADDLESCALEX2
   6280  275b8				   -	       asl
   6281  275b8				   -	       endif
   6282  275b8				   -
   6283  275b8				   -	       ifnconst	PADDLESMOOTHINGOFF
   6284  275b8				   -	       clc
   6285  275b8				   -	       adc	paddleprevious0
   6286  275b8				   -	       ror
   6287  275b8				   -	       sta	paddleprevious0
   6288  275b8				   -	       endif
   6289  275b8				   -
   6290  275b8				   -	       sta	paddleposition0
   6291  275b8				   -
   6292  275b8				   -	       ifconst	TWOPADDLESUPPORT
   6293  275b8				   -	       sec
   6294  275b8				   -	       lda	paddleposition1
   6295  275b8				   -	       sbc	#TIMEOFFSET
   6296  275b8				   -	       ifconst	PADDLESCALEX2
   6297  275b8				   -	       asl
   6298  275b8				   -	       endif
   6299  275b8				   -
   6300  275b8				   -	       ifnconst	PADDLESMOOTHINGOFF
   6301  275b8				   -	       clc
   6302  275b8				   -	       adc	paddleprevious1
   6303  275b8				   -	       ror
   6304  275b8				   -	       sta	paddleprevious1
   6305  275b8				   -	       endif
   6306  275b8				   -	       sta	paddleposition1
   6307  275b8				   -	       endif		; TWOPADDLESUPPORT
   6308  275b8				   -
   6309  275b8				   -	       jmp	LLRET0
   6310  275b8					       endif
   6311  275b8
   6312  275b8				    paddleport1update
   6313  275b8				   -	       ifconst	PADDLE1SUPPORT
   6314  275b8				   -	       lda	#6
   6315  275b8				   -	       sta	VBLANK	; start charging the paddle caps
   6316  275b8				   -
   6317  275b8				   -	       lda	#0	; use PADDLE timing
   6318  275b8				   -	       jsr	SETTIM64T	; INTIM is in Y
   6319  275b8				   -
   6320  275b8				   -paddleport1updateloop
   6321  275b8				   -	       lda	INPT2
   6322  275b8				   -	       bmi	skippaddle2setposition
   6323  275b8				   -	       sty	paddleposition2
   6324  275b8				   -skippaddle2setposition
   6325  275b8				   -	       ifconst	TWOPADDLESUPPORT
   6326  275b8				   -	       lda	INPT3
   6327  275b8				   -	       bmi	skippaddle3setposition
   6328  275b8				   -	       sty	paddleposition3
   6329  275b8				   -skippaddle3setposition
   6330  275b8				   -	       endif
   6331  275b8				   -	       ldy	INTIM
   6332  275b8				   -	       cpy	#TIMEOFFSET
   6333  275b8				   -	       bcs	paddleport1updateloop
   6334  275b8				   -
   6335  275b8				   -	       lda	#%10000110
   6336  275b8				   -	       sta	VBLANK	; dump paddles to ground... this may not be great for genesis controllers
   6337  275b8				   -	       sec
   6338  275b8				   -	       lda	paddleposition2
   6339  275b8				   -	       sbc	#TIMEOFFSET
   6340  275b8				   -	       ifconst	PADDLESCALEX2
   6341  275b8				   -	       asl
   6342  275b8				   -	       endif
   6343  275b8				   -
   6344  275b8				   -	       ifnconst	PADDLESMOOTHINGOFF
   6345  275b8				   -	       clc
   6346  275b8				   -	       adc	paddleprevious2
   6347  275b8				   -	       ror
   6348  275b8				   -	       sta	paddleprevious2
   6349  275b8				   -	       endif
   6350  275b8				   -
   6351  275b8				   -	       sta	paddleposition2
   6352  275b8				   -
   6353  275b8				   -	       ifconst	TWOPADDLESUPPORT
   6354  275b8				   -	       sec
   6355  275b8				   -	       lda	paddleposition3
   6356  275b8				   -	       sbc	#TIMEOFFSET
   6357  275b8				   -	       ifconst	PADDLESCALEX2
   6358  275b8				   -	       asl
   6359  275b8				   -	       endif
   6360  275b8				   -
   6361  275b8				   -	       ifnconst	PADDLESMOOTHINGOFF
   6362  275b8				   -	       clc
   6363  275b8				   -	       adc	paddleprevious3
   6364  275b8				   -	       ror
   6365  275b8				   -	       sta	paddleprevious3
   6366  275b8				   -	       endif
   6367  275b8				   -	       sta	paddleposition3
   6368  275b8				   -	       endif		; TWOPADDLESUPPORT
   6369  275b8				   -
   6370  275b8				   -	       jmp	LLRET1
   6371  275b8					       endif
   6372  275b8
   6373  275b8
   6374  275b8				    paddlebuttonhandler 		; outside of conditional, for button-handler LUT
   6375  275b8				   -	       ifconst	PADDLESUPPORT
   6376  275b8				   -			; x=0|1 for port, rather than paddle #. 
   6377  275b8				   -			; Only the first paddle button will integrate into "joy0fire" testing. If the
   6378  275b8				   -			; game wants to support 2 paddles, up to the game to instead test the 
   6379  275b8				   -			; joystick right+left directions instead.
   6380  275b8				   -	       lda	SWCHA	; top of nibble is first paddle button
   6381  275b8				   -	       cpx	#0	; port 0?
   6382  275b8				   -	       beq	skippaddleport2shift
   6383  275b8				   -	       asl		; shift second port to upper nibble
   6384  275b8				   -	       asl
   6385  275b8				   -	       asl
   6386  275b8				   -	       asl
   6387  275b8				   -skippaddleport2shift
   6388  275b8				   -	       and	#%10000000
   6389  275b8				   -	       eor	#%10000000	; invert
   6390  275b8				   -	       sta	sINPT1,x
   6391  275b8				   -	       jmp	buttonreadloopreturn
   6392  275b8					       endif		; PADDLESUPPORT
   6393  275b8
   6394  275b8				    mousebuttonhandler		; outside of conditional, for button-handler LUT
   6395  275b8				   -	       ifconst	MOUSESUPPORT
   6396  275b8				   -			; stick the mouse buttons in the correct shadow register...
   6397  275b8				   -	       txa
   6398  275b8				   -	       asl
   6399  275b8				   -	       tay		; y=x*2
   6400  275b8				   -	       lda	INPT4,x
   6401  275b8				   -	       eor	#%10000000
   6402  275b8				   -	       lsr
   6403  275b8				   -	       sta	sINPT1,x
   6404  275b8				   -
   6405  275b8				   -	       lda	INPT1,y
   6406  275b8				   -	       and	#%10000000
   6407  275b8				   -	       eor	#%10000000
   6408  275b8				   -	       ora	sINPT1,x
   6409  275b8				   -	       sta	sINPT1,x
   6410  275b8				   -	       jmp	buttonreadloopreturn
   6411  275b8					       endif		; MOUSESUPPORT
   6412  275b8
   6413  275b8				   -	       ifconst	KEYPADSUPPORT
   6414  275b8				   -			; ** select keypad rows 0 to 3 over 4 frames...
   6415  275b8				   -keypadrowselect
   6416  275b8				   -	       inc	keypadcounter
   6417  275b8				   -	       ldy	#0
   6418  275b8				   -	       lda	port0control
   6419  275b8				   -	       cmp	#7
   6420  275b8				   -	       bne	skipport0val
   6421  275b8				   -	       iny		; y=y+1
   6422  275b8				   -skipport0val
   6423  275b8				   -	       lda	port1control
   6424  275b8				   -	       cmp	#7
   6425  275b8				   -	       bne	skipport1val
   6426  275b8				   -	       iny
   6427  275b8				   -	       iny		; y=y+2
   6428  275b8				   -skipport1val
   6429  275b8				   -	       cpy	#0
   6430  275b8				   -	       beq	exitkeypadrowselect
   6431  275b8				   -	       lda	keyrowdirectionmask,y
   6432  275b8				   -	       sta	CTLSWA
   6433  275b8				   -	       tya
   6434  275b8				   -	       asl
   6435  275b8				   -	       asl
   6436  275b8				   -	       sta	inttemp1
   6437  275b8				   -	       lda	keypadcounter
   6438  275b8				   -	       and	#3
   6439  275b8				   -	       ora	inttemp1
   6440  275b8				   -	       tax
   6441  275b8				   -	       lda	keyrowselectvalue,x
   6442  275b8				   -	       sta	SWCHA
   6443  275b8				   -exitkeypadrowselect
   6444  275b8				   -	       rts
   6445  275b8				   -
   6446  275b8				   -keyrowdirectionmask
   6447  275b8				   -	       .byte	#%00000000	; 0 : port0=input port1=input
   6448  275b8				   -	       .byte	#%11110000	; 1 : port0=output port1=input
   6449  275b8				   -	       .byte	#%00001111	; 2 : port0=input port1=output
   6450  275b8				   -	       .byte	#%11111111	; 3 : port0=output port1=output
   6451  275b8				   -
   6452  275b8				   -keyrowselectvalue
   6453  275b8				   -	       .byte	#%00000000, #%00000000, #%00000000, #%00000000	; no row selected, all pins high, always
   6454  275b8				   -	       .byte	#%11100000, #%11010000, #%10110000, #%01110000	; p0 keypad in
   6455  275b8				   -	       .byte	#%00001110, #%00001101, #%00001011, #%00000111	; p1 keypad in
   6456  275b8				   -	       .byte	#%11101110, #%11011101, #%10111011, #%01110111	; p0+p1 keypads in
   6457  275b8					       endif		; KEYPADSUPPORT
   6458  275b8
   6459  275b8				   -	       ifconst	KEYPADSUPPORT
   6460  275b8				   -			; TODO - split into compile-time KEYPAD0SUPPORT and KEYPAD1SUPPORT
   6461  275b8				   -keypadcolumnread
   6462  275b8				   -	       lda	port0control
   6463  275b8				   -	       cmp	#7
   6464  275b8				   -	       bne	skipkeypadcolumnread0
   6465  275b8				   -	       lda	keypadcounter
   6466  275b8				   -	       and	#3
   6467  275b8				   -	       asl		; x2 because keypad variables are interleaved
   6468  275b8				   -	       tax
   6469  275b8				   -	       lda	#0
   6470  275b8				   -	       sta	keypadmatrix0a,x
   6471  275b8				   -	       lda	INPT0
   6472  275b8				   -	       cmp	#$80
   6473  275b8				   -	       rol	keypadmatrix0a,x
   6474  275b8				   -	       lda	INPT1
   6475  275b8				   -	       cmp	#$80
   6476  275b8				   -	       rol	keypadmatrix0a,x
   6477  275b8				   -	       lda	INPT4
   6478  275b8				   -	       cmp	#$80
   6479  275b8				   -	       rol	keypadmatrix0a,x
   6480  275b8				   -	       lda	keypadmatrix0a,x
   6481  275b8				   -	       eor	#%00000111
   6482  275b8				   -	       sta	keypadmatrix0a,x
   6483  275b8				   -skipkeypadcolumnread0
   6484  275b8				   -
   6485  275b8				   -	       lda	port1control
   6486  275b8				   -	       cmp	#7
   6487  275b8				   -	       bne	skipkeypadcolumnread1
   6488  275b8				   -	       lda	keypadcounter
   6489  275b8				   -	       and	#3
   6490  275b8				   -	       asl		; x2 because keypad variables are interleaved
   6491  275b8				   -	       tax
   6492  275b8				   -	       lda	#0
   6493  275b8				   -	       sta	keypadmatrix1a,x
   6494  275b8				   -	       rol	keypadmatrix1a,x
   6495  275b8				   -	       lda	INPT2
   6496  275b8				   -	       cmp	#$80
   6497  275b8				   -	       rol	keypadmatrix1a,x
   6498  275b8				   -	       lda	INPT3
   6499  275b8				   -	       cmp	#$80
   6500  275b8				   -	       rol	keypadmatrix1a,x
   6501  275b8				   -	       lda	INPT5
   6502  275b8				   -	       cmp	#$80
   6503  275b8				   -	       rol	keypadmatrix1a,x
   6504  275b8				   -	       lda	keypadmatrix1a,x
   6505  275b8				   -	       eor	#%00000111
   6506  275b8				   -	       sta	keypadmatrix1a,x
   6507  275b8				   -skipkeypadcolumnread1
   6508  275b8				   -	       rts
   6509  275b8					       endif		; KEYPADSUPPORT
   6510  275b8
   6511  275b8				    setportforinput
   6512  275b8			ad 81 02	       lda	CTLSWA
   6513  275bb			3d d7 f1	       and	SWCHA_DIRMASK,x
   6514  275be			8d 81 02	       sta	CTLSWA
   6515  275c1			60		       rts
   6516  275c2
   6517  275c2				    setonebuttonmode
   6518  275c2			a9 06		       lda	#6	; in case we're in unlocked-bios mode
   6519  275c4			85 01		       sta	VBLANK	; if we were on paddles, the line is grounded out.
   6520  275c6			a9 14		       lda	#$14
   6521  275c8			8d 83 02	       sta	CTLSWB
   6522  275cb			ad 82 02	       lda	SWCHB
   6523  275ce			1d e8 f5	       ora	thisjoy2buttonbit,x	; disable: write 1 to the 2-button bit
   6524  275d1			8d 82 02	       sta	SWCHB
   6525  275d4			60		       rts
   6526  275d5
   6527  275d5				    settwobuttonmode
   6528  275d5			a9 06		       lda	#6	; in case we're in unlocked-bios mode
   6529  275d7			85 01		       sta	VBLANK	; if we were on paddles, the line is grounded out.
   6530  275d9			a9 14		       lda	#$14
   6531  275db			8d 83 02	       sta	CTLSWB
   6532  275de			ad 82 02	       lda	SWCHB
   6533  275e1			3d e9 f5	       and	thisjoy2buttonbit+1,x	; enable: write 0 to the 2-button bit
   6534  275e4			8d 82 02	       sta	SWCHB
   6535  275e7			60		       rts
   6536  275e8
   6537  275e8				    thisjoy2buttonbit
   6538  275e8							; p0	p1   p0
   6539  275e8			04 10 04	       .byte.b	$04, $10, $04
   6540  275eb
   6541  275eb							; Provided under the CC0 license. See the included LICENSE.txt for details.
   6542  275eb
   6543  275eb				    START
   6544  275eb				    start
   6545  275eb
   6546  275eb							;******** more or less the Atari recommended startup procedure
   6547  275eb
   6548  275eb			78		       sei
   6549  275ec			d8		       cld
   6550  275ed
   6551  275ed					       ifnconst	NOTIALOCK
   6552  275ed			a9 07		       lda	#$07
   6553  275ef				   -	       else
   6554  275ef				   -	       lda	#$06
   6555  275ef					       endif
   6556  275ef			85 01		       sta	INPTCTRL	;lock 7800 into 7800 mode
   6557  275f1			a9 7f		       lda	#$7F
   6558  275f3			85 3c		       sta	CTRL	;disable DMA
   6559  275f5			a9 00		       lda	#$00
   6560  275f7			85 38		       sta	OFFSET
   6561  275f9					       ifnconst	NOTIALOCK
   6562  275f9			85 01		       sta	INPTCTRL
   6563  275fb			85 20		       sta	BACKGRND	; black default, in case a flash cart is using something else
   6564  275fd					       endif
   6565  275fd			a2 ff		       ldx	#$FF
   6566  275ff			9a		       txs
   6567  27600
   6568  27600							;************** Clear Memory
   6569  27600
   6570  27600							; ** Clear 1800-27FF, pg0+pg1 memory.
   6571  27600				    ClearMemPages
   6572  27600			a9 00		       lda	#0
   6573  27602			a8		       tay		; y=0
   6574  27603			85 80		       sta	$80
   6575  27605			a2 18		       ldx	#$18
   6576  27607				    ClearMemPagesLoop
   6577  27607			86 81		       stx	$81	; needed for when we step on ZP memory
   6578  27609			91 80		       sta	($80),y	;Store data
   6579  2760b			c8		       iny		;Next byte
   6580  2760c			d0 f9		       bne	ClearMemPagesLoop
   6581  2760e			e8		       inx
   6582  2760f			e0 28		       cpx	#$28
   6583  27611			d0 f4		       bne	ClearMemPagesLoop
   6584  27613			85 81		       sta	$81
   6585  27615
   6586  27615							;seed random number with hopefully-random timer value
   6587  27615			a9 01		       lda	#1
   6588  27617			0d 84 02	       ora	INTIM
   6589  2761a			85 40		       sta	rand
   6590  2761c
   6591  2761c							; detect the console type...
   6592  2761c				    pndetectvblankstart
   6593  2761c			a5 28		       lda	MSTAT
   6594  2761e			10 fc		       bpl	pndetectvblankstart	; if we're not in VBLANK, wait for it to start 
   6595  27620				    pndetectvblankover
   6596  27620			a5 28		       lda	MSTAT
   6597  27622			30 fc		       bmi	pndetectvblankover	; then wait for it to be over
   6598  27624			a0 00		       ldy	#$00
   6599  27626			a2 00		       ldx	#$00
   6600  27628				    pndetectvblankhappening
   6601  27628			a5 28		       lda	MSTAT
   6602  2762a			30 07		       bmi	pndetectinvblank	; if VBLANK starts, exit our counting loop 
   6603  2762c			85 24		       sta	WSYNC
   6604  2762e			85 24		       sta	WSYNC
   6605  27630			e8		       inx
   6606  27631			d0 f5		       bne	pndetectvblankhappening
   6607  27633				    pndetectinvblank
   6608  27633			e0 7d		       cpx	#125
   6609  27635			90 02		       bcc	pndetecispal
   6610  27637			a0 01		       ldy	#$01
   6611  27639				    pndetecispal
   6612  27639			8c 09 21	       sty	paldetected
   6613  2763c
   6614  2763c			20 a1 f4	       jsr	createallgamedlls
   6615  2763f
   6616  2763f			a9 18		       lda	#>DLLMEM
   6617  27641			85 2c		       sta	DPPH
   6618  27643			a9 00		       lda	#<DLLMEM
   6619  27645			85 30		       sta	DPPL
   6620  27647
   6621  27647				   -	       ifconst	pokeysupport
   6622  27647				   -			; pokey support is compiled in, so try to detect it...
   6623  27647				   -	       jsr	detectpokeylocation
   6624  27647					       endif
   6625  27647
   6626  27647			a9 01		       lda	#1	; default for port 0 and 1 is a regular joystick
   6627  27649			8d ba 01	       sta	port0control
   6628  2764c			8d bb 01	       sta	port1control
   6629  2764f
   6630  2764f							;Setup port A to read mode
   6631  2764f							;lda #$00
   6632  2764f							;sta SWCHA
   6633  2764f							;sta CTLSWA
   6634  2764f
   6635  2764f				   -	       ifconst	HSSUPPORT
   6636  2764f				   -	       ifconst	bankswitchmode
   6637  2764f				   -	       ifconst	included.hiscore.asm.bank
   6638  2764f				   -	       ifconst	MCPDEVCART
   6639  2764f				   -	       lda	#($18 | included.hiscore.asm.bank)
   6640  2764f				   -	       ifconst	dumpbankswitch
   6641  2764f				   -	       sta	dumpbankswitch
   6642  2764f				   -	       endif
   6643  2764f				   -	       sta	$3000
   6644  2764f				   -	       else
   6645  2764f				   -	       lda	#(included.hiscore.asm.bank)
   6646  2764f				   -	       ifconst	dumpbankswitch
   6647  2764f				   -	       sta	dumpbankswitch
   6648  2764f				   -	       endif
   6649  2764f				   -	       sta	$8000
   6650  2764f				   -	       endif
   6651  2764f				   -	       endif		; included.hiscore.asm.bank
   6652  2764f				   -	       endif		; bankswitchmode
   6653  2764f				   -			; try to detect HSC
   6654  2764f				   -	       jsr	detecthsc
   6655  2764f				   -	       and	#1
   6656  2764f				   -	       sta	hsdevice
   6657  2764f				   -skipHSCdetect
   6658  2764f				   -			; try to detect AtariVox eeprom
   6659  2764f				   -	       jsr	detectatarivoxeeprom
   6660  2764f				   -	       and	#2
   6661  2764f				   -	       ora	hsdevice
   6662  2764f				   -	       cmp	#3
   6663  2764f				   -	       bne	storeAinhsdevice
   6664  2764f				   -			; For now, we tie break by giving HSC priority over AtariVox.
   6665  2764f				   -			; Later we should check each device's priority byte if set, instead, 
   6666  2764f				   -	       lda	#2
   6667  2764f				   -storeAinhsdevice
   6668  2764f				   -	       sta	hsdevice
   6669  2764f				   -	       lda	#$ff
   6670  2764f				   -	       sta	hsdifficulty
   6671  2764f				   -	       sta	hsgameslot
   6672  2764f				   -	       sta	hsnewscoreline
   6673  2764f					       endif		; HSSUPPORT
   6674  2764f
   6675  2764f				   -	       ifconst	AVOXVOICE
   6676  2764f				   -	       jsr	silenceavoxvoice
   6677  2764f					       endif
   6678  2764f
   6679  2764f				   -	       ifconst	RMT
   6680  2764f				   -	       ifconst	RMTVOLUME
   6681  2764f				   -	       lda	#$F0	; default to full RMT volume
   6682  2764f				   -	       sta	rmtvolume
   6683  2764f				   -	       ifconst	TIAVOLUME
   6684  2764f				   -	       sta	tiavolume
   6685  2764f				   -	       endif		; TIAVOLUME
   6686  2764f				   -	       endif		; RMTVOLUME
   6687  2764f					       else		; !RMT
   6688  2764f				   -	       ifconst	TIAVOLUME
   6689  2764f				   -	       lda	#$F0	; default to full TIA volume
   6690  2764f				   -	       sta	tiavolume
   6691  2764f					       endif		; TIAVOLUME
   6692  2764f					       endif		; RMT
   6693  2764f
   6694  2764f					       ifconst	bankswitchmode
   6695  2764f							; we need to switch to the first bank as a default. this needs to
   6696  2764f							; happen before DMA, in case there's a topscreenroutine in bank 0
   6697  2764f				   -	       ifconst	MCPDEVCART
   6698  2764f				   -	       lda	#$18	; xxx11nnn - switch to bank 0
   6699  2764f				   -	       ifconst	dumpbankswitch
   6700  2764f				   -	       sta	dumpbankswitch
   6701  2764f				   -	       endif
   6702  2764f				   -	       sta	$3000
   6703  2764f					       else
   6704  2764f			a9 00		       lda	#0
   6705  27651				   -	       ifconst	dumpbankswitch
   6706  27651				   -	       sta	dumpbankswitch
   6707  27651					       endif
   6708  27651			8d 00 80	       sta	$8000
   6709  27654					       endif
   6710  27654					       endif
   6711  27654
   6712  27654							; CTRL 76543210
   6713  27654							; 7 colorburst kill
   6714  27654							; 6,5 dma ctrl 2=normal DMA, 3=no DMA
   6715  27654							; 4 character width 1=2 byte chars, 0=1 byte chars
   6716  27654							; 3 border control 0=background color border, 1=black border
   6717  27654							; 2 kangaroo mode 0=transparency, 1=kangaroo
   6718  27654							; 1,0 read mode 0=160x2/160x4 1=N/A 2=320B/320D 3=320A/320C
   6719  27654
   6720  27654				   -	       ifconst	DOUBLEWIDE
   6721  27654				   -	       lda	#%01010000	;Enable DMA, mode=160x2/160x4, 2x character width
   6722  27654					       else
   6723  27654			a9 40		       lda	#%01000000	;Enable DMA, mode=160x2/160x4
   6724  27656					       endif
   6725  27656
   6726  27656			20 25 f5	       jsr	waitforvblankstart	; give the some vblank time to minimally update the display
   6727  27659
   6728  27659			85 3c		       sta	CTRL
   6729  2765b			8d 07 21	       sta	sCTRL
   6730  2765e
   6731  2765e			20 94 f4	       jsr	vblankresync
   6732  27661
   6733  27661			a2 01		       ldx	#1
   6734  27663			20 d5 f5	       jsr	settwobuttonmode
   6735  27666			a2 00		       ldx	#0
   6736  27668			20 d5 f5	       jsr	settwobuttonmode
   6737  2766b
   6738  2766b					       ifnconst	.altgamestart
   6739  2766b			4c 00 80	       jmp	game
   6740  2766e				   -	       else
   6741  2766e				   -	       jmp	.altgamestart
   6742  2766e					       endif
   6743  2766e
   6744  2766e							; Provided under the CC0 license. See the included LICENSE.txt for details.
   6745  2766e
   6746  2766e							;************** Setup DLL entries
   6747  2766e
   6748  2766e							; setup some working definitions, to avoid ifnconst mess elsewhere...
   6749  2766e					       ifnconst	SCREENHEIGHT
   6750  2766e			00 c0	    WSCREENHEIGHT =	192
   6751  2766e				   -	       else
   6752  2766e				   -WSCREENHEIGHT =	SCREENHEIGHT
   6753  2766e					       endif
   6754  2766e
   6755  2766e				   -	       ifnconst	ZONEHEIGHT
   6756  2766e				   -WZONEHEIGHT =	16
   6757  2766e					       else
   6758  2766e			00 10	    WZONEHEIGHT =	ZONEHEIGHT
   6759  2766e					       endif
   6760  2766e
   6761  2766e					       ifnconst	ZONECOUNT
   6762  2766e				   -	       ifconst	VSCROLL
   6763  2766e				   -WZONECOUNT =	((WSCREENHEIGHT/WZONEHEIGHT)+1)
   6764  2766e					       else		; !VSCROLL
   6765  2766e			00 0c	    WZONECOUNT =	(WSCREENHEIGHT/WZONEHEIGHT)
   6766  2766e					       endif		; !VSCROLL
   6767  2766e				   -	       else
   6768  2766e				   -	       ifconst	VSCROLL
   6769  2766e				   -WZONECOUNT =	(ZONECOUNT+1)
   6770  2766e				   -	       else		; !VSCROLL
   6771  2766e				   -WZONECOUNT =	ZONECOUNT
   6772  2766e				   -	       endif		; !VSCROLL
   6773  2766e					       endif
   6774  2766e
   6775  2766e							; top of the frame, non-visible lines. this is based on NTSC,
   6776  2766e							; but we add in extra NV lines at the end of the display to ensure
   6777  2766e							; our PAL friends can play the game without it crashing.
   6778  2766e			00 19	    NVLINES    =	((243-WSCREENHEIGHT)/2)
   6779  2766e
   6780  2766e				   -	       ifnconst	DLMEMSTART
   6781  2766e				   -	       ifnconst	DOUBLEBUFFER
   6782  2766e				   -WDLMEMSTART =	$1880
   6783  2766e				   -	       else
   6784  2766e				   -WDLMEMSTART =	$18E0
   6785  2766e				   -	       endif		; DOUBLEBUFFER
   6786  2766e					       else
   6787  2766e			40 00	    WDLMEMSTART =	DLMEMSTART
   6788  2766e					       endif
   6789  2766e
   6790  2766e				   -	       ifnconst	DLMEMEND
   6791  2766e				   -	       ifconst	EXTRADLMEMORY
   6792  2766e				   -WDLMEMEND  =	$23FF
   6793  2766e				   -	       else
   6794  2766e				   -WDLMEMEND  =	$1FFF
   6795  2766e				   -	       endif
   6796  2766e					       else
   6797  2766e			7f ff	    WDLMEMEND  =	DLMEMEND
   6798  2766e					       endif
   6799  2766e
   6800  2766e
   6801  2766e				    WMEMSIZE   SET	(WDLMEMEND-WDLMEMSTART+1)
   6802  2766e
   6803  2766e				   -	       ifconst	VSCROLL
   6804  2766e				   -	       ifnconst	DOUBLEBUFFER
   6805  2766e				   -			; give the last zone extra ram for the dma mask objects...
   6806  2766e				   -WMEMSIZE   SET	(WMEMSIZE-(maskscrollspriteend-maskscrollsprite))
   6807  2766e				   -	       endif		; DOUBLEBUFFER
   6808  2766e					       endif		; VSCROLL
   6809  2766e
   6810  2766e				   -	       ifnconst	DOUBLEBUFFER
   6811  2766e				   -DLLASTOBJ  =	((((WMEMSIZE/WZONECOUNT)-2)/5)*5)	; -2 to always ensure we have 1x double-byte terminator
   6812  2766e					       else
   6813  2766e			02 a8	    DLLASTOBJ  =	((((WMEMSIZE/WZONECOUNT)-4)/10)*5)	; -4 to always ensure we have 2x double-byte terminators
   6814  2766e					       endif
   6815  2766e
   6816  2766e			02 aa	    TDOUBLEBUFFEROFFSET =	(DLLASTOBJ+2)	; offset between DL buffers. ie. half the real DL
   6817  2766e					       if	TDOUBLEBUFFEROFFSET > 255
   6818  2766e			00 ff	    DOUBLEBUFFEROFFSET =	255
   6819  2766e				   -	       else
   6820  2766e				   -DOUBLEBUFFEROFFSET =	(DLLASTOBJ+2)
   6821  2766e					       endif
   6822  2766e
   6823  2766e				   -	       ifconst	EXTRADLMEMORY
   6824  2766e				   -SECONDDLHALFSTART SET	$2300
   6825  2766e					       endif
   6826  2766e
   6827  2766e				    DLPOINTH
   6828  2766e				    DLINDEX    SET	0
   6829  2766e					       REPEAT	WZONECOUNT
   6830  2766e				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   6831  2766e				   -	       ifconst	EXTRADLMEMORY
   6832  2766e				   -	       if	TMPMEMADDRESS > $1FFF
   6833  2766e				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6834  2766e				   -	       else
   6835  2766e				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   6836  2766e				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6837  2766e				   -SECONDDLHALFSTART SET	TMPMEMADDRESS
   6838  2766e				   -	       endif
   6839  2766e				   -	       endif		; TMPMEMADDRESS > $1FFF
   6840  2766e					       endif		; EXTRADLMEMORY
   6841  2766e							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   6842  2766e			40		       .byte.b	>TMPMEMADDRESS
   6843  2766e				    DLINDEX    SET	DLINDEX + 1
   6829  2766e					       REPEND
   6830  2766e				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   6831  2766f				   -	       ifconst	EXTRADLMEMORY
   6832  2766f				   -	       if	TMPMEMADDRESS > $1FFF
   6833  2766f				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6834  2766f				   -	       else
   6835  2766f				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   6836  2766f				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6837  2766f				   -SECONDDLHALFSTART SET	TMPMEMADDRESS
   6838  2766f				   -	       endif
   6839  2766f				   -	       endif		; TMPMEMADDRESS > $1FFF
   6840  2766f					       endif		; EXTRADLMEMORY
   6841  2766f							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   6842  2766f			45		       .byte.b	>TMPMEMADDRESS
   6843  2766f				    DLINDEX    SET	DLINDEX + 1
   6829  2766f					       REPEND
   6830  2766f				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   6831  27670				   -	       ifconst	EXTRADLMEMORY
   6832  27670				   -	       if	TMPMEMADDRESS > $1FFF
   6833  27670				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6834  27670				   -	       else
   6835  27670				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   6836  27670				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6837  27670				   -SECONDDLHALFSTART SET	TMPMEMADDRESS
   6838  27670				   -	       endif
   6839  27670				   -	       endif		; TMPMEMADDRESS > $1FFF
   6840  27670					       endif		; EXTRADLMEMORY
   6841  27670							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   6842  27670			4a		       .byte.b	>TMPMEMADDRESS
   6843  27670				    DLINDEX    SET	DLINDEX + 1
   6829  27670					       REPEND
   6830  27670				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   6831  27671				   -	       ifconst	EXTRADLMEMORY
   6832  27671				   -	       if	TMPMEMADDRESS > $1FFF
   6833  27671				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6834  27671				   -	       else
   6835  27671				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   6836  27671				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6837  27671				   -SECONDDLHALFSTART SET	TMPMEMADDRESS
   6838  27671				   -	       endif
   6839  27671				   -	       endif		; TMPMEMADDRESS > $1FFF
   6840  27671					       endif		; EXTRADLMEMORY
   6841  27671							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   6842  27671			50		       .byte.b	>TMPMEMADDRESS
   6843  27671				    DLINDEX    SET	DLINDEX + 1
   6829  27671					       REPEND
   6830  27671				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   6831  27672				   -	       ifconst	EXTRADLMEMORY
   6832  27672				   -	       if	TMPMEMADDRESS > $1FFF
   6833  27672				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6834  27672				   -	       else
   6835  27672				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   6836  27672				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6837  27672				   -SECONDDLHALFSTART SET	TMPMEMADDRESS
   6838  27672				   -	       endif
   6839  27672				   -	       endif		; TMPMEMADDRESS > $1FFF
   6840  27672					       endif		; EXTRADLMEMORY
   6841  27672							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   6842  27672			55		       .byte.b	>TMPMEMADDRESS
   6843  27672				    DLINDEX    SET	DLINDEX + 1
   6829  27672					       REPEND
   6830  27672				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   6831  27673				   -	       ifconst	EXTRADLMEMORY
   6832  27673				   -	       if	TMPMEMADDRESS > $1FFF
   6833  27673				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6834  27673				   -	       else
   6835  27673				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   6836  27673				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6837  27673				   -SECONDDLHALFSTART SET	TMPMEMADDRESS
   6838  27673				   -	       endif
   6839  27673				   -	       endif		; TMPMEMADDRESS > $1FFF
   6840  27673					       endif		; EXTRADLMEMORY
   6841  27673							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   6842  27673			5a		       .byte.b	>TMPMEMADDRESS
   6843  27673				    DLINDEX    SET	DLINDEX + 1
   6829  27673					       REPEND
   6830  27673				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   6831  27674				   -	       ifconst	EXTRADLMEMORY
   6832  27674				   -	       if	TMPMEMADDRESS > $1FFF
   6833  27674				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6834  27674				   -	       else
   6835  27674				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   6836  27674				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6837  27674				   -SECONDDLHALFSTART SET	TMPMEMADDRESS
   6838  27674				   -	       endif
   6839  27674				   -	       endif		; TMPMEMADDRESS > $1FFF
   6840  27674					       endif		; EXTRADLMEMORY
   6841  27674							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   6842  27674			60		       .byte.b	>TMPMEMADDRESS
   6843  27674				    DLINDEX    SET	DLINDEX + 1
   6829  27674					       REPEND
   6830  27674				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   6831  27675				   -	       ifconst	EXTRADLMEMORY
   6832  27675				   -	       if	TMPMEMADDRESS > $1FFF
   6833  27675				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6834  27675				   -	       else
   6835  27675				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   6836  27675				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6837  27675				   -SECONDDLHALFSTART SET	TMPMEMADDRESS
   6838  27675				   -	       endif
   6839  27675				   -	       endif		; TMPMEMADDRESS > $1FFF
   6840  27675					       endif		; EXTRADLMEMORY
   6841  27675							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   6842  27675			65		       .byte.b	>TMPMEMADDRESS
   6843  27675				    DLINDEX    SET	DLINDEX + 1
   6829  27675					       REPEND
   6830  27675				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   6831  27676				   -	       ifconst	EXTRADLMEMORY
   6832  27676				   -	       if	TMPMEMADDRESS > $1FFF
   6833  27676				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6834  27676				   -	       else
   6835  27676				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   6836  27676				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6837  27676				   -SECONDDLHALFSTART SET	TMPMEMADDRESS
   6838  27676				   -	       endif
   6839  27676				   -	       endif		; TMPMEMADDRESS > $1FFF
   6840  27676					       endif		; EXTRADLMEMORY
   6841  27676							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   6842  27676			6a		       .byte.b	>TMPMEMADDRESS
   6843  27676				    DLINDEX    SET	DLINDEX + 1
   6829  27676					       REPEND
   6830  27676				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   6831  27677				   -	       ifconst	EXTRADLMEMORY
   6832  27677				   -	       if	TMPMEMADDRESS > $1FFF
   6833  27677				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6834  27677				   -	       else
   6835  27677				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   6836  27677				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6837  27677				   -SECONDDLHALFSTART SET	TMPMEMADDRESS
   6838  27677				   -	       endif
   6839  27677				   -	       endif		; TMPMEMADDRESS > $1FFF
   6840  27677					       endif		; EXTRADLMEMORY
   6841  27677							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   6842  27677			70		       .byte.b	>TMPMEMADDRESS
   6843  27677				    DLINDEX    SET	DLINDEX + 1
   6829  27677					       REPEND
   6830  27677				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   6831  27678				   -	       ifconst	EXTRADLMEMORY
   6832  27678				   -	       if	TMPMEMADDRESS > $1FFF
   6833  27678				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6834  27678				   -	       else
   6835  27678				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   6836  27678				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6837  27678				   -SECONDDLHALFSTART SET	TMPMEMADDRESS
   6838  27678				   -	       endif
   6839  27678				   -	       endif		; TMPMEMADDRESS > $1FFF
   6840  27678					       endif		; EXTRADLMEMORY
   6841  27678							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   6842  27678			75		       .byte.b	>TMPMEMADDRESS
   6843  27678				    DLINDEX    SET	DLINDEX + 1
   6829  27678					       REPEND
   6830  27678				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   6831  27679				   -	       ifconst	EXTRADLMEMORY
   6832  27679				   -	       if	TMPMEMADDRESS > $1FFF
   6833  27679				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6834  27679				   -	       else
   6835  27679				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   6836  27679				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6837  27679				   -SECONDDLHALFSTART SET	TMPMEMADDRESS
   6838  27679				   -	       endif
   6839  27679				   -	       endif		; TMPMEMADDRESS > $1FFF
   6840  27679					       endif		; EXTRADLMEMORY
   6841  27679							;echo " "," ZONE",[DLINDEX]d,"ADDRESS: ",TMPMEMADDRESS
   6842  27679			7a		       .byte.b	>TMPMEMADDRESS
   6843  27679				    DLINDEX    SET	DLINDEX + 1
   6844  2767a					       REPEND
   6845  2767a
   6846  2767a				   -	       ifconst	EXTRADLMEMORY
   6847  2767a				   -	       echo	"   ",[SECONDDLHALFSTART],"to",[$27FF],"was claimed as extra DL memory."
   6848  2767a					       endif
   6849  2767a
   6850  2767a
   6851  2767a				    DLPOINTL
   6852  2767a				    DLINDEX    SET	0
   6853  2767a					       REPEAT	WZONECOUNT
   6854  2767a				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   6855  2767a				   -	       ifconst	EXTRADLMEMORY
   6856  2767a				   -	       if	TMPMEMADDRESS > $1FFF
   6857  2767a				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6858  2767a				   -	       else
   6859  2767a				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   6860  2767a				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6861  2767a				   -	       endif
   6862  2767a				   -	       endif		; TMPMEMADDRESS > $1FFF
   6863  2767a					       endif		; EXTRADLMEMORY
   6864  2767a			00		       .byte.b	<TMPMEMADDRESS
   6865  2767a				    DLINDEX    SET	DLINDEX + 1
   6853  2767a					       REPEND
   6854  2767a				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   6855  2767b				   -	       ifconst	EXTRADLMEMORY
   6856  2767b				   -	       if	TMPMEMADDRESS > $1FFF
   6857  2767b				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6858  2767b				   -	       else
   6859  2767b				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   6860  2767b				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6861  2767b				   -	       endif
   6862  2767b				   -	       endif		; TMPMEMADDRESS > $1FFF
   6863  2767b					       endif		; EXTRADLMEMORY
   6864  2767b			55		       .byte.b	<TMPMEMADDRESS
   6865  2767b				    DLINDEX    SET	DLINDEX + 1
   6853  2767b					       REPEND
   6854  2767b				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   6855  2767c				   -	       ifconst	EXTRADLMEMORY
   6856  2767c				   -	       if	TMPMEMADDRESS > $1FFF
   6857  2767c				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6858  2767c				   -	       else
   6859  2767c				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   6860  2767c				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6861  2767c				   -	       endif
   6862  2767c				   -	       endif		; TMPMEMADDRESS > $1FFF
   6863  2767c					       endif		; EXTRADLMEMORY
   6864  2767c			aa		       .byte.b	<TMPMEMADDRESS
   6865  2767c				    DLINDEX    SET	DLINDEX + 1
   6853  2767c					       REPEND
   6854  2767c				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   6855  2767d				   -	       ifconst	EXTRADLMEMORY
   6856  2767d				   -	       if	TMPMEMADDRESS > $1FFF
   6857  2767d				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6858  2767d				   -	       else
   6859  2767d				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   6860  2767d				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6861  2767d				   -	       endif
   6862  2767d				   -	       endif		; TMPMEMADDRESS > $1FFF
   6863  2767d					       endif		; EXTRADLMEMORY
   6864  2767d			00		       .byte.b	<TMPMEMADDRESS
   6865  2767d				    DLINDEX    SET	DLINDEX + 1
   6853  2767d					       REPEND
   6854  2767d				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   6855  2767e				   -	       ifconst	EXTRADLMEMORY
   6856  2767e				   -	       if	TMPMEMADDRESS > $1FFF
   6857  2767e				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6858  2767e				   -	       else
   6859  2767e				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   6860  2767e				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6861  2767e				   -	       endif
   6862  2767e				   -	       endif		; TMPMEMADDRESS > $1FFF
   6863  2767e					       endif		; EXTRADLMEMORY
   6864  2767e			55		       .byte.b	<TMPMEMADDRESS
   6865  2767e				    DLINDEX    SET	DLINDEX + 1
   6853  2767e					       REPEND
   6854  2767e				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   6855  2767f				   -	       ifconst	EXTRADLMEMORY
   6856  2767f				   -	       if	TMPMEMADDRESS > $1FFF
   6857  2767f				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6858  2767f				   -	       else
   6859  2767f				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   6860  2767f				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6861  2767f				   -	       endif
   6862  2767f				   -	       endif		; TMPMEMADDRESS > $1FFF
   6863  2767f					       endif		; EXTRADLMEMORY
   6864  2767f			aa		       .byte.b	<TMPMEMADDRESS
   6865  2767f				    DLINDEX    SET	DLINDEX + 1
   6853  2767f					       REPEND
   6854  2767f				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   6855  27680				   -	       ifconst	EXTRADLMEMORY
   6856  27680				   -	       if	TMPMEMADDRESS > $1FFF
   6857  27680				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6858  27680				   -	       else
   6859  27680				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   6860  27680				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6861  27680				   -	       endif
   6862  27680				   -	       endif		; TMPMEMADDRESS > $1FFF
   6863  27680					       endif		; EXTRADLMEMORY
   6864  27680			00		       .byte.b	<TMPMEMADDRESS
   6865  27680				    DLINDEX    SET	DLINDEX + 1
   6853  27680					       REPEND
   6854  27680				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   6855  27681				   -	       ifconst	EXTRADLMEMORY
   6856  27681				   -	       if	TMPMEMADDRESS > $1FFF
   6857  27681				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6858  27681				   -	       else
   6859  27681				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   6860  27681				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6861  27681				   -	       endif
   6862  27681				   -	       endif		; TMPMEMADDRESS > $1FFF
   6863  27681					       endif		; EXTRADLMEMORY
   6864  27681			55		       .byte.b	<TMPMEMADDRESS
   6865  27681				    DLINDEX    SET	DLINDEX + 1
   6853  27681					       REPEND
   6854  27681				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   6855  27682				   -	       ifconst	EXTRADLMEMORY
   6856  27682				   -	       if	TMPMEMADDRESS > $1FFF
   6857  27682				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6858  27682				   -	       else
   6859  27682				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   6860  27682				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6861  27682				   -	       endif
   6862  27682				   -	       endif		; TMPMEMADDRESS > $1FFF
   6863  27682					       endif		; EXTRADLMEMORY
   6864  27682			aa		       .byte.b	<TMPMEMADDRESS
   6865  27682				    DLINDEX    SET	DLINDEX + 1
   6853  27682					       REPEND
   6854  27682				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   6855  27683				   -	       ifconst	EXTRADLMEMORY
   6856  27683				   -	       if	TMPMEMADDRESS > $1FFF
   6857  27683				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6858  27683				   -	       else
   6859  27683				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   6860  27683				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6861  27683				   -	       endif
   6862  27683				   -	       endif		; TMPMEMADDRESS > $1FFF
   6863  27683					       endif		; EXTRADLMEMORY
   6864  27683			00		       .byte.b	<TMPMEMADDRESS
   6865  27683				    DLINDEX    SET	DLINDEX + 1
   6853  27683					       REPEND
   6854  27683				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   6855  27684				   -	       ifconst	EXTRADLMEMORY
   6856  27684				   -	       if	TMPMEMADDRESS > $1FFF
   6857  27684				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6858  27684				   -	       else
   6859  27684				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   6860  27684				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6861  27684				   -	       endif
   6862  27684				   -	       endif		; TMPMEMADDRESS > $1FFF
   6863  27684					       endif		; EXTRADLMEMORY
   6864  27684			55		       .byte.b	<TMPMEMADDRESS
   6865  27684				    DLINDEX    SET	DLINDEX + 1
   6853  27684					       REPEND
   6854  27684				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   6855  27685				   -	       ifconst	EXTRADLMEMORY
   6856  27685				   -	       if	TMPMEMADDRESS > $1FFF
   6857  27685				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6858  27685				   -	       else
   6859  27685				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   6860  27685				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6861  27685				   -	       endif
   6862  27685				   -	       endif		; TMPMEMADDRESS > $1FFF
   6863  27685					       endif		; EXTRADLMEMORY
   6864  27685			aa		       .byte.b	<TMPMEMADDRESS
   6865  27685				    DLINDEX    SET	DLINDEX + 1
   6866  27686					       REPEND
   6867  27686
   6868  27686
   6869  27686				    DLINDEX    SET	0
   6870  27686					       REPEAT	WZONECOUNT
   6871  27686				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   6872  27686				   -	       ifconst	EXTRADLMEMORY
   6873  27686				   -	       if	TMPMEMADDRESS > $1FFF
   6874  27686				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6875  27686				   -	       else
   6876  27686				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   6877  27686				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6878  27686				   -	       endif
   6879  27686				   -	       endif		; TMPMEMADDRESS > $1FFF
   6880  27686					       endif		; EXTRADLMEMORY
   6881  27686
   6882  27686			40 00	    ZONE0ADDRESS =	TMPMEMADDRESS
   6883  27686				    LASTZONEADDRESS SET	TMPMEMADDRESS
   6884  27686
   6885  27686				    DLINDEX    SET	DLINDEX + 1
   6870  27686					       REPEND
   6871  27686				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   6872  27686				   -	       ifconst	EXTRADLMEMORY
   6873  27686				   -	       if	TMPMEMADDRESS > $1FFF
   6874  27686				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6875  27686				   -	       else
   6876  27686				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   6877  27686				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6878  27686				   -	       endif
   6879  27686				   -	       endif		; TMPMEMADDRESS > $1FFF
   6880  27686					       endif		; EXTRADLMEMORY
   6881  27686
   6882  27686			45 55	    ZONE1ADDRESS =	TMPMEMADDRESS
   6883  27686				    LASTZONEADDRESS SET	TMPMEMADDRESS
   6884  27686
   6885  27686				    DLINDEX    SET	DLINDEX + 1
   6870  27686					       REPEND
   6871  27686				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   6872  27686				   -	       ifconst	EXTRADLMEMORY
   6873  27686				   -	       if	TMPMEMADDRESS > $1FFF
   6874  27686				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6875  27686				   -	       else
   6876  27686				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   6877  27686				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6878  27686				   -	       endif
   6879  27686				   -	       endif		; TMPMEMADDRESS > $1FFF
   6880  27686					       endif		; EXTRADLMEMORY
   6881  27686
   6882  27686			4a aa	    ZONE2ADDRESS =	TMPMEMADDRESS
   6883  27686				    LASTZONEADDRESS SET	TMPMEMADDRESS
   6884  27686
   6885  27686				    DLINDEX    SET	DLINDEX + 1
   6870  27686					       REPEND
   6871  27686				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   6872  27686				   -	       ifconst	EXTRADLMEMORY
   6873  27686				   -	       if	TMPMEMADDRESS > $1FFF
   6874  27686				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6875  27686				   -	       else
   6876  27686				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   6877  27686				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6878  27686				   -	       endif
   6879  27686				   -	       endif		; TMPMEMADDRESS > $1FFF
   6880  27686					       endif		; EXTRADLMEMORY
   6881  27686
   6882  27686			50 00	    ZONE3ADDRESS =	TMPMEMADDRESS
   6883  27686				    LASTZONEADDRESS SET	TMPMEMADDRESS
   6884  27686
   6885  27686				    DLINDEX    SET	DLINDEX + 1
   6870  27686					       REPEND
   6871  27686				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   6872  27686				   -	       ifconst	EXTRADLMEMORY
   6873  27686				   -	       if	TMPMEMADDRESS > $1FFF
   6874  27686				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6875  27686				   -	       else
   6876  27686				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   6877  27686				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6878  27686				   -	       endif
   6879  27686				   -	       endif		; TMPMEMADDRESS > $1FFF
   6880  27686					       endif		; EXTRADLMEMORY
   6881  27686
   6882  27686			55 55	    ZONE4ADDRESS =	TMPMEMADDRESS
   6883  27686				    LASTZONEADDRESS SET	TMPMEMADDRESS
   6884  27686
   6885  27686				    DLINDEX    SET	DLINDEX + 1
   6870  27686					       REPEND
   6871  27686				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   6872  27686				   -	       ifconst	EXTRADLMEMORY
   6873  27686				   -	       if	TMPMEMADDRESS > $1FFF
   6874  27686				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6875  27686				   -	       else
   6876  27686				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   6877  27686				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6878  27686				   -	       endif
   6879  27686				   -	       endif		; TMPMEMADDRESS > $1FFF
   6880  27686					       endif		; EXTRADLMEMORY
   6881  27686
   6882  27686			5a aa	    ZONE5ADDRESS =	TMPMEMADDRESS
   6883  27686				    LASTZONEADDRESS SET	TMPMEMADDRESS
   6884  27686
   6885  27686				    DLINDEX    SET	DLINDEX + 1
   6870  27686					       REPEND
   6871  27686				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   6872  27686				   -	       ifconst	EXTRADLMEMORY
   6873  27686				   -	       if	TMPMEMADDRESS > $1FFF
   6874  27686				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6875  27686				   -	       else
   6876  27686				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   6877  27686				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6878  27686				   -	       endif
   6879  27686				   -	       endif		; TMPMEMADDRESS > $1FFF
   6880  27686					       endif		; EXTRADLMEMORY
   6881  27686
   6882  27686			60 00	    ZONE6ADDRESS =	TMPMEMADDRESS
   6883  27686				    LASTZONEADDRESS SET	TMPMEMADDRESS
   6884  27686
   6885  27686				    DLINDEX    SET	DLINDEX + 1
   6870  27686					       REPEND
   6871  27686				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   6872  27686				   -	       ifconst	EXTRADLMEMORY
   6873  27686				   -	       if	TMPMEMADDRESS > $1FFF
   6874  27686				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6875  27686				   -	       else
   6876  27686				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   6877  27686				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6878  27686				   -	       endif
   6879  27686				   -	       endif		; TMPMEMADDRESS > $1FFF
   6880  27686					       endif		; EXTRADLMEMORY
   6881  27686
   6882  27686			65 55	    ZONE7ADDRESS =	TMPMEMADDRESS
   6883  27686				    LASTZONEADDRESS SET	TMPMEMADDRESS
   6884  27686
   6885  27686				    DLINDEX    SET	DLINDEX + 1
   6870  27686					       REPEND
   6871  27686				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   6872  27686				   -	       ifconst	EXTRADLMEMORY
   6873  27686				   -	       if	TMPMEMADDRESS > $1FFF
   6874  27686				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6875  27686				   -	       else
   6876  27686				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   6877  27686				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6878  27686				   -	       endif
   6879  27686				   -	       endif		; TMPMEMADDRESS > $1FFF
   6880  27686					       endif		; EXTRADLMEMORY
   6881  27686
   6882  27686			6a aa	    ZONE8ADDRESS =	TMPMEMADDRESS
   6883  27686				    LASTZONEADDRESS SET	TMPMEMADDRESS
   6884  27686
   6885  27686				    DLINDEX    SET	DLINDEX + 1
   6870  27686					       REPEND
   6871  27686				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   6872  27686				   -	       ifconst	EXTRADLMEMORY
   6873  27686				   -	       if	TMPMEMADDRESS > $1FFF
   6874  27686				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6875  27686				   -	       else
   6876  27686				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   6877  27686				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6878  27686				   -	       endif
   6879  27686				   -	       endif		; TMPMEMADDRESS > $1FFF
   6880  27686					       endif		; EXTRADLMEMORY
   6881  27686
   6882  27686			70 00	    ZONE9ADDRESS =	TMPMEMADDRESS
   6883  27686				    LASTZONEADDRESS SET	TMPMEMADDRESS
   6884  27686
   6885  27686				    DLINDEX    SET	DLINDEX + 1
   6870  27686					       REPEND
   6871  27686				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   6872  27686				   -	       ifconst	EXTRADLMEMORY
   6873  27686				   -	       if	TMPMEMADDRESS > $1FFF
   6874  27686				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6875  27686				   -	       else
   6876  27686				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   6877  27686				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6878  27686				   -	       endif
   6879  27686				   -	       endif		; TMPMEMADDRESS > $1FFF
   6880  27686					       endif		; EXTRADLMEMORY
   6881  27686
   6882  27686			75 55	    ZONE10ADDRESS =	TMPMEMADDRESS
   6883  27686				    LASTZONEADDRESS SET	TMPMEMADDRESS
   6884  27686
   6885  27686				    DLINDEX    SET	DLINDEX + 1
   6870  27686					       REPEND
   6871  27686				    TMPMEMADDRESS SET	(((DLINDEX*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART)
   6872  27686				   -	       ifconst	EXTRADLMEMORY
   6873  27686				   -	       if	TMPMEMADDRESS > $1FFF
   6874  27686				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6875  27686				   -	       else
   6876  27686				   -	       if	((((DLINDEX+1)*WMEMSIZE)/WZONECOUNT)+WDLMEMSTART) > $1FFF
   6877  27686				   -TMPMEMADDRESS SET	(TMPMEMADDRESS + $300)
   6878  27686				   -	       endif
   6879  27686				   -	       endif		; TMPMEMADDRESS > $1FFF
   6880  27686					       endif		; EXTRADLMEMORY
   6881  27686
   6882  27686			7a aa	    ZONE11ADDRESS =	TMPMEMADDRESS
   6883  27686				    LASTZONEADDRESS SET	TMPMEMADDRESS
   6884  27686
   6885  27686				    DLINDEX    SET	DLINDEX + 1
   6886  27686					       REPEND
   6887  27686
   6888  27686
     $4000 to $7fff used as zone memory, allowing 136 display objects per zone.
   6889  27686					       echo	"   ",[WDLMEMSTART],"to",[WDLMEMEND],"used as zone memory, allowing",[(DLLASTOBJ/5)]d,"display objects per zone."
   6890  27686
   6891  27686				    DLHEIGHT
   6892  27686					       REPEAT	WZONECOUNT
   6893  27686			0f		       .byte.b	(WZONEHEIGHT-1)
   6892  27686					       REPEND
   6893  27687			0f		       .byte.b	(WZONEHEIGHT-1)
   6892  27687					       REPEND
   6893  27688			0f		       .byte.b	(WZONEHEIGHT-1)
   6892  27688					       REPEND
   6893  27689			0f		       .byte.b	(WZONEHEIGHT-1)
   6892  27689					       REPEND
   6893  2768a			0f		       .byte.b	(WZONEHEIGHT-1)
   6892  2768a					       REPEND
   6893  2768b			0f		       .byte.b	(WZONEHEIGHT-1)
   6892  2768b					       REPEND
   6893  2768c			0f		       .byte.b	(WZONEHEIGHT-1)
   6892  2768c					       REPEND
   6893  2768d			0f		       .byte.b	(WZONEHEIGHT-1)
   6892  2768d					       REPEND
   6893  2768e			0f		       .byte.b	(WZONEHEIGHT-1)
   6892  2768e					       REPEND
   6893  2768f			0f		       .byte.b	(WZONEHEIGHT-1)
   6892  2768f					       REPEND
   6893  27690			0f		       .byte.b	(WZONEHEIGHT-1)
   6892  27690					       REPEND
   6893  27691			0f		       .byte.b	(WZONEHEIGHT-1)
   6894  27692					       REPEND
   6895  27692
   6896  27692							; Provided under the CC0 license. See the included LICENSE.txt for details.
   6897  27692
   6898  27692							; a simple guard, than ensures the 7800basic code hasn't
   6899  27692							; spilled into the encryption area...
     2284 bytes left in the 7800basic reserved area.
   6900  27692					       echo	"   ",($FF7E-*)d,"bytes left in the 7800basic reserved area."
   6901  27692				   -	       if	(*>$FF7D)
   6902  27692				   -	       echo
   6903  27692				   -	       echo	"***************************"
   6904  27692				   -	       echo	"*** Abort: ROM Overflow ***"
   6905  27692				   -	       echo	"***************************"
   6906  27692				   -	       ERR		; abort the assembly
   6907  27692					       endif
   6908  27692
   6909  27692							; throw a compile
   6910  27692				   -	       ifconst	RMT
   6911  27692				   -	       ifnconst	pokeysupport
   6912  27692				   -	       echo
   6913  27692				   -	       echo	"************************************************************"
   6914  27692				   -	       echo	"*** ABORT: RMT Tracker requires 'set pokeysupport $xxxx' ***"
   6915  27692				   -	       echo	"************************************************************"
   6916  27692				   -	       ERR		; abort
   6917  27692				   -	       endif		; pokeysupport
   6918  27692				   -	       ifnconst	pokeyaddress
   6919  27692				   -	       echo
   6920  27692				   -	       echo	"************************************************************"
   6921  27692				   -	       echo	"*** ABORT: RMT Tracker requires 'set pokeysupport $xxxx' ***"
   6922  27692				   -	       echo	"************************************************************"
   6923  27692				   -	       ERR		; abort
   6924  27692				   -	       endif		; pokeyaddress
   6925  27692					       endif
   6926  27692
   6927  27692							; Provided under the CC0 license. See the included LICENSE.txt for details.
   6928  27692
   6929  27692				   -	       ifconst	DEV
   6930  27692				   -	       ifnconst	ZONEHEIGHT
   6931  27692				   -	       echo	"* the 4k 7800basic area has",[($FF7E - *)]d,"bytes free."
   6932  27692				   -	       else
   6933  27692				   -	       if	ZONEHEIGHT = 8
   6934  27692				   -	       echo	"* the 4k 7800basic area has",[($FF7E - *)]d,"bytes free."
   6935  27692				   -	       else
   6936  27692				   -	       echo	"* the 4k 7800basic area has",[($FF7E - *)]d,"bytes free."
   6937  27692				   -	       endif
   6938  27692				   -	       endif
   6939  27692					       endif
   6940  27692
   6941  27692				   -	       if	START_OF_ROM = .
   6942  27692				   -	       .byte	0
   6943  27692					       endif
   6944  27692				    START_OF_ROM SET	0
   6945  27692
   6946  27692							; FF7E/FF7F contains the 7800basic crc checksum word
   6947  27692
   6948  27692							; FF80 - FFF7 contains the 7800 encryption key 
   6949  27692
   6950  27692				   -	       ifnconst	bankswitchmode
   6951  27692				   -	       ORG	$FFF8
   6952  27692					       else
   6953  27692					       ifconst	ROM128K
   6954  27ff8					       ORG	$27FF8
   6955  27ff8					       RORG	$FFF8
   6956  27ff8					       endif
   6957  27ff8				   -	       ifconst	ROM144K
   6958  27ff8				   -	       ORG	$27FF8
   6959  27ff8				   -	       RORG	$FFF8
   6960  27ff8					       endif
   6961  27ff8				   -	       ifconst	ROM256K
   6962  27ff8				   -	       ORG	$47FF8
   6963  27ff8				   -	       RORG	$FFF8
   6964  27ff8					       endif
   6965  27ff8				   -	       ifconst	ROM272K
   6966  27ff8				   -	       ORG	$47FF8
   6967  27ff8				   -	       RORG	$FFF8
   6968  27ff8					       endif
   6969  27ff8				   -	       ifconst	ROM512K
   6970  27ff8				   -	       ORG	$87FF8
   6971  27ff8				   -	       RORG	$FFF8
   6972  27ff8					       endif
   6973  27ff8				   -	       ifconst	ROM528K
   6974  27ff8				   -	       ORG	$87FF8
   6975  27ff8				   -	       RORG	$FFF8
   6976  27ff8					       endif
   6977  27ff8					       endif
   6978  27ff8
   6979  27ff8
   6980  27ff8			ff		       .byte.b	$FF	; region verification. $FF=all regions
   6981  27ff9			f7		       .byte.b	$F7	; high nibble:  encryption check from $N000 to $FF7F. we only hash the last 4k for faster boot.
   6982  27ffa							; low nibble :  N=7 atari rainbow start, N=3 no atari rainbow
   6983  27ffa
   6984  27ffa							;Vectors
   6985  27ffa			00 f0		       .word.w	NMI
   6986  27ffc			eb f5		       .word.w	START
   6987  27ffe			67 f0		       .word.w	IRQ
   6988  28000
